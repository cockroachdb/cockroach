// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.storage.config;
option go_package = "config";

import "cockroach/proto/metadata.proto";
import "gogoproto/gogo.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
message GCPolicy {
  // TTLSeconds specifies the maximum age of a value before it's
  // garbage collected. Only older versions of values are garbage
  // collected. Specifying <=0 mean older versions are never GC'd.
  optional int32 ttl_seconds = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "TTLSeconds"];
}

// AcctConfig holds accounting configuration.
message AcctConfig {
  optional string cluster_id = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"cluster_id,omitempty\""];
}

// PermConfig holds permission configuration, specifying read/write ACLs.
message PermConfig {
  // ACL lists users with read permissions.
  repeated string read = 1 [(gogoproto.moretags) = "yaml:\"read,omitempty\""];
  // ACL lists users with write permissions.
  repeated string write = 2 [(gogoproto.moretags) = "yaml:\"write,omitempty\""];
}

// UserConfig holds per-user configuration needed for authentication.
message UserConfig {
  // Output of bcrypt: contains hash, salt, and cost.
  optional bytes hashed_password = 1 [(gogoproto.moretags) = "yaml:\"hashed_password,omitempty\""];
}

// ZoneConfig holds configuration that is needed for a range of KV pairs.
message ZoneConfig {
  // ReplicaAttrs is a slice of Attributes, each describing required attributes
  // for each replica in the zone. The order in which the attributes are stored
  // in ReplicaAttrs is arbitrary and may change.
  repeated proto.Attributes replica_attrs = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"replicas,omitempty\""];
  optional int64 range_min_bytes = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_min_bytes,omitempty\""];
  optional int64 range_max_bytes = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_max_bytes,omitempty\""];
  // If GC policy is not set, uses the next highest, non-null policy
  // in the zone config hierarchy, up to the default policy if necessary.
  optional GCPolicy gc = 4 [(gogoproto.customname) = "GC", (gogoproto.moretags) = "yaml:\"gc,omitempty\""];
}

// ConfigUnion is the union of all types that can be stored in PrefixConfig.Config
message ConfigUnion {
  option (gogoproto.onlyone) = true;
  oneof value {
    AcctConfig acct_config_val = 1;
    PermConfig perm_config_val = 2;
    UserConfig user_config_val = 3;
    ZoneConfig zone_config_val = 4;
  }
}
