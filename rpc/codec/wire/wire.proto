// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Peter Mattis (peter@cockroachlabs.com)

// Copyright 2013 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto2";

//	protorpc wire format wrapper
//
//	0. Frame Format
//	len : uvarint64
//	data: byte[len]
//
//	1. Client Send Request
//	Send RequestHeader: sendFrame(conn, hdr, len(hdr))
//	Send Request: sendFrame(conn, body, len(body))
//
//	2. Server Recv Request
//	Recv RequestHeader: recvFrame(conn, hdr, max_hdr_len, 0)
//	Recv Request: recvFrame(conn, body)
//
//	3. Server Send Response
//	Send ResponseHeader: sendFrame(conn, hdr, len(hdr))
//	Send Response: sendFrame(conn, body, len(body))
//
//	4. Client Recv Response
//	Recv ResponseHeader: recvFrame(conn, hdr, max_hdr_len, 0)
//	Recv Response: recvFrame(conn, body)
package cockroach.rpc.codec.wire;
option go_package = "wire";

import "gogoproto/gogo.proto";

enum CompressionType {
  NONE = 0;
  SNAPPY = 1;
  LZ4 = 2;
}

message RequestHeader {
  optional uint64 id = 1 [(gogoproto.nullable) = false];
  optional string method = 2;
  optional int32 method_id = 3 [(gogoproto.nullable) = false];
  optional CompressionType compression = 4 [(gogoproto.nullable) = false];
  optional uint32 uncompressed_size = 5 [(gogoproto.nullable) = false];
}

message ResponseHeader {
  optional uint64 id = 1 [(gogoproto.nullable) = false];
  optional string method = 2;
  optional string error = 3 [(gogoproto.nullable) = false];
  optional CompressionType compression = 4 [(gogoproto.nullable) = false];
  optional uint32 uncompressed_size = 5 [(gogoproto.nullable) = false];
}
