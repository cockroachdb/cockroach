package rpctest

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _test_certs_ca_crt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x4d\x8f\xba\x48\x17\xc5\xf7\x7c\x8a\x67\x6f\x9e\x88\xe2\x0b\x2e\x66\x71\xeb\x05\x2c\xba\x0b\x04\x4b\x10\x76\x20\x8a\x80\x20\xb4\xdd\x14\xf0\xe9\xa7\x75\x26\x99\x7f\xe6\x9f\x74\xa6\x36\x95\x9c\xe4\x9e\x9c\x9c\xdf\xcd\xfd\xff\xf3\x21\x6a\x32\xfb\x7f\x98\x7a\x82\x19\x0c\x83\xa0\x2f\x55\xe1\x8c\xe1\xf5\x88\x31\xdc\xf2\x0c\x24\x43\x90\x31\x0b\xd8\x36\xbe\x54\x75\xb7\x6b\x3c\x9b\x83\x6a\xe2\x7d\x6b\xee\x59\xa2\x11\x97\x22\xe4\x1e\x80\x1b\x65\x8f\x47\xb0\x50\x66\xfb\x0a\x82\x50\xc0\xcd\x17\xdc\xa3\x92\xc8\x90\xf8\xae\xcb\xa8\xbc\x3a\xd1\xf1\x94\x05\xc1\x66\x88\x47\xea\x71\xd0\x4d\x98\x1d\x28\xea\x39\x13\x95\xaf\x31\xe3\xd6\x9d\xaa\x47\x4f\x0b\x70\x95\xa7\x0b\x82\xbb\xc0\x07\xbb\x0b\xe7\x9f\x43\x32\x37\x8a\x98\x50\x97\xc3\xe2\x35\x04\x3d\xdf\xfa\xa6\x3f\xa6\x18\x11\x57\xc0\xd9\x90\x6a\x6f\x13\x58\x70\xc2\xbe\x7f\xba\x50\x38\x41\xf1\x4b\x14\xff\x88\x4f\xed\xd7\x98\x3f\xa5\x54\xfe\x4b\xcc\x9f\x52\x2a\xbf\xc7\xc4\xa8\x1e\xc1\x46\x59\xd9\x5e\xcb\xdc\xdc\x48\x15\x81\x4b\x0d\x00\x07\x15\x2e\xc8\x2c\x2c\x71\x16\x52\x90\x49\x74\x2e\x86\xe5\x4a\x29\xa5\x37\x8b\xdd\x55\x1e\x33\x73\xea\xe3\xc9\xc1\x9f\x2e\xe5\x1c\xac\xc9\x66\x6c\xf4\xc4\x16\x47\x5a\x64\xab\x9d\x3e\x68\xb5\x91\xe4\xab\x55\x97\x5b\x8b\x9e\x3a\xef\x81\xe6\xcf\xea\xe9\x7e\xe3\xe5\xca\xbc\x32\x87\x9b\xf8\x3a\x0d\x41\x6d\x78\x77\x75\xe5\x03\x19\xa8\xc4\x5f\xd4\xae\x40\xd7\x51\x2d\xdc\x4b\x74\x87\x8d\x67\x5d\x66\x8b\xf7\x5b\xdb\x4c\xbf\xd6\x62\x3a\x69\x9d\x83\x30\xbb\x20\x1b\x4f\xca\x78\x51\x07\xf8\xac\xe2\x6a\xe4\xe5\x4c\x3f\xd6\x73\x7c\xb8\xf9\xcb\xb0\x3f\x9d\xf3\xfd\xdd\x4e\x9c\x43\xf1\xc0\x20\x29\x40\xec\xa0\xae\xc0\xe8\x6b\x04\xfe\xec\x64\xeb\x71\x8a\x04\x10\x05\xdc\xed\x94\x23\xf5\x59\x60\x4a\x32\x37\x40\x48\x0c\xa7\x69\x5b\x9c\x46\xbc\x5b\xdd\x4b\x43\xe8\xdc\x5f\xec\xcd\x75\x63\x34\x7e\xfb\x6d\x90\x3f\x29\x78\x6a\x81\x98\x49\x38\x33\x41\xc9\x7e\x1a\x68\x8d\xb4\x31\x1e\x32\x10\xf4\x9d\x43\xf9\x17\xa5\x2b\xc7\xbe\xcf\x7b\x2a\x60\xf7\xf7\x26\x66\x02\xd3\xe5\x2d\x1d\x50\x94\x68\xd6\xc7\x2f\xac\xb7\xff\xda\xc8\x3d\x47\xf0\x32\xc1\x57\x6e\xb9\xf3\x4d\x11\x6b\x56\xa7\x84\x81\x7d\xe7\x1e\x48\x92\xbd\x86\x08\x95\xe9\x21\x3a\xda\x2a\xa3\xdf\x24\xb3\x12\xb2\xb4\x99\xc4\x67\x7d\x72\xa3\xaa\x24\x6e\x68\xbd\xdd\x23\x76\xed\x4e\xf6\x13\x2d\x72\xbf\x3b\x78\x32\xcd\xfb\xf0\xe3\x8d\xb6\x97\x61\x3f\x04\xeb\x28\x5f\xfb\xab\x45\x97\x44\x57\xc3\x59\x1a\xdc\x6d\x54\x11\xcc\x71\xc4\x8e\x8f\xba\xd7\x9c\x76\x59\x34\xea\x35\x14\x1a\xf9\x44\xc5\x4c\x5f\x7e\x28\x4e\xa4\x07\xbb\x6d\xd7\xf3\xa9\xe5\x9c\x52\x82\x27\x29\xb1\xef\xf5\xd9\xec\xf2\x6e\x34\xe4\xae\xf4\x53\x90\xde\x52\xa4\xe1\xf9\x31\x4f\xd5\x6a\x61\xd1\xde\x68\xbc\x68\xd2\xed\x22\x31\xac\xdf\x4c\x65\xf7\xa1\xad\x57\xf5\x61\xa0\xd6\x67\x50\x2f\xaf\x55\x95\x47\xa6\x9e\x84\xc9\xb6\x89\x62\x4b\x1f\xb6\x47\xaa\x85\x68\xb7\x8f\x2d\xf3\xed\x12\xc5\xfa\x1f\xca\xeb\x0a\x50\x9b\xfc\x7e\x19\xfe\x0c\x00\x00\xff\xff\x39\x51\x60\x80\x36\x04\x00\x00")

func test_certs_ca_crt_bytes() ([]byte, error) {
	return bindata_read(
		_test_certs_ca_crt,
		"test_certs/ca.crt",
	)
}

func test_certs_ca_crt() (*asset, error) {
	bytes, err := test_certs_ca_crt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "test_certs/ca.crt", size: 1078, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certs_node_crt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x95\x5b\x73\xa3\x3a\x12\xc7\xdf\xfd\x29\x78\x3c\xa7\x32\xbb\xe6\x7e\xe9\xaa\x3c\x88\x8b\x1d\x9c\x80\x8d\xaf\x71\xde\x00\x01\xc6\xc6\x26\x01\x62\x6c\x7f\xfa\x6d\x91\x99\x8c\xb3\xf1\x9c\xad\x5a\x4d\x4d\x4c\x49\xea\xee\x7f\xb7\x5a\x3f\x59\x49\xd5\xe4\x69\x1e\x87\x4d\x02\x3d\x0e\x87\x1d\x36\xe1\xc7\x17\x1b\xcb\xa4\xaa\xf3\xf2\x00\x9c\xc4\xfd\xc5\x9f\xc4\xbf\x3f\x17\x66\x49\x95\x87\x05\xe7\xbf\xef\xa3\xa4\x02\x4e\x60\xcb\xc2\xd5\x72\x9e\x1d\xc2\xe6\xbd\x4a\x38\x52\x64\x65\x95\x37\x9b\x3d\x70\xf5\x26\x14\x56\xf8\x39\x9d\x11\xe7\x10\x57\xe7\xd7\x06\x5d\x7f\x9a\xb8\x75\xfd\xce\x5c\x59\xf7\x8b\xd9\x0f\x6e\x36\xbf\xf7\x93\x96\x5b\x97\xd5\xee\x07\xf7\x74\xf5\x3d\xbe\xb7\xca\x78\x57\x95\x61\xbc\xf9\xc1\x59\xfe\xfd\x3c\xa9\x1b\xce\x22\xbf\x15\x87\x45\x4e\xf3\xe6\xfc\x39\xc1\x86\x5f\x36\x9c\x99\xa4\x65\x95\x00\x47\xde\x33\x8e\x13\x39\x41\x06\x41\x07\x9e\xe7\x44\x5e\x90\xb9\xa1\x37\xff\x66\x40\xd2\x26\xa9\xb8\x9b\x06\xca\x17\x83\xd9\x7b\xb4\x4d\xe2\xe6\xa6\xf4\x2f\x72\xc7\x8b\xfb\x06\xe5\x76\xba\x8b\x32\x0e\x8b\x4d\x59\x37\xff\xed\x86\x9b\xbc\x47\x45\x1e\x73\x8f\xc9\x99\x73\x0f\x69\x09\x5f\x84\x5d\x2d\x5e\x55\xb6\xaa\xc3\x1b\x15\x65\x03\x6b\x7d\x65\x03\xdc\x5f\x02\x2f\xca\x5c\x94\x37\x7f\x7f\xd9\xc6\x86\x57\xd2\xf7\xe2\xbd\xbe\xda\x02\xdf\xf6\xb0\xc1\xf3\x40\x25\x48\x43\x50\x34\x90\x65\x88\x04\x88\x22\x50\x74\xa0\x32\xd0\x04\x64\x09\x92\x18\x68\x08\x89\x06\xb1\x76\xdb\x83\xa1\x41\x9a\x80\xa6\x83\x8c\xdb\x74\xe6\x2a\xe5\x59\x71\xd3\x18\x42\x0d\x54\x03\x0c\x09\xb4\x14\x8c\x14\x74\xe5\xb6\x07\x51\x62\xd1\xe3\x94\x99\x0b\x06\xc4\x09\x18\x2a\x68\x22\xf3\x20\x1a\xc0\xa3\xdb\x08\x24\x9e\x79\x10\xd5\x3f\x78\xa0\xa0\x09\x10\x52\x88\x25\x16\x85\x47\x3f\x1a\x9e\x2e\x84\x3c\x73\xa8\xe0\x12\x26\xa8\x82\x82\xb9\xf0\x7f\xc8\x42\x04\xc9\x60\xe6\x98\x4e\xa2\xb0\x8c\x68\x0a\x92\x0c\x3c\x2a\x51\xbb\x14\x54\x88\x0d\xd0\x28\x4b\xf0\xa6\x07\xa9\x8b\xab\xa3\x00\x0a\x3a\x0a\x0e\x81\x0a\xa0\x2a\x10\x51\x10\x45\x56\x01\x5d\x83\x48\x83\x50\x61\x4b\x37\x3d\xe8\xd8\x91\x12\x48\x31\xa4\x1a\x68\x06\x44\x12\x60\x65\x64\x05\x74\x19\x64\x1e\x44\x01\x12\x94\x97\x40\x1c\x41\x94\xde\xf6\x40\x45\x10\x63\x56\x2b\x3c\x82\x34\x85\x48\x05\x29\x65\x7e\x12\x01\x68\xcc\xaa\xa7\xe1\x5f\x1d\xb4\x90\x9d\xf5\x6d\x0d\x31\x5b\x12\x23\xd6\x06\xb2\x0a\x2a\x65\x0d\x20\x61\x3a\xf4\xdb\x76\xe7\xf4\x5a\x1e\x92\x03\x5e\x15\x55\x51\x24\xad\x83\x06\xcf\xf3\x57\xe0\x78\x56\x78\xe3\x28\x71\xc9\xa9\x49\x0e\x8c\x3c\xf5\xd7\x98\x3f\x97\xcd\xb0\xc6\x86\xb6\x70\xb9\xa9\xc2\xfc\xd0\xd4\xc0\x7d\x8b\x65\x11\x18\x90\xa7\x99\x73\xcb\x9e\x5d\x9f\x45\x1d\x66\xc9\x0d\x3b\x3b\xcf\xf2\x06\xd1\xf6\x89\xb0\x1f\x48\x83\x03\x37\x4d\x5e\xdf\x69\x1e\xb2\x0b\xf6\xa3\xb3\xc7\x0b\x97\xbf\x6e\x92\x6a\x8f\xf9\xdc\x8a\xe1\xb0\x14\x68\x42\xff\x31\xd8\xfc\x69\xc6\xad\x92\x88\xb3\x8a\x1c\xdd\x20\x6a\x9a\x0d\xfe\x32\x1c\x77\x71\x7e\x2d\x23\x6d\x8f\xc8\xa2\xaf\xcb\xb7\x82\xfe\x62\x48\x07\x0f\xca\xf6\xa6\x39\x83\xea\xf7\xea\x0c\x40\xb6\x40\xe0\xc1\xb1\x41\xb6\x41\xc1\x4e\x94\xc1\x90\x81\x48\x60\x7d\xdc\x00\x02\x58\x41\xd1\x02\x6c\x31\x63\x00\x3a\x5e\x4a\x1b\x04\x13\x24\xf5\x56\x5c\xa6\x8c\xc1\xe8\xfc\xbf\x23\xef\x92\x73\x4e\x61\x80\xfd\x2d\xe1\x01\xb1\x80\xf8\x81\xfd\xa7\x0f\xc0\x21\x2c\x0e\xaf\x80\x3c\x00\x4b\x02\x41\x01\x47\x60\x4d\x6c\x9a\x40\x64\xa6\x08\x65\x12\x72\xe3\xc4\x2a\x3f\xdc\x27\xd0\x67\xfc\xed\x5f\xe1\xb7\xff\xfb\xe1\xe8\x5f\x81\xb8\x7f\xe3\xd9\xf8\x35\xea\xee\x5d\x03\x5d\x00\x9b\x80\xe6\x30\x18\x39\x03\x90\x1c\x56\x1b\xd9\xee\xfd\x53\xcd\x49\x81\xef\x05\xb6\x4c\x7e\x4c\xb8\x4e\xcf\xf7\xdc\xdd\x09\x47\x28\xad\x92\xba\x06\x41\xd4\xfe\xcd\xe3\x3f\xa1\xdb\xf4\x7f\xbc\x97\x3c\x9e\x51\xd2\xd1\x4e\x64\x57\x36\xa5\x0c\x54\x48\x2c\x04\x09\x8f\xf7\x5e\x64\x7c\x35\x3a\xa4\xd1\x08\x84\x08\x0c\x83\x5d\xee\x4f\x73\xb9\x03\x03\xf2\x52\xc0\x9b\x8d\xf0\x8b\x21\xe6\x19\xb3\x25\x0a\x0a\xd2\x1d\xcd\xd1\x0f\x4e\xd2\x8e\x1f\x3c\x9b\x47\x27\x9f\xe6\x48\xbb\x48\x87\x28\x06\x55\x67\xf8\x44\x56\x21\xcb\x91\x7c\x08\x30\x44\x05\xb2\x1c\xc9\x1a\x4a\x2c\xa8\x80\x30\x4b\x99\x4f\x7c\x34\x7e\x8b\x17\x98\x39\x46\x31\x10\xf9\x71\x87\x4f\x89\xc1\x23\x94\x41\xc3\x67\xc4\x60\x74\x47\x3a\x62\xd1\x11\x5d\xc8\xd1\x50\x60\x9b\x3f\xcd\x55\x24\x7d\x07\xda\x38\x64\xa0\xc5\x28\xc8\x1b\xc4\x15\x3a\xc1\xb8\x6a\x0a\x9a\x02\x2a\xf2\x1b\x8b\x43\x81\x47\xfd\x32\x7b\x1f\x3e\xcd\x31\x28\x3e\x11\xd8\xf0\x18\xda\xc0\x28\x94\xc9\xc6\x32\xc6\x02\xe3\xa8\x82\x15\x43\xf0\xa7\xec\x11\x53\x25\x06\x45\x29\x01\xe5\x0a\xc0\xf8\x74\xb0\x8a\x09\x1d\x23\x79\xc6\x66\x74\x88\xa8\x16\x15\xa6\x19\x29\x98\xaa\x4c\x2d\xb6\x6f\x84\x6f\x82\xc8\x7a\x28\x35\xae\xc4\x63\x38\xad\xf7\x2f\x36\x4c\x67\xe8\xfa\x9c\xe5\x4c\xe7\xee\xc0\xb5\xc8\xdc\xe9\x66\x7b\x9e\xeb\xda\x0f\x17\xcb\x22\x65\x9e\x91\xd6\x35\x49\x86\xff\xe7\xc4\x37\xb3\xdd\xdb\x66\x97\x0f\x8d\x96\x37\x49\xb0\x18\x10\xdb\x7c\xf1\x82\xba\xb5\x82\xb5\xbd\x0c\x82\xa1\xd3\x8e\x96\x8b\x8b\x33\xed\x79\x44\x1f\x12\x61\xe1\x58\xa6\xe7\xce\xf7\x4b\xc9\x1d\x14\xc7\x78\x5f\x9f\x9c\x39\x99\x98\x99\xbf\x34\x49\x3c\xb7\x1c\xa5\xa0\x67\xf3\x25\x92\x46\x95\x37\x75\x5b\x87\x74\x4e\x1e\x9d\xb6\xb0\x7b\x91\xe8\x57\xf1\xde\xd8\xac\xc5\xec\xe4\xd8\x64\xfc\x61\xe4\xcd\x4d\x61\x5a\xc4\x52\x90\x05\xbc\xd3\x3e\x6c\x62\xdf\x9b\x07\xed\xd8\x26\x67\xfc\x3d\xe1\x6f\xbb\xea\xe6\x16\x6d\xef\xcb\xe4\xd6\x7c\xbe\x25\xf3\x8f\x2a\xb7\x24\xe8\x7d\x44\x2c\xe7\xd6\xc2\x3f\xae\xc5\xe6\x1c\x89\x83\x6d\x68\x3b\xbe\x47\xea\x0f\xa3\x93\xe7\xd0\xe1\xf2\x42\x6d\x67\xe6\x99\xa4\x9b\x23\x27\x6f\x14\x0d\x8d\xed\x7a\x75\x2a\x7b\x91\xe4\xf3\x9e\x3b\x4c\x3d\xc2\x0f\xad\xd9\xdb\x70\xe6\x46\x92\x1d\x38\xac\x70\x84\xc8\x43\x9f\xd8\x96\x99\x07\x8f\x66\x16\xd8\xf3\xbb\x82\x3a\x75\xd4\xac\x05\x5f\xb1\x35\xbf\x3a\x9c\x94\xf4\xae\x97\x38\x55\x79\x77\x24\xeb\xfe\x23\x7d\xdd\x49\x77\xe9\x66\xe6\x3f\x5f\xee\xb2\x97\xcb\xeb\xcb\xb9\x6f\xed\x1e\xd5\x8b\x95\x8e\x72\xe1\x54\xc5\xe3\x81\x65\xc6\xa4\x34\x8b\xe9\x5b\xf1\x12\xf3\x23\x57\x69\x95\xb4\xe8\xf5\x1b\x9d\x37\x0f\xe1\x9c\xd6\x85\x71\xb7\x5d\xb8\x99\x2c\x3e\x8d\x1b\x4c\x72\x36\xea\x6f\xb4\xa4\x18\x97\x99\x3d\x99\x50\xa5\x3e\xfb\x83\x8d\x43\x36\xb2\xa2\x3d\x1d\x0d\xb7\xf6\x26\x76\xbf\xd9\xde\x5d\x7a\x32\x6d\xf7\xa9\xb5\x51\xa7\xee\xc9\x79\xd4\x9a\x61\x94\xb4\xda\x24\x70\x6d\x12\x10\xb3\x94\x1f\x64\xcf\x7d\x10\x3c\xb2\x63\xb9\x53\xa7\x0d\x2c\x8f\x90\xd6\x6a\xb1\xc8\x53\x7e\x82\x79\xda\x3d\x92\x3d\x67\x9e\xc9\x77\x1b\x46\x41\xb0\xf2\xcc\x60\x68\x59\x58\x40\x6c\x1e\xb3\xf5\x2c\x33\xcb\x2a\x33\x73\x06\x66\x10\xdb\xd8\x60\x94\x15\xfd\x21\x90\x9d\x41\x16\x2c\x2e\x7c\x1b\xf4\xb4\x85\xb0\x34\x47\xb3\x6d\x6b\x16\xe1\x39\x3f\xbb\x07\x79\x4f\x87\x97\x75\x9b\xad\xbb\x53\xa0\x6e\x3b\x33\xb3\x0b\xfa\x71\xc9\x42\x3f\x4c\xd4\x52\xf2\xda\xed\xdd\xdb\xc8\x5c\xf4\xed\x41\xe2\x6c\x7a\xef\xea\x34\x5c\x86\x6f\x9b\xe7\x70\x1a\x79\x83\xdd\xc9\xba\x90\xd1\xc7\xd1\xae\xe7\xa4\x58\xce\xbd\xa9\xd3\xda\x6d\xd7\x17\xae\xd3\x6e\xc6\x2f\xcf\x71\xb6\x5a\x19\xe7\xf0\x67\x7f\xf4\xd8\xb9\x9a\xa7\xef\x0d\xf2\x87\xfe\x08\x3c\x3c\xdb\x9f\xbd\xf0\xb0\xc4\xfe\xe8\x51\xcb\xb4\x83\xb5\x3b\x22\xee\x43\x98\xee\x0f\xc7\xc9\xeb\xd4\xff\xd9\x79\xd4\xc1\xa8\x1e\x09\x1f\xcc\x07\x9d\x10\x82\x4a\x82\xf5\xe8\xb1\x7c\x71\x37\xc7\xd8\x27\x01\xab\x0b\xb1\x7b\xd9\xda\x21\xd6\x52\x7e\x25\xdb\xbe\xc1\x0f\xc2\x27\x92\x8c\xe4\xa2\xb5\xa3\xa1\xb2\x17\x03\x45\xd3\x87\xbb\x2c\x6e\xc7\xb1\xb1\xe8\x8f\x34\xdb\x13\x93\xd6\xe6\xa3\x7e\x95\xeb\xa1\xbb\xec\xcf\xb2\x68\xda\x4b\x36\x79\x53\x2a\x3b\xfa\x24\x4c\xe6\x24\xda\x9e\x0f\x8f\x97\x42\xe7\xc3\x1d\xf5\x8b\x67\xff\x65\xfe\x44\xdf\x1e\xce\xeb\x63\x30\x3c\xbf\x8e\x5f\xc6\xc6\xe5\x52\xad\x0c\x21\x2c\x76\xbe\x5d\xcf\x56\x07\x52\x3a\xbd\x6a\xb4\xa2\x7c\xf0\x64\x1a\x82\xbd\x7a\x36\x5e\xb7\xfd\x8b\x12\x3e\x2d\xb2\xa9\x4c\x89\x7a\x70\xe3\xc2\x8f\x8e\xa2\xbe\x59\xdd\xf1\xfb\x83\x12\xd1\xf8\xfe\x03\x2e\x8e\x6f\x7f\x47\xcb\x7f\x02\x00\x00\xff\xff\xa9\x89\xc7\xcb\xf0\x0d\x00\x00")

func test_certs_node_crt_bytes() ([]byte, error) {
	return bindata_read(
		_test_certs_node_crt,
		"test_certs/node.crt",
	)
}

func test_certs_node_crt() (*asset, error) {
	bytes, err := test_certs_node_crt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "test_certs/node.crt", size: 3568, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_certs_node_key = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xd3\xb9\xba\xaa\xca\x02\x04\xe0\x9c\xa7\x58\x39\xdf\xfd\x80\xc5\x24\xc1\x0d\xba\x99\x1b\x44\x46\x15\x32\x91\xa1\x11\x68\x14\x90\xe9\xe9\xcf\x3e\x3b\x3e\x15\x54\x52\x51\x05\xff\xff\xfe\x0d\xd4\x4d\xdb\xfb\x09\x23\xf0\xe3\x87\xf6\x15\xc4\xfa\x8f\xa3\xa7\x7f\x17\xea\x6c\xdb\xea\x1d\xd8\x10\x00\x07\xd6\x81\x16\xd3\x5d\xa1\x4f\xf9\x9c\x72\x9e\xa8\xc9\xde\x48\x36\xb1\xa2\x4b\x7d\x1c\xe8\x05\xa4\x8c\x53\xbc\x5b\x9e\xae\x70\xe4\xdd\x0f\xba\xce\x8e\x77\xb6\x53\x8c\xda\x3a\xd2\xa1\x56\xa8\xe1\xb6\xf1\x79\x31\x54\xf8\x04\x03\xec\xc2\x4f\x97\x3d\x59\x64\x8b\xab\x58\x75\xcc\x7c\x62\x21\x79\xc4\xc5\xd4\x29\xf4\x2b\xb1\x6b\xe1\xd7\xbd\xcc\x46\xb7\x44\x88\xa1\xb0\x5c\x76\x97\xa1\xd6\x7c\xbf\x10\xa7\xdd\x33\xb0\x0e\xb0\x20\xca\xee\xa2\xd8\xd3\xd9\xd7\x98\xf9\x45\x1f\x42\xb1\xf6\x95\x8a\xa5\xd0\xde\x74\x47\x9e\xcd\xbc\x5c\x65\x3f\xb0\x35\x10\x00\x48\x81\xc1\x04\x77\xbb\x1e\x75\x68\x1a\xc5\x60\x70\xd8\xd5\x2b\x3e\xfd\xd5\x54\xc5\xfa\x15\xe2\xfd\xad\xbf\x4e\x3c\x17\x8a\x1e\x27\x46\x66\x1f\x88\x43\x3d\xcf\x63\x92\x64\xf0\xad\x3b\xa6\xb7\x38\x07\x95\x4a\xeb\x6f\x1e\x2e\x0f\xf9\x33\xb2\x29\x31\x85\x35\x99\x9d\xe6\xb6\xa7\x76\x82\x90\xd6\xae\xbb\x6c\x32\x4a\x58\x5f\x78\xf8\xcb\x97\x8d\x9a\x31\xc5\x6e\x22\xfa\x7e\x89\x12\x89\x39\x55\x5d\x6e\x53\x53\x1f\xfc\x39\xaf\x85\x35\x8f\xc4\xac\x7d\xb6\xdd\x2b\x6f\x04\xd2\xad\x4c\xca\xb0\x9c\x2f\x34\x7d\xf6\xe0\xa7\x8d\x7d\x8f\x1f\xba\x13\x80\xae\x06\x81\x76\x48\xd0\xbf\xcf\x47\x8c\x32\xf5\x44\xa8\x78\x0e\x72\x6c\xc7\x9f\xd3\x54\x54\x5a\x1a\xd4\x75\xec\x35\xfa\xed\x5b\x4e\xe5\x57\x51\xcb\xeb\x07\xf4\xc4\xf3\x94\xe6\x4f\x5f\x85\x94\xd9\x24\x9f\x98\xc7\xcb\x6c\x9e\x86\x71\x4b\xcb\x0b\xc9\x29\xc2\x14\x17\x89\xa9\x30\x68\x75\xc0\x93\x43\x19\x92\xe7\x87\x7d\xd1\x59\x68\xa0\xf4\x3b\x1e\xdb\xbb\x2d\xe5\x50\xde\x5d\xd7\xd5\xd6\xcc\x31\x59\xe3\x8c\xa2\x16\x3f\x8e\x3b\x87\x36\x35\xb1\x63\xca\x69\xc7\xdb\xfa\x5d\x1e\xa2\x16\x63\x25\xea\x9f\x5b\x6f\x85\x93\xad\xf6\x3c\xf1\x05\x26\xc8\x69\x3e\x40\x20\xe6\xdc\xe0\x14\xb3\x91\xa9\x5c\xdd\x08\xcd\x43\xa5\x39\xb1\xa6\x08\xe2\xdd\x97\x4c\xea\x0a\xfd\x55\x84\x83\x13\xa9\x38\x44\x2e\xe3\xb9\x63\xfe\xf5\x4a\xcb\x5b\xb1\xed\xb6\xeb\x1d\x13\xaf\xee\xad\x5e\xdd\x96\x8b\x9e\x5a\x37\xdc\x75\x98\xf4\x09\x71\xac\x35\x40\x10\x20\x5f\xa3\x06\xb1\x20\xcf\xf1\x3c\x15\xb8\x01\x67\x83\x74\xd5\xaa\xde\x30\x7f\x65\xf2\x6b\xa9\x79\xfa\x15\x96\x50\x42\x0f\xaf\x47\x6f\xbc\x3c\xf8\xdd\x9f\x14\xa3\x4f\xae\xd3\xd0\x64\x13\x34\xe6\x35\x6c\xa8\xbb\x7b\x3e\x4b\x16\xcb\x1b\x68\xf7\x48\x6a\x33\x7a\xd4\xaa\x81\x29\xbb\xa7\xe0\x3d\x2a\x0b\x52\x1a\x72\x78\x37\x17\x7f\x51\xc6\x6c\xb7\xe4\x3b\xc3\xde\x51\x0f\x6d\x2d\xb8\x75\x8b\xe1\x0a\x17\xaa\xe4\x19\x81\x48\xe7\x06\xb4\x16\xc7\x1b\xba\x96\x05\x5c\xde\xa3\x2e\x8b\xad\xe1\x6b\x8d\xbb\x7c\x18\xf9\x8b\xdf\xcd\x5c\x84\xec\xff\xa9\xbf\x7c\x74\x4f\xfb\x6f\x56\xff\x04\x00\x00\xff\xff\xc0\x01\xda\x95\x77\x03\x00\x00")

func test_certs_node_key_bytes() ([]byte, error) {
	return bindata_read(
		_test_certs_node_key,
		"test_certs/node.key",
	)
}

func test_certs_node_key() (*asset, error) {
	bytes, err := test_certs_node_key_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "test_certs/node.key", size: 887, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_certs/ca.crt":   test_certs_ca_crt,
	"test_certs/node.crt": test_certs_node_crt,
	"test_certs/node.key": test_certs_node_key,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"test_certs": {nil, map[string]*_bintree_t{
		"ca.crt":   {test_certs_ca_crt, map[string]*_bintree_t{}},
		"node.crt": {test_certs_node_crt, map[string]*_bintree_t{}},
		"node.key": {test_certs_node_key, map[string]*_bintree_t{}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
