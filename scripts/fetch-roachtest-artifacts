#!/usr/bin/env bash
#
# fetch-roachtest-artifacts - Fetch artifacts for a roachtest issue
#
set -euo pipefail

usage() {
    echo "Usage: $0 <issue-number-or-url-or-teamcity-url>"
    echo ""
    echo "Examples:"
    echo "  $0 12345"
    echo "  $0 https://github.com/cockroachdb/cockroach/issues/12345"
    echo "  $0 https://github.com/cockroachdb/cockroach/issues/12345#issuecomment-67890"
    echo "  $0 'https://teamcity.cockroachdb.com/buildConfiguration/Cockroach_Nightlies_RoachtestWeeklyBazel/20321836?buildTab=artifacts#/c2c/import/7tb/kv0'"
    exit 1
}

# URL encode special characters for TeamCity API (but not slashes)
url_encode() {
    local string="$1"
    echo "$string" | sed 's/=/%3D/g; s/ /%20/g'
}

# Recursively download artifacts from TeamCity
download_artifacts_recursive() {
    local build_id="$1"
    local path="$2" 
    local dest_dir="$3"
    local depth="${4:-0}"
    
    # Prevent infinite recursion
    [[ $depth -gt 10 ]] && return
    
    # Get children of current path
    local encoded_path
    encoded_path=$(url_encode "$path")
    local children_xml
    children_xml=$(curl -s "https://teamcity.cockroachdb.com/guestAuth/app/rest/builds/id:$build_id/artifacts/children/$encoded_path/" 2>/dev/null)
    
    # Debug output
    if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
        echo "DEBUG: Checking path: $path (encoded: $encoded_path)"
        echo "DEBUG: XML response: ${children_xml:0:200}..."
    fi
    
    # Check if we got valid XML
    if [[ -z "$children_xml" || "$children_xml" == *"<error"* || "$children_xml" == *"HTTP 400"* || "$children_xml" == *"status code: 400"* || "$children_xml" == *"404"* || "$children_xml" == *"Build not found"* ]]; then
        # If this is the root path (depth 0), it's a fatal error
        if [[ $depth -eq 0 ]]; then
            echo "Error: Build $build_id not found or path $path does not exist"
            exit 1
        fi
        return
    fi
    
    # Extract all items (files and directories)
    local items
    items=$(echo "$children_xml" | grep -o 'name="[^"]*"' | cut -d'"' -f2)
    
    if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
        echo "DEBUG: Found items: $items"
    fi
    
    [[ -z "$items" ]] && return
    
    local pids=()
    while read -r item; do
        [[ -z "$item" ]] && continue
        
        local item_path="$path/$item"
        local encoded_item_path
        encoded_item_path=$(url_encode "$item_path")
        
        # Check if this item has children (is a directory) first
        local item_children
        item_children=$(curl -s "https://teamcity.cockroachdb.com/guestAuth/app/rest/builds/id:$build_id/artifacts/children/$encoded_item_path/" 2>/dev/null)
        
        if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
            echo "DEBUG: Checking if $item is directory. Response: ${item_children:0:100}..."
        fi
        
        if [[ -n "$item_children" && "$item_children" != *"<error"* && "$item_children" != *"HTTP 400"* && "$item_children" != *"status code: 400"* && "$item_children" != *"status code: 404"* ]] && [[ "$item" != *.zip ]]; then
            # It's a directory (not a zip file), recurse into it
            if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
                echo "DEBUG: Recursing into directory: $item"
            fi
            download_artifacts_recursive "$build_id" "$item_path" "$dest_dir" $((depth + 1))
        elif [[ "$item" == *.* ]]; then
            # It's a file, download it
            (
                # Create subdirectory structure relative to the original path
                local relative_path="${item_path#$2/}"  # Remove the root path prefix
                local file_dir="$dest_dir/$(dirname "$relative_path")"
                mkdir -p "$file_dir"
                local file_path="$dest_dir/$relative_path"
                
                local file_url="https://teamcity.cockroachdb.com/guestAuth/app/rest/builds/id:$build_id/artifacts/content/$encoded_item_path"
                if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
                    echo "DEBUG: Downloading $file_url to $file_path"
                fi
                if curl -f -s "$file_url" -o "$file_path" 2>/dev/null && [[ -s "$file_path" ]]; then
                    echo "Downloaded: $relative_path"
                    
                    # Only unzip actual zip files
                    if [[ "$item" == *.zip ]] && file "$file_path" | grep -q "Zip archive"; then
                        local extract_dir="${file_path%.zip}"
                        mkdir -p "$extract_dir"
                        (cd "$extract_dir" && unzip -o -q "../$(basename "$file_path")")
                        
                        # Flatten if archive contains single directory
                        local contents=($(ls "$extract_dir"))
                        if [[ ${#contents[@]} -eq 1 && -d "$extract_dir/${contents[0]}" ]]; then
                            mv "$extract_dir/${contents[0]}"/* "$extract_dir/" 2>/dev/null || true
                            rmdir "$extract_dir/${contents[0]}" 2>/dev/null || true
                        fi
                        
                        rm "$file_path"
                    fi
                fi
            ) &
            pids+=($!)
        else
            # It's a file without an extension, download it
            (
                # Create subdirectory structure relative to the original path
                local relative_path="${item_path#$2/}"  # Remove the root path prefix
                local file_dir="$dest_dir/$(dirname "$relative_path")"
                mkdir -p "$file_dir"
                local file_path="$dest_dir/$relative_path"
                
                local file_url="https://teamcity.cockroachdb.com/guestAuth/app/rest/builds/id:$build_id/artifacts/content/$encoded_item_path"
                if [[ -n "${ROACHTEST_DEBUG:-}" ]]; then
                    echo "DEBUG: Downloading $file_url to $file_path"
                fi
                if curl -f -s "$file_url" -o "$file_path" 2>/dev/null && [[ -s "$file_path" ]]; then
                    echo "Downloaded: $relative_path"
                fi
            ) &
            pids+=($!)
        fi
    done <<< "$items"
    
    # Wait for all downloads to complete
    if [[ ${#pids[@]} -gt 0 ]]; then
        for pid in "${pids[@]}"; do
            wait "$pid"
        done
    fi
}

# Handle direct TeamCity artifact URLs
handle_teamcity_url() {
    local tc_url="$1"
    
    # Extract build ID and path from TeamCity URL
    local build_id path
    build_id=$(echo "$tc_url" | grep -o '[0-9]\+' | head -1)
    
    if [[ "$tc_url" == *"#/"* ]]; then
        path=$(echo "$tc_url" | sed 's/.*#\///')
    else
        echo "Error: TeamCity URL must include a path after #/"
        echo "Expected format: https://teamcity.cockroachdb.com/.../BUILD_ID?buildTab=artifacts#/path"
        echo "Got: $tc_url"
        exit 1
    fi
    
    if [[ -z "$build_id" || -z "$path" ]]; then
        echo "Error: Could not extract build ID or path from TeamCity URL: $tc_url"
        echo "Expected format: https://teamcity.cockroachdb.com/.../BUILD_ID?buildTab=artifacts#/path"
        exit 1
    fi
    
    # Extract test name from path for directory naming
    local test_name
    test_name=$(echo "$path" | tr '/' '-' | tr -cd 'a-zA-Z0-9_-')
    test_name="${test_name:-unknown}"
    
    # Create artifacts directory
    local artifacts_dir="artifacts/teamcity-${test_name}-${build_id}"
    mkdir -p "$artifacts_dir"
    echo "Fetching TeamCity artifacts from build $build_id path $path"
    echo "Downloading to $artifacts_dir"
    
    # Download artifacts
    download_artifacts_recursive "$build_id" "$path" "$artifacts_dir"
    
    # Verify at least artifacts.zip was downloaded (could be nested in subdirectories)
    if ! find "$artifacts_dir" -name "artifacts.zip" -o -name "artifacts" -type d | grep -q .; then
        echo "Error: Failed to download artifacts.zip or extract artifacts directory"
        echo "Build $build_id may not have artifacts at path $path, or artifacts may have expired"
        exit 1
    fi
    
    echo "TeamCity artifacts successfully downloaded to $artifacts_dir"
    exit 0
}

main() {
    [[ $# -eq 0 || "$1" == "--help" ]] && usage
    
    # Check if this is a direct TeamCity URL
    if [[ "$1" == *"teamcity.cockroachdb.com"* ]]; then
        if [[ "$1" == *"buildTab=artifacts"* ]]; then
            handle_teamcity_url "$1"
            return
        else
            echo "Error: TeamCity URL must include 'buildTab=artifacts'"
            echo "Expected format: https://teamcity.cockroachdb.com/.../BUILD_ID?buildTab=artifacts#/path"
            exit 1
        fi
    fi
    
    # Extract issue number and comment ID (if present)
    local issue_number comment_id=""
    
    if [[ "$1" == *"/issues/"* ]]; then
        # GitHub URL: extract path after github.com/cockroachdb/cockroach/
        local path="${1#*github.com/cockroachdb/cockroach/}"
        if [[ "$path" == issues/* ]]; then
            # Remove issues/ prefix and split on #
            local remainder="${path#issues/}"
            issue_number="${remainder%%#*}"
            
            # Check for comment ID
            if [[ "$remainder" == *"#issuecomment-"* ]]; then
                comment_id="${remainder#*#issuecomment-}"
            fi
        fi
    else
        # Just a number: 12345
        issue_number="${1##*/}"
        issue_number="${issue_number%)*}"
        issue_number="${issue_number%#*}"
    fi
    
    [[ ! "$issue_number" =~ ^[0-9]+$ ]] && { echo "Error: Invalid issue number from '$1'"; exit 1; }
    
    # Get issue data from GitHub API
    local issue_data
    issue_data=$(curl -s "https://api.github.com/repos/cockroachdb/cockroach/issues/$issue_number") || {
        echo "Error: Failed to fetch issue #$issue_number"
        exit 1
    }
    
    # Check if issue exists
    if echo "$issue_data" | jq -e '.message // empty' >/dev/null 2>&1; then
        echo "Error: $(echo "$issue_data" | jq -r '.message')"
        exit 1
    fi
    
    # Extract info using jq and basic string ops
    local title body url test_name
    title=$(echo "$issue_data" | jq -r '.title')
    url=$(echo "$issue_data" | jq -r '.html_url')
    
    # Get body from specific comment or issue
    if [[ -n "$comment_id" ]]; then
        echo "Fetching comment #$comment_id from issue #$issue_number"
        local comment_data
        comment_data=$(curl -s "https://api.github.com/repos/cockroachdb/cockroach/issues/comments/$comment_id") || {
            echo "Error: Failed to fetch comment #$comment_id"
            exit 1
        }
        
        if echo "$comment_data" | jq -e '.message // empty' >/dev/null 2>&1; then
            echo "Error: $(echo "$comment_data" | jq -r '.message')"
            exit 1
        fi
        
        body=$(echo "$comment_data" | jq -r '.body')
        url="${url}#issuecomment-${comment_id}"
    else
        echo "Fetching issue #$issue_number"
        body=$(echo "$issue_data" | jq -r '.body')
    fi
    test_name=$(echo "$title" | sed -n 's/.*roachtest[: ]*\([^ ]*\) .*/\1/p' | head -1)
    test_name="${test_name:-unknown}"
    test_name=$(echo "$test_name" | tr '/' '-' | tr -cd 'a-zA-Z0-9_-=')
    
    # Create artifacts directory
    local artifacts_dir="artifacts/roachtest-${test_name}-${issue_number}"
    if [[ -n "$comment_id" ]]; then
        artifacts_dir="artifacts/roachtest-${test_name}-${issue_number}-comment-${comment_id}"
    fi
    mkdir -p "$artifacts_dir"
    echo "fetching to $artifacts_dir"
    
    # Find and download TeamCity artifacts
    local downloaded_files=()
    while read -r tc_url; do
        [[ -z "$tc_url" || ! "$tc_url" =~ buildTab=artifacts ]] && continue
        
        # Transform: buildConfiguration/.../ID?buildTab=artifacts#/path → API download
        local build_id path
        build_id=$(echo "$tc_url" | grep -o '[0-9]\+' | head -1)
        path=$(echo "$tc_url" | sed 's/.*#\///')
        
        if [[ -n "$build_id" && -n "$path" ]]; then
            download_artifacts_recursive "$build_id" "$path" "$artifacts_dir"
            downloaded_files+=("$artifacts_dir")
        fi
    done <<< "$(echo "$body" | grep -o 'https://teamcity[^[:space:]]*' | sed 's/)$//' || true)"
    
    # Output summary and verification
    # Always verify artifacts were actually downloaded, regardless of downloaded_files array
    if ! find "$artifacts_dir" -name "artifacts.zip" -o -name "artifacts" -type d | grep -q .; then
        if [ ${#downloaded_files[@]} -gt 0 ]; then
            echo "Error: #$issue_number - $title: failed to download artifacts.zip"
            echo "TeamCity artifacts may have expired or the build may not contain test artifacts"
        else
            echo "Error: #$issue_number - $title: no artifacts found"
            echo "This could happen if:"
            echo "  - TeamCity artifacts have expired"
            echo "  - Issue has no TeamCity links"
            echo "  - URLs don't match expected format"
        fi
        exit 1
    fi
    echo "#$issue_number - $title: all artifacts downloaded to $artifacts_dir"
}

main "$@"