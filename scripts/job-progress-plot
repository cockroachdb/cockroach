#!/usr/bin/env python3
import sys, re
from datetime import datetime, timedelta

def plot_job(job_id, file_path):
    # Parse data
    data = []
    jobs_data = {}
    with open(file_path) as f:
        for i, line in enumerate(f):
            if i == 0 and line.startswith('job_id'): continue
            parts = line.strip().split('\t')
            if len(parts) >= 3:
                try:
                    job_id_in_file = int(parts[0])
                    fraction = parts[2]
                    if fraction not in ('NULL', '', '0'):
                        ts = datetime.fromisoformat(re.sub(r'[+-]\d{2}$', '', parts[1]))
                        pct = float(fraction) * 100
                        if job_id_in_file not in jobs_data:
                            jobs_data[job_id_in_file] = []
                        jobs_data[job_id_in_file].append((ts, pct))
                    if job_id_in_file == job_id:
                        ts = datetime.fromisoformat(re.sub(r'[+-]\d{2}$', '', parts[1]))
                        pct = 0.0 if parts[2] in ('NULL', '') else float(parts[2]) * 100
                        data.append((ts, pct))
                except: pass
    
    if not data: 
        result = [f"No data for job {job_id}. Jobs with progress:"]
        for jid in sorted(jobs_data.keys()):
            job_points = sorted(jobs_data[jid])
            duration = (job_points[-1][0] - job_points[0][0]).total_seconds() / 60
            first_pct = job_points[0][1]
            last_pct = job_points[-1][1]
            result.append(f"{jid}: {duration:.1f}min {first_pct:.1f}% -> {last_pct:.1f}%")
        return "\n".join(result)
    data.sort()
    
    # Calculate dimensions
    start, end = data[0][0], data[-1][0]
    dur = (end - start).total_seconds() / 60
    scale = 0.25 if dur < 60 else 0.5 if dur <= 120 else 3.0
    width = min(120, max(1, int(dur / scale)))
    
    # Plot grid
    grid = [[' '] * width for _ in range(20)]
    for ts, pct in data:
        x = min(width-1, int((ts - start).total_seconds() / 60 / scale))
        y = max(0, min(19, 19 - int(pct / 5)))
        grid[y][x] = '*'
    
    # Output
    final_pct, final_y = data[-1][1], max(0, min(19, 19 - int(data[-1][1] / 5)))
    lines = []
    for i in range(20):
        val = (19 - i) * 5
        if i == 0: val = 100  # Fix first line to show 100%
        left = f"{val:3d}% " if val % 10 == 0 else "     "
        right = f"| {final_pct:.1f}%" if i == final_y else "|"
        lines.append(left + "|" + ''.join(grid[i]) + right)
    
    lines.append("     +" + "-" * width)
    time_labels = "      "
    if width <= 30:
        # For short jobs, show only start and end
        start_label = start.strftime("%H:%M")
        end_label = end.strftime("%H:%M")
        time_labels += start_label + " " * (width - 10) + end_label
    else:
        for i in range(0, width, max(1, width // 8)):
            label = (start + timedelta(minutes=i * scale)).strftime("%H:%M")
            time_labels += label if i == 0 else " " * max(0, 6 + i - len(time_labels)) + label
    lines.append(time_labels)
    return "\n".join(lines)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: job-progress-plot <job-id> <file>", file=sys.stderr)
        sys.exit(1)
    try:
        result = plot_job(int(sys.argv[1]), sys.argv[2])
        if result.startswith("No data for job"):
            print(result, file=sys.stderr)
            sys.exit(1)
        else:
            print(result)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
