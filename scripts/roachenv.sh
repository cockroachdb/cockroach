#!/usr/bin/env bash

set -euo pipefail

roachenv=$(which "$0")
mydir=$(dirname "$roachenv")
topdir=$mydir/..

if test -z "${ROACHPROD_HOME:-}"; then
	ROACHPROD_HOME=$HOME/.roachprod
	mkdir -p "$ROACHPROD_HOME"
fi
if ! test -d "$ROACHPROD_HOME"; then
	echo "error: $ROACHPROD_HOME does not exist or does not point to a directory. Use \$ROACHPROD_HOME to override" >&2
	exit 1
fi

run_env() {
	env=$1
	penv=$(cd "$ROACHPROD_HOME/envs/$env" && pwd)
	# Spawn a shell with the env defined and pass the rest of the command line.
	echo
	echo "Pre-defined environment:"
	cat "$penv"/env
	echo
	echo "Available scripts:"
	(cd "$penv"/bin && ls --color)
	echo
	echo "Starting $SHELL in environment $env; exit shell to close this workbench."
	echo "tip: to get started, run the commands 1-, 2-, 3- etc. Run 0-status.sh if you lose track."
	set +e
	(
		set -e
		eval $("$penv"/bin/setenv.sh)
		export PATH=$penv/bin:$PATH
		"$SHELL"
	)
	set -e
	res=$?
	echo "(shell session in $env terminated.)"
	exit $res
}

operation=${1:-select}
case $operation in
	-h|--help)
		cat <<EOF
usage: $0 [ mkenv | <envname> ]

Select a roachprod/workload environment for reproducible testing.
When run without arguments, presents an interactive selection menu.

The set of available environments is generated by the 'mkenv'
sub-command, or when run without arguments for the first time.
EOF
		exit 0
		;;
	"select")
		if ! test -e "$ROACHPROD_HOME"/envs; then
			echo "First run. Generating initial configurations..."
			"$0" mkenv
		fi
		choices=$(cd "$ROACHPROD_HOME"/envs && ls -d * 2>/dev/null || true)
		if test -z "$choices"; then
			echo "error: $ROACHPROD_HOME/envs  has no environment defined yet. maybe use '$0 mkenv' to get started" >&2
			exit 1
		fi
		echo "Select an environment:"
		select env in $(cd "$ROACHPROD_HOME"/envs && ls -rtd *); do
			if test -n "$env"; then break; fi
		done
		if test -z "$env"; then exit 0; fi
		run_env "$env"
		exit $?
		;;
	mkenv)
		# processed below.
		;;
	*)
		if test -e "$ROACHPROD_HOME"/envs/"$operation"; then
			run_env "$operation"
			exit $?
		else
			echo "unknown operation: $operation (available: mkenv/select)" >&2
			exit 1
		fi
		;;
esac

# mkenv logic follows
shift 1

if test -n "${CLUSTER_ENV:-}"; then
	echo "warning: running 'mkenv' from within a workbench may have unexpected results" >&2
fi

COCKROACH=${COCKROACH:-$topdir/cockroach}
if ! test -x "$COCKROACH"; then
	echo "error: \$COCKROACH not pointing to an executable file (${COCKROACH})" >&2
	exit 1
fi
echo "note: using local cockroach binary \"$COCKROACH\" (to override, set \$COCKROACH and re-run mkenv)" >&2

ROACHPROD=${ROACHPROD:-$topdir/bin/roachprod}
if ! test -x "$ROACHPROD"; then
	echo "error: \$ROACHPROD not pointing to an executable file (${ROACHPROD})" >&2
	exit 1
fi
echo "note: using roachprod binary \"$ROACHPROD\" (to override, set \$ROACHPROD and re-run mkenv)" >&2

if test -z "${COCKROACH_DEV_LICENSE:-}"; then
	echo "error: \$COCKROACH_DEV_LICENSE not set or empty" >&2
	exit 1
fi

if test x"${ROACHPROD_HOME%/.roachprod}" = x"${ROACHPROD_HOME}"; then
	echo "error: \$ROACHPROD_HOME not ending with .../.roachprod" >&2
	exit 1
fi
echo "note: using roachprod home dir \"$ROACHPROD_HOME\" (to override, set \$ROACHPROD_HOME and re-run mkenv)" >&2

if test -n "${CLUSTER:-}"; then
	echo "warning: \$CLUSTER is already set" >&2
	echo "warning: this tool creates custom cluster names and you will need to change \$CLUSTER" >&2
fi

ROACHPROD_USER=${ROACHPROD_USER:-$USER}
echo "note: using cloud username \"$ROACHPROD_USER\" (to override, set \$ROACHPROD_USER and re-run mkenv)" >&2

genconf() {
	if test -z "${1:-}"; then
		echo "error: no config specified (supported: small/medium/large-h/g)" >&2
		exit 1
	fi
	if test -z "${2:-}"; then
		echo "error: no cloud specified (supported: aws/gce)" >&2
		exit 1
	fi
	config=$(echo ${1:?} | tr A-Z a-z)

	cloud=${2:?}
	datadir=/mnt/data1/cockroach
	zonecfg=''
	case $cloud in
		[lL][oO][cC][aA][lL])
			cflag=
			datadir=data
			case $config in
				*-g)
					echo "unsupported configuration $config for 'cloud' local" >&2
					exit 1
					;;
			esac
			;;
		[aA][wW][sS])
			cflag="-c aws --aws-machine-type-ssd=c5d.4xlarge"
			zonecfg='{"+region=eu-west-2":1,"+region=us-east-2":1,"+region=us-west-2":1}'
			;;
		[gG][cC][eEpP])
			cflag="-c gce --gce-machine-type=n1-standard-16"
			zonecfg='{"+region=europe-west2":1,"+region=us-east1":1,"+region=us-west1":1}'
			;;
		*)
			echo "error: unknown cloud type $cloud (supported: aws/gce)" >&2
			exit 1
	esac

	# Layout:
	# [1 2 3 10] [4 5 6] [7 8 9]
	case $config in
		small-*)
			csize=4
			num_vms=5
			nodelist="1 2 3 5"
			nodes="1-3,5"
			center=2
			client=4
			failzone="2,5"
			;;
		medium-*)
			csize=6
			num_vms=7
			nodes="1-6"
			nodelist="1 2 3 4 5 6"
			center=3
			client=7
			failzone="3-4"
			;;
		large-*)
			csize=9
			num_vms=10
			nodes="1-9";
			nodelist="1 2 3 4 5 6 7 8 9"
			center=4
			failzone="4-6"
			client=10
			;;
		*)
			echo "invalid config size: $config (supported: small,medium,large)" >&2
			exit 1
			;;
	esac
	if test x$cloud = xlocal; then
		num_vms=10
	fi

	geo=
	case $config in
		*-h) zonecfg='' ;;
		*-g) geo=--geo ;;
		*)
			echo "invalid distribution mode: $config (supported xxx-h / xxx-g)" >&2
			exit 1
			;;
	esac

	envname=$ROACHPROD_USER-$cloud-$config
	if test x$cloud = xlocal; then
		CLUSTER=local
	else
		CLUSTER=$envname
	fi
	outd=$ROACHPROD_HOME/envs/$envname
	ACTION_LOG=$outd/action-log.txt

	mkdir -p $outd/bin
	mkdir -p $outd/state
	outd=$(cd "$outd" && pwd)

	echo "Generating environment: $envname..."
	cat >"$outd/env" <<EOF
export ACTION_LOG=$ACTION_LOG ;
export ROACHPROD=$ROACHPROD ;
export ROACHPROD_HOME=$ROACHPROD_HOME ;
export ROACHPROD_USER=$ROACHPROD_USER ;
export CLUSTER=$CLUSTER ;
export CLUSTER_ENV=$outd ;
export CLUSTER_SIZE=$csize ;
export COCKROACH_DEV_LICENSE=$COCKROACH_DEV_LICENSE ;
export DEFAULT_ZONE_CONFIGURATION='$zonecfg' ;
export CLUSTER_MAPPING=$nodes ;
export CLUSTER_NODES="$nodelist" ;
export CLIENT_MAPPING=$client ;
export CENTER_MAPPING=$center ;
export NEMESIS_TARGETS=$failzone ;
export COCKROACH=$COCKROACH ;
EOF
	cat >"$outd/bin/setenv.sh" <<EOF
#!/usr/bin/env bash
cat <<EOE
$(cat "$outd/env")
EOE
EOF
	chmod +x "$outd/bin/setenv.sh"
	cat >"$outd/bin/unset-unused.sh" <<EOF
#!/usr/bin/env bash
# needed for https://github.com/cockroachdb/cockroach/issues/40597
cat <<EOE
unset ACTION_LOG ;
unset OLDPWD ;
unset ACTION_LOG ;
unset ROACHPROD_HOME ;
unset COCKROACH ;
unset TMUX ;
EOE
EOF
	chmod +x "$outd/bin/unset-unused.sh"

	. "$outd/env"

	# echo "Generating scripts in $outd/bin/..."
	cat >"$outd/bin/0-status.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/setenv.sh)
echo "Status:"
if test -e "$ROACHPROD_HOME/hosts/$CLUSTER"; then
   echo "* 1-create-vms has been run (roachprod cluster defined)"
else
   echo "* roachprod cluster '$CLUSTER' not defined: run 1-create-vms"
   exit 0
fi

if $ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "ls cockroach" >/dev/null 2>&1; then
   echo "* 2-stage-cockroach-binary has been run (cockroach binary available)"
else
   echo "* cockroach binary not staged: run 2-stage-cockroach-binary"
   exit 0
fi

echo "* running crdb nodes:"
$ROACHPROD status $CLUSTER:$CLUSTER_MAPPING

echo "* minimum number of replicas (if lower than 3, use 3-initial-upreplication.sh):"
$ROACHPROD sql $CLUSTER:1 -- -e \
"select min(array_length(replicas,1)) from crdb_internal.ranges"

constraint=\$($ROACHPROD sql $CLUSTER:1 -- -e "show zone configuration for range default" | grep "constraints =" | sed -e 's/^.*constraints = //g;s/ //g;s/,[^a-z]*\$//g')
refzone=\'\${DEFAULT_ZONE_CONFIGURATION//\"/}\'
if test -n "\$refzone" -a x"\$constraint" != x"\$refzone"; then
  echo "* configured default zone: \$constraint"
  echo "  intended   default zone: \$refzone"
  echo "  to set up the default zone configuration, run 4-initial-zone-config"
else
  echo "* 4-initial-zone-config has been run (default zone matches)"
fi

have_tpcc=
if test -e "$outd/state/tpcc_populated" -a -e "$outd/state/tpcc_available_wh"; then
  tpcc_db=\$(cat "$outd/state/tpcc_populated"|tail -n1)
  if $ROACHPROD sql $CLUSTER:1 -- -e "show tables from \$tpcc_db" >/dev/null 2>&1; then
     have_tpcc=1
  fi
fi
if test x\$have_tpcc = x; then
  echo "* TPC-C not loaded: run 5-import-tpcc-fixtures"
else
  echo "* 5-import-tpcc-fixtures has been run (\$(cat "$outd/state/tpcc_available_wh") warehouses available in db \$tpcc_db)"
fi

if $ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "ls -d $datadir.snap" >/dev/null 2>&1; then
  echo "* 6-snapshot-data has been run (snapshot is available)"
else
  echo "* data snapshot not available: run 6-snapshot-data"
fi
EOF
	chmod +x "$outd/bin/0-status.sh"

	cat >"$outd/bin/1-create-vms.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Creating a pool of $num_vms VMs on cloud $cloud -- this may take a few minutes..."
set -x
time \
$ROACHPROD create $CLUSTER -u $ROACHPROD_USER $cflag --local-ssd-no-ext4-barrier $geo -n $num_vms
$ROACHPROD adminurl $CLUSTER:1 >"$outd/webui.url"
$ROACHPROD pgurl $CLUSTER:$CLUSTER_MAPPING >"$outd/pgurl"
rm -f "$outd"/state/*
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/1-create-vms.sh"

	if test x$CLUSTER = xlocal; then
	cat >"$outd/bin/2-stage-cockroach-binary.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Linking the cockroach binary on all local dirs -- this should take less than a second..."
set -x
$ROACHPROD put $CLUSTER $COCKROACH ./cockroach
set +x
echo "Done."
EOF
	else
		cat >"$outd/bin/2-stage-cockroach-binary.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Installing the cockroach binary on all VMs -- this should take less than a minute..."
if test x$CLUSTER != xlocal; then
  set -x
  $ROACHPROD stage $CLUSTER cockroach
else
  set -x
  $ROACHPROD put $CLUSTER $COCKROACH ./cockroach
fi
set +x
echo "Done."
EOF
	fi
	chmod +x "$outd/bin/2-stage-cockroach-binary.sh"

	cat >"$outd/bin/3-initial-upreplication.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/setenv.sh)
eval \$("$outd"/bin/unset-unused.sh)
echo "Initializing cluster and waiting for initial upreplication -- this may take a few minutes, or in rare cases 10 minutes if the first scan fails..."
set -x
$ROACHPROD start $CLUSTER:$CLUSTER_MAPPING --tag node
time \
$ROACHPROD sql $CLUSTER:1 -- \
-e "set cluster setting kv.snapshot_rebalance.max_rate = '130MiB'" \
-e "set cluster setting kv.snapshot_recovery.max_rate = '130MiB'"
$ROACHPROD sql $CLUSTER:1 -- -e \
"select if((select min(array_length(replicas,1)) from crdb_internal.ranges)>=3, 0, if(pg_sleep(.5), crdb_internal.force_retry('1h'),0))"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/3-initial-upreplication.sh"

	if test "x$geo" != x; then
		cat >"$outd/bin/4-initial-zone-config.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/setenv.sh)
echo "Installing the default zone configuration -- this should take a few seconds..."
set -x
$ROACHPROD sql $CLUSTER:1 -- -e \
"alter range default configure zone using constraints = '\$DEFAULT_ZONE_CONFIGURATION'"
set +x
echo "Done."
EOF
	else
		cat >"$outd/bin/4-initial-zone-config.sh" <<EOF
#!/usr/bin/env bash
echo "Cluster is not geo-distributed: no need for a default zone configuration."
EOF
	fi
	chmod +x "$outd/bin/4-initial-zone-config.sh"

	cat >"$outd/bin/5-import-tpcc-fixtures.sh" <<EOF
#!/usr/bin/env bash
set -eu
TPCC_WAREHOUSES=\${1:?provide number of TPC-C warehouses to import as argument}
echo "\$(date +%Y%m%d%H%M%S) \$0 \$1" >>"$ACTION_LOG"
echo "Importing fixtures for \$TPCC_WAREHOUSES TPC-C warehouses -- this may take several minutes to more than one hour..."
set -x
time \
$ROACHPROD run $CLUSTER:$CENTER_MAPPING --tag run -- "./cockroach workload fixtures import tpcc --warehouses=\$TPCC_WAREHOUSES --db=tpcc\$TPCC_WAREHOUSES"
set +x
echo "Done."
echo "Retrieving the import logs to $outd/import-logs..."
mkdir -p "$outd/import-logs"
$ROACHPROD get $CLUSTER:$CLUSTER_MAPPING logs "$outd/import-logs/logs"
echo "Done."
echo "Marking tpcc\$TPCC_WAREHOUSES as available..."
if test -e "$outd/state/tpcc_available_wh"; then
  if test "\$TPCC_WAREHOUSES" -gt \$(cat "$outd/state/tpcc_available_wh"); then
    echo "tpcc\$TPCC_WAREHOUSES" >>"$outd/state/tpcc_populated"
    echo "\$TPCC_WAREHOUSES" >"$outd/state/tpcc_available_wh"
  fi
else
  echo "tpcc\$TPCC_WAREHOUSES" >>"$outd/state/tpcc_populated"
  echo "\$TPCC_WAREHOUSES" >"$outd/state/tpcc_available_wh"
fi
echo "Done."
EOF
	chmod +x "$outd/bin/5-import-tpcc-fixtures.sh"

	cat >"$outd/bin/6-snapshot-data.sh" <<EOF
#!/usr/bin/env bash
set -eu
$CLUSTER_ENV/bin/quit-crdb.sh
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Snapshotting data directory -- this may take several minutes..."
set -x
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "if test -e $datadir.snap; then echo 'snapshot already exists'>&2; exit 1; fi"
time \
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "cp -a $datadir $datadir.snap"
set +x
touch "$outd/state/data_snapshot_done"
echo "Done."
EOF
	chmod +x "$outd/bin/6-snapshot-data.sh"

	cat >"$outd/bin/wipe-crdb.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Wiping the CockroachDB nodes -- this should take less than a minute..."
set -x
$ROACHPROD wipe $CLUSTER
set +x
echo "Done."
if test -e "$outd/state/data_snapshot_done"; then
  echo "NOTE: after this step, you can restore a snapshot with restore-crdb.sh."
else
  echo "NOTE: after this step, you need to restart from step 3 - initialize cluster and wait for upreplication." 
fi
EOF
	chmod +x "$outd/bin/wipe-crdb.sh"

	cat >"$outd/bin/restore-crdb.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Restoring the CockroachDB nodes from a snapshot -- this may take a few minutes..."
set -x
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "if test -e $datadir; then echo 'data directory still exists'>&2; exit 1; fi"
time \
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "cp -a $datadir.snap $datadir"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/restore-crdb.sh"

	cat >"$outd/bin/remove-snapshot.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Erasing the snapshot, if any -- should take a few seconds..."
set -x
time \
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "rm -rf $datadir.snap"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/remove-snapshot.sh"

	cat >"$outd/bin/destroy-vms.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
echo "Destroying the VM pool - this may take a few minutes..."
set -x
time \
$ROACHPROD destroy $CLUSTER
set +x
rm -f "$outd"/state/*
echo "Done."
echo "NOTE: after this step, you will need to restart from step 1."
EOF
	chmod +x "$outd/bin/destroy-vms.sh"

	cat >"$outd/bin/start-crdb.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/unset-unused.sh)
echo "Starting CockroachDB nodes - this should take less than a minute..."
set -x
time \
$ROACHPROD start $CLUSTER:$CLUSTER_MAPPING --tag node
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/start-crdb.sh"

	cat >"$outd/bin/quit-crdb.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/unset-unused.sh)
unset COCKROACH_DEV_LICENSE
echo "Terminating CockroachDB nodes gracefully - this may take a few minutes..."
set -x
time \
$ROACHPROD stop $CLUSTER:$CLUSTER_MAPPING --sig 15 --wait --tag node
$ROACHPROD stop $CLUSTER:$CLUSTER_MAPPING --tag node --wait
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/quit-crdb.sh"

	cat >"$outd/bin/kill-crdb.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/unset-unused.sh)
unset COCKROACH_DEV_LICENSE
echo "Killing CockroachDB nodes - this should take less than a minute..."
set -x
$ROACHPROD stop $CLUSTER:$CLUSTER_MAPPING --tag node --wait
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/kill-crdb.sh"

	cat >"$outd/bin/get-logs.sh" <<EOF
#!/usr/bin/env bash
set -eu
dstdir=\${1:?specify a directory where to copy the logs to}
echo "\$(date +%Y%m%d%H%M%S) \$0 \$1" >>"$ACTION_LOG"
echo "Retrieving logs - this should take less than a minute..."
set -x
$ROACHPROD get $CLUSTER:$CLUSTER_MAPPING logs "\$dstdir"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/get-logs.sh"


	cat >"$outd/bin/reset-logs.sh" <<EOF
#!/usr/bin/env bash
set -eu
$CLUSTER_ENV/bin/quit-crdb.sh
echo "\$(date +%Y%m%d%H%M%S) \$0" >>"$ACTION_LOG"
eval \$("$outd"/bin/unset-unused.sh)
echo "Resetting the log directory - this should take less than a minute..."
set -x
$ROACHPROD run $CLUSTER:$CLUSTER_MAPPING --tag run -- "rm -rf ~/logs/*"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/reset-logs.sh"

	cat >"$outd/bin/init-kv.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0 \$*" >>"$ACTION_LOG"
echo "Initializing the KV workload..."
set -x
time \
$ROACHPROD run $CLUSTER:$CLIENT_MAPPING --tag run -- "./cockroach workload init kv --drop --db dbkv {pgurl:1}"
set +x
touch "$outd/state/kv_populated"
echo "Done."
EOF
	chmod +x "$outd/bin/init-kv.sh"

	cat >"$outd/bin/start-kv.sh" <<EOF
#!/usr/bin/env bash
set -eu
echo "\$(date +%Y%m%d%H%M%S) \$0 \$*" >>"$ACTION_LOG"
if ! test -e "$outd/state/kv_populated"; then
  echo "KV workload data not loaded, use init-kv" >&2
  exit 1
fi
shift 1
echo "Running the KV workload..."
set -x
$ROACHPROD run $CLUSTER:$CLIENT_MAPPING  --tag run -- \
"./cockroach workload run kv --db dbkv  --concurrency 1 --max-rate 200 --cycle-length 10 --duration=0 \$* {pgurl:1}"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/start-kv.sh"

	cat >"$outd/bin/start-tpcc.sh" <<EOF
#!/usr/bin/env bash
set -eu
workload_size=\${1:?specify the workload size light/medium/heavy}
echo "\$(date +%Y%m%d%H%M%S) \$0 \$*" >>"$ACTION_LOG"
if ! test -e "$outd/state/tpcc_populated" -a -e "$outd/state/tpcc_available_wh"; then
  echo "TPC-C data not loaded, use 5-import-tpcc-fixtures" >&2
  exit 1
fi
tpcc_db=\$(cat "$outd/state/tpcc_populated"|tail -n1)
tpcc_sz=\$(cat "$outd/state/tpcc_available_wh")

case \$workload_size in
light)
  requested_sz=2
  xtra_flags="--ramp=2s --wait=.01 --mix=newOrder=10,delivery=0,orderStatus=0,payment=0,stockLevel=0"
  ;;
medium)
  requested_sz=100
  xtra_flags="--ramp=2s --wait=.1 --mix=newOrder=10,delivery=0,orderStatus=0,payment=0,stockLevel=0"
  ;;
heavy)
  requested_sz=4000
  xtra_flags="--ramp=2s"
  ;;
*)
  echo "unknown size (supported: light/medium/heavy)" >&2
  exit 1
  ;;
esac

shift 1
if test \$requested_sz -gt \$tpcc_sz; then
  echo "Not enough warehouses in dataset (\$tpcc_sz) compared to requested (\$requested_sz)">&2
  exit 1
fi
echo "Running the TPCC workload for \$requested_sz warehouses..."
set -x
$ROACHPROD run $CLUSTER:$CLIENT_MAPPING  --tag run -- \
"./cockroach workload run tpcc --db \$tpcc_db --warehouses=\$tpcc_sz --active-warehouses=\$requested_sz --duration=0 --split --scatter \$xtra_flags \$* {pgurl:$CLUSTER_MAPPING}"
set +x
echo "Done."
EOF
	chmod +x "$outd/bin/start-tpcc.sh"
}

for cloud in gce aws; do
	for geop in h g; do
		for sz in small medium large; do
			genconf $sz-$geop $cloud
		done
	done
done
for cloud in local; do
	for geop in h; do
		for sz in small medium large; do
			genconf $sz-$geop $cloud
		done
	done
done
