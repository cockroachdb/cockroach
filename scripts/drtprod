#!/usr/bin/env bash

set -euo pipefail

# drtprod is a wrapper for roachprod for use when managing the long-lived DRT
# clusters that ensures consistent use of the correct project-assignment vars
# and done some additional sanity check enforcement on some flags.

export GCE_PROJECT=cockroach-drt
export ROACHPROD_DNS="drt.crdb.io"

if [ "$#" -lt 1 ]; then
  echo
  echo "drtprod runs roachprod commands against DRT clusters"
  echo
  echo "Usage: drtprod <command>"
  echo
  echo "Commands include:"
  echo "  push-hosts: write the ips and pgurl files for a cluster to a node/cluster"
  echo "  dns: update/create DNS entries in drt.crdb.io for a cluster"
  echo "  create: a wrapper for the 'roachprod' with predefined specs for named clusters"
  echo "  *: any other command is passed to roachprod, potentialy with flags addded"
  echo
  roachprod | sed -e 's/roachprod/drtprod/g'
  exit 0
fi

case $1 in
  "start")
    if [[ "$*" != *"--restart"* ]]; then
      # implied for long-lived DRT clusters; avoid on init w/ --restart=false.
      shift
      set -- start "--restart" "$@"
    fi
    if [[ "$*" != *"--secure"* ]]; then
      shift
      set -- start "--secure" "$@"
    fi
    if [[ "$*" != *"--sql-port 26257"* ]]; then
      shift
      set -- start "--sql-port" "26257" "$@"
    fi
    ;;
  "sql")
    if [[ "$*" != *"--secure"* ]]; then
      shift
      set -- sql --secure "$@"
    fi
    ;;
  "side-eye")
    shift
    cluster="$1"
    key="$(gcloud secrets versions access latest --secret='side-eye-key')"
    if [[ -z "${key}" ]]; then
      echo "no key"
      exit 1
    fi
    echo "installing side-eye on ${cluster}..."
    roachprod ssh $cluster -- "curl https://sh.side-eye.io/ | SIDE_EYE_API_TOKEN=${key} SIDE_EYE_ENVIRONMENT=${cluster} sh"
    exit 0
    ;;
  "dns")
    if [ "$#" -lt 2 ]; then
      echo "usage: drtprod $1 <cluster> [create]"
      exit 1
    fi 
    # roachprod only manages DNS in ephemeral, so we just do this ourselves.
    # These are very low-churn clusters so this is fine being manual and in a
    # wrapper.
    shift
    cluster=$1
    roachprod adminurl $cluster --ips |
      awk '{printf "%04d\t%s\n", NR, $0}' | # prepend the padded node IDs.
      sed -e 's,http://\(.*\):26258/,\1,g' | # remove the HTTP part.
      while read node ip; do
        host="${cluster}-${node}.drt.crdb.io."
        gcloud dns --project=cockroach-shared record-sets ${2:-update} "${host}" --rrdatas="${ip}" \
          --type="A" --zone="drt" --ttl=60
      done
    exit 0
    ;;
  "datadog")
    shift
    cluster="${1}"

    dd_api_key="$(gcloud --project=cockroach-drt secrets versions access latest --secret datadog-api-key)"
    if [ -z "${dd_api_key}" ]; then
      echo "Missing Datadog API key!"
      exit 1
    fi

    dd_site="us5.datadoghq.com"

    # Single quotes around the shell expansion cause it to be processed on the
    # remote host instead of the local host.
    roachprod ssh ${cluster} -- DD_INSTALL_ONLY=true bash -c '"$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"'

    roachprod ssh ${cluster} -- "sudo tee /etc/datadog-agent/datadog.yaml > /dev/null << EOF
---
api_key: ${dd_api_key}
site: ${dd_site}
hostname: \$(hostname --fqdn)
tags:
# Datadog reserved tags.
- env:development

# Custom tags.
- cluster:${cluster%:*}
- team:drt
EOF"

    roachprod ssh ${cluster} -- "sudo tee /etc/datadog-agent/conf.d/cockroachdb.d/conf.yaml > /dev/null << EOF
---
init_config:

instances:
- openmetrics_endpoint: http://localhost:26258/_status/vars
  tls_verify: false
  service: drt-cockroachdb
EOF"

    roachprod ssh ${cluster} -- 'sudo systemctl enable datadog-agent && sudo systemctl restart datadog-agent'

    # Single quotes around the shell expansion cause it to be processed on the
    # remote host instead of the local host.
    roachprod ssh ${cluster} -- bash -c '"$(curl -L https://raw.githubusercontent.com/fluent/fluent-bit/master/install.sh)"'

    roachprod ssh ${cluster} -- "sudo tee /etc/fluent-bit/fluent-bit.yaml > /dev/null << EOF
---
service:
  flush: 1
  daemon: off
  http_server: on
  http_listen: 127.0.0.1
  http_port: 2020
  log_level: info
  storage.path: /tmp
  storage.metrics: on
  storage.max_chunks_up: 30
  storage.sync: full
  storage.checksum: on
  storage.delete_irrecoverable_chunks: on
  parsers_file: parsers.conf
  plugins_file: plugins.conf
pipeline:
  inputs:
  - name: tcp
    tag: cockroachdb
    listen: 127.0.0.1
    port: 5170
    format: json
    storage.type: filesystem
    alias: cockroachdb
  outputs:
  - name: datadog
    match: cockroachdb
    host: http-intake.logs.${dd_site}
    tls: on
    compress: gzip
    apikey: ${dd_api_key}
    dd_source: cockroachdb
    dd_service: drt-cockroachdb
    dd_tags: env:development,host:\$(hostname -f),cluster:${cluster%:*},team:drt
    alias: cockroachdb
    storage.total_limit_size: 25MB
EOF"

    roachprod ssh ${cluster} -- "sudo tee /etc/systemd/system/fluent-bit.service > /dev/null << EOF
[Unit]
Description=Fluent Bit
Documentation=https://docs.fluentbit.io/manual/
Requires=network.target
After=network.target

[Service]
Type=simple
EnvironmentFile=-/etc/sysconfig/fluent-bit
EnvironmentFile=-/etc/default/fluent-bit
ExecStart=/opt/fluent-bit/bin/fluent-bit -c //etc/fluent-bit/fluent-bit.yaml
Restart=always

[Install]
WantedBy=multi-user.target
EOF"

    roachprod ssh ${cluster} -- 'sudo systemctl daemon-reload && sudo systemctl enable fluent-bit && sudo systemctl restart fluent-bit'

    exit 0
    ;;
  "create")
    if [ "$#" -lt 2 ]; then
      echo "usage: drtprod create {drt-main,drt-ua1,drt-ua2}"
      exit 1
    fi
    case "${2}" in
      "drt-main")
        roachprod create drt-main \
          --clouds gce \
          --gce-managed \
          --gce-zones "us-east1-b,us-west1-b,europe-west2-b" \
          --nodes 15 \
          --gce-machine-type n2-standard-16 \
          --gce-pd-volume-size 10000 --local-ssd=false \
          --username drt \
          --enable-fluent-sink \
          --lifetime 8760h
        # setup dns
        $0 dns drt-main create
        ;;
      "drt-chaos")
        roachprod create drt-chaos \
          --clouds gce \
          --gce-managed \
          --gce-zones "us-east1-d,us-east1-b,us-east1-c" \
          --nodes 6 \
          --gce-machine-type n2-standard-8 \
          --gce-pd-volume-size 3000 --local-ssd=false \
          --username drt \
          --enable-fluent-sink \
          --lifetime 8760h
        # setup dns
        $0 dns drt-chaos create
        ;;
      "drt-ua1")
        roachprod create drt-ua1 \
          --clouds="gce" \
          --gce-zones="us-east1-c" \
          --nodes="7" \
          --gce-machine-type="n2-standard-24" \
          --local-ssd="true"  \
          --gce-local-ssd-count="16" \
          --username="drt" \
          --enable-fluent-sink \
          --lifetime="8760h" \
          --gce-image "ubuntu-2204-jammy-v20240319"
        # setup dns
        $0 dns drt-ua1 create || $0 dns drt-ua1
        ;;
      "drt-ua2")
      set -x
        roachprod create drt-ua2 \
          --clouds="gce" \
          --gce-zones="us-east1-c" \
          --nodes="7" \
          --gce-machine-type="n2d-standard-24" \
          --local-ssd="true"  \
          --gce-local-ssd-count="16" \
          --username="drt" \
          --enable-fluent-sink \
          --lifetime="8760h" \
          --gce-image "ubuntu-2204-jammy-v20240319"
        # setup dns
        $0 dns drt-ua2 create || $0 dns drt-ua2
        ;;
      "workload-ua")
        set -x
        roachprod create workload-ua \
          --clouds="gce" \
          --gce-zones="us-east1-c" \
          --nodes="1" \
          --gce-machine-type="n2-standard-8" \
          --os-volume-size 100 \
          --username workload \
          --enable-fluent-sink \
          --lifetime 8760h \
          --gce-image "ubuntu-2204-jammy-v20240319"
        # setup dns
        $0 dns workload-ua create || $0 dns workload-ua
        # TODO(dt): push the pg-urls for ua2 and ua2 to it.
        # TODO(dt): push a systemd unit file to it to run tpcc workload.
        ;;
      *)
        echo
        echo "ATN: If $2 is intended to be long-lived, please define it by name in drtprod instead."
        echo
        exec roachprod "$@"
      ;;
    esac
    exit 0
esac


roachprod "$@"
