// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.proto;
option go_package = "proto";

import "gogoproto/gogo.proto";
import "cockroach/proto/api.proto";
import "cockroach/proto/data.proto";
import "cockroach/proto/errors.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;

message Table {
  optional string name = 1 [(gogoproto.nullable) = false];
}

message Column {
  enum ColumnType {
    BYTES = 0;
  }

  optional string name = 1 [(gogoproto.nullable) = false];
  optional ColumnType type = 2 [(gogoproto.nullable) = false];
}

message Index {
  optional string name = 1 [(gogoproto.nullable) = false];
  optional bool unique = 2 [(gogoproto.nullable) = false];
}

message TableSchema {
  message IndexByName {
    optional Index index = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    // An ordered list of column names of which the index is comprised. Each
    // column_name refers to a column in the TableSchema's columns.
    repeated string column_names = 2;
  }
  optional Table table = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated Column columns = 2 [(gogoproto.nullable) = false];
  // An ordered list of indexes included in the table. The first index is the
  // primary key; it is required.
  repeated IndexByName indexes = 3 [(gogoproto.nullable) = false];
}

message ColumnDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Column column = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message IndexDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Index index = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // An ordered list of column ids of which the index is comprised. Each
  // column_id refers to a column in the TableDescriptor's columns; special
  // care is taken to update this when deleting columns.
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs"];
}

// A TableDescriptor represents a table and is stored in a structured metadata
// key. The TableDescriptor has a globally-unique ID, while its member
// {Column,Index}Descriptors have locally-unique IDs.
message TableDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Table table = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated ColumnDescriptor columns = 3 [(gogoproto.nullable) = false];
  // next_column_id is used to ensure that deleted column ids are not reused
  optional uint32 next_column_id = 4 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextColumnID"];
  repeated IndexDescriptor indexes = 5 [(gogoproto.nullable) = false];
  // next_index_id is used to ensure that deleted index ids are not reused
  optional uint32 next_index_id = 6 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextIndexID"];
}

message CreateTableRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional TableSchema schema = 2 [(gogoproto.nullable) = false];
}

message CreateTableResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional uint32 table_id = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "TableID"];
}

// TODO(tamird): Investigate generating code from this. For now, it is useful
// as documentation.
// TODO(tamird): Uncomment the below when one of the following is fixed
// https://github.com/gogo/protobuf/issues/60
// https://github.com/grpc/grpc-go/issues/219
// service SchemaService {
//   rpc CreateTable (CreateTableRequest) returns (CreateTableResponse);
// }

// TableRequestHeader is supplied with every structured API request.
message TableRequestHeader {
  // The name of the table this request references.
  optional string name = 1 [(gogoproto.nullable) = false];
  // The name of the index. Defaults to the primary index when empty.
  optional string index = 2 [(gogoproto.nullable) = false];
  // Timestamp specifies time at which read or writes should be
  // performed. If the timestamp is set to zero value, its value
  // is initialized to the wall time of the receiving gateway node.
  optional Timestamp timestamp = 3 [(gogoproto.nullable) = false];
  // CmdID is optionally specified for request idempotence
  // (i.e. replay protection).
  optional ClientCmdID cmd_id = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "CmdID"];
  // User is the originating user. Used to lookup priority when
  // scheduling queued operations at target node.
  optional string user = 5 [(gogoproto.nullable) = false];
  // UserPriority specifies priority multiple for non-transactional
  // commands. This value should be a positive integer [1, 2^31-1).
  // It's properly viewed as a multiple for how likely this
  // transaction will be to prevail if a write conflict occurs.
  // Commands with UserPriority=100 will be 100x less likely to be
  // aborted as conflicting transactions or non-transactional commands
  // with UserPriority=1. This value is ignored if Txn is
  // specified. If neither this value nor Txn is specified, the value
  // defaults to 1.
  optional int32 user_priority = 6 [default = 1];
  // Txn is set non-nil if a transaction is underway. To start a txn,
  // the first request should set this field to non-nil with name and
  // isolation level set as desired. The response will contain the
  // fully-initialized transaction with txn ID, priority, initial
  // timestamp, and maximum timestamp. The transaction returned in a
  // response is feed to the next request.
  optional Transaction txn = 7;
  // ReadConsistency specifies the consistency for read
  // operations. The default is CONSISTENT. This value is ignored for
  // write operations.
  optional ReadConsistencyType read_consistency = 8 [(gogoproto.nullable) = false];
}

// TableResponseHeader is returned with every structured API response.
message TableResponseHeader {
  // Error is non-nil if an error occurred.
  optional Error error = 1;
  // Timestamp specifies time at which read or write actually was
  // performed. In the case of both reads and writes, if the timestamp
  // supplied to the request was 0, the wall time of the node
  // servicing the request will be set here. Additionally, in the case
  // of writes, this value may be increased from the timestamp passed
  // with the RequestHeader if the key being written was either read
  // or written more recently.
  //
  // TODO(vivek): Is this only relevant in the non-transactional case?
  optional Timestamp timestamp = 2 [(gogoproto.nullable) = false];
  // Transaction is non-nil if the request specified a non-nil
  // transaction. The transaction timestamp and/or priority may have
  // been updated, depending on the outcome of the request.
  optional Transaction txn = 3;
}

// A ColumnCollection represents a collection of columns as name:value pairs.
message ColumnCollection {
  message ColumnNameValue {
    // Column name.
    optional string name = 1;
    // A Nil Value indicates non-existence of the value.
    optional Value value = 2;
  }
  repeated ColumnNameValue columns = 1;
}

// A ValueCollection is a collection of values. A non-existent value
// is to be represented by Nil Bytes.
message ValueCollection {
  repeated Value values = 1;
}

// A GetTableRowRequest is used to read a table row.
message GetTableRowRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ColumnCollection key = 2 [(gogoproto.nullable) = false];
  // Get specified columns from the row.
  repeated string columns = 3;
}

// A GetTableRowResponse returns a row.
// If the key doesn't exist, it returns an empty row.
message GetTableRowResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ValueCollection row = 2 [(gogoproto.nullable) = false];
}

// A PutTableRowRequest inserts/updates a row in the table. To write
// an empty value in a cell specify an empty Bytes in the Value. To Delete
// a column specify Nil Bytes.
message PutTableRowRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // The columns forming the primary key columns must be part of the ColumnCollection.
  optional ColumnCollection row = 3 [(gogoproto.nullable) = false];
}

// A PutTableRowResponse is the response.
message PutTableRowResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A ConditionalPutTableRowRequest.
//
// Puts row if exp_row equals an existing row in the DB. Returns error
// and the actual value of the row in the response if exp_row doesn't
// match the full row in the DB. Both exp_row and row are not allowed
// to contain any of the primary key columns.
message ConditionalPutTableRowRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ColumnCollection key = 2 [(gogoproto.nullable) = false];
  optional ColumnCollection exp_row = 3 [(gogoproto.nullable) = false];
  optional ColumnCollection row = 4[(gogoproto.nullable) = false];
}

// A ConditionalPutTableRowResponse. The row returned is the actual row in
// the DB that doesn't full match exp_row in the request. Only the columns
// forming the index key match up with those in exp_row.
message ConditionalPutTableRowResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ValueCollection row = 2[(gogoproto.nullable) = false];
}

// An IncrementTableRequest increments the value of the columns in row.
// row can only contain the columns forming the index key and columns
// of type integer. Incrementing by 0 is not a noop, and creates a zero value.
message IncrementTableRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ColumnCollection row = 2 [(gogoproto.nullable) = false];
}

// An IncrementTableResponse returns the row with the new column values.
message IncrementTableResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ValueCollection row = 2 [(gogoproto.nullable) = false];
}

// A DeleteTableRowRequest deletes the entire row. key contains the columns
// forming the index key.
message DeleteTableRowRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  optional ColumnCollection key = 2 [(gogoproto.nullable) = false];
}

// A DeleteTableRowResponse.
message DeleteTableRowResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

// A DeleteTableRowRangeRequest deletes the specified rows. Both key and end_key
// must only contain the columns forming the index key.
message DeleteTableRowRangeRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Delete *all* entries between Key (inclusive) and EndKey
  // (exclusive).
  optional ColumnCollection key = 2 [(gogoproto.nullable) = false];
  optional ColumnCollection end_key = 3 [(gogoproto.nullable) = false];
  // Must be > 0.
  optional int64 max_entries_to_delete = 4 [(gogoproto.nullable) = false];
}

// A DeleteTableRowRangeResponse.
message DeleteTableRowRangeResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Number of entries deleted.
  optional int64 num_deleted = 2 [(gogoproto.nullable) = false];
}

// A ScanTableRequest. It specifies the start and end keys for the scan
// and the maximum number of results.
message ScanTableRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Both key and end_key must only contain the columns forming the index key.
  optional ColumnCollection key = 3 [(gogoproto.nullable) = false];
  optional ColumnCollection end_key = 4 [(gogoproto.nullable) = false];
  optional int64 max_results = 5 [(gogoproto.nullable) = false];
  // Get the specified columns from the scanned rows.
  repeated string columns = 6;
}

// A ScanTableResponse is the response.
message ScanTableResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // Empty in case of error.
  repeated ValueCollection rows = 2;
}

// A BatchTableRequest contains one or more requests to be executed in
// parallel, or if applicable (based on write-only commands and
// range-locality), as a single update.
message BatchTableRequest {
  optional TableRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // A TableRequestUnion contains exactly one of the optional requests.
  message TableRequestUnion {
    option (gogoproto.onlyone) = true;
    oneof value {
      GetTableRowRequest get = 2;
      PutTableRowRequest put = 3;
      ConditionalPutTableRowRequest conditional_put = 4;
      DeleteTableRowRequest delete = 6;
      DeleteTableRowRangeRequest delete_range = 7;
      ScanTableRequest scan = 8;
      EndTransactionRequest end_transaction = 9;
    }
  }
  repeated TableRequestUnion requests = 2;
}

// A BatchTableResponse contains one or more responses, one per request
// corresponding to the requests in the matching BatchRequest. The
// error in the response header is set to the first error from the
// slice of responses, if applicable.
message BatchTableResponse {
  optional TableResponseHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // A TableResponseUnion contains exactly one of the optional responses.
  message TableResponseUnion {
    option (gogoproto.onlyone) = true;
    oneof value {
      GetTableRowResponse get = 2;
      PutTableRowResponse put = 3;
      ConditionalPutTableRowResponse conditional_put = 4;
      DeleteTableRowResponse delete = 6;
      DeleteTableRowRangeResponse delete_range = 7;
      ScanTableResponse scan = 8;
      EndTransactionResponse end_transaction = 9;
    }
  }
  repeated TableResponseUnion responses = 2;
}
