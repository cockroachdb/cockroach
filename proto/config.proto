// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)
// Author: Bram Gruneir (bram+code@cockroachlabs.com)

syntax = "proto2";
package cockroach.proto;
option go_package = "proto";

import "gogoproto/gogo.proto";

// Attributes specifies a list of arbitrary strings describing
// node topology, store type, and machine capabilities.
message Attributes {
  repeated string attrs = 1 [(gogoproto.moretags) = "yaml:\"attrs,flow\""];
}

// Replica describes a replica location by node ID (corresponds to a
// host:port via lookup on gossip network), store ID (identifies the
// device) and associated attributes. Replicas are stored in Range
// lookup records (meta1, meta2).
message Replica {
  option (gogoproto.goproto_stringer) = false;

  optional int32 node_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional int32 store_id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "StoreID", (gogoproto.casttype) = "StoreID"];
}

// RangeDescriptor is the value stored in a range metadata key.
// A range is described using an inclusive start key, a non-inclusive end key,
// and a list of replicas where the range is stored.
message RangeDescriptor {
  optional int64 raft_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "RaftID", (gogoproto.casttype) = "RaftID"];
  // StartKey is the first key which may be contained by this range.
  optional bytes start_key = 2 [(gogoproto.casttype) = "Key"];
  // EndKey marks the end of the range's possible keys.  EndKey itself is not
  // contained in this range - it will be contained in the immediately
  // subsequent range.
  optional bytes end_key = 3 [(gogoproto.casttype) = "Key"];
  // Replicas is the set of replicas on which this range is stored, the
  // ordering being arbitrary and subject to permutation.
  repeated Replica replicas = 4 [(gogoproto.nullable) = false];
}

// GCPolicy defines garbage collection policies which apply to MVCC
// values within a zone.
//
// TODO(spencer): flesh this out to include maximum number of values
//   as well as whether there's an intersection between max values
//   and TTL or a union.
message GCPolicy {
  // TTLSeconds specifies the maximum age of a value before it's
  // garbage collected. Only older versions of values are garbage
  // collected. Specifying <=0 mean older versions are never GC'd.
  optional int32 ttl_seconds = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "TTLSeconds"];
}

// AcctConfig holds accounting configuration.
message AcctConfig {
  optional string cluster_id = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"cluster_id,omitempty\""];
}

// PermConfig holds permission configuration, specifying read/write ACLs.
message PermConfig {
  // ACL lists users with read permissions.
  repeated string read = 1 [(gogoproto.moretags) = "yaml:\"read,omitempty\""];
  // ACL lists users with write permissions.
  repeated string write = 2 [(gogoproto.moretags) = "yaml:\"write,omitempty\""];
}

// ZoneConfig holds configuration that is needed for a range of KV pairs.
message ZoneConfig {
  // ReplicaAttrs is a slice of Attributes, each describing required attributes
  // for each replica in the zone. The order in which the attributes are stored
  // in ReplicaAttrs is arbitrary and may change.
  repeated Attributes replica_attrs = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"replicas,omitempty\""];
  optional int64 range_min_bytes = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_min_bytes,omitempty\""];
  optional int64 range_max_bytes = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"range_max_bytes,omitempty\""];
  // If GC policy is not set, uses the next highest, non-null policy
  // in the zone config hierarchy, up to the default policy if necessary.
  optional GCPolicy gc = 4 [(gogoproto.customname) = "GC", (gogoproto.moretags) = "yaml:\"gc,omitempty\""];
}

// TODO(bram): this comment has rotted, there is no size.
// RangeTree holds the root node and size of the range tree.
message RangeTree {
  optional bytes root_key = 1 [(gogoproto.casttype) = "Key"];
}

// RangeTreeNode holds the configuration for each node of the Red-Black Tree that references all ranges.
message RangeTreeNode {
  optional bytes key = 1 [(gogoproto.casttype) = "Key"];

  // Color is black if true, red if false.
  optional bool black = 2 [(gogoproto.nullable) = false];

  // TODO(bram): this comment has rotted, parent key is not nullable
  // If the parent key is null, this is the root node.
  optional bytes parent_key = 3 [(gogoproto.casttype) = "Key"];
  optional bytes left_key = 4 [(gogoproto.customtype) = "Key"];
  optional bytes right_key = 5 [(gogoproto.customtype) = "Key"];
}

// Addr holds any network address. It is structurally similar to net.Addr
// however String is replaced with Address so the proto will compile.
message Addr {
  optional string network = 1 [(gogoproto.nullable) = false];
  optional string address = 2 [(gogoproto.nullable) = false];
}

// StoreCapacity contains capacity information for a storage device.
message StoreCapacity {
  optional int64 Capacity = 1 [(gogoproto.nullable) = false];
  optional int64 Available = 2 [(gogoproto.nullable) = false];
  optional int32 RangeCount = 3 [(gogoproto.nullable) = false];
}

// NodeDescriptor holds details on node physical/network topology.
message NodeDescriptor {
  optional int32 node_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional Addr address = 2 [(gogoproto.nullable) = false];
  optional Attributes attrs = 3 [(gogoproto.nullable) = false];
}

// StoreDescriptor holds store information including store attributes, node
// descriptor and store capacity.
message StoreDescriptor {
  optional int32 store_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "StoreID", (gogoproto.casttype) = "StoreID"];
  optional Attributes attrs = 2 [(gogoproto.nullable) = false];
  optional NodeDescriptor node = 3 [(gogoproto.nullable) = false];
  optional StoreCapacity capacity = 4 [(gogoproto.nullable) = false];
}
