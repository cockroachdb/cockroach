// Supplied with every request.
message RequestHeader {
  // Specify snapshot_timestamp for snapshot reads. In nanoseconds since the
  // epoch. This value is mutually exclusive with tx_id.
  optional uint64 snapshot_timestamp = 1;
  // Set if a transaction is underway. Specify as the empty string to start a
  // new transaction. This value is mutually exlusive with snapshot_timestamp.
  optional string tx_id = 2;
  // The maximum wall time seen by the client to date (in nanoseconds since the
  // epoch). This should be supplied with successive transactions for
  // linearalizability for this client.
  optional uint64 max_wall_time = 3;
}

// Supplied with every response.
message ResponseHeader {
  // Error/Success result.
  // TODO(shawn): Why is this a message? Why not just put the Error message
  // directly in ResponseHeader.
  message Result {
    message Error {
      optional int32 code = 1;
      optional string message = 2;
      optional string details = 3;
    }

    optional Error error = 1;
  }

  optional Result result = 1;

  // Returned if transaction is underway.
  optional string tx_id = 2;
}

// Multiple values at the same key are supported based on timestamp.
message Value {
  optional string value = 1;
  // Timestamp of value in nanoeconds since epoch.
  optional uint64 timestamp = 2;
  // Expiration in nanoseconds.
  optional uint64 expiration = 3;
}

// Test if key is present.
message ContainsRequest {
  optional RequestHeader header = 1;
  optional string key = 2;  // must be non-empty
}

message ContainsResponse {
  optional ResponseHeader header = 1;
  optional bool exists = 2;
}

// Retrieves value for key.
message GetRequest {
  optional RequestHeader header = 1;
  optional string key = 2;  // must be non-empty
}

message GetResponse {
  optional ResponseHeader header = 1;
  optional Value value = 2;  // present if exists
}

// Puts value for key.
// Conditionally puts a value for key if exp_value is set.
//   - Returns true and sets value if exp_value equals
//     existing value.
//   - If key doesn’t exist and exp_value is empty, sets
//     value and returns true.
//   - Otherwise, returns false.
message PutRequest {
  optional RequestHeader header = 1;
  optional string key = 2;  // must be non-empty
  optional Value value = 3;  // empty to test for non-existence
  optional Value exp_value = 4;  // omit to verify
}

message PutResponse {
  optional ResponseHeader header = 1;
  optional Value conditional_fail = 2;  // set if conditional put failed with actual value
}

// Increments the value for key, interpreting the existing
// value as a varint64.
// Returns the new value. If the value could not be
// decoded as specified, returns an error.
message IncrementRequest {
  optional RequestHeader header = 1;
  optional string key = 2;
  optional int64 increment = 3;
}

message IncrementResponse {
  optional ResponseHeader header = 1;
  optional Value new_value = 2;  // value is varint64 encoded
}

// Deletes key.
message DeleteRequest {
  optional RequestHeader header = 1;
  optional string key = 2;  // must be non-empty
}

message DeleteResponse {
  optional ResponseHeader header = 1;
}

// Deletes range of keys.
message DeleteRangeRequest {
  optional RequestHeader header = 1;
  optional string start_key = 2;  // empty to start at first key
  optional string end_key = 3;  // non-inclusive; if empty, deletes all
}

message DeleteRangeResponse {
  optional ResponseHeader header = 1;
  optional uint64 num_deleted = 2;
}

// Scans multiple values in a range of keys.
message ScanRequest {
  optional RequestHeader header = 1;
  optional string start_key = 2;  // empty to start at first key
  optional string max_key = 3;  // optional max key; empty to ignore
  optional uint64 max_results = 4;  // must be > 0
}

message ScanResponse {
  optional ResponseHeader header = 1;

  message KeyVal {
    optional string key = 1;  // will be non-empty
    optional Value value = 2;  // will be non-empty
  }

  repeated KeyVal key_value = 2;  // empty if at end of key range
  optional string last_key = 3;  // non-empty if key_values were returned
}

// Commits or rolls back an ongoing transaction.
message EndTransactionRequest {
  optional RequestHeader header = 1;
  optional bool commit = 2;  // false to abort and rollback
}

message EndTransactionResponse {
  optional ResponseHeader header = 1;
  optional uint64 commit_timestamp = 2;
  optional uint64 commit_wait = 3;  // remaining wait (us)
}

// Scans and deletes messages from a recipient message queue.
message ReapQueueRequest {
  // Must be part of a transaction.
  optional RequestHeader header = 1;
  optional string recipient_key = 2;
  optional uint64 max_results = 3;  // must be > 0
}

message ReapQueueResponse {
  optional ResponseHeader header = 1;
  repeated string message = 2;
}

// Used internally for accounting.
message AccountingRequest {
  optional RequestHeader header = 1;
  enum AccountingType {
    StableCount = 1;
    EventOccurrence = 2;
  }
  optional AccountingType type = 2;
  optional string key = 3;
  optional uint64 timestamp = 4;  // floor(walltime, HOUR)
  repeated int64 count = 5; // one per minute
}

message AccountingResponse {
  optional ResponseHeader header = 1;
}

// Queues updates for eventual execution or delivery.
message QueueRequest {
  optional RequestHeader header = 1;
  // Either “updates” or “delivery” must be specified.
  message Updates {
    optional PutRequest put_request = 1;
    optional IncrementRequest increment_request = 2;
    optional DeleteRequest delete_request = 3;
    optional DeleteRangeRequest delete_range_request = 4;
    optional AccountingRequest accounting_request = 5;
  }

  optional Updates updates = 2;  // execution-only
  message Delivery {
    optional string recipient_key = 1;
    optional string client_message = 2;
  }

  optional Delivery delivery = 3;  // delivered to recipient key
}

message QueueResponse {
  optional ResponseHeader header = 1;
}

// Sends a batch of updates.
message BatchRequest {
  message Request {
    optional PutRequest put_request = 1;
    optional IncrementRequest increment_request = 2;
    optional DeleteRequest delete_request = 3;
    optional DeleteRangeRequest delete_range_request = 4;
    optional ReapQueueRequest reap_queue_request = 5;
    optional EndTransactionRequest end_transactionRequest = 6;
    optional AccountingRequest accounting_request = 7;
    optional QueueRequest queue_request = 8;
  }

  repeated Request request = 1;
}

message BatchResponse {
  message Response {
    optional PutResponse put_response = 1;
    optional IncrementResponse increment_response = 2;
    optional DeleteResponse delete_response = 3;
    optional DeleteRangeResponse delete_range_response = 4;
    optional ReapQueueResponse reap_queue_response = 5;
    optional EndTransactionResponse end_transaction_response = 6;
    optional AccountingResponse accounting_response = 7;
    optional QueueResponse queue_response = 8;
  }

  repeated Response response = 1;
}
