// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto2";
package cockroach.proto;
option go_package = "proto";

import "cockroach/proto/metadata.proto";
import "cockroach/proto/data.proto";
import "gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// A NotLeaderError indicates that the current range is not the
// leader. If the leader is known, its Replica is set in the error.
message NotLeaderError {
  optional Replica replica = 1;
  optional Replica leader = 2;
  optional int64 range_id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];
}

// A NodeUnavailableError indicates that the sending gateway can
// not process requests at the time, and that the client should
// retry the request with another peer.
message NodeUnavailableError {
}

// A RangeNotFoundError indicates that a command was sent to a range
// which is not hosted on this store.
message RangeNotFoundError {
  optional int64 range_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];
}

// A RangeKeyMismatchError indicates that a command was sent to a
// range which did not contain the key(s) specified by the command.
message RangeKeyMismatchError {
  optional bytes request_start_key = 1 [(gogoproto.casttype) = "Key"];
  optional bytes request_end_key = 2 [(gogoproto.casttype) = "Key"];
  optional RangeDescriptor range = 3;
}

// A ReadWithinUncertaintyIntervalError indicates that a read at timestamp
// encountered a versioned value at existing_timestamp within the uncertainty
// interval of the reader.
// The read should be retried at existing_timestamp+1.
message ReadWithinUncertaintyIntervalError {
  optional Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  optional Timestamp existing_timestamp = 2 [(gogoproto.nullable) = false];
  optional int32 node_id = 3 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional Transaction txn = 4 [(gogoproto.nullable) = false];
}

// A TransactionAbortedError indicates that the transaction was
// aborted by another concurrent transaction.
message TransactionAbortedError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
}

// A TransactionPushError indicates that the transaction could not
// continue because it encountered a write intent from another
// transaction which it was unable to push.
message TransactionPushError {
  // txn can be null in the event the push error happened to a
  // non-transactional method.
  optional Transaction txn = 1;
  optional Transaction pushee_txn = 2 [(gogoproto.nullable) = false];
}

// A TransactionRetryError indicates that the transaction must be
// retried, usually with an increased transaction timestamp. The
// transaction struct to use is returned with the error.
message TransactionRetryError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
}

// A TransactionStatusError indicates that the transaction status is
// incompatible with the requested operation. This might mean the
// transaction has already been committed. It might also be the case
// that the request to modify the transaction failed due to a
// regression in transaction epoch or timestamp, both of which may
// only monotonically increase.
message TransactionStatusError {
  optional Transaction txn = 1 [(gogoproto.nullable) = false];
  optional string msg = 2 [(gogoproto.nullable) = false];
}

// A WriteIntentError indicates that one or more write intent
// belonging to another transaction were encountered leading to a
// read/write or write/write conflict. The keys at which the intent
// was encountered are set, as are the txn records for the intents'
// transactions. Resolved is set if the intent was successfully
// resolved, meaning the client may retry the operation
// immediately. If Resolved is false, the client should back off and
// retry.
message WriteIntentError {
  repeated Intent intents = 1 [(gogoproto.nullable) = false];
  optional bool resolved = 2 [(gogoproto.nullable) = false];
}

// A WriteTooOldError indicates that a write encountered a versioned
// value newer than its timestamp, making it impossible to rewrite
// history. The write should be retried at existing_timestamp+1.
message WriteTooOldError {
  optional Timestamp timestamp = 1 [(gogoproto.nullable) = false];
  optional Timestamp existing_timestamp = 2 [(gogoproto.nullable) = false];
}

// An OpRequiresTxnError indicates that a command required to be
// carried out in a transactional context but was not.
// For example, a Scan which spans ranges requires a transaction.
// The operation should be retried inside of a transaction.
message OpRequiresTxnError {
}

// A ConditionFailedError indicates that the expected value
// of a ConditionalPutRequest was not found, either
// because it was missing or was not equal. The error will
// contain the actual value found.
message ConditionFailedError {
  optional Value actual_value = 1;
}

// A LeaseRejectedError indicates that the requested replica could
// not acquire the desired lease because of an existing leader lease.
message LeaseRejectedError {
  optional Lease Requested = 1 [(gogoproto.nullable) = false];
  optional Lease Existing = 2 [(gogoproto.nullable) = false];
}

// A SendError indicates that a message could not be delivered to
// the desired recipient(s).
message SendError {
  optional string message = 1 [(gogoproto.nullable) = false];
  optional bool retryable = 2 [(gogoproto.nullable) = false];
}

// ErrorDetail is a union type containing all available errors.
message ErrorDetail {
  option (gogoproto.onlyone) = true;

  optional NotLeaderError not_leader = 1;
  optional RangeNotFoundError range_not_found = 2;
  optional RangeKeyMismatchError range_key_mismatch = 3;
  optional ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  optional TransactionAbortedError transaction_aborted = 5;
  optional TransactionPushError transaction_push = 6;
  optional TransactionRetryError transaction_retry = 7;
  optional TransactionStatusError transaction_status = 8;
  optional WriteIntentError write_intent = 9;
  optional WriteTooOldError write_too_old = 10;
  optional OpRequiresTxnError op_requires_txn = 11;
  optional ConditionFailedError condition_failed = 12;
  optional LeaseRejectedError lease_rejected = 13;
  optional NodeUnavailableError node_unavailable = 14;
  optional SendError send = 15;
}

// TransactionRestart indicates how an error should be handled in a
// transactional context.
enum TransactionRestart {
  // ABORT (the default) is for errors that are considered permanent
  // and should abort the transaction.
  ABORT = 0;

  // BACKOFF is for errors that can retried by restarting the transaction
  // after an exponential backoff.
  BACKOFF = 1;

  // IMMEDIATE is for errors that can be retried by restarting the
  // transaction immediately.
  IMMEDIATE = 2;
}

// Error is a generic representation including a string message
// and information about retryability.
message Error {
  // Message is a human-readable error message.
  optional string message = 1 [(gogoproto.nullable) = false];

  // If retryable is true, the error condition may be transient and the failed
  // operation may be retried (within the same transaction).
  optional bool retryable = 2 [(gogoproto.nullable) = false];

  // If transaction_restart is not ABORT, the error condition may be handled by
  // restarting the transaction (with or without a backoff).
  optional TransactionRestart transaction_restart = 4 [(gogoproto.nullable) = false];

  // If an ErrorDetail is present, it may contain additional structured data
  // about the error.
  optional ErrorDetail detail = 3;
}
