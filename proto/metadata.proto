// Copyright 2014 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Spencer Kimball (spencer.kimball@gmail.com)
// Author: Bram Gruneir (bram+code@cockroachlabs.com)

syntax = "proto2";
package cockroach.proto;
option go_package = "proto";

import "gogoproto/gogo.proto";
import "cockroach/util/unresolved_addr.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

// Attributes specifies a list of arbitrary strings describing
// node topology, store type, and machine capabilities.
message Attributes {
  option (gogoproto.goproto_stringer) = false;

  repeated string attrs = 1 [(gogoproto.moretags) = "yaml:\"attrs,flow\""];
}

// Replica describes a replica location by node ID (corresponds to a
// host:port via lookup on gossip network) and store ID (identifies the
// device).
message Replica {
  optional int32 node_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional int32 store_id = 2 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "StoreID", (gogoproto.casttype) = "StoreID"];

  // ReplicaID uniquely identifies a replica instance. If a range is removed from
  // a store and then re-added to the same store, the new instance will have a
  // higher ReplicaID.
  optional int32 replica_id = 3 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "ReplicaID", (gogoproto.casttype) = "ReplicaID"];
}

// RangeDescriptor is the value stored in a range metadata key.
// A range is described using an inclusive start key, a non-inclusive end key,
// and a list of replicas where the range is stored.
message RangeDescriptor {
  optional int64 range_id = 1 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "RangeID", (gogoproto.casttype) = "RangeID"];
  // StartKey is the first key which may be contained by this range.
  optional bytes start_key = 2 [(gogoproto.casttype) = "Key"];
  // EndKey marks the end of the range's possible keys.  EndKey itself is not
  // contained in this range - it will be contained in the immediately
  // subsequent range.
  optional bytes end_key = 3 [(gogoproto.casttype) = "Key"];
  // Replicas is the set of nodes/stores on which replicas of this
  // range are stored, the ordering being arbitrary and subject to
  // permutation.
  repeated Replica replicas = 4 [(gogoproto.nullable) = false];

  // NextReplicaID is a counter used to generate replica IDs.
  optional int32 next_replica_id = 5 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextReplicaID", (gogoproto.casttype) = "ReplicaID"];
}

// RangeTree holds the root node of the range tree.
message RangeTree {
  optional bytes root_key = 1 [(gogoproto.casttype) = "Key"];
}

// RangeTreeNode holds the configuration for each node of the Red-Black Tree that references all ranges.
message RangeTreeNode {
  optional bytes key = 1 [(gogoproto.casttype) = "Key"];

  // Color is black if true, red if false.
  optional bool black = 2 [(gogoproto.nullable) = false];

  // If the parent key is null, this is the root node.
  optional bytes parent_key = 3 [(gogoproto.casttype) = "Key"];
  optional bytes left_key = 4 [(gogoproto.casttype) = "Key"];
  optional bytes right_key = 5 [(gogoproto.casttype) = "Key"];
}

// StoreCapacity contains capacity information for a storage device.
message StoreCapacity {
  optional int64 Capacity = 1 [(gogoproto.nullable) = false];
  optional int64 Available = 2 [(gogoproto.nullable) = false];
  optional int32 RangeCount = 3 [(gogoproto.nullable) = false];
}

// NodeDescriptor holds details on node physical/network topology.
message NodeDescriptor {
  optional int32 node_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "NodeID", (gogoproto.casttype) = "NodeID"];
  optional util.UnresolvedAddr address = 2 [(gogoproto.nullable) = false];
  optional Attributes attrs = 3 [(gogoproto.nullable) = false];
}

// StoreDescriptor holds store information including store attributes, node
// descriptor and store capacity.
message StoreDescriptor {
  optional int32 store_id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "StoreID", (gogoproto.casttype) = "StoreID"];
  optional Attributes attrs = 2 [(gogoproto.nullable) = false];
  optional NodeDescriptor node = 3 [(gogoproto.nullable) = false];
  optional StoreCapacity capacity = 4 [(gogoproto.nullable) = false];
}
