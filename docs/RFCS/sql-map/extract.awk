BEGIN {
    initem = 0
    itemkey = ""
}

/\.\. workitem::/ && initem == 0 {
    initem = 1
    itemkey = substr($0, index($0, ":")+2)
    sub("^[ \t]*", "", itemkey)
    if (itemkey == "items") {
	printf "line %d: invalid item key: 'items'\n", NR >>"/dev/stderr"
	exit 1
    }
    if (itemkey in keys) {
	printf "line %d: duplicate item key: '%s'\n", NR, itemkey >>"/dev/stderr"
	exit 1
    }
    keys[itemkey] = itemkey
    depss[itemkey][""] = 123
    delete depss[itemkey][""]
    accelss[itemkey][""] = 123
    delete accelss[itemkey][""]
    attrs[itemkey] = ""
    next
}

/^[ \t]*:label:/ && initem == 1 {
    label = substr($0, index($0, ":")+7)
    sub("^[ \t]*", "", label)
    labels[itemkey] = label
    next
}
/^[ \t]*:deps:/ && initem == 1 {
    deps = substr($0, index($0, ":")+6)
    sub("^[ \t]*", "", deps)
    split(deps, depss[itemkey])
    next
}
/^[ \t]*:accels:/ && initem == 1 {
    accels = substr($0, index($0, ":")+8)
    sub("^[ \t]*", "", accels)
    split(accels, accelss[itemkey])
    next
}
/^[ \t]*:attr:/ && initem == 1 {
    attr = substr($0, index($0, ":")+6)
    sub("^[ \t]*", "", attr)
    attrs[itemkey] = attr
    next
}

/^[ \t]*([^:]|$)/ && initem == 1 {
    initem = 0
    printf ".. _%s:\n", itemkey
    print
    print "Overview:"
    print
    print ".. raw:: html"
    printf "   :file: %s.embed.svg\n", itemkey
    print
    print $0
    next
}

{ print $0 }

func initfile(fname) {
    print "// Code generated by extract.awk. DO NOT EDIT." >fname
    print "// GENERATED FILE DO NOT EDIT" >>fname
    print "#define func fillcolor=lightgreen,style=filled" >>fname
    print "#define perf fillcolor=lightblue,style=filled" >>fname
    print "#define ortho fillcolor=pink,style=filled" >>fname
    print "#define funcperf fillcolor=\"lightgreen:lightblue\",style=filled" >>fname
    print "#define orthoperf fillcolor=\"pink:lightblue\",style=filled" >>fname
    print "#define orthofunc fillcolor=\"pink:lightgreen\",style=filled" >>fname
    print "#define accel style=dotted" >>fname
    print "digraph sql {" >>fname
    print "  rankdir=LR;" >>fname
    print "  concentrate=true;" >>fname
    print "  ranksep=2;" >>fname
    print "  remincross=true;" >>fname
    print "  node [shape=rectangle];" >>fname
}
func closefile(fname) {
    print "}" >>fname
}

function genitem(itemkey, fname,indep) {
    label = labels[itemkey]
    attr = attrs[itemkey]
    printf "%s [href=\"#%s\",label=\"%s\"", itemkey, itemkey, label >>fname
    if (indep == 0) {
	if (attr != "") {
	    printf ",%s", attr >>fname
	}
    } else {
	printf ",fontsize=8,style=dashed" >>fname
    }
    printf "];\n" >>fname
}

function gendeps(itemkey, fname, dodeps) {
    for (dep in depss[itemkey]) {
	depkey = depss[itemkey][dep]
	if (!(depkey in keys)) {
	    printf "unknown dependency: '%s' for '%s'\n", depkey, itemkey >>"/dev/stderr"
	    exit 1
	}
	printf "%s -> %s;\n", depkey, itemkey >>fname
	if (dodeps != 0) {
	    genitem(depkey, fname, 1)
	}
    }
    for (dep in accelss[itemkey]) {
	accel = accelss[itemkey][dep]
	if (!(accel in keys)) {
	    printf "unknown dependency: '%s' for '%s'\n", accel, itemkey >>"/dev/stderr"
	    exit 1
	}
	printf "%s -> %s [accel];\n", accel, itemkey >>fname
	if (dodeps != 0) {
	    genitem(accel, fname, 1)
	}
    }
}

END {
    gfile = "items.dot.p"
    initfile(gfile)
    for (itemkey in keys) {
	genitem(itemkey, gfile, 0)
	gendeps(itemkey, gfile, 0)

	ifile = sprintf("%s.dot.p", itemkey)
	initfile(ifile)
	genitem(itemkey, ifile, 0)
	gendeps(itemkey, ifile, 1)
	closefile(ifile)
    }
    closefile(gfile)
}
