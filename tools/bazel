#!/usr/bin/env bash

# Bazel calls into this script, setting `BAZEL_REAL` to the location of
# the "actual" Bazel binary, expecting this script to call into Bazel
# appropriately. We output a helpful error message as suggested in
# https://github.com/bazelbuild/bazelisk#ensuring-that-your-developers-use-bazelisk-rather-than-bazel

if [[ -z "${BAZELISK_SKIP_WRAPPER}" ]] && [[ -z "${SHUT_UP_ABOUT_BAZELISK}" ]]
then
    echo "You're not using Bazelisk! Your build may fail due to a mismatched" >&2
    echo "Bazel version. Using Bazelisk is recommended." >&2
    echo "On macOS, you can install Bazelisk with:" >&2
    echo "    brew uninstall bazel; brew install bazelisk" >&2
fi


# Sometimes developers don't like needing to run gazelle on their own. If they
# set up this environment variable, we'll run it for them before executing
# whatever command they wanted.
#
# In theory there might be better options than this, but they aren't obvious.
# One thing you might consider is autogazelle, but it has two severe problems:
#  * It always watches everything in the entire project directory, which
#    can be way too many things. This one is relatively easy to fix.
#  * It always passes --index=false. This one you might thing you can fix by
#    just changing it to not pass that setting, but then you run into the
#    problem that building that index is where most of the time gets spent
#    anyway.
#
# Another approach might be to try to run gazelle when the imports change.
# Unfortunately, it's not obvious how to do that well. One thought might be
# to hook goimports or crlfmt up to either run gazelle or talk to some
# daemon which might run gazelle. However, GoLand manages the imports for most
# folks these days without importing such a tool. I could not find a hook to
# have GoLand trigger some action. Maybe this approach has legs if only we tell
# folks to disable the GoLand feature.
#
# Another approach might be to have a daemon watch for filesystem changes and
# then run gazelle whenever they happen. This might get really annoying, so
# you might want to rate limit how frequently it will run. If you do that,
# it'll be frustrating when you go to run your test and it hasn't generated
# yet. It'll also burn a bunch of cycles just constantly running.
#
# Another approach might be to look at the git diff and see if anything in an
# import block has changed. This one seems plausible. You could probably write
# a reasonably simple tool which loads the relevant files, looks at the line
# ranges that changed and see if they fall in an import block.
if [[ -n "${ALWAYS_RUN_GAZELLE}" ]]; then
    case "${1:-}" in
    build|test)
        "$BAZEL_REAL" run //:gazelle
        echo "done running gazelle" 1>&2
        ;;
    esac
fi

# If some invoking tool picked an output base for us, respect it.
if [[ ! -z "${BAZEL_OUTPUT_BASE}" ]]; then
  exec $BAZEL_REAL --output_base="${BAZEL_OUTPUT_BASE}" "$@"
fi

BASES="/private/var/tmp/_bazel_${USER}/bases/"

# If we're not on macOS/haven't enabled multi-bases, just run bazel normally.
if [ ! -d "${BASES}" ]; then 
    exec $BAZEL_REAL "$@"
fi

# If we got here, we are going to try to find an available output_base to pass
# to bazel. Typically only one bazel server can be running in one output_base at
# a time, which means if we always use the default base, only one bazel server 
# can be running for a given workspace at a time. Since servers do not allow any
# concurrent execution of separate invocations, this can be annoying if you e.g.
# want to run a quick gazelle or query but have a long `test` run crawling along
# in another terminal session. 
# 
# To mitigate this, we can route concurrent bazel invocations to different 
# output_base directories, allowing them to run at the same time. We do not want
# to just make a new base for every invocation as this leads to slow cold starts
# and we do not want to make too many bases to improve cache utilization in the
# long-lived per-base bazel server and keep memory footprints in check. Thus, we
# keep a fixed set (currently 3) of bases and just claim the first that is not
# in-use when starting bazel. 
#
# While the approach below attempts to ensure it only assigns an available base,
# if for any reaosn a racing invocation assigns the same base, bazel will just
# end up queuing on its lock as it would if we did not assign a base at all, so
# this is not critical and can be seen as best-effort.

# We need to use a unique output base for each workspace; if we weren't manually
# specifying bazel would resolve the workspace root then hash it. Rather than 
# resolve the root, we're going to pretend we're only run from the root, and if
# we're run elsewhere, just make a separate base for that location. 
SUFFIX="$(pwd | md5 | head -c6)"

# Make creating the claim pidfile atomic.
set -o noclobber

# Check if any of our extra bases are available: no pidfile or pidfile's PID is
# no longer running. If we find one, claim it via a PID and then run bazel with
# that as its output_base.
for i in {1..3}; do
  BASE="${BASES}${i}"
  mkdir -p "${BASE}"
  PIDFILE="${BASE}/inuse"

  # Check for and move orphaned PID files out of the way.
  if [ -f "$PIDFILE" ]; then
    OWNER="$(cat ${PIDFILE} 2>/dev/null)"
    if ! ps -p "${OWNER}" >/dev/null 2>/dev/null && [ "${OWNER}" = "$(cat ${PIDFILE} 2>/dev/null)" ]; then
      mv -n "${PIDFILE}" "${PIDFILE}.orphan-${OWNER}" 2>/dev/null
    fi
  fi
  # Claim and use this base if able (atomic thanks to noclobber above).
  if echo "$$" 2> /dev/null > "${PIDFILE}"; then
    trap 'rm "${PIDFILE}"' EXIT
    $BAZEL_REAL --output_base="${BASE}/${SUFFIX}" "$@"
    exit $?
  fi
done

# If all our bases are in-use, just use the default base and let bazel queue.
exec $BAZEL_REAL "$@"

