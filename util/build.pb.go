// Code generated by protoc-gen-gogo.
// source: cockroach/util/build.proto
// DO NOT EDIT!

/*
	Package util is a generated protocol buffer package.

	It is generated from these files:
		cockroach/util/build.proto
		cockroach/util/unresolved_addr.proto

	It has these top-level messages:
		BuildInfo
		UnresolvedAddr
*/
package util

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/cockroachdb/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

// BuildInfo describes build information for this CockroachDB binary.
type BuildInfo struct {
	Vers string `protobuf:"bytes,1,opt,name=vers" json:"goVersion"`
	Tag  string `protobuf:"bytes,2,opt,name=tag" json:"tag"`
	Time string `protobuf:"bytes,3,opt,name=time" json:"time"`
	Deps string `protobuf:"bytes,4,opt,name=deps" json:"dependencies"`
}

func (m *BuildInfo) Reset()                    { *m = BuildInfo{} }
func (m *BuildInfo) String() string            { return proto.CompactTextString(m) }
func (*BuildInfo) ProtoMessage()               {}
func (*BuildInfo) Descriptor() ([]byte, []int) { return fileDescriptorBuild, []int{0} }

func init() {
	proto.RegisterType((*BuildInfo)(nil), "cockroach.util.BuildInfo")
}
func (m *BuildInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *BuildInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintBuild(data, i, uint64(len(m.Vers)))
	i += copy(data[i:], m.Vers)
	data[i] = 0x12
	i++
	i = encodeVarintBuild(data, i, uint64(len(m.Tag)))
	i += copy(data[i:], m.Tag)
	data[i] = 0x1a
	i++
	i = encodeVarintBuild(data, i, uint64(len(m.Time)))
	i += copy(data[i:], m.Time)
	data[i] = 0x22
	i++
	i = encodeVarintBuild(data, i, uint64(len(m.Deps)))
	i += copy(data[i:], m.Deps)
	return i, nil
}

func encodeFixed64Build(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Build(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBuild(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *BuildInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Vers)
	n += 1 + l + sovBuild(uint64(l))
	l = len(m.Tag)
	n += 1 + l + sovBuild(uint64(l))
	l = len(m.Time)
	n += 1 + l + sovBuild(uint64(l))
	l = len(m.Deps)
	n += 1 + l + sovBuild(uint64(l))
	return n
}

func sovBuild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBuild(x uint64) (n int) {
	return sovBuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BuildInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vers = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deps = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuild(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuild(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuild(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuild   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorBuild = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0xce, 0x4f, 0xce,
	0x2e, 0xca, 0x4f, 0x4c, 0xce, 0xd0, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0x4f, 0x2a, 0xcd, 0xcc, 0x49,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x83, 0xcb, 0xe9, 0x81, 0xe4, 0xa4, 0x44, 0xd2,
	0xf3, 0xd3, 0xf3, 0xc1, 0x52, 0xfa, 0x20, 0x16, 0x44, 0x95, 0x52, 0x1f, 0x23, 0x17, 0xa7, 0x13,
	0x48, 0x97, 0x67, 0x5e, 0x5a, 0xbe, 0x90, 0x2a, 0x17, 0x4b, 0x59, 0x6a, 0x51, 0xb1, 0x04, 0xa3,
	0x02, 0xa3, 0x06, 0xa7, 0x93, 0xe0, 0x89, 0x7b, 0xf2, 0x0c, 0xaf, 0xee, 0xc9, 0x73, 0xa6, 0xe7,
	0x87, 0x01, 0x45, 0x33, 0xf3, 0xf3, 0x82, 0xc0, 0xd2, 0x42, 0x62, 0x5c, 0xcc, 0x25, 0x89, 0xe9,
	0x12, 0x4c, 0x60, 0x55, 0x2c, 0x20, 0x55, 0x41, 0x20, 0x01, 0x21, 0x09, 0x2e, 0x96, 0x92, 0xcc,
	0xdc, 0x54, 0x09, 0x66, 0x24, 0x09, 0xb0, 0x88, 0x90, 0x06, 0x17, 0x4b, 0x4a, 0x6a, 0x41, 0xb1,
	0x04, 0x0b, 0x58, 0x46, 0x04, 0x6a, 0x30, 0x0f, 0x50, 0x2c, 0x35, 0x2f, 0x25, 0x35, 0x2f, 0x39,
	0x33, 0xb5, 0x38, 0x08, 0xac, 0xc2, 0x49, 0xee, 0xc4, 0x43, 0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18,
	0x2f, 0x00, 0xf1, 0x0d, 0x20, 0x7e, 0x00, 0xc4, 0x13, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0x80, 0xbc,
	0x11, 0xc1, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0x61, 0x24, 0x6a, 0x56, 0xf5, 0x00, 0x00, 0x00,
}
