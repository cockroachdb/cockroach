// Code generated by protoc-gen-gogo.
// source: cockroach/storage/status.proto
// DO NOT EDIT!

package storage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cockroach_roachpb "github.com/cockroachdb/cockroach/roachpb"
import cockroach_storage_engine "github.com/cockroachdb/cockroach/storage/engine"

// skipping weak import gogoproto "github.com/cockroachdb/gogoproto"

import github_com_cockroachdb_cockroach_roachpb "github.com/cockroachdb/cockroach/roachpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// StoreStatus contains the stats needed to calculate the current status of a
// store.
type StoreStatus struct {
	Desc                 cockroach_roachpb.StoreDescriptor               `protobuf:"bytes,1,opt,name=desc" json:"desc"`
	NodeID               github_com_cockroachdb_cockroach_roachpb.NodeID `protobuf:"varint,2,opt,name=node_id,json=nodeId,casttype=github.com/cockroachdb/cockroach/roachpb.NodeID" json:"node_id"`
	RangeCount           int32                                           `protobuf:"varint,3,opt,name=range_count,json=rangeCount" json:"range_count"`
	StartedAt            int64                                           `protobuf:"varint,4,opt,name=started_at,json=startedAt" json:"started_at"`
	UpdatedAt            int64                                           `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	Stats                cockroach_storage_engine.MVCCStats              `protobuf:"bytes,6,opt,name=stats" json:"stats"`
	LeaderRangeCount     int32                                           `protobuf:"varint,7,opt,name=leader_range_count,json=leaderRangeCount" json:"leader_range_count"`
	ReplicatedRangeCount int32                                           `protobuf:"varint,8,opt,name=replicated_range_count,json=replicatedRangeCount" json:"replicated_range_count"`
	AvailableRangeCount  int32                                           `protobuf:"varint,9,opt,name=available_range_count,json=availableRangeCount" json:"available_range_count"`
}

func (m *StoreStatus) Reset()                    { *m = StoreStatus{} }
func (m *StoreStatus) String() string            { return proto.CompactTextString(m) }
func (*StoreStatus) ProtoMessage()               {}
func (*StoreStatus) Descriptor() ([]byte, []int) { return fileDescriptorStatus, []int{0} }

func init() {
	proto.RegisterType((*StoreStatus)(nil), "cockroach.storage.StoreStatus")
}
func (m *StoreStatus) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StoreStatus) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintStatus(data, i, uint64(m.Desc.Size()))
	n1, err := m.Desc.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	data[i] = 0x10
	i++
	i = encodeVarintStatus(data, i, uint64(m.NodeID))
	data[i] = 0x18
	i++
	i = encodeVarintStatus(data, i, uint64(m.RangeCount))
	data[i] = 0x20
	i++
	i = encodeVarintStatus(data, i, uint64(m.StartedAt))
	data[i] = 0x28
	i++
	i = encodeVarintStatus(data, i, uint64(m.UpdatedAt))
	data[i] = 0x32
	i++
	i = encodeVarintStatus(data, i, uint64(m.Stats.Size()))
	n2, err := m.Stats.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	data[i] = 0x38
	i++
	i = encodeVarintStatus(data, i, uint64(m.LeaderRangeCount))
	data[i] = 0x40
	i++
	i = encodeVarintStatus(data, i, uint64(m.ReplicatedRangeCount))
	data[i] = 0x48
	i++
	i = encodeVarintStatus(data, i, uint64(m.AvailableRangeCount))
	return i, nil
}

func encodeFixed64Status(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Status(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStatus(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *StoreStatus) Size() (n int) {
	var l int
	_ = l
	l = m.Desc.Size()
	n += 1 + l + sovStatus(uint64(l))
	n += 1 + sovStatus(uint64(m.NodeID))
	n += 1 + sovStatus(uint64(m.RangeCount))
	n += 1 + sovStatus(uint64(m.StartedAt))
	n += 1 + sovStatus(uint64(m.UpdatedAt))
	l = m.Stats.Size()
	n += 1 + l + sovStatus(uint64(l))
	n += 1 + sovStatus(uint64(m.LeaderRangeCount))
	n += 1 + sovStatus(uint64(m.ReplicatedRangeCount))
	n += 1 + sovStatus(uint64(m.AvailableRangeCount))
	return n
}

func sovStatus(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreStatus) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Desc.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RangeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			m.StartedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderRangeCount", wireType)
			}
			m.LeaderRangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LeaderRangeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatedRangeCount", wireType)
			}
			m.ReplicatedRangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReplicatedRangeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRangeCount", wireType)
			}
			m.AvailableRangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AvailableRangeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStatus(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStatus = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorStatus = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x8f, 0xda, 0x30,
	0x18, 0xc6, 0xf9, 0x13, 0xa0, 0x98, 0xa5, 0x4d, 0x69, 0x15, 0x31, 0x04, 0x0a, 0xaa, 0xd4, 0xc9,
	0x91, 0x98, 0xaa, 0xaa, 0x52, 0xc5, 0x9f, 0x85, 0xa1, 0x1d, 0x40, 0xaa, 0x4e, 0x2c, 0x91, 0x63,
	0x5b, 0x21, 0xba, 0x10, 0x47, 0x8e, 0xc3, 0x17, 0xb8, 0x2f, 0x70, 0x1f, 0x8b, 0xf1, 0xc6, 0x9b,
	0xd0, 0x1d, 0xf7, 0x2d, 0x6e, 0x3a, 0xc7, 0xb6, 0x48, 0x4e, 0x0c, 0x4e, 0xac, 0xf7, 0x7d, 0x7e,
	0x8f, 0x1f, 0xbf, 0x06, 0x2e, 0x66, 0xf8, 0x96, 0x33, 0x84, 0x77, 0x5e, 0x26, 0x18, 0x47, 0x21,
	0x95, 0x7f, 0x24, 0xf2, 0x0c, 0xa6, 0x9c, 0x09, 0x66, 0x7f, 0xba, 0xf4, 0xa1, 0xe9, 0x0f, 0x46,
	0x25, 0xa2, 0xbe, 0x69, 0xe0, 0xed, 0xa9, 0x40, 0x04, 0x09, 0xa4, 0xa1, 0xc1, 0xe4, 0xda, 0x94,
	0x26, 0x61, 0x94, 0x50, 0x6f, 0x7f, 0xc0, 0xd8, 0x88, 0xfa, 0x21, 0x0b, 0x99, 0xda, 0x7a, 0xc5,
	0x4e, 0x57, 0xc7, 0x77, 0x16, 0xe8, 0x6d, 0x24, 0x43, 0x37, 0x2a, 0x85, 0xfd, 0x1b, 0x58, 0x84,
	0x66, 0xd8, 0xa9, 0x8f, 0xea, 0x3f, 0x7a, 0xd3, 0x31, 0x2c, 0xe3, 0x98, 0xb3, 0xa1, 0x52, 0x2f,
	0xa5, 0x86, 0x47, 0xa9, 0xdc, 0xce, 0xad, 0xe3, 0x69, 0x58, 0x5b, 0x2b, 0xca, 0xde, 0x82, 0x4e,
	0xc2, 0x08, 0xf5, 0x23, 0xe2, 0x34, 0xa4, 0x41, 0x6b, 0x3e, 0x2b, 0x9a, 0xe7, 0xd3, 0xb0, 0xfd,
	0x4f, 0x96, 0x57, 0xcb, 0xd7, 0xd3, 0xd0, 0x0b, 0x23, 0xb1, 0xcb, 0x03, 0x69, 0xbc, 0xf7, 0x2e,
	0xe6, 0x24, 0xf0, 0xae, 0x2e, 0x09, 0x35, 0xb2, 0x6e, 0x17, 0x8e, 0x2b, 0x62, 0x7f, 0x07, 0x3d,
	0x8e, 0x92, 0x90, 0xfa, 0x98, 0xe5, 0x89, 0x70, 0x9a, 0xca, 0x5f, 0x1f, 0x0e, 0x54, 0x63, 0x51,
	0xd4, 0xed, 0x09, 0x00, 0x72, 0xa0, 0x5c, 0x50, 0xe2, 0x23, 0xe1, 0x58, 0x52, 0xd5, 0x34, 0xaa,
	0xae, 0xa9, 0xcf, 0x94, 0x28, 0x4f, 0xe5, 0x00, 0xb5, 0xa8, 0x55, 0x15, 0x99, 0xba, 0x14, 0xfd,
	0x01, 0xad, 0xe2, 0x69, 0x32, 0xa7, 0xad, 0x66, 0x31, 0x81, 0x57, 0x4f, 0x03, 0xf5, 0x94, 0xe1,
	0xdf, 0xff, 0x8b, 0x45, 0x31, 0xbf, 0xcc, 0x98, 0x68, 0xce, 0x9e, 0x02, 0x3b, 0xa6, 0x88, 0x50,
	0xee, 0x57, 0x83, 0x77, 0x2a, 0xc1, 0x3f, 0xea, 0xfe, 0xba, 0x8c, 0xff, 0x0b, 0x7c, 0xe5, 0x34,
	0x8d, 0x23, 0xac, 0xc2, 0x55, 0xb9, 0x0f, 0x15, 0xae, 0x5f, 0x6a, 0x2a, 0xec, 0x4f, 0xf0, 0x05,
	0x1d, 0x50, 0x14, 0xa3, 0x20, 0xa6, 0xef, 0xd0, 0x6e, 0x05, 0xfd, 0x7c, 0x91, 0x94, 0xe4, 0xfc,
	0xdb, 0xf1, 0xd9, 0xad, 0x1d, 0xcf, 0x6e, 0xfd, 0x41, 0xae, 0x47, 0xb9, 0x9e, 0xe4, 0xba, 0x7f,
	0x71, 0x6b, 0xdb, 0x8e, 0xb9, 0xea, 0x4d, 0xe3, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x6d, 0xcf,
	0x31, 0xbb, 0x02, 0x00, 0x00,
}
