// Code generated by protoc-gen-gogo.
// source: cockroach/storage/rangetree.proto
// DO NOT EDIT!

package storage

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/cockroachdb/gogoproto"

import github_com_cockroachdb_cockroach_roachpb "github.com/cockroachdb/cockroach/roachpb"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RangeTree holds the root node of the range tree.
type RangeTree struct {
	RootKey github_com_cockroachdb_cockroach_roachpb.RKey `protobuf:"bytes,1,opt,name=root_key,json=rootKey,casttype=github.com/cockroachdb/cockroach/roachpb.RKey" json:"root_key,omitempty"`
}

func (m *RangeTree) Reset()                    { *m = RangeTree{} }
func (m *RangeTree) String() string            { return proto.CompactTextString(m) }
func (*RangeTree) ProtoMessage()               {}
func (*RangeTree) Descriptor() ([]byte, []int) { return fileDescriptorRangetree, []int{0} }

// RangeTreeNode holds the configuration for each node of the Red-Black Tree that references all ranges.
type RangeTreeNode struct {
	Key github_com_cockroachdb_cockroach_roachpb.RKey `protobuf:"bytes,1,opt,name=key,casttype=github.com/cockroachdb/cockroach/roachpb.RKey" json:"key,omitempty"`
	// Color is black if true, red if false.
	Black bool `protobuf:"varint,2,opt,name=black" json:"black"`
	// If the parent key is null, this is the root node.
	ParentKey github_com_cockroachdb_cockroach_roachpb.RKey `protobuf:"bytes,3,opt,name=parent_key,json=parentKey,casttype=github.com/cockroachdb/cockroach/roachpb.RKey" json:"parent_key,omitempty"`
	LeftKey   github_com_cockroachdb_cockroach_roachpb.RKey `protobuf:"bytes,4,opt,name=left_key,json=leftKey,casttype=github.com/cockroachdb/cockroach/roachpb.RKey" json:"left_key,omitempty"`
	RightKey  github_com_cockroachdb_cockroach_roachpb.RKey `protobuf:"bytes,5,opt,name=right_key,json=rightKey,casttype=github.com/cockroachdb/cockroach/roachpb.RKey" json:"right_key,omitempty"`
}

func (m *RangeTreeNode) Reset()                    { *m = RangeTreeNode{} }
func (m *RangeTreeNode) String() string            { return proto.CompactTextString(m) }
func (*RangeTreeNode) ProtoMessage()               {}
func (*RangeTreeNode) Descriptor() ([]byte, []int) { return fileDescriptorRangetree, []int{1} }

func init() {
	proto.RegisterType((*RangeTree)(nil), "cockroach.storage.RangeTree")
	proto.RegisterType((*RangeTreeNode)(nil), "cockroach.storage.RangeTreeNode")
}
func (m *RangeTree) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RangeTree) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RootKey != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRangetree(data, i, uint64(len(m.RootKey)))
		i += copy(data[i:], m.RootKey)
	}
	return i, nil
}

func (m *RangeTreeNode) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RangeTreeNode) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		data[i] = 0xa
		i++
		i = encodeVarintRangetree(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	data[i] = 0x10
	i++
	if m.Black {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	if m.ParentKey != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintRangetree(data, i, uint64(len(m.ParentKey)))
		i += copy(data[i:], m.ParentKey)
	}
	if m.LeftKey != nil {
		data[i] = 0x22
		i++
		i = encodeVarintRangetree(data, i, uint64(len(m.LeftKey)))
		i += copy(data[i:], m.LeftKey)
	}
	if m.RightKey != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintRangetree(data, i, uint64(len(m.RightKey)))
		i += copy(data[i:], m.RightKey)
	}
	return i, nil
}

func encodeFixed64Rangetree(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rangetree(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRangetree(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RangeTree) Size() (n int) {
	var l int
	_ = l
	if m.RootKey != nil {
		l = len(m.RootKey)
		n += 1 + l + sovRangetree(uint64(l))
	}
	return n
}

func (m *RangeTreeNode) Size() (n int) {
	var l int
	_ = l
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovRangetree(uint64(l))
	}
	n += 2
	if m.ParentKey != nil {
		l = len(m.ParentKey)
		n += 1 + l + sovRangetree(uint64(l))
	}
	if m.LeftKey != nil {
		l = len(m.LeftKey)
		n += 1 + l + sovRangetree(uint64(l))
	}
	if m.RightKey != nil {
		l = len(m.RightKey)
		n += 1 + l + sovRangetree(uint64(l))
	}
	return n
}

func sovRangetree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRangetree(x uint64) (n int) {
	return sovRangetree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangeTree) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangetree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRangetree
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootKey = append(m.RootKey[:0], data[iNdEx:postIndex]...)
			if m.RootKey == nil {
				m.RootKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRangetree(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRangetree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RangeTreeNode) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRangetree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangeTreeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangeTreeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRangetree
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], data[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Black", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Black = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRangetree
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentKey = append(m.ParentKey[:0], data[iNdEx:postIndex]...)
			if m.ParentKey == nil {
				m.ParentKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRangetree
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftKey = append(m.LeftKey[:0], data[iNdEx:postIndex]...)
			if m.LeftKey == nil {
				m.LeftKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRangetree
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RightKey = append(m.RightKey[:0], data[iNdEx:postIndex]...)
			if m.RightKey == nil {
				m.RightKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRangetree(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRangetree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRangetree(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRangetree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRangetree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRangetree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRangetree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRangetree(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRangetree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRangetree   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorRangetree = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xce, 0x4f, 0xce,
	0x2e, 0xca, 0x4f, 0x4c, 0xce, 0xd0, 0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4c, 0x4f, 0xd5, 0x2f, 0x4a,
	0xcc, 0x4b, 0x4f, 0x2d, 0x29, 0x4a, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x84,
	0x2b, 0xd1, 0x83, 0x2a, 0x91, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0xcb, 0xea, 0x83, 0x58, 0x10,
	0x85, 0x4a, 0x91, 0x5c, 0x9c, 0x41, 0x20, 0xbd, 0x21, 0x40, 0xbd, 0x42, 0x3e, 0x5c, 0x1c, 0x45,
	0xf9, 0xf9, 0x25, 0xf1, 0xd9, 0xa9, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x4e, 0x86, 0xbf,
	0xee, 0xc9, 0xeb, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xc3, 0x8d,
	0x4d, 0x49, 0x42, 0xb0, 0xf5, 0xc1, 0x64, 0x41, 0x92, 0x5e, 0x90, 0x77, 0x6a, 0x65, 0x10, 0x3b,
	0xc8, 0x08, 0x20, 0x43, 0xe9, 0x01, 0x13, 0x17, 0x2f, 0xdc, 0x6c, 0xbf, 0xfc, 0x94, 0x54, 0x21,
	0x67, 0x2e, 0x66, 0x8a, 0x8c, 0x06, 0xe9, 0x16, 0x92, 0xe2, 0x62, 0x4d, 0xca, 0x49, 0x4c, 0xce,
	0x96, 0x60, 0x02, 0x1a, 0xc3, 0xe1, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x44, 0x48, 0x28,
	0x80, 0x8b, 0xab, 0x20, 0xb1, 0x28, 0x35, 0x0f, 0xe2, 0x05, 0x66, 0x72, 0xed, 0xe1, 0x84, 0x18,
	0x02, 0x64, 0x82, 0x82, 0x24, 0x27, 0x35, 0x0d, 0x62, 0x1e, 0x0b, 0xd9, 0x41, 0x02, 0x32, 0x02,
	0x64, 0x9a, 0x1f, 0x17, 0x67, 0x51, 0x66, 0x7a, 0x06, 0xc4, 0x38, 0x56, 0x72, 0x8d, 0xe3, 0x00,
	0x9b, 0x01, 0x64, 0x39, 0x29, 0x9e, 0x78, 0x28, 0xc7, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x05, 0x20,
	0xbe, 0x01, 0xc4, 0x0f, 0x80, 0x78, 0xc2, 0x63, 0x39, 0x86, 0x28, 0x76, 0x68, 0xb4, 0x47, 0x30,
	0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xa6, 0x63, 0x83, 0x2f, 0x02, 0x00, 0x00,
}
