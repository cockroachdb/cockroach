// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Tobias Schottdorf (tobias@cockroachlabs.com)

syntax = "proto3";
package cockroach.storage;
option go_package = "storage";

import "cockroach/roachpb/metadata.proto";
import weak "cockroach/roachpb/internal_raft.proto";
import weak "gogoproto/gogo.proto";

// StoreRequestHeader locates a Store on a Node.
message StoreRequestHeader {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  int32 store_id = 2 [(gogoproto.customname) = "StoreID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.StoreID"];
}

// A PollFrozenRequest asks the addressed Store for its frozen or thawed
// Replicas.
message PollFrozenRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // When true, collect the frozen Replicas, and the thawed ones otherwise.
  bool collect_frozen = 2;
}

// A PollFrozenResponse is the response returned from a PollFrozenRequest.
message PollFrozenResponse {
  repeated cockroach.roachpb.ReplicaDescriptor results = 1 [(gogoproto.nullable) = false];
}

// A ReservationRequest asks the addressed Store to reserve the space for a new
// replica for the Range of RangeID reserving RangeSize bytes.
message ReservationRequest {
  StoreRequestHeader header = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  int32 from_node_id = 2 [(gogoproto.customname) = "FromNodeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  int32 from_store_id = 3 [(gogoproto.customname) = "FromStoreID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.StoreID"];
  int64 range_id = 4 [(gogoproto.customname) = "RangeID",
      (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];
  int64 range_size = 5;
}

// A ReservationResponse is the repoonse returned from a ReservationRequest.
message ReservationResponse {
  bool reserved = 1;
  // The current number of ranges and reservations on the target
  // store. This is returned even if the reservation isn't filled.
  int32 range_count = 2;
}

// Stores is a wrapper for internal RPCs that operate only on the stores of a
// node.
service Stores {
  rpc PollFrozen (PollFrozenRequest) returns (PollFrozenResponse) {}
  rpc Reserve(ReservationRequest) returns (ReservationResponse) {}
}

// A CollectChecksumRequest asks the addressed Replica for the result of a
// ComputeChecksum() operation (see cockroach/roachpb/api.proto). The request
// blocks until the checksum is ready.
message CollectChecksumRequest {
  roachpb.ReplicaDescriptor replica = 1 [ (gogoproto.nullable = false) ];

  // checksum_id identifies the corresponding ComputeChecksumRequest.
  bytes checksum_id = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.customname) = "ChecksumID",
    (gogoproto.customtype) =
        "github.com/cockroachdb/cockroach/util/uuid.UUID"
  ];

  // The requester's checksum, so that the respondent can log an inconsistency.
  // The checksum algorithm is specified in the corresponding
  // ComputeChecksumRequest (version).
  bytes checksum = 3 [ (gogoproto.nullable) = false ];

  // The requester's snapshot, so that the respondent can log a diff. Set if the
  // ComputeChecksumRequest had snapshot = true. In this mode, inconsistent
  // respondents commit suicide.
  RaftSnapshotData snapshot = 4;
}

message CollectChecksumResponse {
  // The respondent's checksum, so that the requester can log an inconsistency.
  bytes checksum = 1 [ (gogoproto.nullable) = false ];

  // The respondent's snapshot, so that the requester can log a diff. Set if the
  // ComputeChecksumRequest had snapshot = true.
  RaftSnapshotData snapshot = 2;
}

service Replicas {
  rpc CollectChecksum(CollectChecksumRequest) returns (CheckChecksumResponse) {}
}
