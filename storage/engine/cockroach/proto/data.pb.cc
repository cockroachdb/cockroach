// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeReplicasTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeReplicasTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalCommitTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalCommitTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lease_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesDatapoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesDatapoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVCCStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVCCStats_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IsolationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/data.proto");
  GOOGLE_CHECK(file != NULL);
  Timestamp_descriptor_ = file->message_type(0);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, logical_),
  };
  Timestamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Timestamp));
  Value_descriptor_ = file->message_type(1);
  static const int Value_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, integer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, tag_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  MVCCValue_descriptor_ = file->message_type(2);
  static const int MVCCValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, value_),
  };
  MVCCValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVCCValue_descriptor_,
      MVCCValue::default_instance_,
      MVCCValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVCCValue));
  KeyValue_descriptor_ = file->message_type(3);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  RawKeyValue_descriptor_ = file->message_type(4);
  static const int RawKeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawKeyValue, value_),
  };
  RawKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawKeyValue_descriptor_,
      RawKeyValue::default_instance_,
      RawKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawKeyValue));
  StoreIdent_descriptor_ = file->message_type(5);
  static const int StoreIdent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, store_id_),
  };
  StoreIdent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreIdent_descriptor_,
      StoreIdent::default_instance_,
      StoreIdent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreIdent));
  SplitTrigger_descriptor_ = file->message_type(6);
  static const int SplitTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, updated_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, new_desc_),
  };
  SplitTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitTrigger_descriptor_,
      SplitTrigger::default_instance_,
      SplitTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitTrigger));
  MergeTrigger_descriptor_ = file->message_type(7);
  static const int MergeTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, updated_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, subsumed_raft_id_),
  };
  MergeTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MergeTrigger_descriptor_,
      MergeTrigger::default_instance_,
      MergeTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MergeTrigger));
  ChangeReplicasTrigger_descriptor_ = file->message_type(8);
  static const int ChangeReplicasTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, updated_replicas_),
  };
  ChangeReplicasTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeReplicasTrigger_descriptor_,
      ChangeReplicasTrigger::default_instance_,
      ChangeReplicasTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeReplicasTrigger));
  InternalCommitTrigger_descriptor_ = file->message_type(9);
  static const int InternalCommitTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, split_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, merge_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, change_replicas_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, intents_),
  };
  InternalCommitTrigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalCommitTrigger_descriptor_,
      InternalCommitTrigger::default_instance_,
      InternalCommitTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalCommitTrigger));
  NodeList_descriptor_ = file->message_type(10);
  static const int NodeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, nodes_),
  };
  NodeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeList_descriptor_,
      NodeList::default_instance_,
      NodeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeList));
  Transaction_descriptor_ = file->message_type(11);
  static const int Transaction_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, last_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, orig_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, max_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, certain_nodes_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  Lease_descriptor_ = file->message_type(12);
  static const int Lease_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, raft_node_id_),
  };
  Lease_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lease_descriptor_,
      Lease::default_instance_,
      Lease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lease));
  MVCCMetadata_descriptor_ = file->message_type(13);
  static const int MVCCMetadata_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, key_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, val_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, last_evicted_),
  };
  MVCCMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVCCMetadata_descriptor_,
      MVCCMetadata::default_instance_,
      MVCCMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVCCMetadata));
  GCMetadata_descriptor_ = file->message_type(14);
  static const int GCMetadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMetadata, last_scan_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMetadata, oldest_intent_nanos_),
  };
  GCMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMetadata_descriptor_,
      GCMetadata::default_instance_,
      GCMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMetadata));
  TimeSeriesDatapoint_descriptor_ = file->message_type(15);
  static const int TimeSeriesDatapoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, float_value_),
  };
  TimeSeriesDatapoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesDatapoint_descriptor_,
      TimeSeriesDatapoint::default_instance_,
      TimeSeriesDatapoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesDatapoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesDatapoint));
  TimeSeriesData_descriptor_ = file->message_type(16);
  static const int TimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, datapoints_),
  };
  TimeSeriesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSeriesData_descriptor_,
      TimeSeriesData::default_instance_,
      TimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSeriesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSeriesData));
  MVCCStats_descriptor_ = file->message_type(17);
  static const int MVCCStats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, live_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, key_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, val_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, intent_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, live_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, key_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, val_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, intent_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, intent_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, gc_bytes_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, last_update_nanos_),
  };
  MVCCStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVCCStats_descriptor_,
      MVCCStats::default_instance_,
      MVCCStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVCCStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVCCStats));
  ReplicaChangeType_descriptor_ = file->enum_type(0);
  IsolationType_descriptor_ = file->enum_type(1);
  TransactionStatus_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVCCValue_descriptor_, &MVCCValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawKeyValue_descriptor_, &RawKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreIdent_descriptor_, &StoreIdent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitTrigger_descriptor_, &SplitTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MergeTrigger_descriptor_, &MergeTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeReplicasTrigger_descriptor_, &ChangeReplicasTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalCommitTrigger_descriptor_, &InternalCommitTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeList_descriptor_, &NodeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lease_descriptor_, &Lease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVCCMetadata_descriptor_, &MVCCMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMetadata_descriptor_, &GCMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesDatapoint_descriptor_, &TimeSeriesDatapoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSeriesData_descriptor_, &TimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVCCStats_descriptor_, &MVCCStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto() {
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete MVCCValue::default_instance_;
  delete MVCCValue_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete RawKeyValue::default_instance_;
  delete RawKeyValue_reflection_;
  delete StoreIdent::default_instance_;
  delete StoreIdent_reflection_;
  delete SplitTrigger::default_instance_;
  delete SplitTrigger_reflection_;
  delete MergeTrigger::default_instance_;
  delete MergeTrigger_reflection_;
  delete ChangeReplicasTrigger::default_instance_;
  delete ChangeReplicasTrigger_reflection_;
  delete InternalCommitTrigger::default_instance_;
  delete InternalCommitTrigger_reflection_;
  delete NodeList::default_instance_;
  delete NodeList_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete Lease::default_instance_;
  delete Lease_reflection_;
  delete MVCCMetadata::default_instance_;
  delete MVCCMetadata_reflection_;
  delete GCMetadata::default_instance_;
  delete GCMetadata_reflection_;
  delete TimeSeriesDatapoint::default_instance_;
  delete TimeSeriesDatapoint_reflection_;
  delete TimeSeriesData::default_instance_;
  delete TimeSeriesData_reflection_;
  delete MVCCStats::default_instance_;
  delete MVCCStats_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032cockroach/proto/data.proto\022\017cockroach."
    "proto\032\034cockroach/proto/config.proto\032\024gog"
    "oproto/gogo.proto\"A\n\tTimestamp\022\027\n\twall_t"
    "ime\030\001 \001(\003B\004\310\336\037\000\022\025\n\007logical\030\002 \001(\005B\004\310\336\037\000:\004"
    "\230\240\037\000\"u\n\005Value\022\r\n\005bytes\030\001 \001(\014\022\017\n\007integer\030"
    "\002 \001(\003\022\020\n\010checksum\030\003 \001(\007\022-\n\ttimestamp\030\004 \001"
    "(\0132\032.cockroach.proto.Timestamp\022\013\n\003tag\030\005 "
    "\001(\t\"I\n\tMVCCValue\022\025\n\007deleted\030\001 \001(\010B\004\310\336\037\000\022"
    "%\n\005value\030\002 \001(\0132\026.cockroach.proto.Value\"Q"
    "\n\010KeyValue\022\030\n\003key\030\001 \001(\014B\013\310\336\037\000\332\336\037\003Key\022+\n\005"
    "value\030\002 \001(\0132\026.cockroach.proto.ValueB\004\310\336\037"
    "\000\"C\n\013RawKeyValue\022\037\n\003key\030\001 \001(\014B\022\310\336\037\000\332\336\037\nE"
    "ncodedKey\022\023\n\005value\030\002 \001(\014B\004\310\336\037\000\"\214\001\n\nStore"
    "Ident\022%\n\ncluster_id\030\001 \001(\tB\021\310\336\037\000\342\336\037\tClust"
    "erID\022)\n\007node_id\030\002 \001(\005B\030\310\336\037\000\342\336\037\006NodeID\332\336\037"
    "\006NodeID\022,\n\010store_id\030\003 \001(\005B\032\310\336\037\000\342\336\037\007Store"
    "ID\332\336\037\007StoreID\"\206\001\n\014SplitTrigger\022<\n\014update"
    "d_desc\030\001 \001(\0132 .cockroach.proto.RangeDesc"
    "riptorB\004\310\336\037\000\0228\n\010new_desc\030\002 \001(\0132 .cockroa"
    "ch.proto.RangeDescriptorB\004\310\336\037\000\"~\n\014MergeT"
    "rigger\022<\n\014updated_desc\030\001 \001(\0132 .cockroach"
    ".proto.RangeDescriptorB\004\310\336\037\000\0220\n\020subsumed"
    "_raft_id\030\002 \001(\003B\026\310\336\037\000\342\336\037\016SubsumedRaftID\"\351"
    "\001\n\025ChangeReplicasTrigger\022)\n\007node_id\030\001 \001("
    "\005B\030\310\336\037\000\342\336\037\006NodeID\332\336\037\006NodeID\022,\n\010store_id\030"
    "\002 \001(\005B\032\310\336\037\000\342\336\037\007StoreID\332\336\037\007StoreID\022=\n\013cha"
    "nge_type\030\003 \001(\0162\".cockroach.proto.Replica"
    "ChangeTypeB\004\310\336\037\000\0228\n\020updated_replicas\030\004 \003"
    "(\0132\030.cockroach.proto.ReplicaB\004\310\336\037\000\"\346\001\n\025I"
    "nternalCommitTrigger\0224\n\rsplit_trigger\030\001 "
    "\001(\0132\035.cockroach.proto.SplitTrigger\0224\n\rme"
    "rge_trigger\030\002 \001(\0132\035.cockroach.proto.Merg"
    "eTrigger\022G\n\027change_replicas_trigger\030\003 \001("
    "\0132&.cockroach.proto.ChangeReplicasTrigge"
    "r\022\030\n\007intents\030\004 \003(\014B\007\332\336\037\003Key\"\035\n\010NodeList\022"
    "\021\n\005nodes\030\001 \003(\005B\002\020\001\"\215\004\n\013Transaction\022\022\n\004na"
    "me\030\001 \001(\tB\004\310\336\037\000\022\030\n\003key\030\002 \001(\014B\013\310\336\037\000\332\336\037\003Key"
    "\022\026\n\002id\030\003 \001(\014B\n\310\336\037\000\342\336\037\002ID\022\026\n\010priority\030\004 \001"
    "(\005B\004\310\336\037\000\0227\n\tisolation\030\005 \001(\0162\036.cockroach."
    "proto.IsolationTypeB\004\310\336\037\000\0228\n\006status\030\006 \001("
    "\0162\".cockroach.proto.TransactionStatusB\004\310"
    "\336\037\000\022\023\n\005epoch\030\007 \001(\005B\004\310\336\037\000\0222\n\016last_heartbe"
    "at\030\010 \001(\0132\032.cockroach.proto.Timestamp\0223\n\t"
    "timestamp\030\t \001(\0132\032.cockroach.proto.Timest"
    "ampB\004\310\336\037\000\0228\n\016orig_timestamp\030\n \001(\0132\032.cock"
    "roach.proto.TimestampB\004\310\336\037\000\0227\n\rmax_times"
    "tamp\030\013 \001(\0132\032.cockroach.proto.TimestampB\004"
    "\310\336\037\000\0226\n\rcertain_nodes\030\014 \001(\0132\031.cockroach."
    "proto.NodeListB\004\310\336\037\000:\004\230\240\037\000\"w\n\005Lease\022\030\n\ne"
    "xpiration\030\001 \001(\003B\004\310\336\037\000\022\026\n\010duration\030\002 \001(\003B"
    "\004\310\336\037\000\022\022\n\004term\030\003 \001(\004B\004\310\336\037\000\022(\n\014raft_node_i"
    "d\030\004 \001(\004B\022\310\336\037\000\342\336\037\nRaftNodeID\"\226\002\n\014MVCCMeta"
    "data\022)\n\003txn\030\001 \001(\0132\034.cockroach.proto.Tran"
    "saction\0223\n\ttimestamp\030\002 \001(\0132\032.cockroach.p"
    "roto.TimestampB\004\310\336\037\000\022\025\n\007deleted\030\003 \001(\010B\004\310"
    "\336\037\000\022\027\n\tkey_bytes\030\004 \001(\003B\004\310\336\037\000\022\027\n\tval_byte"
    "s\030\005 \001(\003B\004\310\336\037\000\022%\n\005value\030\006 \001(\0132\026.cockroach"
    ".proto.Value\0226\n\014last_evicted\030\007 \001(\0132\032.coc"
    "kroach.proto.TimestampB\004\310\336\037\000\"H\n\nGCMetada"
    "ta\022\035\n\017last_scan_nanos\030\001 \001(\003B\004\310\336\037\000\022\033\n\023old"
    "est_intent_nanos\030\002 \001(\003\"\\\n\023TimeSeriesData"
    "point\022\035\n\017timestamp_nanos\030\001 \001(\003B\004\310\336\037\000\022\021\n\t"
    "int_value\030\002 \001(\003\022\023\n\013float_value\030\003 \001(\002\"t\n\016"
    "TimeSeriesData\022\022\n\004name\030\001 \001(\tB\004\310\336\037\000\022\024\n\006so"
    "urce\030\002 \001(\tB\004\310\336\037\000\0228\n\ndatapoints\030\003 \003(\0132$.c"
    "ockroach.proto.TimeSeriesDatapoint\"\300\002\n\tM"
    "VCCStats\022\030\n\nlive_bytes\030\001 \001(\003B\004\310\336\037\000\022\027\n\tke"
    "y_bytes\030\002 \001(\003B\004\310\336\037\000\022\027\n\tval_bytes\030\003 \001(\003B\004"
    "\310\336\037\000\022\032\n\014intent_bytes\030\004 \001(\003B\004\310\336\037\000\022\030\n\nlive"
    "_count\030\005 \001(\003B\004\310\336\037\000\022\027\n\tkey_count\030\006 \001(\003B\004\310"
    "\336\037\000\022\027\n\tval_count\030\007 \001(\003B\004\310\336\037\000\022\032\n\014intent_c"
    "ount\030\010 \001(\003B\004\310\336\037\000\022\030\n\nintent_age\030\t \001(\003B\004\310\336"
    "\037\000\022(\n\014gc_bytes_age\030\n \001(\003B\022\310\336\037\000\342\336\037\nGCByte"
    "sAge\022\037\n\021last_update_nanos\030\013 \001(\003B\004\310\336\037\000*>\n"
    "\021ReplicaChangeType\022\017\n\013ADD_REPLICA\020\000\022\022\n\016R"
    "EMOVE_REPLICA\020\001\032\004\210\243\036\000*5\n\rIsolationType\022\020"
    "\n\014SERIALIZABLE\020\000\022\014\n\010SNAPSHOT\020\001\032\004\210\243\036\000*B\n\021"
    "TransactionStatus\022\013\n\007PENDING\020\000\022\r\n\tCOMMIT"
    "TED\020\001\022\013\n\007ABORTED\020\002\032\004\210\243\036\000B\023Z\005proto\340\342\036\001\310\342\036"
    "\001\320\342\036\001", 3165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/data.proto", &protobuf_RegisterTypes);
  Timestamp::default_instance_ = new Timestamp();
  Value::default_instance_ = new Value();
  MVCCValue::default_instance_ = new MVCCValue();
  KeyValue::default_instance_ = new KeyValue();
  RawKeyValue::default_instance_ = new RawKeyValue();
  StoreIdent::default_instance_ = new StoreIdent();
  SplitTrigger::default_instance_ = new SplitTrigger();
  MergeTrigger::default_instance_ = new MergeTrigger();
  ChangeReplicasTrigger::default_instance_ = new ChangeReplicasTrigger();
  InternalCommitTrigger::default_instance_ = new InternalCommitTrigger();
  NodeList::default_instance_ = new NodeList();
  Transaction::default_instance_ = new Transaction();
  Lease::default_instance_ = new Lease();
  MVCCMetadata::default_instance_ = new MVCCMetadata();
  GCMetadata::default_instance_ = new GCMetadata();
  TimeSeriesDatapoint::default_instance_ = new TimeSeriesDatapoint();
  TimeSeriesData::default_instance_ = new TimeSeriesData();
  MVCCStats::default_instance_ = new MVCCStats();
  Timestamp::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  MVCCValue::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  RawKeyValue::default_instance_->InitAsDefaultInstance();
  StoreIdent::default_instance_->InitAsDefaultInstance();
  SplitTrigger::default_instance_->InitAsDefaultInstance();
  MergeTrigger::default_instance_->InitAsDefaultInstance();
  ChangeReplicasTrigger::default_instance_->InitAsDefaultInstance();
  InternalCommitTrigger::default_instance_->InitAsDefaultInstance();
  NodeList::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  Lease::default_instance_->InitAsDefaultInstance();
  MVCCMetadata::default_instance_->InitAsDefaultInstance();
  GCMetadata::default_instance_->InitAsDefaultInstance();
  TimeSeriesDatapoint::default_instance_->InitAsDefaultInstance();
  TimeSeriesData::default_instance_->InitAsDefaultInstance();
  MVCCStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2fdata_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2fdata_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicaChangeType_descriptor_;
}
bool ReplicaChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IsolationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolationType_descriptor_;
}
bool IsolationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatus_descriptor_;
}
bool TransactionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Timestamp::kWallTimeFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !_MSC_VER

Timestamp::Timestamp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  wall_time_ = GOOGLE_LONGLONG(0);
  logical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New() const {
  return new Timestamp;
}

void Timestamp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Timestamp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(wall_time_, logical_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 wall_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wall_time_)));
          set_has_wall_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logical;
        break;
      }

      // optional int32 logical = 2;
      case 2: {
        if (tag == 16) {
         parse_logical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logical_)));
          set_has_logical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Timestamp)
  // optional int64 wall_time = 1;
  if (has_wall_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wall_time(), output);
  }

  // optional int32 logical = 2;
  if (has_logical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logical(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Timestamp)
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Timestamp)
  // optional int64 wall_time = 1;
  if (has_wall_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->wall_time(), target);
  }

  // optional int32 logical = 2;
  if (has_logical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logical(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Timestamp)
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 wall_time = 1;
    if (has_wall_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wall_time());
    }

    // optional int32 logical = 2;
    if (has_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logical());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Timestamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Timestamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wall_time()) {
      set_wall_time(from.wall_time());
    }
    if (from.has_logical()) {
      set_logical(from.logical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other != this) {
    std::swap(wall_time_, other->wall_time_);
    std::swap(logical_, other->logical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Value::kBytesFieldNumber;
const int Value::kIntegerFieldNumber;
const int Value::kChecksumFieldNumber;
const int Value::kTimestampFieldNumber;
const int Value::kTagFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Value)
}

void Value::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  integer_ = GOOGLE_LONGLONG(0);
  checksum_ = 0u;
  timestamp_ = NULL;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytes_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bytes_->clear();
      }
    }
    integer_ = GOOGLE_LONGLONG(0);
    checksum_ = 0u;
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_integer;
        break;
      }

      // optional int64 integer = 2;
      case 2: {
        if (tag == 16) {
         parse_integer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integer_)));
          set_has_integer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_checksum;
        break;
      }

      // optional fixed32 checksum = 3;
      case 3: {
        if (tag == 29) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 4;
      case 4: {
        if (tag == 34) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tag;
        break;
      }

      // optional string tag = 5;
      case 5: {
        if (tag == 42) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Value)
  // optional bytes bytes = 1;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bytes(), output);
  }

  // optional int64 integer = 2;
  if (has_integer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->integer(), output);
  }

  // optional fixed32 checksum = 3;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->checksum(), output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->timestamp(), output);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Value)
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Value)
  // optional bytes bytes = 1;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes(), target);
  }

  // optional int64 integer = 2;
  if (has_integer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->integer(), target);
  }

  // optional fixed32 checksum = 3;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->checksum(), target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->timestamp(), target);
  }

  // optional string tag = 5;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Value)
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bytes = 1;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }

    // optional int64 integer = 2;
    if (has_integer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->integer());
    }

    // optional fixed32 checksum = 3;
    if (has_checksum()) {
      total_size += 1 + 4;
    }

    // optional .cockroach.proto.Timestamp timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional string tag = 5;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_integer()) {
      set_integer(from.integer());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(integer_, other->integer_);
    std::swap(checksum_, other->checksum_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVCCValue::kDeletedFieldNumber;
const int MVCCValue::kValueFieldNumber;
#endif  // !_MSC_VER

MVCCValue::MVCCValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.MVCCValue)
}

void MVCCValue::InitAsDefaultInstance() {
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

MVCCValue::MVCCValue(const MVCCValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.MVCCValue)
}

void MVCCValue::SharedCtor() {
  _cached_size_ = 0;
  deleted_ = false;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCValue::~MVCCValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.MVCCValue)
  SharedDtor();
}

void MVCCValue::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

void MVCCValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCValue_descriptor_;
}

const MVCCValue& MVCCValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

MVCCValue* MVCCValue::default_instance_ = NULL;

MVCCValue* MVCCValue::New() const {
  return new MVCCValue;
}

void MVCCValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    deleted_ = false;
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVCCValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.MVCCValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool deleted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.MVCCValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.MVCCValue)
  return false;
#undef DO_
}

void MVCCValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.MVCCValue)
  // optional bool deleted = 1;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->deleted(), output);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.MVCCValue)
}

::google::protobuf::uint8* MVCCValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.MVCCValue)
  // optional bool deleted = 1;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->deleted(), target);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.MVCCValue)
  return target;
}

int MVCCValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool deleted = 1;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional .cockroach.proto.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVCCValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVCCValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVCCValue::MergeFrom(const MVCCValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVCCValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCValue::CopyFrom(const MVCCValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCValue::IsInitialized() const {

  return true;
}

void MVCCValue::Swap(MVCCValue* other) {
  if (other != this) {
    std::swap(deleted_, other->deleted_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVCCValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCValue_descriptor_;
  metadata.reflection = MVCCValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.proto.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawKeyValue::kKeyFieldNumber;
const int RawKeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

RawKeyValue::RawKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RawKeyValue)
}

void RawKeyValue::InitAsDefaultInstance() {
}

RawKeyValue::RawKeyValue(const RawKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RawKeyValue)
}

void RawKeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawKeyValue::~RawKeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RawKeyValue)
  SharedDtor();
}

void RawKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RawKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawKeyValue_descriptor_;
}

const RawKeyValue& RawKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

RawKeyValue* RawKeyValue::default_instance_ = NULL;

RawKeyValue* RawKeyValue::New() const {
  return new RawKeyValue;
}

void RawKeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RawKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RawKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RawKeyValue)
  return false;
#undef DO_
}

void RawKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RawKeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RawKeyValue)
}

::google::protobuf::uint8* RawKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RawKeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RawKeyValue)
  return target;
}

int RawKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawKeyValue::MergeFrom(const RawKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawKeyValue::CopyFrom(const RawKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawKeyValue::IsInitialized() const {

  return true;
}

void RawKeyValue::Swap(RawKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawKeyValue_descriptor_;
  metadata.reflection = RawKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !_MSC_VER

StoreIdent::StoreIdent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.StoreIdent)
}

void StoreIdent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:cockroach.proto.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_id_;
  }
  if (this != default_instance_) {
  }
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIdent_descriptor_;
}

const StoreIdent& StoreIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

StoreIdent* StoreIdent::default_instance_ = NULL;

StoreIdent* StoreIdent::New() const {
  return new StoreIdent;
}

void StoreIdent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StoreIdent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(node_id_, store_id_);
    if (has_cluster_id()) {
      if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 3;
      case 3: {
        if (tag == 24) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.StoreIdent)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  // optional int32 node_id = 2;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // optional int32 store_id = 3;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.StoreIdent)
}

::google::protobuf::uint8* StoreIdent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.StoreIdent)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  // optional int32 node_id = 2;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // optional int32 store_id = 3;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->store_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.StoreIdent)
  return target;
}

int StoreIdent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_id());
    }

    // optional int32 node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 3;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreIdent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreIdent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreIdent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other != this) {
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(node_id_, other->node_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIdent_descriptor_;
  metadata.reflection = StoreIdent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitTrigger::kUpdatedDescFieldNumber;
const int SplitTrigger::kNewDescFieldNumber;
#endif  // !_MSC_VER

SplitTrigger::SplitTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.SplitTrigger)
}

void SplitTrigger::InitAsDefaultInstance() {
  updated_desc_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
  new_desc_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
}

SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  _cached_size_ = 0;
  updated_desc_ = NULL;
  new_desc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.proto.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete updated_desc_;
    delete new_desc_;
  }
}

void SplitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitTrigger_descriptor_;
}

const SplitTrigger& SplitTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

SplitTrigger* SplitTrigger::default_instance_ = NULL;

SplitTrigger* SplitTrigger::New() const {
  return new SplitTrigger;
}

void SplitTrigger::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_updated_desc()) {
      if (updated_desc_ != NULL) updated_desc_->::cockroach::proto::RangeDescriptor::Clear();
    }
    if (has_new_desc()) {
      if (new_desc_ != NULL) new_desc_->::cockroach::proto::RangeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.SplitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_desc;
        break;
      }

      // optional .cockroach.proto.RangeDescriptor new_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_new_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.SplitTrigger)
  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updated_desc(), output);
  }

  // optional .cockroach.proto.RangeDescriptor new_desc = 2;
  if (has_new_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->new_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.SplitTrigger)
}

::google::protobuf::uint8* SplitTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.SplitTrigger)
  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updated_desc(), target);
  }

  // optional .cockroach.proto.RangeDescriptor new_desc = 2;
  if (has_new_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->new_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.SplitTrigger)
  return target;
}

int SplitTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
    if (has_updated_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_desc());
    }

    // optional .cockroach.proto.RangeDescriptor new_desc = 2;
    if (has_new_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updated_desc()) {
      mutable_updated_desc()->::cockroach::proto::RangeDescriptor::MergeFrom(from.updated_desc());
    }
    if (from.has_new_desc()) {
      mutable_new_desc()->::cockroach::proto::RangeDescriptor::MergeFrom(from.new_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {

  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other != this) {
    std::swap(updated_desc_, other->updated_desc_);
    std::swap(new_desc_, other->new_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitTrigger_descriptor_;
  metadata.reflection = SplitTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MergeTrigger::kUpdatedDescFieldNumber;
const int MergeTrigger::kSubsumedRaftIdFieldNumber;
#endif  // !_MSC_VER

MergeTrigger::MergeTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.MergeTrigger)
}

void MergeTrigger::InitAsDefaultInstance() {
  updated_desc_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
}

MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  _cached_size_ = 0;
  updated_desc_ = NULL;
  subsumed_raft_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.proto.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete updated_desc_;
  }
}

void MergeTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeTrigger_descriptor_;
}

const MergeTrigger& MergeTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

MergeTrigger* MergeTrigger::default_instance_ = NULL;

MergeTrigger* MergeTrigger::New() const {
  return new MergeTrigger;
}

void MergeTrigger::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_updated_desc()) {
      if (updated_desc_ != NULL) updated_desc_->::cockroach::proto::RangeDescriptor::Clear();
    }
    subsumed_raft_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.MergeTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subsumed_raft_id;
        break;
      }

      // optional int64 subsumed_raft_id = 2;
      case 2: {
        if (tag == 16) {
         parse_subsumed_raft_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subsumed_raft_id_)));
          set_has_subsumed_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.MergeTrigger)
  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updated_desc(), output);
  }

  // optional int64 subsumed_raft_id = 2;
  if (has_subsumed_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->subsumed_raft_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.MergeTrigger)
}

::google::protobuf::uint8* MergeTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.MergeTrigger)
  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updated_desc(), target);
  }

  // optional int64 subsumed_raft_id = 2;
  if (has_subsumed_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->subsumed_raft_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.MergeTrigger)
  return target;
}

int MergeTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
    if (has_updated_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_desc());
    }

    // optional int64 subsumed_raft_id = 2;
    if (has_subsumed_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->subsumed_raft_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MergeTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MergeTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updated_desc()) {
      mutable_updated_desc()->::cockroach::proto::RangeDescriptor::MergeFrom(from.updated_desc());
    }
    if (from.has_subsumed_raft_id()) {
      set_subsumed_raft_id(from.subsumed_raft_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MergeTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {

  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other != this) {
    std::swap(updated_desc_, other->updated_desc_);
    std::swap(subsumed_raft_id_, other->subsumed_raft_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MergeTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeTrigger_descriptor_;
  metadata.reflection = MergeTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeReplicasTrigger::kNodeIdFieldNumber;
const int ChangeReplicasTrigger::kStoreIdFieldNumber;
const int ChangeReplicasTrigger::kChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kUpdatedReplicasFieldNumber;
#endif  // !_MSC_VER

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::InitAsDefaultInstance() {
}

ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  store_id_ = 0;
  change_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeReplicasTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeReplicasTrigger_descriptor_;
}

const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

ChangeReplicasTrigger* ChangeReplicasTrigger::default_instance_ = NULL;

ChangeReplicasTrigger* ChangeReplicasTrigger::New() const {
  return new ChangeReplicasTrigger;
}

void ChangeReplicasTrigger::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeReplicasTrigger*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(node_id_, store_id_);
    change_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  updated_replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_change_type;
        break;
      }

      // optional .cockroach.proto.ReplicaChangeType change_type = 3;
      case 3: {
        if (tag == 24) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::proto::ReplicaChangeType_IsValid(value)) {
            set_change_type(static_cast< ::cockroach::proto::ReplicaChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updated_replicas;
        break;
      }

      // repeated .cockroach.proto.Replica updated_replicas = 4;
      case 4: {
        if (tag == 34) {
         parse_updated_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updated_replicas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ChangeReplicasTrigger)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  // optional .cockroach.proto.ReplicaChangeType change_type = 3;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_type(), output);
  }

  // repeated .cockroach.proto.Replica updated_replicas = 4;
  for (int i = 0; i < this->updated_replicas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updated_replicas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ChangeReplicasTrigger)
}

::google::protobuf::uint8* ChangeReplicasTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ChangeReplicasTrigger)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_id(), target);
  }

  // optional .cockroach.proto.ReplicaChangeType change_type = 3;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_type(), target);
  }

  // repeated .cockroach.proto.Replica updated_replicas = 4;
  for (int i = 0; i < this->updated_replicas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updated_replicas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ChangeReplicasTrigger)
  return target;
}

int ChangeReplicasTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional .cockroach.proto.ReplicaChangeType change_type = 3;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

  }
  // repeated .cockroach.proto.Replica updated_replicas = 4;
  total_size += 1 * this->updated_replicas_size();
  for (int i = 0; i < this->updated_replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updated_replicas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeReplicasTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeReplicasTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeReplicasTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  updated_replicas_.MergeFrom(from.updated_replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeReplicasTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {

  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(change_type_, other->change_type_);
    updated_replicas_.Swap(&other->updated_replicas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeReplicasTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeReplicasTrigger_descriptor_;
  metadata.reflection = ChangeReplicasTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kIntentsFieldNumber;
#endif  // !_MSC_VER

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalCommitTrigger)
}

void InternalCommitTrigger::InitAsDefaultInstance() {
  split_trigger_ = const_cast< ::cockroach::proto::SplitTrigger*>(&::cockroach::proto::SplitTrigger::default_instance());
  merge_trigger_ = const_cast< ::cockroach::proto::MergeTrigger*>(&::cockroach::proto::MergeTrigger::default_instance());
  change_replicas_trigger_ = const_cast< ::cockroach::proto::ChangeReplicasTrigger*>(&::cockroach::proto::ChangeReplicasTrigger::default_instance());
}

InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  split_trigger_ = NULL;
  merge_trigger_ = NULL;
  change_replicas_trigger_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete split_trigger_;
    delete merge_trigger_;
    delete change_replicas_trigger_;
  }
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalCommitTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalCommitTrigger_descriptor_;
}

const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

InternalCommitTrigger* InternalCommitTrigger::default_instance_ = NULL;

InternalCommitTrigger* InternalCommitTrigger::New() const {
  return new InternalCommitTrigger;
}

void InternalCommitTrigger::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_split_trigger()) {
      if (split_trigger_ != NULL) split_trigger_->::cockroach::proto::SplitTrigger::Clear();
    }
    if (has_merge_trigger()) {
      if (merge_trigger_ != NULL) merge_trigger_->::cockroach::proto::MergeTrigger::Clear();
    }
    if (has_change_replicas_trigger()) {
      if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::proto::ChangeReplicasTrigger::Clear();
    }
  }
  intents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalCommitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.SplitTrigger split_trigger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merge_trigger;
        break;
      }

      // optional .cockroach.proto.MergeTrigger merge_trigger = 2;
      case 2: {
        if (tag == 18) {
         parse_merge_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_change_replicas_trigger;
        break;
      }

      // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (tag == 26) {
         parse_change_replicas_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_intents;
        break;
      }

      // repeated bytes intents = 4;
      case 4: {
        if (tag == 34) {
         parse_intents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_intents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_intents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalCommitTrigger)
  // optional .cockroach.proto.SplitTrigger split_trigger = 1;
  if (has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->split_trigger(), output);
  }

  // optional .cockroach.proto.MergeTrigger merge_trigger = 2;
  if (has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->merge_trigger(), output);
  }

  // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->change_replicas_trigger(), output);
  }

  // repeated bytes intents = 4;
  for (int i = 0; i < this->intents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->intents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalCommitTrigger)
}

::google::protobuf::uint8* InternalCommitTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalCommitTrigger)
  // optional .cockroach.proto.SplitTrigger split_trigger = 1;
  if (has_split_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->split_trigger(), target);
  }

  // optional .cockroach.proto.MergeTrigger merge_trigger = 2;
  if (has_merge_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->merge_trigger(), target);
  }

  // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (has_change_replicas_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->change_replicas_trigger(), target);
  }

  // repeated bytes intents = 4;
  for (int i = 0; i < this->intents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->intents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalCommitTrigger)
  return target;
}

int InternalCommitTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.SplitTrigger split_trigger = 1;
    if (has_split_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->split_trigger());
    }

    // optional .cockroach.proto.MergeTrigger merge_trigger = 2;
    if (has_merge_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merge_trigger());
    }

    // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
    if (has_change_replicas_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_replicas_trigger());
    }

  }
  // repeated bytes intents = 4;
  total_size += 1 * this->intents_size();
  for (int i = 0; i < this->intents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->intents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalCommitTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalCommitTrigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalCommitTrigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  intents_.MergeFrom(from.intents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_trigger()) {
      mutable_split_trigger()->::cockroach::proto::SplitTrigger::MergeFrom(from.split_trigger());
    }
    if (from.has_merge_trigger()) {
      mutable_merge_trigger()->::cockroach::proto::MergeTrigger::MergeFrom(from.merge_trigger());
    }
    if (from.has_change_replicas_trigger()) {
      mutable_change_replicas_trigger()->::cockroach::proto::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalCommitTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {

  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other != this) {
    std::swap(split_trigger_, other->split_trigger_);
    std::swap(merge_trigger_, other->merge_trigger_);
    std::swap(change_replicas_trigger_, other->change_replicas_trigger_);
    intents_.Swap(&other->intents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalCommitTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalCommitTrigger_descriptor_;
  metadata.reflection = InternalCommitTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeList::kNodesFieldNumber;
#endif  // !_MSC_VER

NodeList::NodeList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.NodeList)
}

void NodeList::InitAsDefaultInstance() {
}

NodeList::NodeList(const NodeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.NodeList)
}

void NodeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeList::~NodeList() {
  // @@protoc_insertion_point(destructor:cockroach.proto.NodeList)
  SharedDtor();
}

void NodeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeList_descriptor_;
}

const NodeList& NodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

NodeList* NodeList::default_instance_ = NULL;

NodeList* NodeList::New() const {
  return new NodeList;
}

void NodeList::Clear() {
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.NodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 nodes = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nodes())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.NodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.NodeList)
  return false;
#undef DO_
}

void NodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.NodeList)
  // repeated int32 nodes = 1 [packed = true];
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_cached_byte_size_);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.NodeList)
}

::google::protobuf::uint8* NodeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.NodeList)
  // repeated int32 nodes = 1 [packed = true];
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nodes_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.NodeList)
  return target;
}

int NodeList::ByteSize() const {
  int total_size = 0;

  // repeated int32 nodes = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nodes(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeList::MergeFrom(const NodeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeList::CopyFrom(const NodeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {

  return true;
}

void NodeList::Swap(NodeList* other) {
  if (other != this) {
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeList_descriptor_;
  metadata.reflection = NodeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transaction::kNameFieldNumber;
const int Transaction::kKeyFieldNumber;
const int Transaction::kIdFieldNumber;
const int Transaction::kPriorityFieldNumber;
const int Transaction::kIsolationFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kEpochFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kTimestampFieldNumber;
const int Transaction::kOrigTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kCertainNodesFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  last_heartbeat_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  orig_timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  max_timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  certain_nodes_ = const_cast< ::cockroach::proto::NodeList*>(&::cockroach::proto::NodeList::default_instance());
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Transaction)
}

void Transaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  isolation_ = 0;
  status_ = 0;
  epoch_ = 0;
  last_heartbeat_ = NULL;
  timestamp_ = NULL;
  orig_timestamp_ = NULL;
  max_timestamp_ = NULL;
  certain_nodes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
    delete last_heartbeat_;
    delete timestamp_;
    delete orig_timestamp_;
    delete max_timestamp_;
    delete certain_nodes_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Transaction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(priority_, epoch_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_last_heartbeat()) {
      if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::proto::Timestamp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    if (has_orig_timestamp()) {
      if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    if (has_max_timestamp()) {
      if (max_timestamp_ != NULL) max_timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    if (has_certain_nodes()) {
      if (certain_nodes_ != NULL) certain_nodes_->::cockroach::proto::NodeList::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional bytes id = 3;
      case 3: {
        if (tag == 26) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (tag == 32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isolation;
        break;
      }

      // optional .cockroach.proto.IsolationType isolation = 5;
      case 5: {
        if (tag == 40) {
         parse_isolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::proto::IsolationType_IsValid(value)) {
            set_isolation(static_cast< ::cockroach::proto::IsolationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .cockroach.proto.TransactionStatus status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::proto::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::cockroach::proto::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_epoch;
        break;
      }

      // optional int32 epoch = 7;
      case 7: {
        if (tag == 56) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_last_heartbeat;
        break;
      }

      // optional .cockroach.proto.Timestamp last_heartbeat = 8;
      case 8: {
        if (tag == 66) {
         parse_last_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 9;
      case 9: {
        if (tag == 74) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_orig_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp orig_timestamp = 10;
      case 10: {
        if (tag == 82) {
         parse_orig_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_max_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp max_timestamp = 11;
      case 11: {
        if (tag == 90) {
         parse_max_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_certain_nodes;
        break;
      }

      // optional .cockroach.proto.NodeList certain_nodes = 12;
      case 12: {
        if (tag == 98) {
         parse_certain_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certain_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Transaction)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->id(), output);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional .cockroach.proto.IsolationType isolation = 5;
  if (has_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->isolation(), output);
  }

  // optional .cockroach.proto.TransactionStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional int32 epoch = 7;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->epoch(), output);
  }

  // optional .cockroach.proto.Timestamp last_heartbeat = 8;
  if (has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->last_heartbeat(), output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 9;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->timestamp(), output);
  }

  // optional .cockroach.proto.Timestamp orig_timestamp = 10;
  if (has_orig_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->orig_timestamp(), output);
  }

  // optional .cockroach.proto.Timestamp max_timestamp = 11;
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->max_timestamp(), output);
  }

  // optional .cockroach.proto.NodeList certain_nodes = 12;
  if (has_certain_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->certain_nodes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Transaction)
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Transaction)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes id = 3;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->id(), target);
  }

  // optional int32 priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional .cockroach.proto.IsolationType isolation = 5;
  if (has_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->isolation(), target);
  }

  // optional .cockroach.proto.TransactionStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // optional int32 epoch = 7;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->epoch(), target);
  }

  // optional .cockroach.proto.Timestamp last_heartbeat = 8;
  if (has_last_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->last_heartbeat(), target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 9;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->timestamp(), target);
  }

  // optional .cockroach.proto.Timestamp orig_timestamp = 10;
  if (has_orig_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->orig_timestamp(), target);
  }

  // optional .cockroach.proto.Timestamp max_timestamp = 11;
  if (has_max_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->max_timestamp(), target);
  }

  // optional .cockroach.proto.NodeList certain_nodes = 12;
  if (has_certain_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->certain_nodes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Transaction)
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional .cockroach.proto.IsolationType isolation = 5;
    if (has_isolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->isolation());
    }

    // optional .cockroach.proto.TransactionStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 epoch = 7;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epoch());
    }

    // optional .cockroach.proto.Timestamp last_heartbeat = 8;
    if (has_last_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_heartbeat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cockroach.proto.Timestamp timestamp = 9;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional .cockroach.proto.Timestamp orig_timestamp = 10;
    if (has_orig_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orig_timestamp());
    }

    // optional .cockroach.proto.Timestamp max_timestamp = 11;
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->max_timestamp());
    }

    // optional .cockroach.proto.NodeList certain_nodes = 12;
    if (has_certain_nodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->certain_nodes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_isolation()) {
      set_isolation(from.isolation());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_last_heartbeat()) {
      mutable_last_heartbeat()->::cockroach::proto::Timestamp::MergeFrom(from.last_heartbeat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_orig_timestamp()) {
      mutable_orig_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.orig_timestamp());
    }
    if (from.has_max_timestamp()) {
      mutable_max_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.max_timestamp());
    }
    if (from.has_certain_nodes()) {
      mutable_certain_nodes()->::cockroach::proto::NodeList::MergeFrom(from.certain_nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(id_, other->id_);
    std::swap(priority_, other->priority_);
    std::swap(isolation_, other->isolation_);
    std::swap(status_, other->status_);
    std::swap(epoch_, other->epoch_);
    std::swap(last_heartbeat_, other->last_heartbeat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(orig_timestamp_, other->orig_timestamp_);
    std::swap(max_timestamp_, other->max_timestamp_);
    std::swap(certain_nodes_, other->certain_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Lease::kExpirationFieldNumber;
const int Lease::kDurationFieldNumber;
const int Lease::kTermFieldNumber;
const int Lease::kRaftNodeIdFieldNumber;
#endif  // !_MSC_VER

Lease::Lease()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Lease)
}

void Lease::InitAsDefaultInstance() {
}

Lease::Lease(const Lease& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Lease)
}

void Lease::SharedCtor() {
  _cached_size_ = 0;
  expiration_ = GOOGLE_LONGLONG(0);
  duration_ = GOOGLE_LONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  raft_node_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Lease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lease_descriptor_;
}

const Lease& Lease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

Lease* Lease::default_instance_ = NULL;

Lease* Lease::New() const {
  return new Lease;
}

void Lease::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lease*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(expiration_, raft_node_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Lease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expiration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_)));
          set_has_expiration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_duration;
        break;
      }

      // optional int64 duration = 2;
      case 2: {
        if (tag == 16) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional uint64 term = 3;
      case 3: {
        if (tag == 24) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raft_node_id;
        break;
      }

      // optional uint64 raft_node_id = 4;
      case 4: {
        if (tag == 32) {
         parse_raft_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raft_node_id_)));
          set_has_raft_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Lease)
  // optional int64 expiration = 1;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expiration(), output);
  }

  // optional int64 duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->duration(), output);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // optional uint64 raft_node_id = 4;
  if (has_raft_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->raft_node_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Lease)
}

::google::protobuf::uint8* Lease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Lease)
  // optional int64 expiration = 1;
  if (has_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expiration(), target);
  }

  // optional int64 duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->duration(), target);
  }

  // optional uint64 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // optional uint64 raft_node_id = 4;
  if (has_raft_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->raft_node_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Lease)
  return target;
}

int Lease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 expiration = 1;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expiration());
    }

    // optional int64 duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration());
    }

    // optional uint64 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

    // optional uint64 raft_node_id = 4;
    if (has_raft_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->raft_node_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lease::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lease* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lease*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lease::MergeFrom(const Lease& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expiration()) {
      set_expiration(from.expiration());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_raft_node_id()) {
      set_raft_node_id(from.raft_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lease::CopyFrom(const Lease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {

  return true;
}

void Lease::Swap(Lease* other) {
  if (other != this) {
    std::swap(expiration_, other->expiration_);
    std::swap(duration_, other->duration_);
    std::swap(term_, other->term_);
    std::swap(raft_node_id_, other->raft_node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lease_descriptor_;
  metadata.reflection = Lease_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVCCMetadata::kTxnFieldNumber;
const int MVCCMetadata::kTimestampFieldNumber;
const int MVCCMetadata::kDeletedFieldNumber;
const int MVCCMetadata::kKeyBytesFieldNumber;
const int MVCCMetadata::kValBytesFieldNumber;
const int MVCCMetadata::kValueFieldNumber;
const int MVCCMetadata::kLastEvictedFieldNumber;
#endif  // !_MSC_VER

MVCCMetadata::MVCCMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.MVCCMetadata)
}

void MVCCMetadata::InitAsDefaultInstance() {
  txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
  last_evicted_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
}

MVCCMetadata::MVCCMetadata(const MVCCMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.MVCCMetadata)
}

void MVCCMetadata::SharedCtor() {
  _cached_size_ = 0;
  txn_ = NULL;
  timestamp_ = NULL;
  deleted_ = false;
  key_bytes_ = GOOGLE_LONGLONG(0);
  val_bytes_ = GOOGLE_LONGLONG(0);
  value_ = NULL;
  last_evicted_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCMetadata::~MVCCMetadata() {
  // @@protoc_insertion_point(destructor:cockroach.proto.MVCCMetadata)
  SharedDtor();
}

void MVCCMetadata::SharedDtor() {
  if (this != default_instance_) {
    delete txn_;
    delete timestamp_;
    delete value_;
    delete last_evicted_;
  }
}

void MVCCMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCMetadata_descriptor_;
}

const MVCCMetadata& MVCCMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

MVCCMetadata* MVCCMetadata::default_instance_ = NULL;

MVCCMetadata* MVCCMetadata::New() const {
  return new MVCCMetadata;
}

void MVCCMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MVCCMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(key_bytes_, val_bytes_);
    if (has_txn()) {
      if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
    deleted_ = false;
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
    if (has_last_evicted()) {
      if (last_evicted_ != NULL) last_evicted_->::cockroach::proto::Timestamp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVCCMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.MVCCMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.Transaction txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 3;
      case 3: {
        if (tag == 24) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_bytes;
        break;
      }

      // optional int64 key_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_key_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_bytes_)));
          set_has_key_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_val_bytes;
        break;
      }

      // optional int64 val_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 6;
      case 6: {
        if (tag == 50) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_last_evicted;
        break;
      }

      // optional .cockroach.proto.Timestamp last_evicted = 7;
      case 7: {
        if (tag == 58) {
         parse_last_evicted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_evicted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.MVCCMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.MVCCMetadata)
  return false;
#undef DO_
}

void MVCCMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.MVCCMetadata)
  // optional .cockroach.proto.Transaction txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txn(), output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp(), output);
  }

  // optional bool deleted = 3;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deleted(), output);
  }

  // optional int64 key_bytes = 4;
  if (has_key_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->key_bytes(), output);
  }

  // optional int64 val_bytes = 5;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->val_bytes(), output);
  }

  // optional .cockroach.proto.Value value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->value(), output);
  }

  // optional .cockroach.proto.Timestamp last_evicted = 7;
  if (has_last_evicted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->last_evicted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.MVCCMetadata)
}

::google::protobuf::uint8* MVCCMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.MVCCMetadata)
  // optional .cockroach.proto.Transaction txn = 1;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->txn(), target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestamp(), target);
  }

  // optional bool deleted = 3;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->deleted(), target);
  }

  // optional int64 key_bytes = 4;
  if (has_key_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->key_bytes(), target);
  }

  // optional int64 val_bytes = 5;
  if (has_val_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->val_bytes(), target);
  }

  // optional .cockroach.proto.Value value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->value(), target);
  }

  // optional .cockroach.proto.Timestamp last_evicted = 7;
  if (has_last_evicted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->last_evicted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.MVCCMetadata)
  return target;
}

int MVCCMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.Transaction txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn());
    }

    // optional .cockroach.proto.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

    // optional bool deleted = 3;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional int64 key_bytes = 4;
    if (has_key_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key_bytes());
    }

    // optional int64 val_bytes = 5;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_bytes());
    }

    // optional .cockroach.proto.Value value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // optional .cockroach.proto.Timestamp last_evicted = 7;
    if (has_last_evicted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last_evicted());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVCCMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVCCMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVCCMetadata::MergeFrom(const MVCCMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::cockroach::proto::Transaction::MergeFrom(from.txn());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_key_bytes()) {
      set_key_bytes(from.key_bytes());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
    if (from.has_last_evicted()) {
      mutable_last_evicted()->::cockroach::proto::Timestamp::MergeFrom(from.last_evicted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVCCMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCMetadata::CopyFrom(const MVCCMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCMetadata::IsInitialized() const {

  return true;
}

void MVCCMetadata::Swap(MVCCMetadata* other) {
  if (other != this) {
    std::swap(txn_, other->txn_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(deleted_, other->deleted_);
    std::swap(key_bytes_, other->key_bytes_);
    std::swap(val_bytes_, other->val_bytes_);
    std::swap(value_, other->value_);
    std::swap(last_evicted_, other->last_evicted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVCCMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCMetadata_descriptor_;
  metadata.reflection = MVCCMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMetadata::kLastScanNanosFieldNumber;
const int GCMetadata::kOldestIntentNanosFieldNumber;
#endif  // !_MSC_VER

GCMetadata::GCMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.GCMetadata)
}

void GCMetadata::InitAsDefaultInstance() {
}

GCMetadata::GCMetadata(const GCMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.GCMetadata)
}

void GCMetadata::SharedCtor() {
  _cached_size_ = 0;
  last_scan_nanos_ = GOOGLE_LONGLONG(0);
  oldest_intent_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMetadata::~GCMetadata() {
  // @@protoc_insertion_point(destructor:cockroach.proto.GCMetadata)
  SharedDtor();
}

void GCMetadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMetadata_descriptor_;
}

const GCMetadata& GCMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

GCMetadata* GCMetadata::default_instance_ = NULL;

GCMetadata* GCMetadata::New() const {
  return new GCMetadata;
}

void GCMetadata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GCMetadata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(last_scan_nanos_, oldest_intent_nanos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.GCMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_scan_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_scan_nanos_)));
          set_has_last_scan_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_oldest_intent_nanos;
        break;
      }

      // optional int64 oldest_intent_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_oldest_intent_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oldest_intent_nanos_)));
          set_has_oldest_intent_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.GCMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.GCMetadata)
  return false;
#undef DO_
}

void GCMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.GCMetadata)
  // optional int64 last_scan_nanos = 1;
  if (has_last_scan_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_scan_nanos(), output);
  }

  // optional int64 oldest_intent_nanos = 2;
  if (has_oldest_intent_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->oldest_intent_nanos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.GCMetadata)
}

::google::protobuf::uint8* GCMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.GCMetadata)
  // optional int64 last_scan_nanos = 1;
  if (has_last_scan_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_scan_nanos(), target);
  }

  // optional int64 oldest_intent_nanos = 2;
  if (has_oldest_intent_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->oldest_intent_nanos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.GCMetadata)
  return target;
}

int GCMetadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 last_scan_nanos = 1;
    if (has_last_scan_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_scan_nanos());
    }

    // optional int64 oldest_intent_nanos = 2;
    if (has_oldest_intent_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oldest_intent_nanos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMetadata::MergeFrom(const GCMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_scan_nanos()) {
      set_last_scan_nanos(from.last_scan_nanos());
    }
    if (from.has_oldest_intent_nanos()) {
      set_oldest_intent_nanos(from.oldest_intent_nanos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMetadata::CopyFrom(const GCMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMetadata::IsInitialized() const {

  return true;
}

void GCMetadata::Swap(GCMetadata* other) {
  if (other != this) {
    std::swap(last_scan_nanos_, other->last_scan_nanos_);
    std::swap(oldest_intent_nanos_, other->oldest_intent_nanos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMetadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMetadata_descriptor_;
  metadata.reflection = GCMetadata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesDatapoint::kTimestampNanosFieldNumber;
const int TimeSeriesDatapoint::kIntValueFieldNumber;
const int TimeSeriesDatapoint::kFloatValueFieldNumber;
#endif  // !_MSC_VER

TimeSeriesDatapoint::TimeSeriesDatapoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesDatapoint)
}

void TimeSeriesDatapoint::InitAsDefaultInstance() {
}

TimeSeriesDatapoint::TimeSeriesDatapoint(const TimeSeriesDatapoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesDatapoint)
}

void TimeSeriesDatapoint::SharedCtor() {
  _cached_size_ = 0;
  timestamp_nanos_ = GOOGLE_LONGLONG(0);
  int_value_ = GOOGLE_LONGLONG(0);
  float_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesDatapoint::~TimeSeriesDatapoint() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesDatapoint)
  SharedDtor();
}

void TimeSeriesDatapoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSeriesDatapoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesDatapoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesDatapoint_descriptor_;
}

const TimeSeriesDatapoint& TimeSeriesDatapoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

TimeSeriesDatapoint* TimeSeriesDatapoint::default_instance_ = NULL;

TimeSeriesDatapoint* TimeSeriesDatapoint::New() const {
  return new TimeSeriesDatapoint;
}

void TimeSeriesDatapoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeSeriesDatapoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_nanos_, float_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesDatapoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesDatapoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_nanos_)));
          set_has_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_value;
        break;
      }

      // optional int64 int_value = 2;
      case 2: {
        if (tag == 16) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_float_value;
        break;
      }

      // optional float float_value = 3;
      case 3: {
        if (tag == 29) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesDatapoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesDatapoint)
  return false;
#undef DO_
}

void TimeSeriesDatapoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesDatapoint)
  // optional int64 timestamp_nanos = 1;
  if (has_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp_nanos(), output);
  }

  // optional int64 int_value = 2;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_value(), output);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesDatapoint)
}

::google::protobuf::uint8* TimeSeriesDatapoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesDatapoint)
  // optional int64 timestamp_nanos = 1;
  if (has_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_nanos(), target);
  }

  // optional int64 int_value = 2;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_value(), target);
  }

  // optional float float_value = 3;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesDatapoint)
  return target;
}

int TimeSeriesDatapoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp_nanos = 1;
    if (has_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_nanos());
    }

    // optional int64 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }

    // optional float float_value = 3;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesDatapoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesDatapoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesDatapoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesDatapoint::MergeFrom(const TimeSeriesDatapoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp_nanos()) {
      set_timestamp_nanos(from.timestamp_nanos());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesDatapoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesDatapoint::CopyFrom(const TimeSeriesDatapoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesDatapoint::IsInitialized() const {

  return true;
}

void TimeSeriesDatapoint::Swap(TimeSeriesDatapoint* other) {
  if (other != this) {
    std::swap(timestamp_nanos_, other->timestamp_nanos_);
    std::swap(int_value_, other->int_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesDatapoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesDatapoint_descriptor_;
  metadata.reflection = TimeSeriesDatapoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSeriesData::kNameFieldNumber;
const int TimeSeriesData::kSourceFieldNumber;
const int TimeSeriesData::kDatapointsFieldNumber;
#endif  // !_MSC_VER

TimeSeriesData::TimeSeriesData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.TimeSeriesData)
}

void TimeSeriesData::InitAsDefaultInstance() {
}

TimeSeriesData::TimeSeriesData(const TimeSeriesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.TimeSeriesData)
}

void TimeSeriesData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSeriesData::~TimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.TimeSeriesData)
  SharedDtor();
}

void TimeSeriesData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void TimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSeriesData_descriptor_;
}

const TimeSeriesData& TimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

TimeSeriesData* TimeSeriesData::default_instance_ = NULL;

TimeSeriesData* TimeSeriesData::New() const {
  return new TimeSeriesData;
}

void TimeSeriesData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
  }
  datapoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.TimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (tag == 18) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datapoints;
        break;
      }

      // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
      case 3: {
        if (tag == 26) {
         parse_datapoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datapoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.TimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.TimeSeriesData)
  return false;
#undef DO_
}

void TimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.TimeSeriesData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datapoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.TimeSeriesData)
}

::google::protobuf::uint8* TimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.TimeSeriesData)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  for (int i = 0; i < this->datapoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datapoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.TimeSeriesData)
  return target;
}

int TimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  total_size += 1 * this->datapoints_size();
  for (int i = 0; i < this->datapoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSeriesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSeriesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSeriesData::MergeFrom(const TimeSeriesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datapoints_.MergeFrom(from.datapoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSeriesData::CopyFrom(const TimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSeriesData::IsInitialized() const {

  return true;
}

void TimeSeriesData::Swap(TimeSeriesData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(source_, other->source_);
    datapoints_.Swap(&other->datapoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSeriesData_descriptor_;
  metadata.reflection = TimeSeriesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVCCStats::kLiveBytesFieldNumber;
const int MVCCStats::kKeyBytesFieldNumber;
const int MVCCStats::kValBytesFieldNumber;
const int MVCCStats::kIntentBytesFieldNumber;
const int MVCCStats::kLiveCountFieldNumber;
const int MVCCStats::kKeyCountFieldNumber;
const int MVCCStats::kValCountFieldNumber;
const int MVCCStats::kIntentCountFieldNumber;
const int MVCCStats::kIntentAgeFieldNumber;
const int MVCCStats::kGcBytesAgeFieldNumber;
const int MVCCStats::kLastUpdateNanosFieldNumber;
#endif  // !_MSC_VER

MVCCStats::MVCCStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.MVCCStats)
}

void MVCCStats::InitAsDefaultInstance() {
}

MVCCStats::MVCCStats(const MVCCStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.MVCCStats)
}

void MVCCStats::SharedCtor() {
  _cached_size_ = 0;
  live_bytes_ = GOOGLE_LONGLONG(0);
  key_bytes_ = GOOGLE_LONGLONG(0);
  val_bytes_ = GOOGLE_LONGLONG(0);
  intent_bytes_ = GOOGLE_LONGLONG(0);
  live_count_ = GOOGLE_LONGLONG(0);
  key_count_ = GOOGLE_LONGLONG(0);
  val_count_ = GOOGLE_LONGLONG(0);
  intent_count_ = GOOGLE_LONGLONG(0);
  intent_age_ = GOOGLE_LONGLONG(0);
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCStats::~MVCCStats() {
  // @@protoc_insertion_point(destructor:cockroach.proto.MVCCStats)
  SharedDtor();
}

void MVCCStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVCCStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVCCStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVCCStats_descriptor_;
}

const MVCCStats& MVCCStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  return *default_instance_;
}

MVCCStats* MVCCStats::default_instance_ = NULL;

MVCCStats* MVCCStats::New() const {
  return new MVCCStats;
}

void MVCCStats::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MVCCStats*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(live_bytes_, intent_count_);
  }
  ZR_(intent_age_, last_update_nanos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVCCStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.MVCCStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 live_bytes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &live_bytes_)));
          set_has_live_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_bytes;
        break;
      }

      // optional int64 key_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_key_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_bytes_)));
          set_has_key_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_val_bytes;
        break;
      }

      // optional int64 val_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intent_bytes;
        break;
      }

      // optional int64 intent_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_intent_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intent_bytes_)));
          set_has_intent_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_live_count;
        break;
      }

      // optional int64 live_count = 5;
      case 5: {
        if (tag == 40) {
         parse_live_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &live_count_)));
          set_has_live_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_key_count;
        break;
      }

      // optional int64 key_count = 6;
      case 6: {
        if (tag == 48) {
         parse_key_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_count_)));
          set_has_key_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_val_count;
        break;
      }

      // optional int64 val_count = 7;
      case 7: {
        if (tag == 56) {
         parse_val_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_count_)));
          set_has_val_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_intent_count;
        break;
      }

      // optional int64 intent_count = 8;
      case 8: {
        if (tag == 64) {
         parse_intent_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intent_count_)));
          set_has_intent_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_intent_age;
        break;
      }

      // optional int64 intent_age = 9;
      case 9: {
        if (tag == 72) {
         parse_intent_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intent_age_)));
          set_has_intent_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gc_bytes_age;
        break;
      }

      // optional int64 gc_bytes_age = 10;
      case 10: {
        if (tag == 80) {
         parse_gc_bytes_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gc_bytes_age_)));
          set_has_gc_bytes_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_last_update_nanos;
        break;
      }

      // optional int64 last_update_nanos = 11;
      case 11: {
        if (tag == 88) {
         parse_last_update_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_nanos_)));
          set_has_last_update_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.MVCCStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.MVCCStats)
  return false;
#undef DO_
}

void MVCCStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.MVCCStats)
  // optional int64 live_bytes = 1;
  if (has_live_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->live_bytes(), output);
  }

  // optional int64 key_bytes = 2;
  if (has_key_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->key_bytes(), output);
  }

  // optional int64 val_bytes = 3;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->val_bytes(), output);
  }

  // optional int64 intent_bytes = 4;
  if (has_intent_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->intent_bytes(), output);
  }

  // optional int64 live_count = 5;
  if (has_live_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->live_count(), output);
  }

  // optional int64 key_count = 6;
  if (has_key_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->key_count(), output);
  }

  // optional int64 val_count = 7;
  if (has_val_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->val_count(), output);
  }

  // optional int64 intent_count = 8;
  if (has_intent_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->intent_count(), output);
  }

  // optional int64 intent_age = 9;
  if (has_intent_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->intent_age(), output);
  }

  // optional int64 gc_bytes_age = 10;
  if (has_gc_bytes_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gc_bytes_age(), output);
  }

  // optional int64 last_update_nanos = 11;
  if (has_last_update_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_update_nanos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.MVCCStats)
}

::google::protobuf::uint8* MVCCStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.MVCCStats)
  // optional int64 live_bytes = 1;
  if (has_live_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->live_bytes(), target);
  }

  // optional int64 key_bytes = 2;
  if (has_key_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->key_bytes(), target);
  }

  // optional int64 val_bytes = 3;
  if (has_val_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->val_bytes(), target);
  }

  // optional int64 intent_bytes = 4;
  if (has_intent_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->intent_bytes(), target);
  }

  // optional int64 live_count = 5;
  if (has_live_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->live_count(), target);
  }

  // optional int64 key_count = 6;
  if (has_key_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->key_count(), target);
  }

  // optional int64 val_count = 7;
  if (has_val_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->val_count(), target);
  }

  // optional int64 intent_count = 8;
  if (has_intent_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->intent_count(), target);
  }

  // optional int64 intent_age = 9;
  if (has_intent_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->intent_age(), target);
  }

  // optional int64 gc_bytes_age = 10;
  if (has_gc_bytes_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gc_bytes_age(), target);
  }

  // optional int64 last_update_nanos = 11;
  if (has_last_update_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_update_nanos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.MVCCStats)
  return target;
}

int MVCCStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 live_bytes = 1;
    if (has_live_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->live_bytes());
    }

    // optional int64 key_bytes = 2;
    if (has_key_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key_bytes());
    }

    // optional int64 val_bytes = 3;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_bytes());
    }

    // optional int64 intent_bytes = 4;
    if (has_intent_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intent_bytes());
    }

    // optional int64 live_count = 5;
    if (has_live_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->live_count());
    }

    // optional int64 key_count = 6;
    if (has_key_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key_count());
    }

    // optional int64 val_count = 7;
    if (has_val_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_count());
    }

    // optional int64 intent_count = 8;
    if (has_intent_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intent_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 intent_age = 9;
    if (has_intent_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intent_age());
    }

    // optional int64 gc_bytes_age = 10;
    if (has_gc_bytes_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gc_bytes_age());
    }

    // optional int64 last_update_nanos = 11;
    if (has_last_update_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update_nanos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVCCStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVCCStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVCCStats::MergeFrom(const MVCCStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_live_bytes()) {
      set_live_bytes(from.live_bytes());
    }
    if (from.has_key_bytes()) {
      set_key_bytes(from.key_bytes());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
    if (from.has_intent_bytes()) {
      set_intent_bytes(from.intent_bytes());
    }
    if (from.has_live_count()) {
      set_live_count(from.live_count());
    }
    if (from.has_key_count()) {
      set_key_count(from.key_count());
    }
    if (from.has_val_count()) {
      set_val_count(from.val_count());
    }
    if (from.has_intent_count()) {
      set_intent_count(from.intent_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intent_age()) {
      set_intent_age(from.intent_age());
    }
    if (from.has_gc_bytes_age()) {
      set_gc_bytes_age(from.gc_bytes_age());
    }
    if (from.has_last_update_nanos()) {
      set_last_update_nanos(from.last_update_nanos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVCCStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVCCStats::CopyFrom(const MVCCStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCStats::IsInitialized() const {

  return true;
}

void MVCCStats::Swap(MVCCStats* other) {
  if (other != this) {
    std::swap(live_bytes_, other->live_bytes_);
    std::swap(key_bytes_, other->key_bytes_);
    std::swap(val_bytes_, other->val_bytes_);
    std::swap(intent_bytes_, other->intent_bytes_);
    std::swap(live_count_, other->live_count_);
    std::swap(key_count_, other->key_count_);
    std::swap(val_count_, other->val_count_);
    std::swap(intent_count_, other->intent_count_);
    std::swap(intent_age_, other->intent_age_);
    std::swap(gc_bytes_age_, other->gc_bytes_age_);
    std::swap(last_update_nanos_, other->last_update_nanos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVCCStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVCCStats_descriptor_;
  metadata.reflection = MVCCStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
