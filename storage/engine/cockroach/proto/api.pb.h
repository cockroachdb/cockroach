// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/api.proto

#ifndef PROTOBUF_cockroach_2fproto_2fapi_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2fapi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/config.pb.h"
#include "cockroach/proto/data.pb.h"
#include "cockroach/proto/errors.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

class ClientCmdID;
class RequestHeader;
class ResponseHeader;
class KVRequestHeader;
class KVResponseHeader;
class GetRequest;
class GetResponse;
class PutRequest;
class PutResponse;
class ConditionalPutRequest;
class ConditionalPutResponse;
class IncrementRequest;
class IncrementResponse;
class DeleteRequest;
class DeleteResponse;
class DeleteRangeRequest;
class DeleteRangeResponse;
class ScanRequest;
class ScanResponse;
class EndTransactionRequest;
class EndTransactionResponse;
class RequestUnion;
class ResponseUnion;
class BatchRequest;
class BatchResponse;
class AdminSplitRequest;
class AdminSplitResponse;
class AdminMergeRequest;
class AdminMergeResponse;

enum ReadConsistencyType {
  CONSISTENT = 0,
  CONSENSUS = 1,
  INCONSISTENT = 2
};
bool ReadConsistencyType_IsValid(int value);
const ReadConsistencyType ReadConsistencyType_MIN = CONSISTENT;
const ReadConsistencyType ReadConsistencyType_MAX = INCONSISTENT;
const int ReadConsistencyType_ARRAYSIZE = ReadConsistencyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReadConsistencyType_descriptor();
inline const ::std::string& ReadConsistencyType_Name(ReadConsistencyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReadConsistencyType_descriptor(), value);
}
inline bool ReadConsistencyType_Parse(
    const ::std::string& name, ReadConsistencyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReadConsistencyType>(
    ReadConsistencyType_descriptor(), name, value);
}
// ===================================================================

class ClientCmdID : public ::google::protobuf::Message {
 public:
  ClientCmdID();
  virtual ~ClientCmdID();

  ClientCmdID(const ClientCmdID& from);

  inline ClientCmdID& operator=(const ClientCmdID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientCmdID& default_instance();

  void Swap(ClientCmdID* other);

  // implements Message ----------------------------------------------

  inline ClientCmdID* New() const { return New(NULL); }

  ClientCmdID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientCmdID& from);
  void MergeFrom(const ClientCmdID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCmdID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 wall_time = 1;
  bool has_wall_time() const;
  void clear_wall_time();
  static const int kWallTimeFieldNumber = 1;
  ::google::protobuf::int64 wall_time() const;
  void set_wall_time(::google::protobuf::int64 value);

  // optional int64 random = 2;
  bool has_random() const;
  void clear_random();
  static const int kRandomFieldNumber = 2;
  ::google::protobuf::int64 random() const;
  void set_random(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ClientCmdID)
 private:
  inline void set_has_wall_time();
  inline void clear_has_wall_time();
  inline void set_has_random();
  inline void clear_has_random();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 wall_time_;
  ::google::protobuf::int64 random_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ClientCmdID* default_instance_;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::Message {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  void Swap(RequestHeader* other);

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const { return New(NULL); }

  RequestHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::cockroach::proto::Timestamp& timestamp() const;
  ::cockroach::proto::Timestamp* mutable_timestamp();
  ::cockroach::proto::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional .cockroach.proto.ClientCmdID cmd_id = 2;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 2;
  const ::cockroach::proto::ClientCmdID& cmd_id() const;
  ::cockroach::proto::ClientCmdID* mutable_cmd_id();
  ::cockroach::proto::ClientCmdID* release_cmd_id();
  void set_allocated_cmd_id(::cockroach::proto::ClientCmdID* cmd_id);

  // optional string user = 5;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 5;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional int32 user_priority = 8 [default = 1];
  bool has_user_priority() const;
  void clear_user_priority();
  static const int kUserPriorityFieldNumber = 8;
  ::google::protobuf::int32 user_priority() const;
  void set_user_priority(::google::protobuf::int32 value);

  // optional .cockroach.proto.Transaction txn = 9;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 9;
  const ::cockroach::proto::Transaction& txn() const;
  ::cockroach::proto::Transaction* mutable_txn();
  ::cockroach::proto::Transaction* release_txn();
  void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional .cockroach.proto.ReadConsistencyType read_consistency = 10;
  bool has_read_consistency() const;
  void clear_read_consistency();
  static const int kReadConsistencyFieldNumber = 10;
  ::cockroach::proto::ReadConsistencyType read_consistency() const;
  void set_read_consistency(::cockroach::proto::ReadConsistencyType value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RequestHeader)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_cmd_id();
  inline void clear_has_cmd_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_user_priority();
  inline void clear_has_user_priority();
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_read_consistency();
  inline void clear_has_read_consistency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::cockroach::proto::ClientCmdID* cmd_id_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::cockroach::proto::Transaction* txn_;
  ::google::protobuf::int32 user_priority_;
  int read_consistency_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static RequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  void Swap(ResponseHeader* other);

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const { return New(NULL); }

  ResponseHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::cockroach::proto::Error& error() const;
  ::cockroach::proto::Error* mutable_error();
  ::cockroach::proto::Error* release_error();
  void set_allocated_error(::cockroach::proto::Error* error);

  // optional .cockroach.proto.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  const ::cockroach::proto::Timestamp& timestamp() const;
  ::cockroach::proto::Timestamp* mutable_timestamp();
  ::cockroach::proto::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional .cockroach.proto.Transaction txn = 3;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 3;
  const ::cockroach::proto::Transaction& txn() const;
  ::cockroach::proto::Transaction* mutable_txn();
  ::cockroach::proto::Transaction* release_txn();
  void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ResponseHeader)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Error* error_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::cockroach::proto::Transaction* txn_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class KVRequestHeader : public ::google::protobuf::Message {
 public:
  KVRequestHeader();
  virtual ~KVRequestHeader();

  KVRequestHeader(const KVRequestHeader& from);

  inline KVRequestHeader& operator=(const KVRequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KVRequestHeader& default_instance();

  void Swap(KVRequestHeader* other);

  // implements Message ----------------------------------------------

  inline KVRequestHeader* New() const { return New(NULL); }

  KVRequestHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVRequestHeader& from);
  void MergeFrom(const KVRequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVRequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cockroach::proto::RequestHeader& header() const;
  ::cockroach::proto::RequestHeader* mutable_header();
  ::cockroach::proto::RequestHeader* release_header();
  void set_allocated_header(::cockroach::proto::RequestHeader* header);

  // optional bytes key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes end_key = 4;
  bool has_end_key() const;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // optional .cockroach.proto.Replica replica = 6;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 6;
  const ::cockroach::proto::Replica& replica() const;
  ::cockroach::proto::Replica* mutable_replica();
  ::cockroach::proto::Replica* release_replica();
  void set_allocated_replica(::cockroach::proto::Replica* replica);

  // optional int64 raft_id = 7;
  bool has_raft_id() const;
  void clear_raft_id();
  static const int kRaftIdFieldNumber = 7;
  ::google::protobuf::int64 raft_id() const;
  void set_raft_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.KVRequestHeader)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();
  inline void set_has_replica();
  inline void clear_has_replica();
  inline void set_has_raft_id();
  inline void clear_has_raft_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::RequestHeader* header_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::cockroach::proto::Replica* replica_;
  ::google::protobuf::int64 raft_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static KVRequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class KVResponseHeader : public ::google::protobuf::Message {
 public:
  KVResponseHeader();
  virtual ~KVResponseHeader();

  KVResponseHeader(const KVResponseHeader& from);

  inline KVResponseHeader& operator=(const KVResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KVResponseHeader& default_instance();

  void Swap(KVResponseHeader* other);

  // implements Message ----------------------------------------------

  inline KVResponseHeader* New() const { return New(NULL); }

  KVResponseHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVResponseHeader& from);
  void MergeFrom(const KVResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cockroach::proto::ResponseHeader& header() const;
  ::cockroach::proto::ResponseHeader* mutable_header();
  ::cockroach::proto::ResponseHeader* release_header();
  void set_allocated_header(::cockroach::proto::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:cockroach.proto.KVResponseHeader)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::ResponseHeader* header_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static KVResponseHeader* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  void Swap(GetRequest* other);

  // implements Message ----------------------------------------------

  inline GetRequest* New() const { return New(NULL); }

  GetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GetRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  void Swap(GetResponse* other);

  // implements Message ----------------------------------------------

  inline GetResponse* New() const { return New(NULL); }

  GetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // optional .cockroach.proto.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cockroach::proto::Value& value() const;
  ::cockroach::proto::Value* mutable_value();
  ::cockroach::proto::Value* release_value();
  void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GetResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::cockroach::proto::Value* value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  void Swap(PutRequest* other);

  // implements Message ----------------------------------------------

  inline PutRequest* New() const { return New(NULL); }

  PutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional .cockroach.proto.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cockroach::proto::Value& value() const;
  ::cockroach::proto::Value* mutable_value();
  ::cockroach::proto::Value* release_value();
  void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.PutRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::cockroach::proto::Value* value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  void Swap(PutResponse* other);

  // implements Message ----------------------------------------------

  inline PutResponse* New() const { return New(NULL); }

  PutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.PutResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class ConditionalPutRequest : public ::google::protobuf::Message {
 public:
  ConditionalPutRequest();
  virtual ~ConditionalPutRequest();

  ConditionalPutRequest(const ConditionalPutRequest& from);

  inline ConditionalPutRequest& operator=(const ConditionalPutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionalPutRequest& default_instance();

  void Swap(ConditionalPutRequest* other);

  // implements Message ----------------------------------------------

  inline ConditionalPutRequest* New() const { return New(NULL); }

  ConditionalPutRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionalPutRequest& from);
  void MergeFrom(const ConditionalPutRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionalPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional .cockroach.proto.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cockroach::proto::Value& value() const;
  ::cockroach::proto::Value* mutable_value();
  ::cockroach::proto::Value* release_value();
  void set_allocated_value(::cockroach::proto::Value* value);

  // optional .cockroach.proto.Value exp_value = 3;
  bool has_exp_value() const;
  void clear_exp_value();
  static const int kExpValueFieldNumber = 3;
  const ::cockroach::proto::Value& exp_value() const;
  ::cockroach::proto::Value* mutable_exp_value();
  ::cockroach::proto::Value* release_exp_value();
  void set_allocated_exp_value(::cockroach::proto::Value* exp_value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ConditionalPutRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_exp_value();
  inline void clear_has_exp_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::cockroach::proto::Value* value_;
  ::cockroach::proto::Value* exp_value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ConditionalPutRequest* default_instance_;
};
// -------------------------------------------------------------------

class ConditionalPutResponse : public ::google::protobuf::Message {
 public:
  ConditionalPutResponse();
  virtual ~ConditionalPutResponse();

  ConditionalPutResponse(const ConditionalPutResponse& from);

  inline ConditionalPutResponse& operator=(const ConditionalPutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionalPutResponse& default_instance();

  void Swap(ConditionalPutResponse* other);

  // implements Message ----------------------------------------------

  inline ConditionalPutResponse* New() const { return New(NULL); }

  ConditionalPutResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionalPutResponse& from);
  void MergeFrom(const ConditionalPutResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionalPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ConditionalPutResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ConditionalPutResponse* default_instance_;
};
// -------------------------------------------------------------------

class IncrementRequest : public ::google::protobuf::Message {
 public:
  IncrementRequest();
  virtual ~IncrementRequest();

  IncrementRequest(const IncrementRequest& from);

  inline IncrementRequest& operator=(const IncrementRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementRequest& default_instance();

  void Swap(IncrementRequest* other);

  // implements Message ----------------------------------------------

  inline IncrementRequest* New() const { return New(NULL); }

  IncrementRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncrementRequest& from);
  void MergeFrom(const IncrementRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional int64 increment = 2;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 2;
  ::google::protobuf::int64 increment() const;
  void set_increment(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.IncrementRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_increment();
  inline void clear_has_increment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::google::protobuf::int64 increment_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static IncrementRequest* default_instance_;
};
// -------------------------------------------------------------------

class IncrementResponse : public ::google::protobuf::Message {
 public:
  IncrementResponse();
  virtual ~IncrementResponse();

  IncrementResponse(const IncrementResponse& from);

  inline IncrementResponse& operator=(const IncrementResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncrementResponse& default_instance();

  void Swap(IncrementResponse* other);

  // implements Message ----------------------------------------------

  inline IncrementResponse* New() const { return New(NULL); }

  IncrementResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncrementResponse& from);
  void MergeFrom(const IncrementResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncrementResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // optional int64 new_value = 2;
  bool has_new_value() const;
  void clear_new_value();
  static const int kNewValueFieldNumber = 2;
  ::google::protobuf::int64 new_value() const;
  void set_new_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.IncrementResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_new_value();
  inline void clear_has_new_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::google::protobuf::int64 new_value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static IncrementResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  void Swap(DeleteRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const { return New(NULL); }

  DeleteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.DeleteRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();

  DeleteResponse(const DeleteResponse& from);

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();

  void Swap(DeleteResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteResponse* New() const { return New(NULL); }

  DeleteResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteResponse& from);
  void MergeFrom(const DeleteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.DeleteResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static DeleteResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRangeRequest : public ::google::protobuf::Message {
 public:
  DeleteRangeRequest();
  virtual ~DeleteRangeRequest();

  DeleteRangeRequest(const DeleteRangeRequest& from);

  inline DeleteRangeRequest& operator=(const DeleteRangeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeRequest& default_instance();

  void Swap(DeleteRangeRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteRangeRequest* New() const { return New(NULL); }

  DeleteRangeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRangeRequest& from);
  void MergeFrom(const DeleteRangeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional int64 max_entries_to_delete = 2;
  bool has_max_entries_to_delete() const;
  void clear_max_entries_to_delete();
  static const int kMaxEntriesToDeleteFieldNumber = 2;
  ::google::protobuf::int64 max_entries_to_delete() const;
  void set_max_entries_to_delete(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.DeleteRangeRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_max_entries_to_delete();
  inline void clear_has_max_entries_to_delete();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::google::protobuf::int64 max_entries_to_delete_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static DeleteRangeRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRangeResponse : public ::google::protobuf::Message {
 public:
  DeleteRangeResponse();
  virtual ~DeleteRangeResponse();

  DeleteRangeResponse(const DeleteRangeResponse& from);

  inline DeleteRangeResponse& operator=(const DeleteRangeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRangeResponse& default_instance();

  void Swap(DeleteRangeResponse* other);

  // implements Message ----------------------------------------------

  inline DeleteRangeResponse* New() const { return New(NULL); }

  DeleteRangeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRangeResponse& from);
  void MergeFrom(const DeleteRangeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // optional int64 num_deleted = 2;
  bool has_num_deleted() const;
  void clear_num_deleted();
  static const int kNumDeletedFieldNumber = 2;
  ::google::protobuf::int64 num_deleted() const;
  void set_num_deleted(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.DeleteRangeResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_num_deleted();
  inline void clear_has_num_deleted();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::google::protobuf::int64 num_deleted_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static DeleteRangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ScanRequest : public ::google::protobuf::Message {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRequest& default_instance();

  void Swap(ScanRequest* other);

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const { return New(NULL); }

  ScanRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional int64 max_results = 2;
  bool has_max_results() const;
  void clear_max_results();
  static const int kMaxResultsFieldNumber = 2;
  ::google::protobuf::int64 max_results() const;
  void set_max_results(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ScanRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_max_results();
  inline void clear_has_max_results();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::google::protobuf::int64 max_results_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ScanRequest* default_instance_;
};
// -------------------------------------------------------------------

class ScanResponse : public ::google::protobuf::Message {
 public:
  ScanResponse();
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResponse& default_instance();

  void Swap(ScanResponse* other);

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const { return New(NULL); }

  ScanResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // repeated .cockroach.proto.KeyValue rows = 2;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  const ::cockroach::proto::KeyValue& rows(int index) const;
  ::cockroach::proto::KeyValue* mutable_rows(int index);
  ::cockroach::proto::KeyValue* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::KeyValue >&
      rows() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::KeyValue >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:cockroach.proto.ScanResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::KeyValue > rows_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ScanResponse* default_instance_;
};
// -------------------------------------------------------------------

class EndTransactionRequest : public ::google::protobuf::Message {
 public:
  EndTransactionRequest();
  virtual ~EndTransactionRequest();

  EndTransactionRequest(const EndTransactionRequest& from);

  inline EndTransactionRequest& operator=(const EndTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndTransactionRequest& default_instance();

  void Swap(EndTransactionRequest* other);

  // implements Message ----------------------------------------------

  inline EndTransactionRequest* New() const { return New(NULL); }

  EndTransactionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndTransactionRequest& from);
  void MergeFrom(const EndTransactionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional bool commit = 2;
  bool has_commit() const;
  void clear_commit();
  static const int kCommitFieldNumber = 2;
  bool commit() const;
  void set_commit(bool value);

  // optional .cockroach.proto.InternalCommitTrigger internal_commit_trigger = 3;
  bool has_internal_commit_trigger() const;
  void clear_internal_commit_trigger();
  static const int kInternalCommitTriggerFieldNumber = 3;
  const ::cockroach::proto::InternalCommitTrigger& internal_commit_trigger() const;
  ::cockroach::proto::InternalCommitTrigger* mutable_internal_commit_trigger();
  ::cockroach::proto::InternalCommitTrigger* release_internal_commit_trigger();
  void set_allocated_internal_commit_trigger(::cockroach::proto::InternalCommitTrigger* internal_commit_trigger);

  // @@protoc_insertion_point(class_scope:cockroach.proto.EndTransactionRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_commit();
  inline void clear_has_commit();
  inline void set_has_internal_commit_trigger();
  inline void clear_has_internal_commit_trigger();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::cockroach::proto::InternalCommitTrigger* internal_commit_trigger_;
  bool commit_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static EndTransactionRequest* default_instance_;
};
// -------------------------------------------------------------------

class EndTransactionResponse : public ::google::protobuf::Message {
 public:
  EndTransactionResponse();
  virtual ~EndTransactionResponse();

  EndTransactionResponse(const EndTransactionResponse& from);

  inline EndTransactionResponse& operator=(const EndTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndTransactionResponse& default_instance();

  void Swap(EndTransactionResponse* other);

  // implements Message ----------------------------------------------

  inline EndTransactionResponse* New() const { return New(NULL); }

  EndTransactionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndTransactionResponse& from);
  void MergeFrom(const EndTransactionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // optional int64 commit_wait = 2;
  bool has_commit_wait() const;
  void clear_commit_wait();
  static const int kCommitWaitFieldNumber = 2;
  ::google::protobuf::int64 commit_wait() const;
  void set_commit_wait(::google::protobuf::int64 value);

  // repeated bytes resolved = 3;
  int resolved_size() const;
  void clear_resolved();
  static const int kResolvedFieldNumber = 3;
  const ::std::string& resolved(int index) const;
  ::std::string* mutable_resolved(int index);
  void set_resolved(int index, const ::std::string& value);
  void set_resolved(int index, const char* value);
  void set_resolved(int index, const void* value, size_t size);
  ::std::string* add_resolved();
  void add_resolved(const ::std::string& value);
  void add_resolved(const char* value);
  void add_resolved(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& resolved() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resolved();

  // @@protoc_insertion_point(class_scope:cockroach.proto.EndTransactionResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_commit_wait();
  inline void clear_has_commit_wait();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::google::protobuf::int64 commit_wait_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resolved_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static EndTransactionResponse* default_instance_;
};
// -------------------------------------------------------------------

class RequestUnion : public ::google::protobuf::Message {
 public:
  RequestUnion();
  virtual ~RequestUnion();

  RequestUnion(const RequestUnion& from);

  inline RequestUnion& operator=(const RequestUnion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestUnion& default_instance();

  enum ValueCase {
    kGet = 2,
    kPut = 3,
    kConditionalPut = 4,
    kIncrement = 5,
    kDelete = 6,
    kDeleteRange = 7,
    kScan = 8,
    kEndTransaction = 9,
    VALUE_NOT_SET = 0,
  };

  void Swap(RequestUnion* other);

  // implements Message ----------------------------------------------

  inline RequestUnion* New() const { return New(NULL); }

  RequestUnion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestUnion& from);
  void MergeFrom(const RequestUnion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.GetRequest get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::cockroach::proto::GetRequest& get() const;
  ::cockroach::proto::GetRequest* mutable_get();
  ::cockroach::proto::GetRequest* release_get();
  void set_allocated_get(::cockroach::proto::GetRequest* get);

  // optional .cockroach.proto.PutRequest put = 3;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 3;
  const ::cockroach::proto::PutRequest& put() const;
  ::cockroach::proto::PutRequest* mutable_put();
  ::cockroach::proto::PutRequest* release_put();
  void set_allocated_put(::cockroach::proto::PutRequest* put);

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  bool has_conditional_put() const;
  void clear_conditional_put();
  static const int kConditionalPutFieldNumber = 4;
  const ::cockroach::proto::ConditionalPutRequest& conditional_put() const;
  ::cockroach::proto::ConditionalPutRequest* mutable_conditional_put();
  ::cockroach::proto::ConditionalPutRequest* release_conditional_put();
  void set_allocated_conditional_put(::cockroach::proto::ConditionalPutRequest* conditional_put);

  // optional .cockroach.proto.IncrementRequest increment = 5;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 5;
  const ::cockroach::proto::IncrementRequest& increment() const;
  ::cockroach::proto::IncrementRequest* mutable_increment();
  ::cockroach::proto::IncrementRequest* release_increment();
  void set_allocated_increment(::cockroach::proto::IncrementRequest* increment);

  // optional .cockroach.proto.DeleteRequest delete = 6;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 6;
  const ::cockroach::proto::DeleteRequest& delete_() const;
  ::cockroach::proto::DeleteRequest* mutable_delete_();
  ::cockroach::proto::DeleteRequest* release_delete_();
  void set_allocated_delete_(::cockroach::proto::DeleteRequest* delete_);

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 7;
  const ::cockroach::proto::DeleteRangeRequest& delete_range() const;
  ::cockroach::proto::DeleteRangeRequest* mutable_delete_range();
  ::cockroach::proto::DeleteRangeRequest* release_delete_range();
  void set_allocated_delete_range(::cockroach::proto::DeleteRangeRequest* delete_range);

  // optional .cockroach.proto.ScanRequest scan = 8;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 8;
  const ::cockroach::proto::ScanRequest& scan() const;
  ::cockroach::proto::ScanRequest* mutable_scan();
  ::cockroach::proto::ScanRequest* release_scan();
  void set_allocated_scan(::cockroach::proto::ScanRequest* scan);

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  bool has_end_transaction() const;
  void clear_end_transaction();
  static const int kEndTransactionFieldNumber = 9;
  const ::cockroach::proto::EndTransactionRequest& end_transaction() const;
  ::cockroach::proto::EndTransactionRequest* mutable_end_transaction();
  ::cockroach::proto::EndTransactionRequest* release_end_transaction();
  void set_allocated_end_transaction(::cockroach::proto::EndTransactionRequest* end_transaction);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cockroach.proto.RequestUnion)
 private:
  inline void set_has_get();
  inline void set_has_put();
  inline void set_has_conditional_put();
  inline void set_has_increment();
  inline void set_has_delete_();
  inline void set_has_delete_range();
  inline void set_has_scan();
  inline void set_has_end_transaction();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::cockroach::proto::GetRequest* get_;
    ::cockroach::proto::PutRequest* put_;
    ::cockroach::proto::ConditionalPutRequest* conditional_put_;
    ::cockroach::proto::IncrementRequest* increment_;
    ::cockroach::proto::DeleteRequest* delete__;
    ::cockroach::proto::DeleteRangeRequest* delete_range_;
    ::cockroach::proto::ScanRequest* scan_;
    ::cockroach::proto::EndTransactionRequest* end_transaction_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static RequestUnion* default_instance_;
};
// -------------------------------------------------------------------

class ResponseUnion : public ::google::protobuf::Message {
 public:
  ResponseUnion();
  virtual ~ResponseUnion();

  ResponseUnion(const ResponseUnion& from);

  inline ResponseUnion& operator=(const ResponseUnion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseUnion& default_instance();

  enum ValueCase {
    kGet = 2,
    kPut = 3,
    kConditionalPut = 4,
    kIncrement = 5,
    kDelete = 6,
    kDeleteRange = 7,
    kScan = 8,
    kEndTransaction = 9,
    VALUE_NOT_SET = 0,
  };

  void Swap(ResponseUnion* other);

  // implements Message ----------------------------------------------

  inline ResponseUnion* New() const { return New(NULL); }

  ResponseUnion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseUnion& from);
  void MergeFrom(const ResponseUnion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.GetResponse get = 2;
  bool has_get() const;
  void clear_get();
  static const int kGetFieldNumber = 2;
  const ::cockroach::proto::GetResponse& get() const;
  ::cockroach::proto::GetResponse* mutable_get();
  ::cockroach::proto::GetResponse* release_get();
  void set_allocated_get(::cockroach::proto::GetResponse* get);

  // optional .cockroach.proto.PutResponse put = 3;
  bool has_put() const;
  void clear_put();
  static const int kPutFieldNumber = 3;
  const ::cockroach::proto::PutResponse& put() const;
  ::cockroach::proto::PutResponse* mutable_put();
  ::cockroach::proto::PutResponse* release_put();
  void set_allocated_put(::cockroach::proto::PutResponse* put);

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
  bool has_conditional_put() const;
  void clear_conditional_put();
  static const int kConditionalPutFieldNumber = 4;
  const ::cockroach::proto::ConditionalPutResponse& conditional_put() const;
  ::cockroach::proto::ConditionalPutResponse* mutable_conditional_put();
  ::cockroach::proto::ConditionalPutResponse* release_conditional_put();
  void set_allocated_conditional_put(::cockroach::proto::ConditionalPutResponse* conditional_put);

  // optional .cockroach.proto.IncrementResponse increment = 5;
  bool has_increment() const;
  void clear_increment();
  static const int kIncrementFieldNumber = 5;
  const ::cockroach::proto::IncrementResponse& increment() const;
  ::cockroach::proto::IncrementResponse* mutable_increment();
  ::cockroach::proto::IncrementResponse* release_increment();
  void set_allocated_increment(::cockroach::proto::IncrementResponse* increment);

  // optional .cockroach.proto.DeleteResponse delete = 6;
  bool has_delete_() const;
  void clear_delete_();
  static const int kDeleteFieldNumber = 6;
  const ::cockroach::proto::DeleteResponse& delete_() const;
  ::cockroach::proto::DeleteResponse* mutable_delete_();
  ::cockroach::proto::DeleteResponse* release_delete_();
  void set_allocated_delete_(::cockroach::proto::DeleteResponse* delete_);

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
  bool has_delete_range() const;
  void clear_delete_range();
  static const int kDeleteRangeFieldNumber = 7;
  const ::cockroach::proto::DeleteRangeResponse& delete_range() const;
  ::cockroach::proto::DeleteRangeResponse* mutable_delete_range();
  ::cockroach::proto::DeleteRangeResponse* release_delete_range();
  void set_allocated_delete_range(::cockroach::proto::DeleteRangeResponse* delete_range);

  // optional .cockroach.proto.ScanResponse scan = 8;
  bool has_scan() const;
  void clear_scan();
  static const int kScanFieldNumber = 8;
  const ::cockroach::proto::ScanResponse& scan() const;
  ::cockroach::proto::ScanResponse* mutable_scan();
  ::cockroach::proto::ScanResponse* release_scan();
  void set_allocated_scan(::cockroach::proto::ScanResponse* scan);

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
  bool has_end_transaction() const;
  void clear_end_transaction();
  static const int kEndTransactionFieldNumber = 9;
  const ::cockroach::proto::EndTransactionResponse& end_transaction() const;
  ::cockroach::proto::EndTransactionResponse* mutable_end_transaction();
  ::cockroach::proto::EndTransactionResponse* release_end_transaction();
  void set_allocated_end_transaction(::cockroach::proto::EndTransactionResponse* end_transaction);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cockroach.proto.ResponseUnion)
 private:
  inline void set_has_get();
  inline void set_has_put();
  inline void set_has_conditional_put();
  inline void set_has_increment();
  inline void set_has_delete_();
  inline void set_has_delete_range();
  inline void set_has_scan();
  inline void set_has_end_transaction();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::cockroach::proto::GetResponse* get_;
    ::cockroach::proto::PutResponse* put_;
    ::cockroach::proto::ConditionalPutResponse* conditional_put_;
    ::cockroach::proto::IncrementResponse* increment_;
    ::cockroach::proto::DeleteResponse* delete__;
    ::cockroach::proto::DeleteRangeResponse* delete_range_;
    ::cockroach::proto::ScanResponse* scan_;
    ::cockroach::proto::EndTransactionResponse* end_transaction_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static ResponseUnion* default_instance_;
};
// -------------------------------------------------------------------

class BatchRequest : public ::google::protobuf::Message {
 public:
  BatchRequest();
  virtual ~BatchRequest();

  BatchRequest(const BatchRequest& from);

  inline BatchRequest& operator=(const BatchRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchRequest& default_instance();

  void Swap(BatchRequest* other);

  // implements Message ----------------------------------------------

  inline BatchRequest* New() const { return New(NULL); }

  BatchRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchRequest& from);
  void MergeFrom(const BatchRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // repeated .cockroach.proto.RequestUnion requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  const ::cockroach::proto::RequestUnion& requests(int index) const;
  ::cockroach::proto::RequestUnion* mutable_requests(int index);
  ::cockroach::proto::RequestUnion* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RequestUnion >&
      requests() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RequestUnion >*
      mutable_requests();

  // @@protoc_insertion_point(class_scope:cockroach.proto.BatchRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RequestUnion > requests_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static BatchRequest* default_instance_;
};
// -------------------------------------------------------------------

class BatchResponse : public ::google::protobuf::Message {
 public:
  BatchResponse();
  virtual ~BatchResponse();

  BatchResponse(const BatchResponse& from);

  inline BatchResponse& operator=(const BatchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchResponse& default_instance();

  void Swap(BatchResponse* other);

  // implements Message ----------------------------------------------

  inline BatchResponse* New() const { return New(NULL); }

  BatchResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchResponse& from);
  void MergeFrom(const BatchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // repeated .cockroach.proto.ResponseUnion responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  const ::cockroach::proto::ResponseUnion& responses(int index) const;
  ::cockroach::proto::ResponseUnion* mutable_responses(int index);
  ::cockroach::proto::ResponseUnion* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::ResponseUnion >&
      responses() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::ResponseUnion >*
      mutable_responses();

  // @@protoc_insertion_point(class_scope:cockroach.proto.BatchResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::ResponseUnion > responses_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static BatchResponse* default_instance_;
};
// -------------------------------------------------------------------

class AdminSplitRequest : public ::google::protobuf::Message {
 public:
  AdminSplitRequest();
  virtual ~AdminSplitRequest();

  AdminSplitRequest(const AdminSplitRequest& from);

  inline AdminSplitRequest& operator=(const AdminSplitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminSplitRequest& default_instance();

  void Swap(AdminSplitRequest* other);

  // implements Message ----------------------------------------------

  inline AdminSplitRequest* New() const { return New(NULL); }

  AdminSplitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminSplitRequest& from);
  void MergeFrom(const AdminSplitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminSplitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // optional bytes split_key = 2;
  bool has_split_key() const;
  void clear_split_key();
  static const int kSplitKeyFieldNumber = 2;
  const ::std::string& split_key() const;
  void set_split_key(const ::std::string& value);
  void set_split_key(const char* value);
  void set_split_key(const void* value, size_t size);
  ::std::string* mutable_split_key();
  ::std::string* release_split_key();
  void set_allocated_split_key(::std::string* split_key);

  // @@protoc_insertion_point(class_scope:cockroach.proto.AdminSplitRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();
  inline void set_has_split_key();
  inline void clear_has_split_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  ::google::protobuf::internal::ArenaStringPtr split_key_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static AdminSplitRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminSplitResponse : public ::google::protobuf::Message {
 public:
  AdminSplitResponse();
  virtual ~AdminSplitResponse();

  AdminSplitResponse(const AdminSplitResponse& from);

  inline AdminSplitResponse& operator=(const AdminSplitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminSplitResponse& default_instance();

  void Swap(AdminSplitResponse* other);

  // implements Message ----------------------------------------------

  inline AdminSplitResponse* New() const { return New(NULL); }

  AdminSplitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminSplitResponse& from);
  void MergeFrom(const AdminSplitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminSplitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.AdminSplitResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static AdminSplitResponse* default_instance_;
};
// -------------------------------------------------------------------

class AdminMergeRequest : public ::google::protobuf::Message {
 public:
  AdminMergeRequest();
  virtual ~AdminMergeRequest();

  AdminMergeRequest(const AdminMergeRequest& from);

  inline AdminMergeRequest& operator=(const AdminMergeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminMergeRequest& default_instance();

  void Swap(AdminMergeRequest* other);

  // implements Message ----------------------------------------------

  inline AdminMergeRequest* New() const { return New(NULL); }

  AdminMergeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminMergeRequest& from);
  void MergeFrom(const AdminMergeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminMergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVRequestHeader& kvheader() const;
  ::cockroach::proto::KVRequestHeader* mutable_kvheader();
  ::cockroach::proto::KVRequestHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.AdminMergeRequest)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVRequestHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static AdminMergeRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdminMergeResponse : public ::google::protobuf::Message {
 public:
  AdminMergeResponse();
  virtual ~AdminMergeResponse();

  AdminMergeResponse(const AdminMergeResponse& from);

  inline AdminMergeResponse& operator=(const AdminMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminMergeResponse& default_instance();

  void Swap(AdminMergeResponse* other);

  // implements Message ----------------------------------------------

  inline AdminMergeResponse* New() const { return New(NULL); }

  AdminMergeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminMergeResponse& from);
  void MergeFrom(const AdminMergeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdminMergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  bool has_kvheader() const;
  void clear_kvheader();
  static const int kKvheaderFieldNumber = 1;
  const ::cockroach::proto::KVResponseHeader& kvheader() const;
  ::cockroach::proto::KVResponseHeader* mutable_kvheader();
  ::cockroach::proto::KVResponseHeader* release_kvheader();
  void set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.AdminMergeResponse)
 private:
  inline void set_has_kvheader();
  inline void clear_has_kvheader();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::KVResponseHeader* kvheader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fapi_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fapi_2eproto();

  void InitAsDefaultInstance();
  static AdminMergeResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCmdID

// optional int64 wall_time = 1;
inline bool ClientCmdID::has_wall_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientCmdID::set_has_wall_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientCmdID::clear_has_wall_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientCmdID::clear_wall_time() {
  wall_time_ = GOOGLE_LONGLONG(0);
  clear_has_wall_time();
}
inline ::google::protobuf::int64 ClientCmdID::wall_time() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ClientCmdID.wall_time)
  return wall_time_;
}
inline void ClientCmdID::set_wall_time(::google::protobuf::int64 value) {
  set_has_wall_time();
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ClientCmdID.wall_time)
}

// optional int64 random = 2;
inline bool ClientCmdID::has_random() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientCmdID::set_has_random() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientCmdID::clear_has_random() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientCmdID::clear_random() {
  random_ = GOOGLE_LONGLONG(0);
  clear_has_random();
}
inline ::google::protobuf::int64 ClientCmdID::random() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ClientCmdID.random)
  return random_;
}
inline void ClientCmdID::set_random(::google::protobuf::int64 value) {
  set_has_random();
  random_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ClientCmdID.random)
}

// -------------------------------------------------------------------

// RequestHeader

// optional .cockroach.proto.Timestamp timestamp = 1;
inline bool RequestHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestHeader::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& RequestHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* RequestHeader::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestHeader.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* RequestHeader::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void RequestHeader::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestHeader.timestamp)
}

// optional .cockroach.proto.ClientCmdID cmd_id = 2;
inline bool RequestHeader::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestHeader::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestHeader::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestHeader::clear_cmd_id() {
  if (cmd_id_ != NULL) cmd_id_->::cockroach::proto::ClientCmdID::Clear();
  clear_has_cmd_id();
}
inline const ::cockroach::proto::ClientCmdID& RequestHeader::cmd_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.cmd_id)
  return cmd_id_ != NULL ? *cmd_id_ : *default_instance_->cmd_id_;
}
inline ::cockroach::proto::ClientCmdID* RequestHeader::mutable_cmd_id() {
  set_has_cmd_id();
  if (cmd_id_ == NULL) {
    cmd_id_ = new ::cockroach::proto::ClientCmdID;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestHeader.cmd_id)
  return cmd_id_;
}
inline ::cockroach::proto::ClientCmdID* RequestHeader::release_cmd_id() {
  clear_has_cmd_id();
  ::cockroach::proto::ClientCmdID* temp = cmd_id_;
  cmd_id_ = NULL;
  return temp;
}
inline void RequestHeader::set_allocated_cmd_id(::cockroach::proto::ClientCmdID* cmd_id) {
  delete cmd_id_;
  cmd_id_ = cmd_id;
  if (cmd_id) {
    set_has_cmd_id();
  } else {
    clear_has_cmd_id();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestHeader.cmd_id)
}

// optional string user = 5;
inline bool RequestHeader::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestHeader::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestHeader::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestHeader::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& RequestHeader::user() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RequestHeader.user)
}
inline void RequestHeader::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RequestHeader.user)
}
inline void RequestHeader::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RequestHeader.user)
}
inline ::std::string* RequestHeader::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestHeader.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestHeader::release_user() {
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestHeader::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestHeader.user)
}

// optional int32 user_priority = 8 [default = 1];
inline bool RequestHeader::has_user_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestHeader::set_has_user_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestHeader::clear_has_user_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestHeader::clear_user_priority() {
  user_priority_ = 1;
  clear_has_user_priority();
}
inline ::google::protobuf::int32 RequestHeader::user_priority() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.user_priority)
  return user_priority_;
}
inline void RequestHeader::set_user_priority(::google::protobuf::int32 value) {
  set_has_user_priority();
  user_priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RequestHeader.user_priority)
}

// optional .cockroach.proto.Transaction txn = 9;
inline bool RequestHeader::has_txn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestHeader::set_has_txn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestHeader::clear_has_txn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestHeader::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& RequestHeader::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* RequestHeader::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestHeader.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* RequestHeader::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void RequestHeader::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestHeader.txn)
}

// optional .cockroach.proto.ReadConsistencyType read_consistency = 10;
inline bool RequestHeader::has_read_consistency() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestHeader::set_has_read_consistency() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestHeader::clear_has_read_consistency() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestHeader::clear_read_consistency() {
  read_consistency_ = 0;
  clear_has_read_consistency();
}
inline ::cockroach::proto::ReadConsistencyType RequestHeader::read_consistency() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestHeader.read_consistency)
  return static_cast< ::cockroach::proto::ReadConsistencyType >(read_consistency_);
}
inline void RequestHeader::set_read_consistency(::cockroach::proto::ReadConsistencyType value) {
  assert(::cockroach::proto::ReadConsistencyType_IsValid(value));
  set_has_read_consistency();
  read_consistency_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RequestHeader.read_consistency)
}

// -------------------------------------------------------------------

// ResponseHeader

// optional .cockroach.proto.Error error = 1;
inline bool ResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeader::clear_error() {
  if (error_ != NULL) error_->::cockroach::proto::Error::Clear();
  clear_has_error();
}
inline const ::cockroach::proto::Error& ResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseHeader.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::cockroach::proto::Error* ResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::cockroach::proto::Error;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseHeader.error)
  return error_;
}
inline ::cockroach::proto::Error* ResponseHeader::release_error() {
  clear_has_error();
  ::cockroach::proto::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_error(::cockroach::proto::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseHeader.error)
}

// optional .cockroach.proto.Timestamp timestamp = 2;
inline bool ResponseHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeader::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& ResponseHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseHeader.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* ResponseHeader::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseHeader.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* ResponseHeader::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseHeader.timestamp)
}

// optional .cockroach.proto.Transaction txn = 3;
inline bool ResponseHeader::has_txn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHeader::set_has_txn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseHeader::clear_has_txn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseHeader::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& ResponseHeader::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseHeader.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* ResponseHeader::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseHeader.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* ResponseHeader::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void ResponseHeader::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseHeader.txn)
}

// -------------------------------------------------------------------

// KVRequestHeader

// optional .cockroach.proto.RequestHeader header = 1;
inline bool KVRequestHeader::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVRequestHeader::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVRequestHeader::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVRequestHeader::clear_header() {
  if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
  clear_has_header();
}
inline const ::cockroach::proto::RequestHeader& KVRequestHeader::header() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVRequestHeader.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::cockroach::proto::RequestHeader* KVRequestHeader::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::cockroach::proto::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KVRequestHeader.header)
  return header_;
}
inline ::cockroach::proto::RequestHeader* KVRequestHeader::release_header() {
  clear_has_header();
  ::cockroach::proto::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void KVRequestHeader::set_allocated_header(::cockroach::proto::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KVRequestHeader.header)
}

// optional bytes key = 3;
inline bool KVRequestHeader::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KVRequestHeader::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KVRequestHeader::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KVRequestHeader::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& KVRequestHeader::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVRequestHeader.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVRequestHeader::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.KVRequestHeader.key)
}
inline void KVRequestHeader::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.KVRequestHeader.key)
}
inline void KVRequestHeader::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.KVRequestHeader.key)
}
inline ::std::string* KVRequestHeader::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KVRequestHeader.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVRequestHeader::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVRequestHeader::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KVRequestHeader.key)
}

// optional bytes end_key = 4;
inline bool KVRequestHeader::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KVRequestHeader::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KVRequestHeader::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KVRequestHeader::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
inline const ::std::string& KVRequestHeader::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVRequestHeader.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVRequestHeader::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.KVRequestHeader.end_key)
}
inline void KVRequestHeader::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.KVRequestHeader.end_key)
}
inline void KVRequestHeader::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.KVRequestHeader.end_key)
}
inline ::std::string* KVRequestHeader::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KVRequestHeader.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVRequestHeader::release_end_key() {
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVRequestHeader::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KVRequestHeader.end_key)
}

// optional .cockroach.proto.Replica replica = 6;
inline bool KVRequestHeader::has_replica() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KVRequestHeader::set_has_replica() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KVRequestHeader::clear_has_replica() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KVRequestHeader::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::proto::Replica::Clear();
  clear_has_replica();
}
inline const ::cockroach::proto::Replica& KVRequestHeader::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVRequestHeader.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
inline ::cockroach::proto::Replica* KVRequestHeader::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::proto::Replica;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KVRequestHeader.replica)
  return replica_;
}
inline ::cockroach::proto::Replica* KVRequestHeader::release_replica() {
  clear_has_replica();
  ::cockroach::proto::Replica* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void KVRequestHeader::set_allocated_replica(::cockroach::proto::Replica* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KVRequestHeader.replica)
}

// optional int64 raft_id = 7;
inline bool KVRequestHeader::has_raft_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KVRequestHeader::set_has_raft_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KVRequestHeader::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KVRequestHeader::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 KVRequestHeader::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVRequestHeader.raft_id)
  return raft_id_;
}
inline void KVRequestHeader::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.KVRequestHeader.raft_id)
}

// -------------------------------------------------------------------

// KVResponseHeader

// optional .cockroach.proto.ResponseHeader header = 1;
inline bool KVResponseHeader::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KVResponseHeader::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KVResponseHeader::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KVResponseHeader::clear_header() {
  if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  clear_has_header();
}
inline const ::cockroach::proto::ResponseHeader& KVResponseHeader::header() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KVResponseHeader.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::cockroach::proto::ResponseHeader* KVResponseHeader::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::cockroach::proto::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KVResponseHeader.header)
  return header_;
}
inline ::cockroach::proto::ResponseHeader* KVResponseHeader::release_header() {
  clear_has_header();
  ::cockroach::proto::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline void KVResponseHeader::set_allocated_header(::cockroach::proto::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KVResponseHeader.header)
}

// -------------------------------------------------------------------

// GetRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool GetRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& GetRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GetRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* GetRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GetRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* GetRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void GetRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GetRequest.kvheader)
}

// -------------------------------------------------------------------

// GetResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool GetResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& GetResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GetResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* GetResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GetResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* GetResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void GetResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GetResponse.kvheader)
}

// optional .cockroach.proto.Value value = 2;
inline bool GetResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetResponse::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GetResponse.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* GetResponse::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.GetResponse.value)
  return value_;
}
inline ::cockroach::proto::Value* GetResponse::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void GetResponse::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.GetResponse.value)
}

// -------------------------------------------------------------------

// PutRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool PutRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& PutRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PutRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* PutRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PutRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* PutRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PutRequest.kvheader)
}

// optional .cockroach.proto.Value value = 2;
inline bool PutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PutRequest::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PutRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* PutRequest::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PutRequest.value)
  return value_;
}
inline ::cockroach::proto::Value* PutRequest::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void PutRequest::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PutRequest.value)
}

// -------------------------------------------------------------------

// PutResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool PutResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PutResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PutResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PutResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& PutResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PutResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* PutResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PutResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* PutResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void PutResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PutResponse.kvheader)
}

// -------------------------------------------------------------------

// ConditionalPutRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool ConditionalPutRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionalPutRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionalPutRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionalPutRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& ConditionalPutRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ConditionalPutRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* ConditionalPutRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ConditionalPutRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* ConditionalPutRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void ConditionalPutRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ConditionalPutRequest.kvheader)
}

// optional .cockroach.proto.Value value = 2;
inline bool ConditionalPutRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConditionalPutRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConditionalPutRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConditionalPutRequest::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& ConditionalPutRequest::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ConditionalPutRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* ConditionalPutRequest::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ConditionalPutRequest.value)
  return value_;
}
inline ::cockroach::proto::Value* ConditionalPutRequest::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void ConditionalPutRequest::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ConditionalPutRequest.value)
}

// optional .cockroach.proto.Value exp_value = 3;
inline bool ConditionalPutRequest::has_exp_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConditionalPutRequest::set_has_exp_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConditionalPutRequest::clear_has_exp_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConditionalPutRequest::clear_exp_value() {
  if (exp_value_ != NULL) exp_value_->::cockroach::proto::Value::Clear();
  clear_has_exp_value();
}
inline const ::cockroach::proto::Value& ConditionalPutRequest::exp_value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ConditionalPutRequest.exp_value)
  return exp_value_ != NULL ? *exp_value_ : *default_instance_->exp_value_;
}
inline ::cockroach::proto::Value* ConditionalPutRequest::mutable_exp_value() {
  set_has_exp_value();
  if (exp_value_ == NULL) {
    exp_value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ConditionalPutRequest.exp_value)
  return exp_value_;
}
inline ::cockroach::proto::Value* ConditionalPutRequest::release_exp_value() {
  clear_has_exp_value();
  ::cockroach::proto::Value* temp = exp_value_;
  exp_value_ = NULL;
  return temp;
}
inline void ConditionalPutRequest::set_allocated_exp_value(::cockroach::proto::Value* exp_value) {
  delete exp_value_;
  exp_value_ = exp_value;
  if (exp_value) {
    set_has_exp_value();
  } else {
    clear_has_exp_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ConditionalPutRequest.exp_value)
}

// -------------------------------------------------------------------

// ConditionalPutResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool ConditionalPutResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionalPutResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionalPutResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionalPutResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& ConditionalPutResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ConditionalPutResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* ConditionalPutResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ConditionalPutResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* ConditionalPutResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void ConditionalPutResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ConditionalPutResponse.kvheader)
}

// -------------------------------------------------------------------

// IncrementRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool IncrementRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncrementRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncrementRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncrementRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& IncrementRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.IncrementRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* IncrementRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.IncrementRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* IncrementRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void IncrementRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.IncrementRequest.kvheader)
}

// optional int64 increment = 2;
inline bool IncrementRequest::has_increment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncrementRequest::set_has_increment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncrementRequest::clear_has_increment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncrementRequest::clear_increment() {
  increment_ = GOOGLE_LONGLONG(0);
  clear_has_increment();
}
inline ::google::protobuf::int64 IncrementRequest::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.IncrementRequest.increment)
  return increment_;
}
inline void IncrementRequest::set_increment(::google::protobuf::int64 value) {
  set_has_increment();
  increment_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.IncrementRequest.increment)
}

// -------------------------------------------------------------------

// IncrementResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool IncrementResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncrementResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncrementResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncrementResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& IncrementResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.IncrementResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* IncrementResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.IncrementResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* IncrementResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void IncrementResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.IncrementResponse.kvheader)
}

// optional int64 new_value = 2;
inline bool IncrementResponse::has_new_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncrementResponse::set_has_new_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncrementResponse::clear_has_new_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncrementResponse::clear_new_value() {
  new_value_ = GOOGLE_LONGLONG(0);
  clear_has_new_value();
}
inline ::google::protobuf::int64 IncrementResponse::new_value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.IncrementResponse.new_value)
  return new_value_;
}
inline void IncrementResponse::set_new_value(::google::protobuf::int64 value) {
  set_has_new_value();
  new_value_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.IncrementResponse.new_value)
}

// -------------------------------------------------------------------

// DeleteRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool DeleteRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& DeleteRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* DeleteRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.DeleteRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* DeleteRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void DeleteRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.DeleteRequest.kvheader)
}

// -------------------------------------------------------------------

// DeleteResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool DeleteResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& DeleteResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* DeleteResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.DeleteResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* DeleteResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void DeleteResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.DeleteResponse.kvheader)
}

// -------------------------------------------------------------------

// DeleteRangeRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool DeleteRangeRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRangeRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRangeRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRangeRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& DeleteRangeRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteRangeRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* DeleteRangeRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.DeleteRangeRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* DeleteRangeRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void DeleteRangeRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.DeleteRangeRequest.kvheader)
}

// optional int64 max_entries_to_delete = 2;
inline bool DeleteRangeRequest::has_max_entries_to_delete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRangeRequest::set_has_max_entries_to_delete() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRangeRequest::clear_has_max_entries_to_delete() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRangeRequest::clear_max_entries_to_delete() {
  max_entries_to_delete_ = GOOGLE_LONGLONG(0);
  clear_has_max_entries_to_delete();
}
inline ::google::protobuf::int64 DeleteRangeRequest::max_entries_to_delete() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteRangeRequest.max_entries_to_delete)
  return max_entries_to_delete_;
}
inline void DeleteRangeRequest::set_max_entries_to_delete(::google::protobuf::int64 value) {
  set_has_max_entries_to_delete();
  max_entries_to_delete_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.DeleteRangeRequest.max_entries_to_delete)
}

// -------------------------------------------------------------------

// DeleteRangeResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool DeleteRangeResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRangeResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRangeResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRangeResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& DeleteRangeResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteRangeResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* DeleteRangeResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.DeleteRangeResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* DeleteRangeResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void DeleteRangeResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.DeleteRangeResponse.kvheader)
}

// optional int64 num_deleted = 2;
inline bool DeleteRangeResponse::has_num_deleted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRangeResponse::set_has_num_deleted() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRangeResponse::clear_has_num_deleted() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRangeResponse::clear_num_deleted() {
  num_deleted_ = GOOGLE_LONGLONG(0);
  clear_has_num_deleted();
}
inline ::google::protobuf::int64 DeleteRangeResponse::num_deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.DeleteRangeResponse.num_deleted)
  return num_deleted_;
}
inline void DeleteRangeResponse::set_num_deleted(::google::protobuf::int64 value) {
  set_has_num_deleted();
  num_deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.DeleteRangeResponse.num_deleted)
}

// -------------------------------------------------------------------

// ScanRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool ScanRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& ScanRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ScanRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* ScanRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ScanRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* ScanRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void ScanRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ScanRequest.kvheader)
}

// optional int64 max_results = 2;
inline bool ScanRequest::has_max_results() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanRequest::set_has_max_results() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanRequest::clear_has_max_results() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanRequest::clear_max_results() {
  max_results_ = GOOGLE_LONGLONG(0);
  clear_has_max_results();
}
inline ::google::protobuf::int64 ScanRequest::max_results() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ScanRequest.max_results)
  return max_results_;
}
inline void ScanRequest::set_max_results(::google::protobuf::int64 value) {
  set_has_max_results();
  max_results_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ScanRequest.max_results)
}

// -------------------------------------------------------------------

// ScanResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool ScanResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& ScanResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ScanResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* ScanResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ScanResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* ScanResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void ScanResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ScanResponse.kvheader)
}

// repeated .cockroach.proto.KeyValue rows = 2;
inline int ScanResponse::rows_size() const {
  return rows_.size();
}
inline void ScanResponse::clear_rows() {
  rows_.Clear();
}
inline const ::cockroach::proto::KeyValue& ScanResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ScanResponse.rows)
  return rows_.Get(index);
}
inline ::cockroach::proto::KeyValue* ScanResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ScanResponse.rows)
  return rows_.Mutable(index);
}
inline ::cockroach::proto::KeyValue* ScanResponse::add_rows() {
  // @@protoc_insertion_point(field_add:cockroach.proto.ScanResponse.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::KeyValue >&
ScanResponse::rows() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.ScanResponse.rows)
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::KeyValue >*
ScanResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.ScanResponse.rows)
  return &rows_;
}

// -------------------------------------------------------------------

// EndTransactionRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool EndTransactionRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndTransactionRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndTransactionRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndTransactionRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& EndTransactionRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* EndTransactionRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.EndTransactionRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* EndTransactionRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void EndTransactionRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.EndTransactionRequest.kvheader)
}

// optional bool commit = 2;
inline bool EndTransactionRequest::has_commit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndTransactionRequest::set_has_commit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndTransactionRequest::clear_has_commit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndTransactionRequest::clear_commit() {
  commit_ = false;
  clear_has_commit();
}
inline bool EndTransactionRequest::commit() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionRequest.commit)
  return commit_;
}
inline void EndTransactionRequest::set_commit(bool value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.EndTransactionRequest.commit)
}

// optional .cockroach.proto.InternalCommitTrigger internal_commit_trigger = 3;
inline bool EndTransactionRequest::has_internal_commit_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndTransactionRequest::set_has_internal_commit_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndTransactionRequest::clear_has_internal_commit_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndTransactionRequest::clear_internal_commit_trigger() {
  if (internal_commit_trigger_ != NULL) internal_commit_trigger_->::cockroach::proto::InternalCommitTrigger::Clear();
  clear_has_internal_commit_trigger();
}
inline const ::cockroach::proto::InternalCommitTrigger& EndTransactionRequest::internal_commit_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionRequest.internal_commit_trigger)
  return internal_commit_trigger_ != NULL ? *internal_commit_trigger_ : *default_instance_->internal_commit_trigger_;
}
inline ::cockroach::proto::InternalCommitTrigger* EndTransactionRequest::mutable_internal_commit_trigger() {
  set_has_internal_commit_trigger();
  if (internal_commit_trigger_ == NULL) {
    internal_commit_trigger_ = new ::cockroach::proto::InternalCommitTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.EndTransactionRequest.internal_commit_trigger)
  return internal_commit_trigger_;
}
inline ::cockroach::proto::InternalCommitTrigger* EndTransactionRequest::release_internal_commit_trigger() {
  clear_has_internal_commit_trigger();
  ::cockroach::proto::InternalCommitTrigger* temp = internal_commit_trigger_;
  internal_commit_trigger_ = NULL;
  return temp;
}
inline void EndTransactionRequest::set_allocated_internal_commit_trigger(::cockroach::proto::InternalCommitTrigger* internal_commit_trigger) {
  delete internal_commit_trigger_;
  internal_commit_trigger_ = internal_commit_trigger;
  if (internal_commit_trigger) {
    set_has_internal_commit_trigger();
  } else {
    clear_has_internal_commit_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.EndTransactionRequest.internal_commit_trigger)
}

// -------------------------------------------------------------------

// EndTransactionResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool EndTransactionResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndTransactionResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndTransactionResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndTransactionResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& EndTransactionResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* EndTransactionResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.EndTransactionResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* EndTransactionResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void EndTransactionResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.EndTransactionResponse.kvheader)
}

// optional int64 commit_wait = 2;
inline bool EndTransactionResponse::has_commit_wait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndTransactionResponse::set_has_commit_wait() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndTransactionResponse::clear_has_commit_wait() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndTransactionResponse::clear_commit_wait() {
  commit_wait_ = GOOGLE_LONGLONG(0);
  clear_has_commit_wait();
}
inline ::google::protobuf::int64 EndTransactionResponse::commit_wait() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionResponse.commit_wait)
  return commit_wait_;
}
inline void EndTransactionResponse::set_commit_wait(::google::protobuf::int64 value) {
  set_has_commit_wait();
  commit_wait_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.EndTransactionResponse.commit_wait)
}

// repeated bytes resolved = 3;
inline int EndTransactionResponse::resolved_size() const {
  return resolved_.size();
}
inline void EndTransactionResponse::clear_resolved() {
  resolved_.Clear();
}
inline const ::std::string& EndTransactionResponse::resolved(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.EndTransactionResponse.resolved)
  return resolved_.Get(index);
}
inline ::std::string* EndTransactionResponse::mutable_resolved(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.EndTransactionResponse.resolved)
  return resolved_.Mutable(index);
}
inline void EndTransactionResponse::set_resolved(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.EndTransactionResponse.resolved)
  resolved_.Mutable(index)->assign(value);
}
inline void EndTransactionResponse::set_resolved(int index, const char* value) {
  resolved_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.EndTransactionResponse.resolved)
}
inline void EndTransactionResponse::set_resolved(int index, const void* value, size_t size) {
  resolved_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.EndTransactionResponse.resolved)
}
inline ::std::string* EndTransactionResponse::add_resolved() {
  return resolved_.Add();
}
inline void EndTransactionResponse::add_resolved(const ::std::string& value) {
  resolved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.EndTransactionResponse.resolved)
}
inline void EndTransactionResponse::add_resolved(const char* value) {
  resolved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.EndTransactionResponse.resolved)
}
inline void EndTransactionResponse::add_resolved(const void* value, size_t size) {
  resolved_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.EndTransactionResponse.resolved)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EndTransactionResponse::resolved() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.EndTransactionResponse.resolved)
  return resolved_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EndTransactionResponse::mutable_resolved() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.EndTransactionResponse.resolved)
  return &resolved_;
}

// -------------------------------------------------------------------

// RequestUnion

// optional .cockroach.proto.GetRequest get = 2;
inline bool RequestUnion::has_get() const {
  return value_case() == kGet;
}
inline void RequestUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void RequestUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::GetRequest& RequestUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetRequest::default_instance();
}
inline ::cockroach::proto::GetRequest* RequestUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.get)
  return value_.get_;
}
inline ::cockroach::proto::GetRequest* RequestUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetRequest* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_get(::cockroach::proto::GetRequest* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.get)
}

// optional .cockroach.proto.PutRequest put = 3;
inline bool RequestUnion::has_put() const {
  return value_case() == kPut;
}
inline void RequestUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void RequestUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::PutRequest& RequestUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutRequest::default_instance();
}
inline ::cockroach::proto::PutRequest* RequestUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.put)
  return value_.put_;
}
inline ::cockroach::proto::PutRequest* RequestUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutRequest* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_put(::cockroach::proto::PutRequest* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.put)
}

// optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
inline bool RequestUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
inline void RequestUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
inline void RequestUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ConditionalPutRequest& RequestUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutRequest::default_instance();
}
inline ::cockroach::proto::ConditionalPutRequest* RequestUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.conditional_put)
  return value_.conditional_put_;
}
inline ::cockroach::proto::ConditionalPutRequest* RequestUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutRequest* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutRequest* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.conditional_put)
}

// optional .cockroach.proto.IncrementRequest increment = 5;
inline bool RequestUnion::has_increment() const {
  return value_case() == kIncrement;
}
inline void RequestUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
inline void RequestUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::IncrementRequest& RequestUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementRequest::default_instance();
}
inline ::cockroach::proto::IncrementRequest* RequestUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.increment)
  return value_.increment_;
}
inline ::cockroach::proto::IncrementRequest* RequestUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementRequest* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_increment(::cockroach::proto::IncrementRequest* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.increment)
}

// optional .cockroach.proto.DeleteRequest delete = 6;
inline bool RequestUnion::has_delete_() const {
  return value_case() == kDelete;
}
inline void RequestUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void RequestUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
inline const ::cockroach::proto::DeleteRequest& RequestUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteRequest::default_instance();
}
inline ::cockroach::proto::DeleteRequest* RequestUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.delete)
  return value_.delete__;
}
inline ::cockroach::proto::DeleteRequest* RequestUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteRequest* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_delete_(::cockroach::proto::DeleteRequest* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.delete)
}

// optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
inline bool RequestUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
inline void RequestUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void RequestUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::DeleteRangeRequest& RequestUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeRequest::default_instance();
}
inline ::cockroach::proto::DeleteRangeRequest* RequestUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.delete_range)
  return value_.delete_range_;
}
inline ::cockroach::proto::DeleteRangeRequest* RequestUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeRequest* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeRequest* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.delete_range)
}

// optional .cockroach.proto.ScanRequest scan = 8;
inline bool RequestUnion::has_scan() const {
  return value_case() == kScan;
}
inline void RequestUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
inline void RequestUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ScanRequest& RequestUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanRequest::default_instance();
}
inline ::cockroach::proto::ScanRequest* RequestUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.scan)
  return value_.scan_;
}
inline ::cockroach::proto::ScanRequest* RequestUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanRequest* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_scan(::cockroach::proto::ScanRequest* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.scan)
}

// optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
inline bool RequestUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
inline void RequestUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
inline void RequestUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::EndTransactionRequest& RequestUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RequestUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionRequest::default_instance();
}
inline ::cockroach::proto::EndTransactionRequest* RequestUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RequestUnion.end_transaction)
  return value_.end_transaction_;
}
inline ::cockroach::proto::EndTransactionRequest* RequestUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionRequest* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void RequestUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionRequest* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RequestUnion.end_transaction)
}

inline bool RequestUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void RequestUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline RequestUnion::ValueCase RequestUnion::value_case() const {
  return RequestUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseUnion

// optional .cockroach.proto.GetResponse get = 2;
inline bool ResponseUnion::has_get() const {
  return value_case() == kGet;
}
inline void ResponseUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void ResponseUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::GetResponse& ResponseUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetResponse::default_instance();
}
inline ::cockroach::proto::GetResponse* ResponseUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.get)
  return value_.get_;
}
inline ::cockroach::proto::GetResponse* ResponseUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetResponse* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_get(::cockroach::proto::GetResponse* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.get)
}

// optional .cockroach.proto.PutResponse put = 3;
inline bool ResponseUnion::has_put() const {
  return value_case() == kPut;
}
inline void ResponseUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void ResponseUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::PutResponse& ResponseUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutResponse::default_instance();
}
inline ::cockroach::proto::PutResponse* ResponseUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.put)
  return value_.put_;
}
inline ::cockroach::proto::PutResponse* ResponseUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutResponse* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_put(::cockroach::proto::PutResponse* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.put)
}

// optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
inline bool ResponseUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
inline void ResponseUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
inline void ResponseUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ConditionalPutResponse& ResponseUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutResponse::default_instance();
}
inline ::cockroach::proto::ConditionalPutResponse* ResponseUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.conditional_put)
  return value_.conditional_put_;
}
inline ::cockroach::proto::ConditionalPutResponse* ResponseUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutResponse* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutResponse* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.conditional_put)
}

// optional .cockroach.proto.IncrementResponse increment = 5;
inline bool ResponseUnion::has_increment() const {
  return value_case() == kIncrement;
}
inline void ResponseUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
inline void ResponseUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::IncrementResponse& ResponseUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementResponse::default_instance();
}
inline ::cockroach::proto::IncrementResponse* ResponseUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.increment)
  return value_.increment_;
}
inline ::cockroach::proto::IncrementResponse* ResponseUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementResponse* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_increment(::cockroach::proto::IncrementResponse* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.increment)
}

// optional .cockroach.proto.DeleteResponse delete = 6;
inline bool ResponseUnion::has_delete_() const {
  return value_case() == kDelete;
}
inline void ResponseUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void ResponseUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
inline const ::cockroach::proto::DeleteResponse& ResponseUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteResponse::default_instance();
}
inline ::cockroach::proto::DeleteResponse* ResponseUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.delete)
  return value_.delete__;
}
inline ::cockroach::proto::DeleteResponse* ResponseUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteResponse* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_delete_(::cockroach::proto::DeleteResponse* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.delete)
}

// optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
inline bool ResponseUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
inline void ResponseUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
inline void ResponseUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::DeleteRangeResponse& ResponseUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeResponse::default_instance();
}
inline ::cockroach::proto::DeleteRangeResponse* ResponseUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.delete_range)
  return value_.delete_range_;
}
inline ::cockroach::proto::DeleteRangeResponse* ResponseUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeResponse* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeResponse* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.delete_range)
}

// optional .cockroach.proto.ScanResponse scan = 8;
inline bool ResponseUnion::has_scan() const {
  return value_case() == kScan;
}
inline void ResponseUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
inline void ResponseUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ScanResponse& ResponseUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanResponse::default_instance();
}
inline ::cockroach::proto::ScanResponse* ResponseUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.scan)
  return value_.scan_;
}
inline ::cockroach::proto::ScanResponse* ResponseUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanResponse* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_scan(::cockroach::proto::ScanResponse* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.scan)
}

// optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
inline bool ResponseUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
inline void ResponseUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
inline void ResponseUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::EndTransactionResponse& ResponseUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ResponseUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionResponse::default_instance();
}
inline ::cockroach::proto::EndTransactionResponse* ResponseUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ResponseUnion.end_transaction)
  return value_.end_transaction_;
}
inline ::cockroach::proto::EndTransactionResponse* ResponseUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionResponse* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ResponseUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionResponse* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ResponseUnion.end_transaction)
}

inline bool ResponseUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ResponseUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ResponseUnion::ValueCase ResponseUnion::value_case() const {
  return ResponseUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatchRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool BatchRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& BatchRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.BatchRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* BatchRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.BatchRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* BatchRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void BatchRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.BatchRequest.kvheader)
}

// repeated .cockroach.proto.RequestUnion requests = 2;
inline int BatchRequest::requests_size() const {
  return requests_.size();
}
inline void BatchRequest::clear_requests() {
  requests_.Clear();
}
inline const ::cockroach::proto::RequestUnion& BatchRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.BatchRequest.requests)
  return requests_.Get(index);
}
inline ::cockroach::proto::RequestUnion* BatchRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.BatchRequest.requests)
  return requests_.Mutable(index);
}
inline ::cockroach::proto::RequestUnion* BatchRequest::add_requests() {
  // @@protoc_insertion_point(field_add:cockroach.proto.BatchRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RequestUnion >&
BatchRequest::requests() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.BatchRequest.requests)
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RequestUnion >*
BatchRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.BatchRequest.requests)
  return &requests_;
}

// -------------------------------------------------------------------

// BatchResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool BatchResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& BatchResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.BatchResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* BatchResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.BatchResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* BatchResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void BatchResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.BatchResponse.kvheader)
}

// repeated .cockroach.proto.ResponseUnion responses = 2;
inline int BatchResponse::responses_size() const {
  return responses_.size();
}
inline void BatchResponse::clear_responses() {
  responses_.Clear();
}
inline const ::cockroach::proto::ResponseUnion& BatchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.BatchResponse.responses)
  return responses_.Get(index);
}
inline ::cockroach::proto::ResponseUnion* BatchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.BatchResponse.responses)
  return responses_.Mutable(index);
}
inline ::cockroach::proto::ResponseUnion* BatchResponse::add_responses() {
  // @@protoc_insertion_point(field_add:cockroach.proto.BatchResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::ResponseUnion >&
BatchResponse::responses() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.BatchResponse.responses)
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::ResponseUnion >*
BatchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.BatchResponse.responses)
  return &responses_;
}

// -------------------------------------------------------------------

// AdminSplitRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool AdminSplitRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminSplitRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminSplitRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminSplitRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& AdminSplitRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AdminSplitRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* AdminSplitRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AdminSplitRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* AdminSplitRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void AdminSplitRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AdminSplitRequest.kvheader)
}

// optional bytes split_key = 2;
inline bool AdminSplitRequest::has_split_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminSplitRequest::set_has_split_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminSplitRequest::clear_has_split_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminSplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_split_key();
}
inline const ::std::string& AdminSplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AdminSplitRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminSplitRequest::set_split_key(const ::std::string& value) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.AdminSplitRequest.split_key)
}
inline void AdminSplitRequest::set_split_key(const char* value) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.AdminSplitRequest.split_key)
}
inline void AdminSplitRequest::set_split_key(const void* value, size_t size) {
  set_has_split_key();
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.AdminSplitRequest.split_key)
}
inline ::std::string* AdminSplitRequest::mutable_split_key() {
  set_has_split_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AdminSplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdminSplitRequest::release_split_key() {
  clear_has_split_key();
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdminSplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    set_has_split_key();
  } else {
    clear_has_split_key();
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AdminSplitRequest.split_key)
}

// -------------------------------------------------------------------

// AdminSplitResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool AdminSplitResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminSplitResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminSplitResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminSplitResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& AdminSplitResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AdminSplitResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* AdminSplitResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AdminSplitResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* AdminSplitResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void AdminSplitResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AdminSplitResponse.kvheader)
}

// -------------------------------------------------------------------

// AdminMergeRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
inline bool AdminMergeRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminMergeRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminMergeRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminMergeRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVRequestHeader& AdminMergeRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AdminMergeRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* AdminMergeRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AdminMergeRequest.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVRequestHeader* AdminMergeRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void AdminMergeRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AdminMergeRequest.kvheader)
}

// -------------------------------------------------------------------

// AdminMergeResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
inline bool AdminMergeResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminMergeResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminMergeResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminMergeResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
inline const ::cockroach::proto::KVResponseHeader& AdminMergeResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AdminMergeResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* AdminMergeResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AdminMergeResponse.kvheader)
  return kvheader_;
}
inline ::cockroach::proto::KVResponseHeader* AdminMergeResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
inline void AdminMergeResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AdminMergeResponse.kvheader)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::proto::ReadConsistencyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::proto::ReadConsistencyType>() {
  return ::cockroach::proto::ReadConsistencyType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2fapi_2eproto__INCLUDED
