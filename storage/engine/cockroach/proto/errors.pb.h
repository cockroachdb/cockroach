// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/errors.proto

#ifndef PROTOBUF_cockroach_2fproto_2ferrors_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2ferrors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/config.pb.h"
#include "cockroach/proto/data.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

class NotLeaderError;
class RangeNotFoundError;
class RangeKeyMismatchError;
class ReadWithinUncertaintyIntervalError;
class TransactionAbortedError;
class TransactionPushError;
class TransactionRetryError;
class TransactionStatusError;
class WriteIntentError;
class WriteTooOldError;
class ReadTooOldError;
class OpRequiresTxnError;
class ConditionFailedError;
class ErrorDetail;
class Error;

enum TransactionRestart {
  ABORT = 0,
  BACKOFF = 1,
  IMMEDIATE = 2
};
bool TransactionRestart_IsValid(int value);
const TransactionRestart TransactionRestart_MIN = ABORT;
const TransactionRestart TransactionRestart_MAX = IMMEDIATE;
const int TransactionRestart_ARRAYSIZE = TransactionRestart_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionRestart_descriptor();
inline const ::std::string& TransactionRestart_Name(TransactionRestart value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionRestart_descriptor(), value);
}
inline bool TransactionRestart_Parse(
    const ::std::string& name, TransactionRestart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionRestart>(
    TransactionRestart_descriptor(), name, value);
}
// ===================================================================

class NotLeaderError : public ::google::protobuf::Message {
 public:
  NotLeaderError();
  virtual ~NotLeaderError();

  NotLeaderError(const NotLeaderError& from);

  inline NotLeaderError& operator=(const NotLeaderError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotLeaderError& default_instance();

  void Swap(NotLeaderError* other);

  // implements Message ----------------------------------------------

  NotLeaderError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotLeaderError& from);
  void MergeFrom(const NotLeaderError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Replica leader = 1;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 1;
  inline const ::cockroach::proto::Replica& leader() const;
  inline ::cockroach::proto::Replica* mutable_leader();
  inline ::cockroach::proto::Replica* release_leader();
  inline void set_allocated_leader(::cockroach::proto::Replica* leader);

  // @@protoc_insertion_point(class_scope:cockroach.proto.NotLeaderError)
 private:
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Replica* leader_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static NotLeaderError* default_instance_;
};
// -------------------------------------------------------------------

class RangeNotFoundError : public ::google::protobuf::Message {
 public:
  RangeNotFoundError();
  virtual ~RangeNotFoundError();

  RangeNotFoundError(const RangeNotFoundError& from);

  inline RangeNotFoundError& operator=(const RangeNotFoundError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeNotFoundError& default_instance();

  void Swap(RangeNotFoundError* other);

  // implements Message ----------------------------------------------

  RangeNotFoundError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeNotFoundError& from);
  void MergeFrom(const RangeNotFoundError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 raft_id = 1;
  inline bool has_raft_id() const;
  inline void clear_raft_id();
  static const int kRaftIdFieldNumber = 1;
  inline ::google::protobuf::int64 raft_id() const;
  inline void set_raft_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RangeNotFoundError)
 private:
  inline void set_has_raft_id();
  inline void clear_has_raft_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 raft_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static RangeNotFoundError* default_instance_;
};
// -------------------------------------------------------------------

class RangeKeyMismatchError : public ::google::protobuf::Message {
 public:
  RangeKeyMismatchError();
  virtual ~RangeKeyMismatchError();

  RangeKeyMismatchError(const RangeKeyMismatchError& from);

  inline RangeKeyMismatchError& operator=(const RangeKeyMismatchError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeKeyMismatchError& default_instance();

  void Swap(RangeKeyMismatchError* other);

  // implements Message ----------------------------------------------

  RangeKeyMismatchError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeKeyMismatchError& from);
  void MergeFrom(const RangeKeyMismatchError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes request_start_key = 1;
  inline bool has_request_start_key() const;
  inline void clear_request_start_key();
  static const int kRequestStartKeyFieldNumber = 1;
  inline const ::std::string& request_start_key() const;
  inline void set_request_start_key(const ::std::string& value);
  inline void set_request_start_key(const char* value);
  inline void set_request_start_key(const void* value, size_t size);
  inline ::std::string* mutable_request_start_key();
  inline ::std::string* release_request_start_key();
  inline void set_allocated_request_start_key(::std::string* request_start_key);

  // optional bytes request_end_key = 2;
  inline bool has_request_end_key() const;
  inline void clear_request_end_key();
  static const int kRequestEndKeyFieldNumber = 2;
  inline const ::std::string& request_end_key() const;
  inline void set_request_end_key(const ::std::string& value);
  inline void set_request_end_key(const char* value);
  inline void set_request_end_key(const void* value, size_t size);
  inline ::std::string* mutable_request_end_key();
  inline ::std::string* release_request_end_key();
  inline void set_allocated_request_end_key(::std::string* request_end_key);

  // optional .cockroach.proto.RangeDescriptor range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline const ::cockroach::proto::RangeDescriptor& range() const;
  inline ::cockroach::proto::RangeDescriptor* mutable_range();
  inline ::cockroach::proto::RangeDescriptor* release_range();
  inline void set_allocated_range(::cockroach::proto::RangeDescriptor* range);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RangeKeyMismatchError)
 private:
  inline void set_has_request_start_key();
  inline void clear_has_request_start_key();
  inline void set_has_request_end_key();
  inline void clear_has_request_end_key();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* request_start_key_;
  ::std::string* request_end_key_;
  ::cockroach::proto::RangeDescriptor* range_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static RangeKeyMismatchError* default_instance_;
};
// -------------------------------------------------------------------

class ReadWithinUncertaintyIntervalError : public ::google::protobuf::Message {
 public:
  ReadWithinUncertaintyIntervalError();
  virtual ~ReadWithinUncertaintyIntervalError();

  ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from);

  inline ReadWithinUncertaintyIntervalError& operator=(const ReadWithinUncertaintyIntervalError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWithinUncertaintyIntervalError& default_instance();

  void Swap(ReadWithinUncertaintyIntervalError* other);

  // implements Message ----------------------------------------------

  ReadWithinUncertaintyIntervalError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWithinUncertaintyIntervalError& from);
  void MergeFrom(const ReadWithinUncertaintyIntervalError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional .cockroach.proto.Timestamp existing_timestamp = 2;
  inline bool has_existing_timestamp() const;
  inline void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  inline const ::cockroach::proto::Timestamp& existing_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_existing_timestamp();
  inline ::cockroach::proto::Timestamp* release_existing_timestamp();
  inline void set_allocated_existing_timestamp(::cockroach::proto::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ReadWithinUncertaintyIntervalError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::cockroach::proto::Timestamp* existing_timestamp_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ReadWithinUncertaintyIntervalError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionAbortedError : public ::google::protobuf::Message {
 public:
  TransactionAbortedError();
  virtual ~TransactionAbortedError();

  TransactionAbortedError(const TransactionAbortedError& from);

  inline TransactionAbortedError& operator=(const TransactionAbortedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionAbortedError& default_instance();

  void Swap(TransactionAbortedError* other);

  // implements Message ----------------------------------------------

  TransactionAbortedError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionAbortedError& from);
  void MergeFrom(const TransactionAbortedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TransactionAbortedError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionAbortedError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionPushError : public ::google::protobuf::Message {
 public:
  TransactionPushError();
  virtual ~TransactionPushError();

  TransactionPushError(const TransactionPushError& from);

  inline TransactionPushError& operator=(const TransactionPushError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionPushError& default_instance();

  void Swap(TransactionPushError* other);

  // implements Message ----------------------------------------------

  TransactionPushError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionPushError& from);
  void MergeFrom(const TransactionPushError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  inline bool has_pushee_txn() const;
  inline void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 2;
  inline const ::cockroach::proto::Transaction& pushee_txn() const;
  inline ::cockroach::proto::Transaction* mutable_pushee_txn();
  inline ::cockroach::proto::Transaction* release_pushee_txn();
  inline void set_allocated_pushee_txn(::cockroach::proto::Transaction* pushee_txn);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TransactionPushError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_pushee_txn();
  inline void clear_has_pushee_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  ::cockroach::proto::Transaction* pushee_txn_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionPushError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionRetryError : public ::google::protobuf::Message {
 public:
  TransactionRetryError();
  virtual ~TransactionRetryError();

  TransactionRetryError(const TransactionRetryError& from);

  inline TransactionRetryError& operator=(const TransactionRetryError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionRetryError& default_instance();

  void Swap(TransactionRetryError* other);

  // implements Message ----------------------------------------------

  TransactionRetryError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionRetryError& from);
  void MergeFrom(const TransactionRetryError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TransactionRetryError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionRetryError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionStatusError : public ::google::protobuf::Message {
 public:
  TransactionStatusError();
  virtual ~TransactionStatusError();

  TransactionStatusError(const TransactionStatusError& from);

  inline TransactionStatusError& operator=(const TransactionStatusError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionStatusError& default_instance();

  void Swap(TransactionStatusError* other);

  // implements Message ----------------------------------------------

  TransactionStatusError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionStatusError& from);
  void MergeFrom(const TransactionStatusError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TransactionStatusError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  ::std::string* msg_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionStatusError* default_instance_;
};
// -------------------------------------------------------------------

class WriteIntentError : public ::google::protobuf::Message {
 public:
  WriteIntentError();
  virtual ~WriteIntentError();

  WriteIntentError(const WriteIntentError& from);

  inline WriteIntentError& operator=(const WriteIntentError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteIntentError& default_instance();

  void Swap(WriteIntentError* other);

  // implements Message ----------------------------------------------

  WriteIntentError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteIntentError& from);
  void MergeFrom(const WriteIntentError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .cockroach.proto.Transaction txn = 2;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 2;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional bool resolved = 3;
  inline bool has_resolved() const;
  inline void clear_resolved();
  static const int kResolvedFieldNumber = 3;
  inline bool resolved() const;
  inline void set_resolved(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.WriteIntentError)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_resolved();
  inline void clear_has_resolved();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::cockroach::proto::Transaction* txn_;
  bool resolved_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static WriteIntentError* default_instance_;
};
// -------------------------------------------------------------------

class WriteTooOldError : public ::google::protobuf::Message {
 public:
  WriteTooOldError();
  virtual ~WriteTooOldError();

  WriteTooOldError(const WriteTooOldError& from);

  inline WriteTooOldError& operator=(const WriteTooOldError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteTooOldError& default_instance();

  void Swap(WriteTooOldError* other);

  // implements Message ----------------------------------------------

  WriteTooOldError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteTooOldError& from);
  void MergeFrom(const WriteTooOldError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional .cockroach.proto.Timestamp existing_timestamp = 2;
  inline bool has_existing_timestamp() const;
  inline void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  inline const ::cockroach::proto::Timestamp& existing_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_existing_timestamp();
  inline ::cockroach::proto::Timestamp* release_existing_timestamp();
  inline void set_allocated_existing_timestamp(::cockroach::proto::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.proto.WriteTooOldError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::cockroach::proto::Timestamp* existing_timestamp_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static WriteTooOldError* default_instance_;
};
// -------------------------------------------------------------------

class ReadTooOldError : public ::google::protobuf::Message {
 public:
  ReadTooOldError();
  virtual ~ReadTooOldError();

  ReadTooOldError(const ReadTooOldError& from);

  inline ReadTooOldError& operator=(const ReadTooOldError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadTooOldError& default_instance();

  void Swap(ReadTooOldError* other);

  // implements Message ----------------------------------------------

  ReadTooOldError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadTooOldError& from);
  void MergeFrom(const ReadTooOldError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Timestamp timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ReadTooOldError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Timestamp* timestamp_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ReadTooOldError* default_instance_;
};
// -------------------------------------------------------------------

class OpRequiresTxnError : public ::google::protobuf::Message {
 public:
  OpRequiresTxnError();
  virtual ~OpRequiresTxnError();

  OpRequiresTxnError(const OpRequiresTxnError& from);

  inline OpRequiresTxnError& operator=(const OpRequiresTxnError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpRequiresTxnError& default_instance();

  void Swap(OpRequiresTxnError* other);

  // implements Message ----------------------------------------------

  OpRequiresTxnError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpRequiresTxnError& from);
  void MergeFrom(const OpRequiresTxnError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.proto.OpRequiresTxnError)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static OpRequiresTxnError* default_instance_;
};
// -------------------------------------------------------------------

class ConditionFailedError : public ::google::protobuf::Message {
 public:
  ConditionFailedError();
  virtual ~ConditionFailedError();

  ConditionFailedError(const ConditionFailedError& from);

  inline ConditionFailedError& operator=(const ConditionFailedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionFailedError& default_instance();

  void Swap(ConditionFailedError* other);

  // implements Message ----------------------------------------------

  ConditionFailedError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionFailedError& from);
  void MergeFrom(const ConditionFailedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Value actual_value = 1;
  inline bool has_actual_value() const;
  inline void clear_actual_value();
  static const int kActualValueFieldNumber = 1;
  inline const ::cockroach::proto::Value& actual_value() const;
  inline ::cockroach::proto::Value* mutable_actual_value();
  inline ::cockroach::proto::Value* release_actual_value();
  inline void set_allocated_actual_value(::cockroach::proto::Value* actual_value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.ConditionFailedError)
 private:
  inline void set_has_actual_value();
  inline void clear_has_actual_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Value* actual_value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ConditionFailedError* default_instance_;
};
// -------------------------------------------------------------------

class ErrorDetail : public ::google::protobuf::Message {
 public:
  ErrorDetail();
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorDetail& default_instance();

  enum ValueCase {
    kNotLeader = 1,
    kRangeNotFound = 2,
    kRangeKeyMismatch = 3,
    kReadWithinUncertaintyInterval = 4,
    kTransactionAborted = 5,
    kTransactionPush = 6,
    kTransactionRetry = 7,
    kTransactionStatus = 8,
    kWriteIntent = 9,
    kWriteTooOld = 10,
    kOpRequiresTxn = 11,
    kConditionFailed = 12,
    VALUE_NOT_SET = 0,
  };

  void Swap(ErrorDetail* other);

  // implements Message ----------------------------------------------

  ErrorDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.NotLeaderError not_leader = 1;
  inline bool has_not_leader() const;
  inline void clear_not_leader();
  static const int kNotLeaderFieldNumber = 1;
  inline const ::cockroach::proto::NotLeaderError& not_leader() const;
  inline ::cockroach::proto::NotLeaderError* mutable_not_leader();
  inline ::cockroach::proto::NotLeaderError* release_not_leader();
  inline void set_allocated_not_leader(::cockroach::proto::NotLeaderError* not_leader);

  // optional .cockroach.proto.RangeNotFoundError range_not_found = 2;
  inline bool has_range_not_found() const;
  inline void clear_range_not_found();
  static const int kRangeNotFoundFieldNumber = 2;
  inline const ::cockroach::proto::RangeNotFoundError& range_not_found() const;
  inline ::cockroach::proto::RangeNotFoundError* mutable_range_not_found();
  inline ::cockroach::proto::RangeNotFoundError* release_range_not_found();
  inline void set_allocated_range_not_found(::cockroach::proto::RangeNotFoundError* range_not_found);

  // optional .cockroach.proto.RangeKeyMismatchError range_key_mismatch = 3;
  inline bool has_range_key_mismatch() const;
  inline void clear_range_key_mismatch();
  static const int kRangeKeyMismatchFieldNumber = 3;
  inline const ::cockroach::proto::RangeKeyMismatchError& range_key_mismatch() const;
  inline ::cockroach::proto::RangeKeyMismatchError* mutable_range_key_mismatch();
  inline ::cockroach::proto::RangeKeyMismatchError* release_range_key_mismatch();
  inline void set_allocated_range_key_mismatch(::cockroach::proto::RangeKeyMismatchError* range_key_mismatch);

  // optional .cockroach.proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  inline bool has_read_within_uncertainty_interval() const;
  inline void clear_read_within_uncertainty_interval();
  static const int kReadWithinUncertaintyIntervalFieldNumber = 4;
  inline const ::cockroach::proto::ReadWithinUncertaintyIntervalError& read_within_uncertainty_interval() const;
  inline ::cockroach::proto::ReadWithinUncertaintyIntervalError* mutable_read_within_uncertainty_interval();
  inline ::cockroach::proto::ReadWithinUncertaintyIntervalError* release_read_within_uncertainty_interval();
  inline void set_allocated_read_within_uncertainty_interval(::cockroach::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval);

  // optional .cockroach.proto.TransactionAbortedError transaction_aborted = 5;
  inline bool has_transaction_aborted() const;
  inline void clear_transaction_aborted();
  static const int kTransactionAbortedFieldNumber = 5;
  inline const ::cockroach::proto::TransactionAbortedError& transaction_aborted() const;
  inline ::cockroach::proto::TransactionAbortedError* mutable_transaction_aborted();
  inline ::cockroach::proto::TransactionAbortedError* release_transaction_aborted();
  inline void set_allocated_transaction_aborted(::cockroach::proto::TransactionAbortedError* transaction_aborted);

  // optional .cockroach.proto.TransactionPushError transaction_push = 6;
  inline bool has_transaction_push() const;
  inline void clear_transaction_push();
  static const int kTransactionPushFieldNumber = 6;
  inline const ::cockroach::proto::TransactionPushError& transaction_push() const;
  inline ::cockroach::proto::TransactionPushError* mutable_transaction_push();
  inline ::cockroach::proto::TransactionPushError* release_transaction_push();
  inline void set_allocated_transaction_push(::cockroach::proto::TransactionPushError* transaction_push);

  // optional .cockroach.proto.TransactionRetryError transaction_retry = 7;
  inline bool has_transaction_retry() const;
  inline void clear_transaction_retry();
  static const int kTransactionRetryFieldNumber = 7;
  inline const ::cockroach::proto::TransactionRetryError& transaction_retry() const;
  inline ::cockroach::proto::TransactionRetryError* mutable_transaction_retry();
  inline ::cockroach::proto::TransactionRetryError* release_transaction_retry();
  inline void set_allocated_transaction_retry(::cockroach::proto::TransactionRetryError* transaction_retry);

  // optional .cockroach.proto.TransactionStatusError transaction_status = 8;
  inline bool has_transaction_status() const;
  inline void clear_transaction_status();
  static const int kTransactionStatusFieldNumber = 8;
  inline const ::cockroach::proto::TransactionStatusError& transaction_status() const;
  inline ::cockroach::proto::TransactionStatusError* mutable_transaction_status();
  inline ::cockroach::proto::TransactionStatusError* release_transaction_status();
  inline void set_allocated_transaction_status(::cockroach::proto::TransactionStatusError* transaction_status);

  // optional .cockroach.proto.WriteIntentError write_intent = 9;
  inline bool has_write_intent() const;
  inline void clear_write_intent();
  static const int kWriteIntentFieldNumber = 9;
  inline const ::cockroach::proto::WriteIntentError& write_intent() const;
  inline ::cockroach::proto::WriteIntentError* mutable_write_intent();
  inline ::cockroach::proto::WriteIntentError* release_write_intent();
  inline void set_allocated_write_intent(::cockroach::proto::WriteIntentError* write_intent);

  // optional .cockroach.proto.WriteTooOldError write_too_old = 10;
  inline bool has_write_too_old() const;
  inline void clear_write_too_old();
  static const int kWriteTooOldFieldNumber = 10;
  inline const ::cockroach::proto::WriteTooOldError& write_too_old() const;
  inline ::cockroach::proto::WriteTooOldError* mutable_write_too_old();
  inline ::cockroach::proto::WriteTooOldError* release_write_too_old();
  inline void set_allocated_write_too_old(::cockroach::proto::WriteTooOldError* write_too_old);

  // optional .cockroach.proto.OpRequiresTxnError op_requires_txn = 11;
  inline bool has_op_requires_txn() const;
  inline void clear_op_requires_txn();
  static const int kOpRequiresTxnFieldNumber = 11;
  inline const ::cockroach::proto::OpRequiresTxnError& op_requires_txn() const;
  inline ::cockroach::proto::OpRequiresTxnError* mutable_op_requires_txn();
  inline ::cockroach::proto::OpRequiresTxnError* release_op_requires_txn();
  inline void set_allocated_op_requires_txn(::cockroach::proto::OpRequiresTxnError* op_requires_txn);

  // optional .cockroach.proto.ConditionFailedError condition_failed = 12;
  inline bool has_condition_failed() const;
  inline void clear_condition_failed();
  static const int kConditionFailedFieldNumber = 12;
  inline const ::cockroach::proto::ConditionFailedError& condition_failed() const;
  inline ::cockroach::proto::ConditionFailedError* mutable_condition_failed();
  inline ::cockroach::proto::ConditionFailedError* release_condition_failed();
  inline void set_allocated_condition_failed(::cockroach::proto::ConditionFailedError* condition_failed);

  inline ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cockroach.proto.ErrorDetail)
 private:
  inline void set_has_not_leader();
  inline void set_has_range_not_found();
  inline void set_has_range_key_mismatch();
  inline void set_has_read_within_uncertainty_interval();
  inline void set_has_transaction_aborted();
  inline void set_has_transaction_push();
  inline void set_has_transaction_retry();
  inline void set_has_transaction_status();
  inline void set_has_write_intent();
  inline void set_has_write_too_old();
  inline void set_has_op_requires_txn();
  inline void set_has_condition_failed();

  inline bool has_value();
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ValueUnion {
    ::cockroach::proto::NotLeaderError* not_leader_;
    ::cockroach::proto::RangeNotFoundError* range_not_found_;
    ::cockroach::proto::RangeKeyMismatchError* range_key_mismatch_;
    ::cockroach::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval_;
    ::cockroach::proto::TransactionAbortedError* transaction_aborted_;
    ::cockroach::proto::TransactionPushError* transaction_push_;
    ::cockroach::proto::TransactionRetryError* transaction_retry_;
    ::cockroach::proto::TransactionStatusError* transaction_status_;
    ::cockroach::proto::WriteIntentError* write_intent_;
    ::cockroach::proto::WriteTooOldError* write_too_old_;
    ::cockroach::proto::OpRequiresTxnError* op_requires_txn_;
    ::cockroach::proto::ConditionFailedError* condition_failed_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ErrorDetail* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional bool retryable = 2;
  inline bool has_retryable() const;
  inline void clear_retryable();
  static const int kRetryableFieldNumber = 2;
  inline bool retryable() const;
  inline void set_retryable(bool value);

  // optional .cockroach.proto.TransactionRestart transaction_restart = 4;
  inline bool has_transaction_restart() const;
  inline void clear_transaction_restart();
  static const int kTransactionRestartFieldNumber = 4;
  inline ::cockroach::proto::TransactionRestart transaction_restart() const;
  inline void set_transaction_restart(::cockroach::proto::TransactionRestart value);

  // optional .cockroach.proto.ErrorDetail detail = 3;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 3;
  inline const ::cockroach::proto::ErrorDetail& detail() const;
  inline ::cockroach::proto::ErrorDetail* mutable_detail();
  inline ::cockroach::proto::ErrorDetail* release_detail();
  inline void set_allocated_detail(::cockroach::proto::ErrorDetail* detail);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Error)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retryable();
  inline void clear_has_retryable();
  inline void set_has_transaction_restart();
  inline void clear_has_transaction_restart();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* message_;
  bool retryable_;
  int transaction_restart_;
  ::cockroach::proto::ErrorDetail* detail_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

// NotLeaderError

// optional .cockroach.proto.Replica leader = 1;
inline bool NotLeaderError::has_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotLeaderError::set_has_leader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotLeaderError::clear_has_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotLeaderError::clear_leader() {
  if (leader_ != NULL) leader_->::cockroach::proto::Replica::Clear();
  clear_has_leader();
}
inline const ::cockroach::proto::Replica& NotLeaderError::leader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NotLeaderError.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::cockroach::proto::Replica* NotLeaderError::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) leader_ = new ::cockroach::proto::Replica;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.NotLeaderError.leader)
  return leader_;
}
inline ::cockroach::proto::Replica* NotLeaderError::release_leader() {
  clear_has_leader();
  ::cockroach::proto::Replica* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void NotLeaderError::set_allocated_leader(::cockroach::proto::Replica* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.NotLeaderError.leader)
}

// -------------------------------------------------------------------

// RangeNotFoundError

// optional int64 raft_id = 1;
inline bool RangeNotFoundError::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeNotFoundError::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeNotFoundError::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeNotFoundError::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
inline ::google::protobuf::int64 RangeNotFoundError::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeNotFoundError.raft_id)
  return raft_id_;
}
inline void RangeNotFoundError::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeNotFoundError.raft_id)
}

// -------------------------------------------------------------------

// RangeKeyMismatchError

// optional bytes request_start_key = 1;
inline bool RangeKeyMismatchError::has_request_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeKeyMismatchError::clear_has_request_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeKeyMismatchError::clear_request_start_key() {
  if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_->clear();
  }
  clear_has_request_start_key();
}
inline const ::std::string& RangeKeyMismatchError::request_start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeKeyMismatchError.request_start_key)
  return *request_start_key_;
}
inline void RangeKeyMismatchError::set_request_start_key(const ::std::string& value) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const char* value) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const void* value, size_t size) {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  request_start_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeKeyMismatchError.request_start_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_start_key() {
  set_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_start_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeKeyMismatchError.request_start_key)
  return request_start_key_;
}
inline ::std::string* RangeKeyMismatchError::release_request_start_key() {
  clear_has_request_start_key();
  if (request_start_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_start_key_;
    request_start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeKeyMismatchError::set_allocated_request_start_key(::std::string* request_start_key) {
  if (request_start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_start_key_;
  }
  if (request_start_key) {
    set_has_request_start_key();
    request_start_key_ = request_start_key;
  } else {
    clear_has_request_start_key();
    request_start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeKeyMismatchError.request_start_key)
}

// optional bytes request_end_key = 2;
inline bool RangeKeyMismatchError::has_request_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeKeyMismatchError::clear_has_request_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeKeyMismatchError::clear_request_end_key() {
  if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_->clear();
  }
  clear_has_request_end_key();
}
inline const ::std::string& RangeKeyMismatchError::request_end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeKeyMismatchError.request_end_key)
  return *request_end_key_;
}
inline void RangeKeyMismatchError::set_request_end_key(const ::std::string& value) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const char* value) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const void* value, size_t size) {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  request_end_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeKeyMismatchError.request_end_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_end_key() {
  set_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_end_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeKeyMismatchError.request_end_key)
  return request_end_key_;
}
inline ::std::string* RangeKeyMismatchError::release_request_end_key() {
  clear_has_request_end_key();
  if (request_end_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_end_key_;
    request_end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RangeKeyMismatchError::set_allocated_request_end_key(::std::string* request_end_key) {
  if (request_end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_end_key_;
  }
  if (request_end_key) {
    set_has_request_end_key();
    request_end_key_ = request_end_key;
  } else {
    clear_has_request_end_key();
    request_end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeKeyMismatchError.request_end_key)
}

// optional .cockroach.proto.RangeDescriptor range = 3;
inline bool RangeKeyMismatchError::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeKeyMismatchError::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeKeyMismatchError::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeKeyMismatchError::clear_range() {
  if (range_ != NULL) range_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_range();
}
inline const ::cockroach::proto::RangeDescriptor& RangeKeyMismatchError::range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeKeyMismatchError.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::cockroach::proto::RangeDescriptor* RangeKeyMismatchError::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::cockroach::proto::RangeDescriptor;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeKeyMismatchError.range)
  return range_;
}
inline ::cockroach::proto::RangeDescriptor* RangeKeyMismatchError::release_range() {
  clear_has_range();
  ::cockroach::proto::RangeDescriptor* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RangeKeyMismatchError::set_allocated_range(::cockroach::proto::RangeDescriptor* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeKeyMismatchError.range)
}

// -------------------------------------------------------------------

// ReadWithinUncertaintyIntervalError

// optional .cockroach.proto.Timestamp timestamp = 1;
inline bool ReadWithinUncertaintyIntervalError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& ReadWithinUncertaintyIntervalError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadWithinUncertaintyIntervalError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadWithinUncertaintyIntervalError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWithinUncertaintyIntervalError.timestamp)
}

// optional .cockroach.proto.Timestamp existing_timestamp = 2;
inline bool ReadWithinUncertaintyIntervalError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::cockroach::proto::Timestamp& ReadWithinUncertaintyIntervalError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadWithinUncertaintyIntervalError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) existing_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadWithinUncertaintyIntervalError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::cockroach::proto::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_existing_timestamp(::cockroach::proto::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWithinUncertaintyIntervalError.existing_timestamp)
}

// -------------------------------------------------------------------

// TransactionAbortedError

// optional .cockroach.proto.Transaction txn = 1;
inline bool TransactionAbortedError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionAbortedError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionAbortedError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionAbortedError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& TransactionAbortedError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionAbortedError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* TransactionAbortedError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionAbortedError.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* TransactionAbortedError::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionAbortedError::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionAbortedError.txn)
}

// -------------------------------------------------------------------

// TransactionPushError

// optional .cockroach.proto.Transaction txn = 1;
inline bool TransactionPushError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionPushError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionPushError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionPushError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& TransactionPushError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionPushError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* TransactionPushError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionPushError.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* TransactionPushError::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionPushError.txn)
}

// optional .cockroach.proto.Transaction pushee_txn = 2;
inline bool TransactionPushError::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionPushError::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionPushError::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
  clear_has_pushee_txn();
}
inline const ::cockroach::proto::Transaction& TransactionPushError::pushee_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionPushError.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
inline ::cockroach::proto::Transaction* TransactionPushError::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) pushee_txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionPushError.pushee_txn)
  return pushee_txn_;
}
inline ::cockroach::proto::Transaction* TransactionPushError::release_pushee_txn() {
  clear_has_pushee_txn();
  ::cockroach::proto::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_pushee_txn(::cockroach::proto::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionPushError.pushee_txn)
}

// -------------------------------------------------------------------

// TransactionRetryError

// optional .cockroach.proto.Transaction txn = 1;
inline bool TransactionRetryError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionRetryError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionRetryError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionRetryError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& TransactionRetryError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionRetryError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* TransactionRetryError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionRetryError.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* TransactionRetryError::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionRetryError::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionRetryError.txn)
}

// -------------------------------------------------------------------

// TransactionStatusError

// optional .cockroach.proto.Transaction txn = 1;
inline bool TransactionStatusError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& TransactionStatusError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionStatusError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* TransactionStatusError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionStatusError.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* TransactionStatusError::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionStatusError::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionStatusError.txn)
}

// optional string msg = 2;
inline bool TransactionStatusError::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStatusError::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionStatusError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionStatusError::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& TransactionStatusError::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TransactionStatusError.msg)
  return *msg_;
}
inline void TransactionStatusError::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TransactionStatusError.msg)
}
inline ::std::string* TransactionStatusError::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TransactionStatusError.msg)
  return msg_;
}
inline ::std::string* TransactionStatusError::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TransactionStatusError::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TransactionStatusError.msg)
}

// -------------------------------------------------------------------

// WriteIntentError

// optional bytes key = 1;
inline bool WriteIntentError::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteIntentError::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteIntentError::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteIntentError::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& WriteIntentError::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.WriteIntentError.key)
  return *key_;
}
inline void WriteIntentError::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.WriteIntentError.key)
}
inline void WriteIntentError::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.WriteIntentError.key)
}
inline void WriteIntentError::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.WriteIntentError.key)
}
inline ::std::string* WriteIntentError::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.WriteIntentError.key)
  return key_;
}
inline ::std::string* WriteIntentError::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WriteIntentError::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.WriteIntentError.key)
}

// optional .cockroach.proto.Transaction txn = 2;
inline bool WriteIntentError::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteIntentError::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteIntentError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteIntentError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& WriteIntentError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.WriteIntentError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* WriteIntentError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.WriteIntentError.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* WriteIntentError::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void WriteIntentError::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.WriteIntentError.txn)
}

// optional bool resolved = 3;
inline bool WriteIntentError::has_resolved() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteIntentError::set_has_resolved() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteIntentError::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteIntentError::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
inline bool WriteIntentError::resolved() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.WriteIntentError.resolved)
  return resolved_;
}
inline void WriteIntentError::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.WriteIntentError.resolved)
}

// -------------------------------------------------------------------

// WriteTooOldError

// optional .cockroach.proto.Timestamp timestamp = 1;
inline bool WriteTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& WriteTooOldError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.WriteTooOldError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* WriteTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.WriteTooOldError.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* WriteTooOldError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.WriteTooOldError.timestamp)
}

// optional .cockroach.proto.Timestamp existing_timestamp = 2;
inline bool WriteTooOldError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteTooOldError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteTooOldError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteTooOldError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::cockroach::proto::Timestamp& WriteTooOldError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.WriteTooOldError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::cockroach::proto::Timestamp* WriteTooOldError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) existing_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.WriteTooOldError.existing_timestamp)
  return existing_timestamp_;
}
inline ::cockroach::proto::Timestamp* WriteTooOldError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::cockroach::proto::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_existing_timestamp(::cockroach::proto::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.WriteTooOldError.existing_timestamp)
}

// -------------------------------------------------------------------

// ReadTooOldError

// optional .cockroach.proto.Timestamp timestamp = 1;
inline bool ReadTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& ReadTooOldError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadTooOldError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadTooOldError.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* ReadTooOldError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadTooOldError::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadTooOldError.timestamp)
}

// -------------------------------------------------------------------

// OpRequiresTxnError

// -------------------------------------------------------------------

// ConditionFailedError

// optional .cockroach.proto.Value actual_value = 1;
inline bool ConditionFailedError::has_actual_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionFailedError::set_has_actual_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionFailedError::clear_has_actual_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->::cockroach::proto::Value::Clear();
  clear_has_actual_value();
}
inline const ::cockroach::proto::Value& ConditionFailedError::actual_value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ConditionFailedError.actual_value)
  return actual_value_ != NULL ? *actual_value_ : *default_instance_->actual_value_;
}
inline ::cockroach::proto::Value* ConditionFailedError::mutable_actual_value() {
  set_has_actual_value();
  if (actual_value_ == NULL) actual_value_ = new ::cockroach::proto::Value;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ConditionFailedError.actual_value)
  return actual_value_;
}
inline ::cockroach::proto::Value* ConditionFailedError::release_actual_value() {
  clear_has_actual_value();
  ::cockroach::proto::Value* temp = actual_value_;
  actual_value_ = NULL;
  return temp;
}
inline void ConditionFailedError::set_allocated_actual_value(::cockroach::proto::Value* actual_value) {
  delete actual_value_;
  actual_value_ = actual_value;
  if (actual_value) {
    set_has_actual_value();
  } else {
    clear_has_actual_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ConditionFailedError.actual_value)
}

// -------------------------------------------------------------------

// ErrorDetail

// optional .cockroach.proto.NotLeaderError not_leader = 1;
inline bool ErrorDetail::has_not_leader() const {
  return value_case() == kNotLeader;
}
inline void ErrorDetail::set_has_not_leader() {
  _oneof_case_[0] = kNotLeader;
}
inline void ErrorDetail::clear_not_leader() {
  if (has_not_leader()) {
    delete value_.not_leader_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::NotLeaderError& ErrorDetail::not_leader() const {
  return has_not_leader() ? *value_.not_leader_
                      : ::cockroach::proto::NotLeaderError::default_instance();
}
inline ::cockroach::proto::NotLeaderError* ErrorDetail::mutable_not_leader() {
  if (!has_not_leader()) {
    clear_value();
    set_has_not_leader();
    value_.not_leader_ = new ::cockroach::proto::NotLeaderError;
  }
  return value_.not_leader_;
}
inline ::cockroach::proto::NotLeaderError* ErrorDetail::release_not_leader() {
  if (has_not_leader()) {
    clear_has_value();
    ::cockroach::proto::NotLeaderError* temp = value_.not_leader_;
    value_.not_leader_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_not_leader(::cockroach::proto::NotLeaderError* not_leader) {
  clear_value();
  if (not_leader) {
    set_has_not_leader();
    value_.not_leader_ = not_leader;
  }
}

// optional .cockroach.proto.RangeNotFoundError range_not_found = 2;
inline bool ErrorDetail::has_range_not_found() const {
  return value_case() == kRangeNotFound;
}
inline void ErrorDetail::set_has_range_not_found() {
  _oneof_case_[0] = kRangeNotFound;
}
inline void ErrorDetail::clear_range_not_found() {
  if (has_range_not_found()) {
    delete value_.range_not_found_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::RangeNotFoundError& ErrorDetail::range_not_found() const {
  return has_range_not_found() ? *value_.range_not_found_
                      : ::cockroach::proto::RangeNotFoundError::default_instance();
}
inline ::cockroach::proto::RangeNotFoundError* ErrorDetail::mutable_range_not_found() {
  if (!has_range_not_found()) {
    clear_value();
    set_has_range_not_found();
    value_.range_not_found_ = new ::cockroach::proto::RangeNotFoundError;
  }
  return value_.range_not_found_;
}
inline ::cockroach::proto::RangeNotFoundError* ErrorDetail::release_range_not_found() {
  if (has_range_not_found()) {
    clear_has_value();
    ::cockroach::proto::RangeNotFoundError* temp = value_.range_not_found_;
    value_.range_not_found_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_range_not_found(::cockroach::proto::RangeNotFoundError* range_not_found) {
  clear_value();
  if (range_not_found) {
    set_has_range_not_found();
    value_.range_not_found_ = range_not_found;
  }
}

// optional .cockroach.proto.RangeKeyMismatchError range_key_mismatch = 3;
inline bool ErrorDetail::has_range_key_mismatch() const {
  return value_case() == kRangeKeyMismatch;
}
inline void ErrorDetail::set_has_range_key_mismatch() {
  _oneof_case_[0] = kRangeKeyMismatch;
}
inline void ErrorDetail::clear_range_key_mismatch() {
  if (has_range_key_mismatch()) {
    delete value_.range_key_mismatch_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::RangeKeyMismatchError& ErrorDetail::range_key_mismatch() const {
  return has_range_key_mismatch() ? *value_.range_key_mismatch_
                      : ::cockroach::proto::RangeKeyMismatchError::default_instance();
}
inline ::cockroach::proto::RangeKeyMismatchError* ErrorDetail::mutable_range_key_mismatch() {
  if (!has_range_key_mismatch()) {
    clear_value();
    set_has_range_key_mismatch();
    value_.range_key_mismatch_ = new ::cockroach::proto::RangeKeyMismatchError;
  }
  return value_.range_key_mismatch_;
}
inline ::cockroach::proto::RangeKeyMismatchError* ErrorDetail::release_range_key_mismatch() {
  if (has_range_key_mismatch()) {
    clear_has_value();
    ::cockroach::proto::RangeKeyMismatchError* temp = value_.range_key_mismatch_;
    value_.range_key_mismatch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_range_key_mismatch(::cockroach::proto::RangeKeyMismatchError* range_key_mismatch) {
  clear_value();
  if (range_key_mismatch) {
    set_has_range_key_mismatch();
    value_.range_key_mismatch_ = range_key_mismatch;
  }
}

// optional .cockroach.proto.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
inline bool ErrorDetail::has_read_within_uncertainty_interval() const {
  return value_case() == kReadWithinUncertaintyInterval;
}
inline void ErrorDetail::set_has_read_within_uncertainty_interval() {
  _oneof_case_[0] = kReadWithinUncertaintyInterval;
}
inline void ErrorDetail::clear_read_within_uncertainty_interval() {
  if (has_read_within_uncertainty_interval()) {
    delete value_.read_within_uncertainty_interval_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ReadWithinUncertaintyIntervalError& ErrorDetail::read_within_uncertainty_interval() const {
  return has_read_within_uncertainty_interval() ? *value_.read_within_uncertainty_interval_
                      : ::cockroach::proto::ReadWithinUncertaintyIntervalError::default_instance();
}
inline ::cockroach::proto::ReadWithinUncertaintyIntervalError* ErrorDetail::mutable_read_within_uncertainty_interval() {
  if (!has_read_within_uncertainty_interval()) {
    clear_value();
    set_has_read_within_uncertainty_interval();
    value_.read_within_uncertainty_interval_ = new ::cockroach::proto::ReadWithinUncertaintyIntervalError;
  }
  return value_.read_within_uncertainty_interval_;
}
inline ::cockroach::proto::ReadWithinUncertaintyIntervalError* ErrorDetail::release_read_within_uncertainty_interval() {
  if (has_read_within_uncertainty_interval()) {
    clear_has_value();
    ::cockroach::proto::ReadWithinUncertaintyIntervalError* temp = value_.read_within_uncertainty_interval_;
    value_.read_within_uncertainty_interval_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_read_within_uncertainty_interval(::cockroach::proto::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  clear_value();
  if (read_within_uncertainty_interval) {
    set_has_read_within_uncertainty_interval();
    value_.read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  }
}

// optional .cockroach.proto.TransactionAbortedError transaction_aborted = 5;
inline bool ErrorDetail::has_transaction_aborted() const {
  return value_case() == kTransactionAborted;
}
inline void ErrorDetail::set_has_transaction_aborted() {
  _oneof_case_[0] = kTransactionAborted;
}
inline void ErrorDetail::clear_transaction_aborted() {
  if (has_transaction_aborted()) {
    delete value_.transaction_aborted_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::TransactionAbortedError& ErrorDetail::transaction_aborted() const {
  return has_transaction_aborted() ? *value_.transaction_aborted_
                      : ::cockroach::proto::TransactionAbortedError::default_instance();
}
inline ::cockroach::proto::TransactionAbortedError* ErrorDetail::mutable_transaction_aborted() {
  if (!has_transaction_aborted()) {
    clear_value();
    set_has_transaction_aborted();
    value_.transaction_aborted_ = new ::cockroach::proto::TransactionAbortedError;
  }
  return value_.transaction_aborted_;
}
inline ::cockroach::proto::TransactionAbortedError* ErrorDetail::release_transaction_aborted() {
  if (has_transaction_aborted()) {
    clear_has_value();
    ::cockroach::proto::TransactionAbortedError* temp = value_.transaction_aborted_;
    value_.transaction_aborted_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_transaction_aborted(::cockroach::proto::TransactionAbortedError* transaction_aborted) {
  clear_value();
  if (transaction_aborted) {
    set_has_transaction_aborted();
    value_.transaction_aborted_ = transaction_aborted;
  }
}

// optional .cockroach.proto.TransactionPushError transaction_push = 6;
inline bool ErrorDetail::has_transaction_push() const {
  return value_case() == kTransactionPush;
}
inline void ErrorDetail::set_has_transaction_push() {
  _oneof_case_[0] = kTransactionPush;
}
inline void ErrorDetail::clear_transaction_push() {
  if (has_transaction_push()) {
    delete value_.transaction_push_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::TransactionPushError& ErrorDetail::transaction_push() const {
  return has_transaction_push() ? *value_.transaction_push_
                      : ::cockroach::proto::TransactionPushError::default_instance();
}
inline ::cockroach::proto::TransactionPushError* ErrorDetail::mutable_transaction_push() {
  if (!has_transaction_push()) {
    clear_value();
    set_has_transaction_push();
    value_.transaction_push_ = new ::cockroach::proto::TransactionPushError;
  }
  return value_.transaction_push_;
}
inline ::cockroach::proto::TransactionPushError* ErrorDetail::release_transaction_push() {
  if (has_transaction_push()) {
    clear_has_value();
    ::cockroach::proto::TransactionPushError* temp = value_.transaction_push_;
    value_.transaction_push_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_transaction_push(::cockroach::proto::TransactionPushError* transaction_push) {
  clear_value();
  if (transaction_push) {
    set_has_transaction_push();
    value_.transaction_push_ = transaction_push;
  }
}

// optional .cockroach.proto.TransactionRetryError transaction_retry = 7;
inline bool ErrorDetail::has_transaction_retry() const {
  return value_case() == kTransactionRetry;
}
inline void ErrorDetail::set_has_transaction_retry() {
  _oneof_case_[0] = kTransactionRetry;
}
inline void ErrorDetail::clear_transaction_retry() {
  if (has_transaction_retry()) {
    delete value_.transaction_retry_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::TransactionRetryError& ErrorDetail::transaction_retry() const {
  return has_transaction_retry() ? *value_.transaction_retry_
                      : ::cockroach::proto::TransactionRetryError::default_instance();
}
inline ::cockroach::proto::TransactionRetryError* ErrorDetail::mutable_transaction_retry() {
  if (!has_transaction_retry()) {
    clear_value();
    set_has_transaction_retry();
    value_.transaction_retry_ = new ::cockroach::proto::TransactionRetryError;
  }
  return value_.transaction_retry_;
}
inline ::cockroach::proto::TransactionRetryError* ErrorDetail::release_transaction_retry() {
  if (has_transaction_retry()) {
    clear_has_value();
    ::cockroach::proto::TransactionRetryError* temp = value_.transaction_retry_;
    value_.transaction_retry_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_transaction_retry(::cockroach::proto::TransactionRetryError* transaction_retry) {
  clear_value();
  if (transaction_retry) {
    set_has_transaction_retry();
    value_.transaction_retry_ = transaction_retry;
  }
}

// optional .cockroach.proto.TransactionStatusError transaction_status = 8;
inline bool ErrorDetail::has_transaction_status() const {
  return value_case() == kTransactionStatus;
}
inline void ErrorDetail::set_has_transaction_status() {
  _oneof_case_[0] = kTransactionStatus;
}
inline void ErrorDetail::clear_transaction_status() {
  if (has_transaction_status()) {
    delete value_.transaction_status_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::TransactionStatusError& ErrorDetail::transaction_status() const {
  return has_transaction_status() ? *value_.transaction_status_
                      : ::cockroach::proto::TransactionStatusError::default_instance();
}
inline ::cockroach::proto::TransactionStatusError* ErrorDetail::mutable_transaction_status() {
  if (!has_transaction_status()) {
    clear_value();
    set_has_transaction_status();
    value_.transaction_status_ = new ::cockroach::proto::TransactionStatusError;
  }
  return value_.transaction_status_;
}
inline ::cockroach::proto::TransactionStatusError* ErrorDetail::release_transaction_status() {
  if (has_transaction_status()) {
    clear_has_value();
    ::cockroach::proto::TransactionStatusError* temp = value_.transaction_status_;
    value_.transaction_status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_transaction_status(::cockroach::proto::TransactionStatusError* transaction_status) {
  clear_value();
  if (transaction_status) {
    set_has_transaction_status();
    value_.transaction_status_ = transaction_status;
  }
}

// optional .cockroach.proto.WriteIntentError write_intent = 9;
inline bool ErrorDetail::has_write_intent() const {
  return value_case() == kWriteIntent;
}
inline void ErrorDetail::set_has_write_intent() {
  _oneof_case_[0] = kWriteIntent;
}
inline void ErrorDetail::clear_write_intent() {
  if (has_write_intent()) {
    delete value_.write_intent_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::WriteIntentError& ErrorDetail::write_intent() const {
  return has_write_intent() ? *value_.write_intent_
                      : ::cockroach::proto::WriteIntentError::default_instance();
}
inline ::cockroach::proto::WriteIntentError* ErrorDetail::mutable_write_intent() {
  if (!has_write_intent()) {
    clear_value();
    set_has_write_intent();
    value_.write_intent_ = new ::cockroach::proto::WriteIntentError;
  }
  return value_.write_intent_;
}
inline ::cockroach::proto::WriteIntentError* ErrorDetail::release_write_intent() {
  if (has_write_intent()) {
    clear_has_value();
    ::cockroach::proto::WriteIntentError* temp = value_.write_intent_;
    value_.write_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_write_intent(::cockroach::proto::WriteIntentError* write_intent) {
  clear_value();
  if (write_intent) {
    set_has_write_intent();
    value_.write_intent_ = write_intent;
  }
}

// optional .cockroach.proto.WriteTooOldError write_too_old = 10;
inline bool ErrorDetail::has_write_too_old() const {
  return value_case() == kWriteTooOld;
}
inline void ErrorDetail::set_has_write_too_old() {
  _oneof_case_[0] = kWriteTooOld;
}
inline void ErrorDetail::clear_write_too_old() {
  if (has_write_too_old()) {
    delete value_.write_too_old_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::WriteTooOldError& ErrorDetail::write_too_old() const {
  return has_write_too_old() ? *value_.write_too_old_
                      : ::cockroach::proto::WriteTooOldError::default_instance();
}
inline ::cockroach::proto::WriteTooOldError* ErrorDetail::mutable_write_too_old() {
  if (!has_write_too_old()) {
    clear_value();
    set_has_write_too_old();
    value_.write_too_old_ = new ::cockroach::proto::WriteTooOldError;
  }
  return value_.write_too_old_;
}
inline ::cockroach::proto::WriteTooOldError* ErrorDetail::release_write_too_old() {
  if (has_write_too_old()) {
    clear_has_value();
    ::cockroach::proto::WriteTooOldError* temp = value_.write_too_old_;
    value_.write_too_old_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_write_too_old(::cockroach::proto::WriteTooOldError* write_too_old) {
  clear_value();
  if (write_too_old) {
    set_has_write_too_old();
    value_.write_too_old_ = write_too_old;
  }
}

// optional .cockroach.proto.OpRequiresTxnError op_requires_txn = 11;
inline bool ErrorDetail::has_op_requires_txn() const {
  return value_case() == kOpRequiresTxn;
}
inline void ErrorDetail::set_has_op_requires_txn() {
  _oneof_case_[0] = kOpRequiresTxn;
}
inline void ErrorDetail::clear_op_requires_txn() {
  if (has_op_requires_txn()) {
    delete value_.op_requires_txn_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::OpRequiresTxnError& ErrorDetail::op_requires_txn() const {
  return has_op_requires_txn() ? *value_.op_requires_txn_
                      : ::cockroach::proto::OpRequiresTxnError::default_instance();
}
inline ::cockroach::proto::OpRequiresTxnError* ErrorDetail::mutable_op_requires_txn() {
  if (!has_op_requires_txn()) {
    clear_value();
    set_has_op_requires_txn();
    value_.op_requires_txn_ = new ::cockroach::proto::OpRequiresTxnError;
  }
  return value_.op_requires_txn_;
}
inline ::cockroach::proto::OpRequiresTxnError* ErrorDetail::release_op_requires_txn() {
  if (has_op_requires_txn()) {
    clear_has_value();
    ::cockroach::proto::OpRequiresTxnError* temp = value_.op_requires_txn_;
    value_.op_requires_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_op_requires_txn(::cockroach::proto::OpRequiresTxnError* op_requires_txn) {
  clear_value();
  if (op_requires_txn) {
    set_has_op_requires_txn();
    value_.op_requires_txn_ = op_requires_txn;
  }
}

// optional .cockroach.proto.ConditionFailedError condition_failed = 12;
inline bool ErrorDetail::has_condition_failed() const {
  return value_case() == kConditionFailed;
}
inline void ErrorDetail::set_has_condition_failed() {
  _oneof_case_[0] = kConditionFailed;
}
inline void ErrorDetail::clear_condition_failed() {
  if (has_condition_failed()) {
    delete value_.condition_failed_;
    clear_has_value();
  }
}
inline const ::cockroach::proto::ConditionFailedError& ErrorDetail::condition_failed() const {
  return has_condition_failed() ? *value_.condition_failed_
                      : ::cockroach::proto::ConditionFailedError::default_instance();
}
inline ::cockroach::proto::ConditionFailedError* ErrorDetail::mutable_condition_failed() {
  if (!has_condition_failed()) {
    clear_value();
    set_has_condition_failed();
    value_.condition_failed_ = new ::cockroach::proto::ConditionFailedError;
  }
  return value_.condition_failed_;
}
inline ::cockroach::proto::ConditionFailedError* ErrorDetail::release_condition_failed() {
  if (has_condition_failed()) {
    clear_has_value();
    ::cockroach::proto::ConditionFailedError* temp = value_.condition_failed_;
    value_.condition_failed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ErrorDetail::set_allocated_condition_failed(::cockroach::proto::ConditionFailedError* condition_failed) {
  clear_value();
  if (condition_failed) {
    set_has_condition_failed();
    value_.condition_failed_ = condition_failed;
  }
}

inline bool ErrorDetail::has_value() {
  return value_case() != VALUE_NOT_SET;
}
inline void ErrorDetail::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ErrorDetail::ValueCase ErrorDetail::value_case() const {
  return ErrorDetail::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Error

// optional string message = 1;
inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Error.message)
  return *message_;
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Error.message)
}
inline void Error::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Error.message)
  return message_;
}
inline ::std::string* Error::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Error.message)
}

// optional bool retryable = 2;
inline bool Error::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
inline bool Error::retryable() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Error.retryable)
  return retryable_;
}
inline void Error::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Error.retryable)
}

// optional .cockroach.proto.TransactionRestart transaction_restart = 4;
inline bool Error::has_transaction_restart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_transaction_restart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_transaction_restart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_transaction_restart() {
  transaction_restart_ = 0;
  clear_has_transaction_restart();
}
inline ::cockroach::proto::TransactionRestart Error::transaction_restart() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Error.transaction_restart)
  return static_cast< ::cockroach::proto::TransactionRestart >(transaction_restart_);
}
inline void Error::set_transaction_restart(::cockroach::proto::TransactionRestart value) {
  assert(::cockroach::proto::TransactionRestart_IsValid(value));
  set_has_transaction_restart();
  transaction_restart_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Error.transaction_restart)
}

// optional .cockroach.proto.ErrorDetail detail = 3;
inline bool Error::has_detail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_detail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_detail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_detail() {
  if (detail_ != NULL) detail_->::cockroach::proto::ErrorDetail::Clear();
  clear_has_detail();
}
inline const ::cockroach::proto::ErrorDetail& Error::detail() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Error.detail)
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::cockroach::proto::ErrorDetail* Error::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::cockroach::proto::ErrorDetail;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Error.detail)
  return detail_;
}
inline ::cockroach::proto::ErrorDetail* Error::release_detail() {
  clear_has_detail();
  ::cockroach::proto::ErrorDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Error::set_allocated_detail(::cockroach::proto::ErrorDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Error.detail)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::proto::TransactionRestart> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::proto::TransactionRestart>() {
  return ::cockroach::proto::TransactionRestart_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2ferrors_2eproto__INCLUDED
