// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* InternalRangeLookupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRangeLookupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalRangeLookupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRangeLookupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalHeartbeatTxnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalHeartbeatTxnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalHeartbeatTxnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalHeartbeatTxnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCRequest_GCKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCRequest_GCKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalPushTxnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalPushTxnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalPushTxnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalPushTxnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentRangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalMergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalMergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTruncateLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTruncateLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTruncateLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTruncateLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalLeaderLeaseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalLeaderLeaseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalLeaderLeaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalLeaderLeaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalRequestUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRequestUnion_reflection_ = NULL;
struct InternalRequestUnionOneofInstance {
  const ::cockroach::proto::GetRequest* get_;
  const ::cockroach::proto::PutRequest* put_;
  const ::cockroach::proto::ConditionalPutRequest* conditional_put_;
  const ::cockroach::proto::IncrementRequest* increment_;
  const ::cockroach::proto::DeleteRequest* delete__;
  const ::cockroach::proto::DeleteRangeRequest* delete_range_;
  const ::cockroach::proto::ScanRequest* scan_;
  const ::cockroach::proto::EndTransactionRequest* end_transaction_;
  const ::cockroach::proto::InternalPushTxnRequest* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentRequest* internal_resolve_intent_;
  const ::cockroach::proto::InternalResolveIntentRangeRequest* internal_resolve_intent_range_;
}* InternalRequestUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalResponseUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResponseUnion_reflection_ = NULL;
struct InternalResponseUnionOneofInstance {
  const ::cockroach::proto::GetResponse* get_;
  const ::cockroach::proto::PutResponse* put_;
  const ::cockroach::proto::ConditionalPutResponse* conditional_put_;
  const ::cockroach::proto::IncrementResponse* increment_;
  const ::cockroach::proto::DeleteResponse* delete__;
  const ::cockroach::proto::DeleteRangeResponse* delete_range_;
  const ::cockroach::proto::ScanResponse* scan_;
  const ::cockroach::proto::EndTransactionResponse* end_transaction_;
  const ::cockroach::proto::InternalPushTxnResponse* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentResponse* internal_resolve_intent_;
  const ::cockroach::proto::InternalResolveIntentRangeResponse* internal_resolve_intent_range_;
}* InternalResponseUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalBatchRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalBatchRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalBatchResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalBatchResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteCmdResponse_reflection_ = NULL;
struct ReadWriteCmdResponseOneofInstance {
  const ::cockroach::proto::PutResponse* put_;
  const ::cockroach::proto::ConditionalPutResponse* conditional_put_;
  const ::cockroach::proto::IncrementResponse* increment_;
  const ::cockroach::proto::DeleteResponse* delete__;
  const ::cockroach::proto::DeleteRangeResponse* delete_range_;
  const ::cockroach::proto::EndTransactionResponse* end_transaction_;
  const ::cockroach::proto::InternalHeartbeatTxnResponse* internal_heartbeat_txn_;
  const ::cockroach::proto::InternalPushTxnResponse* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentResponse* internal_resolve_intent_;
  const ::cockroach::proto::InternalResolveIntentRangeResponse* internal_resolve_intent_range_;
  const ::cockroach::proto::InternalMergeResponse* internal_merge_;
  const ::cockroach::proto::InternalTruncateLogResponse* internal_truncate_log_;
  const ::cockroach::proto::InternalGCResponse* internal_gc_;
  const ::cockroach::proto::InternalLeaderLeaseResponse* internal_leader_lease_;
}* ReadWriteCmdResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalRaftCommandUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRaftCommandUnion_reflection_ = NULL;
struct InternalRaftCommandUnionOneofInstance {
  const ::cockroach::proto::GetRequest* get_;
  const ::cockroach::proto::PutRequest* put_;
  const ::cockroach::proto::ConditionalPutRequest* conditional_put_;
  const ::cockroach::proto::IncrementRequest* increment_;
  const ::cockroach::proto::DeleteRequest* delete__;
  const ::cockroach::proto::DeleteRangeRequest* delete_range_;
  const ::cockroach::proto::ScanRequest* scan_;
  const ::cockroach::proto::EndTransactionRequest* end_transaction_;
  const ::cockroach::proto::BatchRequest* batch_;
  const ::cockroach::proto::InternalRangeLookupRequest* internal_range_lookup_;
  const ::cockroach::proto::InternalHeartbeatTxnRequest* internal_heartbeat_txn_;
  const ::cockroach::proto::InternalPushTxnRequest* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentRequest* internal_resolve_intent_;
  const ::cockroach::proto::InternalResolveIntentRangeRequest* internal_resolve_intent_range_;
  const ::cockroach::proto::InternalMergeRequest* internal_merge_response_;
  const ::cockroach::proto::InternalTruncateLogRequest* internal_truncate_log_;
  const ::cockroach::proto::InternalGCRequest* internal_gc_;
  const ::cockroach::proto::InternalLeaderLeaseRequest* internal_lease_;
  const ::cockroach::proto::InternalBatchRequest* internal_batch_;
}* InternalRaftCommandUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalRaftCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRaftCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_KeyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PushTxnType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/internal.proto");
  GOOGLE_CHECK(file != NULL);
  InternalRangeLookupRequest_descriptor_ = file->message_type(0);
  static const int InternalRangeLookupRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, max_ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, ignore_intents_),
  };
  InternalRangeLookupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalRangeLookupRequest_descriptor_,
      InternalRangeLookupRequest::default_instance_,
      InternalRangeLookupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalRangeLookupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, _internal_metadata_),
      -1);
  InternalRangeLookupResponse_descriptor_ = file->message_type(1);
  static const int InternalRangeLookupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, ranges_),
  };
  InternalRangeLookupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalRangeLookupResponse_descriptor_,
      InternalRangeLookupResponse::default_instance_,
      InternalRangeLookupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalRangeLookupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, _internal_metadata_),
      -1);
  InternalHeartbeatTxnRequest_descriptor_ = file->message_type(2);
  static const int InternalHeartbeatTxnRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, kvheader_),
  };
  InternalHeartbeatTxnRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalHeartbeatTxnRequest_descriptor_,
      InternalHeartbeatTxnRequest::default_instance_,
      InternalHeartbeatTxnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalHeartbeatTxnRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, _internal_metadata_),
      -1);
  InternalHeartbeatTxnResponse_descriptor_ = file->message_type(3);
  static const int InternalHeartbeatTxnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, kvheader_),
  };
  InternalHeartbeatTxnResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalHeartbeatTxnResponse_descriptor_,
      InternalHeartbeatTxnResponse::default_instance_,
      InternalHeartbeatTxnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalHeartbeatTxnResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, _internal_metadata_),
      -1);
  InternalGCRequest_descriptor_ = file->message_type(4);
  static const int InternalGCRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, gc_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, keys_),
  };
  InternalGCRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalGCRequest_descriptor_,
      InternalGCRequest::default_instance_,
      InternalGCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalGCRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, _internal_metadata_),
      -1);
  InternalGCRequest_GCKey_descriptor_ = InternalGCRequest_descriptor_->nested_type(0);
  static const int InternalGCRequest_GCKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, timestamp_),
  };
  InternalGCRequest_GCKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalGCRequest_GCKey_descriptor_,
      InternalGCRequest_GCKey::default_instance_,
      InternalGCRequest_GCKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalGCRequest_GCKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, _internal_metadata_),
      -1);
  InternalGCResponse_descriptor_ = file->message_type(5);
  static const int InternalGCResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, kvheader_),
  };
  InternalGCResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalGCResponse_descriptor_,
      InternalGCResponse::default_instance_,
      InternalGCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalGCResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, _internal_metadata_),
      -1);
  InternalPushTxnRequest_descriptor_ = file->message_type(6);
  static const int InternalPushTxnRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, pushee_txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, push_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, range_lookup_),
  };
  InternalPushTxnRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalPushTxnRequest_descriptor_,
      InternalPushTxnRequest::default_instance_,
      InternalPushTxnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalPushTxnRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, _internal_metadata_),
      -1);
  InternalPushTxnResponse_descriptor_ = file->message_type(7);
  static const int InternalPushTxnResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, pushee_txn_),
  };
  InternalPushTxnResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalPushTxnResponse_descriptor_,
      InternalPushTxnResponse::default_instance_,
      InternalPushTxnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalPushTxnResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, _internal_metadata_),
      -1);
  InternalResolveIntentRequest_descriptor_ = file->message_type(8);
  static const int InternalResolveIntentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, kvheader_),
  };
  InternalResolveIntentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalResolveIntentRequest_descriptor_,
      InternalResolveIntentRequest::default_instance_,
      InternalResolveIntentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalResolveIntentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, _internal_metadata_),
      -1);
  InternalResolveIntentResponse_descriptor_ = file->message_type(9);
  static const int InternalResolveIntentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, kvheader_),
  };
  InternalResolveIntentResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalResolveIntentResponse_descriptor_,
      InternalResolveIntentResponse::default_instance_,
      InternalResolveIntentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalResolveIntentResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, _internal_metadata_),
      -1);
  InternalResolveIntentRangeRequest_descriptor_ = file->message_type(10);
  static const int InternalResolveIntentRangeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeRequest, kvheader_),
  };
  InternalResolveIntentRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalResolveIntentRangeRequest_descriptor_,
      InternalResolveIntentRangeRequest::default_instance_,
      InternalResolveIntentRangeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalResolveIntentRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeRequest, _internal_metadata_),
      -1);
  InternalResolveIntentRangeResponse_descriptor_ = file->message_type(11);
  static const int InternalResolveIntentRangeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeResponse, kvheader_),
  };
  InternalResolveIntentRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalResolveIntentRangeResponse_descriptor_,
      InternalResolveIntentRangeResponse::default_instance_,
      InternalResolveIntentRangeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalResolveIntentRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRangeResponse, _internal_metadata_),
      -1);
  InternalMergeRequest_descriptor_ = file->message_type(12);
  static const int InternalMergeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, value_),
  };
  InternalMergeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalMergeRequest_descriptor_,
      InternalMergeRequest::default_instance_,
      InternalMergeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalMergeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, _internal_metadata_),
      -1);
  InternalMergeResponse_descriptor_ = file->message_type(13);
  static const int InternalMergeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, kvheader_),
  };
  InternalMergeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalMergeResponse_descriptor_,
      InternalMergeResponse::default_instance_,
      InternalMergeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalMergeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, _internal_metadata_),
      -1);
  InternalTruncateLogRequest_descriptor_ = file->message_type(14);
  static const int InternalTruncateLogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, index_),
  };
  InternalTruncateLogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTruncateLogRequest_descriptor_,
      InternalTruncateLogRequest::default_instance_,
      InternalTruncateLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTruncateLogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, _internal_metadata_),
      -1);
  InternalTruncateLogResponse_descriptor_ = file->message_type(15);
  static const int InternalTruncateLogResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, kvheader_),
  };
  InternalTruncateLogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTruncateLogResponse_descriptor_,
      InternalTruncateLogResponse::default_instance_,
      InternalTruncateLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTruncateLogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, _internal_metadata_),
      -1);
  InternalLeaderLeaseRequest_descriptor_ = file->message_type(16);
  static const int InternalLeaderLeaseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, lease_),
  };
  InternalLeaderLeaseRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalLeaderLeaseRequest_descriptor_,
      InternalLeaderLeaseRequest::default_instance_,
      InternalLeaderLeaseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalLeaderLeaseRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, _internal_metadata_),
      -1);
  InternalLeaderLeaseResponse_descriptor_ = file->message_type(17);
  static const int InternalLeaderLeaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, kvheader_),
  };
  InternalLeaderLeaseResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalLeaderLeaseResponse_descriptor_,
      InternalLeaderLeaseResponse::default_instance_,
      InternalLeaderLeaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalLeaderLeaseResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, _internal_metadata_),
      -1);
  InternalRequestUnion_descriptor_ = file->message_type(18);
  static const int InternalRequestUnion_offsets_[12] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, get_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRequestUnion_default_oneof_instance_, internal_resolve_intent_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRequestUnion, value_),
  };
  InternalRequestUnion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalRequestUnion_descriptor_,
      InternalRequestUnion::default_instance_,
      InternalRequestUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRequestUnion, _has_bits_[0]),
      -1,
      -1,
      InternalRequestUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRequestUnion, _oneof_case_[0]),
      sizeof(InternalRequestUnion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRequestUnion, _internal_metadata_),
      -1);
  InternalResponseUnion_descriptor_ = file->message_type(19);
  static const int InternalResponseUnion_offsets_[12] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, get_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalResponseUnion_default_oneof_instance_, internal_resolve_intent_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResponseUnion, value_),
  };
  InternalResponseUnion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalResponseUnion_descriptor_,
      InternalResponseUnion::default_instance_,
      InternalResponseUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResponseUnion, _has_bits_[0]),
      -1,
      -1,
      InternalResponseUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResponseUnion, _oneof_case_[0]),
      sizeof(InternalResponseUnion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResponseUnion, _internal_metadata_),
      -1);
  InternalBatchRequest_descriptor_ = file->message_type(20);
  static const int InternalBatchRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchRequest, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchRequest, requests_),
  };
  InternalBatchRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalBatchRequest_descriptor_,
      InternalBatchRequest::default_instance_,
      InternalBatchRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalBatchRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchRequest, _internal_metadata_),
      -1);
  InternalBatchResponse_descriptor_ = file->message_type(21);
  static const int InternalBatchResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchResponse, kvheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchResponse, responses_),
  };
  InternalBatchResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalBatchResponse_descriptor_,
      InternalBatchResponse::default_instance_,
      InternalBatchResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalBatchResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalBatchResponse, _internal_metadata_),
      -1);
  ReadWriteCmdResponse_descriptor_ = file->message_type(22);
  static const int ReadWriteCmdResponse_offsets_[15] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_resolve_intent_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_merge_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_gc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_leader_lease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, value_),
  };
  ReadWriteCmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadWriteCmdResponse_descriptor_,
      ReadWriteCmdResponse::default_instance_,
      ReadWriteCmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _has_bits_[0]),
      -1,
      -1,
      ReadWriteCmdResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _oneof_case_[0]),
      sizeof(ReadWriteCmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _internal_metadata_),
      -1);
  InternalRaftCommandUnion_descriptor_ = file->message_type(23);
  static const int InternalRaftCommandUnion_offsets_[20] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, get_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, batch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_range_lookup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_resolve_intent_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_merge_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_gc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_lease_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, value_),
  };
  InternalRaftCommandUnion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalRaftCommandUnion_descriptor_,
      InternalRaftCommandUnion::default_instance_,
      InternalRaftCommandUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _has_bits_[0]),
      -1,
      -1,
      InternalRaftCommandUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _oneof_case_[0]),
      sizeof(InternalRaftCommandUnion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _internal_metadata_),
      -1);
  InternalRaftCommand_descriptor_ = file->message_type(24);
  static const int InternalRaftCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, raft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, origin_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, cmd_),
  };
  InternalRaftCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalRaftCommand_descriptor_,
      InternalRaftCommand::default_instance_,
      InternalRaftCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalRaftCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, _internal_metadata_),
      -1);
  RaftMessageRequest_descriptor_ = file->message_type(25);
  static const int RaftMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, msg_),
  };
  RaftMessageRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessageRequest_descriptor_,
      RaftMessageRequest::default_instance_,
      RaftMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftMessageRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _internal_metadata_),
      -1);
  RaftMessageResponse_descriptor_ = file->message_type(26);
  static const int RaftMessageResponse_offsets_[1] = {
  };
  RaftMessageResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessageResponse_descriptor_,
      RaftMessageResponse::default_instance_,
      RaftMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftMessageResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _internal_metadata_),
      -1);
  InternalTimeSeriesData_descriptor_ = file->message_type(27);
  static const int InternalTimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, start_timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, sample_duration_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, samples_),
  };
  InternalTimeSeriesData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesData_descriptor_,
      InternalTimeSeriesData::default_instance_,
      InternalTimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _internal_metadata_),
      -1);
  InternalTimeSeriesSample_descriptor_ = file->message_type(28);
  static const int InternalTimeSeriesSample_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, min_),
  };
  InternalTimeSeriesSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesSample_descriptor_,
      InternalTimeSeriesSample::default_instance_,
      InternalTimeSeriesSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _internal_metadata_),
      -1);
  RaftTruncatedState_descriptor_ = file->message_type(29);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::default_instance_,
      RaftTruncatedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftTruncatedState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _internal_metadata_),
      -1);
  RaftSnapshotData_descriptor_ = file->message_type(30);
  static const int RaftSnapshotData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, range_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, kv_),
  };
  RaftSnapshotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::default_instance_,
      RaftSnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _internal_metadata_),
      -1);
  RaftSnapshotData_KeyValue_descriptor_ = RaftSnapshotData_descriptor_->nested_type(0);
  static const int RaftSnapshotData_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, value_),
  };
  RaftSnapshotData_KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_KeyValue_descriptor_,
      RaftSnapshotData_KeyValue::default_instance_,
      RaftSnapshotData_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData_KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _internal_metadata_),
      -1);
  PushTxnType_descriptor_ = file->enum_type(0);
  InternalValueType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalRangeLookupRequest_descriptor_, &InternalRangeLookupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalRangeLookupResponse_descriptor_, &InternalRangeLookupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalHeartbeatTxnRequest_descriptor_, &InternalHeartbeatTxnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalHeartbeatTxnResponse_descriptor_, &InternalHeartbeatTxnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalGCRequest_descriptor_, &InternalGCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalGCRequest_GCKey_descriptor_, &InternalGCRequest_GCKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalGCResponse_descriptor_, &InternalGCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalPushTxnRequest_descriptor_, &InternalPushTxnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalPushTxnResponse_descriptor_, &InternalPushTxnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalResolveIntentRequest_descriptor_, &InternalResolveIntentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalResolveIntentResponse_descriptor_, &InternalResolveIntentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalResolveIntentRangeRequest_descriptor_, &InternalResolveIntentRangeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalResolveIntentRangeResponse_descriptor_, &InternalResolveIntentRangeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalMergeRequest_descriptor_, &InternalMergeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalMergeResponse_descriptor_, &InternalMergeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTruncateLogRequest_descriptor_, &InternalTruncateLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTruncateLogResponse_descriptor_, &InternalTruncateLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalLeaderLeaseRequest_descriptor_, &InternalLeaderLeaseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalLeaderLeaseResponse_descriptor_, &InternalLeaderLeaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalRequestUnion_descriptor_, &InternalRequestUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalResponseUnion_descriptor_, &InternalResponseUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalBatchRequest_descriptor_, &InternalBatchRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalBatchResponse_descriptor_, &InternalBatchResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadWriteCmdResponse_descriptor_, &ReadWriteCmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalRaftCommandUnion_descriptor_, &InternalRaftCommandUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalRaftCommand_descriptor_, &InternalRaftCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessageRequest_descriptor_, &RaftMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessageResponse_descriptor_, &RaftMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesData_descriptor_, &InternalTimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesSample_descriptor_, &InternalTimeSeriesSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftTruncatedState_descriptor_, &RaftTruncatedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_descriptor_, &RaftSnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_KeyValue_descriptor_, &RaftSnapshotData_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto() {
  delete InternalRangeLookupRequest::default_instance_;
  delete InternalRangeLookupRequest_reflection_;
  delete InternalRangeLookupResponse::default_instance_;
  delete InternalRangeLookupResponse_reflection_;
  delete InternalHeartbeatTxnRequest::default_instance_;
  delete InternalHeartbeatTxnRequest_reflection_;
  delete InternalHeartbeatTxnResponse::default_instance_;
  delete InternalHeartbeatTxnResponse_reflection_;
  delete InternalGCRequest::default_instance_;
  delete InternalGCRequest_reflection_;
  delete InternalGCRequest_GCKey::default_instance_;
  delete InternalGCRequest_GCKey_reflection_;
  delete InternalGCResponse::default_instance_;
  delete InternalGCResponse_reflection_;
  delete InternalPushTxnRequest::default_instance_;
  delete InternalPushTxnRequest_reflection_;
  delete InternalPushTxnResponse::default_instance_;
  delete InternalPushTxnResponse_reflection_;
  delete InternalResolveIntentRequest::default_instance_;
  delete InternalResolveIntentRequest_reflection_;
  delete InternalResolveIntentResponse::default_instance_;
  delete InternalResolveIntentResponse_reflection_;
  delete InternalResolveIntentRangeRequest::default_instance_;
  delete InternalResolveIntentRangeRequest_reflection_;
  delete InternalResolveIntentRangeResponse::default_instance_;
  delete InternalResolveIntentRangeResponse_reflection_;
  delete InternalMergeRequest::default_instance_;
  delete InternalMergeRequest_reflection_;
  delete InternalMergeResponse::default_instance_;
  delete InternalMergeResponse_reflection_;
  delete InternalTruncateLogRequest::default_instance_;
  delete InternalTruncateLogRequest_reflection_;
  delete InternalTruncateLogResponse::default_instance_;
  delete InternalTruncateLogResponse_reflection_;
  delete InternalLeaderLeaseRequest::default_instance_;
  delete InternalLeaderLeaseRequest_reflection_;
  delete InternalLeaderLeaseResponse::default_instance_;
  delete InternalLeaderLeaseResponse_reflection_;
  delete InternalRequestUnion::default_instance_;
  delete InternalRequestUnion_default_oneof_instance_;
  delete InternalRequestUnion_reflection_;
  delete InternalResponseUnion::default_instance_;
  delete InternalResponseUnion_default_oneof_instance_;
  delete InternalResponseUnion_reflection_;
  delete InternalBatchRequest::default_instance_;
  delete InternalBatchRequest_reflection_;
  delete InternalBatchResponse::default_instance_;
  delete InternalBatchResponse_reflection_;
  delete ReadWriteCmdResponse::default_instance_;
  delete ReadWriteCmdResponse_default_oneof_instance_;
  delete ReadWriteCmdResponse_reflection_;
  delete InternalRaftCommandUnion::default_instance_;
  delete InternalRaftCommandUnion_default_oneof_instance_;
  delete InternalRaftCommandUnion_reflection_;
  delete InternalRaftCommand::default_instance_;
  delete InternalRaftCommand_reflection_;
  delete RaftMessageRequest::default_instance_;
  delete RaftMessageRequest_reflection_;
  delete RaftMessageResponse::default_instance_;
  delete RaftMessageResponse_reflection_;
  delete InternalTimeSeriesData::default_instance_;
  delete InternalTimeSeriesData_reflection_;
  delete InternalTimeSeriesSample::default_instance_;
  delete InternalTimeSeriesSample_reflection_;
  delete RaftTruncatedState::default_instance_;
  delete RaftTruncatedState_reflection_;
  delete RaftSnapshotData::default_instance_;
  delete RaftSnapshotData_reflection_;
  delete RaftSnapshotData_KeyValue::default_instance_;
  delete RaftSnapshotData_KeyValue_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cockroach/proto/internal.proto\022\017cockro"
    "ach.proto\032\031cockroach/proto/api.proto\032\034co"
    "ckroach/proto/config.proto\032\032cockroach/pr"
    "oto/data.proto\032\024gogoproto/gogo.proto\"\222\001\n"
    "\032InternalRangeLookupRequest\022<\n\010kvheader\030"
    "\001 \001(\0132 .cockroach.proto.KVRequestHeaderB"
    "\010\310\336\037\000\320\336\037\001\022\030\n\nmax_ranges\030\002 \001(\005B\004\310\336\037\000\022\034\n\016i"
    "gnore_intents\030\003 \001(\010B\004\310\336\037\000\"\224\001\n\033InternalRa"
    "ngeLookupResponse\022=\n\010kvheader\030\001 \001(\0132!.co"
    "ckroach.proto.KVResponseHeaderB\010\310\336\037\000\320\336\037\001"
    "\0226\n\006ranges\030\002 \003(\0132 .cockroach.proto.Range"
    "DescriptorB\004\310\336\037\000\"[\n\033InternalHeartbeatTxn"
    "Request\022<\n\010kvheader\030\001 \001(\0132 .cockroach.pr"
    "oto.KVRequestHeaderB\010\310\336\037\000\320\336\037\001\"]\n\034Interna"
    "lHeartbeatTxnResponse\022=\n\010kvheader\030\001 \001(\0132"
    "!.cockroach.proto.KVResponseHeaderB\010\310\336\037\000"
    "\320\336\037\001\"\241\002\n\021InternalGCRequest\022<\n\010kvheader\030\001"
    " \001(\0132 .cockroach.proto.KVRequestHeaderB\010"
    "\310\336\037\000\320\336\037\001\022<\n\007gc_meta\030\002 \001(\0132\033.cockroach.pr"
    "oto.GCMetadataB\016\310\336\037\000\342\336\037\006GCMeta\022<\n\004keys\030\003"
    " \003(\0132(.cockroach.proto.InternalGCRequest"
    ".GCKeyB\004\310\336\037\000\032R\n\005GCKey\022\024\n\003key\030\001 \001(\014B\007\372\336\037\003"
    "Key\0223\n\ttimestamp\030\002 \001(\0132\032.cockroach.proto"
    ".TimestampB\004\310\336\037\000\"S\n\022InternalGCResponse\022="
    "\n\010kvheader\030\001 \001(\0132!.cockroach.proto.KVRes"
    "ponseHeaderB\010\310\336\037\000\320\336\037\001\"\220\002\n\026InternalPushTx"
    "nRequest\022<\n\010kvheader\030\001 \001(\0132 .cockroach.p"
    "roto.KVRequestHeaderB\010\310\336\037\000\320\336\037\001\0226\n\npushee"
    "_txn\030\002 \001(\0132\034.cockroach.proto.Transaction"
    "B\004\310\336\037\000\022-\n\003now\030\003 \001(\0132\032.cockroach.proto.Ti"
    "mestampB\004\310\336\037\000\0225\n\tpush_type\030\004 \001(\0162\034.cockr"
    "oach.proto.PushTxnTypeB\004\310\336\037\000\022\032\n\014range_lo"
    "okup\030\005 \001(\010B\004\310\336\037\000\"\212\001\n\027InternalPushTxnResp"
    "onse\022=\n\010kvheader\030\001 \001(\0132!.cockroach.proto"
    ".KVResponseHeaderB\010\310\336\037\000\320\336\037\001\0220\n\npushee_tx"
    "n\030\002 \001(\0132\034.cockroach.proto.Transaction\"\\\n"
    "\034InternalResolveIntentRequest\022<\n\010kvheade"
    "r\030\001 \001(\0132 .cockroach.proto.KVRequestHeade"
    "rB\010\310\336\037\000\320\336\037\001\"^\n\035InternalResolveIntentResp"
    "onse\022=\n\010kvheader\030\001 \001(\0132!.cockroach.proto"
    ".KVResponseHeaderB\010\310\336\037\000\320\336\037\001\"a\n!InternalR"
    "esolveIntentRangeRequest\022<\n\010kvheader\030\001 \001"
    "(\0132 .cockroach.proto.KVRequestHeaderB\010\310\336"
    "\037\000\320\336\037\001\"c\n\"InternalResolveIntentRangeResp"
    "onse\022=\n\010kvheader\030\001 \001(\0132!.cockroach.proto"
    ".KVResponseHeaderB\010\310\336\037\000\320\336\037\001\"\201\001\n\024Internal"
    "MergeRequest\022<\n\010kvheader\030\001 \001(\0132 .cockroa"
    "ch.proto.KVRequestHeaderB\010\310\336\037\000\320\336\037\001\022+\n\005va"
    "lue\030\002 \001(\0132\026.cockroach.proto.ValueB\004\310\336\037\000\""
    "V\n\025InternalMergeResponse\022=\n\010kvheader\030\001 \001"
    "(\0132!.cockroach.proto.KVResponseHeaderB\010\310"
    "\336\037\000\320\336\037\001\"o\n\032InternalTruncateLogRequest\022<\n"
    "\010kvheader\030\001 \001(\0132 .cockroach.proto.KVRequ"
    "estHeaderB\010\310\336\037\000\320\336\037\001\022\023\n\005index\030\002 \001(\004B\004\310\336\037\000"
    "\"\\\n\033InternalTruncateLogResponse\022=\n\010kvhea"
    "der\030\001 \001(\0132!.cockroach.proto.KVResponseHe"
    "aderB\010\310\336\037\000\320\336\037\001\"\207\001\n\032InternalLeaderLeaseRe"
    "quest\022<\n\010kvheader\030\001 \001(\0132 .cockroach.prot"
    "o.KVRequestHeaderB\010\310\336\037\000\320\336\037\001\022+\n\005lease\030\002 \001"
    "(\0132\026.cockroach.proto.LeaseB\004\310\336\037\000\"\\\n\033Inte"
    "rnalLeaderLeaseResponse\022=\n\010kvheader\030\001 \001("
    "\0132!.cockroach.proto.KVResponseHeaderB\010\310\336"
    "\037\000\320\336\037\001\"\315\005\n\024InternalRequestUnion\022*\n\003get\030\002"
    " \001(\0132\033.cockroach.proto.GetRequestH\000\022*\n\003p"
    "ut\030\003 \001(\0132\033.cockroach.proto.PutRequestH\000\022"
    "A\n\017conditional_put\030\004 \001(\0132&.cockroach.pro"
    "to.ConditionalPutRequestH\000\0226\n\tincrement\030"
    "\005 \001(\0132!.cockroach.proto.IncrementRequest"
    "H\000\0220\n\006delete\030\006 \001(\0132\036.cockroach.proto.Del"
    "eteRequestH\000\022;\n\014delete_range\030\007 \001(\0132#.coc"
    "kroach.proto.DeleteRangeRequestH\000\022,\n\004sca"
    "n\030\010 \001(\0132\034.cockroach.proto.ScanRequestH\000\022"
    "A\n\017end_transaction\030\t \001(\0132&.cockroach.pro"
    "to.EndTransactionRequestH\000\022D\n\021internal_p"
    "ush_txn\030\036 \001(\0132\'.cockroach.proto.Internal"
    "PushTxnRequestH\000\022P\n\027internal_resolve_int"
    "ent\030\037 \001(\0132-.cockroach.proto.InternalReso"
    "lveIntentRequestH\000\022[\n\035internal_resolve_i"
    "ntent_range\030  \001(\01322.cockroach.proto.Inte"
    "rnalResolveIntentRangeRequestH\000:\004\310\240\037\001B\007\n"
    "\005value\"\331\005\n\025InternalResponseUnion\022+\n\003get\030"
    "\002 \001(\0132\034.cockroach.proto.GetResponseH\000\022+\n"
    "\003put\030\003 \001(\0132\034.cockroach.proto.PutResponse"
    "H\000\022B\n\017conditional_put\030\004 \001(\0132\'.cockroach."
    "proto.ConditionalPutResponseH\000\0227\n\tincrem"
    "ent\030\005 \001(\0132\".cockroach.proto.IncrementRes"
    "ponseH\000\0221\n\006delete\030\006 \001(\0132\037.cockroach.prot"
    "o.DeleteResponseH\000\022<\n\014delete_range\030\007 \001(\013"
    "2$.cockroach.proto.DeleteRangeResponseH\000"
    "\022-\n\004scan\030\010 \001(\0132\035.cockroach.proto.ScanRes"
    "ponseH\000\022B\n\017end_transaction\030\t \001(\0132\'.cockr"
    "oach.proto.EndTransactionResponseH\000\022E\n\021i"
    "nternal_push_txn\030\036 \001(\0132(.cockroach.proto"
    ".InternalPushTxnResponseH\000\022Q\n\027internal_r"
    "esolve_intent\030\037 \001(\0132..cockroach.proto.In"
    "ternalResolveIntentResponseH\000\022\\\n\035interna"
    "l_resolve_intent_range\030  \001(\01323.cockroach"
    ".proto.InternalResolveIntentRangeRespons"
    "eH\000:\004\310\240\037\001B\007\n\005value\"\223\001\n\024InternalBatchRequ"
    "est\022<\n\010kvheader\030\001 \001(\0132 .cockroach.proto."
    "KVRequestHeaderB\010\310\336\037\000\320\336\037\001\022=\n\010requests\030\002 "
    "\003(\0132%.cockroach.proto.InternalRequestUni"
    "onB\004\310\336\037\000\"\227\001\n\025InternalBatchResponse\022=\n\010kv"
    "header\030\001 \001(\0132!.cockroach.proto.KVRespons"
    "eHeaderB\010\310\336\037\000\320\336\037\001\022\?\n\tresponses\030\002 \003(\0132&.c"
    "ockroach.proto.InternalResponseUnionB\004\310\336"
    "\037\000\"\351\007\n\024ReadWriteCmdResponse\022+\n\003put\030\001 \001(\013"
    "2\034.cockroach.proto.PutResponseH\000\022B\n\017cond"
    "itional_put\030\002 \001(\0132\'.cockroach.proto.Cond"
    "itionalPutResponseH\000\0227\n\tincrement\030\003 \001(\0132"
    "\".cockroach.proto.IncrementResponseH\000\0221\n"
    "\006delete\030\004 \001(\0132\037.cockroach.proto.DeleteRe"
    "sponseH\000\022<\n\014delete_range\030\005 \001(\0132$.cockroa"
    "ch.proto.DeleteRangeResponseH\000\022B\n\017end_tr"
    "ansaction\030\006 \001(\0132\'.cockroach.proto.EndTra"
    "nsactionResponseH\000\022O\n\026internal_heartbeat"
    "_txn\030\n \001(\0132-.cockroach.proto.InternalHea"
    "rtbeatTxnResponseH\000\022E\n\021internal_push_txn"
    "\030\013 \001(\0132(.cockroach.proto.InternalPushTxn"
    "ResponseH\000\022Q\n\027internal_resolve_intent\030\014 "
    "\001(\0132..cockroach.proto.InternalResolveInt"
    "entResponseH\000\022\\\n\035internal_resolve_intent"
    "_range\030\r \001(\01323.cockroach.proto.InternalR"
    "esolveIntentRangeResponseH\000\022@\n\016internal_"
    "merge\030\016 \001(\0132&.cockroach.proto.InternalMe"
    "rgeResponseH\000\022M\n\025internal_truncate_log\030\017"
    " \001(\0132,.cockroach.proto.InternalTruncateL"
    "ogResponseH\000\022:\n\013internal_gc\030\020 \001(\0132#.cock"
    "roach.proto.InternalGCResponseH\000\022M\n\025inte"
    "rnal_leader_lease\030\021 \001(\0132,.cockroach.prot"
    "o.InternalLeaderLeaseResponseH\000:\004\310\240\037\001B\007\n"
    "\005value\"\212\n\n\030InternalRaftCommandUnion\022*\n\003g"
    "et\030\002 \001(\0132\033.cockroach.proto.GetRequestH\000\022"
    "*\n\003put\030\003 \001(\0132\033.cockroach.proto.PutReques"
    "tH\000\022A\n\017conditional_put\030\004 \001(\0132&.cockroach"
    ".proto.ConditionalPutRequestH\000\0226\n\tincrem"
    "ent\030\005 \001(\0132!.cockroach.proto.IncrementReq"
    "uestH\000\0220\n\006delete\030\006 \001(\0132\036.cockroach.proto"
    ".DeleteRequestH\000\022;\n\014delete_range\030\007 \001(\0132#"
    ".cockroach.proto.DeleteRangeRequestH\000\022,\n"
    "\004scan\030\010 \001(\0132\034.cockroach.proto.ScanReques"
    "tH\000\022A\n\017end_transaction\030\t \001(\0132&.cockroach"
    ".proto.EndTransactionRequestH\000\022.\n\005batch\030"
    "\036 \001(\0132\035.cockroach.proto.BatchRequestH\000\022L"
    "\n\025internal_range_lookup\030\037 \001(\0132+.cockroac"
    "h.proto.InternalRangeLookupRequestH\000\022N\n\026"
    "internal_heartbeat_txn\030  \001(\0132,.cockroach"
    ".proto.InternalHeartbeatTxnRequestH\000\022D\n\021"
    "internal_push_txn\030! \001(\0132\'.cockroach.prot"
    "o.InternalPushTxnRequestH\000\022P\n\027internal_r"
    "esolve_intent\030\" \001(\0132-.cockroach.proto.In"
    "ternalResolveIntentRequestH\000\022[\n\035internal"
    "_resolve_intent_range\030# \001(\01322.cockroach."
    "proto.InternalResolveIntentRangeRequestH"
    "\000\022H\n\027internal_merge_response\030$ \001(\0132%.coc"
    "kroach.proto.InternalMergeRequestH\000\022L\n\025i"
    "nternal_truncate_log\030% \001(\0132+.cockroach.p"
    "roto.InternalTruncateLogRequestH\000\022I\n\013int"
    "ernal_gc\030& \001(\0132\".cockroach.proto.Interna"
    "lGCRequestB\016\342\336\037\nInternalGCH\000\022E\n\016internal"
    "_lease\030\' \001(\0132+.cockroach.proto.InternalL"
    "eaderLeaseRequestH\000\022\?\n\016internal_batch\030( "
    "\001(\0132%.cockroach.proto.InternalBatchReque"
    "stH\000:\004\310\240\037\001B\007\n\005value\"\272\001\n\023InternalRaftComm"
    "and\022)\n\007raft_id\030\001 \001(\003B\030\310\336\037\000\342\336\037\006RaftID\372\336\037\006"
    "RaftID\022:\n\016origin_node_id\030\002 \001(\004B\"\310\336\037\000\342\336\037\014"
    "OriginNodeID\372\336\037\nRaftNodeID\022<\n\003cmd\030\003 \001(\0132"
    ").cockroach.proto.InternalRaftCommandUni"
    "onB\004\310\336\037\000\"N\n\022RaftMessageRequest\022+\n\010group_"
    "id\030\001 \001(\004B\031\310\336\037\000\342\336\037\007GroupID\372\336\037\006RaftID\022\013\n\003m"
    "sg\030\002 \001(\014\"\025\n\023RaftMessageResponse\"\236\001\n\026Inte"
    "rnalTimeSeriesData\022#\n\025start_timestamp_na"
    "nos\030\001 \001(\003B\004\310\336\037\000\022#\n\025sample_duration_nanos"
    "\030\002 \001(\003B\004\310\336\037\000\022:\n\007samples\030\003 \003(\0132).cockroac"
    "h.proto.InternalTimeSeriesSample\"r\n\030Inte"
    "rnalTimeSeriesSample\022\024\n\006offset\030\001 \001(\005B\004\310\336"
    "\037\000\022\023\n\005count\030\006 \001(\rB\004\310\336\037\000\022\021\n\003sum\030\007 \001(\001B\004\310\336"
    "\037\000\022\013\n\003max\030\010 \001(\001\022\013\n\003min\030\t \001(\001\"=\n\022RaftTrun"
    "catedState\022\023\n\005index\030\001 \001(\004B\004\310\336\037\000\022\022\n\004term\030"
    "\002 \001(\004B\004\310\336\037\000\"\274\001\n\020RaftSnapshotData\022@\n\020rang"
    "e_descriptor\030\001 \001(\0132 .cockroach.proto.Ran"
    "geDescriptorB\004\310\336\037\000\022>\n\002KV\030\002 \003(\0132*.cockroa"
    "ch.proto.RaftSnapshotData.KeyValueB\006\342\336\037\002"
    "KV\032&\n\010KeyValue\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001"
    "(\014*G\n\013PushTxnType\022\022\n\016PUSH_TIMESTAMP\020\000\022\r\n"
    "\tABORT_TXN\020\001\022\017\n\013CLEANUP_TXN\020\002\032\004\210\243\036\000*%\n\021I"
    "nternalValueType\022\n\n\006_CR_TS\020\001\032\004\210\243\036\000B\023Z\005pr"
    "oto\340\342\036\001\310\342\036\001\320\342\036\001", 7495);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/internal.proto", &protobuf_RegisterTypes);
  InternalRangeLookupRequest::default_instance_ = new InternalRangeLookupRequest();
  InternalRangeLookupResponse::default_instance_ = new InternalRangeLookupResponse();
  InternalHeartbeatTxnRequest::default_instance_ = new InternalHeartbeatTxnRequest();
  InternalHeartbeatTxnResponse::default_instance_ = new InternalHeartbeatTxnResponse();
  InternalGCRequest::default_instance_ = new InternalGCRequest();
  InternalGCRequest_GCKey::default_instance_ = new InternalGCRequest_GCKey();
  InternalGCResponse::default_instance_ = new InternalGCResponse();
  InternalPushTxnRequest::default_instance_ = new InternalPushTxnRequest();
  InternalPushTxnResponse::default_instance_ = new InternalPushTxnResponse();
  InternalResolveIntentRequest::default_instance_ = new InternalResolveIntentRequest();
  InternalResolveIntentResponse::default_instance_ = new InternalResolveIntentResponse();
  InternalResolveIntentRangeRequest::default_instance_ = new InternalResolveIntentRangeRequest();
  InternalResolveIntentRangeResponse::default_instance_ = new InternalResolveIntentRangeResponse();
  InternalMergeRequest::default_instance_ = new InternalMergeRequest();
  InternalMergeResponse::default_instance_ = new InternalMergeResponse();
  InternalTruncateLogRequest::default_instance_ = new InternalTruncateLogRequest();
  InternalTruncateLogResponse::default_instance_ = new InternalTruncateLogResponse();
  InternalLeaderLeaseRequest::default_instance_ = new InternalLeaderLeaseRequest();
  InternalLeaderLeaseResponse::default_instance_ = new InternalLeaderLeaseResponse();
  InternalRequestUnion::default_instance_ = new InternalRequestUnion();
  InternalRequestUnion_default_oneof_instance_ = new InternalRequestUnionOneofInstance();
  InternalResponseUnion::default_instance_ = new InternalResponseUnion();
  InternalResponseUnion_default_oneof_instance_ = new InternalResponseUnionOneofInstance();
  InternalBatchRequest::default_instance_ = new InternalBatchRequest();
  InternalBatchResponse::default_instance_ = new InternalBatchResponse();
  ReadWriteCmdResponse::default_instance_ = new ReadWriteCmdResponse();
  ReadWriteCmdResponse_default_oneof_instance_ = new ReadWriteCmdResponseOneofInstance();
  InternalRaftCommandUnion::default_instance_ = new InternalRaftCommandUnion();
  InternalRaftCommandUnion_default_oneof_instance_ = new InternalRaftCommandUnionOneofInstance();
  InternalRaftCommand::default_instance_ = new InternalRaftCommand();
  RaftMessageRequest::default_instance_ = new RaftMessageRequest();
  RaftMessageResponse::default_instance_ = new RaftMessageResponse();
  InternalTimeSeriesData::default_instance_ = new InternalTimeSeriesData();
  InternalTimeSeriesSample::default_instance_ = new InternalTimeSeriesSample();
  RaftTruncatedState::default_instance_ = new RaftTruncatedState();
  RaftSnapshotData::default_instance_ = new RaftSnapshotData();
  RaftSnapshotData_KeyValue::default_instance_ = new RaftSnapshotData_KeyValue();
  InternalRangeLookupRequest::default_instance_->InitAsDefaultInstance();
  InternalRangeLookupResponse::default_instance_->InitAsDefaultInstance();
  InternalHeartbeatTxnRequest::default_instance_->InitAsDefaultInstance();
  InternalHeartbeatTxnResponse::default_instance_->InitAsDefaultInstance();
  InternalGCRequest::default_instance_->InitAsDefaultInstance();
  InternalGCRequest_GCKey::default_instance_->InitAsDefaultInstance();
  InternalGCResponse::default_instance_->InitAsDefaultInstance();
  InternalPushTxnRequest::default_instance_->InitAsDefaultInstance();
  InternalPushTxnResponse::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentRequest::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentResponse::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentRangeRequest::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentRangeResponse::default_instance_->InitAsDefaultInstance();
  InternalMergeRequest::default_instance_->InitAsDefaultInstance();
  InternalMergeResponse::default_instance_->InitAsDefaultInstance();
  InternalTruncateLogRequest::default_instance_->InitAsDefaultInstance();
  InternalTruncateLogResponse::default_instance_->InitAsDefaultInstance();
  InternalLeaderLeaseRequest::default_instance_->InitAsDefaultInstance();
  InternalLeaderLeaseResponse::default_instance_->InitAsDefaultInstance();
  InternalRequestUnion::default_instance_->InitAsDefaultInstance();
  InternalResponseUnion::default_instance_->InitAsDefaultInstance();
  InternalBatchRequest::default_instance_->InitAsDefaultInstance();
  InternalBatchResponse::default_instance_->InitAsDefaultInstance();
  ReadWriteCmdResponse::default_instance_->InitAsDefaultInstance();
  InternalRaftCommandUnion::default_instance_->InitAsDefaultInstance();
  InternalRaftCommand::default_instance_->InitAsDefaultInstance();
  RaftMessageRequest::default_instance_->InitAsDefaultInstance();
  RaftMessageResponse::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesData::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesSample::default_instance_->InitAsDefaultInstance();
  RaftTruncatedState::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2finternal_2eproto_;
const ::google::protobuf::EnumDescriptor* PushTxnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushTxnType_descriptor_;
}
bool PushTxnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalValueType_descriptor_;
}
bool InternalValueType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int InternalRangeLookupRequest::kKvheaderFieldNumber;
const int InternalRangeLookupRequest::kMaxRangesFieldNumber;
const int InternalRangeLookupRequest::kIgnoreIntentsFieldNumber;
#endif  // !_MSC_VER

InternalRangeLookupRequest::InternalRangeLookupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRangeLookupRequest)
}

void InternalRangeLookupRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalRangeLookupRequest::InternalRangeLookupRequest(const InternalRangeLookupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRangeLookupRequest)
}

void InternalRangeLookupRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  max_ranges_ = 0;
  ignore_intents_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRangeLookupRequest::~InternalRangeLookupRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRangeLookupRequest)
  SharedDtor();
}

void InternalRangeLookupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalRangeLookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRangeLookupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRangeLookupRequest_descriptor_;
}

const InternalRangeLookupRequest& InternalRangeLookupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRangeLookupRequest* InternalRangeLookupRequest::default_instance_ = NULL;

InternalRangeLookupRequest* InternalRangeLookupRequest::New(::google::protobuf::Arena* arena) const {
  InternalRangeLookupRequest* n = new InternalRangeLookupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalRangeLookupRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalRangeLookupRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(max_ranges_, ignore_intents_);
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalRangeLookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRangeLookupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_ranges;
        break;
      }

      // optional int32 max_ranges = 2;
      case 2: {
        if (tag == 16) {
         parse_max_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ranges_)));
          set_has_max_ranges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignore_intents;
        break;
      }

      // optional bool ignore_intents = 3;
      case 3: {
        if (tag == 24) {
         parse_ignore_intents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_intents_)));
          set_has_ignore_intents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRangeLookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRangeLookupRequest)
  return false;
#undef DO_
}

void InternalRangeLookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRangeLookupRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional int32 max_ranges = 2;
  if (has_max_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_ranges(), output);
  }

  // optional bool ignore_intents = 3;
  if (has_ignore_intents()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignore_intents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRangeLookupRequest)
}

::google::protobuf::uint8* InternalRangeLookupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRangeLookupRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional int32 max_ranges = 2;
  if (has_max_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_ranges(), target);
  }

  // optional bool ignore_intents = 3;
  if (has_ignore_intents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ignore_intents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRangeLookupRequest)
  return target;
}

int InternalRangeLookupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional int32 max_ranges = 2;
    if (has_max_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ranges());
    }

    // optional bool ignore_intents = 3;
    if (has_ignore_intents()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRangeLookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalRangeLookupRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalRangeLookupRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRangeLookupRequest::MergeFrom(const InternalRangeLookupRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_max_ranges()) {
      set_max_ranges(from.max_ranges());
    }
    if (from.has_ignore_intents()) {
      set_ignore_intents(from.ignore_intents());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalRangeLookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeLookupRequest::CopyFrom(const InternalRangeLookupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeLookupRequest::IsInitialized() const {

  return true;
}

void InternalRangeLookupRequest::Swap(InternalRangeLookupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalRangeLookupRequest::InternalSwap(InternalRangeLookupRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(max_ranges_, other->max_ranges_);
  std::swap(ignore_intents_, other->ignore_intents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalRangeLookupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRangeLookupRequest_descriptor_;
  metadata.reflection = InternalRangeLookupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalRangeLookupRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalRangeLookupRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalRangeLookupRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalRangeLookupRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalRangeLookupRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalRangeLookupRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRangeLookupRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalRangeLookupRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRangeLookupRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalRangeLookupRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalRangeLookupRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRangeLookupRequest.kvheader)
}

// optional int32 max_ranges = 2;
bool InternalRangeLookupRequest::has_max_ranges() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalRangeLookupRequest::set_has_max_ranges() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalRangeLookupRequest::clear_has_max_ranges() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalRangeLookupRequest::clear_max_ranges() {
  max_ranges_ = 0;
  clear_has_max_ranges();
}
 ::google::protobuf::int32 InternalRangeLookupRequest::max_ranges() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRangeLookupRequest.max_ranges)
  return max_ranges_;
}
 void InternalRangeLookupRequest::set_max_ranges(::google::protobuf::int32 value) {
  set_has_max_ranges();
  max_ranges_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalRangeLookupRequest.max_ranges)
}

// optional bool ignore_intents = 3;
bool InternalRangeLookupRequest::has_ignore_intents() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalRangeLookupRequest::set_has_ignore_intents() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalRangeLookupRequest::clear_has_ignore_intents() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalRangeLookupRequest::clear_ignore_intents() {
  ignore_intents_ = false;
  clear_has_ignore_intents();
}
 bool InternalRangeLookupRequest::ignore_intents() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRangeLookupRequest.ignore_intents)
  return ignore_intents_;
}
 void InternalRangeLookupRequest::set_ignore_intents(bool value) {
  set_has_ignore_intents();
  ignore_intents_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalRangeLookupRequest.ignore_intents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalRangeLookupResponse::kKvheaderFieldNumber;
const int InternalRangeLookupResponse::kRangesFieldNumber;
#endif  // !_MSC_VER

InternalRangeLookupResponse::InternalRangeLookupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRangeLookupResponse)
}

void InternalRangeLookupResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalRangeLookupResponse::InternalRangeLookupResponse(const InternalRangeLookupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRangeLookupResponse)
}

void InternalRangeLookupResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRangeLookupResponse::~InternalRangeLookupResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRangeLookupResponse)
  SharedDtor();
}

void InternalRangeLookupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalRangeLookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRangeLookupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRangeLookupResponse_descriptor_;
}

const InternalRangeLookupResponse& InternalRangeLookupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRangeLookupResponse* InternalRangeLookupResponse::default_instance_ = NULL;

InternalRangeLookupResponse* InternalRangeLookupResponse::New(::google::protobuf::Arena* arena) const {
  InternalRangeLookupResponse* n = new InternalRangeLookupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalRangeLookupResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalRangeLookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRangeLookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranges;
        break;
      }

      // repeated .cockroach.proto.RangeDescriptor ranges = 2;
      case 2: {
        if (tag == 18) {
         parse_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRangeLookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRangeLookupResponse)
  return false;
#undef DO_
}

void InternalRangeLookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRangeLookupResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRangeLookupResponse)
}

::google::protobuf::uint8* InternalRangeLookupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRangeLookupResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranges(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRangeLookupResponse)
  return target;
}

int InternalRangeLookupResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRangeLookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalRangeLookupResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalRangeLookupResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRangeLookupResponse::MergeFrom(const InternalRangeLookupResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ranges_.MergeFrom(from.ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalRangeLookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeLookupResponse::CopyFrom(const InternalRangeLookupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeLookupResponse::IsInitialized() const {

  return true;
}

void InternalRangeLookupResponse::Swap(InternalRangeLookupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalRangeLookupResponse::InternalSwap(InternalRangeLookupResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalRangeLookupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRangeLookupResponse_descriptor_;
  metadata.reflection = InternalRangeLookupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalRangeLookupResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalRangeLookupResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalRangeLookupResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalRangeLookupResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalRangeLookupResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalRangeLookupResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRangeLookupResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalRangeLookupResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRangeLookupResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalRangeLookupResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalRangeLookupResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRangeLookupResponse.kvheader)
}

// repeated .cockroach.proto.RangeDescriptor ranges = 2;
int InternalRangeLookupResponse::ranges_size() const {
  return ranges_.size();
}
void InternalRangeLookupResponse::clear_ranges() {
  ranges_.Clear();
}
 const ::cockroach::proto::RangeDescriptor& InternalRangeLookupResponse::ranges(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRangeLookupResponse.ranges)
  return ranges_.Get(index);
}
 ::cockroach::proto::RangeDescriptor* InternalRangeLookupResponse::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRangeLookupResponse.ranges)
  return ranges_.Mutable(index);
}
 ::cockroach::proto::RangeDescriptor* InternalRangeLookupResponse::add_ranges() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalRangeLookupResponse.ranges)
  return ranges_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RangeDescriptor >&
InternalRangeLookupResponse::ranges() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalRangeLookupResponse.ranges)
  return ranges_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RangeDescriptor >*
InternalRangeLookupResponse::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalRangeLookupResponse.ranges)
  return &ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalHeartbeatTxnRequest::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalHeartbeatTxnRequest::InternalHeartbeatTxnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalHeartbeatTxnRequest)
}

void InternalHeartbeatTxnRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalHeartbeatTxnRequest::InternalHeartbeatTxnRequest(const InternalHeartbeatTxnRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalHeartbeatTxnRequest)
}

void InternalHeartbeatTxnRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalHeartbeatTxnRequest::~InternalHeartbeatTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalHeartbeatTxnRequest)
  SharedDtor();
}

void InternalHeartbeatTxnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalHeartbeatTxnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalHeartbeatTxnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalHeartbeatTxnRequest_descriptor_;
}

const InternalHeartbeatTxnRequest& InternalHeartbeatTxnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalHeartbeatTxnRequest* InternalHeartbeatTxnRequest::default_instance_ = NULL;

InternalHeartbeatTxnRequest* InternalHeartbeatTxnRequest::New(::google::protobuf::Arena* arena) const {
  InternalHeartbeatTxnRequest* n = new InternalHeartbeatTxnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalHeartbeatTxnRequest::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalHeartbeatTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalHeartbeatTxnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalHeartbeatTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalHeartbeatTxnRequest)
  return false;
#undef DO_
}

void InternalHeartbeatTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalHeartbeatTxnRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalHeartbeatTxnRequest)
}

::google::protobuf::uint8* InternalHeartbeatTxnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalHeartbeatTxnRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalHeartbeatTxnRequest)
  return target;
}

int InternalHeartbeatTxnRequest::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalHeartbeatTxnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalHeartbeatTxnRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalHeartbeatTxnRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalHeartbeatTxnRequest::MergeFrom(const InternalHeartbeatTxnRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalHeartbeatTxnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalHeartbeatTxnRequest::CopyFrom(const InternalHeartbeatTxnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalHeartbeatTxnRequest::IsInitialized() const {

  return true;
}

void InternalHeartbeatTxnRequest::Swap(InternalHeartbeatTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalHeartbeatTxnRequest::InternalSwap(InternalHeartbeatTxnRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalHeartbeatTxnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalHeartbeatTxnRequest_descriptor_;
  metadata.reflection = InternalHeartbeatTxnRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalHeartbeatTxnRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalHeartbeatTxnRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalHeartbeatTxnRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalHeartbeatTxnRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalHeartbeatTxnRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalHeartbeatTxnRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalHeartbeatTxnRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalHeartbeatTxnRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalHeartbeatTxnRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalHeartbeatTxnRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalHeartbeatTxnRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalHeartbeatTxnRequest.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalHeartbeatTxnResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalHeartbeatTxnResponse::InternalHeartbeatTxnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalHeartbeatTxnResponse)
}

void InternalHeartbeatTxnResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalHeartbeatTxnResponse::InternalHeartbeatTxnResponse(const InternalHeartbeatTxnResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalHeartbeatTxnResponse)
}

void InternalHeartbeatTxnResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalHeartbeatTxnResponse::~InternalHeartbeatTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalHeartbeatTxnResponse)
  SharedDtor();
}

void InternalHeartbeatTxnResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalHeartbeatTxnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalHeartbeatTxnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalHeartbeatTxnResponse_descriptor_;
}

const InternalHeartbeatTxnResponse& InternalHeartbeatTxnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalHeartbeatTxnResponse* InternalHeartbeatTxnResponse::default_instance_ = NULL;

InternalHeartbeatTxnResponse* InternalHeartbeatTxnResponse::New(::google::protobuf::Arena* arena) const {
  InternalHeartbeatTxnResponse* n = new InternalHeartbeatTxnResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalHeartbeatTxnResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalHeartbeatTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalHeartbeatTxnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalHeartbeatTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalHeartbeatTxnResponse)
  return false;
#undef DO_
}

void InternalHeartbeatTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalHeartbeatTxnResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalHeartbeatTxnResponse)
}

::google::protobuf::uint8* InternalHeartbeatTxnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalHeartbeatTxnResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalHeartbeatTxnResponse)
  return target;
}

int InternalHeartbeatTxnResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalHeartbeatTxnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalHeartbeatTxnResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalHeartbeatTxnResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalHeartbeatTxnResponse::MergeFrom(const InternalHeartbeatTxnResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalHeartbeatTxnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalHeartbeatTxnResponse::CopyFrom(const InternalHeartbeatTxnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalHeartbeatTxnResponse::IsInitialized() const {

  return true;
}

void InternalHeartbeatTxnResponse::Swap(InternalHeartbeatTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalHeartbeatTxnResponse::InternalSwap(InternalHeartbeatTxnResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalHeartbeatTxnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalHeartbeatTxnResponse_descriptor_;
  metadata.reflection = InternalHeartbeatTxnResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalHeartbeatTxnResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalHeartbeatTxnResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalHeartbeatTxnResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalHeartbeatTxnResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalHeartbeatTxnResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalHeartbeatTxnResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalHeartbeatTxnResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalHeartbeatTxnResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalHeartbeatTxnResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalHeartbeatTxnResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalHeartbeatTxnResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalHeartbeatTxnResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalGCRequest_GCKey::kKeyFieldNumber;
const int InternalGCRequest_GCKey::kTimestampFieldNumber;
#endif  // !_MSC_VER

InternalGCRequest_GCKey::InternalGCRequest_GCKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCRequest.GCKey)
}

void InternalGCRequest_GCKey::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
}

InternalGCRequest_GCKey::InternalGCRequest_GCKey(const InternalGCRequest_GCKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCRequest.GCKey)
}

void InternalGCRequest_GCKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCRequest_GCKey::~InternalGCRequest_GCKey() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCRequest.GCKey)
  SharedDtor();
}

void InternalGCRequest_GCKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void InternalGCRequest_GCKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCRequest_GCKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCRequest_GCKey_descriptor_;
}

const InternalGCRequest_GCKey& InternalGCRequest_GCKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCRequest_GCKey* InternalGCRequest_GCKey::default_instance_ = NULL;

InternalGCRequest_GCKey* InternalGCRequest_GCKey::New(::google::protobuf::Arena* arena) const {
  InternalGCRequest_GCKey* n = new InternalGCRequest_GCKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalGCRequest_GCKey::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalGCRequest_GCKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCRequest.GCKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCRequest.GCKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCRequest.GCKey)
  return false;
#undef DO_
}

void InternalGCRequest_GCKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCRequest.GCKey)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCRequest.GCKey)
}

::google::protobuf::uint8* InternalGCRequest_GCKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCRequest.GCKey)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCRequest.GCKey)
  return target;
}

int InternalGCRequest_GCKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.proto.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCRequest_GCKey::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalGCRequest_GCKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalGCRequest_GCKey>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCRequest_GCKey::MergeFrom(const InternalGCRequest_GCKey& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalGCRequest_GCKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCRequest_GCKey::CopyFrom(const InternalGCRequest_GCKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCRequest_GCKey::IsInitialized() const {

  return true;
}

void InternalGCRequest_GCKey::Swap(InternalGCRequest_GCKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalGCRequest_GCKey::InternalSwap(InternalGCRequest_GCKey* other) {
  key_.Swap(&other->key_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalGCRequest_GCKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCRequest_GCKey_descriptor_;
  metadata.reflection = InternalGCRequest_GCKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InternalGCRequest::kKvheaderFieldNumber;
const int InternalGCRequest::kGcMetaFieldNumber;
const int InternalGCRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

InternalGCRequest::InternalGCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCRequest)
}

void InternalGCRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
  gc_meta_ = const_cast< ::cockroach::proto::GCMetadata*>(&::cockroach::proto::GCMetadata::default_instance());
}

InternalGCRequest::InternalGCRequest(const InternalGCRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCRequest)
}

void InternalGCRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  gc_meta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCRequest::~InternalGCRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCRequest)
  SharedDtor();
}

void InternalGCRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
    delete gc_meta_;
  }
}

void InternalGCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCRequest_descriptor_;
}

const InternalGCRequest& InternalGCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCRequest* InternalGCRequest::default_instance_ = NULL;

InternalGCRequest* InternalGCRequest::New(::google::protobuf::Arena* arena) const {
  InternalGCRequest* n = new InternalGCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalGCRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
    if (has_gc_meta()) {
      if (gc_meta_ != NULL) gc_meta_->::cockroach::proto::GCMetadata::Clear();
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalGCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gc_meta;
        break;
      }

      // optional .cockroach.proto.GCMetadata gc_meta = 2;
      case 2: {
        if (tag == 18) {
         parse_gc_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(input->IncrementRecursionDepth());
         parse_loop_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_keys;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCRequest)
  return false;
#undef DO_
}

void InternalGCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional .cockroach.proto.GCMetadata gc_meta = 2;
  if (has_gc_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->gc_meta_, output);
  }

  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCRequest)
}

::google::protobuf::uint8* InternalGCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional .cockroach.proto.GCMetadata gc_meta = 2;
  if (has_gc_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->gc_meta_, target);
  }

  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCRequest)
  return target;
}

int InternalGCRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional .cockroach.proto.GCMetadata gc_meta = 2;
    if (has_gc_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gc_meta_);
    }

  }
  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalGCRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalGCRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCRequest::MergeFrom(const InternalGCRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_gc_meta()) {
      mutable_gc_meta()->::cockroach::proto::GCMetadata::MergeFrom(from.gc_meta());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalGCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCRequest::CopyFrom(const InternalGCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCRequest::IsInitialized() const {

  return true;
}

void InternalGCRequest::Swap(InternalGCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalGCRequest::InternalSwap(InternalGCRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(gc_meta_, other->gc_meta_);
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalGCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCRequest_descriptor_;
  metadata.reflection = InternalGCRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalGCRequest_GCKey

// optional bytes key = 1;
bool InternalGCRequest_GCKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalGCRequest_GCKey::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalGCRequest_GCKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalGCRequest_GCKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& InternalGCRequest_GCKey::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCRequest.GCKey.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InternalGCRequest_GCKey::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalGCRequest.GCKey.key)
}
 void InternalGCRequest_GCKey::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.InternalGCRequest.GCKey.key)
}
 void InternalGCRequest_GCKey::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.InternalGCRequest.GCKey.key)
}
 ::std::string* InternalGCRequest_GCKey::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCRequest.GCKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InternalGCRequest_GCKey::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InternalGCRequest_GCKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalGCRequest.GCKey.key)
}

// optional .cockroach.proto.Timestamp timestamp = 2;
bool InternalGCRequest_GCKey::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalGCRequest_GCKey::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalGCRequest_GCKey::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalGCRequest_GCKey::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
 const ::cockroach::proto::Timestamp& InternalGCRequest_GCKey::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCRequest.GCKey.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
 ::cockroach::proto::Timestamp* InternalGCRequest_GCKey::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCRequest.GCKey.timestamp)
  return timestamp_;
}
 ::cockroach::proto::Timestamp* InternalGCRequest_GCKey::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
 void InternalGCRequest_GCKey::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalGCRequest.GCKey.timestamp)
}

// -------------------------------------------------------------------

// InternalGCRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalGCRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalGCRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalGCRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalGCRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalGCRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalGCRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalGCRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalGCRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalGCRequest.kvheader)
}

// optional .cockroach.proto.GCMetadata gc_meta = 2;
bool InternalGCRequest::has_gc_meta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalGCRequest::set_has_gc_meta() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalGCRequest::clear_has_gc_meta() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalGCRequest::clear_gc_meta() {
  if (gc_meta_ != NULL) gc_meta_->::cockroach::proto::GCMetadata::Clear();
  clear_has_gc_meta();
}
 const ::cockroach::proto::GCMetadata& InternalGCRequest::gc_meta() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCRequest.gc_meta)
  return gc_meta_ != NULL ? *gc_meta_ : *default_instance_->gc_meta_;
}
 ::cockroach::proto::GCMetadata* InternalGCRequest::mutable_gc_meta() {
  set_has_gc_meta();
  if (gc_meta_ == NULL) {
    gc_meta_ = new ::cockroach::proto::GCMetadata;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCRequest.gc_meta)
  return gc_meta_;
}
 ::cockroach::proto::GCMetadata* InternalGCRequest::release_gc_meta() {
  clear_has_gc_meta();
  ::cockroach::proto::GCMetadata* temp = gc_meta_;
  gc_meta_ = NULL;
  return temp;
}
 void InternalGCRequest::set_allocated_gc_meta(::cockroach::proto::GCMetadata* gc_meta) {
  delete gc_meta_;
  gc_meta_ = gc_meta;
  if (gc_meta) {
    set_has_gc_meta();
  } else {
    clear_has_gc_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalGCRequest.gc_meta)
}

// repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
int InternalGCRequest::keys_size() const {
  return keys_.size();
}
void InternalGCRequest::clear_keys() {
  keys_.Clear();
}
 const ::cockroach::proto::InternalGCRequest_GCKey& InternalGCRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCRequest.keys)
  return keys_.Get(index);
}
 ::cockroach::proto::InternalGCRequest_GCKey* InternalGCRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCRequest.keys)
  return keys_.Mutable(index);
}
 ::cockroach::proto::InternalGCRequest_GCKey* InternalGCRequest::add_keys() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalGCRequest.keys)
  return keys_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalGCRequest_GCKey >&
InternalGCRequest::keys() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalGCRequest.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalGCRequest_GCKey >*
InternalGCRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalGCRequest.keys)
  return &keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalGCResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalGCResponse::InternalGCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCResponse)
}

void InternalGCResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalGCResponse::InternalGCResponse(const InternalGCResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCResponse)
}

void InternalGCResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCResponse::~InternalGCResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCResponse)
  SharedDtor();
}

void InternalGCResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCResponse_descriptor_;
}

const InternalGCResponse& InternalGCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCResponse* InternalGCResponse::default_instance_ = NULL;

InternalGCResponse* InternalGCResponse::New(::google::protobuf::Arena* arena) const {
  InternalGCResponse* n = new InternalGCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalGCResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCResponse)
  return false;
#undef DO_
}

void InternalGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCResponse)
}

::google::protobuf::uint8* InternalGCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCResponse)
  return target;
}

int InternalGCResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalGCResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalGCResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCResponse::MergeFrom(const InternalGCResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCResponse::CopyFrom(const InternalGCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCResponse::IsInitialized() const {

  return true;
}

void InternalGCResponse::Swap(InternalGCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalGCResponse::InternalSwap(InternalGCResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalGCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCResponse_descriptor_;
  metadata.reflection = InternalGCResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalGCResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalGCResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalGCResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalGCResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalGCResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalGCResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalGCResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalGCResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalGCResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalGCResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalGCResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalGCResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalPushTxnRequest::kKvheaderFieldNumber;
const int InternalPushTxnRequest::kPusheeTxnFieldNumber;
const int InternalPushTxnRequest::kNowFieldNumber;
const int InternalPushTxnRequest::kPushTypeFieldNumber;
const int InternalPushTxnRequest::kRangeLookupFieldNumber;
#endif  // !_MSC_VER

InternalPushTxnRequest::InternalPushTxnRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalPushTxnRequest)
}

void InternalPushTxnRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
  pushee_txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
  now_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
}

InternalPushTxnRequest::InternalPushTxnRequest(const InternalPushTxnRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalPushTxnRequest)
}

void InternalPushTxnRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  pushee_txn_ = NULL;
  now_ = NULL;
  push_type_ = 0;
  range_lookup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalPushTxnRequest::~InternalPushTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalPushTxnRequest)
  SharedDtor();
}

void InternalPushTxnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
    delete pushee_txn_;
    delete now_;
  }
}

void InternalPushTxnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalPushTxnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalPushTxnRequest_descriptor_;
}

const InternalPushTxnRequest& InternalPushTxnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalPushTxnRequest* InternalPushTxnRequest::default_instance_ = NULL;

InternalPushTxnRequest* InternalPushTxnRequest::New(::google::protobuf::Arena* arena) const {
  InternalPushTxnRequest* n = new InternalPushTxnRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalPushTxnRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalPushTxnRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(push_type_, range_lookup_);
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
    if (has_pushee_txn()) {
      if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
    }
    if (has_now()) {
      if (now_ != NULL) now_->::cockroach::proto::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalPushTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalPushTxnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pushee_txn;
        break;
      }

      // optional .cockroach.proto.Transaction pushee_txn = 2;
      case 2: {
        if (tag == 18) {
         parse_pushee_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_now;
        break;
      }

      // optional .cockroach.proto.Timestamp now = 3;
      case 3: {
        if (tag == 26) {
         parse_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_push_type;
        break;
      }

      // optional .cockroach.proto.PushTxnType push_type = 4;
      case 4: {
        if (tag == 32) {
         parse_push_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::proto::PushTxnType_IsValid(value)) {
            set_push_type(static_cast< ::cockroach::proto::PushTxnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_range_lookup;
        break;
      }

      // optional bool range_lookup = 5;
      case 5: {
        if (tag == 40) {
         parse_range_lookup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &range_lookup_)));
          set_has_range_lookup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalPushTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalPushTxnRequest)
  return false;
#undef DO_
}

void InternalPushTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalPushTxnRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pushee_txn_, output);
  }

  // optional .cockroach.proto.Timestamp now = 3;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->now_, output);
  }

  // optional .cockroach.proto.PushTxnType push_type = 4;
  if (has_push_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->push_type(), output);
  }

  // optional bool range_lookup = 5;
  if (has_range_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->range_lookup(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalPushTxnRequest)
}

::google::protobuf::uint8* InternalPushTxnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalPushTxnRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pushee_txn_, target);
  }

  // optional .cockroach.proto.Timestamp now = 3;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->now_, target);
  }

  // optional .cockroach.proto.PushTxnType push_type = 4;
  if (has_push_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->push_type(), target);
  }

  // optional bool range_lookup = 5;
  if (has_range_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->range_lookup(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalPushTxnRequest)
  return target;
}

int InternalPushTxnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional .cockroach.proto.Transaction pushee_txn = 2;
    if (has_pushee_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pushee_txn_);
    }

    // optional .cockroach.proto.Timestamp now = 3;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->now_);
    }

    // optional .cockroach.proto.PushTxnType push_type = 4;
    if (has_push_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->push_type());
    }

    // optional bool range_lookup = 5;
    if (has_range_lookup()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalPushTxnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalPushTxnRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalPushTxnRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalPushTxnRequest::MergeFrom(const InternalPushTxnRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::cockroach::proto::Transaction::MergeFrom(from.pushee_txn());
    }
    if (from.has_now()) {
      mutable_now()->::cockroach::proto::Timestamp::MergeFrom(from.now());
    }
    if (from.has_push_type()) {
      set_push_type(from.push_type());
    }
    if (from.has_range_lookup()) {
      set_range_lookup(from.range_lookup());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalPushTxnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalPushTxnRequest::CopyFrom(const InternalPushTxnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPushTxnRequest::IsInitialized() const {

  return true;
}

void InternalPushTxnRequest::Swap(InternalPushTxnRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalPushTxnRequest::InternalSwap(InternalPushTxnRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(pushee_txn_, other->pushee_txn_);
  std::swap(now_, other->now_);
  std::swap(push_type_, other->push_type_);
  std::swap(range_lookup_, other->range_lookup_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalPushTxnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalPushTxnRequest_descriptor_;
  metadata.reflection = InternalPushTxnRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalPushTxnRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalPushTxnRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalPushTxnRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalPushTxnRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalPushTxnRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalPushTxnRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalPushTxnRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalPushTxnRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalPushTxnRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalPushTxnRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalPushTxnRequest.kvheader)
}

// optional .cockroach.proto.Transaction pushee_txn = 2;
bool InternalPushTxnRequest::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalPushTxnRequest::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalPushTxnRequest::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalPushTxnRequest::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
  clear_has_pushee_txn();
}
 const ::cockroach::proto::Transaction& InternalPushTxnRequest::pushee_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnRequest.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
 ::cockroach::proto::Transaction* InternalPushTxnRequest::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) {
    pushee_txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalPushTxnRequest.pushee_txn)
  return pushee_txn_;
}
 ::cockroach::proto::Transaction* InternalPushTxnRequest::release_pushee_txn() {
  clear_has_pushee_txn();
  ::cockroach::proto::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
 void InternalPushTxnRequest::set_allocated_pushee_txn(::cockroach::proto::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalPushTxnRequest.pushee_txn)
}

// optional .cockroach.proto.Timestamp now = 3;
bool InternalPushTxnRequest::has_now() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalPushTxnRequest::set_has_now() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalPushTxnRequest::clear_has_now() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalPushTxnRequest::clear_now() {
  if (now_ != NULL) now_->::cockroach::proto::Timestamp::Clear();
  clear_has_now();
}
 const ::cockroach::proto::Timestamp& InternalPushTxnRequest::now() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnRequest.now)
  return now_ != NULL ? *now_ : *default_instance_->now_;
}
 ::cockroach::proto::Timestamp* InternalPushTxnRequest::mutable_now() {
  set_has_now();
  if (now_ == NULL) {
    now_ = new ::cockroach::proto::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalPushTxnRequest.now)
  return now_;
}
 ::cockroach::proto::Timestamp* InternalPushTxnRequest::release_now() {
  clear_has_now();
  ::cockroach::proto::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
 void InternalPushTxnRequest::set_allocated_now(::cockroach::proto::Timestamp* now) {
  delete now_;
  now_ = now;
  if (now) {
    set_has_now();
  } else {
    clear_has_now();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalPushTxnRequest.now)
}

// optional .cockroach.proto.PushTxnType push_type = 4;
bool InternalPushTxnRequest::has_push_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalPushTxnRequest::set_has_push_type() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalPushTxnRequest::clear_has_push_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalPushTxnRequest::clear_push_type() {
  push_type_ = 0;
  clear_has_push_type();
}
 ::cockroach::proto::PushTxnType InternalPushTxnRequest::push_type() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnRequest.push_type)
  return static_cast< ::cockroach::proto::PushTxnType >(push_type_);
}
 void InternalPushTxnRequest::set_push_type(::cockroach::proto::PushTxnType value) {
  assert(::cockroach::proto::PushTxnType_IsValid(value));
  set_has_push_type();
  push_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalPushTxnRequest.push_type)
}

// optional bool range_lookup = 5;
bool InternalPushTxnRequest::has_range_lookup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InternalPushTxnRequest::set_has_range_lookup() {
  _has_bits_[0] |= 0x00000010u;
}
void InternalPushTxnRequest::clear_has_range_lookup() {
  _has_bits_[0] &= ~0x00000010u;
}
void InternalPushTxnRequest::clear_range_lookup() {
  range_lookup_ = false;
  clear_has_range_lookup();
}
 bool InternalPushTxnRequest::range_lookup() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnRequest.range_lookup)
  return range_lookup_;
}
 void InternalPushTxnRequest::set_range_lookup(bool value) {
  set_has_range_lookup();
  range_lookup_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalPushTxnRequest.range_lookup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalPushTxnResponse::kKvheaderFieldNumber;
const int InternalPushTxnResponse::kPusheeTxnFieldNumber;
#endif  // !_MSC_VER

InternalPushTxnResponse::InternalPushTxnResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalPushTxnResponse)
}

void InternalPushTxnResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
  pushee_txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
}

InternalPushTxnResponse::InternalPushTxnResponse(const InternalPushTxnResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalPushTxnResponse)
}

void InternalPushTxnResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  pushee_txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalPushTxnResponse::~InternalPushTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalPushTxnResponse)
  SharedDtor();
}

void InternalPushTxnResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
    delete pushee_txn_;
  }
}

void InternalPushTxnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalPushTxnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalPushTxnResponse_descriptor_;
}

const InternalPushTxnResponse& InternalPushTxnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalPushTxnResponse* InternalPushTxnResponse::default_instance_ = NULL;

InternalPushTxnResponse* InternalPushTxnResponse::New(::google::protobuf::Arena* arena) const {
  InternalPushTxnResponse* n = new InternalPushTxnResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalPushTxnResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
    }
    if (has_pushee_txn()) {
      if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalPushTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalPushTxnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pushee_txn;
        break;
      }

      // optional .cockroach.proto.Transaction pushee_txn = 2;
      case 2: {
        if (tag == 18) {
         parse_pushee_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalPushTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalPushTxnResponse)
  return false;
#undef DO_
}

void InternalPushTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalPushTxnResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pushee_txn_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalPushTxnResponse)
}

::google::protobuf::uint8* InternalPushTxnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalPushTxnResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->pushee_txn_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalPushTxnResponse)
  return target;
}

int InternalPushTxnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .cockroach.proto.KVResponseHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional .cockroach.proto.Transaction pushee_txn = 2;
    if (has_pushee_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pushee_txn_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalPushTxnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalPushTxnResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalPushTxnResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalPushTxnResponse::MergeFrom(const InternalPushTxnResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::cockroach::proto::Transaction::MergeFrom(from.pushee_txn());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalPushTxnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalPushTxnResponse::CopyFrom(const InternalPushTxnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPushTxnResponse::IsInitialized() const {

  return true;
}

void InternalPushTxnResponse::Swap(InternalPushTxnResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalPushTxnResponse::InternalSwap(InternalPushTxnResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(pushee_txn_, other->pushee_txn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalPushTxnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalPushTxnResponse_descriptor_;
  metadata.reflection = InternalPushTxnResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalPushTxnResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalPushTxnResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalPushTxnResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalPushTxnResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalPushTxnResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalPushTxnResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalPushTxnResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalPushTxnResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalPushTxnResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalPushTxnResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalPushTxnResponse.kvheader)
}

// optional .cockroach.proto.Transaction pushee_txn = 2;
bool InternalPushTxnResponse::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalPushTxnResponse::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalPushTxnResponse::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalPushTxnResponse::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
  clear_has_pushee_txn();
}
 const ::cockroach::proto::Transaction& InternalPushTxnResponse::pushee_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalPushTxnResponse.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
 ::cockroach::proto::Transaction* InternalPushTxnResponse::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) {
    pushee_txn_ = new ::cockroach::proto::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalPushTxnResponse.pushee_txn)
  return pushee_txn_;
}
 ::cockroach::proto::Transaction* InternalPushTxnResponse::release_pushee_txn() {
  clear_has_pushee_txn();
  ::cockroach::proto::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
 void InternalPushTxnResponse::set_allocated_pushee_txn(::cockroach::proto::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalPushTxnResponse.pushee_txn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentRequest::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentRequest::InternalResolveIntentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentRequest)
}

void InternalResolveIntentRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalResolveIntentRequest::InternalResolveIntentRequest(const InternalResolveIntentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentRequest)
}

void InternalResolveIntentRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentRequest::~InternalResolveIntentRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentRequest)
  SharedDtor();
}

void InternalResolveIntentRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalResolveIntentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentRequest_descriptor_;
}

const InternalResolveIntentRequest& InternalResolveIntentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentRequest* InternalResolveIntentRequest::default_instance_ = NULL;

InternalResolveIntentRequest* InternalResolveIntentRequest::New(::google::protobuf::Arena* arena) const {
  InternalResolveIntentRequest* n = new InternalResolveIntentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalResolveIntentRequest::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalResolveIntentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentRequest)
  return false;
#undef DO_
}

void InternalResolveIntentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentRequest)
}

::google::protobuf::uint8* InternalResolveIntentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentRequest)
  return target;
}

int InternalResolveIntentRequest::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalResolveIntentRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalResolveIntentRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentRequest::MergeFrom(const InternalResolveIntentRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalResolveIntentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentRequest::CopyFrom(const InternalResolveIntentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentRequest::IsInitialized() const {

  return true;
}

void InternalResolveIntentRequest::Swap(InternalResolveIntentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalResolveIntentRequest::InternalSwap(InternalResolveIntentRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalResolveIntentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentRequest_descriptor_;
  metadata.reflection = InternalResolveIntentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalResolveIntentRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalResolveIntentRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalResolveIntentRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalResolveIntentRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalResolveIntentRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalResolveIntentRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResolveIntentRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalResolveIntentRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResolveIntentRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalResolveIntentRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalResolveIntentRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResolveIntentRequest.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentResponse::InternalResolveIntentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentResponse)
}

void InternalResolveIntentResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalResolveIntentResponse::InternalResolveIntentResponse(const InternalResolveIntentResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentResponse)
}

void InternalResolveIntentResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentResponse::~InternalResolveIntentResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentResponse)
  SharedDtor();
}

void InternalResolveIntentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalResolveIntentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentResponse_descriptor_;
}

const InternalResolveIntentResponse& InternalResolveIntentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentResponse* InternalResolveIntentResponse::default_instance_ = NULL;

InternalResolveIntentResponse* InternalResolveIntentResponse::New(::google::protobuf::Arena* arena) const {
  InternalResolveIntentResponse* n = new InternalResolveIntentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalResolveIntentResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalResolveIntentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentResponse)
  return false;
#undef DO_
}

void InternalResolveIntentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentResponse)
}

::google::protobuf::uint8* InternalResolveIntentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentResponse)
  return target;
}

int InternalResolveIntentResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalResolveIntentResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalResolveIntentResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentResponse::MergeFrom(const InternalResolveIntentResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalResolveIntentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentResponse::CopyFrom(const InternalResolveIntentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentResponse::IsInitialized() const {

  return true;
}

void InternalResolveIntentResponse::Swap(InternalResolveIntentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalResolveIntentResponse::InternalSwap(InternalResolveIntentResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalResolveIntentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentResponse_descriptor_;
  metadata.reflection = InternalResolveIntentResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalResolveIntentResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalResolveIntentResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalResolveIntentResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalResolveIntentResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalResolveIntentResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalResolveIntentResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResolveIntentResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalResolveIntentResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResolveIntentResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalResolveIntentResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalResolveIntentResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResolveIntentResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentRangeRequest::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentRangeRequest::InternalResolveIntentRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentRangeRequest)
}

void InternalResolveIntentRangeRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalResolveIntentRangeRequest::InternalResolveIntentRangeRequest(const InternalResolveIntentRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentRangeRequest)
}

void InternalResolveIntentRangeRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentRangeRequest::~InternalResolveIntentRangeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentRangeRequest)
  SharedDtor();
}

void InternalResolveIntentRangeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalResolveIntentRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentRangeRequest_descriptor_;
}

const InternalResolveIntentRangeRequest& InternalResolveIntentRangeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentRangeRequest* InternalResolveIntentRangeRequest::default_instance_ = NULL;

InternalResolveIntentRangeRequest* InternalResolveIntentRangeRequest::New(::google::protobuf::Arena* arena) const {
  InternalResolveIntentRangeRequest* n = new InternalResolveIntentRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalResolveIntentRangeRequest::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalResolveIntentRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentRangeRequest)
  return false;
#undef DO_
}

void InternalResolveIntentRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentRangeRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentRangeRequest)
}

::google::protobuf::uint8* InternalResolveIntentRangeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentRangeRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentRangeRequest)
  return target;
}

int InternalResolveIntentRangeRequest::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalResolveIntentRangeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalResolveIntentRangeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentRangeRequest::MergeFrom(const InternalResolveIntentRangeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalResolveIntentRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentRangeRequest::CopyFrom(const InternalResolveIntentRangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentRangeRequest::IsInitialized() const {

  return true;
}

void InternalResolveIntentRangeRequest::Swap(InternalResolveIntentRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalResolveIntentRangeRequest::InternalSwap(InternalResolveIntentRangeRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalResolveIntentRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentRangeRequest_descriptor_;
  metadata.reflection = InternalResolveIntentRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalResolveIntentRangeRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalResolveIntentRangeRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalResolveIntentRangeRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalResolveIntentRangeRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalResolveIntentRangeRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalResolveIntentRangeRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResolveIntentRangeRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalResolveIntentRangeRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResolveIntentRangeRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalResolveIntentRangeRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalResolveIntentRangeRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResolveIntentRangeRequest.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentRangeResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentRangeResponse::InternalResolveIntentRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentRangeResponse)
}

void InternalResolveIntentRangeResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalResolveIntentRangeResponse::InternalResolveIntentRangeResponse(const InternalResolveIntentRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentRangeResponse)
}

void InternalResolveIntentRangeResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentRangeResponse::~InternalResolveIntentRangeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentRangeResponse)
  SharedDtor();
}

void InternalResolveIntentRangeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalResolveIntentRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentRangeResponse_descriptor_;
}

const InternalResolveIntentRangeResponse& InternalResolveIntentRangeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentRangeResponse* InternalResolveIntentRangeResponse::default_instance_ = NULL;

InternalResolveIntentRangeResponse* InternalResolveIntentRangeResponse::New(::google::protobuf::Arena* arena) const {
  InternalResolveIntentRangeResponse* n = new InternalResolveIntentRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalResolveIntentRangeResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalResolveIntentRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentRangeResponse)
  return false;
#undef DO_
}

void InternalResolveIntentRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentRangeResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentRangeResponse)
}

::google::protobuf::uint8* InternalResolveIntentRangeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentRangeResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentRangeResponse)
  return target;
}

int InternalResolveIntentRangeResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalResolveIntentRangeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalResolveIntentRangeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentRangeResponse::MergeFrom(const InternalResolveIntentRangeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalResolveIntentRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentRangeResponse::CopyFrom(const InternalResolveIntentRangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentRangeResponse::IsInitialized() const {

  return true;
}

void InternalResolveIntentRangeResponse::Swap(InternalResolveIntentRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalResolveIntentRangeResponse::InternalSwap(InternalResolveIntentRangeResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalResolveIntentRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentRangeResponse_descriptor_;
  metadata.reflection = InternalResolveIntentRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalResolveIntentRangeResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalResolveIntentRangeResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalResolveIntentRangeResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalResolveIntentRangeResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalResolveIntentRangeResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalResolveIntentRangeResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResolveIntentRangeResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalResolveIntentRangeResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResolveIntentRangeResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalResolveIntentRangeResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalResolveIntentRangeResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResolveIntentRangeResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalMergeRequest::kKvheaderFieldNumber;
const int InternalMergeRequest::kValueFieldNumber;
#endif  // !_MSC_VER

InternalMergeRequest::InternalMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalMergeRequest)
}

void InternalMergeRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

InternalMergeRequest::InternalMergeRequest(const InternalMergeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalMergeRequest)
}

void InternalMergeRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalMergeRequest::~InternalMergeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalMergeRequest)
  SharedDtor();
}

void InternalMergeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
    delete value_;
  }
}

void InternalMergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalMergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalMergeRequest_descriptor_;
}

const InternalMergeRequest& InternalMergeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalMergeRequest* InternalMergeRequest::default_instance_ = NULL;

InternalMergeRequest* InternalMergeRequest::New(::google::protobuf::Arena* arena) const {
  InternalMergeRequest* n = new InternalMergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalMergeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalMergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalMergeRequest)
  return false;
#undef DO_
}

void InternalMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalMergeRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalMergeRequest)
}

::google::protobuf::uint8* InternalMergeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalMergeRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalMergeRequest)
  return target;
}

int InternalMergeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional .cockroach.proto.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalMergeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalMergeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalMergeRequest::MergeFrom(const InternalMergeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalMergeRequest::CopyFrom(const InternalMergeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalMergeRequest::IsInitialized() const {

  return true;
}

void InternalMergeRequest::Swap(InternalMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalMergeRequest::InternalSwap(InternalMergeRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalMergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalMergeRequest_descriptor_;
  metadata.reflection = InternalMergeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalMergeRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalMergeRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalMergeRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalMergeRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalMergeRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalMergeRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalMergeRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalMergeRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalMergeRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalMergeRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalMergeRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalMergeRequest.kvheader)
}

// optional .cockroach.proto.Value value = 2;
bool InternalMergeRequest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalMergeRequest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalMergeRequest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalMergeRequest::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
 const ::cockroach::proto::Value& InternalMergeRequest::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalMergeRequest.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
 ::cockroach::proto::Value* InternalMergeRequest::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::proto::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalMergeRequest.value)
  return value_;
}
 ::cockroach::proto::Value* InternalMergeRequest::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
 void InternalMergeRequest::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalMergeRequest.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalMergeResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalMergeResponse::InternalMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalMergeResponse)
}

void InternalMergeResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalMergeResponse::InternalMergeResponse(const InternalMergeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalMergeResponse)
}

void InternalMergeResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalMergeResponse::~InternalMergeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalMergeResponse)
  SharedDtor();
}

void InternalMergeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalMergeResponse_descriptor_;
}

const InternalMergeResponse& InternalMergeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalMergeResponse* InternalMergeResponse::default_instance_ = NULL;

InternalMergeResponse* InternalMergeResponse::New(::google::protobuf::Arena* arena) const {
  InternalMergeResponse* n = new InternalMergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalMergeResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalMergeResponse)
  return false;
#undef DO_
}

void InternalMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalMergeResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalMergeResponse)
}

::google::protobuf::uint8* InternalMergeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalMergeResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalMergeResponse)
  return target;
}

int InternalMergeResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalMergeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalMergeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalMergeResponse::MergeFrom(const InternalMergeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalMergeResponse::CopyFrom(const InternalMergeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalMergeResponse::IsInitialized() const {

  return true;
}

void InternalMergeResponse::Swap(InternalMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalMergeResponse::InternalSwap(InternalMergeResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalMergeResponse_descriptor_;
  metadata.reflection = InternalMergeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalMergeResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalMergeResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalMergeResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalMergeResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalMergeResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalMergeResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalMergeResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalMergeResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalMergeResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalMergeResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalMergeResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalMergeResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTruncateLogRequest::kKvheaderFieldNumber;
const int InternalTruncateLogRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

InternalTruncateLogRequest::InternalTruncateLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTruncateLogRequest)
}

void InternalTruncateLogRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalTruncateLogRequest::InternalTruncateLogRequest(const InternalTruncateLogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTruncateLogRequest)
}

void InternalTruncateLogRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTruncateLogRequest::~InternalTruncateLogRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTruncateLogRequest)
  SharedDtor();
}

void InternalTruncateLogRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalTruncateLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTruncateLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTruncateLogRequest_descriptor_;
}

const InternalTruncateLogRequest& InternalTruncateLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTruncateLogRequest* InternalTruncateLogRequest::default_instance_ = NULL;

InternalTruncateLogRequest* InternalTruncateLogRequest::New(::google::protobuf::Arena* arena) const {
  InternalTruncateLogRequest* n = new InternalTruncateLogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTruncateLogRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
    index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTruncateLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTruncateLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTruncateLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTruncateLogRequest)
  return false;
#undef DO_
}

void InternalTruncateLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTruncateLogRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTruncateLogRequest)
}

::google::protobuf::uint8* InternalTruncateLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTruncateLogRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTruncateLogRequest)
  return target;
}

int InternalTruncateLogRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTruncateLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTruncateLogRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTruncateLogRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTruncateLogRequest::MergeFrom(const InternalTruncateLogRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTruncateLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTruncateLogRequest::CopyFrom(const InternalTruncateLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTruncateLogRequest::IsInitialized() const {

  return true;
}

void InternalTruncateLogRequest::Swap(InternalTruncateLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTruncateLogRequest::InternalSwap(InternalTruncateLogRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTruncateLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTruncateLogRequest_descriptor_;
  metadata.reflection = InternalTruncateLogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTruncateLogRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalTruncateLogRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTruncateLogRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTruncateLogRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTruncateLogRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalTruncateLogRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTruncateLogRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalTruncateLogRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTruncateLogRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalTruncateLogRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalTruncateLogRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalTruncateLogRequest.kvheader)
}

// optional uint64 index = 2;
bool InternalTruncateLogRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTruncateLogRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTruncateLogRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTruncateLogRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 InternalTruncateLogRequest::index() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTruncateLogRequest.index)
  return index_;
}
 void InternalTruncateLogRequest::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTruncateLogRequest.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTruncateLogResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalTruncateLogResponse::InternalTruncateLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTruncateLogResponse)
}

void InternalTruncateLogResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalTruncateLogResponse::InternalTruncateLogResponse(const InternalTruncateLogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTruncateLogResponse)
}

void InternalTruncateLogResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTruncateLogResponse::~InternalTruncateLogResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTruncateLogResponse)
  SharedDtor();
}

void InternalTruncateLogResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalTruncateLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTruncateLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTruncateLogResponse_descriptor_;
}

const InternalTruncateLogResponse& InternalTruncateLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTruncateLogResponse* InternalTruncateLogResponse::default_instance_ = NULL;

InternalTruncateLogResponse* InternalTruncateLogResponse::New(::google::protobuf::Arena* arena) const {
  InternalTruncateLogResponse* n = new InternalTruncateLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTruncateLogResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTruncateLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTruncateLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTruncateLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTruncateLogResponse)
  return false;
#undef DO_
}

void InternalTruncateLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTruncateLogResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTruncateLogResponse)
}

::google::protobuf::uint8* InternalTruncateLogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTruncateLogResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTruncateLogResponse)
  return target;
}

int InternalTruncateLogResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTruncateLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTruncateLogResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTruncateLogResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTruncateLogResponse::MergeFrom(const InternalTruncateLogResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTruncateLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTruncateLogResponse::CopyFrom(const InternalTruncateLogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTruncateLogResponse::IsInitialized() const {

  return true;
}

void InternalTruncateLogResponse::Swap(InternalTruncateLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTruncateLogResponse::InternalSwap(InternalTruncateLogResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTruncateLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTruncateLogResponse_descriptor_;
  metadata.reflection = InternalTruncateLogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTruncateLogResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalTruncateLogResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTruncateLogResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTruncateLogResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTruncateLogResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalTruncateLogResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTruncateLogResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalTruncateLogResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTruncateLogResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalTruncateLogResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalTruncateLogResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalTruncateLogResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalLeaderLeaseRequest::kKvheaderFieldNumber;
const int InternalLeaderLeaseRequest::kLeaseFieldNumber;
#endif  // !_MSC_VER

InternalLeaderLeaseRequest::InternalLeaderLeaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalLeaderLeaseRequest)
}

void InternalLeaderLeaseRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
  lease_ = const_cast< ::cockroach::proto::Lease*>(&::cockroach::proto::Lease::default_instance());
}

InternalLeaderLeaseRequest::InternalLeaderLeaseRequest(const InternalLeaderLeaseRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalLeaderLeaseRequest)
}

void InternalLeaderLeaseRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  lease_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalLeaderLeaseRequest::~InternalLeaderLeaseRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalLeaderLeaseRequest)
  SharedDtor();
}

void InternalLeaderLeaseRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
    delete lease_;
  }
}

void InternalLeaderLeaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalLeaderLeaseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalLeaderLeaseRequest_descriptor_;
}

const InternalLeaderLeaseRequest& InternalLeaderLeaseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalLeaderLeaseRequest* InternalLeaderLeaseRequest::default_instance_ = NULL;

InternalLeaderLeaseRequest* InternalLeaderLeaseRequest::New(::google::protobuf::Arena* arena) const {
  InternalLeaderLeaseRequest* n = new InternalLeaderLeaseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalLeaderLeaseRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_kvheader()) {
      if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
    }
    if (has_lease()) {
      if (lease_ != NULL) lease_->::cockroach::proto::Lease::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalLeaderLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalLeaderLeaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lease;
        break;
      }

      // optional .cockroach.proto.Lease lease = 2;
      case 2: {
        if (tag == 18) {
         parse_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalLeaderLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalLeaderLeaseRequest)
  return false;
#undef DO_
}

void InternalLeaderLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalLeaderLeaseRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // optional .cockroach.proto.Lease lease = 2;
  if (has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lease_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalLeaderLeaseRequest)
}

::google::protobuf::uint8* InternalLeaderLeaseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalLeaderLeaseRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // optional .cockroach.proto.Lease lease = 2;
  if (has_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->lease_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalLeaderLeaseRequest)
  return target;
}

int InternalLeaderLeaseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional .cockroach.proto.KVRequestHeader kvheader = 1;
    if (has_kvheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kvheader_);
    }

    // optional .cockroach.proto.Lease lease = 2;
    if (has_lease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lease_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalLeaderLeaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalLeaderLeaseRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalLeaderLeaseRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalLeaderLeaseRequest::MergeFrom(const InternalLeaderLeaseRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
    if (from.has_lease()) {
      mutable_lease()->::cockroach::proto::Lease::MergeFrom(from.lease());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalLeaderLeaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalLeaderLeaseRequest::CopyFrom(const InternalLeaderLeaseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLeaderLeaseRequest::IsInitialized() const {

  return true;
}

void InternalLeaderLeaseRequest::Swap(InternalLeaderLeaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalLeaderLeaseRequest::InternalSwap(InternalLeaderLeaseRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(lease_, other->lease_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalLeaderLeaseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalLeaderLeaseRequest_descriptor_;
  metadata.reflection = InternalLeaderLeaseRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalLeaderLeaseRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalLeaderLeaseRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalLeaderLeaseRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalLeaderLeaseRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalLeaderLeaseRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalLeaderLeaseRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalLeaderLeaseRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalLeaderLeaseRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalLeaderLeaseRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalLeaderLeaseRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalLeaderLeaseRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalLeaderLeaseRequest.kvheader)
}

// optional .cockroach.proto.Lease lease = 2;
bool InternalLeaderLeaseRequest::has_lease() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalLeaderLeaseRequest::set_has_lease() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalLeaderLeaseRequest::clear_has_lease() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalLeaderLeaseRequest::clear_lease() {
  if (lease_ != NULL) lease_->::cockroach::proto::Lease::Clear();
  clear_has_lease();
}
 const ::cockroach::proto::Lease& InternalLeaderLeaseRequest::lease() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalLeaderLeaseRequest.lease)
  return lease_ != NULL ? *lease_ : *default_instance_->lease_;
}
 ::cockroach::proto::Lease* InternalLeaderLeaseRequest::mutable_lease() {
  set_has_lease();
  if (lease_ == NULL) {
    lease_ = new ::cockroach::proto::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalLeaderLeaseRequest.lease)
  return lease_;
}
 ::cockroach::proto::Lease* InternalLeaderLeaseRequest::release_lease() {
  clear_has_lease();
  ::cockroach::proto::Lease* temp = lease_;
  lease_ = NULL;
  return temp;
}
 void InternalLeaderLeaseRequest::set_allocated_lease(::cockroach::proto::Lease* lease) {
  delete lease_;
  lease_ = lease;
  if (lease) {
    set_has_lease();
  } else {
    clear_has_lease();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalLeaderLeaseRequest.lease)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalLeaderLeaseResponse::kKvheaderFieldNumber;
#endif  // !_MSC_VER

InternalLeaderLeaseResponse::InternalLeaderLeaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalLeaderLeaseResponse)
}

void InternalLeaderLeaseResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalLeaderLeaseResponse::InternalLeaderLeaseResponse(const InternalLeaderLeaseResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalLeaderLeaseResponse)
}

void InternalLeaderLeaseResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalLeaderLeaseResponse::~InternalLeaderLeaseResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalLeaderLeaseResponse)
  SharedDtor();
}

void InternalLeaderLeaseResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalLeaderLeaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalLeaderLeaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalLeaderLeaseResponse_descriptor_;
}

const InternalLeaderLeaseResponse& InternalLeaderLeaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalLeaderLeaseResponse* InternalLeaderLeaseResponse::default_instance_ = NULL;

InternalLeaderLeaseResponse* InternalLeaderLeaseResponse::New(::google::protobuf::Arena* arena) const {
  InternalLeaderLeaseResponse* n = new InternalLeaderLeaseResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalLeaderLeaseResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalLeaderLeaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalLeaderLeaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalLeaderLeaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalLeaderLeaseResponse)
  return false;
#undef DO_
}

void InternalLeaderLeaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalLeaderLeaseResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalLeaderLeaseResponse)
}

::google::protobuf::uint8* InternalLeaderLeaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalLeaderLeaseResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalLeaderLeaseResponse)
  return target;
}

int InternalLeaderLeaseResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalLeaderLeaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalLeaderLeaseResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalLeaderLeaseResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalLeaderLeaseResponse::MergeFrom(const InternalLeaderLeaseResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalLeaderLeaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalLeaderLeaseResponse::CopyFrom(const InternalLeaderLeaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLeaderLeaseResponse::IsInitialized() const {

  return true;
}

void InternalLeaderLeaseResponse::Swap(InternalLeaderLeaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalLeaderLeaseResponse::InternalSwap(InternalLeaderLeaseResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalLeaderLeaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalLeaderLeaseResponse_descriptor_;
  metadata.reflection = InternalLeaderLeaseResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalLeaderLeaseResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalLeaderLeaseResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalLeaderLeaseResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalLeaderLeaseResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalLeaderLeaseResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalLeaderLeaseResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalLeaderLeaseResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalLeaderLeaseResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalLeaderLeaseResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalLeaderLeaseResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalLeaderLeaseResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalLeaderLeaseResponse.kvheader)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalRequestUnion::kGetFieldNumber;
const int InternalRequestUnion::kPutFieldNumber;
const int InternalRequestUnion::kConditionalPutFieldNumber;
const int InternalRequestUnion::kIncrementFieldNumber;
const int InternalRequestUnion::kDeleteFieldNumber;
const int InternalRequestUnion::kDeleteRangeFieldNumber;
const int InternalRequestUnion::kScanFieldNumber;
const int InternalRequestUnion::kEndTransactionFieldNumber;
const int InternalRequestUnion::kInternalPushTxnFieldNumber;
const int InternalRequestUnion::kInternalResolveIntentFieldNumber;
const int InternalRequestUnion::kInternalResolveIntentRangeFieldNumber;
#endif  // !_MSC_VER

InternalRequestUnion::InternalRequestUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRequestUnion)
}

void InternalRequestUnion::InitAsDefaultInstance() {
  InternalRequestUnion_default_oneof_instance_->get_ = const_cast< ::cockroach::proto::GetRequest*>(&::cockroach::proto::GetRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutRequest*>(&::cockroach::proto::PutRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutRequest*>(&::cockroach::proto::ConditionalPutRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementRequest*>(&::cockroach::proto::IncrementRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteRequest*>(&::cockroach::proto::DeleteRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeRequest*>(&::cockroach::proto::DeleteRangeRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->scan_ = const_cast< ::cockroach::proto::ScanRequest*>(&::cockroach::proto::ScanRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionRequest*>(&::cockroach::proto::EndTransactionRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnRequest*>(&::cockroach::proto::InternalPushTxnRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentRequest*>(&::cockroach::proto::InternalResolveIntentRequest::default_instance());
  InternalRequestUnion_default_oneof_instance_->internal_resolve_intent_range_ = const_cast< ::cockroach::proto::InternalResolveIntentRangeRequest*>(&::cockroach::proto::InternalResolveIntentRangeRequest::default_instance());
}

InternalRequestUnion::InternalRequestUnion(const InternalRequestUnion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRequestUnion)
}

void InternalRequestUnion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

InternalRequestUnion::~InternalRequestUnion() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRequestUnion)
  SharedDtor();
}

void InternalRequestUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void InternalRequestUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRequestUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRequestUnion_descriptor_;
}

const InternalRequestUnion& InternalRequestUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRequestUnion* InternalRequestUnion::default_instance_ = NULL;

InternalRequestUnion* InternalRequestUnion::New(::google::protobuf::Arena* arena) const {
  InternalRequestUnion* n = new InternalRequestUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalRequestUnion::clear_value() {
  switch(value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalResolveIntentRange: {
      delete value_.internal_resolve_intent_range_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void InternalRequestUnion::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalRequestUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRequestUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_put;
        break;
      }

      // optional .cockroach.proto.PutRequest put = 3;
      case 3: {
        if (tag == 26) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
      case 4: {
        if (tag == 34) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementRequest increment = 5;
      case 5: {
        if (tag == 42) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteRequest delete = 6;
      case 6: {
        if (tag == 50) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
      case 7: {
        if (tag == 58) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scan;
        break;
      }

      // optional .cockroach.proto.ScanRequest scan = 8;
      case 8: {
        if (tag == 66) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
      case 9: {
        if (tag == 74) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 30;
      case 30: {
        if (tag == 242) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 31;
      case 31: {
        if (tag == 250) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_internal_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 32;
      case 32: {
        if (tag == 258) {
         parse_internal_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRequestUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRequestUnion)
  return false;
#undef DO_
}

void InternalRequestUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRequestUnion)
  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.get_, output);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.scan_, output);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 30;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *value_.internal_push_txn_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 31;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *value_.internal_resolve_intent_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 32;
  if (has_internal_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *value_.internal_resolve_intent_range_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRequestUnion)
}

::google::protobuf::uint8* InternalRequestUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRequestUnion)
  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.get_, target);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *value_.scan_, target);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 30;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *value_.internal_push_txn_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 31;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, *value_.internal_resolve_intent_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 32;
  if (has_internal_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, *value_.internal_resolve_intent_range_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRequestUnion)
  return target;
}

int InternalRequestUnion::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.GetRequest get = 2;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.get_);
      break;
    }
    // optional .cockroach.proto.PutRequest put = 3;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementRequest increment = 5;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteRequest delete = 6;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.ScanRequest scan = 8;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.scan_);
      break;
    }
    // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 30;
    case kInternalPushTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_push_txn_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 31;
    case kInternalResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 32;
    case kInternalResolveIntentRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_range_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRequestUnion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalRequestUnion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalRequestUnion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRequestUnion::MergeFrom(const InternalRequestUnion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::proto::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::proto::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::proto::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionRequest::MergeFrom(from.end_transaction());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnRequest::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentRequest::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalResolveIntentRange: {
      mutable_internal_resolve_intent_range()->::cockroach::proto::InternalResolveIntentRangeRequest::MergeFrom(from.internal_resolve_intent_range());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalRequestUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRequestUnion::CopyFrom(const InternalRequestUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRequestUnion::IsInitialized() const {

  return true;
}

void InternalRequestUnion::Swap(InternalRequestUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalRequestUnion::InternalSwap(InternalRequestUnion* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalRequestUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRequestUnion_descriptor_;
  metadata.reflection = InternalRequestUnion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalRequestUnion

// optional .cockroach.proto.GetRequest get = 2;
bool InternalRequestUnion::has_get() const {
  return value_case() == kGet;
}
void InternalRequestUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
void InternalRequestUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GetRequest& InternalRequestUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetRequest::default_instance();
}
 ::cockroach::proto::GetRequest* InternalRequestUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.get)
  return value_.get_;
}
 ::cockroach::proto::GetRequest* InternalRequestUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetRequest* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_get(::cockroach::proto::GetRequest* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.get)
}

// optional .cockroach.proto.PutRequest put = 3;
bool InternalRequestUnion::has_put() const {
  return value_case() == kPut;
}
void InternalRequestUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
void InternalRequestUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutRequest& InternalRequestUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutRequest::default_instance();
}
 ::cockroach::proto::PutRequest* InternalRequestUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.put)
  return value_.put_;
}
 ::cockroach::proto::PutRequest* InternalRequestUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutRequest* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_put(::cockroach::proto::PutRequest* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.put)
}

// optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
bool InternalRequestUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void InternalRequestUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void InternalRequestUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutRequest& InternalRequestUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutRequest::default_instance();
}
 ::cockroach::proto::ConditionalPutRequest* InternalRequestUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutRequest* InternalRequestUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutRequest* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutRequest* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.conditional_put)
}

// optional .cockroach.proto.IncrementRequest increment = 5;
bool InternalRequestUnion::has_increment() const {
  return value_case() == kIncrement;
}
void InternalRequestUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void InternalRequestUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementRequest& InternalRequestUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementRequest::default_instance();
}
 ::cockroach::proto::IncrementRequest* InternalRequestUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementRequest* InternalRequestUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementRequest* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_increment(::cockroach::proto::IncrementRequest* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.increment)
}

// optional .cockroach.proto.DeleteRequest delete = 6;
bool InternalRequestUnion::has_delete_() const {
  return value_case() == kDelete;
}
void InternalRequestUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void InternalRequestUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRequest& InternalRequestUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteRequest::default_instance();
}
 ::cockroach::proto::DeleteRequest* InternalRequestUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteRequest* InternalRequestUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteRequest* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_delete_(::cockroach::proto::DeleteRequest* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.delete)
}

// optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
bool InternalRequestUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void InternalRequestUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void InternalRequestUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeRequest& InternalRequestUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeRequest::default_instance();
}
 ::cockroach::proto::DeleteRangeRequest* InternalRequestUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeRequest* InternalRequestUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeRequest* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeRequest* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.delete_range)
}

// optional .cockroach.proto.ScanRequest scan = 8;
bool InternalRequestUnion::has_scan() const {
  return value_case() == kScan;
}
void InternalRequestUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void InternalRequestUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ScanRequest& InternalRequestUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanRequest::default_instance();
}
 ::cockroach::proto::ScanRequest* InternalRequestUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.scan)
  return value_.scan_;
}
 ::cockroach::proto::ScanRequest* InternalRequestUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanRequest* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_scan(::cockroach::proto::ScanRequest* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.scan)
}

// optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
bool InternalRequestUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void InternalRequestUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void InternalRequestUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionRequest& InternalRequestUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionRequest::default_instance();
}
 ::cockroach::proto::EndTransactionRequest* InternalRequestUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionRequest* InternalRequestUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionRequest* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionRequest* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.end_transaction)
}

// optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 30;
bool InternalRequestUnion::has_internal_push_txn() const {
  return value_case() == kInternalPushTxn;
}
void InternalRequestUnion::set_has_internal_push_txn() {
  _oneof_case_[0] = kInternalPushTxn;
}
void InternalRequestUnion::clear_internal_push_txn() {
  if (has_internal_push_txn()) {
    delete value_.internal_push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalPushTxnRequest& InternalRequestUnion::internal_push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.internal_push_txn)
  return has_internal_push_txn() ? *value_.internal_push_txn_
                      : ::cockroach::proto::InternalPushTxnRequest::default_instance();
}
 ::cockroach::proto::InternalPushTxnRequest* InternalRequestUnion::mutable_internal_push_txn() {
  if (!has_internal_push_txn()) {
    clear_value();
    set_has_internal_push_txn();
    value_.internal_push_txn_ = new ::cockroach::proto::InternalPushTxnRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.internal_push_txn)
  return value_.internal_push_txn_;
}
 ::cockroach::proto::InternalPushTxnRequest* InternalRequestUnion::release_internal_push_txn() {
  if (has_internal_push_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalPushTxnRequest* temp = value_.internal_push_txn_;
    value_.internal_push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_internal_push_txn(::cockroach::proto::InternalPushTxnRequest* internal_push_txn) {
  clear_value();
  if (internal_push_txn) {
    set_has_internal_push_txn();
    value_.internal_push_txn_ = internal_push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.internal_push_txn)
}

// optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 31;
bool InternalRequestUnion::has_internal_resolve_intent() const {
  return value_case() == kInternalResolveIntent;
}
void InternalRequestUnion::set_has_internal_resolve_intent() {
  _oneof_case_[0] = kInternalResolveIntent;
}
void InternalRequestUnion::clear_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    delete value_.internal_resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRequest& InternalRequestUnion::internal_resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.internal_resolve_intent)
  return has_internal_resolve_intent() ? *value_.internal_resolve_intent_
                      : ::cockroach::proto::InternalResolveIntentRequest::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRequest* InternalRequestUnion::mutable_internal_resolve_intent() {
  if (!has_internal_resolve_intent()) {
    clear_value();
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = new ::cockroach::proto::InternalResolveIntentRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.internal_resolve_intent)
  return value_.internal_resolve_intent_;
}
 ::cockroach::proto::InternalResolveIntentRequest* InternalRequestUnion::release_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRequest* temp = value_.internal_resolve_intent_;
    value_.internal_resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_internal_resolve_intent(::cockroach::proto::InternalResolveIntentRequest* internal_resolve_intent) {
  clear_value();
  if (internal_resolve_intent) {
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = internal_resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.internal_resolve_intent)
}

// optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 32;
bool InternalRequestUnion::has_internal_resolve_intent_range() const {
  return value_case() == kInternalResolveIntentRange;
}
void InternalRequestUnion::set_has_internal_resolve_intent_range() {
  _oneof_case_[0] = kInternalResolveIntentRange;
}
void InternalRequestUnion::clear_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    delete value_.internal_resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRangeRequest& InternalRequestUnion::internal_resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRequestUnion.internal_resolve_intent_range)
  return has_internal_resolve_intent_range() ? *value_.internal_resolve_intent_range_
                      : ::cockroach::proto::InternalResolveIntentRangeRequest::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRangeRequest* InternalRequestUnion::mutable_internal_resolve_intent_range() {
  if (!has_internal_resolve_intent_range()) {
    clear_value();
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = new ::cockroach::proto::InternalResolveIntentRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRequestUnion.internal_resolve_intent_range)
  return value_.internal_resolve_intent_range_;
}
 ::cockroach::proto::InternalResolveIntentRangeRequest* InternalRequestUnion::release_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRangeRequest* temp = value_.internal_resolve_intent_range_;
    value_.internal_resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRequestUnion::set_allocated_internal_resolve_intent_range(::cockroach::proto::InternalResolveIntentRangeRequest* internal_resolve_intent_range) {
  clear_value();
  if (internal_resolve_intent_range) {
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = internal_resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRequestUnion.internal_resolve_intent_range)
}

bool InternalRequestUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void InternalRequestUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
InternalRequestUnion::ValueCase InternalRequestUnion::value_case() const {
  return InternalRequestUnion::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalResponseUnion::kGetFieldNumber;
const int InternalResponseUnion::kPutFieldNumber;
const int InternalResponseUnion::kConditionalPutFieldNumber;
const int InternalResponseUnion::kIncrementFieldNumber;
const int InternalResponseUnion::kDeleteFieldNumber;
const int InternalResponseUnion::kDeleteRangeFieldNumber;
const int InternalResponseUnion::kScanFieldNumber;
const int InternalResponseUnion::kEndTransactionFieldNumber;
const int InternalResponseUnion::kInternalPushTxnFieldNumber;
const int InternalResponseUnion::kInternalResolveIntentFieldNumber;
const int InternalResponseUnion::kInternalResolveIntentRangeFieldNumber;
#endif  // !_MSC_VER

InternalResponseUnion::InternalResponseUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResponseUnion)
}

void InternalResponseUnion::InitAsDefaultInstance() {
  InternalResponseUnion_default_oneof_instance_->get_ = const_cast< ::cockroach::proto::GetResponse*>(&::cockroach::proto::GetResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutResponse*>(&::cockroach::proto::PutResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutResponse*>(&::cockroach::proto::ConditionalPutResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementResponse*>(&::cockroach::proto::IncrementResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteResponse*>(&::cockroach::proto::DeleteResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeResponse*>(&::cockroach::proto::DeleteRangeResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->scan_ = const_cast< ::cockroach::proto::ScanResponse*>(&::cockroach::proto::ScanResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionResponse*>(&::cockroach::proto::EndTransactionResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnResponse*>(&::cockroach::proto::InternalPushTxnResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentResponse*>(&::cockroach::proto::InternalResolveIntentResponse::default_instance());
  InternalResponseUnion_default_oneof_instance_->internal_resolve_intent_range_ = const_cast< ::cockroach::proto::InternalResolveIntentRangeResponse*>(&::cockroach::proto::InternalResolveIntentRangeResponse::default_instance());
}

InternalResponseUnion::InternalResponseUnion(const InternalResponseUnion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResponseUnion)
}

void InternalResponseUnion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

InternalResponseUnion::~InternalResponseUnion() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResponseUnion)
  SharedDtor();
}

void InternalResponseUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void InternalResponseUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResponseUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResponseUnion_descriptor_;
}

const InternalResponseUnion& InternalResponseUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResponseUnion* InternalResponseUnion::default_instance_ = NULL;

InternalResponseUnion* InternalResponseUnion::New(::google::protobuf::Arena* arena) const {
  InternalResponseUnion* n = new InternalResponseUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalResponseUnion::clear_value() {
  switch(value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalResolveIntentRange: {
      delete value_.internal_resolve_intent_range_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void InternalResponseUnion::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalResponseUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResponseUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.GetResponse get = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_put;
        break;
      }

      // optional .cockroach.proto.PutResponse put = 3;
      case 3: {
        if (tag == 26) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
      case 4: {
        if (tag == 34) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementResponse increment = 5;
      case 5: {
        if (tag == 42) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteResponse delete = 6;
      case 6: {
        if (tag == 50) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
      case 7: {
        if (tag == 58) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scan;
        break;
      }

      // optional .cockroach.proto.ScanResponse scan = 8;
      case 8: {
        if (tag == 66) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
      case 9: {
        if (tag == 74) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 30;
      case 30: {
        if (tag == 242) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 31;
      case 31: {
        if (tag == 250) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_internal_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 32;
      case 32: {
        if (tag == 258) {
         parse_internal_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResponseUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResponseUnion)
  return false;
#undef DO_
}

void InternalResponseUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResponseUnion)
  // optional .cockroach.proto.GetResponse get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.get_, output);
  }

  // optional .cockroach.proto.PutResponse put = 3;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementResponse increment = 5;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteResponse delete = 6;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.ScanResponse scan = 8;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.scan_, output);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 30;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *value_.internal_push_txn_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 31;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *value_.internal_resolve_intent_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 32;
  if (has_internal_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *value_.internal_resolve_intent_range_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResponseUnion)
}

::google::protobuf::uint8* InternalResponseUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResponseUnion)
  // optional .cockroach.proto.GetResponse get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.get_, target);
  }

  // optional .cockroach.proto.PutResponse put = 3;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementResponse increment = 5;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteResponse delete = 6;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.ScanResponse scan = 8;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *value_.scan_, target);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 30;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *value_.internal_push_txn_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 31;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, *value_.internal_resolve_intent_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 32;
  if (has_internal_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, *value_.internal_resolve_intent_range_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResponseUnion)
  return target;
}

int InternalResponseUnion::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.GetResponse get = 2;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.get_);
      break;
    }
    // optional .cockroach.proto.PutResponse put = 3;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementResponse increment = 5;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteResponse delete = 6;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.ScanResponse scan = 8;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.scan_);
      break;
    }
    // optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 30;
    case kInternalPushTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_push_txn_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 31;
    case kInternalResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 32;
    case kInternalResolveIntentRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_range_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResponseUnion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalResponseUnion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalResponseUnion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResponseUnion::MergeFrom(const InternalResponseUnion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::proto::GetResponse::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::proto::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::proto::ScanResponse::MergeFrom(from.scan());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionResponse::MergeFrom(from.end_transaction());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnResponse::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentResponse::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalResolveIntentRange: {
      mutable_internal_resolve_intent_range()->::cockroach::proto::InternalResolveIntentRangeResponse::MergeFrom(from.internal_resolve_intent_range());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalResponseUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResponseUnion::CopyFrom(const InternalResponseUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResponseUnion::IsInitialized() const {

  return true;
}

void InternalResponseUnion::Swap(InternalResponseUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalResponseUnion::InternalSwap(InternalResponseUnion* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalResponseUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResponseUnion_descriptor_;
  metadata.reflection = InternalResponseUnion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalResponseUnion

// optional .cockroach.proto.GetResponse get = 2;
bool InternalResponseUnion::has_get() const {
  return value_case() == kGet;
}
void InternalResponseUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
void InternalResponseUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GetResponse& InternalResponseUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetResponse::default_instance();
}
 ::cockroach::proto::GetResponse* InternalResponseUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.get)
  return value_.get_;
}
 ::cockroach::proto::GetResponse* InternalResponseUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetResponse* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_get(::cockroach::proto::GetResponse* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.get)
}

// optional .cockroach.proto.PutResponse put = 3;
bool InternalResponseUnion::has_put() const {
  return value_case() == kPut;
}
void InternalResponseUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
void InternalResponseUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutResponse& InternalResponseUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutResponse::default_instance();
}
 ::cockroach::proto::PutResponse* InternalResponseUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.put)
  return value_.put_;
}
 ::cockroach::proto::PutResponse* InternalResponseUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutResponse* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_put(::cockroach::proto::PutResponse* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.put)
}

// optional .cockroach.proto.ConditionalPutResponse conditional_put = 4;
bool InternalResponseUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void InternalResponseUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void InternalResponseUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutResponse& InternalResponseUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutResponse::default_instance();
}
 ::cockroach::proto::ConditionalPutResponse* InternalResponseUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutResponse* InternalResponseUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutResponse* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutResponse* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.conditional_put)
}

// optional .cockroach.proto.IncrementResponse increment = 5;
bool InternalResponseUnion::has_increment() const {
  return value_case() == kIncrement;
}
void InternalResponseUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void InternalResponseUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementResponse& InternalResponseUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementResponse::default_instance();
}
 ::cockroach::proto::IncrementResponse* InternalResponseUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementResponse* InternalResponseUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementResponse* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_increment(::cockroach::proto::IncrementResponse* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.increment)
}

// optional .cockroach.proto.DeleteResponse delete = 6;
bool InternalResponseUnion::has_delete_() const {
  return value_case() == kDelete;
}
void InternalResponseUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void InternalResponseUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteResponse& InternalResponseUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteResponse::default_instance();
}
 ::cockroach::proto::DeleteResponse* InternalResponseUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteResponse* InternalResponseUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteResponse* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_delete_(::cockroach::proto::DeleteResponse* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.delete)
}

// optional .cockroach.proto.DeleteRangeResponse delete_range = 7;
bool InternalResponseUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void InternalResponseUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void InternalResponseUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeResponse& InternalResponseUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeResponse::default_instance();
}
 ::cockroach::proto::DeleteRangeResponse* InternalResponseUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeResponse* InternalResponseUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeResponse* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeResponse* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.delete_range)
}

// optional .cockroach.proto.ScanResponse scan = 8;
bool InternalResponseUnion::has_scan() const {
  return value_case() == kScan;
}
void InternalResponseUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void InternalResponseUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ScanResponse& InternalResponseUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanResponse::default_instance();
}
 ::cockroach::proto::ScanResponse* InternalResponseUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.scan)
  return value_.scan_;
}
 ::cockroach::proto::ScanResponse* InternalResponseUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanResponse* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_scan(::cockroach::proto::ScanResponse* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.scan)
}

// optional .cockroach.proto.EndTransactionResponse end_transaction = 9;
bool InternalResponseUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void InternalResponseUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void InternalResponseUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionResponse& InternalResponseUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionResponse::default_instance();
}
 ::cockroach::proto::EndTransactionResponse* InternalResponseUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionResponse* InternalResponseUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionResponse* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionResponse* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.end_transaction)
}

// optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 30;
bool InternalResponseUnion::has_internal_push_txn() const {
  return value_case() == kInternalPushTxn;
}
void InternalResponseUnion::set_has_internal_push_txn() {
  _oneof_case_[0] = kInternalPushTxn;
}
void InternalResponseUnion::clear_internal_push_txn() {
  if (has_internal_push_txn()) {
    delete value_.internal_push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalPushTxnResponse& InternalResponseUnion::internal_push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.internal_push_txn)
  return has_internal_push_txn() ? *value_.internal_push_txn_
                      : ::cockroach::proto::InternalPushTxnResponse::default_instance();
}
 ::cockroach::proto::InternalPushTxnResponse* InternalResponseUnion::mutable_internal_push_txn() {
  if (!has_internal_push_txn()) {
    clear_value();
    set_has_internal_push_txn();
    value_.internal_push_txn_ = new ::cockroach::proto::InternalPushTxnResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.internal_push_txn)
  return value_.internal_push_txn_;
}
 ::cockroach::proto::InternalPushTxnResponse* InternalResponseUnion::release_internal_push_txn() {
  if (has_internal_push_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalPushTxnResponse* temp = value_.internal_push_txn_;
    value_.internal_push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_internal_push_txn(::cockroach::proto::InternalPushTxnResponse* internal_push_txn) {
  clear_value();
  if (internal_push_txn) {
    set_has_internal_push_txn();
    value_.internal_push_txn_ = internal_push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.internal_push_txn)
}

// optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 31;
bool InternalResponseUnion::has_internal_resolve_intent() const {
  return value_case() == kInternalResolveIntent;
}
void InternalResponseUnion::set_has_internal_resolve_intent() {
  _oneof_case_[0] = kInternalResolveIntent;
}
void InternalResponseUnion::clear_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    delete value_.internal_resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentResponse& InternalResponseUnion::internal_resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.internal_resolve_intent)
  return has_internal_resolve_intent() ? *value_.internal_resolve_intent_
                      : ::cockroach::proto::InternalResolveIntentResponse::default_instance();
}
 ::cockroach::proto::InternalResolveIntentResponse* InternalResponseUnion::mutable_internal_resolve_intent() {
  if (!has_internal_resolve_intent()) {
    clear_value();
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = new ::cockroach::proto::InternalResolveIntentResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.internal_resolve_intent)
  return value_.internal_resolve_intent_;
}
 ::cockroach::proto::InternalResolveIntentResponse* InternalResponseUnion::release_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentResponse* temp = value_.internal_resolve_intent_;
    value_.internal_resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_internal_resolve_intent(::cockroach::proto::InternalResolveIntentResponse* internal_resolve_intent) {
  clear_value();
  if (internal_resolve_intent) {
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = internal_resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.internal_resolve_intent)
}

// optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 32;
bool InternalResponseUnion::has_internal_resolve_intent_range() const {
  return value_case() == kInternalResolveIntentRange;
}
void InternalResponseUnion::set_has_internal_resolve_intent_range() {
  _oneof_case_[0] = kInternalResolveIntentRange;
}
void InternalResponseUnion::clear_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    delete value_.internal_resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRangeResponse& InternalResponseUnion::internal_resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalResponseUnion.internal_resolve_intent_range)
  return has_internal_resolve_intent_range() ? *value_.internal_resolve_intent_range_
                      : ::cockroach::proto::InternalResolveIntentRangeResponse::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRangeResponse* InternalResponseUnion::mutable_internal_resolve_intent_range() {
  if (!has_internal_resolve_intent_range()) {
    clear_value();
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = new ::cockroach::proto::InternalResolveIntentRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalResponseUnion.internal_resolve_intent_range)
  return value_.internal_resolve_intent_range_;
}
 ::cockroach::proto::InternalResolveIntentRangeResponse* InternalResponseUnion::release_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRangeResponse* temp = value_.internal_resolve_intent_range_;
    value_.internal_resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalResponseUnion::set_allocated_internal_resolve_intent_range(::cockroach::proto::InternalResolveIntentRangeResponse* internal_resolve_intent_range) {
  clear_value();
  if (internal_resolve_intent_range) {
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = internal_resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalResponseUnion.internal_resolve_intent_range)
}

bool InternalResponseUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void InternalResponseUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
InternalResponseUnion::ValueCase InternalResponseUnion::value_case() const {
  return InternalResponseUnion::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalBatchRequest::kKvheaderFieldNumber;
const int InternalBatchRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

InternalBatchRequest::InternalBatchRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalBatchRequest)
}

void InternalBatchRequest::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVRequestHeader*>(&::cockroach::proto::KVRequestHeader::default_instance());
}

InternalBatchRequest::InternalBatchRequest(const InternalBatchRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalBatchRequest)
}

void InternalBatchRequest::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalBatchRequest::~InternalBatchRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalBatchRequest)
  SharedDtor();
}

void InternalBatchRequest::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalBatchRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalBatchRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalBatchRequest_descriptor_;
}

const InternalBatchRequest& InternalBatchRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalBatchRequest* InternalBatchRequest::default_instance_ = NULL;

InternalBatchRequest* InternalBatchRequest::New(::google::protobuf::Arena* arena) const {
  InternalBatchRequest* n = new InternalBatchRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalBatchRequest::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  }
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalBatchRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalBatchRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVRequestHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        break;
      }

      // repeated .cockroach.proto.InternalRequestUnion requests = 2;
      case 2: {
        if (tag == 18) {
         parse_requests:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalBatchRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalBatchRequest)
  return false;
#undef DO_
}

void InternalBatchRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalBatchRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // repeated .cockroach.proto.InternalRequestUnion requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requests(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalBatchRequest)
}

::google::protobuf::uint8* InternalBatchRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalBatchRequest)
  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // repeated .cockroach.proto.InternalRequestUnion requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->requests(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalBatchRequest)
  return target;
}

int InternalBatchRequest::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVRequestHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  // repeated .cockroach.proto.InternalRequestUnion requests = 2;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalBatchRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalBatchRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalBatchRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalBatchRequest::MergeFrom(const InternalBatchRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  requests_.MergeFrom(from.requests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVRequestHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalBatchRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalBatchRequest::CopyFrom(const InternalBatchRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalBatchRequest::IsInitialized() const {

  return true;
}

void InternalBatchRequest::Swap(InternalBatchRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalBatchRequest::InternalSwap(InternalBatchRequest* other) {
  std::swap(kvheader_, other->kvheader_);
  requests_.UnsafeArenaSwap(&other->requests_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalBatchRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalBatchRequest_descriptor_;
  metadata.reflection = InternalBatchRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalBatchRequest

// optional .cockroach.proto.KVRequestHeader kvheader = 1;
bool InternalBatchRequest::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalBatchRequest::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalBatchRequest::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalBatchRequest::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVRequestHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVRequestHeader& InternalBatchRequest::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalBatchRequest.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalBatchRequest::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalBatchRequest.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVRequestHeader* InternalBatchRequest::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVRequestHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalBatchRequest::set_allocated_kvheader(::cockroach::proto::KVRequestHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalBatchRequest.kvheader)
}

// repeated .cockroach.proto.InternalRequestUnion requests = 2;
int InternalBatchRequest::requests_size() const {
  return requests_.size();
}
void InternalBatchRequest::clear_requests() {
  requests_.Clear();
}
 const ::cockroach::proto::InternalRequestUnion& InternalBatchRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalBatchRequest.requests)
  return requests_.Get(index);
}
 ::cockroach::proto::InternalRequestUnion* InternalBatchRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalBatchRequest.requests)
  return requests_.Mutable(index);
}
 ::cockroach::proto::InternalRequestUnion* InternalBatchRequest::add_requests() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalBatchRequest.requests)
  return requests_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalRequestUnion >&
InternalBatchRequest::requests() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalBatchRequest.requests)
  return requests_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalRequestUnion >*
InternalBatchRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalBatchRequest.requests)
  return &requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalBatchResponse::kKvheaderFieldNumber;
const int InternalBatchResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

InternalBatchResponse::InternalBatchResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalBatchResponse)
}

void InternalBatchResponse::InitAsDefaultInstance() {
  kvheader_ = const_cast< ::cockroach::proto::KVResponseHeader*>(&::cockroach::proto::KVResponseHeader::default_instance());
}

InternalBatchResponse::InternalBatchResponse(const InternalBatchResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalBatchResponse)
}

void InternalBatchResponse::SharedCtor() {
  _cached_size_ = 0;
  kvheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalBatchResponse::~InternalBatchResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalBatchResponse)
  SharedDtor();
}

void InternalBatchResponse::SharedDtor() {
  if (this != default_instance_) {
    delete kvheader_;
  }
}

void InternalBatchResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalBatchResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalBatchResponse_descriptor_;
}

const InternalBatchResponse& InternalBatchResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalBatchResponse* InternalBatchResponse::default_instance_ = NULL;

InternalBatchResponse* InternalBatchResponse::New(::google::protobuf::Arena* arena) const {
  InternalBatchResponse* n = new InternalBatchResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalBatchResponse::Clear() {
  if (has_kvheader()) {
    if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  }
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalBatchResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalBatchResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.KVResponseHeader kvheader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kvheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        break;
      }

      // repeated .cockroach.proto.InternalResponseUnion responses = 2;
      case 2: {
        if (tag == 18) {
         parse_responses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_responses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalBatchResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalBatchResponse)
  return false;
#undef DO_
}

void InternalBatchResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalBatchResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kvheader_, output);
  }

  // repeated .cockroach.proto.InternalResponseUnion responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalBatchResponse)
}

::google::protobuf::uint8* InternalBatchResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalBatchResponse)
  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->kvheader_, target);
  }

  // repeated .cockroach.proto.InternalResponseUnion responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->responses(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalBatchResponse)
  return target;
}

int InternalBatchResponse::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.KVResponseHeader kvheader = 1;
  if (has_kvheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kvheader_);
  }

  // repeated .cockroach.proto.InternalResponseUnion responses = 2;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalBatchResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalBatchResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalBatchResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalBatchResponse::MergeFrom(const InternalBatchResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  responses_.MergeFrom(from.responses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kvheader()) {
      mutable_kvheader()->::cockroach::proto::KVResponseHeader::MergeFrom(from.kvheader());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalBatchResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalBatchResponse::CopyFrom(const InternalBatchResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalBatchResponse::IsInitialized() const {

  return true;
}

void InternalBatchResponse::Swap(InternalBatchResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalBatchResponse::InternalSwap(InternalBatchResponse* other) {
  std::swap(kvheader_, other->kvheader_);
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalBatchResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalBatchResponse_descriptor_;
  metadata.reflection = InternalBatchResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalBatchResponse

// optional .cockroach.proto.KVResponseHeader kvheader = 1;
bool InternalBatchResponse::has_kvheader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalBatchResponse::set_has_kvheader() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalBatchResponse::clear_has_kvheader() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalBatchResponse::clear_kvheader() {
  if (kvheader_ != NULL) kvheader_->::cockroach::proto::KVResponseHeader::Clear();
  clear_has_kvheader();
}
 const ::cockroach::proto::KVResponseHeader& InternalBatchResponse::kvheader() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalBatchResponse.kvheader)
  return kvheader_ != NULL ? *kvheader_ : *default_instance_->kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalBatchResponse::mutable_kvheader() {
  set_has_kvheader();
  if (kvheader_ == NULL) {
    kvheader_ = new ::cockroach::proto::KVResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalBatchResponse.kvheader)
  return kvheader_;
}
 ::cockroach::proto::KVResponseHeader* InternalBatchResponse::release_kvheader() {
  clear_has_kvheader();
  ::cockroach::proto::KVResponseHeader* temp = kvheader_;
  kvheader_ = NULL;
  return temp;
}
 void InternalBatchResponse::set_allocated_kvheader(::cockroach::proto::KVResponseHeader* kvheader) {
  delete kvheader_;
  kvheader_ = kvheader;
  if (kvheader) {
    set_has_kvheader();
  } else {
    clear_has_kvheader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalBatchResponse.kvheader)
}

// repeated .cockroach.proto.InternalResponseUnion responses = 2;
int InternalBatchResponse::responses_size() const {
  return responses_.size();
}
void InternalBatchResponse::clear_responses() {
  responses_.Clear();
}
 const ::cockroach::proto::InternalResponseUnion& InternalBatchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalBatchResponse.responses)
  return responses_.Get(index);
}
 ::cockroach::proto::InternalResponseUnion* InternalBatchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalBatchResponse.responses)
  return responses_.Mutable(index);
}
 ::cockroach::proto::InternalResponseUnion* InternalBatchResponse::add_responses() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalBatchResponse.responses)
  return responses_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalResponseUnion >&
InternalBatchResponse::responses() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalBatchResponse.responses)
  return responses_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalResponseUnion >*
InternalBatchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalBatchResponse.responses)
  return &responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ReadWriteCmdResponse::kPutFieldNumber;
const int ReadWriteCmdResponse::kConditionalPutFieldNumber;
const int ReadWriteCmdResponse::kIncrementFieldNumber;
const int ReadWriteCmdResponse::kDeleteFieldNumber;
const int ReadWriteCmdResponse::kDeleteRangeFieldNumber;
const int ReadWriteCmdResponse::kEndTransactionFieldNumber;
const int ReadWriteCmdResponse::kInternalHeartbeatTxnFieldNumber;
const int ReadWriteCmdResponse::kInternalPushTxnFieldNumber;
const int ReadWriteCmdResponse::kInternalResolveIntentFieldNumber;
const int ReadWriteCmdResponse::kInternalResolveIntentRangeFieldNumber;
const int ReadWriteCmdResponse::kInternalMergeFieldNumber;
const int ReadWriteCmdResponse::kInternalTruncateLogFieldNumber;
const int ReadWriteCmdResponse::kInternalGcFieldNumber;
const int ReadWriteCmdResponse::kInternalLeaderLeaseFieldNumber;
#endif  // !_MSC_VER

ReadWriteCmdResponse::ReadWriteCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ReadWriteCmdResponse)
}

void ReadWriteCmdResponse::InitAsDefaultInstance() {
  ReadWriteCmdResponse_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutResponse*>(&::cockroach::proto::PutResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutResponse*>(&::cockroach::proto::ConditionalPutResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementResponse*>(&::cockroach::proto::IncrementResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteResponse*>(&::cockroach::proto::DeleteResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeResponse*>(&::cockroach::proto::DeleteRangeResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionResponse*>(&::cockroach::proto::EndTransactionResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_heartbeat_txn_ = const_cast< ::cockroach::proto::InternalHeartbeatTxnResponse*>(&::cockroach::proto::InternalHeartbeatTxnResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnResponse*>(&::cockroach::proto::InternalPushTxnResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentResponse*>(&::cockroach::proto::InternalResolveIntentResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_resolve_intent_range_ = const_cast< ::cockroach::proto::InternalResolveIntentRangeResponse*>(&::cockroach::proto::InternalResolveIntentRangeResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_merge_ = const_cast< ::cockroach::proto::InternalMergeResponse*>(&::cockroach::proto::InternalMergeResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_truncate_log_ = const_cast< ::cockroach::proto::InternalTruncateLogResponse*>(&::cockroach::proto::InternalTruncateLogResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_gc_ = const_cast< ::cockroach::proto::InternalGCResponse*>(&::cockroach::proto::InternalGCResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_leader_lease_ = const_cast< ::cockroach::proto::InternalLeaderLeaseResponse*>(&::cockroach::proto::InternalLeaderLeaseResponse::default_instance());
}

ReadWriteCmdResponse::ReadWriteCmdResponse(const ReadWriteCmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ReadWriteCmdResponse)
}

void ReadWriteCmdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

ReadWriteCmdResponse::~ReadWriteCmdResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ReadWriteCmdResponse)
  SharedDtor();
}

void ReadWriteCmdResponse::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void ReadWriteCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteCmdResponse_descriptor_;
}

const ReadWriteCmdResponse& ReadWriteCmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

ReadWriteCmdResponse* ReadWriteCmdResponse::default_instance_ = NULL;

ReadWriteCmdResponse* ReadWriteCmdResponse::New(::google::protobuf::Arena* arena) const {
  ReadWriteCmdResponse* n = new ReadWriteCmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadWriteCmdResponse::clear_value() {
  switch(value_case()) {
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kInternalHeartbeatTxn: {
      delete value_.internal_heartbeat_txn_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalResolveIntentRange: {
      delete value_.internal_resolve_intent_range_;
      break;
    }
    case kInternalMerge: {
      delete value_.internal_merge_;
      break;
    }
    case kInternalTruncateLog: {
      delete value_.internal_truncate_log_;
      break;
    }
    case kInternalGc: {
      delete value_.internal_gc_;
      break;
    }
    case kInternalLeaderLease: {
      delete value_.internal_leader_lease_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ReadWriteCmdResponse::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadWriteCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ReadWriteCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.PutResponse put = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
      case 2: {
        if (tag == 18) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementResponse increment = 3;
      case 3: {
        if (tag == 26) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteResponse delete = 4;
      case 4: {
        if (tag == 34) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
      case 5: {
        if (tag == 42) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
      case 6: {
        if (tag == 50) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_internal_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
      case 10: {
        if (tag == 82) {
         parse_internal_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
      case 11: {
        if (tag == 90) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
      case 12: {
        if (tag == 98) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_internal_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 13;
      case 13: {
        if (tag == 106) {
         parse_internal_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_internal_merge;
        break;
      }

      // optional .cockroach.proto.InternalMergeResponse internal_merge = 14;
      case 14: {
        if (tag == 114) {
         parse_internal_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_internal_truncate_log;
        break;
      }

      // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 15;
      case 15: {
        if (tag == 122) {
         parse_internal_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_internal_gc;
        break;
      }

      // optional .cockroach.proto.InternalGCResponse internal_gc = 16;
      case 16: {
        if (tag == 130) {
         parse_internal_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_internal_leader_lease;
        break;
      }

      // optional .cockroach.proto.InternalLeaderLeaseResponse internal_leader_lease = 17;
      case 17: {
        if (tag == 138) {
         parse_internal_leader_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_leader_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ReadWriteCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ReadWriteCmdResponse)
  return false;
#undef DO_
}

void ReadWriteCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ReadWriteCmdResponse)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
  if (has_internal_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *value_.internal_heartbeat_txn_, output);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *value_.internal_push_txn_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *value_.internal_resolve_intent_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 13;
  if (has_internal_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *value_.internal_resolve_intent_range_, output);
  }

  // optional .cockroach.proto.InternalMergeResponse internal_merge = 14;
  if (has_internal_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *value_.internal_merge_, output);
  }

  // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 15;
  if (has_internal_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *value_.internal_truncate_log_, output);
  }

  // optional .cockroach.proto.InternalGCResponse internal_gc = 16;
  if (has_internal_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *value_.internal_gc_, output);
  }

  // optional .cockroach.proto.InternalLeaderLeaseResponse internal_leader_lease = 17;
  if (has_internal_leader_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *value_.internal_leader_lease_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ReadWriteCmdResponse)
}

::google::protobuf::uint8* ReadWriteCmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ReadWriteCmdResponse)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
  if (has_internal_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *value_.internal_heartbeat_txn_, target);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *value_.internal_push_txn_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *value_.internal_resolve_intent_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 13;
  if (has_internal_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *value_.internal_resolve_intent_range_, target);
  }

  // optional .cockroach.proto.InternalMergeResponse internal_merge = 14;
  if (has_internal_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *value_.internal_merge_, target);
  }

  // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 15;
  if (has_internal_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *value_.internal_truncate_log_, target);
  }

  // optional .cockroach.proto.InternalGCResponse internal_gc = 16;
  if (has_internal_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *value_.internal_gc_, target);
  }

  // optional .cockroach.proto.InternalLeaderLeaseResponse internal_leader_lease = 17;
  if (has_internal_leader_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *value_.internal_leader_lease_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ReadWriteCmdResponse)
  return target;
}

int ReadWriteCmdResponse::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.PutResponse put = 1;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementResponse increment = 3;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteResponse delete = 4;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
    case kInternalHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_heartbeat_txn_);
      break;
    }
    // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
    case kInternalPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_push_txn_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
    case kInternalResolveIntent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 13;
    case kInternalResolveIntentRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_range_);
      break;
    }
    // optional .cockroach.proto.InternalMergeResponse internal_merge = 14;
    case kInternalMerge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_merge_);
      break;
    }
    // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 15;
    case kInternalTruncateLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_truncate_log_);
      break;
    }
    // optional .cockroach.proto.InternalGCResponse internal_gc = 16;
    case kInternalGc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_gc_);
      break;
    }
    // optional .cockroach.proto.InternalLeaderLeaseResponse internal_leader_lease = 17;
    case kInternalLeaderLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_leader_lease_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadWriteCmdResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadWriteCmdResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteCmdResponse::MergeFrom(const ReadWriteCmdResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kPut: {
      mutable_put()->::cockroach::proto::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionResponse::MergeFrom(from.end_transaction());
      break;
    }
    case kInternalHeartbeatTxn: {
      mutable_internal_heartbeat_txn()->::cockroach::proto::InternalHeartbeatTxnResponse::MergeFrom(from.internal_heartbeat_txn());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnResponse::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentResponse::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalResolveIntentRange: {
      mutable_internal_resolve_intent_range()->::cockroach::proto::InternalResolveIntentRangeResponse::MergeFrom(from.internal_resolve_intent_range());
      break;
    }
    case kInternalMerge: {
      mutable_internal_merge()->::cockroach::proto::InternalMergeResponse::MergeFrom(from.internal_merge());
      break;
    }
    case kInternalTruncateLog: {
      mutable_internal_truncate_log()->::cockroach::proto::InternalTruncateLogResponse::MergeFrom(from.internal_truncate_log());
      break;
    }
    case kInternalGc: {
      mutable_internal_gc()->::cockroach::proto::InternalGCResponse::MergeFrom(from.internal_gc());
      break;
    }
    case kInternalLeaderLease: {
      mutable_internal_leader_lease()->::cockroach::proto::InternalLeaderLeaseResponse::MergeFrom(from.internal_leader_lease());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadWriteCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteCmdResponse::CopyFrom(const ReadWriteCmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteCmdResponse::IsInitialized() const {

  return true;
}

void ReadWriteCmdResponse::Swap(ReadWriteCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadWriteCmdResponse::InternalSwap(ReadWriteCmdResponse* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadWriteCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteCmdResponse_descriptor_;
  metadata.reflection = ReadWriteCmdResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadWriteCmdResponse

// optional .cockroach.proto.PutResponse put = 1;
bool ReadWriteCmdResponse::has_put() const {
  return value_case() == kPut;
}
void ReadWriteCmdResponse::set_has_put() {
  _oneof_case_[0] = kPut;
}
void ReadWriteCmdResponse::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutResponse& ReadWriteCmdResponse::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutResponse::default_instance();
}
 ::cockroach::proto::PutResponse* ReadWriteCmdResponse::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.put)
  return value_.put_;
}
 ::cockroach::proto::PutResponse* ReadWriteCmdResponse::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutResponse* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_put(::cockroach::proto::PutResponse* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.put)
}

// optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
bool ReadWriteCmdResponse::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void ReadWriteCmdResponse::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void ReadWriteCmdResponse::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutResponse& ReadWriteCmdResponse::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutResponse::default_instance();
}
 ::cockroach::proto::ConditionalPutResponse* ReadWriteCmdResponse::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutResponse* ReadWriteCmdResponse::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutResponse* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_conditional_put(::cockroach::proto::ConditionalPutResponse* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.conditional_put)
}

// optional .cockroach.proto.IncrementResponse increment = 3;
bool ReadWriteCmdResponse::has_increment() const {
  return value_case() == kIncrement;
}
void ReadWriteCmdResponse::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void ReadWriteCmdResponse::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementResponse& ReadWriteCmdResponse::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementResponse::default_instance();
}
 ::cockroach::proto::IncrementResponse* ReadWriteCmdResponse::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementResponse* ReadWriteCmdResponse::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementResponse* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_increment(::cockroach::proto::IncrementResponse* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.increment)
}

// optional .cockroach.proto.DeleteResponse delete = 4;
bool ReadWriteCmdResponse::has_delete_() const {
  return value_case() == kDelete;
}
void ReadWriteCmdResponse::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void ReadWriteCmdResponse::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteResponse& ReadWriteCmdResponse::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteResponse::default_instance();
}
 ::cockroach::proto::DeleteResponse* ReadWriteCmdResponse::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteResponse* ReadWriteCmdResponse::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteResponse* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_delete_(::cockroach::proto::DeleteResponse* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.delete)
}

// optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
bool ReadWriteCmdResponse::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void ReadWriteCmdResponse::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void ReadWriteCmdResponse::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeResponse& ReadWriteCmdResponse::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeResponse::default_instance();
}
 ::cockroach::proto::DeleteRangeResponse* ReadWriteCmdResponse::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeResponse* ReadWriteCmdResponse::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeResponse* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_delete_range(::cockroach::proto::DeleteRangeResponse* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.delete_range)
}

// optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
bool ReadWriteCmdResponse::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void ReadWriteCmdResponse::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void ReadWriteCmdResponse::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionResponse& ReadWriteCmdResponse::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionResponse::default_instance();
}
 ::cockroach::proto::EndTransactionResponse* ReadWriteCmdResponse::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionResponse* ReadWriteCmdResponse::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionResponse* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_end_transaction(::cockroach::proto::EndTransactionResponse* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.end_transaction)
}

// optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
bool ReadWriteCmdResponse::has_internal_heartbeat_txn() const {
  return value_case() == kInternalHeartbeatTxn;
}
void ReadWriteCmdResponse::set_has_internal_heartbeat_txn() {
  _oneof_case_[0] = kInternalHeartbeatTxn;
}
void ReadWriteCmdResponse::clear_internal_heartbeat_txn() {
  if (has_internal_heartbeat_txn()) {
    delete value_.internal_heartbeat_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalHeartbeatTxnResponse& ReadWriteCmdResponse::internal_heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_heartbeat_txn)
  return has_internal_heartbeat_txn() ? *value_.internal_heartbeat_txn_
                      : ::cockroach::proto::InternalHeartbeatTxnResponse::default_instance();
}
 ::cockroach::proto::InternalHeartbeatTxnResponse* ReadWriteCmdResponse::mutable_internal_heartbeat_txn() {
  if (!has_internal_heartbeat_txn()) {
    clear_value();
    set_has_internal_heartbeat_txn();
    value_.internal_heartbeat_txn_ = new ::cockroach::proto::InternalHeartbeatTxnResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_heartbeat_txn)
  return value_.internal_heartbeat_txn_;
}
 ::cockroach::proto::InternalHeartbeatTxnResponse* ReadWriteCmdResponse::release_internal_heartbeat_txn() {
  if (has_internal_heartbeat_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalHeartbeatTxnResponse* temp = value_.internal_heartbeat_txn_;
    value_.internal_heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_heartbeat_txn(::cockroach::proto::InternalHeartbeatTxnResponse* internal_heartbeat_txn) {
  clear_value();
  if (internal_heartbeat_txn) {
    set_has_internal_heartbeat_txn();
    value_.internal_heartbeat_txn_ = internal_heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_heartbeat_txn)
}

// optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
bool ReadWriteCmdResponse::has_internal_push_txn() const {
  return value_case() == kInternalPushTxn;
}
void ReadWriteCmdResponse::set_has_internal_push_txn() {
  _oneof_case_[0] = kInternalPushTxn;
}
void ReadWriteCmdResponse::clear_internal_push_txn() {
  if (has_internal_push_txn()) {
    delete value_.internal_push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalPushTxnResponse& ReadWriteCmdResponse::internal_push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_push_txn)
  return has_internal_push_txn() ? *value_.internal_push_txn_
                      : ::cockroach::proto::InternalPushTxnResponse::default_instance();
}
 ::cockroach::proto::InternalPushTxnResponse* ReadWriteCmdResponse::mutable_internal_push_txn() {
  if (!has_internal_push_txn()) {
    clear_value();
    set_has_internal_push_txn();
    value_.internal_push_txn_ = new ::cockroach::proto::InternalPushTxnResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_push_txn)
  return value_.internal_push_txn_;
}
 ::cockroach::proto::InternalPushTxnResponse* ReadWriteCmdResponse::release_internal_push_txn() {
  if (has_internal_push_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalPushTxnResponse* temp = value_.internal_push_txn_;
    value_.internal_push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_push_txn(::cockroach::proto::InternalPushTxnResponse* internal_push_txn) {
  clear_value();
  if (internal_push_txn) {
    set_has_internal_push_txn();
    value_.internal_push_txn_ = internal_push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_push_txn)
}

// optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
bool ReadWriteCmdResponse::has_internal_resolve_intent() const {
  return value_case() == kInternalResolveIntent;
}
void ReadWriteCmdResponse::set_has_internal_resolve_intent() {
  _oneof_case_[0] = kInternalResolveIntent;
}
void ReadWriteCmdResponse::clear_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    delete value_.internal_resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentResponse& ReadWriteCmdResponse::internal_resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent)
  return has_internal_resolve_intent() ? *value_.internal_resolve_intent_
                      : ::cockroach::proto::InternalResolveIntentResponse::default_instance();
}
 ::cockroach::proto::InternalResolveIntentResponse* ReadWriteCmdResponse::mutable_internal_resolve_intent() {
  if (!has_internal_resolve_intent()) {
    clear_value();
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = new ::cockroach::proto::InternalResolveIntentResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent)
  return value_.internal_resolve_intent_;
}
 ::cockroach::proto::InternalResolveIntentResponse* ReadWriteCmdResponse::release_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentResponse* temp = value_.internal_resolve_intent_;
    value_.internal_resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_resolve_intent(::cockroach::proto::InternalResolveIntentResponse* internal_resolve_intent) {
  clear_value();
  if (internal_resolve_intent) {
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = internal_resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent)
}

// optional .cockroach.proto.InternalResolveIntentRangeResponse internal_resolve_intent_range = 13;
bool ReadWriteCmdResponse::has_internal_resolve_intent_range() const {
  return value_case() == kInternalResolveIntentRange;
}
void ReadWriteCmdResponse::set_has_internal_resolve_intent_range() {
  _oneof_case_[0] = kInternalResolveIntentRange;
}
void ReadWriteCmdResponse::clear_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    delete value_.internal_resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRangeResponse& ReadWriteCmdResponse::internal_resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent_range)
  return has_internal_resolve_intent_range() ? *value_.internal_resolve_intent_range_
                      : ::cockroach::proto::InternalResolveIntentRangeResponse::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRangeResponse* ReadWriteCmdResponse::mutable_internal_resolve_intent_range() {
  if (!has_internal_resolve_intent_range()) {
    clear_value();
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = new ::cockroach::proto::InternalResolveIntentRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent_range)
  return value_.internal_resolve_intent_range_;
}
 ::cockroach::proto::InternalResolveIntentRangeResponse* ReadWriteCmdResponse::release_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRangeResponse* temp = value_.internal_resolve_intent_range_;
    value_.internal_resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_resolve_intent_range(::cockroach::proto::InternalResolveIntentRangeResponse* internal_resolve_intent_range) {
  clear_value();
  if (internal_resolve_intent_range) {
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = internal_resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_resolve_intent_range)
}

// optional .cockroach.proto.InternalMergeResponse internal_merge = 14;
bool ReadWriteCmdResponse::has_internal_merge() const {
  return value_case() == kInternalMerge;
}
void ReadWriteCmdResponse::set_has_internal_merge() {
  _oneof_case_[0] = kInternalMerge;
}
void ReadWriteCmdResponse::clear_internal_merge() {
  if (has_internal_merge()) {
    delete value_.internal_merge_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalMergeResponse& ReadWriteCmdResponse::internal_merge() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_merge)
  return has_internal_merge() ? *value_.internal_merge_
                      : ::cockroach::proto::InternalMergeResponse::default_instance();
}
 ::cockroach::proto::InternalMergeResponse* ReadWriteCmdResponse::mutable_internal_merge() {
  if (!has_internal_merge()) {
    clear_value();
    set_has_internal_merge();
    value_.internal_merge_ = new ::cockroach::proto::InternalMergeResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_merge)
  return value_.internal_merge_;
}
 ::cockroach::proto::InternalMergeResponse* ReadWriteCmdResponse::release_internal_merge() {
  if (has_internal_merge()) {
    clear_has_value();
    ::cockroach::proto::InternalMergeResponse* temp = value_.internal_merge_;
    value_.internal_merge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_merge(::cockroach::proto::InternalMergeResponse* internal_merge) {
  clear_value();
  if (internal_merge) {
    set_has_internal_merge();
    value_.internal_merge_ = internal_merge;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_merge)
}

// optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 15;
bool ReadWriteCmdResponse::has_internal_truncate_log() const {
  return value_case() == kInternalTruncateLog;
}
void ReadWriteCmdResponse::set_has_internal_truncate_log() {
  _oneof_case_[0] = kInternalTruncateLog;
}
void ReadWriteCmdResponse::clear_internal_truncate_log() {
  if (has_internal_truncate_log()) {
    delete value_.internal_truncate_log_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalTruncateLogResponse& ReadWriteCmdResponse::internal_truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_truncate_log)
  return has_internal_truncate_log() ? *value_.internal_truncate_log_
                      : ::cockroach::proto::InternalTruncateLogResponse::default_instance();
}
 ::cockroach::proto::InternalTruncateLogResponse* ReadWriteCmdResponse::mutable_internal_truncate_log() {
  if (!has_internal_truncate_log()) {
    clear_value();
    set_has_internal_truncate_log();
    value_.internal_truncate_log_ = new ::cockroach::proto::InternalTruncateLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_truncate_log)
  return value_.internal_truncate_log_;
}
 ::cockroach::proto::InternalTruncateLogResponse* ReadWriteCmdResponse::release_internal_truncate_log() {
  if (has_internal_truncate_log()) {
    clear_has_value();
    ::cockroach::proto::InternalTruncateLogResponse* temp = value_.internal_truncate_log_;
    value_.internal_truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_truncate_log(::cockroach::proto::InternalTruncateLogResponse* internal_truncate_log) {
  clear_value();
  if (internal_truncate_log) {
    set_has_internal_truncate_log();
    value_.internal_truncate_log_ = internal_truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_truncate_log)
}

// optional .cockroach.proto.InternalGCResponse internal_gc = 16;
bool ReadWriteCmdResponse::has_internal_gc() const {
  return value_case() == kInternalGc;
}
void ReadWriteCmdResponse::set_has_internal_gc() {
  _oneof_case_[0] = kInternalGc;
}
void ReadWriteCmdResponse::clear_internal_gc() {
  if (has_internal_gc()) {
    delete value_.internal_gc_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalGCResponse& ReadWriteCmdResponse::internal_gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_gc)
  return has_internal_gc() ? *value_.internal_gc_
                      : ::cockroach::proto::InternalGCResponse::default_instance();
}
 ::cockroach::proto::InternalGCResponse* ReadWriteCmdResponse::mutable_internal_gc() {
  if (!has_internal_gc()) {
    clear_value();
    set_has_internal_gc();
    value_.internal_gc_ = new ::cockroach::proto::InternalGCResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_gc)
  return value_.internal_gc_;
}
 ::cockroach::proto::InternalGCResponse* ReadWriteCmdResponse::release_internal_gc() {
  if (has_internal_gc()) {
    clear_has_value();
    ::cockroach::proto::InternalGCResponse* temp = value_.internal_gc_;
    value_.internal_gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_gc(::cockroach::proto::InternalGCResponse* internal_gc) {
  clear_value();
  if (internal_gc) {
    set_has_internal_gc();
    value_.internal_gc_ = internal_gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_gc)
}

// optional .cockroach.proto.InternalLeaderLeaseResponse internal_leader_lease = 17;
bool ReadWriteCmdResponse::has_internal_leader_lease() const {
  return value_case() == kInternalLeaderLease;
}
void ReadWriteCmdResponse::set_has_internal_leader_lease() {
  _oneof_case_[0] = kInternalLeaderLease;
}
void ReadWriteCmdResponse::clear_internal_leader_lease() {
  if (has_internal_leader_lease()) {
    delete value_.internal_leader_lease_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalLeaderLeaseResponse& ReadWriteCmdResponse::internal_leader_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ReadWriteCmdResponse.internal_leader_lease)
  return has_internal_leader_lease() ? *value_.internal_leader_lease_
                      : ::cockroach::proto::InternalLeaderLeaseResponse::default_instance();
}
 ::cockroach::proto::InternalLeaderLeaseResponse* ReadWriteCmdResponse::mutable_internal_leader_lease() {
  if (!has_internal_leader_lease()) {
    clear_value();
    set_has_internal_leader_lease();
    value_.internal_leader_lease_ = new ::cockroach::proto::InternalLeaderLeaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ReadWriteCmdResponse.internal_leader_lease)
  return value_.internal_leader_lease_;
}
 ::cockroach::proto::InternalLeaderLeaseResponse* ReadWriteCmdResponse::release_internal_leader_lease() {
  if (has_internal_leader_lease()) {
    clear_has_value();
    ::cockroach::proto::InternalLeaderLeaseResponse* temp = value_.internal_leader_lease_;
    value_.internal_leader_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void ReadWriteCmdResponse::set_allocated_internal_leader_lease(::cockroach::proto::InternalLeaderLeaseResponse* internal_leader_lease) {
  clear_value();
  if (internal_leader_lease) {
    set_has_internal_leader_lease();
    value_.internal_leader_lease_ = internal_leader_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ReadWriteCmdResponse.internal_leader_lease)
}

bool ReadWriteCmdResponse::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void ReadWriteCmdResponse::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
ReadWriteCmdResponse::ValueCase ReadWriteCmdResponse::value_case() const {
  return ReadWriteCmdResponse::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalRaftCommandUnion::kGetFieldNumber;
const int InternalRaftCommandUnion::kPutFieldNumber;
const int InternalRaftCommandUnion::kConditionalPutFieldNumber;
const int InternalRaftCommandUnion::kIncrementFieldNumber;
const int InternalRaftCommandUnion::kDeleteFieldNumber;
const int InternalRaftCommandUnion::kDeleteRangeFieldNumber;
const int InternalRaftCommandUnion::kScanFieldNumber;
const int InternalRaftCommandUnion::kEndTransactionFieldNumber;
const int InternalRaftCommandUnion::kBatchFieldNumber;
const int InternalRaftCommandUnion::kInternalRangeLookupFieldNumber;
const int InternalRaftCommandUnion::kInternalHeartbeatTxnFieldNumber;
const int InternalRaftCommandUnion::kInternalPushTxnFieldNumber;
const int InternalRaftCommandUnion::kInternalResolveIntentFieldNumber;
const int InternalRaftCommandUnion::kInternalResolveIntentRangeFieldNumber;
const int InternalRaftCommandUnion::kInternalMergeResponseFieldNumber;
const int InternalRaftCommandUnion::kInternalTruncateLogFieldNumber;
const int InternalRaftCommandUnion::kInternalGcFieldNumber;
const int InternalRaftCommandUnion::kInternalLeaseFieldNumber;
const int InternalRaftCommandUnion::kInternalBatchFieldNumber;
#endif  // !_MSC_VER

InternalRaftCommandUnion::InternalRaftCommandUnion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRaftCommandUnion)
}

void InternalRaftCommandUnion::InitAsDefaultInstance() {
  InternalRaftCommandUnion_default_oneof_instance_->get_ = const_cast< ::cockroach::proto::GetRequest*>(&::cockroach::proto::GetRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutRequest*>(&::cockroach::proto::PutRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutRequest*>(&::cockroach::proto::ConditionalPutRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementRequest*>(&::cockroach::proto::IncrementRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteRequest*>(&::cockroach::proto::DeleteRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeRequest*>(&::cockroach::proto::DeleteRangeRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->scan_ = const_cast< ::cockroach::proto::ScanRequest*>(&::cockroach::proto::ScanRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionRequest*>(&::cockroach::proto::EndTransactionRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->batch_ = const_cast< ::cockroach::proto::BatchRequest*>(&::cockroach::proto::BatchRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_range_lookup_ = const_cast< ::cockroach::proto::InternalRangeLookupRequest*>(&::cockroach::proto::InternalRangeLookupRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_heartbeat_txn_ = const_cast< ::cockroach::proto::InternalHeartbeatTxnRequest*>(&::cockroach::proto::InternalHeartbeatTxnRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnRequest*>(&::cockroach::proto::InternalPushTxnRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentRequest*>(&::cockroach::proto::InternalResolveIntentRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_resolve_intent_range_ = const_cast< ::cockroach::proto::InternalResolveIntentRangeRequest*>(&::cockroach::proto::InternalResolveIntentRangeRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_merge_response_ = const_cast< ::cockroach::proto::InternalMergeRequest*>(&::cockroach::proto::InternalMergeRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_truncate_log_ = const_cast< ::cockroach::proto::InternalTruncateLogRequest*>(&::cockroach::proto::InternalTruncateLogRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_gc_ = const_cast< ::cockroach::proto::InternalGCRequest*>(&::cockroach::proto::InternalGCRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_lease_ = const_cast< ::cockroach::proto::InternalLeaderLeaseRequest*>(&::cockroach::proto::InternalLeaderLeaseRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_batch_ = const_cast< ::cockroach::proto::InternalBatchRequest*>(&::cockroach::proto::InternalBatchRequest::default_instance());
}

InternalRaftCommandUnion::InternalRaftCommandUnion(const InternalRaftCommandUnion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRaftCommandUnion)
}

void InternalRaftCommandUnion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

InternalRaftCommandUnion::~InternalRaftCommandUnion() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRaftCommandUnion)
  SharedDtor();
}

void InternalRaftCommandUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void InternalRaftCommandUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRaftCommandUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRaftCommandUnion_descriptor_;
}

const InternalRaftCommandUnion& InternalRaftCommandUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRaftCommandUnion* InternalRaftCommandUnion::default_instance_ = NULL;

InternalRaftCommandUnion* InternalRaftCommandUnion::New(::google::protobuf::Arena* arena) const {
  InternalRaftCommandUnion* n = new InternalRaftCommandUnion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalRaftCommandUnion::clear_value() {
  switch(value_case()) {
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kBatch: {
      delete value_.batch_;
      break;
    }
    case kInternalRangeLookup: {
      delete value_.internal_range_lookup_;
      break;
    }
    case kInternalHeartbeatTxn: {
      delete value_.internal_heartbeat_txn_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalResolveIntentRange: {
      delete value_.internal_resolve_intent_range_;
      break;
    }
    case kInternalMergeResponse: {
      delete value_.internal_merge_response_;
      break;
    }
    case kInternalTruncateLog: {
      delete value_.internal_truncate_log_;
      break;
    }
    case kInternalGc: {
      delete value_.internal_gc_;
      break;
    }
    case kInternalLease: {
      delete value_.internal_lease_;
      break;
    }
    case kInternalBatch: {
      delete value_.internal_batch_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void InternalRaftCommandUnion::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalRaftCommandUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRaftCommandUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_put;
        break;
      }

      // optional .cockroach.proto.PutRequest put = 3;
      case 3: {
        if (tag == 26) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
      case 4: {
        if (tag == 34) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementRequest increment = 5;
      case 5: {
        if (tag == 42) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteRequest delete = 6;
      case 6: {
        if (tag == 50) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
      case 7: {
        if (tag == 58) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scan;
        break;
      }

      // optional .cockroach.proto.ScanRequest scan = 8;
      case 8: {
        if (tag == 66) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
      case 9: {
        if (tag == 74) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_batch;
        break;
      }

      // optional .cockroach.proto.BatchRequest batch = 30;
      case 30: {
        if (tag == 242) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_internal_range_lookup;
        break;
      }

      // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
      case 31: {
        if (tag == 250) {
         parse_internal_range_lookup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_range_lookup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_internal_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
      case 32: {
        if (tag == 258) {
         parse_internal_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
      case 33: {
        if (tag == 266) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
      case 34: {
        if (tag == 274) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_internal_resolve_intent_range;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 35;
      case 35: {
        if (tag == 282) {
         parse_internal_resolve_intent_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_internal_merge_response;
        break;
      }

      // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 36;
      case 36: {
        if (tag == 290) {
         parse_internal_merge_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_merge_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_internal_truncate_log;
        break;
      }

      // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 37;
      case 37: {
        if (tag == 298) {
         parse_internal_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_internal_gc;
        break;
      }

      // optional .cockroach.proto.InternalGCRequest internal_gc = 38;
      case 38: {
        if (tag == 306) {
         parse_internal_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_internal_lease;
        break;
      }

      // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 39;
      case 39: {
        if (tag == 314) {
         parse_internal_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_internal_batch;
        break;
      }

      // optional .cockroach.proto.InternalBatchRequest internal_batch = 40;
      case 40: {
        if (tag == 322) {
         parse_internal_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRaftCommandUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRaftCommandUnion)
  return false;
#undef DO_
}

void InternalRaftCommandUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRaftCommandUnion)
  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *value_.get_, output);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *value_.put_, output);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *value_.conditional_put_, output);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *value_.increment_, output);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *value_.delete__, output);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *value_.delete_range_, output);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *value_.scan_, output);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *value_.end_transaction_, output);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *value_.batch_, output);
  }

  // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
  if (has_internal_range_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *value_.internal_range_lookup_, output);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
  if (has_internal_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *value_.internal_heartbeat_txn_, output);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *value_.internal_push_txn_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *value_.internal_resolve_intent_, output);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 35;
  if (has_internal_resolve_intent_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *value_.internal_resolve_intent_range_, output);
  }

  // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 36;
  if (has_internal_merge_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *value_.internal_merge_response_, output);
  }

  // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 37;
  if (has_internal_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *value_.internal_truncate_log_, output);
  }

  // optional .cockroach.proto.InternalGCRequest internal_gc = 38;
  if (has_internal_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *value_.internal_gc_, output);
  }

  // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 39;
  if (has_internal_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *value_.internal_lease_, output);
  }

  // optional .cockroach.proto.InternalBatchRequest internal_batch = 40;
  if (has_internal_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *value_.internal_batch_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRaftCommandUnion)
}

::google::protobuf::uint8* InternalRaftCommandUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRaftCommandUnion)
  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *value_.get_, target);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *value_.put_, target);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *value_.conditional_put_, target);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *value_.increment_, target);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *value_.delete__, target);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *value_.delete_range_, target);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *value_.scan_, target);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *value_.end_transaction_, target);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, *value_.batch_, target);
  }

  // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
  if (has_internal_range_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, *value_.internal_range_lookup_, target);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
  if (has_internal_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, *value_.internal_heartbeat_txn_, target);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, *value_.internal_push_txn_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, *value_.internal_resolve_intent_, target);
  }

  // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 35;
  if (has_internal_resolve_intent_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, *value_.internal_resolve_intent_range_, target);
  }

  // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 36;
  if (has_internal_merge_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, *value_.internal_merge_response_, target);
  }

  // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 37;
  if (has_internal_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, *value_.internal_truncate_log_, target);
  }

  // optional .cockroach.proto.InternalGCRequest internal_gc = 38;
  if (has_internal_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, *value_.internal_gc_, target);
  }

  // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 39;
  if (has_internal_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, *value_.internal_lease_, target);
  }

  // optional .cockroach.proto.InternalBatchRequest internal_batch = 40;
  if (has_internal_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, *value_.internal_batch_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRaftCommandUnion)
  return target;
}

int InternalRaftCommandUnion::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.GetRequest get = 2;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.get_);
      break;
    }
    // optional .cockroach.proto.PutRequest put = 3;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.put_);
      break;
    }
    // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.conditional_put_);
      break;
    }
    // optional .cockroach.proto.IncrementRequest increment = 5;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.increment_);
      break;
    }
    // optional .cockroach.proto.DeleteRequest delete = 6;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete__);
      break;
    }
    // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.delete_range_);
      break;
    }
    // optional .cockroach.proto.ScanRequest scan = 8;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.scan_);
      break;
    }
    // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.end_transaction_);
      break;
    }
    // optional .cockroach.proto.BatchRequest batch = 30;
    case kBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.batch_);
      break;
    }
    // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
    case kInternalRangeLookup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_range_lookup_);
      break;
    }
    // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
    case kInternalHeartbeatTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_heartbeat_txn_);
      break;
    }
    // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
    case kInternalPushTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_push_txn_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
    case kInternalResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_);
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 35;
    case kInternalResolveIntentRange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_resolve_intent_range_);
      break;
    }
    // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 36;
    case kInternalMergeResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_merge_response_);
      break;
    }
    // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 37;
    case kInternalTruncateLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_truncate_log_);
      break;
    }
    // optional .cockroach.proto.InternalGCRequest internal_gc = 38;
    case kInternalGc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_gc_);
      break;
    }
    // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 39;
    case kInternalLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_lease_);
      break;
    }
    // optional .cockroach.proto.InternalBatchRequest internal_batch = 40;
    case kInternalBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *value_.internal_batch_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRaftCommandUnion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalRaftCommandUnion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalRaftCommandUnion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRaftCommandUnion::MergeFrom(const InternalRaftCommandUnion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.value_case()) {
    case kGet: {
      mutable_get()->::cockroach::proto::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::proto::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::proto::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionRequest::MergeFrom(from.end_transaction());
      break;
    }
    case kBatch: {
      mutable_batch()->::cockroach::proto::BatchRequest::MergeFrom(from.batch());
      break;
    }
    case kInternalRangeLookup: {
      mutable_internal_range_lookup()->::cockroach::proto::InternalRangeLookupRequest::MergeFrom(from.internal_range_lookup());
      break;
    }
    case kInternalHeartbeatTxn: {
      mutable_internal_heartbeat_txn()->::cockroach::proto::InternalHeartbeatTxnRequest::MergeFrom(from.internal_heartbeat_txn());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnRequest::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentRequest::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalResolveIntentRange: {
      mutable_internal_resolve_intent_range()->::cockroach::proto::InternalResolveIntentRangeRequest::MergeFrom(from.internal_resolve_intent_range());
      break;
    }
    case kInternalMergeResponse: {
      mutable_internal_merge_response()->::cockroach::proto::InternalMergeRequest::MergeFrom(from.internal_merge_response());
      break;
    }
    case kInternalTruncateLog: {
      mutable_internal_truncate_log()->::cockroach::proto::InternalTruncateLogRequest::MergeFrom(from.internal_truncate_log());
      break;
    }
    case kInternalGc: {
      mutable_internal_gc()->::cockroach::proto::InternalGCRequest::MergeFrom(from.internal_gc());
      break;
    }
    case kInternalLease: {
      mutable_internal_lease()->::cockroach::proto::InternalLeaderLeaseRequest::MergeFrom(from.internal_lease());
      break;
    }
    case kInternalBatch: {
      mutable_internal_batch()->::cockroach::proto::InternalBatchRequest::MergeFrom(from.internal_batch());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalRaftCommandUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRaftCommandUnion::CopyFrom(const InternalRaftCommandUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRaftCommandUnion::IsInitialized() const {

  return true;
}

void InternalRaftCommandUnion::Swap(InternalRaftCommandUnion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalRaftCommandUnion::InternalSwap(InternalRaftCommandUnion* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalRaftCommandUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRaftCommandUnion_descriptor_;
  metadata.reflection = InternalRaftCommandUnion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalRaftCommandUnion

// optional .cockroach.proto.GetRequest get = 2;
bool InternalRaftCommandUnion::has_get() const {
  return value_case() == kGet;
}
void InternalRaftCommandUnion::set_has_get() {
  _oneof_case_[0] = kGet;
}
void InternalRaftCommandUnion::clear_get() {
  if (has_get()) {
    delete value_.get_;
    clear_has_value();
  }
}
 const ::cockroach::proto::GetRequest& InternalRaftCommandUnion::get() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.get)
  return has_get() ? *value_.get_
                      : ::cockroach::proto::GetRequest::default_instance();
}
 ::cockroach::proto::GetRequest* InternalRaftCommandUnion::mutable_get() {
  if (!has_get()) {
    clear_value();
    set_has_get();
    value_.get_ = new ::cockroach::proto::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.get)
  return value_.get_;
}
 ::cockroach::proto::GetRequest* InternalRaftCommandUnion::release_get() {
  if (has_get()) {
    clear_has_value();
    ::cockroach::proto::GetRequest* temp = value_.get_;
    value_.get_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_get(::cockroach::proto::GetRequest* get) {
  clear_value();
  if (get) {
    set_has_get();
    value_.get_ = get;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.get)
}

// optional .cockroach.proto.PutRequest put = 3;
bool InternalRaftCommandUnion::has_put() const {
  return value_case() == kPut;
}
void InternalRaftCommandUnion::set_has_put() {
  _oneof_case_[0] = kPut;
}
void InternalRaftCommandUnion::clear_put() {
  if (has_put()) {
    delete value_.put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::PutRequest& InternalRaftCommandUnion::put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.put)
  return has_put() ? *value_.put_
                      : ::cockroach::proto::PutRequest::default_instance();
}
 ::cockroach::proto::PutRequest* InternalRaftCommandUnion::mutable_put() {
  if (!has_put()) {
    clear_value();
    set_has_put();
    value_.put_ = new ::cockroach::proto::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.put)
  return value_.put_;
}
 ::cockroach::proto::PutRequest* InternalRaftCommandUnion::release_put() {
  if (has_put()) {
    clear_has_value();
    ::cockroach::proto::PutRequest* temp = value_.put_;
    value_.put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_put(::cockroach::proto::PutRequest* put) {
  clear_value();
  if (put) {
    set_has_put();
    value_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.put)
}

// optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
bool InternalRaftCommandUnion::has_conditional_put() const {
  return value_case() == kConditionalPut;
}
void InternalRaftCommandUnion::set_has_conditional_put() {
  _oneof_case_[0] = kConditionalPut;
}
void InternalRaftCommandUnion::clear_conditional_put() {
  if (has_conditional_put()) {
    delete value_.conditional_put_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ConditionalPutRequest& InternalRaftCommandUnion::conditional_put() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.conditional_put)
  return has_conditional_put() ? *value_.conditional_put_
                      : ::cockroach::proto::ConditionalPutRequest::default_instance();
}
 ::cockroach::proto::ConditionalPutRequest* InternalRaftCommandUnion::mutable_conditional_put() {
  if (!has_conditional_put()) {
    clear_value();
    set_has_conditional_put();
    value_.conditional_put_ = new ::cockroach::proto::ConditionalPutRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.conditional_put)
  return value_.conditional_put_;
}
 ::cockroach::proto::ConditionalPutRequest* InternalRaftCommandUnion::release_conditional_put() {
  if (has_conditional_put()) {
    clear_has_value();
    ::cockroach::proto::ConditionalPutRequest* temp = value_.conditional_put_;
    value_.conditional_put_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_conditional_put(::cockroach::proto::ConditionalPutRequest* conditional_put) {
  clear_value();
  if (conditional_put) {
    set_has_conditional_put();
    value_.conditional_put_ = conditional_put;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.conditional_put)
}

// optional .cockroach.proto.IncrementRequest increment = 5;
bool InternalRaftCommandUnion::has_increment() const {
  return value_case() == kIncrement;
}
void InternalRaftCommandUnion::set_has_increment() {
  _oneof_case_[0] = kIncrement;
}
void InternalRaftCommandUnion::clear_increment() {
  if (has_increment()) {
    delete value_.increment_;
    clear_has_value();
  }
}
 const ::cockroach::proto::IncrementRequest& InternalRaftCommandUnion::increment() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.increment)
  return has_increment() ? *value_.increment_
                      : ::cockroach::proto::IncrementRequest::default_instance();
}
 ::cockroach::proto::IncrementRequest* InternalRaftCommandUnion::mutable_increment() {
  if (!has_increment()) {
    clear_value();
    set_has_increment();
    value_.increment_ = new ::cockroach::proto::IncrementRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.increment)
  return value_.increment_;
}
 ::cockroach::proto::IncrementRequest* InternalRaftCommandUnion::release_increment() {
  if (has_increment()) {
    clear_has_value();
    ::cockroach::proto::IncrementRequest* temp = value_.increment_;
    value_.increment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_increment(::cockroach::proto::IncrementRequest* increment) {
  clear_value();
  if (increment) {
    set_has_increment();
    value_.increment_ = increment;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.increment)
}

// optional .cockroach.proto.DeleteRequest delete = 6;
bool InternalRaftCommandUnion::has_delete_() const {
  return value_case() == kDelete;
}
void InternalRaftCommandUnion::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
void InternalRaftCommandUnion::clear_delete_() {
  if (has_delete_()) {
    delete value_.delete__;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRequest& InternalRaftCommandUnion::delete_() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.delete)
  return has_delete_() ? *value_.delete__
                      : ::cockroach::proto::DeleteRequest::default_instance();
}
 ::cockroach::proto::DeleteRequest* InternalRaftCommandUnion::mutable_delete_() {
  if (!has_delete_()) {
    clear_value();
    set_has_delete_();
    value_.delete__ = new ::cockroach::proto::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.delete)
  return value_.delete__;
}
 ::cockroach::proto::DeleteRequest* InternalRaftCommandUnion::release_delete_() {
  if (has_delete_()) {
    clear_has_value();
    ::cockroach::proto::DeleteRequest* temp = value_.delete__;
    value_.delete__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_delete_(::cockroach::proto::DeleteRequest* delete_) {
  clear_value();
  if (delete_) {
    set_has_delete_();
    value_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.delete)
}

// optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
bool InternalRaftCommandUnion::has_delete_range() const {
  return value_case() == kDeleteRange;
}
void InternalRaftCommandUnion::set_has_delete_range() {
  _oneof_case_[0] = kDeleteRange;
}
void InternalRaftCommandUnion::clear_delete_range() {
  if (has_delete_range()) {
    delete value_.delete_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::DeleteRangeRequest& InternalRaftCommandUnion::delete_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.delete_range)
  return has_delete_range() ? *value_.delete_range_
                      : ::cockroach::proto::DeleteRangeRequest::default_instance();
}
 ::cockroach::proto::DeleteRangeRequest* InternalRaftCommandUnion::mutable_delete_range() {
  if (!has_delete_range()) {
    clear_value();
    set_has_delete_range();
    value_.delete_range_ = new ::cockroach::proto::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.delete_range)
  return value_.delete_range_;
}
 ::cockroach::proto::DeleteRangeRequest* InternalRaftCommandUnion::release_delete_range() {
  if (has_delete_range()) {
    clear_has_value();
    ::cockroach::proto::DeleteRangeRequest* temp = value_.delete_range_;
    value_.delete_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_delete_range(::cockroach::proto::DeleteRangeRequest* delete_range) {
  clear_value();
  if (delete_range) {
    set_has_delete_range();
    value_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.delete_range)
}

// optional .cockroach.proto.ScanRequest scan = 8;
bool InternalRaftCommandUnion::has_scan() const {
  return value_case() == kScan;
}
void InternalRaftCommandUnion::set_has_scan() {
  _oneof_case_[0] = kScan;
}
void InternalRaftCommandUnion::clear_scan() {
  if (has_scan()) {
    delete value_.scan_;
    clear_has_value();
  }
}
 const ::cockroach::proto::ScanRequest& InternalRaftCommandUnion::scan() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.scan)
  return has_scan() ? *value_.scan_
                      : ::cockroach::proto::ScanRequest::default_instance();
}
 ::cockroach::proto::ScanRequest* InternalRaftCommandUnion::mutable_scan() {
  if (!has_scan()) {
    clear_value();
    set_has_scan();
    value_.scan_ = new ::cockroach::proto::ScanRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.scan)
  return value_.scan_;
}
 ::cockroach::proto::ScanRequest* InternalRaftCommandUnion::release_scan() {
  if (has_scan()) {
    clear_has_value();
    ::cockroach::proto::ScanRequest* temp = value_.scan_;
    value_.scan_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_scan(::cockroach::proto::ScanRequest* scan) {
  clear_value();
  if (scan) {
    set_has_scan();
    value_.scan_ = scan;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.scan)
}

// optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
bool InternalRaftCommandUnion::has_end_transaction() const {
  return value_case() == kEndTransaction;
}
void InternalRaftCommandUnion::set_has_end_transaction() {
  _oneof_case_[0] = kEndTransaction;
}
void InternalRaftCommandUnion::clear_end_transaction() {
  if (has_end_transaction()) {
    delete value_.end_transaction_;
    clear_has_value();
  }
}
 const ::cockroach::proto::EndTransactionRequest& InternalRaftCommandUnion::end_transaction() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.end_transaction)
  return has_end_transaction() ? *value_.end_transaction_
                      : ::cockroach::proto::EndTransactionRequest::default_instance();
}
 ::cockroach::proto::EndTransactionRequest* InternalRaftCommandUnion::mutable_end_transaction() {
  if (!has_end_transaction()) {
    clear_value();
    set_has_end_transaction();
    value_.end_transaction_ = new ::cockroach::proto::EndTransactionRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.end_transaction)
  return value_.end_transaction_;
}
 ::cockroach::proto::EndTransactionRequest* InternalRaftCommandUnion::release_end_transaction() {
  if (has_end_transaction()) {
    clear_has_value();
    ::cockroach::proto::EndTransactionRequest* temp = value_.end_transaction_;
    value_.end_transaction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_end_transaction(::cockroach::proto::EndTransactionRequest* end_transaction) {
  clear_value();
  if (end_transaction) {
    set_has_end_transaction();
    value_.end_transaction_ = end_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.end_transaction)
}

// optional .cockroach.proto.BatchRequest batch = 30;
bool InternalRaftCommandUnion::has_batch() const {
  return value_case() == kBatch;
}
void InternalRaftCommandUnion::set_has_batch() {
  _oneof_case_[0] = kBatch;
}
void InternalRaftCommandUnion::clear_batch() {
  if (has_batch()) {
    delete value_.batch_;
    clear_has_value();
  }
}
 const ::cockroach::proto::BatchRequest& InternalRaftCommandUnion::batch() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.batch)
  return has_batch() ? *value_.batch_
                      : ::cockroach::proto::BatchRequest::default_instance();
}
 ::cockroach::proto::BatchRequest* InternalRaftCommandUnion::mutable_batch() {
  if (!has_batch()) {
    clear_value();
    set_has_batch();
    value_.batch_ = new ::cockroach::proto::BatchRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.batch)
  return value_.batch_;
}
 ::cockroach::proto::BatchRequest* InternalRaftCommandUnion::release_batch() {
  if (has_batch()) {
    clear_has_value();
    ::cockroach::proto::BatchRequest* temp = value_.batch_;
    value_.batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_batch(::cockroach::proto::BatchRequest* batch) {
  clear_value();
  if (batch) {
    set_has_batch();
    value_.batch_ = batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.batch)
}

// optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
bool InternalRaftCommandUnion::has_internal_range_lookup() const {
  return value_case() == kInternalRangeLookup;
}
void InternalRaftCommandUnion::set_has_internal_range_lookup() {
  _oneof_case_[0] = kInternalRangeLookup;
}
void InternalRaftCommandUnion::clear_internal_range_lookup() {
  if (has_internal_range_lookup()) {
    delete value_.internal_range_lookup_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalRangeLookupRequest& InternalRaftCommandUnion::internal_range_lookup() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_range_lookup)
  return has_internal_range_lookup() ? *value_.internal_range_lookup_
                      : ::cockroach::proto::InternalRangeLookupRequest::default_instance();
}
 ::cockroach::proto::InternalRangeLookupRequest* InternalRaftCommandUnion::mutable_internal_range_lookup() {
  if (!has_internal_range_lookup()) {
    clear_value();
    set_has_internal_range_lookup();
    value_.internal_range_lookup_ = new ::cockroach::proto::InternalRangeLookupRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_range_lookup)
  return value_.internal_range_lookup_;
}
 ::cockroach::proto::InternalRangeLookupRequest* InternalRaftCommandUnion::release_internal_range_lookup() {
  if (has_internal_range_lookup()) {
    clear_has_value();
    ::cockroach::proto::InternalRangeLookupRequest* temp = value_.internal_range_lookup_;
    value_.internal_range_lookup_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_range_lookup(::cockroach::proto::InternalRangeLookupRequest* internal_range_lookup) {
  clear_value();
  if (internal_range_lookup) {
    set_has_internal_range_lookup();
    value_.internal_range_lookup_ = internal_range_lookup;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_range_lookup)
}

// optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
bool InternalRaftCommandUnion::has_internal_heartbeat_txn() const {
  return value_case() == kInternalHeartbeatTxn;
}
void InternalRaftCommandUnion::set_has_internal_heartbeat_txn() {
  _oneof_case_[0] = kInternalHeartbeatTxn;
}
void InternalRaftCommandUnion::clear_internal_heartbeat_txn() {
  if (has_internal_heartbeat_txn()) {
    delete value_.internal_heartbeat_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalHeartbeatTxnRequest& InternalRaftCommandUnion::internal_heartbeat_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_heartbeat_txn)
  return has_internal_heartbeat_txn() ? *value_.internal_heartbeat_txn_
                      : ::cockroach::proto::InternalHeartbeatTxnRequest::default_instance();
}
 ::cockroach::proto::InternalHeartbeatTxnRequest* InternalRaftCommandUnion::mutable_internal_heartbeat_txn() {
  if (!has_internal_heartbeat_txn()) {
    clear_value();
    set_has_internal_heartbeat_txn();
    value_.internal_heartbeat_txn_ = new ::cockroach::proto::InternalHeartbeatTxnRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_heartbeat_txn)
  return value_.internal_heartbeat_txn_;
}
 ::cockroach::proto::InternalHeartbeatTxnRequest* InternalRaftCommandUnion::release_internal_heartbeat_txn() {
  if (has_internal_heartbeat_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalHeartbeatTxnRequest* temp = value_.internal_heartbeat_txn_;
    value_.internal_heartbeat_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_heartbeat_txn(::cockroach::proto::InternalHeartbeatTxnRequest* internal_heartbeat_txn) {
  clear_value();
  if (internal_heartbeat_txn) {
    set_has_internal_heartbeat_txn();
    value_.internal_heartbeat_txn_ = internal_heartbeat_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_heartbeat_txn)
}

// optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
bool InternalRaftCommandUnion::has_internal_push_txn() const {
  return value_case() == kInternalPushTxn;
}
void InternalRaftCommandUnion::set_has_internal_push_txn() {
  _oneof_case_[0] = kInternalPushTxn;
}
void InternalRaftCommandUnion::clear_internal_push_txn() {
  if (has_internal_push_txn()) {
    delete value_.internal_push_txn_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalPushTxnRequest& InternalRaftCommandUnion::internal_push_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_push_txn)
  return has_internal_push_txn() ? *value_.internal_push_txn_
                      : ::cockroach::proto::InternalPushTxnRequest::default_instance();
}
 ::cockroach::proto::InternalPushTxnRequest* InternalRaftCommandUnion::mutable_internal_push_txn() {
  if (!has_internal_push_txn()) {
    clear_value();
    set_has_internal_push_txn();
    value_.internal_push_txn_ = new ::cockroach::proto::InternalPushTxnRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_push_txn)
  return value_.internal_push_txn_;
}
 ::cockroach::proto::InternalPushTxnRequest* InternalRaftCommandUnion::release_internal_push_txn() {
  if (has_internal_push_txn()) {
    clear_has_value();
    ::cockroach::proto::InternalPushTxnRequest* temp = value_.internal_push_txn_;
    value_.internal_push_txn_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_push_txn(::cockroach::proto::InternalPushTxnRequest* internal_push_txn) {
  clear_value();
  if (internal_push_txn) {
    set_has_internal_push_txn();
    value_.internal_push_txn_ = internal_push_txn;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_push_txn)
}

// optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
bool InternalRaftCommandUnion::has_internal_resolve_intent() const {
  return value_case() == kInternalResolveIntent;
}
void InternalRaftCommandUnion::set_has_internal_resolve_intent() {
  _oneof_case_[0] = kInternalResolveIntent;
}
void InternalRaftCommandUnion::clear_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    delete value_.internal_resolve_intent_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRequest& InternalRaftCommandUnion::internal_resolve_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent)
  return has_internal_resolve_intent() ? *value_.internal_resolve_intent_
                      : ::cockroach::proto::InternalResolveIntentRequest::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRequest* InternalRaftCommandUnion::mutable_internal_resolve_intent() {
  if (!has_internal_resolve_intent()) {
    clear_value();
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = new ::cockroach::proto::InternalResolveIntentRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent)
  return value_.internal_resolve_intent_;
}
 ::cockroach::proto::InternalResolveIntentRequest* InternalRaftCommandUnion::release_internal_resolve_intent() {
  if (has_internal_resolve_intent()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRequest* temp = value_.internal_resolve_intent_;
    value_.internal_resolve_intent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_resolve_intent(::cockroach::proto::InternalResolveIntentRequest* internal_resolve_intent) {
  clear_value();
  if (internal_resolve_intent) {
    set_has_internal_resolve_intent();
    value_.internal_resolve_intent_ = internal_resolve_intent;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent)
}

// optional .cockroach.proto.InternalResolveIntentRangeRequest internal_resolve_intent_range = 35;
bool InternalRaftCommandUnion::has_internal_resolve_intent_range() const {
  return value_case() == kInternalResolveIntentRange;
}
void InternalRaftCommandUnion::set_has_internal_resolve_intent_range() {
  _oneof_case_[0] = kInternalResolveIntentRange;
}
void InternalRaftCommandUnion::clear_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    delete value_.internal_resolve_intent_range_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalResolveIntentRangeRequest& InternalRaftCommandUnion::internal_resolve_intent_range() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent_range)
  return has_internal_resolve_intent_range() ? *value_.internal_resolve_intent_range_
                      : ::cockroach::proto::InternalResolveIntentRangeRequest::default_instance();
}
 ::cockroach::proto::InternalResolveIntentRangeRequest* InternalRaftCommandUnion::mutable_internal_resolve_intent_range() {
  if (!has_internal_resolve_intent_range()) {
    clear_value();
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = new ::cockroach::proto::InternalResolveIntentRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent_range)
  return value_.internal_resolve_intent_range_;
}
 ::cockroach::proto::InternalResolveIntentRangeRequest* InternalRaftCommandUnion::release_internal_resolve_intent_range() {
  if (has_internal_resolve_intent_range()) {
    clear_has_value();
    ::cockroach::proto::InternalResolveIntentRangeRequest* temp = value_.internal_resolve_intent_range_;
    value_.internal_resolve_intent_range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_resolve_intent_range(::cockroach::proto::InternalResolveIntentRangeRequest* internal_resolve_intent_range) {
  clear_value();
  if (internal_resolve_intent_range) {
    set_has_internal_resolve_intent_range();
    value_.internal_resolve_intent_range_ = internal_resolve_intent_range;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_resolve_intent_range)
}

// optional .cockroach.proto.InternalMergeRequest internal_merge_response = 36;
bool InternalRaftCommandUnion::has_internal_merge_response() const {
  return value_case() == kInternalMergeResponse;
}
void InternalRaftCommandUnion::set_has_internal_merge_response() {
  _oneof_case_[0] = kInternalMergeResponse;
}
void InternalRaftCommandUnion::clear_internal_merge_response() {
  if (has_internal_merge_response()) {
    delete value_.internal_merge_response_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalMergeRequest& InternalRaftCommandUnion::internal_merge_response() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_merge_response)
  return has_internal_merge_response() ? *value_.internal_merge_response_
                      : ::cockroach::proto::InternalMergeRequest::default_instance();
}
 ::cockroach::proto::InternalMergeRequest* InternalRaftCommandUnion::mutable_internal_merge_response() {
  if (!has_internal_merge_response()) {
    clear_value();
    set_has_internal_merge_response();
    value_.internal_merge_response_ = new ::cockroach::proto::InternalMergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_merge_response)
  return value_.internal_merge_response_;
}
 ::cockroach::proto::InternalMergeRequest* InternalRaftCommandUnion::release_internal_merge_response() {
  if (has_internal_merge_response()) {
    clear_has_value();
    ::cockroach::proto::InternalMergeRequest* temp = value_.internal_merge_response_;
    value_.internal_merge_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_merge_response(::cockroach::proto::InternalMergeRequest* internal_merge_response) {
  clear_value();
  if (internal_merge_response) {
    set_has_internal_merge_response();
    value_.internal_merge_response_ = internal_merge_response;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_merge_response)
}

// optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 37;
bool InternalRaftCommandUnion::has_internal_truncate_log() const {
  return value_case() == kInternalTruncateLog;
}
void InternalRaftCommandUnion::set_has_internal_truncate_log() {
  _oneof_case_[0] = kInternalTruncateLog;
}
void InternalRaftCommandUnion::clear_internal_truncate_log() {
  if (has_internal_truncate_log()) {
    delete value_.internal_truncate_log_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalTruncateLogRequest& InternalRaftCommandUnion::internal_truncate_log() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_truncate_log)
  return has_internal_truncate_log() ? *value_.internal_truncate_log_
                      : ::cockroach::proto::InternalTruncateLogRequest::default_instance();
}
 ::cockroach::proto::InternalTruncateLogRequest* InternalRaftCommandUnion::mutable_internal_truncate_log() {
  if (!has_internal_truncate_log()) {
    clear_value();
    set_has_internal_truncate_log();
    value_.internal_truncate_log_ = new ::cockroach::proto::InternalTruncateLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_truncate_log)
  return value_.internal_truncate_log_;
}
 ::cockroach::proto::InternalTruncateLogRequest* InternalRaftCommandUnion::release_internal_truncate_log() {
  if (has_internal_truncate_log()) {
    clear_has_value();
    ::cockroach::proto::InternalTruncateLogRequest* temp = value_.internal_truncate_log_;
    value_.internal_truncate_log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_truncate_log(::cockroach::proto::InternalTruncateLogRequest* internal_truncate_log) {
  clear_value();
  if (internal_truncate_log) {
    set_has_internal_truncate_log();
    value_.internal_truncate_log_ = internal_truncate_log;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_truncate_log)
}

// optional .cockroach.proto.InternalGCRequest internal_gc = 38;
bool InternalRaftCommandUnion::has_internal_gc() const {
  return value_case() == kInternalGc;
}
void InternalRaftCommandUnion::set_has_internal_gc() {
  _oneof_case_[0] = kInternalGc;
}
void InternalRaftCommandUnion::clear_internal_gc() {
  if (has_internal_gc()) {
    delete value_.internal_gc_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalGCRequest& InternalRaftCommandUnion::internal_gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_gc)
  return has_internal_gc() ? *value_.internal_gc_
                      : ::cockroach::proto::InternalGCRequest::default_instance();
}
 ::cockroach::proto::InternalGCRequest* InternalRaftCommandUnion::mutable_internal_gc() {
  if (!has_internal_gc()) {
    clear_value();
    set_has_internal_gc();
    value_.internal_gc_ = new ::cockroach::proto::InternalGCRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_gc)
  return value_.internal_gc_;
}
 ::cockroach::proto::InternalGCRequest* InternalRaftCommandUnion::release_internal_gc() {
  if (has_internal_gc()) {
    clear_has_value();
    ::cockroach::proto::InternalGCRequest* temp = value_.internal_gc_;
    value_.internal_gc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_gc(::cockroach::proto::InternalGCRequest* internal_gc) {
  clear_value();
  if (internal_gc) {
    set_has_internal_gc();
    value_.internal_gc_ = internal_gc;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_gc)
}

// optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 39;
bool InternalRaftCommandUnion::has_internal_lease() const {
  return value_case() == kInternalLease;
}
void InternalRaftCommandUnion::set_has_internal_lease() {
  _oneof_case_[0] = kInternalLease;
}
void InternalRaftCommandUnion::clear_internal_lease() {
  if (has_internal_lease()) {
    delete value_.internal_lease_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalLeaderLeaseRequest& InternalRaftCommandUnion::internal_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_lease)
  return has_internal_lease() ? *value_.internal_lease_
                      : ::cockroach::proto::InternalLeaderLeaseRequest::default_instance();
}
 ::cockroach::proto::InternalLeaderLeaseRequest* InternalRaftCommandUnion::mutable_internal_lease() {
  if (!has_internal_lease()) {
    clear_value();
    set_has_internal_lease();
    value_.internal_lease_ = new ::cockroach::proto::InternalLeaderLeaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_lease)
  return value_.internal_lease_;
}
 ::cockroach::proto::InternalLeaderLeaseRequest* InternalRaftCommandUnion::release_internal_lease() {
  if (has_internal_lease()) {
    clear_has_value();
    ::cockroach::proto::InternalLeaderLeaseRequest* temp = value_.internal_lease_;
    value_.internal_lease_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_lease(::cockroach::proto::InternalLeaderLeaseRequest* internal_lease) {
  clear_value();
  if (internal_lease) {
    set_has_internal_lease();
    value_.internal_lease_ = internal_lease;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_lease)
}

// optional .cockroach.proto.InternalBatchRequest internal_batch = 40;
bool InternalRaftCommandUnion::has_internal_batch() const {
  return value_case() == kInternalBatch;
}
void InternalRaftCommandUnion::set_has_internal_batch() {
  _oneof_case_[0] = kInternalBatch;
}
void InternalRaftCommandUnion::clear_internal_batch() {
  if (has_internal_batch()) {
    delete value_.internal_batch_;
    clear_has_value();
  }
}
 const ::cockroach::proto::InternalBatchRequest& InternalRaftCommandUnion::internal_batch() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommandUnion.internal_batch)
  return has_internal_batch() ? *value_.internal_batch_
                      : ::cockroach::proto::InternalBatchRequest::default_instance();
}
 ::cockroach::proto::InternalBatchRequest* InternalRaftCommandUnion::mutable_internal_batch() {
  if (!has_internal_batch()) {
    clear_value();
    set_has_internal_batch();
    value_.internal_batch_ = new ::cockroach::proto::InternalBatchRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommandUnion.internal_batch)
  return value_.internal_batch_;
}
 ::cockroach::proto::InternalBatchRequest* InternalRaftCommandUnion::release_internal_batch() {
  if (has_internal_batch()) {
    clear_has_value();
    ::cockroach::proto::InternalBatchRequest* temp = value_.internal_batch_;
    value_.internal_batch_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void InternalRaftCommandUnion::set_allocated_internal_batch(::cockroach::proto::InternalBatchRequest* internal_batch) {
  clear_value();
  if (internal_batch) {
    set_has_internal_batch();
    value_.internal_batch_ = internal_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommandUnion.internal_batch)
}

bool InternalRaftCommandUnion::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void InternalRaftCommandUnion::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
InternalRaftCommandUnion::ValueCase InternalRaftCommandUnion::value_case() const {
  return InternalRaftCommandUnion::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalRaftCommand::kRaftIdFieldNumber;
const int InternalRaftCommand::kOriginNodeIdFieldNumber;
const int InternalRaftCommand::kCmdFieldNumber;
#endif  // !_MSC_VER

InternalRaftCommand::InternalRaftCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRaftCommand)
}

void InternalRaftCommand::InitAsDefaultInstance() {
  cmd_ = const_cast< ::cockroach::proto::InternalRaftCommandUnion*>(&::cockroach::proto::InternalRaftCommandUnion::default_instance());
}

InternalRaftCommand::InternalRaftCommand(const InternalRaftCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRaftCommand)
}

void InternalRaftCommand::SharedCtor() {
  _cached_size_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRaftCommand::~InternalRaftCommand() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRaftCommand)
  SharedDtor();
}

void InternalRaftCommand::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_;
  }
}

void InternalRaftCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRaftCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRaftCommand_descriptor_;
}

const InternalRaftCommand& InternalRaftCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRaftCommand* InternalRaftCommand::default_instance_ = NULL;

InternalRaftCommand* InternalRaftCommand::New(::google::protobuf::Arena* arena) const {
  InternalRaftCommand* n = new InternalRaftCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalRaftCommand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalRaftCommand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(raft_id_, origin_node_id_);
    if (has_cmd()) {
      if (cmd_ != NULL) cmd_->::cockroach::proto::InternalRaftCommandUnion::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalRaftCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRaftCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 raft_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_origin_node_id;
        break;
      }

      // optional uint64 origin_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_origin_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_node_id_)));
          set_has_origin_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRaftCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRaftCommand)
  return false;
#undef DO_
}

void InternalRaftCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRaftCommand)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->raft_id(), output);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->origin_node_id(), output);
  }

  // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRaftCommand)
}

::google::protobuf::uint8* InternalRaftCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRaftCommand)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->raft_id(), target);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->origin_node_id(), target);
  }

  // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cmd_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRaftCommand)
  return target;
}

int InternalRaftCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 raft_id = 1;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

    // optional uint64 origin_node_id = 2;
    if (has_origin_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->origin_node_id());
    }

    // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRaftCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalRaftCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalRaftCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRaftCommand::MergeFrom(const InternalRaftCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
    if (from.has_origin_node_id()) {
      set_origin_node_id(from.origin_node_id());
    }
    if (from.has_cmd()) {
      mutable_cmd()->::cockroach::proto::InternalRaftCommandUnion::MergeFrom(from.cmd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalRaftCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRaftCommand::CopyFrom(const InternalRaftCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRaftCommand::IsInitialized() const {

  return true;
}

void InternalRaftCommand::Swap(InternalRaftCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalRaftCommand::InternalSwap(InternalRaftCommand* other) {
  std::swap(raft_id_, other->raft_id_);
  std::swap(origin_node_id_, other->origin_node_id_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalRaftCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRaftCommand_descriptor_;
  metadata.reflection = InternalRaftCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalRaftCommand

// optional int64 raft_id = 1;
bool InternalRaftCommand::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalRaftCommand::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalRaftCommand::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalRaftCommand::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
 ::google::protobuf::int64 InternalRaftCommand::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommand.raft_id)
  return raft_id_;
}
 void InternalRaftCommand::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalRaftCommand.raft_id)
}

// optional uint64 origin_node_id = 2;
bool InternalRaftCommand::has_origin_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalRaftCommand::set_has_origin_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalRaftCommand::clear_has_origin_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalRaftCommand::clear_origin_node_id() {
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_node_id();
}
 ::google::protobuf::uint64 InternalRaftCommand::origin_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommand.origin_node_id)
  return origin_node_id_;
}
 void InternalRaftCommand::set_origin_node_id(::google::protobuf::uint64 value) {
  set_has_origin_node_id();
  origin_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalRaftCommand.origin_node_id)
}

// optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
bool InternalRaftCommand::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalRaftCommand::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalRaftCommand::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalRaftCommand::clear_cmd() {
  if (cmd_ != NULL) cmd_->::cockroach::proto::InternalRaftCommandUnion::Clear();
  clear_has_cmd();
}
 const ::cockroach::proto::InternalRaftCommandUnion& InternalRaftCommand::cmd() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalRaftCommand.cmd)
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
 ::cockroach::proto::InternalRaftCommandUnion* InternalRaftCommand::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::cockroach::proto::InternalRaftCommandUnion;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalRaftCommand.cmd)
  return cmd_;
}
 ::cockroach::proto::InternalRaftCommandUnion* InternalRaftCommand::release_cmd() {
  clear_has_cmd();
  ::cockroach::proto::InternalRaftCommandUnion* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
 void InternalRaftCommand::set_allocated_cmd(::cockroach::proto::InternalRaftCommandUnion* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalRaftCommand.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftMessageRequest::kGroupIdFieldNumber;
const int RaftMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

RaftMessageRequest::RaftMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::InitAsDefaultInstance() {
}

RaftMessageRequest::RaftMessageRequest(const RaftMessageRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageRequest::~RaftMessageRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageRequest)
  SharedDtor();
}

void RaftMessageRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageRequest_descriptor_;
}

const RaftMessageRequest& RaftMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageRequest* RaftMessageRequest::default_instance_ = NULL;

RaftMessageRequest* RaftMessageRequest::New(::google::protobuf::Arena* arena) const {
  RaftMessageRequest* n = new RaftMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageRequest)
  return false;
#undef DO_
}

void RaftMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageRequest)
}

::google::protobuf::uint8* RaftMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageRequest)
  return target;
}

int RaftMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftMessageRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessageRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageRequest::MergeFrom(const RaftMessageRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageRequest::CopyFrom(const RaftMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageRequest::IsInitialized() const {

  return true;
}

void RaftMessageRequest::Swap(RaftMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessageRequest::InternalSwap(RaftMessageRequest* other) {
  std::swap(group_id_, other->group_id_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageRequest_descriptor_;
  metadata.reflection = RaftMessageRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessageRequest

// optional uint64 group_id = 1;
bool RaftMessageRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftMessageRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftMessageRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftMessageRequest::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
 ::google::protobuf::uint64 RaftMessageRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftMessageRequest.group_id)
  return group_id_;
}
 void RaftMessageRequest::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftMessageRequest.group_id)
}

// optional bytes msg = 2;
bool RaftMessageRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftMessageRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftMessageRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& RaftMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftMessageRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessageRequest::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftMessageRequest.msg)
}
 void RaftMessageRequest::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftMessageRequest.msg)
}
 void RaftMessageRequest::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftMessageRequest.msg)
}
 ::std::string* RaftMessageRequest::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftMessageRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftMessageRequest::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftMessageRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftMessageRequest.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RaftMessageResponse::RaftMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::InitAsDefaultInstance() {
}

RaftMessageResponse::RaftMessageResponse(const RaftMessageResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageResponse::~RaftMessageResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageResponse)
  SharedDtor();
}

void RaftMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageResponse_descriptor_;
}

const RaftMessageResponse& RaftMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageResponse* RaftMessageResponse::default_instance_ = NULL;

RaftMessageResponse* RaftMessageResponse::New(::google::protobuf::Arena* arena) const {
  RaftMessageResponse* n = new RaftMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageResponse)
  return false;
#undef DO_
}

void RaftMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageResponse)
}

::google::protobuf::uint8* RaftMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageResponse)
  return target;
}

int RaftMessageResponse::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftMessageResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessageResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageResponse::MergeFrom(const RaftMessageResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageResponse::CopyFrom(const RaftMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageResponse::IsInitialized() const {

  return true;
}

void RaftMessageResponse::Swap(RaftMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessageResponse::InternalSwap(RaftMessageResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageResponse_descriptor_;
  metadata.reflection = RaftMessageResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessageResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesData::kStartTimestampNanosFieldNumber;
const int InternalTimeSeriesData::kSampleDurationNanosFieldNumber;
const int InternalTimeSeriesData::kSamplesFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesData::InternalTimeSeriesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::InitAsDefaultInstance() {
}

InternalTimeSeriesData::InternalTimeSeriesData(const InternalTimeSeriesData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::SharedCtor() {
  _cached_size_ = 0;
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesData::~InternalTimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesData)
  SharedDtor();
}

void InternalTimeSeriesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesData_descriptor_;
}

const InternalTimeSeriesData& InternalTimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesData* InternalTimeSeriesData::default_instance_ = NULL;

InternalTimeSeriesData* InternalTimeSeriesData::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesData* n = new InternalTimeSeriesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_nanos_, sample_duration_nanos_);

#undef ZR_HELPER_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_nanos_)));
          set_has_start_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sample_duration_nanos;
        break;
      }

      // optional int64 sample_duration_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_sample_duration_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sample_duration_nanos_)));
          set_has_sample_duration_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples;
        break;
      }

      // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
      case 3: {
        if (tag == 26) {
         parse_samples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesData)
  return false;
#undef DO_
}

void InternalTimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp_nanos(), output);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sample_duration_nanos(), output);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->samples(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesData)
}

::google::protobuf::uint8* InternalTimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp_nanos(), target);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sample_duration_nanos(), target);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->samples(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesData)
  return target;
}

int InternalTimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int64 start_timestamp_nanos = 1;
    if (has_start_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp_nanos());
    }

    // optional int64 sample_duration_nanos = 2;
    if (has_sample_duration_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sample_duration_nanos());
    }

  }
  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesData::MergeFrom(const InternalTimeSeriesData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_timestamp_nanos()) {
      set_start_timestamp_nanos(from.start_timestamp_nanos());
    }
    if (from.has_sample_duration_nanos()) {
      set_sample_duration_nanos(from.sample_duration_nanos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesData::CopyFrom(const InternalTimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesData::IsInitialized() const {

  return true;
}

void InternalTimeSeriesData::Swap(InternalTimeSeriesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesData::InternalSwap(InternalTimeSeriesData* other) {
  std::swap(start_timestamp_nanos_, other->start_timestamp_nanos_);
  std::swap(sample_duration_nanos_, other->sample_duration_nanos_);
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesData_descriptor_;
  metadata.reflection = InternalTimeSeriesData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesData

// optional int64 start_timestamp_nanos = 1;
bool InternalTimeSeriesData::has_start_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesData::set_has_start_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesData::clear_has_start_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesData::clear_start_timestamp_nanos() {
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::start_timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
  return start_timestamp_nanos_;
}
 void InternalTimeSeriesData::set_start_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_start_timestamp_nanos();
  start_timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
}

// optional int64 sample_duration_nanos = 2;
bool InternalTimeSeriesData::has_sample_duration_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesData::set_has_sample_duration_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesData::clear_has_sample_duration_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesData::clear_sample_duration_nanos() {
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_sample_duration_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::sample_duration_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
  return sample_duration_nanos_;
}
 void InternalTimeSeriesData::set_sample_duration_nanos(::google::protobuf::int64 value) {
  set_has_sample_duration_nanos();
  sample_duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
}

// repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
int InternalTimeSeriesData::samples_size() const {
  return samples_.size();
}
void InternalTimeSeriesData::clear_samples() {
  samples_.Clear();
}
 const ::cockroach::proto::InternalTimeSeriesSample& InternalTimeSeriesData::samples(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Get(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Mutable(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::add_samples() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >&
InternalTimeSeriesData::samples() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >*
InternalTimeSeriesData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalTimeSeriesData.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesSample::kOffsetFieldNumber;
const int InternalTimeSeriesSample::kCountFieldNumber;
const int InternalTimeSeriesSample::kSumFieldNumber;
const int InternalTimeSeriesSample::kMaxFieldNumber;
const int InternalTimeSeriesSample::kMinFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesSample::InternalTimeSeriesSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::InitAsDefaultInstance() {
}

InternalTimeSeriesSample::InternalTimeSeriesSample(const InternalTimeSeriesSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0u;
  sum_ = 0;
  max_ = 0;
  min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesSample::~InternalTimeSeriesSample() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesSample)
  SharedDtor();
}

void InternalTimeSeriesSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesSample_descriptor_;
}

const InternalTimeSeriesSample& InternalTimeSeriesSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesSample* InternalTimeSeriesSample::default_instance_ = NULL;

InternalTimeSeriesSample* InternalTimeSeriesSample::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesSample* n = new InternalTimeSeriesSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesSample::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesSample*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offset_, min_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_sum;
        break;
      }

      // optional double sum = 7;
      case 7: {
        if (tag == 57) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_max;
        break;
      }

      // optional double max = 8;
      case 8: {
        if (tag == 65) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_min;
        break;
      }

      // optional double min = 9;
      case 9: {
        if (tag == 73) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesSample)
  return false;
#undef DO_
}

void InternalTimeSeriesSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional double sum = 7;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sum(), output);
  }

  // optional double max = 8;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max(), output);
  }

  // optional double min = 9;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesSample)
}

::google::protobuf::uint8* InternalTimeSeriesSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional double sum = 7;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sum(), target);
  }

  // optional double max = 8;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max(), target);
  }

  // optional double min = 9;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesSample)
  return target;
}

int InternalTimeSeriesSample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional double sum = 7;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double max = 8;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double min = 9;
    if (has_min()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesSample::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesSample* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesSample>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesSample::MergeFrom(const InternalTimeSeriesSample& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesSample::CopyFrom(const InternalTimeSeriesSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesSample::IsInitialized() const {

  return true;
}

void InternalTimeSeriesSample::Swap(InternalTimeSeriesSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesSample::InternalSwap(InternalTimeSeriesSample* other) {
  std::swap(offset_, other->offset_);
  std::swap(count_, other->count_);
  std::swap(sum_, other->sum_);
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesSample_descriptor_;
  metadata.reflection = InternalTimeSeriesSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesSample

// optional int32 offset = 1;
bool InternalTimeSeriesSample::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesSample::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesSample::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesSample::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 ::google::protobuf::int32 InternalTimeSeriesSample::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.offset)
  return offset_;
}
 void InternalTimeSeriesSample::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.offset)
}

// optional uint32 count = 6;
bool InternalTimeSeriesSample::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesSample::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesSample::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesSample::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 InternalTimeSeriesSample::count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.count)
  return count_;
}
 void InternalTimeSeriesSample::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.count)
}

// optional double sum = 7;
bool InternalTimeSeriesSample::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalTimeSeriesSample::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalTimeSeriesSample::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalTimeSeriesSample::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
 double InternalTimeSeriesSample::sum() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.sum)
  return sum_;
}
 void InternalTimeSeriesSample::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.sum)
}

// optional double max = 8;
bool InternalTimeSeriesSample::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalTimeSeriesSample::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalTimeSeriesSample::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalTimeSeriesSample::clear_max() {
  max_ = 0;
  clear_has_max();
}
 double InternalTimeSeriesSample::max() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.max)
  return max_;
}
 void InternalTimeSeriesSample::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.max)
}

// optional double min = 9;
bool InternalTimeSeriesSample::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InternalTimeSeriesSample::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
void InternalTimeSeriesSample::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void InternalTimeSeriesSample::clear_min() {
  min_ = 0;
  clear_has_min();
}
 double InternalTimeSeriesSample::min() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.min)
  return min_;
}
 void InternalTimeSeriesSample::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !_MSC_VER

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftTruncatedState* RaftTruncatedState::default_instance_ = NULL;

RaftTruncatedState* RaftTruncatedState::New(::google::protobuf::Arena* arena) const {
  RaftTruncatedState* n = new RaftTruncatedState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftTruncatedState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftTruncatedState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, term_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftTruncatedState)
  return target;
}

int RaftTruncatedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftTruncatedState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftTruncatedState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftTruncatedState::InternalSwap(RaftTruncatedState* other) {
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftTruncatedState

// optional uint64 index = 1;
bool RaftTruncatedState::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftTruncatedState::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftTruncatedState::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.index)
  return index_;
}
 void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.index)
}

// optional uint64 term = 2;
bool RaftTruncatedState::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftTruncatedState::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftTruncatedState::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.term)
  return term_;
}
 void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftSnapshotData_KeyValue::kKeyFieldNumber;
const int RaftSnapshotData_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::InitAsDefaultInstance() {
}

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue(const RaftSnapshotData_KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData_KeyValue::~RaftSnapshotData_KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData.KeyValue)
  SharedDtor();
}

void RaftSnapshotData_KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftSnapshotData_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_KeyValue_descriptor_;
}

const RaftSnapshotData_KeyValue& RaftSnapshotData_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::default_instance_ = NULL;

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData_KeyValue* n = new RaftSnapshotData_KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData.KeyValue)
  return false;
#undef DO_
}

void RaftSnapshotData_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData.KeyValue)
}

::google::protobuf::uint8* RaftSnapshotData_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData.KeyValue)
  return target;
}

int RaftSnapshotData_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData_KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData_KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData_KeyValue::MergeFrom(const RaftSnapshotData_KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData_KeyValue::CopyFrom(const RaftSnapshotData_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData_KeyValue::IsInitialized() const {

  return true;
}

void RaftSnapshotData_KeyValue::Swap(RaftSnapshotData_KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData_KeyValue::InternalSwap(RaftSnapshotData_KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_KeyValue_descriptor_;
  metadata.reflection = RaftSnapshotData_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RaftSnapshotData::kRangeDescriptorFieldNumber;
const int RaftSnapshotData::kKVFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
  range_descriptor_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  _cached_size_ = 0;
  range_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != default_instance_) {
    delete range_descriptor_;
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData* RaftSnapshotData::default_instance_ = NULL;

RaftSnapshotData* RaftSnapshotData::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData* n = new RaftSnapshotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData::Clear() {
  if (has_range_descriptor()) {
    if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  }
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_KV;
        break;
      }

      // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
      case 2: {
        if (tag == 18) {
         parse_KV:
          DO_(input->IncrementRecursionDepth());
         parse_loop_KV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_KV;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_descriptor_, output);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->range_descriptor_, target);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData)
  return target;
}

int RaftSnapshotData::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_descriptor_);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kv_.MergeFrom(from.kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_descriptor()) {
      mutable_range_descriptor()->::cockroach::proto::RangeDescriptor::MergeFrom(from.range_descriptor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData::InternalSwap(RaftSnapshotData* other) {
  std::swap(range_descriptor_, other->range_descriptor_);
  kv_.UnsafeArenaSwap(&other->kv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftSnapshotData_KeyValue

// optional bytes key = 1;
bool RaftSnapshotData_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& RaftSnapshotData_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.key)
}

// optional bytes value = 2;
bool RaftSnapshotData_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& RaftSnapshotData_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.value)
}

// -------------------------------------------------------------------

// RaftSnapshotData

// optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
bool RaftSnapshotData::has_range_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData::set_has_range_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData::clear_has_range_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData::clear_range_descriptor() {
  if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_range_descriptor();
}
 const ::cockroach::proto::RangeDescriptor& RaftSnapshotData::range_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_ != NULL ? *range_descriptor_ : *default_instance_->range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::mutable_range_descriptor() {
  set_has_range_descriptor();
  if (range_descriptor_ == NULL) {
    range_descriptor_ = new ::cockroach::proto::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::release_range_descriptor() {
  clear_has_range_descriptor();
  ::cockroach::proto::RangeDescriptor* temp = range_descriptor_;
  range_descriptor_ = NULL;
  return temp;
}
 void RaftSnapshotData::set_allocated_range_descriptor(::cockroach::proto::RangeDescriptor* range_descriptor) {
  delete range_descriptor_;
  range_descriptor_ = range_descriptor;
  if (range_descriptor) {
    set_has_range_descriptor();
  } else {
    clear_has_range_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.range_descriptor)
}

// repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
int RaftSnapshotData::kv_size() const {
  return kv_.size();
}
void RaftSnapshotData::clear_kv() {
  kv_.Clear();
}
 const ::cockroach::proto::RaftSnapshotData_KeyValue& RaftSnapshotData::kv(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Get(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Mutable(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::add_kv() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >&
RaftSnapshotData::kv() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RaftSnapshotData.KV)
  return kv_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >*
RaftSnapshotData::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RaftSnapshotData.KV)
  return &kv_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
