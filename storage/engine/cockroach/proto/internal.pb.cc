// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* InternalRangeLookupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRangeLookupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalRangeLookupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRangeLookupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalHeartbeatTxnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalHeartbeatTxnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalHeartbeatTxnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalHeartbeatTxnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCRequest_GCKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCRequest_GCKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalGCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalGCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalPushTxnRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalPushTxnRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalPushTxnResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalPushTxnResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalResolveIntentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalResolveIntentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalMergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalMergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTruncateLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTruncateLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTruncateLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTruncateLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalLeaderLeaseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalLeaderLeaseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalLeaderLeaseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalLeaderLeaseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWriteCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWriteCmdResponse_reflection_ = NULL;
struct ReadWriteCmdResponseOneofInstance {
  const ::cockroach::proto::PutResponse* put_;
  const ::cockroach::proto::ConditionalPutResponse* conditional_put_;
  const ::cockroach::proto::IncrementResponse* increment_;
  const ::cockroach::proto::DeleteResponse* delete__;
  const ::cockroach::proto::DeleteRangeResponse* delete_range_;
  const ::cockroach::proto::EndTransactionResponse* end_transaction_;
  const ::cockroach::proto::ReapQueueResponse* reap_queue_;
  const ::cockroach::proto::EnqueueUpdateResponse* enqueue_update_;
  const ::cockroach::proto::EnqueueMessageResponse* enqueue_message_;
  const ::cockroach::proto::InternalHeartbeatTxnResponse* internal_heartbeat_txn_;
  const ::cockroach::proto::InternalPushTxnResponse* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentResponse* internal_resolve_intent_;
  const ::cockroach::proto::InternalMergeResponse* internal_merge_;
  const ::cockroach::proto::InternalTruncateLogResponse* internal_truncate_log_;
  const ::cockroach::proto::InternalGCResponse* internal_gc_;
}* ReadWriteCmdResponse_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalRaftCommandUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRaftCommandUnion_reflection_ = NULL;
struct InternalRaftCommandUnionOneofInstance {
  const ::cockroach::proto::ContainsRequest* contains_;
  const ::cockroach::proto::GetRequest* get_;
  const ::cockroach::proto::PutRequest* put_;
  const ::cockroach::proto::ConditionalPutRequest* conditional_put_;
  const ::cockroach::proto::IncrementRequest* increment_;
  const ::cockroach::proto::DeleteRequest* delete__;
  const ::cockroach::proto::DeleteRangeRequest* delete_range_;
  const ::cockroach::proto::ScanRequest* scan_;
  const ::cockroach::proto::EndTransactionRequest* end_transaction_;
  const ::cockroach::proto::ReapQueueRequest* reap_queue_;
  const ::cockroach::proto::EnqueueUpdateRequest* enqueue_update_;
  const ::cockroach::proto::EnqueueMessageRequest* enqueue_message_;
  const ::cockroach::proto::BatchRequest* batch_;
  const ::cockroach::proto::InternalRangeLookupRequest* internal_range_lookup_;
  const ::cockroach::proto::InternalHeartbeatTxnRequest* internal_heartbeat_txn_;
  const ::cockroach::proto::InternalPushTxnRequest* internal_push_txn_;
  const ::cockroach::proto::InternalResolveIntentRequest* internal_resolve_intent_;
  const ::cockroach::proto::InternalMergeRequest* internal_merge_response_;
  const ::cockroach::proto::InternalTruncateLogRequest* internal_truncate_log_;
  const ::cockroach::proto::InternalGCRequest* internal_gc_;
  const ::cockroach::proto::InternalLeaderLeaseRequest* internal_lease_;
}* InternalRaftCommandUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InternalRaftCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalRaftCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftMessageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_KeyValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/internal.proto");
  GOOGLE_CHECK(file != NULL);
  InternalRangeLookupRequest_descriptor_ = file->message_type(0);
  static const int InternalRangeLookupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, max_ranges_),
  };
  InternalRangeLookupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalRangeLookupRequest_descriptor_,
      InternalRangeLookupRequest::default_instance_,
      InternalRangeLookupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalRangeLookupRequest));
  InternalRangeLookupResponse_descriptor_ = file->message_type(1);
  static const int InternalRangeLookupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, ranges_),
  };
  InternalRangeLookupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalRangeLookupResponse_descriptor_,
      InternalRangeLookupResponse::default_instance_,
      InternalRangeLookupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRangeLookupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalRangeLookupResponse));
  InternalHeartbeatTxnRequest_descriptor_ = file->message_type(2);
  static const int InternalHeartbeatTxnRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, header_),
  };
  InternalHeartbeatTxnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalHeartbeatTxnRequest_descriptor_,
      InternalHeartbeatTxnRequest::default_instance_,
      InternalHeartbeatTxnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalHeartbeatTxnRequest));
  InternalHeartbeatTxnResponse_descriptor_ = file->message_type(3);
  static const int InternalHeartbeatTxnResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, header_),
  };
  InternalHeartbeatTxnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalHeartbeatTxnResponse_descriptor_,
      InternalHeartbeatTxnResponse::default_instance_,
      InternalHeartbeatTxnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalHeartbeatTxnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalHeartbeatTxnResponse));
  InternalGCRequest_descriptor_ = file->message_type(4);
  static const int InternalGCRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, gc_meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, keys_),
  };
  InternalGCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalGCRequest_descriptor_,
      InternalGCRequest::default_instance_,
      InternalGCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalGCRequest));
  InternalGCRequest_GCKey_descriptor_ = InternalGCRequest_descriptor_->nested_type(0);
  static const int InternalGCRequest_GCKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, timestamp_),
  };
  InternalGCRequest_GCKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalGCRequest_GCKey_descriptor_,
      InternalGCRequest_GCKey::default_instance_,
      InternalGCRequest_GCKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCRequest_GCKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalGCRequest_GCKey));
  InternalGCResponse_descriptor_ = file->message_type(5);
  static const int InternalGCResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, header_),
  };
  InternalGCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalGCResponse_descriptor_,
      InternalGCResponse::default_instance_,
      InternalGCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalGCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalGCResponse));
  InternalPushTxnRequest_descriptor_ = file->message_type(6);
  static const int InternalPushTxnRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, pushee_txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, abort_),
  };
  InternalPushTxnRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalPushTxnRequest_descriptor_,
      InternalPushTxnRequest::default_instance_,
      InternalPushTxnRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalPushTxnRequest));
  InternalPushTxnResponse_descriptor_ = file->message_type(7);
  static const int InternalPushTxnResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, pushee_txn_),
  };
  InternalPushTxnResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalPushTxnResponse_descriptor_,
      InternalPushTxnResponse::default_instance_,
      InternalPushTxnResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalPushTxnResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalPushTxnResponse));
  InternalResolveIntentRequest_descriptor_ = file->message_type(8);
  static const int InternalResolveIntentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, header_),
  };
  InternalResolveIntentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalResolveIntentRequest_descriptor_,
      InternalResolveIntentRequest::default_instance_,
      InternalResolveIntentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalResolveIntentRequest));
  InternalResolveIntentResponse_descriptor_ = file->message_type(9);
  static const int InternalResolveIntentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, header_),
  };
  InternalResolveIntentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalResolveIntentResponse_descriptor_,
      InternalResolveIntentResponse::default_instance_,
      InternalResolveIntentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalResolveIntentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalResolveIntentResponse));
  InternalMergeRequest_descriptor_ = file->message_type(10);
  static const int InternalMergeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, value_),
  };
  InternalMergeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalMergeRequest_descriptor_,
      InternalMergeRequest::default_instance_,
      InternalMergeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalMergeRequest));
  InternalMergeResponse_descriptor_ = file->message_type(11);
  static const int InternalMergeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, header_),
  };
  InternalMergeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalMergeResponse_descriptor_,
      InternalMergeResponse::default_instance_,
      InternalMergeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalMergeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalMergeResponse));
  InternalTruncateLogRequest_descriptor_ = file->message_type(12);
  static const int InternalTruncateLogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, index_),
  };
  InternalTruncateLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalTruncateLogRequest_descriptor_,
      InternalTruncateLogRequest::default_instance_,
      InternalTruncateLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalTruncateLogRequest));
  InternalTruncateLogResponse_descriptor_ = file->message_type(13);
  static const int InternalTruncateLogResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, header_),
  };
  InternalTruncateLogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalTruncateLogResponse_descriptor_,
      InternalTruncateLogResponse::default_instance_,
      InternalTruncateLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTruncateLogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalTruncateLogResponse));
  InternalLeaderLeaseRequest_descriptor_ = file->message_type(14);
  static const int InternalLeaderLeaseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, lease_),
  };
  InternalLeaderLeaseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalLeaderLeaseRequest_descriptor_,
      InternalLeaderLeaseRequest::default_instance_,
      InternalLeaderLeaseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalLeaderLeaseRequest));
  InternalLeaderLeaseResponse_descriptor_ = file->message_type(15);
  static const int InternalLeaderLeaseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, header_),
  };
  InternalLeaderLeaseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalLeaderLeaseResponse_descriptor_,
      InternalLeaderLeaseResponse::default_instance_,
      InternalLeaderLeaseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalLeaderLeaseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalLeaderLeaseResponse));
  ReadWriteCmdResponse_descriptor_ = file->message_type(16);
  static const int ReadWriteCmdResponse_offsets_[16] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, reap_queue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, enqueue_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, enqueue_message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_merge_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ReadWriteCmdResponse_default_oneof_instance_, internal_gc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, value_),
  };
  ReadWriteCmdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadWriteCmdResponse_descriptor_,
      ReadWriteCmdResponse::default_instance_,
      ReadWriteCmdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _unknown_fields_),
      -1,
      ReadWriteCmdResponse_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWriteCmdResponse, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadWriteCmdResponse));
  InternalRaftCommandUnion_descriptor_ = file->message_type(17);
  static const int InternalRaftCommandUnion_offsets_[22] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, contains_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, get_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, conditional_put_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, increment_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, delete__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, delete_range_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, scan_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, end_transaction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, reap_queue_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, enqueue_update_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, enqueue_message_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, batch_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_range_lookup_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_heartbeat_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_push_txn_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_resolve_intent_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_merge_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_truncate_log_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_gc_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(InternalRaftCommandUnion_default_oneof_instance_, internal_lease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, value_),
  };
  InternalRaftCommandUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalRaftCommandUnion_descriptor_,
      InternalRaftCommandUnion::default_instance_,
      InternalRaftCommandUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _unknown_fields_),
      -1,
      InternalRaftCommandUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommandUnion, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalRaftCommandUnion));
  InternalRaftCommand_descriptor_ = file->message_type(18);
  static const int InternalRaftCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, raft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, cmd_),
  };
  InternalRaftCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalRaftCommand_descriptor_,
      InternalRaftCommand::default_instance_,
      InternalRaftCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalRaftCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalRaftCommand));
  RaftMessageRequest_descriptor_ = file->message_type(19);
  static const int RaftMessageRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, msg_),
  };
  RaftMessageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftMessageRequest_descriptor_,
      RaftMessageRequest::default_instance_,
      RaftMessageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftMessageRequest));
  RaftMessageResponse_descriptor_ = file->message_type(20);
  static const int RaftMessageResponse_offsets_[1] = {
  };
  RaftMessageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftMessageResponse_descriptor_,
      RaftMessageResponse::default_instance_,
      RaftMessageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftMessageResponse));
  InternalTimeSeriesData_descriptor_ = file->message_type(21);
  static const int InternalTimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, start_timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, sample_duration_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, samples_),
  };
  InternalTimeSeriesData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalTimeSeriesData_descriptor_,
      InternalTimeSeriesData::default_instance_,
      InternalTimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalTimeSeriesData));
  InternalTimeSeriesSample_descriptor_ = file->message_type(22);
  static const int InternalTimeSeriesSample_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, int_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, int_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, int_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, int_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, float_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, float_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, float_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, float_min_),
  };
  InternalTimeSeriesSample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InternalTimeSeriesSample_descriptor_,
      InternalTimeSeriesSample::default_instance_,
      InternalTimeSeriesSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InternalTimeSeriesSample));
  RaftTruncatedState_descriptor_ = file->message_type(23);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::default_instance_,
      RaftTruncatedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftTruncatedState));
  RaftSnapshotData_descriptor_ = file->message_type(24);
  static const int RaftSnapshotData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, kv_),
  };
  RaftSnapshotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::default_instance_,
      RaftSnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftSnapshotData));
  RaftSnapshotData_KeyValue_descriptor_ = RaftSnapshotData_descriptor_->nested_type(0);
  static const int RaftSnapshotData_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, value_),
  };
  RaftSnapshotData_KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaftSnapshotData_KeyValue_descriptor_,
      RaftSnapshotData_KeyValue::default_instance_,
      RaftSnapshotData_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaftSnapshotData_KeyValue));
  InternalValueType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalRangeLookupRequest_descriptor_, &InternalRangeLookupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalRangeLookupResponse_descriptor_, &InternalRangeLookupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalHeartbeatTxnRequest_descriptor_, &InternalHeartbeatTxnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalHeartbeatTxnResponse_descriptor_, &InternalHeartbeatTxnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalGCRequest_descriptor_, &InternalGCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalGCRequest_GCKey_descriptor_, &InternalGCRequest_GCKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalGCResponse_descriptor_, &InternalGCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalPushTxnRequest_descriptor_, &InternalPushTxnRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalPushTxnResponse_descriptor_, &InternalPushTxnResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalResolveIntentRequest_descriptor_, &InternalResolveIntentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalResolveIntentResponse_descriptor_, &InternalResolveIntentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalMergeRequest_descriptor_, &InternalMergeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalMergeResponse_descriptor_, &InternalMergeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalTruncateLogRequest_descriptor_, &InternalTruncateLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalTruncateLogResponse_descriptor_, &InternalTruncateLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalLeaderLeaseRequest_descriptor_, &InternalLeaderLeaseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalLeaderLeaseResponse_descriptor_, &InternalLeaderLeaseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadWriteCmdResponse_descriptor_, &ReadWriteCmdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalRaftCommandUnion_descriptor_, &InternalRaftCommandUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalRaftCommand_descriptor_, &InternalRaftCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftMessageRequest_descriptor_, &RaftMessageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftMessageResponse_descriptor_, &RaftMessageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalTimeSeriesData_descriptor_, &InternalTimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InternalTimeSeriesSample_descriptor_, &InternalTimeSeriesSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftTruncatedState_descriptor_, &RaftTruncatedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftSnapshotData_descriptor_, &RaftSnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaftSnapshotData_KeyValue_descriptor_, &RaftSnapshotData_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto() {
  delete InternalRangeLookupRequest::default_instance_;
  delete InternalRangeLookupRequest_reflection_;
  delete InternalRangeLookupResponse::default_instance_;
  delete InternalRangeLookupResponse_reflection_;
  delete InternalHeartbeatTxnRequest::default_instance_;
  delete InternalHeartbeatTxnRequest_reflection_;
  delete InternalHeartbeatTxnResponse::default_instance_;
  delete InternalHeartbeatTxnResponse_reflection_;
  delete InternalGCRequest::default_instance_;
  delete InternalGCRequest_reflection_;
  delete InternalGCRequest_GCKey::default_instance_;
  delete InternalGCRequest_GCKey_reflection_;
  delete InternalGCResponse::default_instance_;
  delete InternalGCResponse_reflection_;
  delete InternalPushTxnRequest::default_instance_;
  delete InternalPushTxnRequest_reflection_;
  delete InternalPushTxnResponse::default_instance_;
  delete InternalPushTxnResponse_reflection_;
  delete InternalResolveIntentRequest::default_instance_;
  delete InternalResolveIntentRequest_reflection_;
  delete InternalResolveIntentResponse::default_instance_;
  delete InternalResolveIntentResponse_reflection_;
  delete InternalMergeRequest::default_instance_;
  delete InternalMergeRequest_reflection_;
  delete InternalMergeResponse::default_instance_;
  delete InternalMergeResponse_reflection_;
  delete InternalTruncateLogRequest::default_instance_;
  delete InternalTruncateLogRequest_reflection_;
  delete InternalTruncateLogResponse::default_instance_;
  delete InternalTruncateLogResponse_reflection_;
  delete InternalLeaderLeaseRequest::default_instance_;
  delete InternalLeaderLeaseRequest_reflection_;
  delete InternalLeaderLeaseResponse::default_instance_;
  delete InternalLeaderLeaseResponse_reflection_;
  delete ReadWriteCmdResponse::default_instance_;
  delete ReadWriteCmdResponse_default_oneof_instance_;
  delete ReadWriteCmdResponse_reflection_;
  delete InternalRaftCommandUnion::default_instance_;
  delete InternalRaftCommandUnion_default_oneof_instance_;
  delete InternalRaftCommandUnion_reflection_;
  delete InternalRaftCommand::default_instance_;
  delete InternalRaftCommand_reflection_;
  delete RaftMessageRequest::default_instance_;
  delete RaftMessageRequest_reflection_;
  delete RaftMessageResponse::default_instance_;
  delete RaftMessageResponse_reflection_;
  delete InternalTimeSeriesData::default_instance_;
  delete InternalTimeSeriesData_reflection_;
  delete InternalTimeSeriesSample::default_instance_;
  delete InternalTimeSeriesSample_reflection_;
  delete RaftTruncatedState::default_instance_;
  delete RaftTruncatedState_reflection_;
  delete RaftSnapshotData::default_instance_;
  delete RaftSnapshotData_reflection_;
  delete RaftSnapshotData_KeyValue::default_instance_;
  delete RaftSnapshotData_KeyValue_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cockroach/proto/internal.proto\022\017cockro"
    "ach.proto\032\031cockroach/proto/api.proto\032\034co"
    "ckroach/proto/config.proto\032\032cockroach/pr"
    "oto/data.proto\032\024gogoproto/gogo.proto\"p\n\032"
    "InternalRangeLookupRequest\0228\n\006header\030\001 \001"
    "(\0132\036.cockroach.proto.RequestHeaderB\010\310\336\037\000"
    "\320\336\037\001\022\030\n\nmax_ranges\030\002 \001(\005B\004\310\336\037\000\"\220\001\n\033Inter"
    "nalRangeLookupResponse\0229\n\006header\030\001 \001(\0132\037"
    ".cockroach.proto.ResponseHeaderB\010\310\336\037\000\320\336\037"
    "\001\0226\n\006ranges\030\002 \003(\0132 .cockroach.proto.Rang"
    "eDescriptorB\004\310\336\037\000\"W\n\033InternalHeartbeatTx"
    "nRequest\0228\n\006header\030\001 \001(\0132\036.cockroach.pro"
    "to.RequestHeaderB\010\310\336\037\000\320\336\037\001\"Y\n\034InternalHe"
    "artbeatTxnResponse\0229\n\006header\030\001 \001(\0132\037.coc"
    "kroach.proto.ResponseHeaderB\010\310\336\037\000\320\336\037\001\"\241\002"
    "\n\021InternalGCRequest\0228\n\006header\030\001 \001(\0132\036.co"
    "ckroach.proto.RequestHeaderB\010\310\336\037\000\320\336\037\001\022<\n"
    "\007gc_meta\030\002 \001(\0132\033.cockroach.proto.GCMetad"
    "ataB\016\310\336\037\000\342\336\037\006GCMeta\022<\n\004keys\030\003 \003(\0132(.cock"
    "roach.proto.InternalGCRequest.GCKeyB\004\310\336\037"
    "\000\032V\n\005GCKey\022\030\n\003key\030\001 \001(\014B\013\310\336\037\000\332\336\037\003Key\0223\n\t"
    "timestamp\030\002 \001(\0132\032.cockroach.proto.Timest"
    "ampB\004\310\336\037\000\"O\n\022InternalGCResponse\0229\n\006heade"
    "r\030\001 \001(\0132\037.cockroach.proto.ResponseHeader"
    "B\010\310\336\037\000\320\336\037\001\"\237\001\n\026InternalPushTxnRequest\0228\n"
    "\006header\030\001 \001(\0132\036.cockroach.proto.RequestH"
    "eaderB\010\310\336\037\000\320\336\037\001\0226\n\npushee_txn\030\002 \001(\0132\034.co"
    "ckroach.proto.TransactionB\004\310\336\037\000\022\023\n\005Abort"
    "\030\003 \001(\010B\004\310\336\037\000\"\206\001\n\027InternalPushTxnResponse"
    "\0229\n\006header\030\001 \001(\0132\037.cockroach.proto.Respo"
    "nseHeaderB\010\310\336\037\000\320\336\037\001\0220\n\npushee_txn\030\002 \001(\0132"
    "\034.cockroach.proto.Transaction\"X\n\034Interna"
    "lResolveIntentRequest\0228\n\006header\030\001 \001(\0132\036."
    "cockroach.proto.RequestHeaderB\010\310\336\037\000\320\336\037\001\""
    "Z\n\035InternalResolveIntentResponse\0229\n\006head"
    "er\030\001 \001(\0132\037.cockroach.proto.ResponseHeade"
    "rB\010\310\336\037\000\320\336\037\001\"}\n\024InternalMergeRequest\0228\n\006h"
    "eader\030\001 \001(\0132\036.cockroach.proto.RequestHea"
    "derB\010\310\336\037\000\320\336\037\001\022+\n\005value\030\002 \001(\0132\026.cockroach"
    ".proto.ValueB\004\310\336\037\000\"R\n\025InternalMergeRespo"
    "nse\0229\n\006header\030\001 \001(\0132\037.cockroach.proto.Re"
    "sponseHeaderB\010\310\336\037\000\320\336\037\001\"k\n\032InternalTrunca"
    "teLogRequest\0228\n\006header\030\001 \001(\0132\036.cockroach"
    ".proto.RequestHeaderB\010\310\336\037\000\320\336\037\001\022\023\n\005index\030"
    "\002 \001(\004B\004\310\336\037\000\"X\n\033InternalTruncateLogRespon"
    "se\0229\n\006header\030\001 \001(\0132\037.cockroach.proto.Res"
    "ponseHeaderB\010\310\336\037\000\320\336\037\001\"\203\001\n\032InternalLeader"
    "LeaseRequest\0228\n\006header\030\001 \001(\0132\036.cockroach"
    ".proto.RequestHeaderB\010\310\336\037\000\320\336\037\001\022+\n\005lease\030"
    "\002 \001(\0132\026.cockroach.proto.LeaseB\004\310\336\037\000\"X\n\033I"
    "nternalLeaderLeaseResponse\0229\n\006header\030\001 \001"
    "(\0132\037.cockroach.proto.ResponseHeaderB\010\310\336\037"
    "\000\320\336\037\001\"\374\007\n\024ReadWriteCmdResponse\022+\n\003put\030\001 "
    "\001(\0132\034.cockroach.proto.PutResponseH\000\022B\n\017c"
    "onditional_put\030\002 \001(\0132\'.cockroach.proto.C"
    "onditionalPutResponseH\000\0227\n\tincrement\030\003 \001"
    "(\0132\".cockroach.proto.IncrementResponseH\000"
    "\0221\n\006delete\030\004 \001(\0132\037.cockroach.proto.Delet"
    "eResponseH\000\022<\n\014delete_range\030\005 \001(\0132$.cock"
    "roach.proto.DeleteRangeResponseH\000\022B\n\017end"
    "_transaction\030\006 \001(\0132\'.cockroach.proto.End"
    "TransactionResponseH\000\0228\n\nreap_queue\030\007 \001("
    "\0132\".cockroach.proto.ReapQueueResponseH\000\022"
    "@\n\016enqueue_update\030\010 \001(\0132&.cockroach.prot"
    "o.EnqueueUpdateResponseH\000\022B\n\017enqueue_mes"
    "sage\030\t \001(\0132\'.cockroach.proto.EnqueueMess"
    "ageResponseH\000\022O\n\026internal_heartbeat_txn\030"
    "\n \001(\0132-.cockroach.proto.InternalHeartbea"
    "tTxnResponseH\000\022E\n\021internal_push_txn\030\013 \001("
    "\0132(.cockroach.proto.InternalPushTxnRespo"
    "nseH\000\022Q\n\027internal_resolve_intent\030\014 \001(\0132."
    ".cockroach.proto.InternalResolveIntentRe"
    "sponseH\000\022@\n\016internal_merge\030\r \001(\0132&.cockr"
    "oach.proto.InternalMergeResponseH\000\022M\n\025in"
    "ternal_truncate_log\030\016 \001(\0132,.cockroach.pr"
    "oto.InternalTruncateLogResponseH\000\022:\n\013int"
    "ernal_gc\030\017 \001(\0132#.cockroach.proto.Interna"
    "lGCResponseH\000:\004\310\240\037\001B\007\n\005value\"\337\n\n\030Interna"
    "lRaftCommandUnion\0224\n\010contains\030\001 \001(\0132 .co"
    "ckroach.proto.ContainsRequestH\000\022*\n\003get\030\002"
    " \001(\0132\033.cockroach.proto.GetRequestH\000\022*\n\003p"
    "ut\030\003 \001(\0132\033.cockroach.proto.PutRequestH\000\022"
    "A\n\017conditional_put\030\004 \001(\0132&.cockroach.pro"
    "to.ConditionalPutRequestH\000\0226\n\tincrement\030"
    "\005 \001(\0132!.cockroach.proto.IncrementRequest"
    "H\000\0220\n\006delete\030\006 \001(\0132\036.cockroach.proto.Del"
    "eteRequestH\000\022;\n\014delete_range\030\007 \001(\0132#.coc"
    "kroach.proto.DeleteRangeRequestH\000\022,\n\004sca"
    "n\030\010 \001(\0132\034.cockroach.proto.ScanRequestH\000\022"
    "A\n\017end_transaction\030\t \001(\0132&.cockroach.pro"
    "to.EndTransactionRequestH\000\0227\n\nreap_queue"
    "\030\n \001(\0132!.cockroach.proto.ReapQueueReques"
    "tH\000\022\?\n\016enqueue_update\030\013 \001(\0132%.cockroach."
    "proto.EnqueueUpdateRequestH\000\022A\n\017enqueue_"
    "message\030\014 \001(\0132&.cockroach.proto.EnqueueM"
    "essageRequestH\000\022.\n\005batch\030\036 \001(\0132\035.cockroa"
    "ch.proto.BatchRequestH\000\022L\n\025internal_rang"
    "e_lookup\030\037 \001(\0132+.cockroach.proto.Interna"
    "lRangeLookupRequestH\000\022N\n\026internal_heartb"
    "eat_txn\030  \001(\0132,.cockroach.proto.Internal"
    "HeartbeatTxnRequestH\000\022D\n\021internal_push_t"
    "xn\030! \001(\0132\'.cockroach.proto.InternalPushT"
    "xnRequestH\000\022P\n\027internal_resolve_intent\030\""
    " \001(\0132-.cockroach.proto.InternalResolveIn"
    "tentRequestH\000\022H\n\027internal_merge_response"
    "\030# \001(\0132%.cockroach.proto.InternalMergeRe"
    "questH\000\022L\n\025internal_truncate_log\030$ \001(\0132+"
    ".cockroach.proto.InternalTruncateLogRequ"
    "estH\000\022I\n\013internal_gc\030% \001(\0132\".cockroach.p"
    "roto.InternalGCRequestB\016\342\336\037\nInternalGCH\000"
    "\022E\n\016internal_lease\030& \001(\0132+.cockroach.pro"
    "to.InternalLeaderLeaseRequestH\000:\004\310\240\037\001B\007\n"
    "\005value\"t\n\023InternalRaftCommand\022\037\n\007raft_id"
    "\030\002 \001(\003B\016\310\336\037\000\342\336\037\006RaftID\022<\n\003cmd\030\003 \001(\0132).co"
    "ckroach.proto.InternalRaftCommandUnionB\004"
    "\310\336\037\000\"D\n\022RaftMessageRequest\022!\n\010group_id\030\001"
    " \001(\004B\017\310\336\037\000\342\336\037\007GroupID\022\013\n\003msg\030\002 \001(\014\"\025\n\023Ra"
    "ftMessageResponse\"\236\001\n\026InternalTimeSeries"
    "Data\022#\n\025start_timestamp_nanos\030\001 \001(\003B\004\310\336\037"
    "\000\022#\n\025sample_duration_nanos\030\002 \001(\003B\004\310\336\037\000\022:"
    "\n\007samples\030\003 \003(\0132).cockroach.proto.Intern"
    "alTimeSeriesSample\"\320\001\n\030InternalTimeSerie"
    "sSample\022\024\n\006offset\030\001 \001(\005B\004\310\336\037\000\022\027\n\tint_cou"
    "nt\030\002 \001(\rB\004\310\336\037\000\022\017\n\007int_sum\030\003 \001(\003\022\017\n\007int_m"
    "ax\030\004 \001(\003\022\017\n\007int_min\030\005 \001(\003\022\031\n\013float_count"
    "\030\006 \001(\rB\004\310\336\037\000\022\021\n\tfloat_sum\030\007 \001(\002\022\021\n\tfloat"
    "_max\030\010 \001(\002\022\021\n\tfloat_min\030\t \001(\002\"=\n\022RaftTru"
    "ncatedState\022\023\n\005index\030\001 \001(\004B\004\310\336\037\000\022\022\n\004term"
    "\030\002 \001(\004B\004\310\336\037\000\"z\n\020RaftSnapshotData\022>\n\002KV\030\001"
    " \003(\0132*.cockroach.proto.RaftSnapshotData."
    "KeyValueB\006\342\336\037\002KV\032&\n\010KeyValue\022\013\n\003key\030\001 \001("
    "\014\022\r\n\005value\030\002 \001(\014*%\n\021InternalValueType\022\n\n"
    "\006_CR_TS\020\001\032\004\210\243\036\000B\007Z\005proto", 5304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/internal.proto", &protobuf_RegisterTypes);
  InternalRangeLookupRequest::default_instance_ = new InternalRangeLookupRequest();
  InternalRangeLookupResponse::default_instance_ = new InternalRangeLookupResponse();
  InternalHeartbeatTxnRequest::default_instance_ = new InternalHeartbeatTxnRequest();
  InternalHeartbeatTxnResponse::default_instance_ = new InternalHeartbeatTxnResponse();
  InternalGCRequest::default_instance_ = new InternalGCRequest();
  InternalGCRequest_GCKey::default_instance_ = new InternalGCRequest_GCKey();
  InternalGCResponse::default_instance_ = new InternalGCResponse();
  InternalPushTxnRequest::default_instance_ = new InternalPushTxnRequest();
  InternalPushTxnResponse::default_instance_ = new InternalPushTxnResponse();
  InternalResolveIntentRequest::default_instance_ = new InternalResolveIntentRequest();
  InternalResolveIntentResponse::default_instance_ = new InternalResolveIntentResponse();
  InternalMergeRequest::default_instance_ = new InternalMergeRequest();
  InternalMergeResponse::default_instance_ = new InternalMergeResponse();
  InternalTruncateLogRequest::default_instance_ = new InternalTruncateLogRequest();
  InternalTruncateLogResponse::default_instance_ = new InternalTruncateLogResponse();
  InternalLeaderLeaseRequest::default_instance_ = new InternalLeaderLeaseRequest();
  InternalLeaderLeaseResponse::default_instance_ = new InternalLeaderLeaseResponse();
  ReadWriteCmdResponse::default_instance_ = new ReadWriteCmdResponse();
  ReadWriteCmdResponse_default_oneof_instance_ = new ReadWriteCmdResponseOneofInstance;
  InternalRaftCommandUnion::default_instance_ = new InternalRaftCommandUnion();
  InternalRaftCommandUnion_default_oneof_instance_ = new InternalRaftCommandUnionOneofInstance;
  InternalRaftCommand::default_instance_ = new InternalRaftCommand();
  RaftMessageRequest::default_instance_ = new RaftMessageRequest();
  RaftMessageResponse::default_instance_ = new RaftMessageResponse();
  InternalTimeSeriesData::default_instance_ = new InternalTimeSeriesData();
  InternalTimeSeriesSample::default_instance_ = new InternalTimeSeriesSample();
  RaftTruncatedState::default_instance_ = new RaftTruncatedState();
  RaftSnapshotData::default_instance_ = new RaftSnapshotData();
  RaftSnapshotData_KeyValue::default_instance_ = new RaftSnapshotData_KeyValue();
  InternalRangeLookupRequest::default_instance_->InitAsDefaultInstance();
  InternalRangeLookupResponse::default_instance_->InitAsDefaultInstance();
  InternalHeartbeatTxnRequest::default_instance_->InitAsDefaultInstance();
  InternalHeartbeatTxnResponse::default_instance_->InitAsDefaultInstance();
  InternalGCRequest::default_instance_->InitAsDefaultInstance();
  InternalGCRequest_GCKey::default_instance_->InitAsDefaultInstance();
  InternalGCResponse::default_instance_->InitAsDefaultInstance();
  InternalPushTxnRequest::default_instance_->InitAsDefaultInstance();
  InternalPushTxnResponse::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentRequest::default_instance_->InitAsDefaultInstance();
  InternalResolveIntentResponse::default_instance_->InitAsDefaultInstance();
  InternalMergeRequest::default_instance_->InitAsDefaultInstance();
  InternalMergeResponse::default_instance_->InitAsDefaultInstance();
  InternalTruncateLogRequest::default_instance_->InitAsDefaultInstance();
  InternalTruncateLogResponse::default_instance_->InitAsDefaultInstance();
  InternalLeaderLeaseRequest::default_instance_->InitAsDefaultInstance();
  InternalLeaderLeaseResponse::default_instance_->InitAsDefaultInstance();
  ReadWriteCmdResponse::default_instance_->InitAsDefaultInstance();
  InternalRaftCommandUnion::default_instance_->InitAsDefaultInstance();
  InternalRaftCommand::default_instance_->InitAsDefaultInstance();
  RaftMessageRequest::default_instance_->InitAsDefaultInstance();
  RaftMessageResponse::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesData::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesSample::default_instance_->InitAsDefaultInstance();
  RaftTruncatedState::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2finternal_2eproto_;
const ::google::protobuf::EnumDescriptor* InternalValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalValueType_descriptor_;
}
bool InternalValueType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InternalRangeLookupRequest::kHeaderFieldNumber;
const int InternalRangeLookupRequest::kMaxRangesFieldNumber;
#endif  // !_MSC_VER

InternalRangeLookupRequest::InternalRangeLookupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRangeLookupRequest)
}

void InternalRangeLookupRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
}

InternalRangeLookupRequest::InternalRangeLookupRequest(const InternalRangeLookupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRangeLookupRequest)
}

void InternalRangeLookupRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  max_ranges_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRangeLookupRequest::~InternalRangeLookupRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRangeLookupRequest)
  SharedDtor();
}

void InternalRangeLookupRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalRangeLookupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRangeLookupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRangeLookupRequest_descriptor_;
}

const InternalRangeLookupRequest& InternalRangeLookupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRangeLookupRequest* InternalRangeLookupRequest::default_instance_ = NULL;

InternalRangeLookupRequest* InternalRangeLookupRequest::New() const {
  return new InternalRangeLookupRequest;
}

void InternalRangeLookupRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    max_ranges_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalRangeLookupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRangeLookupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_ranges;
        break;
      }

      // optional int32 max_ranges = 2;
      case 2: {
        if (tag == 16) {
         parse_max_ranges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_ranges_)));
          set_has_max_ranges();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRangeLookupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRangeLookupRequest)
  return false;
#undef DO_
}

void InternalRangeLookupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRangeLookupRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional int32 max_ranges = 2;
  if (has_max_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_ranges(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRangeLookupRequest)
}

::google::protobuf::uint8* InternalRangeLookupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRangeLookupRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional int32 max_ranges = 2;
  if (has_max_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_ranges(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRangeLookupRequest)
  return target;
}

int InternalRangeLookupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional int32 max_ranges = 2;
    if (has_max_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_ranges());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRangeLookupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalRangeLookupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalRangeLookupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRangeLookupRequest::MergeFrom(const InternalRangeLookupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_max_ranges()) {
      set_max_ranges(from.max_ranges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalRangeLookupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeLookupRequest::CopyFrom(const InternalRangeLookupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeLookupRequest::IsInitialized() const {

  return true;
}

void InternalRangeLookupRequest::Swap(InternalRangeLookupRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(max_ranges_, other->max_ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalRangeLookupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRangeLookupRequest_descriptor_;
  metadata.reflection = InternalRangeLookupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalRangeLookupResponse::kHeaderFieldNumber;
const int InternalRangeLookupResponse::kRangesFieldNumber;
#endif  // !_MSC_VER

InternalRangeLookupResponse::InternalRangeLookupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRangeLookupResponse)
}

void InternalRangeLookupResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalRangeLookupResponse::InternalRangeLookupResponse(const InternalRangeLookupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRangeLookupResponse)
}

void InternalRangeLookupResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRangeLookupResponse::~InternalRangeLookupResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRangeLookupResponse)
  SharedDtor();
}

void InternalRangeLookupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalRangeLookupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRangeLookupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRangeLookupResponse_descriptor_;
}

const InternalRangeLookupResponse& InternalRangeLookupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRangeLookupResponse* InternalRangeLookupResponse::default_instance_ = NULL;

InternalRangeLookupResponse* InternalRangeLookupResponse::New() const {
  return new InternalRangeLookupResponse;
}

void InternalRangeLookupResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ranges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalRangeLookupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRangeLookupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranges;
        break;
      }

      // repeated .cockroach.proto.RangeDescriptor ranges = 2;
      case 2: {
        if (tag == 18) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranges;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRangeLookupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRangeLookupResponse)
  return false;
#undef DO_
}

void InternalRangeLookupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRangeLookupResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  for (int i = 0; i < this->ranges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranges(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRangeLookupResponse)
}

::google::protobuf::uint8* InternalRangeLookupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRangeLookupResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  for (int i = 0; i < this->ranges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranges(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRangeLookupResponse)
  return target;
}

int InternalRangeLookupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .cockroach.proto.RangeDescriptor ranges = 2;
  total_size += 1 * this->ranges_size();
  for (int i = 0; i < this->ranges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRangeLookupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalRangeLookupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalRangeLookupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRangeLookupResponse::MergeFrom(const InternalRangeLookupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranges_.MergeFrom(from.ranges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalRangeLookupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeLookupResponse::CopyFrom(const InternalRangeLookupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeLookupResponse::IsInitialized() const {

  return true;
}

void InternalRangeLookupResponse::Swap(InternalRangeLookupResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    ranges_.Swap(&other->ranges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalRangeLookupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRangeLookupResponse_descriptor_;
  metadata.reflection = InternalRangeLookupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalHeartbeatTxnRequest::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalHeartbeatTxnRequest::InternalHeartbeatTxnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalHeartbeatTxnRequest)
}

void InternalHeartbeatTxnRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
}

InternalHeartbeatTxnRequest::InternalHeartbeatTxnRequest(const InternalHeartbeatTxnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalHeartbeatTxnRequest)
}

void InternalHeartbeatTxnRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalHeartbeatTxnRequest::~InternalHeartbeatTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalHeartbeatTxnRequest)
  SharedDtor();
}

void InternalHeartbeatTxnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalHeartbeatTxnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalHeartbeatTxnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalHeartbeatTxnRequest_descriptor_;
}

const InternalHeartbeatTxnRequest& InternalHeartbeatTxnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalHeartbeatTxnRequest* InternalHeartbeatTxnRequest::default_instance_ = NULL;

InternalHeartbeatTxnRequest* InternalHeartbeatTxnRequest::New() const {
  return new InternalHeartbeatTxnRequest;
}

void InternalHeartbeatTxnRequest::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalHeartbeatTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalHeartbeatTxnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalHeartbeatTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalHeartbeatTxnRequest)
  return false;
#undef DO_
}

void InternalHeartbeatTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalHeartbeatTxnRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalHeartbeatTxnRequest)
}

::google::protobuf::uint8* InternalHeartbeatTxnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalHeartbeatTxnRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalHeartbeatTxnRequest)
  return target;
}

int InternalHeartbeatTxnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalHeartbeatTxnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalHeartbeatTxnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalHeartbeatTxnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalHeartbeatTxnRequest::MergeFrom(const InternalHeartbeatTxnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalHeartbeatTxnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalHeartbeatTxnRequest::CopyFrom(const InternalHeartbeatTxnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalHeartbeatTxnRequest::IsInitialized() const {

  return true;
}

void InternalHeartbeatTxnRequest::Swap(InternalHeartbeatTxnRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalHeartbeatTxnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalHeartbeatTxnRequest_descriptor_;
  metadata.reflection = InternalHeartbeatTxnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalHeartbeatTxnResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalHeartbeatTxnResponse::InternalHeartbeatTxnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalHeartbeatTxnResponse)
}

void InternalHeartbeatTxnResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalHeartbeatTxnResponse::InternalHeartbeatTxnResponse(const InternalHeartbeatTxnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalHeartbeatTxnResponse)
}

void InternalHeartbeatTxnResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalHeartbeatTxnResponse::~InternalHeartbeatTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalHeartbeatTxnResponse)
  SharedDtor();
}

void InternalHeartbeatTxnResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalHeartbeatTxnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalHeartbeatTxnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalHeartbeatTxnResponse_descriptor_;
}

const InternalHeartbeatTxnResponse& InternalHeartbeatTxnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalHeartbeatTxnResponse* InternalHeartbeatTxnResponse::default_instance_ = NULL;

InternalHeartbeatTxnResponse* InternalHeartbeatTxnResponse::New() const {
  return new InternalHeartbeatTxnResponse;
}

void InternalHeartbeatTxnResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalHeartbeatTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalHeartbeatTxnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalHeartbeatTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalHeartbeatTxnResponse)
  return false;
#undef DO_
}

void InternalHeartbeatTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalHeartbeatTxnResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalHeartbeatTxnResponse)
}

::google::protobuf::uint8* InternalHeartbeatTxnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalHeartbeatTxnResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalHeartbeatTxnResponse)
  return target;
}

int InternalHeartbeatTxnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalHeartbeatTxnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalHeartbeatTxnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalHeartbeatTxnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalHeartbeatTxnResponse::MergeFrom(const InternalHeartbeatTxnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalHeartbeatTxnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalHeartbeatTxnResponse::CopyFrom(const InternalHeartbeatTxnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalHeartbeatTxnResponse::IsInitialized() const {

  return true;
}

void InternalHeartbeatTxnResponse::Swap(InternalHeartbeatTxnResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalHeartbeatTxnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalHeartbeatTxnResponse_descriptor_;
  metadata.reflection = InternalHeartbeatTxnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalGCRequest_GCKey::kKeyFieldNumber;
const int InternalGCRequest_GCKey::kTimestampFieldNumber;
#endif  // !_MSC_VER

InternalGCRequest_GCKey::InternalGCRequest_GCKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCRequest.GCKey)
}

void InternalGCRequest_GCKey::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::proto::Timestamp*>(&::cockroach::proto::Timestamp::default_instance());
}

InternalGCRequest_GCKey::InternalGCRequest_GCKey(const InternalGCRequest_GCKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCRequest.GCKey)
}

void InternalGCRequest_GCKey::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCRequest_GCKey::~InternalGCRequest_GCKey() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCRequest.GCKey)
  SharedDtor();
}

void InternalGCRequest_GCKey::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void InternalGCRequest_GCKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCRequest_GCKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCRequest_GCKey_descriptor_;
}

const InternalGCRequest_GCKey& InternalGCRequest_GCKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCRequest_GCKey* InternalGCRequest_GCKey::default_instance_ = NULL;

InternalGCRequest_GCKey* InternalGCRequest_GCKey::New() const {
  return new InternalGCRequest_GCKey;
}

void InternalGCRequest_GCKey::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalGCRequest_GCKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCRequest.GCKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.proto.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCRequest.GCKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCRequest.GCKey)
  return false;
#undef DO_
}

void InternalGCRequest_GCKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCRequest.GCKey)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCRequest.GCKey)
}

::google::protobuf::uint8* InternalGCRequest_GCKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCRequest.GCKey)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .cockroach.proto.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCRequest.GCKey)
  return target;
}

int InternalGCRequest_GCKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.proto.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCRequest_GCKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalGCRequest_GCKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalGCRequest_GCKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCRequest_GCKey::MergeFrom(const InternalGCRequest_GCKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::proto::Timestamp::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalGCRequest_GCKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCRequest_GCKey::CopyFrom(const InternalGCRequest_GCKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCRequest_GCKey::IsInitialized() const {

  return true;
}

void InternalGCRequest_GCKey::Swap(InternalGCRequest_GCKey* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalGCRequest_GCKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCRequest_GCKey_descriptor_;
  metadata.reflection = InternalGCRequest_GCKey_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int InternalGCRequest::kHeaderFieldNumber;
const int InternalGCRequest::kGcMetaFieldNumber;
const int InternalGCRequest::kKeysFieldNumber;
#endif  // !_MSC_VER

InternalGCRequest::InternalGCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCRequest)
}

void InternalGCRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
  gc_meta_ = const_cast< ::cockroach::proto::GCMetadata*>(&::cockroach::proto::GCMetadata::default_instance());
}

InternalGCRequest::InternalGCRequest(const InternalGCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCRequest)
}

void InternalGCRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  gc_meta_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCRequest::~InternalGCRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCRequest)
  SharedDtor();
}

void InternalGCRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete gc_meta_;
  }
}

void InternalGCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCRequest_descriptor_;
}

const InternalGCRequest& InternalGCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCRequest* InternalGCRequest::default_instance_ = NULL;

InternalGCRequest* InternalGCRequest::New() const {
  return new InternalGCRequest;
}

void InternalGCRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    if (has_gc_meta()) {
      if (gc_meta_ != NULL) gc_meta_->::cockroach::proto::GCMetadata::Clear();
    }
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalGCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gc_meta;
        break;
      }

      // optional .cockroach.proto.GCMetadata gc_meta = 2;
      case 2: {
        if (tag == 18) {
         parse_gc_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCRequest)
  return false;
#undef DO_
}

void InternalGCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .cockroach.proto.GCMetadata gc_meta = 2;
  if (has_gc_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gc_meta(), output);
  }

  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCRequest)
}

::google::protobuf::uint8* InternalGCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .cockroach.proto.GCMetadata gc_meta = 2;
  if (has_gc_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gc_meta(), target);
  }

  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCRequest)
  return target;
}

int InternalGCRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .cockroach.proto.GCMetadata gc_meta = 2;
    if (has_gc_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gc_meta());
    }

  }
  // repeated .cockroach.proto.InternalGCRequest.GCKey keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalGCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalGCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCRequest::MergeFrom(const InternalGCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_gc_meta()) {
      mutable_gc_meta()->::cockroach::proto::GCMetadata::MergeFrom(from.gc_meta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalGCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCRequest::CopyFrom(const InternalGCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCRequest::IsInitialized() const {

  return true;
}

void InternalGCRequest::Swap(InternalGCRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(gc_meta_, other->gc_meta_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalGCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCRequest_descriptor_;
  metadata.reflection = InternalGCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalGCResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalGCResponse::InternalGCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalGCResponse)
}

void InternalGCResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalGCResponse::InternalGCResponse(const InternalGCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalGCResponse)
}

void InternalGCResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalGCResponse::~InternalGCResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalGCResponse)
  SharedDtor();
}

void InternalGCResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalGCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalGCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalGCResponse_descriptor_;
}

const InternalGCResponse& InternalGCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalGCResponse* InternalGCResponse::default_instance_ = NULL;

InternalGCResponse* InternalGCResponse::New() const {
  return new InternalGCResponse;
}

void InternalGCResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalGCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalGCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalGCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalGCResponse)
  return false;
#undef DO_
}

void InternalGCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalGCResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalGCResponse)
}

::google::protobuf::uint8* InternalGCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalGCResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalGCResponse)
  return target;
}

int InternalGCResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalGCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalGCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalGCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalGCResponse::MergeFrom(const InternalGCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalGCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalGCResponse::CopyFrom(const InternalGCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalGCResponse::IsInitialized() const {

  return true;
}

void InternalGCResponse::Swap(InternalGCResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalGCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalGCResponse_descriptor_;
  metadata.reflection = InternalGCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalPushTxnRequest::kHeaderFieldNumber;
const int InternalPushTxnRequest::kPusheeTxnFieldNumber;
const int InternalPushTxnRequest::kAbortFieldNumber;
#endif  // !_MSC_VER

InternalPushTxnRequest::InternalPushTxnRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalPushTxnRequest)
}

void InternalPushTxnRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
  pushee_txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
}

InternalPushTxnRequest::InternalPushTxnRequest(const InternalPushTxnRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalPushTxnRequest)
}

void InternalPushTxnRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pushee_txn_ = NULL;
  abort_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalPushTxnRequest::~InternalPushTxnRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalPushTxnRequest)
  SharedDtor();
}

void InternalPushTxnRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete pushee_txn_;
  }
}

void InternalPushTxnRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalPushTxnRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalPushTxnRequest_descriptor_;
}

const InternalPushTxnRequest& InternalPushTxnRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalPushTxnRequest* InternalPushTxnRequest::default_instance_ = NULL;

InternalPushTxnRequest* InternalPushTxnRequest::New() const {
  return new InternalPushTxnRequest;
}

void InternalPushTxnRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    if (has_pushee_txn()) {
      if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
    }
    abort_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalPushTxnRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalPushTxnRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pushee_txn;
        break;
      }

      // optional .cockroach.proto.Transaction pushee_txn = 2;
      case 2: {
        if (tag == 18) {
         parse_pushee_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Abort;
        break;
      }

      // optional bool Abort = 3;
      case 3: {
        if (tag == 24) {
         parse_Abort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abort_)));
          set_has_abort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalPushTxnRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalPushTxnRequest)
  return false;
#undef DO_
}

void InternalPushTxnRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalPushTxnRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pushee_txn(), output);
  }

  // optional bool Abort = 3;
  if (has_abort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->abort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalPushTxnRequest)
}

::google::protobuf::uint8* InternalPushTxnRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalPushTxnRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pushee_txn(), target);
  }

  // optional bool Abort = 3;
  if (has_abort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->abort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalPushTxnRequest)
  return target;
}

int InternalPushTxnRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .cockroach.proto.Transaction pushee_txn = 2;
    if (has_pushee_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushee_txn());
    }

    // optional bool Abort = 3;
    if (has_abort()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalPushTxnRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalPushTxnRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalPushTxnRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalPushTxnRequest::MergeFrom(const InternalPushTxnRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::cockroach::proto::Transaction::MergeFrom(from.pushee_txn());
    }
    if (from.has_abort()) {
      set_abort(from.abort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalPushTxnRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalPushTxnRequest::CopyFrom(const InternalPushTxnRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPushTxnRequest::IsInitialized() const {

  return true;
}

void InternalPushTxnRequest::Swap(InternalPushTxnRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(pushee_txn_, other->pushee_txn_);
    std::swap(abort_, other->abort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalPushTxnRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalPushTxnRequest_descriptor_;
  metadata.reflection = InternalPushTxnRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalPushTxnResponse::kHeaderFieldNumber;
const int InternalPushTxnResponse::kPusheeTxnFieldNumber;
#endif  // !_MSC_VER

InternalPushTxnResponse::InternalPushTxnResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalPushTxnResponse)
}

void InternalPushTxnResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
  pushee_txn_ = const_cast< ::cockroach::proto::Transaction*>(&::cockroach::proto::Transaction::default_instance());
}

InternalPushTxnResponse::InternalPushTxnResponse(const InternalPushTxnResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalPushTxnResponse)
}

void InternalPushTxnResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  pushee_txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalPushTxnResponse::~InternalPushTxnResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalPushTxnResponse)
  SharedDtor();
}

void InternalPushTxnResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete pushee_txn_;
  }
}

void InternalPushTxnResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalPushTxnResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalPushTxnResponse_descriptor_;
}

const InternalPushTxnResponse& InternalPushTxnResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalPushTxnResponse* InternalPushTxnResponse::default_instance_ = NULL;

InternalPushTxnResponse* InternalPushTxnResponse::New() const {
  return new InternalPushTxnResponse;
}

void InternalPushTxnResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
    }
    if (has_pushee_txn()) {
      if (pushee_txn_ != NULL) pushee_txn_->::cockroach::proto::Transaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalPushTxnResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalPushTxnResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pushee_txn;
        break;
      }

      // optional .cockroach.proto.Transaction pushee_txn = 2;
      case 2: {
        if (tag == 18) {
         parse_pushee_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalPushTxnResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalPushTxnResponse)
  return false;
#undef DO_
}

void InternalPushTxnResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalPushTxnResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pushee_txn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalPushTxnResponse)
}

::google::protobuf::uint8* InternalPushTxnResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalPushTxnResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .cockroach.proto.Transaction pushee_txn = 2;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pushee_txn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalPushTxnResponse)
  return target;
}

int InternalPushTxnResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .cockroach.proto.Transaction pushee_txn = 2;
    if (has_pushee_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushee_txn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalPushTxnResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalPushTxnResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalPushTxnResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalPushTxnResponse::MergeFrom(const InternalPushTxnResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::cockroach::proto::Transaction::MergeFrom(from.pushee_txn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalPushTxnResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalPushTxnResponse::CopyFrom(const InternalPushTxnResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPushTxnResponse::IsInitialized() const {

  return true;
}

void InternalPushTxnResponse::Swap(InternalPushTxnResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(pushee_txn_, other->pushee_txn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalPushTxnResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalPushTxnResponse_descriptor_;
  metadata.reflection = InternalPushTxnResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentRequest::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentRequest::InternalResolveIntentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentRequest)
}

void InternalResolveIntentRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
}

InternalResolveIntentRequest::InternalResolveIntentRequest(const InternalResolveIntentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentRequest)
}

void InternalResolveIntentRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentRequest::~InternalResolveIntentRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentRequest)
  SharedDtor();
}

void InternalResolveIntentRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalResolveIntentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentRequest_descriptor_;
}

const InternalResolveIntentRequest& InternalResolveIntentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentRequest* InternalResolveIntentRequest::default_instance_ = NULL;

InternalResolveIntentRequest* InternalResolveIntentRequest::New() const {
  return new InternalResolveIntentRequest;
}

void InternalResolveIntentRequest::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalResolveIntentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentRequest)
  return false;
#undef DO_
}

void InternalResolveIntentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentRequest)
}

::google::protobuf::uint8* InternalResolveIntentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentRequest)
  return target;
}

int InternalResolveIntentRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalResolveIntentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalResolveIntentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentRequest::MergeFrom(const InternalResolveIntentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalResolveIntentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentRequest::CopyFrom(const InternalResolveIntentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentRequest::IsInitialized() const {

  return true;
}

void InternalResolveIntentRequest::Swap(InternalResolveIntentRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalResolveIntentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentRequest_descriptor_;
  metadata.reflection = InternalResolveIntentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalResolveIntentResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalResolveIntentResponse::InternalResolveIntentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalResolveIntentResponse)
}

void InternalResolveIntentResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalResolveIntentResponse::InternalResolveIntentResponse(const InternalResolveIntentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalResolveIntentResponse)
}

void InternalResolveIntentResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalResolveIntentResponse::~InternalResolveIntentResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalResolveIntentResponse)
  SharedDtor();
}

void InternalResolveIntentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalResolveIntentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalResolveIntentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalResolveIntentResponse_descriptor_;
}

const InternalResolveIntentResponse& InternalResolveIntentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalResolveIntentResponse* InternalResolveIntentResponse::default_instance_ = NULL;

InternalResolveIntentResponse* InternalResolveIntentResponse::New() const {
  return new InternalResolveIntentResponse;
}

void InternalResolveIntentResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalResolveIntentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalResolveIntentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalResolveIntentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalResolveIntentResponse)
  return false;
#undef DO_
}

void InternalResolveIntentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalResolveIntentResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalResolveIntentResponse)
}

::google::protobuf::uint8* InternalResolveIntentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalResolveIntentResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalResolveIntentResponse)
  return target;
}

int InternalResolveIntentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalResolveIntentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalResolveIntentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalResolveIntentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalResolveIntentResponse::MergeFrom(const InternalResolveIntentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalResolveIntentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalResolveIntentResponse::CopyFrom(const InternalResolveIntentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalResolveIntentResponse::IsInitialized() const {

  return true;
}

void InternalResolveIntentResponse::Swap(InternalResolveIntentResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalResolveIntentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalResolveIntentResponse_descriptor_;
  metadata.reflection = InternalResolveIntentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalMergeRequest::kHeaderFieldNumber;
const int InternalMergeRequest::kValueFieldNumber;
#endif  // !_MSC_VER

InternalMergeRequest::InternalMergeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalMergeRequest)
}

void InternalMergeRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
  value_ = const_cast< ::cockroach::proto::Value*>(&::cockroach::proto::Value::default_instance());
}

InternalMergeRequest::InternalMergeRequest(const InternalMergeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalMergeRequest)
}

void InternalMergeRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalMergeRequest::~InternalMergeRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalMergeRequest)
  SharedDtor();
}

void InternalMergeRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete value_;
  }
}

void InternalMergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalMergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalMergeRequest_descriptor_;
}

const InternalMergeRequest& InternalMergeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalMergeRequest* InternalMergeRequest::default_instance_ = NULL;

InternalMergeRequest* InternalMergeRequest::New() const {
  return new InternalMergeRequest;
}

void InternalMergeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalMergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.proto.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalMergeRequest)
  return false;
#undef DO_
}

void InternalMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalMergeRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalMergeRequest)
}

::google::protobuf::uint8* InternalMergeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalMergeRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .cockroach.proto.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalMergeRequest)
  return target;
}

int InternalMergeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .cockroach.proto.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalMergeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalMergeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalMergeRequest::MergeFrom(const InternalMergeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::proto::Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalMergeRequest::CopyFrom(const InternalMergeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalMergeRequest::IsInitialized() const {

  return true;
}

void InternalMergeRequest::Swap(InternalMergeRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalMergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalMergeRequest_descriptor_;
  metadata.reflection = InternalMergeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalMergeResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalMergeResponse::InternalMergeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalMergeResponse)
}

void InternalMergeResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalMergeResponse::InternalMergeResponse(const InternalMergeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalMergeResponse)
}

void InternalMergeResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalMergeResponse::~InternalMergeResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalMergeResponse)
  SharedDtor();
}

void InternalMergeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalMergeResponse_descriptor_;
}

const InternalMergeResponse& InternalMergeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalMergeResponse* InternalMergeResponse::default_instance_ = NULL;

InternalMergeResponse* InternalMergeResponse::New() const {
  return new InternalMergeResponse;
}

void InternalMergeResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalMergeResponse)
  return false;
#undef DO_
}

void InternalMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalMergeResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalMergeResponse)
}

::google::protobuf::uint8* InternalMergeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalMergeResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalMergeResponse)
  return target;
}

int InternalMergeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalMergeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalMergeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalMergeResponse::MergeFrom(const InternalMergeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalMergeResponse::CopyFrom(const InternalMergeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalMergeResponse::IsInitialized() const {

  return true;
}

void InternalMergeResponse::Swap(InternalMergeResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalMergeResponse_descriptor_;
  metadata.reflection = InternalMergeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalTruncateLogRequest::kHeaderFieldNumber;
const int InternalTruncateLogRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

InternalTruncateLogRequest::InternalTruncateLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTruncateLogRequest)
}

void InternalTruncateLogRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
}

InternalTruncateLogRequest::InternalTruncateLogRequest(const InternalTruncateLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTruncateLogRequest)
}

void InternalTruncateLogRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTruncateLogRequest::~InternalTruncateLogRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTruncateLogRequest)
  SharedDtor();
}

void InternalTruncateLogRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalTruncateLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTruncateLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTruncateLogRequest_descriptor_;
}

const InternalTruncateLogRequest& InternalTruncateLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTruncateLogRequest* InternalTruncateLogRequest::default_instance_ = NULL;

InternalTruncateLogRequest* InternalTruncateLogRequest::New() const {
  return new InternalTruncateLogRequest;
}

void InternalTruncateLogRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalTruncateLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTruncateLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTruncateLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTruncateLogRequest)
  return false;
#undef DO_
}

void InternalTruncateLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTruncateLogRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTruncateLogRequest)
}

::google::protobuf::uint8* InternalTruncateLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTruncateLogRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTruncateLogRequest)
  return target;
}

int InternalTruncateLogRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTruncateLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalTruncateLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalTruncateLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTruncateLogRequest::MergeFrom(const InternalTruncateLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalTruncateLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTruncateLogRequest::CopyFrom(const InternalTruncateLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTruncateLogRequest::IsInitialized() const {

  return true;
}

void InternalTruncateLogRequest::Swap(InternalTruncateLogRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalTruncateLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTruncateLogRequest_descriptor_;
  metadata.reflection = InternalTruncateLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalTruncateLogResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalTruncateLogResponse::InternalTruncateLogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTruncateLogResponse)
}

void InternalTruncateLogResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalTruncateLogResponse::InternalTruncateLogResponse(const InternalTruncateLogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTruncateLogResponse)
}

void InternalTruncateLogResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTruncateLogResponse::~InternalTruncateLogResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTruncateLogResponse)
  SharedDtor();
}

void InternalTruncateLogResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalTruncateLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTruncateLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTruncateLogResponse_descriptor_;
}

const InternalTruncateLogResponse& InternalTruncateLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTruncateLogResponse* InternalTruncateLogResponse::default_instance_ = NULL;

InternalTruncateLogResponse* InternalTruncateLogResponse::New() const {
  return new InternalTruncateLogResponse;
}

void InternalTruncateLogResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalTruncateLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTruncateLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTruncateLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTruncateLogResponse)
  return false;
#undef DO_
}

void InternalTruncateLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTruncateLogResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTruncateLogResponse)
}

::google::protobuf::uint8* InternalTruncateLogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTruncateLogResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTruncateLogResponse)
  return target;
}

int InternalTruncateLogResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTruncateLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalTruncateLogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalTruncateLogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTruncateLogResponse::MergeFrom(const InternalTruncateLogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalTruncateLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTruncateLogResponse::CopyFrom(const InternalTruncateLogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTruncateLogResponse::IsInitialized() const {

  return true;
}

void InternalTruncateLogResponse::Swap(InternalTruncateLogResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalTruncateLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTruncateLogResponse_descriptor_;
  metadata.reflection = InternalTruncateLogResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalLeaderLeaseRequest::kHeaderFieldNumber;
const int InternalLeaderLeaseRequest::kLeaseFieldNumber;
#endif  // !_MSC_VER

InternalLeaderLeaseRequest::InternalLeaderLeaseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalLeaderLeaseRequest)
}

void InternalLeaderLeaseRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::RequestHeader*>(&::cockroach::proto::RequestHeader::default_instance());
  lease_ = const_cast< ::cockroach::proto::Lease*>(&::cockroach::proto::Lease::default_instance());
}

InternalLeaderLeaseRequest::InternalLeaderLeaseRequest(const InternalLeaderLeaseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalLeaderLeaseRequest)
}

void InternalLeaderLeaseRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  lease_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalLeaderLeaseRequest::~InternalLeaderLeaseRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalLeaderLeaseRequest)
  SharedDtor();
}

void InternalLeaderLeaseRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete lease_;
  }
}

void InternalLeaderLeaseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalLeaderLeaseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalLeaderLeaseRequest_descriptor_;
}

const InternalLeaderLeaseRequest& InternalLeaderLeaseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalLeaderLeaseRequest* InternalLeaderLeaseRequest::default_instance_ = NULL;

InternalLeaderLeaseRequest* InternalLeaderLeaseRequest::New() const {
  return new InternalLeaderLeaseRequest;
}

void InternalLeaderLeaseRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_header()) {
      if (header_ != NULL) header_->::cockroach::proto::RequestHeader::Clear();
    }
    if (has_lease()) {
      if (lease_ != NULL) lease_->::cockroach::proto::Lease::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalLeaderLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalLeaderLeaseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lease;
        break;
      }

      // optional .cockroach.proto.Lease lease = 2;
      case 2: {
        if (tag == 18) {
         parse_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalLeaderLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalLeaderLeaseRequest)
  return false;
#undef DO_
}

void InternalLeaderLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalLeaderLeaseRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .cockroach.proto.Lease lease = 2;
  if (has_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lease(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalLeaderLeaseRequest)
}

::google::protobuf::uint8* InternalLeaderLeaseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalLeaderLeaseRequest)
  // optional .cockroach.proto.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .cockroach.proto.Lease lease = 2;
  if (has_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lease(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalLeaderLeaseRequest)
  return target;
}

int InternalLeaderLeaseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .cockroach.proto.Lease lease = 2;
    if (has_lease()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lease());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalLeaderLeaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalLeaderLeaseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalLeaderLeaseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalLeaderLeaseRequest::MergeFrom(const InternalLeaderLeaseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_lease()) {
      mutable_lease()->::cockroach::proto::Lease::MergeFrom(from.lease());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalLeaderLeaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalLeaderLeaseRequest::CopyFrom(const InternalLeaderLeaseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLeaderLeaseRequest::IsInitialized() const {

  return true;
}

void InternalLeaderLeaseRequest::Swap(InternalLeaderLeaseRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(lease_, other->lease_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalLeaderLeaseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalLeaderLeaseRequest_descriptor_;
  metadata.reflection = InternalLeaderLeaseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalLeaderLeaseResponse::kHeaderFieldNumber;
#endif  // !_MSC_VER

InternalLeaderLeaseResponse::InternalLeaderLeaseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalLeaderLeaseResponse)
}

void InternalLeaderLeaseResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::cockroach::proto::ResponseHeader*>(&::cockroach::proto::ResponseHeader::default_instance());
}

InternalLeaderLeaseResponse::InternalLeaderLeaseResponse(const InternalLeaderLeaseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalLeaderLeaseResponse)
}

void InternalLeaderLeaseResponse::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalLeaderLeaseResponse::~InternalLeaderLeaseResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalLeaderLeaseResponse)
  SharedDtor();
}

void InternalLeaderLeaseResponse::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InternalLeaderLeaseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalLeaderLeaseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalLeaderLeaseResponse_descriptor_;
}

const InternalLeaderLeaseResponse& InternalLeaderLeaseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalLeaderLeaseResponse* InternalLeaderLeaseResponse::default_instance_ = NULL;

InternalLeaderLeaseResponse* InternalLeaderLeaseResponse::New() const {
  return new InternalLeaderLeaseResponse;
}

void InternalLeaderLeaseResponse::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::cockroach::proto::ResponseHeader::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalLeaderLeaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalLeaderLeaseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalLeaderLeaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalLeaderLeaseResponse)
  return false;
#undef DO_
}

void InternalLeaderLeaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalLeaderLeaseResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalLeaderLeaseResponse)
}

::google::protobuf::uint8* InternalLeaderLeaseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalLeaderLeaseResponse)
  // optional .cockroach.proto.ResponseHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalLeaderLeaseResponse)
  return target;
}

int InternalLeaderLeaseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cockroach.proto.ResponseHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalLeaderLeaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalLeaderLeaseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalLeaderLeaseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalLeaderLeaseResponse::MergeFrom(const InternalLeaderLeaseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::cockroach::proto::ResponseHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalLeaderLeaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalLeaderLeaseResponse::CopyFrom(const InternalLeaderLeaseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLeaderLeaseResponse::IsInitialized() const {

  return true;
}

void InternalLeaderLeaseResponse::Swap(InternalLeaderLeaseResponse* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalLeaderLeaseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalLeaderLeaseResponse_descriptor_;
  metadata.reflection = InternalLeaderLeaseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadWriteCmdResponse::kPutFieldNumber;
const int ReadWriteCmdResponse::kConditionalPutFieldNumber;
const int ReadWriteCmdResponse::kIncrementFieldNumber;
const int ReadWriteCmdResponse::kDeleteFieldNumber;
const int ReadWriteCmdResponse::kDeleteRangeFieldNumber;
const int ReadWriteCmdResponse::kEndTransactionFieldNumber;
const int ReadWriteCmdResponse::kReapQueueFieldNumber;
const int ReadWriteCmdResponse::kEnqueueUpdateFieldNumber;
const int ReadWriteCmdResponse::kEnqueueMessageFieldNumber;
const int ReadWriteCmdResponse::kInternalHeartbeatTxnFieldNumber;
const int ReadWriteCmdResponse::kInternalPushTxnFieldNumber;
const int ReadWriteCmdResponse::kInternalResolveIntentFieldNumber;
const int ReadWriteCmdResponse::kInternalMergeFieldNumber;
const int ReadWriteCmdResponse::kInternalTruncateLogFieldNumber;
const int ReadWriteCmdResponse::kInternalGcFieldNumber;
#endif  // !_MSC_VER

ReadWriteCmdResponse::ReadWriteCmdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ReadWriteCmdResponse)
}

void ReadWriteCmdResponse::InitAsDefaultInstance() {
  ReadWriteCmdResponse_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutResponse*>(&::cockroach::proto::PutResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutResponse*>(&::cockroach::proto::ConditionalPutResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementResponse*>(&::cockroach::proto::IncrementResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteResponse*>(&::cockroach::proto::DeleteResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeResponse*>(&::cockroach::proto::DeleteRangeResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionResponse*>(&::cockroach::proto::EndTransactionResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->reap_queue_ = const_cast< ::cockroach::proto::ReapQueueResponse*>(&::cockroach::proto::ReapQueueResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->enqueue_update_ = const_cast< ::cockroach::proto::EnqueueUpdateResponse*>(&::cockroach::proto::EnqueueUpdateResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->enqueue_message_ = const_cast< ::cockroach::proto::EnqueueMessageResponse*>(&::cockroach::proto::EnqueueMessageResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_heartbeat_txn_ = const_cast< ::cockroach::proto::InternalHeartbeatTxnResponse*>(&::cockroach::proto::InternalHeartbeatTxnResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnResponse*>(&::cockroach::proto::InternalPushTxnResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentResponse*>(&::cockroach::proto::InternalResolveIntentResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_merge_ = const_cast< ::cockroach::proto::InternalMergeResponse*>(&::cockroach::proto::InternalMergeResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_truncate_log_ = const_cast< ::cockroach::proto::InternalTruncateLogResponse*>(&::cockroach::proto::InternalTruncateLogResponse::default_instance());
  ReadWriteCmdResponse_default_oneof_instance_->internal_gc_ = const_cast< ::cockroach::proto::InternalGCResponse*>(&::cockroach::proto::InternalGCResponse::default_instance());
}

ReadWriteCmdResponse::ReadWriteCmdResponse(const ReadWriteCmdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ReadWriteCmdResponse)
}

void ReadWriteCmdResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

ReadWriteCmdResponse::~ReadWriteCmdResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ReadWriteCmdResponse)
  SharedDtor();
}

void ReadWriteCmdResponse::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void ReadWriteCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWriteCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWriteCmdResponse_descriptor_;
}

const ReadWriteCmdResponse& ReadWriteCmdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

ReadWriteCmdResponse* ReadWriteCmdResponse::default_instance_ = NULL;

ReadWriteCmdResponse* ReadWriteCmdResponse::New() const {
  return new ReadWriteCmdResponse;
}

void ReadWriteCmdResponse::clear_value() {
  switch(value_case()) {
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kReapQueue: {
      delete value_.reap_queue_;
      break;
    }
    case kEnqueueUpdate: {
      delete value_.enqueue_update_;
      break;
    }
    case kEnqueueMessage: {
      delete value_.enqueue_message_;
      break;
    }
    case kInternalHeartbeatTxn: {
      delete value_.internal_heartbeat_txn_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalMerge: {
      delete value_.internal_merge_;
      break;
    }
    case kInternalTruncateLog: {
      delete value_.internal_truncate_log_;
      break;
    }
    case kInternalGc: {
      delete value_.internal_gc_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ReadWriteCmdResponse::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadWriteCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ReadWriteCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.PutResponse put = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
      case 2: {
        if (tag == 18) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementResponse increment = 3;
      case 3: {
        if (tag == 26) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteResponse delete = 4;
      case 4: {
        if (tag == 34) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
      case 5: {
        if (tag == 42) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
      case 6: {
        if (tag == 50) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reap_queue;
        break;
      }

      // optional .cockroach.proto.ReapQueueResponse reap_queue = 7;
      case 7: {
        if (tag == 58) {
         parse_reap_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reap_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_enqueue_update;
        break;
      }

      // optional .cockroach.proto.EnqueueUpdateResponse enqueue_update = 8;
      case 8: {
        if (tag == 66) {
         parse_enqueue_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_enqueue_message;
        break;
      }

      // optional .cockroach.proto.EnqueueMessageResponse enqueue_message = 9;
      case 9: {
        if (tag == 74) {
         parse_enqueue_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_internal_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
      case 10: {
        if (tag == 82) {
         parse_internal_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
      case 11: {
        if (tag == 90) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
      case 12: {
        if (tag == 98) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_internal_merge;
        break;
      }

      // optional .cockroach.proto.InternalMergeResponse internal_merge = 13;
      case 13: {
        if (tag == 106) {
         parse_internal_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_internal_truncate_log;
        break;
      }

      // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 14;
      case 14: {
        if (tag == 114) {
         parse_internal_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_internal_gc;
        break;
      }

      // optional .cockroach.proto.InternalGCResponse internal_gc = 15;
      case 15: {
        if (tag == 122) {
         parse_internal_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ReadWriteCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ReadWriteCmdResponse)
  return false;
#undef DO_
}

void ReadWriteCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ReadWriteCmdResponse)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->put(), output);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conditional_put(), output);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->increment(), output);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->delete_(), output);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delete_range(), output);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->end_transaction(), output);
  }

  // optional .cockroach.proto.ReapQueueResponse reap_queue = 7;
  if (has_reap_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reap_queue(), output);
  }

  // optional .cockroach.proto.EnqueueUpdateResponse enqueue_update = 8;
  if (has_enqueue_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->enqueue_update(), output);
  }

  // optional .cockroach.proto.EnqueueMessageResponse enqueue_message = 9;
  if (has_enqueue_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->enqueue_message(), output);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
  if (has_internal_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->internal_heartbeat_txn(), output);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->internal_push_txn(), output);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->internal_resolve_intent(), output);
  }

  // optional .cockroach.proto.InternalMergeResponse internal_merge = 13;
  if (has_internal_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->internal_merge(), output);
  }

  // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 14;
  if (has_internal_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->internal_truncate_log(), output);
  }

  // optional .cockroach.proto.InternalGCResponse internal_gc = 15;
  if (has_internal_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->internal_gc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ReadWriteCmdResponse)
}

::google::protobuf::uint8* ReadWriteCmdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ReadWriteCmdResponse)
  // optional .cockroach.proto.PutResponse put = 1;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->put(), target);
  }

  // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conditional_put(), target);
  }

  // optional .cockroach.proto.IncrementResponse increment = 3;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->increment(), target);
  }

  // optional .cockroach.proto.DeleteResponse delete = 4;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->delete_(), target);
  }

  // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delete_range(), target);
  }

  // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->end_transaction(), target);
  }

  // optional .cockroach.proto.ReapQueueResponse reap_queue = 7;
  if (has_reap_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reap_queue(), target);
  }

  // optional .cockroach.proto.EnqueueUpdateResponse enqueue_update = 8;
  if (has_enqueue_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->enqueue_update(), target);
  }

  // optional .cockroach.proto.EnqueueMessageResponse enqueue_message = 9;
  if (has_enqueue_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->enqueue_message(), target);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
  if (has_internal_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->internal_heartbeat_txn(), target);
  }

  // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->internal_push_txn(), target);
  }

  // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->internal_resolve_intent(), target);
  }

  // optional .cockroach.proto.InternalMergeResponse internal_merge = 13;
  if (has_internal_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->internal_merge(), target);
  }

  // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 14;
  if (has_internal_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->internal_truncate_log(), target);
  }

  // optional .cockroach.proto.InternalGCResponse internal_gc = 15;
  if (has_internal_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->internal_gc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ReadWriteCmdResponse)
  return target;
}

int ReadWriteCmdResponse::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.PutResponse put = 1;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put());
      break;
    }
    // optional .cockroach.proto.ConditionalPutResponse conditional_put = 2;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_put());
      break;
    }
    // optional .cockroach.proto.IncrementResponse increment = 3;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->increment());
      break;
    }
    // optional .cockroach.proto.DeleteResponse delete = 4;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_());
      break;
    }
    // optional .cockroach.proto.DeleteRangeResponse delete_range = 5;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_range());
      break;
    }
    // optional .cockroach.proto.EndTransactionResponse end_transaction = 6;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_transaction());
      break;
    }
    // optional .cockroach.proto.ReapQueueResponse reap_queue = 7;
    case kReapQueue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reap_queue());
      break;
    }
    // optional .cockroach.proto.EnqueueUpdateResponse enqueue_update = 8;
    case kEnqueueUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue_update());
      break;
    }
    // optional .cockroach.proto.EnqueueMessageResponse enqueue_message = 9;
    case kEnqueueMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue_message());
      break;
    }
    // optional .cockroach.proto.InternalHeartbeatTxnResponse internal_heartbeat_txn = 10;
    case kInternalHeartbeatTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_heartbeat_txn());
      break;
    }
    // optional .cockroach.proto.InternalPushTxnResponse internal_push_txn = 11;
    case kInternalPushTxn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_push_txn());
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentResponse internal_resolve_intent = 12;
    case kInternalResolveIntent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_resolve_intent());
      break;
    }
    // optional .cockroach.proto.InternalMergeResponse internal_merge = 13;
    case kInternalMerge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_merge());
      break;
    }
    // optional .cockroach.proto.InternalTruncateLogResponse internal_truncate_log = 14;
    case kInternalTruncateLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_truncate_log());
      break;
    }
    // optional .cockroach.proto.InternalGCResponse internal_gc = 15;
    case kInternalGc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_gc());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWriteCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadWriteCmdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadWriteCmdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWriteCmdResponse::MergeFrom(const ReadWriteCmdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.value_case()) {
    case kPut: {
      mutable_put()->::cockroach::proto::PutResponse::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutResponse::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementResponse::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteResponse::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeResponse::MergeFrom(from.delete_range());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionResponse::MergeFrom(from.end_transaction());
      break;
    }
    case kReapQueue: {
      mutable_reap_queue()->::cockroach::proto::ReapQueueResponse::MergeFrom(from.reap_queue());
      break;
    }
    case kEnqueueUpdate: {
      mutable_enqueue_update()->::cockroach::proto::EnqueueUpdateResponse::MergeFrom(from.enqueue_update());
      break;
    }
    case kEnqueueMessage: {
      mutable_enqueue_message()->::cockroach::proto::EnqueueMessageResponse::MergeFrom(from.enqueue_message());
      break;
    }
    case kInternalHeartbeatTxn: {
      mutable_internal_heartbeat_txn()->::cockroach::proto::InternalHeartbeatTxnResponse::MergeFrom(from.internal_heartbeat_txn());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnResponse::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentResponse::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalMerge: {
      mutable_internal_merge()->::cockroach::proto::InternalMergeResponse::MergeFrom(from.internal_merge());
      break;
    }
    case kInternalTruncateLog: {
      mutable_internal_truncate_log()->::cockroach::proto::InternalTruncateLogResponse::MergeFrom(from.internal_truncate_log());
      break;
    }
    case kInternalGc: {
      mutable_internal_gc()->::cockroach::proto::InternalGCResponse::MergeFrom(from.internal_gc());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadWriteCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWriteCmdResponse::CopyFrom(const ReadWriteCmdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWriteCmdResponse::IsInitialized() const {

  return true;
}

void ReadWriteCmdResponse::Swap(ReadWriteCmdResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadWriteCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWriteCmdResponse_descriptor_;
  metadata.reflection = ReadWriteCmdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalRaftCommandUnion::kContainsFieldNumber;
const int InternalRaftCommandUnion::kGetFieldNumber;
const int InternalRaftCommandUnion::kPutFieldNumber;
const int InternalRaftCommandUnion::kConditionalPutFieldNumber;
const int InternalRaftCommandUnion::kIncrementFieldNumber;
const int InternalRaftCommandUnion::kDeleteFieldNumber;
const int InternalRaftCommandUnion::kDeleteRangeFieldNumber;
const int InternalRaftCommandUnion::kScanFieldNumber;
const int InternalRaftCommandUnion::kEndTransactionFieldNumber;
const int InternalRaftCommandUnion::kReapQueueFieldNumber;
const int InternalRaftCommandUnion::kEnqueueUpdateFieldNumber;
const int InternalRaftCommandUnion::kEnqueueMessageFieldNumber;
const int InternalRaftCommandUnion::kBatchFieldNumber;
const int InternalRaftCommandUnion::kInternalRangeLookupFieldNumber;
const int InternalRaftCommandUnion::kInternalHeartbeatTxnFieldNumber;
const int InternalRaftCommandUnion::kInternalPushTxnFieldNumber;
const int InternalRaftCommandUnion::kInternalResolveIntentFieldNumber;
const int InternalRaftCommandUnion::kInternalMergeResponseFieldNumber;
const int InternalRaftCommandUnion::kInternalTruncateLogFieldNumber;
const int InternalRaftCommandUnion::kInternalGcFieldNumber;
const int InternalRaftCommandUnion::kInternalLeaseFieldNumber;
#endif  // !_MSC_VER

InternalRaftCommandUnion::InternalRaftCommandUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRaftCommandUnion)
}

void InternalRaftCommandUnion::InitAsDefaultInstance() {
  InternalRaftCommandUnion_default_oneof_instance_->contains_ = const_cast< ::cockroach::proto::ContainsRequest*>(&::cockroach::proto::ContainsRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->get_ = const_cast< ::cockroach::proto::GetRequest*>(&::cockroach::proto::GetRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->put_ = const_cast< ::cockroach::proto::PutRequest*>(&::cockroach::proto::PutRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->conditional_put_ = const_cast< ::cockroach::proto::ConditionalPutRequest*>(&::cockroach::proto::ConditionalPutRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->increment_ = const_cast< ::cockroach::proto::IncrementRequest*>(&::cockroach::proto::IncrementRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->delete__ = const_cast< ::cockroach::proto::DeleteRequest*>(&::cockroach::proto::DeleteRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->delete_range_ = const_cast< ::cockroach::proto::DeleteRangeRequest*>(&::cockroach::proto::DeleteRangeRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->scan_ = const_cast< ::cockroach::proto::ScanRequest*>(&::cockroach::proto::ScanRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->end_transaction_ = const_cast< ::cockroach::proto::EndTransactionRequest*>(&::cockroach::proto::EndTransactionRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->reap_queue_ = const_cast< ::cockroach::proto::ReapQueueRequest*>(&::cockroach::proto::ReapQueueRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->enqueue_update_ = const_cast< ::cockroach::proto::EnqueueUpdateRequest*>(&::cockroach::proto::EnqueueUpdateRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->enqueue_message_ = const_cast< ::cockroach::proto::EnqueueMessageRequest*>(&::cockroach::proto::EnqueueMessageRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->batch_ = const_cast< ::cockroach::proto::BatchRequest*>(&::cockroach::proto::BatchRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_range_lookup_ = const_cast< ::cockroach::proto::InternalRangeLookupRequest*>(&::cockroach::proto::InternalRangeLookupRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_heartbeat_txn_ = const_cast< ::cockroach::proto::InternalHeartbeatTxnRequest*>(&::cockroach::proto::InternalHeartbeatTxnRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_push_txn_ = const_cast< ::cockroach::proto::InternalPushTxnRequest*>(&::cockroach::proto::InternalPushTxnRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_resolve_intent_ = const_cast< ::cockroach::proto::InternalResolveIntentRequest*>(&::cockroach::proto::InternalResolveIntentRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_merge_response_ = const_cast< ::cockroach::proto::InternalMergeRequest*>(&::cockroach::proto::InternalMergeRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_truncate_log_ = const_cast< ::cockroach::proto::InternalTruncateLogRequest*>(&::cockroach::proto::InternalTruncateLogRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_gc_ = const_cast< ::cockroach::proto::InternalGCRequest*>(&::cockroach::proto::InternalGCRequest::default_instance());
  InternalRaftCommandUnion_default_oneof_instance_->internal_lease_ = const_cast< ::cockroach::proto::InternalLeaderLeaseRequest*>(&::cockroach::proto::InternalLeaderLeaseRequest::default_instance());
}

InternalRaftCommandUnion::InternalRaftCommandUnion(const InternalRaftCommandUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRaftCommandUnion)
}

void InternalRaftCommandUnion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_value();
}

InternalRaftCommandUnion::~InternalRaftCommandUnion() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRaftCommandUnion)
  SharedDtor();
}

void InternalRaftCommandUnion::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void InternalRaftCommandUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRaftCommandUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRaftCommandUnion_descriptor_;
}

const InternalRaftCommandUnion& InternalRaftCommandUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRaftCommandUnion* InternalRaftCommandUnion::default_instance_ = NULL;

InternalRaftCommandUnion* InternalRaftCommandUnion::New() const {
  return new InternalRaftCommandUnion;
}

void InternalRaftCommandUnion::clear_value() {
  switch(value_case()) {
    case kContains: {
      delete value_.contains_;
      break;
    }
    case kGet: {
      delete value_.get_;
      break;
    }
    case kPut: {
      delete value_.put_;
      break;
    }
    case kConditionalPut: {
      delete value_.conditional_put_;
      break;
    }
    case kIncrement: {
      delete value_.increment_;
      break;
    }
    case kDelete: {
      delete value_.delete__;
      break;
    }
    case kDeleteRange: {
      delete value_.delete_range_;
      break;
    }
    case kScan: {
      delete value_.scan_;
      break;
    }
    case kEndTransaction: {
      delete value_.end_transaction_;
      break;
    }
    case kReapQueue: {
      delete value_.reap_queue_;
      break;
    }
    case kEnqueueUpdate: {
      delete value_.enqueue_update_;
      break;
    }
    case kEnqueueMessage: {
      delete value_.enqueue_message_;
      break;
    }
    case kBatch: {
      delete value_.batch_;
      break;
    }
    case kInternalRangeLookup: {
      delete value_.internal_range_lookup_;
      break;
    }
    case kInternalHeartbeatTxn: {
      delete value_.internal_heartbeat_txn_;
      break;
    }
    case kInternalPushTxn: {
      delete value_.internal_push_txn_;
      break;
    }
    case kInternalResolveIntent: {
      delete value_.internal_resolve_intent_;
      break;
    }
    case kInternalMergeResponse: {
      delete value_.internal_merge_response_;
      break;
    }
    case kInternalTruncateLog: {
      delete value_.internal_truncate_log_;
      break;
    }
    case kInternalGc: {
      delete value_.internal_gc_;
      break;
    }
    case kInternalLease: {
      delete value_.internal_lease_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void InternalRaftCommandUnion::Clear() {
  clear_value();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalRaftCommandUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRaftCommandUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.ContainsRequest contains = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contains()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .cockroach.proto.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_put;
        break;
      }

      // optional .cockroach.proto.PutRequest put = 3;
      case 3: {
        if (tag == 26) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditional_put;
        break;
      }

      // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
      case 4: {
        if (tag == 34) {
         parse_conditional_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditional_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_increment;
        break;
      }

      // optional .cockroach.proto.IncrementRequest increment = 5;
      case 5: {
        if (tag == 42) {
         parse_increment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_increment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delete;
        break;
      }

      // optional .cockroach.proto.DeleteRequest delete = 6;
      case 6: {
        if (tag == 50) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_delete_range;
        break;
      }

      // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
      case 7: {
        if (tag == 58) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_scan;
        break;
      }

      // optional .cockroach.proto.ScanRequest scan = 8;
      case 8: {
        if (tag == 66) {
         parse_scan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_end_transaction;
        break;
      }

      // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
      case 9: {
        if (tag == 74) {
         parse_end_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reap_queue;
        break;
      }

      // optional .cockroach.proto.ReapQueueRequest reap_queue = 10;
      case 10: {
        if (tag == 82) {
         parse_reap_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reap_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_enqueue_update;
        break;
      }

      // optional .cockroach.proto.EnqueueUpdateRequest enqueue_update = 11;
      case 11: {
        if (tag == 90) {
         parse_enqueue_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_enqueue_message;
        break;
      }

      // optional .cockroach.proto.EnqueueMessageRequest enqueue_message = 12;
      case 12: {
        if (tag == 98) {
         parse_enqueue_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_batch;
        break;
      }

      // optional .cockroach.proto.BatchRequest batch = 30;
      case 30: {
        if (tag == 242) {
         parse_batch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_internal_range_lookup;
        break;
      }

      // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
      case 31: {
        if (tag == 250) {
         parse_internal_range_lookup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_range_lookup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_internal_heartbeat_txn;
        break;
      }

      // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
      case 32: {
        if (tag == 258) {
         parse_internal_heartbeat_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_heartbeat_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_internal_push_txn;
        break;
      }

      // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
      case 33: {
        if (tag == 266) {
         parse_internal_push_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_push_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_internal_resolve_intent;
        break;
      }

      // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
      case 34: {
        if (tag == 274) {
         parse_internal_resolve_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_resolve_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_internal_merge_response;
        break;
      }

      // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 35;
      case 35: {
        if (tag == 282) {
         parse_internal_merge_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_merge_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_internal_truncate_log;
        break;
      }

      // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 36;
      case 36: {
        if (tag == 290) {
         parse_internal_truncate_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_truncate_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_internal_gc;
        break;
      }

      // optional .cockroach.proto.InternalGCRequest internal_gc = 37;
      case 37: {
        if (tag == 298) {
         parse_internal_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_internal_lease;
        break;
      }

      // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 38;
      case 38: {
        if (tag == 306) {
         parse_internal_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_internal_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRaftCommandUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRaftCommandUnion)
  return false;
#undef DO_
}

void InternalRaftCommandUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRaftCommandUnion)
  // optional .cockroach.proto.ContainsRequest contains = 1;
  if (has_contains()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->contains(), output);
  }

  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get(), output);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->put(), output);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditional_put(), output);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->increment(), output);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->delete_(), output);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->delete_range(), output);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->scan(), output);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->end_transaction(), output);
  }

  // optional .cockroach.proto.ReapQueueRequest reap_queue = 10;
  if (has_reap_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->reap_queue(), output);
  }

  // optional .cockroach.proto.EnqueueUpdateRequest enqueue_update = 11;
  if (has_enqueue_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->enqueue_update(), output);
  }

  // optional .cockroach.proto.EnqueueMessageRequest enqueue_message = 12;
  if (has_enqueue_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->enqueue_message(), output);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->batch(), output);
  }

  // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
  if (has_internal_range_lookup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->internal_range_lookup(), output);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
  if (has_internal_heartbeat_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->internal_heartbeat_txn(), output);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
  if (has_internal_push_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->internal_push_txn(), output);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
  if (has_internal_resolve_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->internal_resolve_intent(), output);
  }

  // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 35;
  if (has_internal_merge_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->internal_merge_response(), output);
  }

  // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 36;
  if (has_internal_truncate_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->internal_truncate_log(), output);
  }

  // optional .cockroach.proto.InternalGCRequest internal_gc = 37;
  if (has_internal_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->internal_gc(), output);
  }

  // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 38;
  if (has_internal_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->internal_lease(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRaftCommandUnion)
}

::google::protobuf::uint8* InternalRaftCommandUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRaftCommandUnion)
  // optional .cockroach.proto.ContainsRequest contains = 1;
  if (has_contains()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->contains(), target);
  }

  // optional .cockroach.proto.GetRequest get = 2;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get(), target);
  }

  // optional .cockroach.proto.PutRequest put = 3;
  if (has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->put(), target);
  }

  // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
  if (has_conditional_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conditional_put(), target);
  }

  // optional .cockroach.proto.IncrementRequest increment = 5;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->increment(), target);
  }

  // optional .cockroach.proto.DeleteRequest delete = 6;
  if (has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->delete_(), target);
  }

  // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
  if (has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->delete_range(), target);
  }

  // optional .cockroach.proto.ScanRequest scan = 8;
  if (has_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->scan(), target);
  }

  // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
  if (has_end_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->end_transaction(), target);
  }

  // optional .cockroach.proto.ReapQueueRequest reap_queue = 10;
  if (has_reap_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->reap_queue(), target);
  }

  // optional .cockroach.proto.EnqueueUpdateRequest enqueue_update = 11;
  if (has_enqueue_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->enqueue_update(), target);
  }

  // optional .cockroach.proto.EnqueueMessageRequest enqueue_message = 12;
  if (has_enqueue_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->enqueue_message(), target);
  }

  // optional .cockroach.proto.BatchRequest batch = 30;
  if (has_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->batch(), target);
  }

  // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
  if (has_internal_range_lookup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->internal_range_lookup(), target);
  }

  // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
  if (has_internal_heartbeat_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->internal_heartbeat_txn(), target);
  }

  // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
  if (has_internal_push_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->internal_push_txn(), target);
  }

  // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
  if (has_internal_resolve_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->internal_resolve_intent(), target);
  }

  // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 35;
  if (has_internal_merge_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->internal_merge_response(), target);
  }

  // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 36;
  if (has_internal_truncate_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->internal_truncate_log(), target);
  }

  // optional .cockroach.proto.InternalGCRequest internal_gc = 37;
  if (has_internal_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->internal_gc(), target);
  }

  // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 38;
  if (has_internal_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->internal_lease(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRaftCommandUnion)
  return target;
}

int InternalRaftCommandUnion::ByteSize() const {
  int total_size = 0;

  switch (value_case()) {
    // optional .cockroach.proto.ContainsRequest contains = 1;
    case kContains: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contains());
      break;
    }
    // optional .cockroach.proto.GetRequest get = 2;
    case kGet: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get());
      break;
    }
    // optional .cockroach.proto.PutRequest put = 3;
    case kPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put());
      break;
    }
    // optional .cockroach.proto.ConditionalPutRequest conditional_put = 4;
    case kConditionalPut: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditional_put());
      break;
    }
    // optional .cockroach.proto.IncrementRequest increment = 5;
    case kIncrement: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->increment());
      break;
    }
    // optional .cockroach.proto.DeleteRequest delete = 6;
    case kDelete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_());
      break;
    }
    // optional .cockroach.proto.DeleteRangeRequest delete_range = 7;
    case kDeleteRange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_range());
      break;
    }
    // optional .cockroach.proto.ScanRequest scan = 8;
    case kScan: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan());
      break;
    }
    // optional .cockroach.proto.EndTransactionRequest end_transaction = 9;
    case kEndTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_transaction());
      break;
    }
    // optional .cockroach.proto.ReapQueueRequest reap_queue = 10;
    case kReapQueue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reap_queue());
      break;
    }
    // optional .cockroach.proto.EnqueueUpdateRequest enqueue_update = 11;
    case kEnqueueUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue_update());
      break;
    }
    // optional .cockroach.proto.EnqueueMessageRequest enqueue_message = 12;
    case kEnqueueMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue_message());
      break;
    }
    // optional .cockroach.proto.BatchRequest batch = 30;
    case kBatch: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batch());
      break;
    }
    // optional .cockroach.proto.InternalRangeLookupRequest internal_range_lookup = 31;
    case kInternalRangeLookup: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_range_lookup());
      break;
    }
    // optional .cockroach.proto.InternalHeartbeatTxnRequest internal_heartbeat_txn = 32;
    case kInternalHeartbeatTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_heartbeat_txn());
      break;
    }
    // optional .cockroach.proto.InternalPushTxnRequest internal_push_txn = 33;
    case kInternalPushTxn: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_push_txn());
      break;
    }
    // optional .cockroach.proto.InternalResolveIntentRequest internal_resolve_intent = 34;
    case kInternalResolveIntent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_resolve_intent());
      break;
    }
    // optional .cockroach.proto.InternalMergeRequest internal_merge_response = 35;
    case kInternalMergeResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_merge_response());
      break;
    }
    // optional .cockroach.proto.InternalTruncateLogRequest internal_truncate_log = 36;
    case kInternalTruncateLog: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_truncate_log());
      break;
    }
    // optional .cockroach.proto.InternalGCRequest internal_gc = 37;
    case kInternalGc: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_gc());
      break;
    }
    // optional .cockroach.proto.InternalLeaderLeaseRequest internal_lease = 38;
    case kInternalLease: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->internal_lease());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRaftCommandUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalRaftCommandUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalRaftCommandUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRaftCommandUnion::MergeFrom(const InternalRaftCommandUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.value_case()) {
    case kContains: {
      mutable_contains()->::cockroach::proto::ContainsRequest::MergeFrom(from.contains());
      break;
    }
    case kGet: {
      mutable_get()->::cockroach::proto::GetRequest::MergeFrom(from.get());
      break;
    }
    case kPut: {
      mutable_put()->::cockroach::proto::PutRequest::MergeFrom(from.put());
      break;
    }
    case kConditionalPut: {
      mutable_conditional_put()->::cockroach::proto::ConditionalPutRequest::MergeFrom(from.conditional_put());
      break;
    }
    case kIncrement: {
      mutable_increment()->::cockroach::proto::IncrementRequest::MergeFrom(from.increment());
      break;
    }
    case kDelete: {
      mutable_delete_()->::cockroach::proto::DeleteRequest::MergeFrom(from.delete_());
      break;
    }
    case kDeleteRange: {
      mutable_delete_range()->::cockroach::proto::DeleteRangeRequest::MergeFrom(from.delete_range());
      break;
    }
    case kScan: {
      mutable_scan()->::cockroach::proto::ScanRequest::MergeFrom(from.scan());
      break;
    }
    case kEndTransaction: {
      mutable_end_transaction()->::cockroach::proto::EndTransactionRequest::MergeFrom(from.end_transaction());
      break;
    }
    case kReapQueue: {
      mutable_reap_queue()->::cockroach::proto::ReapQueueRequest::MergeFrom(from.reap_queue());
      break;
    }
    case kEnqueueUpdate: {
      mutable_enqueue_update()->::cockroach::proto::EnqueueUpdateRequest::MergeFrom(from.enqueue_update());
      break;
    }
    case kEnqueueMessage: {
      mutable_enqueue_message()->::cockroach::proto::EnqueueMessageRequest::MergeFrom(from.enqueue_message());
      break;
    }
    case kBatch: {
      mutable_batch()->::cockroach::proto::BatchRequest::MergeFrom(from.batch());
      break;
    }
    case kInternalRangeLookup: {
      mutable_internal_range_lookup()->::cockroach::proto::InternalRangeLookupRequest::MergeFrom(from.internal_range_lookup());
      break;
    }
    case kInternalHeartbeatTxn: {
      mutable_internal_heartbeat_txn()->::cockroach::proto::InternalHeartbeatTxnRequest::MergeFrom(from.internal_heartbeat_txn());
      break;
    }
    case kInternalPushTxn: {
      mutable_internal_push_txn()->::cockroach::proto::InternalPushTxnRequest::MergeFrom(from.internal_push_txn());
      break;
    }
    case kInternalResolveIntent: {
      mutable_internal_resolve_intent()->::cockroach::proto::InternalResolveIntentRequest::MergeFrom(from.internal_resolve_intent());
      break;
    }
    case kInternalMergeResponse: {
      mutable_internal_merge_response()->::cockroach::proto::InternalMergeRequest::MergeFrom(from.internal_merge_response());
      break;
    }
    case kInternalTruncateLog: {
      mutable_internal_truncate_log()->::cockroach::proto::InternalTruncateLogRequest::MergeFrom(from.internal_truncate_log());
      break;
    }
    case kInternalGc: {
      mutable_internal_gc()->::cockroach::proto::InternalGCRequest::MergeFrom(from.internal_gc());
      break;
    }
    case kInternalLease: {
      mutable_internal_lease()->::cockroach::proto::InternalLeaderLeaseRequest::MergeFrom(from.internal_lease());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalRaftCommandUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRaftCommandUnion::CopyFrom(const InternalRaftCommandUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRaftCommandUnion::IsInitialized() const {

  return true;
}

void InternalRaftCommandUnion::Swap(InternalRaftCommandUnion* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalRaftCommandUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRaftCommandUnion_descriptor_;
  metadata.reflection = InternalRaftCommandUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalRaftCommand::kRaftIdFieldNumber;
const int InternalRaftCommand::kCmdFieldNumber;
#endif  // !_MSC_VER

InternalRaftCommand::InternalRaftCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalRaftCommand)
}

void InternalRaftCommand::InitAsDefaultInstance() {
  cmd_ = const_cast< ::cockroach::proto::InternalRaftCommandUnion*>(&::cockroach::proto::InternalRaftCommandUnion::default_instance());
}

InternalRaftCommand::InternalRaftCommand(const InternalRaftCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalRaftCommand)
}

void InternalRaftCommand::SharedCtor() {
  _cached_size_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalRaftCommand::~InternalRaftCommand() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalRaftCommand)
  SharedDtor();
}

void InternalRaftCommand::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_;
  }
}

void InternalRaftCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalRaftCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalRaftCommand_descriptor_;
}

const InternalRaftCommand& InternalRaftCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalRaftCommand* InternalRaftCommand::default_instance_ = NULL;

InternalRaftCommand* InternalRaftCommand::New() const {
  return new InternalRaftCommand;
}

void InternalRaftCommand::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    raft_id_ = GOOGLE_LONGLONG(0);
    if (has_cmd()) {
      if (cmd_ != NULL) cmd_->::cockroach::proto::InternalRaftCommandUnion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalRaftCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalRaftCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 raft_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalRaftCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalRaftCommand)
  return false;
#undef DO_
}

void InternalRaftCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalRaftCommand)
  // optional int64 raft_id = 2;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->raft_id(), output);
  }

  // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalRaftCommand)
}

::google::protobuf::uint8* InternalRaftCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalRaftCommand)
  // optional int64 raft_id = 2;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->raft_id(), target);
  }

  // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalRaftCommand)
  return target;
}

int InternalRaftCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 raft_id = 2;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

    // optional .cockroach.proto.InternalRaftCommandUnion cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalRaftCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalRaftCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalRaftCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalRaftCommand::MergeFrom(const InternalRaftCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
    if (from.has_cmd()) {
      mutable_cmd()->::cockroach::proto::InternalRaftCommandUnion::MergeFrom(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalRaftCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRaftCommand::CopyFrom(const InternalRaftCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRaftCommand::IsInitialized() const {

  return true;
}

void InternalRaftCommand::Swap(InternalRaftCommand* other) {
  if (other != this) {
    std::swap(raft_id_, other->raft_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalRaftCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalRaftCommand_descriptor_;
  metadata.reflection = InternalRaftCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftMessageRequest::kGroupIdFieldNumber;
const int RaftMessageRequest::kMsgFieldNumber;
#endif  // !_MSC_VER

RaftMessageRequest::RaftMessageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::InitAsDefaultInstance() {
}

RaftMessageRequest::RaftMessageRequest(const RaftMessageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageRequest)
}

void RaftMessageRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  group_id_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageRequest::~RaftMessageRequest() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageRequest)
  SharedDtor();
}

void RaftMessageRequest::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void RaftMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageRequest_descriptor_;
}

const RaftMessageRequest& RaftMessageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageRequest* RaftMessageRequest::default_instance_ = NULL;

RaftMessageRequest* RaftMessageRequest::New() const {
  return new RaftMessageRequest;
}

void RaftMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageRequest)
  return false;
#undef DO_
}

void RaftMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageRequest)
}

::google::protobuf::uint8* RaftMessageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageRequest)
  // optional uint64 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional bytes msg = 2;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageRequest)
  return target;
}

int RaftMessageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional bytes msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftMessageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftMessageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageRequest::MergeFrom(const RaftMessageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageRequest::CopyFrom(const RaftMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageRequest::IsInitialized() const {

  return true;
}

void RaftMessageRequest::Swap(RaftMessageRequest* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftMessageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageRequest_descriptor_;
  metadata.reflection = RaftMessageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RaftMessageResponse::RaftMessageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::InitAsDefaultInstance() {
}

RaftMessageResponse::RaftMessageResponse(const RaftMessageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftMessageResponse)
}

void RaftMessageResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftMessageResponse::~RaftMessageResponse() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftMessageResponse)
  SharedDtor();
}

void RaftMessageResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessageResponse_descriptor_;
}

const RaftMessageResponse& RaftMessageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftMessageResponse* RaftMessageResponse::default_instance_ = NULL;

RaftMessageResponse* RaftMessageResponse::New() const {
  return new RaftMessageResponse;
}

void RaftMessageResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftMessageResponse)
  return false;
#undef DO_
}

void RaftMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftMessageResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftMessageResponse)
}

::google::protobuf::uint8* RaftMessageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftMessageResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftMessageResponse)
  return target;
}

int RaftMessageResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftMessageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftMessageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftMessageResponse::MergeFrom(const RaftMessageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessageResponse::CopyFrom(const RaftMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessageResponse::IsInitialized() const {

  return true;
}

void RaftMessageResponse::Swap(RaftMessageResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftMessageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessageResponse_descriptor_;
  metadata.reflection = RaftMessageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesData::kStartTimestampNanosFieldNumber;
const int InternalTimeSeriesData::kSampleDurationNanosFieldNumber;
const int InternalTimeSeriesData::kSamplesFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesData::InternalTimeSeriesData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::InitAsDefaultInstance() {
}

InternalTimeSeriesData::InternalTimeSeriesData(const InternalTimeSeriesData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::SharedCtor() {
  _cached_size_ = 0;
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesData::~InternalTimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesData)
  SharedDtor();
}

void InternalTimeSeriesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesData_descriptor_;
}

const InternalTimeSeriesData& InternalTimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesData* InternalTimeSeriesData::default_instance_ = NULL;

InternalTimeSeriesData* InternalTimeSeriesData::New() const {
  return new InternalTimeSeriesData;
}

void InternalTimeSeriesData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InternalTimeSeriesData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_timestamp_nanos_, sample_duration_nanos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalTimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_nanos_)));
          set_has_start_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sample_duration_nanos;
        break;
      }

      // optional int64 sample_duration_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_sample_duration_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sample_duration_nanos_)));
          set_has_sample_duration_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples;
        break;
      }

      // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
      case 3: {
        if (tag == 26) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesData)
  return false;
#undef DO_
}

void InternalTimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp_nanos(), output);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sample_duration_nanos(), output);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesData)
}

::google::protobuf::uint8* InternalTimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp_nanos(), target);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sample_duration_nanos(), target);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesData)
  return target;
}

int InternalTimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_timestamp_nanos = 1;
    if (has_start_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp_nanos());
    }

    // optional int64 sample_duration_nanos = 2;
    if (has_sample_duration_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sample_duration_nanos());
    }

  }
  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalTimeSeriesData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalTimeSeriesData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesData::MergeFrom(const InternalTimeSeriesData& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_timestamp_nanos()) {
      set_start_timestamp_nanos(from.start_timestamp_nanos());
    }
    if (from.has_sample_duration_nanos()) {
      set_sample_duration_nanos(from.sample_duration_nanos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalTimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesData::CopyFrom(const InternalTimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesData::IsInitialized() const {

  return true;
}

void InternalTimeSeriesData::Swap(InternalTimeSeriesData* other) {
  if (other != this) {
    std::swap(start_timestamp_nanos_, other->start_timestamp_nanos_);
    std::swap(sample_duration_nanos_, other->sample_duration_nanos_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalTimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesData_descriptor_;
  metadata.reflection = InternalTimeSeriesData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesSample::kOffsetFieldNumber;
const int InternalTimeSeriesSample::kIntCountFieldNumber;
const int InternalTimeSeriesSample::kIntSumFieldNumber;
const int InternalTimeSeriesSample::kIntMaxFieldNumber;
const int InternalTimeSeriesSample::kIntMinFieldNumber;
const int InternalTimeSeriesSample::kFloatCountFieldNumber;
const int InternalTimeSeriesSample::kFloatSumFieldNumber;
const int InternalTimeSeriesSample::kFloatMaxFieldNumber;
const int InternalTimeSeriesSample::kFloatMinFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesSample::InternalTimeSeriesSample()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::InitAsDefaultInstance() {
}

InternalTimeSeriesSample::InternalTimeSeriesSample(const InternalTimeSeriesSample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  int_count_ = 0u;
  int_sum_ = GOOGLE_LONGLONG(0);
  int_max_ = GOOGLE_LONGLONG(0);
  int_min_ = GOOGLE_LONGLONG(0);
  float_count_ = 0u;
  float_sum_ = 0;
  float_max_ = 0;
  float_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesSample::~InternalTimeSeriesSample() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesSample)
  SharedDtor();
}

void InternalTimeSeriesSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesSample_descriptor_;
}

const InternalTimeSeriesSample& InternalTimeSeriesSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesSample* InternalTimeSeriesSample::default_instance_ = NULL;

InternalTimeSeriesSample* InternalTimeSeriesSample::New() const {
  return new InternalTimeSeriesSample;
}

void InternalTimeSeriesSample::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InternalTimeSeriesSample*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(offset_, float_max_);
  }
  float_min_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InternalTimeSeriesSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_int_count;
        break;
      }

      // optional uint32 int_count = 2;
      case 2: {
        if (tag == 16) {
         parse_int_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_count_)));
          set_has_int_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_int_sum;
        break;
      }

      // optional int64 int_sum = 3;
      case 3: {
        if (tag == 24) {
         parse_int_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_sum_)));
          set_has_int_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_int_max;
        break;
      }

      // optional int64 int_max = 4;
      case 4: {
        if (tag == 32) {
         parse_int_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_max_)));
          set_has_int_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_int_min;
        break;
      }

      // optional int64 int_min = 5;
      case 5: {
        if (tag == 40) {
         parse_int_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_min_)));
          set_has_int_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_float_count;
        break;
      }

      // optional uint32 float_count = 6;
      case 6: {
        if (tag == 48) {
         parse_float_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &float_count_)));
          set_has_float_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_float_sum;
        break;
      }

      // optional float float_sum = 7;
      case 7: {
        if (tag == 61) {
         parse_float_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_sum_)));
          set_has_float_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_float_max;
        break;
      }

      // optional float float_max = 8;
      case 8: {
        if (tag == 69) {
         parse_float_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_max_)));
          set_has_float_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_float_min;
        break;
      }

      // optional float float_min = 9;
      case 9: {
        if (tag == 77) {
         parse_float_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_min_)));
          set_has_float_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesSample)
  return false;
#undef DO_
}

void InternalTimeSeriesSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional uint32 int_count = 2;
  if (has_int_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->int_count(), output);
  }

  // optional int64 int_sum = 3;
  if (has_int_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_sum(), output);
  }

  // optional int64 int_max = 4;
  if (has_int_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->int_max(), output);
  }

  // optional int64 int_min = 5;
  if (has_int_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->int_min(), output);
  }

  // optional uint32 float_count = 6;
  if (has_float_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->float_count(), output);
  }

  // optional float float_sum = 7;
  if (has_float_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->float_sum(), output);
  }

  // optional float float_max = 8;
  if (has_float_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->float_max(), output);
  }

  // optional float float_min = 9;
  if (has_float_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->float_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesSample)
}

::google::protobuf::uint8* InternalTimeSeriesSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 int_count = 2;
  if (has_int_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->int_count(), target);
  }

  // optional int64 int_sum = 3;
  if (has_int_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int_sum(), target);
  }

  // optional int64 int_max = 4;
  if (has_int_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->int_max(), target);
  }

  // optional int64 int_min = 5;
  if (has_int_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->int_min(), target);
  }

  // optional uint32 float_count = 6;
  if (has_float_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->float_count(), target);
  }

  // optional float float_sum = 7;
  if (has_float_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->float_sum(), target);
  }

  // optional float float_max = 8;
  if (has_float_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->float_max(), target);
  }

  // optional float float_min = 9;
  if (has_float_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->float_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesSample)
  return target;
}

int InternalTimeSeriesSample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 int_count = 2;
    if (has_int_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_count());
    }

    // optional int64 int_sum = 3;
    if (has_int_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_sum());
    }

    // optional int64 int_max = 4;
    if (has_int_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_max());
    }

    // optional int64 int_min = 5;
    if (has_int_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_min());
    }

    // optional uint32 float_count = 6;
    if (has_float_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->float_count());
    }

    // optional float float_sum = 7;
    if (has_float_sum()) {
      total_size += 1 + 4;
    }

    // optional float float_max = 8;
    if (has_float_max()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float float_min = 9;
    if (has_float_min()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesSample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InternalTimeSeriesSample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InternalTimeSeriesSample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesSample::MergeFrom(const InternalTimeSeriesSample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_int_count()) {
      set_int_count(from.int_count());
    }
    if (from.has_int_sum()) {
      set_int_sum(from.int_sum());
    }
    if (from.has_int_max()) {
      set_int_max(from.int_max());
    }
    if (from.has_int_min()) {
      set_int_min(from.int_min());
    }
    if (from.has_float_count()) {
      set_float_count(from.float_count());
    }
    if (from.has_float_sum()) {
      set_float_sum(from.float_sum());
    }
    if (from.has_float_max()) {
      set_float_max(from.float_max());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_float_min()) {
      set_float_min(from.float_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InternalTimeSeriesSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesSample::CopyFrom(const InternalTimeSeriesSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesSample::IsInitialized() const {

  return true;
}

void InternalTimeSeriesSample::Swap(InternalTimeSeriesSample* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(int_count_, other->int_count_);
    std::swap(int_sum_, other->int_sum_);
    std::swap(int_max_, other->int_max_);
    std::swap(int_min_, other->int_min_);
    std::swap(float_count_, other->float_count_);
    std::swap(float_sum_, other->float_sum_);
    std::swap(float_max_, other->float_max_);
    std::swap(float_min_, other->float_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InternalTimeSeriesSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesSample_descriptor_;
  metadata.reflection = InternalTimeSeriesSample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !_MSC_VER

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftTruncatedState* RaftTruncatedState::default_instance_ = NULL;

RaftTruncatedState* RaftTruncatedState::New() const {
  return new RaftTruncatedState;
}

void RaftTruncatedState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaftTruncatedState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, term_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftTruncatedState)
  return target;
}

int RaftTruncatedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftTruncatedState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftTruncatedState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(term_, other->term_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaftSnapshotData_KeyValue::kKeyFieldNumber;
const int RaftSnapshotData_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::InitAsDefaultInstance() {
}

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue(const RaftSnapshotData_KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData_KeyValue::~RaftSnapshotData_KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData.KeyValue)
  SharedDtor();
}

void RaftSnapshotData_KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RaftSnapshotData_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_KeyValue_descriptor_;
}

const RaftSnapshotData_KeyValue& RaftSnapshotData_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::default_instance_ = NULL;

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::New() const {
  return new RaftSnapshotData_KeyValue;
}

void RaftSnapshotData_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftSnapshotData_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData.KeyValue)
  return false;
#undef DO_
}

void RaftSnapshotData_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData.KeyValue)
}

::google::protobuf::uint8* RaftSnapshotData_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData.KeyValue)
  return target;
}

int RaftSnapshotData_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftSnapshotData_KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftSnapshotData_KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData_KeyValue::MergeFrom(const RaftSnapshotData_KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftSnapshotData_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData_KeyValue::CopyFrom(const RaftSnapshotData_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData_KeyValue::IsInitialized() const {

  return true;
}

void RaftSnapshotData_KeyValue::Swap(RaftSnapshotData_KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftSnapshotData_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_KeyValue_descriptor_;
  metadata.reflection = RaftSnapshotData_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RaftSnapshotData::kKVFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData* RaftSnapshotData::default_instance_ = NULL;

RaftSnapshotData* RaftSnapshotData::New() const {
  return new RaftSnapshotData;
}

void RaftSnapshotData::Clear() {
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 1;
      case 1: {
        if (tag == 10) {
         parse_KV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_KV;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData)
  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 1;
  for (int i = 0; i < this->kv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData)
  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 1;
  for (int i = 0; i < this->kv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData)
  return target;
}

int RaftSnapshotData::ByteSize() const {
  int total_size = 0;

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 1;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaftSnapshotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaftSnapshotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  kv_.MergeFrom(from.kv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other != this) {
    kv_.Swap(&other->kv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
