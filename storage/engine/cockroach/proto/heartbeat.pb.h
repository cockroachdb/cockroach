// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/heartbeat.proto

#ifndef PROTOBUF_cockroach_2fproto_2fheartbeat_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2fheartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/data.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2fheartbeat_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2fheartbeat_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2fheartbeat_2eproto();

class RemoteOffset;
class PingRequest;
class PingResponse;

// ===================================================================

class RemoteOffset : public ::google::protobuf::Message {
 public:
  RemoteOffset();
  virtual ~RemoteOffset();

  RemoteOffset(const RemoteOffset& from);

  inline RemoteOffset& operator=(const RemoteOffset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteOffset& default_instance();

  void Swap(RemoteOffset* other);

  // implements Message ----------------------------------------------

  RemoteOffset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteOffset& from);
  void MergeFrom(const RemoteOffset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int64 offset() const;
  inline void set_offset(::google::protobuf::int64 value);

  // optional int64 error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::google::protobuf::int64 error() const;
  inline void set_error(::google::protobuf::int64 value);

  // optional int64 measured_at = 3;
  inline bool has_measured_at() const;
  inline void clear_measured_at();
  static const int kMeasuredAtFieldNumber = 3;
  inline ::google::protobuf::int64 measured_at() const;
  inline void set_measured_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RemoteOffset)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_measured_at();
  inline void clear_has_measured_at();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int64 error_;
  ::google::protobuf::int64 measured_at_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static RemoteOffset* default_instance_;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  PingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ping = 1;
  inline bool has_ping() const;
  inline void clear_ping();
  static const int kPingFieldNumber = 1;
  inline const ::std::string& ping() const;
  inline void set_ping(const ::std::string& value);
  inline void set_ping(const char* value);
  inline void set_ping(const char* value, size_t size);
  inline ::std::string* mutable_ping();
  inline ::std::string* release_ping();
  inline void set_allocated_ping(::std::string* ping);

  // optional .cockroach.proto.RemoteOffset offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline const ::cockroach::proto::RemoteOffset& offset() const;
  inline ::cockroach::proto::RemoteOffset* mutable_offset();
  inline ::cockroach::proto::RemoteOffset* release_offset();
  inline void set_allocated_offset(::cockroach::proto::RemoteOffset* offset);

  // optional string addr = 3;
  inline bool has_addr() const;
  inline void clear_addr();
  static const int kAddrFieldNumber = 3;
  inline const ::std::string& addr() const;
  inline void set_addr(const ::std::string& value);
  inline void set_addr(const char* value);
  inline void set_addr(const char* value, size_t size);
  inline ::std::string* mutable_addr();
  inline ::std::string* release_addr();
  inline void set_allocated_addr(::std::string* addr);

  // optional .cockroach.proto.Timestamp client_timestamp = 4;
  inline bool has_client_timestamp() const;
  inline void clear_client_timestamp();
  static const int kClientTimestampFieldNumber = 4;
  inline const ::cockroach::proto::Timestamp& client_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_client_timestamp();
  inline ::cockroach::proto::Timestamp* release_client_timestamp();
  inline void set_allocated_client_timestamp(::cockroach::proto::Timestamp* client_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.proto.PingRequest)
 private:
  inline void set_has_ping();
  inline void clear_has_ping();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_client_timestamp();
  inline void clear_has_client_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ping_;
  ::cockroach::proto::RemoteOffset* offset_;
  ::std::string* addr_;
  ::cockroach::proto::Timestamp* client_timestamp_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  void Swap(PingResponse* other);

  // implements Message ----------------------------------------------

  PingResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pong = 1;
  inline bool has_pong() const;
  inline void clear_pong();
  static const int kPongFieldNumber = 1;
  inline const ::std::string& pong() const;
  inline void set_pong(const ::std::string& value);
  inline void set_pong(const char* value);
  inline void set_pong(const char* value, size_t size);
  inline ::std::string* mutable_pong();
  inline ::std::string* release_pong();
  inline void set_allocated_pong(::std::string* pong);

  // optional int64 server_time = 2;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::int64 server_time() const;
  inline void set_server_time(::google::protobuf::int64 value);

  // optional .cockroach.proto.Timestamp server_timestamp = 3;
  inline bool has_server_timestamp() const;
  inline void clear_server_timestamp();
  static const int kServerTimestampFieldNumber = 3;
  inline const ::cockroach::proto::Timestamp& server_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_server_timestamp();
  inline ::cockroach::proto::Timestamp* release_server_timestamp();
  inline void set_allocated_server_timestamp(::cockroach::proto::Timestamp* server_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.proto.PingResponse)
 private:
  inline void set_has_pong();
  inline void clear_has_pong();
  inline void set_has_server_time();
  inline void clear_has_server_time();
  inline void set_has_server_timestamp();
  inline void clear_has_server_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pong_;
  ::google::protobuf::int64 server_time_;
  ::cockroach::proto::Timestamp* server_timestamp_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RemoteOffset

// optional int64 offset = 1;
inline bool RemoteOffset::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteOffset::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteOffset::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteOffset::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::int64 RemoteOffset::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RemoteOffset.offset)
  return offset_;
}
inline void RemoteOffset::set_offset(::google::protobuf::int64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RemoteOffset.offset)
}

// optional int64 error = 2;
inline bool RemoteOffset::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteOffset::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteOffset::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteOffset::clear_error() {
  error_ = GOOGLE_LONGLONG(0);
  clear_has_error();
}
inline ::google::protobuf::int64 RemoteOffset::error() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RemoteOffset.error)
  return error_;
}
inline void RemoteOffset::set_error(::google::protobuf::int64 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RemoteOffset.error)
}

// optional int64 measured_at = 3;
inline bool RemoteOffset::has_measured_at() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteOffset::set_has_measured_at() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteOffset::clear_has_measured_at() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteOffset::clear_measured_at() {
  measured_at_ = GOOGLE_LONGLONG(0);
  clear_has_measured_at();
}
inline ::google::protobuf::int64 RemoteOffset::measured_at() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RemoteOffset.measured_at)
  return measured_at_;
}
inline void RemoteOffset::set_measured_at(::google::protobuf::int64 value) {
  set_has_measured_at();
  measured_at_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RemoteOffset.measured_at)
}

// -------------------------------------------------------------------

// PingRequest

// optional string ping = 1;
inline bool PingRequest::has_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingRequest::set_has_ping() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingRequest::clear_has_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingRequest::clear_ping() {
  if (ping_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ping_->clear();
  }
  clear_has_ping();
}
inline const ::std::string& PingRequest::ping() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingRequest.ping)
  return *ping_;
}
inline void PingRequest::set_ping(const ::std::string& value) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ping_ = new ::std::string;
  }
  ping_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.PingRequest.ping)
}
inline void PingRequest::set_ping(const char* value) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ping_ = new ::std::string;
  }
  ping_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PingRequest.ping)
}
inline void PingRequest::set_ping(const char* value, size_t size) {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ping_ = new ::std::string;
  }
  ping_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PingRequest.ping)
}
inline ::std::string* PingRequest::mutable_ping() {
  set_has_ping();
  if (ping_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ping_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingRequest.ping)
  return ping_;
}
inline ::std::string* PingRequest::release_ping() {
  clear_has_ping();
  if (ping_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ping_;
    ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PingRequest::set_allocated_ping(::std::string* ping) {
  if (ping_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ping_;
  }
  if (ping) {
    set_has_ping();
    ping_ = ping;
  } else {
    clear_has_ping();
    ping_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingRequest.ping)
}

// optional .cockroach.proto.RemoteOffset offset = 2;
inline bool PingRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PingRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PingRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PingRequest::clear_offset() {
  if (offset_ != NULL) offset_->::cockroach::proto::RemoteOffset::Clear();
  clear_has_offset();
}
inline const ::cockroach::proto::RemoteOffset& PingRequest::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingRequest.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
inline ::cockroach::proto::RemoteOffset* PingRequest::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) offset_ = new ::cockroach::proto::RemoteOffset;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingRequest.offset)
  return offset_;
}
inline ::cockroach::proto::RemoteOffset* PingRequest::release_offset() {
  clear_has_offset();
  ::cockroach::proto::RemoteOffset* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline void PingRequest::set_allocated_offset(::cockroach::proto::RemoteOffset* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    set_has_offset();
  } else {
    clear_has_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingRequest.offset)
}

// optional string addr = 3;
inline bool PingRequest::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PingRequest::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PingRequest::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PingRequest::clear_addr() {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& PingRequest::addr() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingRequest.addr)
  return *addr_;
}
inline void PingRequest::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.PingRequest.addr)
}
inline void PingRequest::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PingRequest.addr)
}
inline void PingRequest::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PingRequest.addr)
}
inline ::std::string* PingRequest::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingRequest.addr)
  return addr_;
}
inline ::std::string* PingRequest::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PingRequest::set_allocated_addr(::std::string* addr) {
  if (addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addr_;
  }
  if (addr) {
    set_has_addr();
    addr_ = addr;
  } else {
    clear_has_addr();
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingRequest.addr)
}

// optional .cockroach.proto.Timestamp client_timestamp = 4;
inline bool PingRequest::has_client_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PingRequest::set_has_client_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PingRequest::clear_has_client_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PingRequest::clear_client_timestamp() {
  if (client_timestamp_ != NULL) client_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_client_timestamp();
}
inline const ::cockroach::proto::Timestamp& PingRequest::client_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingRequest.client_timestamp)
  return client_timestamp_ != NULL ? *client_timestamp_ : *default_instance_->client_timestamp_;
}
inline ::cockroach::proto::Timestamp* PingRequest::mutable_client_timestamp() {
  set_has_client_timestamp();
  if (client_timestamp_ == NULL) client_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingRequest.client_timestamp)
  return client_timestamp_;
}
inline ::cockroach::proto::Timestamp* PingRequest::release_client_timestamp() {
  clear_has_client_timestamp();
  ::cockroach::proto::Timestamp* temp = client_timestamp_;
  client_timestamp_ = NULL;
  return temp;
}
inline void PingRequest::set_allocated_client_timestamp(::cockroach::proto::Timestamp* client_timestamp) {
  delete client_timestamp_;
  client_timestamp_ = client_timestamp;
  if (client_timestamp) {
    set_has_client_timestamp();
  } else {
    clear_has_client_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingRequest.client_timestamp)
}

// -------------------------------------------------------------------

// PingResponse

// optional string pong = 1;
inline bool PingResponse::has_pong() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PingResponse::set_has_pong() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PingResponse::clear_has_pong() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PingResponse::clear_pong() {
  if (pong_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pong_->clear();
  }
  clear_has_pong();
}
inline const ::std::string& PingResponse::pong() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingResponse.pong)
  return *pong_;
}
inline void PingResponse::set_pong(const ::std::string& value) {
  set_has_pong();
  if (pong_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pong_ = new ::std::string;
  }
  pong_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.PingResponse.pong)
}
inline void PingResponse::set_pong(const char* value) {
  set_has_pong();
  if (pong_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pong_ = new ::std::string;
  }
  pong_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PingResponse.pong)
}
inline void PingResponse::set_pong(const char* value, size_t size) {
  set_has_pong();
  if (pong_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pong_ = new ::std::string;
  }
  pong_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PingResponse.pong)
}
inline ::std::string* PingResponse::mutable_pong() {
  set_has_pong();
  if (pong_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pong_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingResponse.pong)
  return pong_;
}
inline ::std::string* PingResponse::release_pong() {
  clear_has_pong();
  if (pong_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pong_;
    pong_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PingResponse::set_allocated_pong(::std::string* pong) {
  if (pong_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pong_;
  }
  if (pong) {
    set_has_pong();
    pong_ = pong;
  } else {
    clear_has_pong();
    pong_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingResponse.pong)
}

// optional int64 server_time = 2;
inline bool PingResponse::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PingResponse::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PingResponse::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PingResponse::clear_server_time() {
  server_time_ = GOOGLE_LONGLONG(0);
  clear_has_server_time();
}
inline ::google::protobuf::int64 PingResponse::server_time() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingResponse.server_time)
  return server_time_;
}
inline void PingResponse::set_server_time(::google::protobuf::int64 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.PingResponse.server_time)
}

// optional .cockroach.proto.Timestamp server_timestamp = 3;
inline bool PingResponse::has_server_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PingResponse::set_has_server_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PingResponse::clear_has_server_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PingResponse::clear_server_timestamp() {
  if (server_timestamp_ != NULL) server_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_server_timestamp();
}
inline const ::cockroach::proto::Timestamp& PingResponse::server_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PingResponse.server_timestamp)
  return server_timestamp_ != NULL ? *server_timestamp_ : *default_instance_->server_timestamp_;
}
inline ::cockroach::proto::Timestamp* PingResponse::mutable_server_timestamp() {
  set_has_server_timestamp();
  if (server_timestamp_ == NULL) server_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PingResponse.server_timestamp)
  return server_timestamp_;
}
inline ::cockroach::proto::Timestamp* PingResponse::release_server_timestamp() {
  clear_has_server_timestamp();
  ::cockroach::proto::Timestamp* temp = server_timestamp_;
  server_timestamp_ = NULL;
  return temp;
}
inline void PingResponse::set_allocated_server_timestamp(::cockroach::proto::Timestamp* server_timestamp) {
  delete server_timestamp_;
  server_timestamp_ = server_timestamp;
  if (server_timestamp) {
    set_has_server_timestamp();
  } else {
    clear_has_server_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.PingResponse.server_timestamp)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2fheartbeat_2eproto__INCLUDED
