// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Attributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Replica_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Replica_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcctConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcctConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PermConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PermConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeTreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeTreeNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Addr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Addr_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreCapacity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreCapacity_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreDescriptor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/config.proto");
  GOOGLE_CHECK(file != NULL);
  Attributes_descriptor_ = file->message_type(0);
  static const int Attributes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, attrs_),
  };
  Attributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Attributes_descriptor_,
      Attributes::default_instance_,
      Attributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _has_bits_[0]),
      -1,
      -1,
      sizeof(Attributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _internal_metadata_),
      -1);
  Replica_descriptor_ = file->message_type(1);
  static const int Replica_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, store_id_),
  };
  Replica_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Replica_descriptor_,
      Replica::default_instance_,
      Replica_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _has_bits_[0]),
      -1,
      -1,
      sizeof(Replica),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _internal_metadata_),
      -1);
  RangeDescriptor_descriptor_ = file->message_type(2);
  static const int RangeDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, raft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, replicas_),
  };
  RangeDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeDescriptor_descriptor_,
      RangeDescriptor::default_instance_,
      RangeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _internal_metadata_),
      -1);
  GCPolicy_descriptor_ = file->message_type(3);
  static const int GCPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, ttl_seconds_),
  };
  GCPolicy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCPolicy_descriptor_,
      GCPolicy::default_instance_,
      GCPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, _has_bits_[0]),
      -1,
      -1,
      sizeof(GCPolicy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, _internal_metadata_),
      -1);
  AcctConfig_descriptor_ = file->message_type(4);
  static const int AcctConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, cluster_id_),
  };
  AcctConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AcctConfig_descriptor_,
      AcctConfig::default_instance_,
      AcctConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(AcctConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, _internal_metadata_),
      -1);
  PermConfig_descriptor_ = file->message_type(5);
  static const int PermConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, write_),
  };
  PermConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PermConfig_descriptor_,
      PermConfig::default_instance_,
      PermConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(PermConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, _internal_metadata_),
      -1);
  ZoneConfig_descriptor_ = file->message_type(6);
  static const int ZoneConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, replica_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, range_min_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, range_max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, gc_),
  };
  ZoneConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ZoneConfig_descriptor_,
      ZoneConfig::default_instance_,
      ZoneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ZoneConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, _internal_metadata_),
      -1);
  RangeTree_descriptor_ = file->message_type(7);
  static const int RangeTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, root_key_),
  };
  RangeTree_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeTree_descriptor_,
      RangeTree::default_instance_,
      RangeTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeTree),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, _internal_metadata_),
      -1);
  RangeTreeNode_descriptor_ = file->message_type(8);
  static const int RangeTreeNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, parent_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, left_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, right_key_),
  };
  RangeTreeNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeTreeNode_descriptor_,
      RangeTreeNode::default_instance_,
      RangeTreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeTreeNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, _internal_metadata_),
      -1);
  Addr_descriptor_ = file->message_type(9);
  static const int Addr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addr, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addr, address_),
  };
  Addr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Addr_descriptor_,
      Addr::default_instance_,
      Addr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addr, _has_bits_[0]),
      -1,
      -1,
      sizeof(Addr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addr, _internal_metadata_),
      -1);
  StoreCapacity_descriptor_ = file->message_type(10);
  static const int StoreCapacity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, rangecount_),
  };
  StoreCapacity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreCapacity_descriptor_,
      StoreCapacity::default_instance_,
      StoreCapacity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreCapacity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, _internal_metadata_),
      -1);
  NodeDescriptor_descriptor_ = file->message_type(11);
  static const int NodeDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, attrs_),
  };
  NodeDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDescriptor_descriptor_,
      NodeDescriptor::default_instance_,
      NodeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, _internal_metadata_),
      -1);
  StoreDescriptor_descriptor_ = file->message_type(12);
  static const int StoreDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, capacity_),
  };
  StoreDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreDescriptor_descriptor_,
      StoreDescriptor::default_instance_,
      StoreDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Attributes_descriptor_, &Attributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Replica_descriptor_, &Replica::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeDescriptor_descriptor_, &RangeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCPolicy_descriptor_, &GCPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AcctConfig_descriptor_, &AcctConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PermConfig_descriptor_, &PermConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ZoneConfig_descriptor_, &ZoneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeTree_descriptor_, &RangeTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeTreeNode_descriptor_, &RangeTreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Addr_descriptor_, &Addr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreCapacity_descriptor_, &StoreCapacity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDescriptor_descriptor_, &NodeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreDescriptor_descriptor_, &StoreDescriptor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto() {
  delete Attributes::default_instance_;
  delete Attributes_reflection_;
  delete Replica::default_instance_;
  delete Replica_reflection_;
  delete RangeDescriptor::default_instance_;
  delete RangeDescriptor_reflection_;
  delete GCPolicy::default_instance_;
  delete GCPolicy_reflection_;
  delete AcctConfig::default_instance_;
  delete AcctConfig_reflection_;
  delete PermConfig::default_instance_;
  delete PermConfig_reflection_;
  delete ZoneConfig::default_instance_;
  delete ZoneConfig_reflection_;
  delete RangeTree::default_instance_;
  delete RangeTree_reflection_;
  delete RangeTreeNode::default_instance_;
  delete RangeTreeNode_reflection_;
  delete Addr::default_instance_;
  delete Addr_reflection_;
  delete StoreCapacity::default_instance_;
  delete StoreCapacity_reflection_;
  delete NodeDescriptor::default_instance_;
  delete NodeDescriptor_reflection_;
  delete StoreDescriptor::default_instance_;
  delete StoreDescriptor_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cockroach/proto/config.proto\022\017cockroac"
    "h.proto\032\024gogoproto/gogo.proto\"2\n\nAttribu"
    "tes\022$\n\005attrs\030\001 \003(\tB\025\362\336\037\021yaml:\"attrs,flow"
    "\"\"h\n\007Replica\022)\n\007node_id\030\001 \001(\005B\030\310\336\037\000\342\336\037\006N"
    "odeID\372\336\037\006NodeID\022,\n\010store_id\030\002 \001(\005B\032\310\336\037\000\342"
    "\336\037\007StoreID\372\336\037\007StoreID:\004\230\240\037\000\"\244\001\n\017RangeDes"
    "criptor\022)\n\007raft_id\030\001 \001(\003B\030\310\336\037\000\342\336\037\006RaftID"
    "\372\336\037\006RaftID\022\032\n\tstart_key\030\002 \001(\014B\007\372\336\037\003Key\022\030"
    "\n\007end_key\030\003 \001(\014B\007\372\336\037\003Key\0220\n\010replicas\030\004 \003"
    "(\0132\030.cockroach.proto.ReplicaB\004\310\336\037\000\"3\n\010GC"
    "Policy\022\'\n\013ttl_seconds\030\001 \001(\005B\022\310\336\037\000\342\336\037\nTTL"
    "Seconds\"E\n\nAcctConfig\0227\n\ncluster_id\030\001 \001("
    "\tB#\310\336\037\000\362\336\037\033yaml:\"cluster_id,omitempty\"\"`"
    "\n\nPermConfig\022\'\n\004read\030\001 \003(\tB\031\362\336\037\025yaml:\"re"
    "ad,omitempty\"\022)\n\005write\030\002 \003(\tB\032\362\336\037\026yaml:\""
    "write,omitempty\"\"\257\002\n\nZoneConfig\022U\n\rrepli"
    "ca_attrs\030\001 \003(\0132\033.cockroach.proto.Attribu"
    "tesB!\310\336\037\000\362\336\037\031yaml:\"replicas,omitempty\"\022A"
    "\n\017range_min_bytes\030\002 \001(\003B(\310\336\037\000\362\336\037 yaml:\"r"
    "ange_min_bytes,omitempty\"\022A\n\017range_max_b"
    "ytes\030\003 \001(\003B(\310\336\037\000\362\336\037 yaml:\"range_max_byte"
    "s,omitempty\"\022D\n\002gc\030\004 \001(\0132\031.cockroach.pro"
    "to.GCPolicyB\035\342\336\037\002GC\362\336\037\023yaml:\"gc,omitempt"
    "y\"\"&\n\tRangeTree\022\031\n\010root_key\030\001 \001(\014B\007\372\336\037\003K"
    "ey\"\216\001\n\rRangeTreeNode\022\024\n\003key\030\001 \001(\014B\007\372\336\037\003K"
    "ey\022\023\n\005black\030\002 \001(\010B\004\310\336\037\000\022\033\n\nparent_key\030\003 "
    "\001(\014B\007\372\336\037\003Key\022\031\n\010left_key\030\004 \001(\014B\007\332\336\037\003Key\022"
    "\032\n\tright_key\030\005 \001(\014B\007\332\336\037\003Key\"4\n\004Addr\022\025\n\007n"
    "etwork\030\001 \001(\tB\004\310\336\037\000\022\025\n\007address\030\002 \001(\tB\004\310\336\037"
    "\000\"Z\n\rStoreCapacity\022\026\n\010Capacity\030\001 \001(\003B\004\310\336"
    "\037\000\022\027\n\tAvailable\030\002 \001(\003B\004\310\336\037\000\022\030\n\nRangeCoun"
    "t\030\003 \001(\005B\004\310\336\037\000\"\233\001\n\016NodeDescriptor\022)\n\007node"
    "_id\030\001 \001(\005B\030\310\336\037\000\342\336\037\006NodeID\372\336\037\006NodeID\022,\n\007a"
    "ddress\030\002 \001(\0132\025.cockroach.proto.AddrB\004\310\336\037"
    "\000\0220\n\005attrs\030\003 \001(\0132\033.cockroach.proto.Attri"
    "butesB\004\310\336\037\000\"\336\001\n\017StoreDescriptor\022,\n\010store"
    "_id\030\001 \001(\005B\032\310\336\037\000\342\336\037\007StoreID\372\336\037\007StoreID\0220\n"
    "\005attrs\030\002 \001(\0132\033.cockroach.proto.Attribute"
    "sB\004\310\336\037\000\0223\n\004node\030\003 \001(\0132\037.cockroach.proto."
    "NodeDescriptorB\004\310\336\037\000\0226\n\010capacity\030\004 \001(\0132\036"
    ".cockroach.proto.StoreCapacityB\004\310\336\037\000B\007Z\005"
    "proto", 1645);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/config.proto", &protobuf_RegisterTypes);
  Attributes::default_instance_ = new Attributes();
  Replica::default_instance_ = new Replica();
  RangeDescriptor::default_instance_ = new RangeDescriptor();
  GCPolicy::default_instance_ = new GCPolicy();
  AcctConfig::default_instance_ = new AcctConfig();
  PermConfig::default_instance_ = new PermConfig();
  ZoneConfig::default_instance_ = new ZoneConfig();
  RangeTree::default_instance_ = new RangeTree();
  RangeTreeNode::default_instance_ = new RangeTreeNode();
  Addr::default_instance_ = new Addr();
  StoreCapacity::default_instance_ = new StoreCapacity();
  NodeDescriptor::default_instance_ = new NodeDescriptor();
  StoreDescriptor::default_instance_ = new StoreDescriptor();
  Attributes::default_instance_->InitAsDefaultInstance();
  Replica::default_instance_->InitAsDefaultInstance();
  RangeDescriptor::default_instance_->InitAsDefaultInstance();
  GCPolicy::default_instance_->InitAsDefaultInstance();
  AcctConfig::default_instance_->InitAsDefaultInstance();
  PermConfig::default_instance_->InitAsDefaultInstance();
  ZoneConfig::default_instance_->InitAsDefaultInstance();
  RangeTree::default_instance_->InitAsDefaultInstance();
  RangeTreeNode::default_instance_->InitAsDefaultInstance();
  Addr::default_instance_->InitAsDefaultInstance();
  StoreCapacity::default_instance_->InitAsDefaultInstance();
  NodeDescriptor::default_instance_->InitAsDefaultInstance();
  StoreDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2fconfig_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2fconfig_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2fconfig_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Attributes::kAttrsFieldNumber;
#endif  // !_MSC_VER

Attributes::Attributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Attributes)
}

void Attributes::InitAsDefaultInstance() {
}

Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Attributes)
}

void Attributes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attributes_descriptor_;
}

const Attributes& Attributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

Attributes* Attributes::default_instance_ = NULL;

Attributes* Attributes::New(::google::protobuf::Arena* arena) const {
  Attributes* n = new Attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attributes::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrs(this->attrs_size() - 1).data(),
            this->attrs(this->attrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.Attributes.attrs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->attrs(i).data(), this->attrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cockroach.proto.Attributes.attrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Attributes)
}

::google::protobuf::uint8* Attributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrs(i).data(), this->attrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.Attributes.attrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->attrs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Attributes)
  return target;
}

int Attributes::ByteSize() const {
  int total_size = 0;

  // repeated string attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Attributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Attributes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attributes::MergeFrom(const Attributes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  attrs_.MergeFrom(from.attrs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Attributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attributes::CopyFrom(const Attributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {

  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attributes::InternalSwap(Attributes* other) {
  attrs_.UnsafeArenaSwap(&other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attributes_descriptor_;
  metadata.reflection = Attributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attributes

// repeated string attrs = 1;
int Attributes::attrs_size() const {
  return attrs_.size();
}
void Attributes::clear_attrs() {
  attrs_.Clear();
}
 const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Attributes.attrs)
  return attrs_.Get(index);
}
 ::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Attributes.attrs)
  return attrs_.Mutable(index);
}
 void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
 void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Attributes.attrs)
}
 void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Attributes.attrs)
}
 ::std::string* Attributes::add_attrs() {
  return attrs_.Add();
}
 void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.Attributes.attrs)
}
 void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.Attributes.attrs)
}
 void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.Attributes.attrs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.Attributes.attrs)
  return attrs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.Attributes.attrs)
  return &attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Replica::kNodeIdFieldNumber;
const int Replica::kStoreIdFieldNumber;
#endif  // !_MSC_VER

Replica::Replica()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Replica)
}

void Replica::InitAsDefaultInstance() {
}

Replica::Replica(const Replica& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Replica)
}

void Replica::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Replica::~Replica() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Replica)
  SharedDtor();
}

void Replica::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Replica::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replica::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Replica_descriptor_;
}

const Replica& Replica::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

Replica* Replica::default_instance_ = NULL;

Replica* Replica::New(::google::protobuf::Arena* arena) const {
  Replica* n = new Replica;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Replica::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Replica*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, store_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Replica::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Replica)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Replica)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Replica)
  return false;
#undef DO_
}

void Replica::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Replica)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Replica)
}

::google::protobuf::uint8* Replica::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Replica)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Replica)
  return target;
}

int Replica::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replica::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Replica* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Replica>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Replica::MergeFrom(const Replica& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Replica::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replica::CopyFrom(const Replica& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replica::IsInitialized() const {

  return true;
}

void Replica::Swap(Replica* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Replica::InternalSwap(Replica* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Replica::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Replica_descriptor_;
  metadata.reflection = Replica_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Replica

// optional int32 node_id = 1;
bool Replica::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Replica::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Replica::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Replica::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 Replica::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Replica.node_id)
  return node_id_;
}
 void Replica::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Replica.node_id)
}

// optional int32 store_id = 2;
bool Replica::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Replica::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Replica::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Replica::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 Replica::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Replica.store_id)
  return store_id_;
}
 void Replica::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Replica.store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RangeDescriptor::kRaftIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
#endif  // !_MSC_VER

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeDescriptor)
}

void RangeDescriptor::InitAsDefaultInstance() {
}

RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RangeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeDescriptor_descriptor_;
}

const RangeDescriptor& RangeDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeDescriptor* RangeDescriptor::default_instance_ = NULL;

RangeDescriptor* RangeDescriptor::New(::google::protobuf::Arena* arena) const {
  RangeDescriptor* n = new RangeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    raft_id_ = GOOGLE_LONGLONG(0);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 raft_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replicas;
        break;
      }

      // repeated .cockroach.proto.Replica replicas = 4;
      case 4: {
        if (tag == 34) {
         parse_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeDescriptor)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->raft_id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // repeated .cockroach.proto.Replica replicas = 4;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->replicas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeDescriptor)
}

::google::protobuf::uint8* RangeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeDescriptor)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->raft_id(), target);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // repeated .cockroach.proto.Replica replicas = 4;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->replicas(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeDescriptor)
  return target;
}

int RangeDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 raft_id = 1;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  // repeated .cockroach.proto.Replica replicas = 4;
  total_size += 1 * this->replicas_size();
  for (int i = 0; i < this->replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replicas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  replicas_.MergeFrom(from.replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {

  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  std::swap(raft_id_, other->raft_id_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeDescriptor_descriptor_;
  metadata.reflection = RangeDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeDescriptor

// optional int64 raft_id = 1;
bool RangeDescriptor::has_raft_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeDescriptor::set_has_raft_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeDescriptor::clear_has_raft_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeDescriptor::clear_raft_id() {
  raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_raft_id();
}
 ::google::protobuf::int64 RangeDescriptor::raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.raft_id)
  return raft_id_;
}
 void RangeDescriptor::set_raft_id(::google::protobuf::int64 value) {
  set_has_raft_id();
  raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.raft_id)
}

// optional bytes start_key = 2;
bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
 const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.start_key)
}
 void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeDescriptor.start_key)
}
 void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeDescriptor.start_key)
}
 ::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeDescriptor::release_start_key() {
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
 const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeDescriptor.end_key)
}
 void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeDescriptor.end_key)
}
 void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeDescriptor.end_key)
}
 ::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeDescriptor::release_end_key() {
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeDescriptor.end_key)
}

// repeated .cockroach.proto.Replica replicas = 4;
int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
 const ::cockroach::proto::Replica& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
 ::cockroach::proto::Replica* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
 ::cockroach::proto::Replica* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RangeDescriptor.replicas)
  return replicas_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RangeDescriptor.replicas)
  return replicas_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RangeDescriptor.replicas)
  return &replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GCPolicy::kTtlSecondsFieldNumber;
#endif  // !_MSC_VER

GCPolicy::GCPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.GCPolicy)
}

void GCPolicy::InitAsDefaultInstance() {
}

GCPolicy::GCPolicy(const GCPolicy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.GCPolicy)
}

void GCPolicy::SharedCtor() {
  _cached_size_ = 0;
  ttl_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPolicy::~GCPolicy() {
  // @@protoc_insertion_point(destructor:cockroach.proto.GCPolicy)
  SharedDtor();
}

void GCPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPolicy_descriptor_;
}

const GCPolicy& GCPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

GCPolicy* GCPolicy::default_instance_ = NULL;

GCPolicy* GCPolicy::New(::google::protobuf::Arena* arena) const {
  GCPolicy* n = new GCPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCPolicy::Clear() {
  ttl_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GCPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.GCPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ttl_seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_seconds_)));
          set_has_ttl_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.GCPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.GCPolicy)
  return false;
#undef DO_
}

void GCPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.GCPolicy)
  // optional int32 ttl_seconds = 1;
  if (has_ttl_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ttl_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.GCPolicy)
}

::google::protobuf::uint8* GCPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.GCPolicy)
  // optional int32 ttl_seconds = 1;
  if (has_ttl_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ttl_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.GCPolicy)
  return target;
}

int GCPolicy::ByteSize() const {
  int total_size = 0;

  // optional int32 ttl_seconds = 1;
  if (has_ttl_seconds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ttl_seconds());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GCPolicy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GCPolicy>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPolicy::MergeFrom(const GCPolicy& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ttl_seconds()) {
      set_ttl_seconds(from.ttl_seconds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GCPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPolicy::CopyFrom(const GCPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPolicy::IsInitialized() const {

  return true;
}

void GCPolicy::Swap(GCPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCPolicy::InternalSwap(GCPolicy* other) {
  std::swap(ttl_seconds_, other->ttl_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPolicy_descriptor_;
  metadata.reflection = GCPolicy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCPolicy

// optional int32 ttl_seconds = 1;
bool GCPolicy::has_ttl_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GCPolicy::set_has_ttl_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
void GCPolicy::clear_has_ttl_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void GCPolicy::clear_ttl_seconds() {
  ttl_seconds_ = 0;
  clear_has_ttl_seconds();
}
 ::google::protobuf::int32 GCPolicy::ttl_seconds() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GCPolicy.ttl_seconds)
  return ttl_seconds_;
}
 void GCPolicy::set_ttl_seconds(::google::protobuf::int32 value) {
  set_has_ttl_seconds();
  ttl_seconds_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GCPolicy.ttl_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AcctConfig::kClusterIdFieldNumber;
#endif  // !_MSC_VER

AcctConfig::AcctConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.AcctConfig)
}

void AcctConfig::InitAsDefaultInstance() {
}

AcctConfig::AcctConfig(const AcctConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.AcctConfig)
}

void AcctConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcctConfig::~AcctConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.AcctConfig)
  SharedDtor();
}

void AcctConfig::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AcctConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcctConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcctConfig_descriptor_;
}

const AcctConfig& AcctConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

AcctConfig* AcctConfig::default_instance_ = NULL;

AcctConfig* AcctConfig::New(::google::protobuf::Arena* arena) const {
  AcctConfig* n = new AcctConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcctConfig::Clear() {
  if (has_cluster_id()) {
    cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AcctConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.AcctConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.AcctConfig.cluster_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.AcctConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.AcctConfig)
  return false;
#undef DO_
}

void AcctConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.AcctConfig)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.AcctConfig.cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.AcctConfig)
}

::google::protobuf::uint8* AcctConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.AcctConfig)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.AcctConfig.cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.AcctConfig)
  return target;
}

int AcctConfig::ByteSize() const {
  int total_size = 0;

  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcctConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AcctConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AcctConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcctConfig::MergeFrom(const AcctConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_has_cluster_id();
      cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AcctConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcctConfig::CopyFrom(const AcctConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcctConfig::IsInitialized() const {

  return true;
}

void AcctConfig::Swap(AcctConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcctConfig::InternalSwap(AcctConfig* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcctConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcctConfig_descriptor_;
  metadata.reflection = AcctConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcctConfig

// optional string cluster_id = 1;
bool AcctConfig::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AcctConfig::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AcctConfig::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AcctConfig::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_id();
}
 const ::std::string& AcctConfig::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.AcctConfig.cluster_id)
  return cluster_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AcctConfig::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.AcctConfig.cluster_id)
}
 void AcctConfig::set_cluster_id(const char* value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.AcctConfig.cluster_id)
}
 void AcctConfig::set_cluster_id(const char* value, size_t size) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.AcctConfig.cluster_id)
}
 ::std::string* AcctConfig::mutable_cluster_id() {
  set_has_cluster_id();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.AcctConfig.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AcctConfig::release_cluster_id() {
  clear_has_cluster_id();
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AcctConfig::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    set_has_cluster_id();
  } else {
    clear_has_cluster_id();
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.AcctConfig.cluster_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PermConfig::kReadFieldNumber;
const int PermConfig::kWriteFieldNumber;
#endif  // !_MSC_VER

PermConfig::PermConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.PermConfig)
}

void PermConfig::InitAsDefaultInstance() {
}

PermConfig::PermConfig(const PermConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.PermConfig)
}

void PermConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermConfig::~PermConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.PermConfig)
  SharedDtor();
}

void PermConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PermConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermConfig_descriptor_;
}

const PermConfig& PermConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

PermConfig* PermConfig::default_instance_ = NULL;

PermConfig* PermConfig::New(::google::protobuf::Arena* arena) const {
  PermConfig* n = new PermConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PermConfig::Clear() {
  read_.Clear();
  write_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PermConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.PermConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string read = 1;
      case 1: {
        if (tag == 10) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->read(this->read_size() - 1).data(),
            this->read(this->read_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.PermConfig.read");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_read;
        if (input->ExpectTag(18)) goto parse_write;
        break;
      }

      // repeated string write = 2;
      case 2: {
        if (tag == 18) {
         parse_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_write()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->write(this->write_size() - 1).data(),
            this->write(this->write_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.PermConfig.write");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_write;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.PermConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.PermConfig)
  return false;
#undef DO_
}

void PermConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.PermConfig)
  // repeated string read = 1;
  for (int i = 0; i < this->read_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->read(i).data(), this->read(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cockroach.proto.PermConfig.read");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->read(i), output);
  }

  // repeated string write = 2;
  for (int i = 0; i < this->write_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->write(i).data(), this->write(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cockroach.proto.PermConfig.write");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->write(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.PermConfig)
}

::google::protobuf::uint8* PermConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.PermConfig)
  // repeated string read = 1;
  for (int i = 0; i < this->read_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->read(i).data(), this->read(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.PermConfig.read");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->read(i), target);
  }

  // repeated string write = 2;
  for (int i = 0; i < this->write_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->write(i).data(), this->write(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.PermConfig.write");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->write(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.PermConfig)
  return target;
}

int PermConfig::ByteSize() const {
  int total_size = 0;

  // repeated string read = 1;
  total_size += 1 * this->read_size();
  for (int i = 0; i < this->read_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read(i));
  }

  // repeated string write = 2;
  total_size += 1 * this->write_size();
  for (int i = 0; i < this->write_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->write(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PermConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PermConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PermConfig::MergeFrom(const PermConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  read_.MergeFrom(from.read_);
  write_.MergeFrom(from.write_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PermConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermConfig::CopyFrom(const PermConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermConfig::IsInitialized() const {

  return true;
}

void PermConfig::Swap(PermConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PermConfig::InternalSwap(PermConfig* other) {
  read_.UnsafeArenaSwap(&other->read_);
  write_.UnsafeArenaSwap(&other->write_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PermConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PermConfig_descriptor_;
  metadata.reflection = PermConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PermConfig

// repeated string read = 1;
int PermConfig::read_size() const {
  return read_.size();
}
void PermConfig::clear_read() {
  read_.Clear();
}
 const ::std::string& PermConfig::read(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PermConfig.read)
  return read_.Get(index);
}
 ::std::string* PermConfig::mutable_read(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PermConfig.read)
  return read_.Mutable(index);
}
 void PermConfig::set_read(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.PermConfig.read)
  read_.Mutable(index)->assign(value);
}
 void PermConfig::set_read(int index, const char* value) {
  read_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PermConfig.read)
}
 void PermConfig::set_read(int index, const char* value, size_t size) {
  read_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PermConfig.read)
}
 ::std::string* PermConfig::add_read() {
  return read_.Add();
}
 void PermConfig::add_read(const ::std::string& value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.PermConfig.read)
}
 void PermConfig::add_read(const char* value) {
  read_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.PermConfig.read)
}
 void PermConfig::add_read(const char* value, size_t size) {
  read_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.PermConfig.read)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::read() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.PermConfig.read)
  return read_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_read() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.PermConfig.read)
  return &read_;
}

// repeated string write = 2;
int PermConfig::write_size() const {
  return write_.size();
}
void PermConfig::clear_write() {
  write_.Clear();
}
 const ::std::string& PermConfig::write(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.PermConfig.write)
  return write_.Get(index);
}
 ::std::string* PermConfig::mutable_write(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.PermConfig.write)
  return write_.Mutable(index);
}
 void PermConfig::set_write(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.PermConfig.write)
  write_.Mutable(index)->assign(value);
}
 void PermConfig::set_write(int index, const char* value) {
  write_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.PermConfig.write)
}
 void PermConfig::set_write(int index, const char* value, size_t size) {
  write_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.PermConfig.write)
}
 ::std::string* PermConfig::add_write() {
  return write_.Add();
}
 void PermConfig::add_write(const ::std::string& value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.PermConfig.write)
}
 void PermConfig::add_write(const char* value) {
  write_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.PermConfig.write)
}
 void PermConfig::add_write(const char* value, size_t size) {
  write_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.PermConfig.write)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
PermConfig::write() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.PermConfig.write)
  return write_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
PermConfig::mutable_write() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.PermConfig.write)
  return &write_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ZoneConfig::kReplicaAttrsFieldNumber;
const int ZoneConfig::kRangeMinBytesFieldNumber;
const int ZoneConfig::kRangeMaxBytesFieldNumber;
const int ZoneConfig::kGcFieldNumber;
#endif  // !_MSC_VER

ZoneConfig::ZoneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ZoneConfig)
}

void ZoneConfig::InitAsDefaultInstance() {
  gc_ = const_cast< ::cockroach::proto::GCPolicy*>(&::cockroach::proto::GCPolicy::default_instance());
}

ZoneConfig::ZoneConfig(const ZoneConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ZoneConfig)
}

void ZoneConfig::SharedCtor() {
  _cached_size_ = 0;
  range_min_bytes_ = GOOGLE_LONGLONG(0);
  range_max_bytes_ = GOOGLE_LONGLONG(0);
  gc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneConfig::~ZoneConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ZoneConfig)
  SharedDtor();
}

void ZoneConfig::SharedDtor() {
  if (this != default_instance_) {
    delete gc_;
  }
}

void ZoneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneConfig_descriptor_;
}

const ZoneConfig& ZoneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

ZoneConfig* ZoneConfig::default_instance_ = NULL;

ZoneConfig* ZoneConfig::New(::google::protobuf::Arena* arena) const {
  ZoneConfig* n = new ZoneConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ZoneConfig::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ZoneConfig*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 14u) {
    ZR_(range_min_bytes_, range_max_bytes_);
    if (has_gc()) {
      if (gc_ != NULL) gc_->::cockroach::proto::GCPolicy::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  replica_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ZoneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ZoneConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.proto.Attributes replica_attrs = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_replica_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replica_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_replica_attrs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_range_min_bytes;
        break;
      }

      // optional int64 range_min_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_range_min_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_min_bytes_)));
          set_has_range_min_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range_max_bytes;
        break;
      }

      // optional int64 range_max_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_range_max_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_max_bytes_)));
          set_has_range_max_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gc;
        break;
      }

      // optional .cockroach.proto.GCPolicy gc = 4;
      case 4: {
        if (tag == 34) {
         parse_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ZoneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ZoneConfig)
  return false;
#undef DO_
}

void ZoneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ZoneConfig)
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  for (unsigned int i = 0, n = this->replica_attrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->replica_attrs(i), output);
  }

  // optional int64 range_min_bytes = 2;
  if (has_range_min_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->range_min_bytes(), output);
  }

  // optional int64 range_max_bytes = 3;
  if (has_range_max_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_max_bytes(), output);
  }

  // optional .cockroach.proto.GCPolicy gc = 4;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ZoneConfig)
}

::google::protobuf::uint8* ZoneConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ZoneConfig)
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  for (unsigned int i = 0, n = this->replica_attrs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->replica_attrs(i), target);
  }

  // optional int64 range_min_bytes = 2;
  if (has_range_min_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->range_min_bytes(), target);
  }

  // optional int64 range_max_bytes = 3;
  if (has_range_max_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->range_max_bytes(), target);
  }

  // optional .cockroach.proto.GCPolicy gc = 4;
  if (has_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->gc_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ZoneConfig)
  return target;
}

int ZoneConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & 14) {
    // optional int64 range_min_bytes = 2;
    if (has_range_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_min_bytes());
    }

    // optional int64 range_max_bytes = 3;
    if (has_range_max_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_max_bytes());
    }

    // optional .cockroach.proto.GCPolicy gc = 4;
    if (has_gc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gc_);
    }

  }
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  total_size += 1 * this->replica_attrs_size();
  for (int i = 0; i < this->replica_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replica_attrs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneConfig::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ZoneConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ZoneConfig>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneConfig::MergeFrom(const ZoneConfig& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  replica_attrs_.MergeFrom(from.replica_attrs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_range_min_bytes()) {
      set_range_min_bytes(from.range_min_bytes());
    }
    if (from.has_range_max_bytes()) {
      set_range_max_bytes(from.range_max_bytes());
    }
    if (from.has_gc()) {
      mutable_gc()->::cockroach::proto::GCPolicy::MergeFrom(from.gc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ZoneConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneConfig::CopyFrom(const ZoneConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneConfig::IsInitialized() const {

  return true;
}

void ZoneConfig::Swap(ZoneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZoneConfig::InternalSwap(ZoneConfig* other) {
  replica_attrs_.UnsafeArenaSwap(&other->replica_attrs_);
  std::swap(range_min_bytes_, other->range_min_bytes_);
  std::swap(range_max_bytes_, other->range_max_bytes_);
  std::swap(gc_, other->gc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ZoneConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneConfig_descriptor_;
  metadata.reflection = ZoneConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ZoneConfig

// repeated .cockroach.proto.Attributes replica_attrs = 1;
int ZoneConfig::replica_attrs_size() const {
  return replica_attrs_.size();
}
void ZoneConfig::clear_replica_attrs() {
  replica_attrs_.Clear();
}
 const ::cockroach::proto::Attributes& ZoneConfig::replica_attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Get(index);
}
 ::cockroach::proto::Attributes* ZoneConfig::mutable_replica_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Mutable(index);
}
 ::cockroach::proto::Attributes* ZoneConfig::add_replica_attrs() {
  // @@protoc_insertion_point(field_add:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >&
ZoneConfig::replica_attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.ZoneConfig.replica_attrs)
  return replica_attrs_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Attributes >*
ZoneConfig::mutable_replica_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.ZoneConfig.replica_attrs)
  return &replica_attrs_;
}

// optional int64 range_min_bytes = 2;
bool ZoneConfig::has_range_min_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ZoneConfig::set_has_range_min_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void ZoneConfig::clear_has_range_min_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void ZoneConfig::clear_range_min_bytes() {
  range_min_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_min_bytes();
}
 ::google::protobuf::int64 ZoneConfig::range_min_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.range_min_bytes)
  return range_min_bytes_;
}
 void ZoneConfig::set_range_min_bytes(::google::protobuf::int64 value) {
  set_has_range_min_bytes();
  range_min_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ZoneConfig.range_min_bytes)
}

// optional int64 range_max_bytes = 3;
bool ZoneConfig::has_range_max_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ZoneConfig::set_has_range_max_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void ZoneConfig::clear_has_range_max_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void ZoneConfig::clear_range_max_bytes() {
  range_max_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_range_max_bytes();
}
 ::google::protobuf::int64 ZoneConfig::range_max_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.range_max_bytes)
  return range_max_bytes_;
}
 void ZoneConfig::set_range_max_bytes(::google::protobuf::int64 value) {
  set_has_range_max_bytes();
  range_max_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ZoneConfig.range_max_bytes)
}

// optional .cockroach.proto.GCPolicy gc = 4;
bool ZoneConfig::has_gc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ZoneConfig::set_has_gc() {
  _has_bits_[0] |= 0x00000008u;
}
void ZoneConfig::clear_has_gc() {
  _has_bits_[0] &= ~0x00000008u;
}
void ZoneConfig::clear_gc() {
  if (gc_ != NULL) gc_->::cockroach::proto::GCPolicy::Clear();
  clear_has_gc();
}
 const ::cockroach::proto::GCPolicy& ZoneConfig::gc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ZoneConfig.gc)
  return gc_ != NULL ? *gc_ : *default_instance_->gc_;
}
 ::cockroach::proto::GCPolicy* ZoneConfig::mutable_gc() {
  set_has_gc();
  if (gc_ == NULL) {
    gc_ = new ::cockroach::proto::GCPolicy;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ZoneConfig.gc)
  return gc_;
}
 ::cockroach::proto::GCPolicy* ZoneConfig::release_gc() {
  clear_has_gc();
  ::cockroach::proto::GCPolicy* temp = gc_;
  gc_ = NULL;
  return temp;
}
 void ZoneConfig::set_allocated_gc(::cockroach::proto::GCPolicy* gc) {
  delete gc_;
  gc_ = gc;
  if (gc) {
    set_has_gc();
  } else {
    clear_has_gc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.ZoneConfig.gc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RangeTree::kRootKeyFieldNumber;
#endif  // !_MSC_VER

RangeTree::RangeTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeTree)
}

void RangeTree::InitAsDefaultInstance() {
}

RangeTree::RangeTree(const RangeTree& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeTree)
}

void RangeTree::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  root_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeTree::~RangeTree() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeTree)
  SharedDtor();
}

void RangeTree::SharedDtor() {
  root_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RangeTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeTree_descriptor_;
}

const RangeTree& RangeTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeTree* RangeTree::default_instance_ = NULL;

RangeTree* RangeTree::New(::google::protobuf::Arena* arena) const {
  RangeTree* n = new RangeTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeTree::Clear() {
  if (has_root_key()) {
    root_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes root_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeTree)
  return false;
#undef DO_
}

void RangeTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeTree)
  // optional bytes root_key = 1;
  if (has_root_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->root_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeTree)
}

::google::protobuf::uint8* RangeTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeTree)
  // optional bytes root_key = 1;
  if (has_root_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->root_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeTree)
  return target;
}

int RangeTree::ByteSize() const {
  int total_size = 0;

  // optional bytes root_key = 1;
  if (has_root_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->root_key());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeTree::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeTree* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeTree>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeTree::MergeFrom(const RangeTree& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_key()) {
      set_has_root_key();
      root_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeTree::CopyFrom(const RangeTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeTree::IsInitialized() const {

  return true;
}

void RangeTree::Swap(RangeTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeTree::InternalSwap(RangeTree* other) {
  root_key_.Swap(&other->root_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeTree_descriptor_;
  metadata.reflection = RangeTree_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeTree

// optional bytes root_key = 1;
bool RangeTree::has_root_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeTree::set_has_root_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeTree::clear_has_root_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeTree::clear_root_key() {
  root_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_key();
}
 const ::std::string& RangeTree::root_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTree.root_key)
  return root_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTree::set_root_key(const ::std::string& value) {
  set_has_root_key();
  root_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTree.root_key)
}
 void RangeTree::set_root_key(const char* value) {
  set_has_root_key();
  root_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTree.root_key)
}
 void RangeTree::set_root_key(const void* value, size_t size) {
  set_has_root_key();
  root_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTree.root_key)
}
 ::std::string* RangeTree::mutable_root_key() {
  set_has_root_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTree.root_key)
  return root_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeTree::release_root_key() {
  clear_has_root_key();
  return root_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTree::set_allocated_root_key(::std::string* root_key) {
  if (root_key != NULL) {
    set_has_root_key();
  } else {
    clear_has_root_key();
  }
  root_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTree.root_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RangeTreeNode::kKeyFieldNumber;
const int RangeTreeNode::kBlackFieldNumber;
const int RangeTreeNode::kParentKeyFieldNumber;
const int RangeTreeNode::kLeftKeyFieldNumber;
const int RangeTreeNode::kRightKeyFieldNumber;
#endif  // !_MSC_VER

RangeTreeNode::RangeTreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeTreeNode)
}

void RangeTreeNode::InitAsDefaultInstance() {
}

RangeTreeNode::RangeTreeNode(const RangeTreeNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeTreeNode)
}

void RangeTreeNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_ = false;
  parent_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeTreeNode::~RangeTreeNode() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeTreeNode)
  SharedDtor();
}

void RangeTreeNode::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RangeTreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeTreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeTreeNode_descriptor_;
}

const RangeTreeNode& RangeTreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeTreeNode* RangeTreeNode::default_instance_ = NULL;

RangeTreeNode* RangeTreeNode::New(::google::protobuf::Arena* arena) const {
  RangeTreeNode* n = new RangeTreeNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeTreeNode::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    black_ = false;
    if (has_parent_key()) {
      parent_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_left_key()) {
      left_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_right_key()) {
      right_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeTreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeTreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_black;
        break;
      }

      // optional bool black = 2;
      case 2: {
        if (tag == 16) {
         parse_black:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &black_)));
          set_has_black();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_key;
        break;
      }

      // optional bytes parent_key = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_left_key;
        break;
      }

      // optional bytes left_key = 4;
      case 4: {
        if (tag == 34) {
         parse_left_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_left_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_right_key;
        break;
      }

      // optional bytes right_key = 5;
      case 5: {
        if (tag == 42) {
         parse_right_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_right_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeTreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeTreeNode)
  return false;
#undef DO_
}

void RangeTreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeTreeNode)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bool black = 2;
  if (has_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->black(), output);
  }

  // optional bytes parent_key = 3;
  if (has_parent_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->parent_key(), output);
  }

  // optional bytes left_key = 4;
  if (has_left_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->left_key(), output);
  }

  // optional bytes right_key = 5;
  if (has_right_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->right_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeTreeNode)
}

::google::protobuf::uint8* RangeTreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeTreeNode)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bool black = 2;
  if (has_black()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->black(), target);
  }

  // optional bytes parent_key = 3;
  if (has_parent_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->parent_key(), target);
  }

  // optional bytes left_key = 4;
  if (has_left_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->left_key(), target);
  }

  // optional bytes right_key = 5;
  if (has_right_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->right_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeTreeNode)
  return target;
}

int RangeTreeNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bool black = 2;
    if (has_black()) {
      total_size += 1 + 1;
    }

    // optional bytes parent_key = 3;
    if (has_parent_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parent_key());
    }

    // optional bytes left_key = 4;
    if (has_left_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->left_key());
    }

    // optional bytes right_key = 5;
    if (has_right_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->right_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeTreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeTreeNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeTreeNode>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeTreeNode::MergeFrom(const RangeTreeNode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_black()) {
      set_black(from.black());
    }
    if (from.has_parent_key()) {
      set_has_parent_key();
      parent_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_key_);
    }
    if (from.has_left_key()) {
      set_has_left_key();
      left_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_key_);
    }
    if (from.has_right_key()) {
      set_has_right_key();
      right_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeTreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeTreeNode::CopyFrom(const RangeTreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeTreeNode::IsInitialized() const {

  return true;
}

void RangeTreeNode::Swap(RangeTreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeTreeNode::InternalSwap(RangeTreeNode* other) {
  key_.Swap(&other->key_);
  std::swap(black_, other->black_);
  parent_key_.Swap(&other->parent_key_);
  left_key_.Swap(&other->left_key_);
  right_key_.Swap(&other->right_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeTreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeTreeNode_descriptor_;
  metadata.reflection = RangeTreeNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeTreeNode

// optional bytes key = 1;
bool RangeTreeNode::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeTreeNode::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeTreeNode::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeTreeNode::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& RangeTreeNode::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.key)
}
 void RangeTreeNode::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.key)
}
 void RangeTreeNode::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.key)
}
 ::std::string* RangeTreeNode::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeTreeNode::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.key)
}

// optional bool black = 2;
bool RangeTreeNode::has_black() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeTreeNode::set_has_black() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeTreeNode::clear_has_black() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeTreeNode::clear_black() {
  black_ = false;
  clear_has_black();
}
 bool RangeTreeNode::black() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.black)
  return black_;
}
 void RangeTreeNode::set_black(bool value) {
  set_has_black();
  black_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.black)
}

// optional bytes parent_key = 3;
bool RangeTreeNode::has_parent_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeTreeNode::set_has_parent_key() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeTreeNode::clear_has_parent_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeTreeNode::clear_parent_key() {
  parent_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_key();
}
 const ::std::string& RangeTreeNode::parent_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.parent_key)
  return parent_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_parent_key(const ::std::string& value) {
  set_has_parent_key();
  parent_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.parent_key)
}
 void RangeTreeNode::set_parent_key(const char* value) {
  set_has_parent_key();
  parent_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.parent_key)
}
 void RangeTreeNode::set_parent_key(const void* value, size_t size) {
  set_has_parent_key();
  parent_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.parent_key)
}
 ::std::string* RangeTreeNode::mutable_parent_key() {
  set_has_parent_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.parent_key)
  return parent_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeTreeNode::release_parent_key() {
  clear_has_parent_key();
  return parent_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_allocated_parent_key(::std::string* parent_key) {
  if (parent_key != NULL) {
    set_has_parent_key();
  } else {
    clear_has_parent_key();
  }
  parent_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.parent_key)
}

// optional bytes left_key = 4;
bool RangeTreeNode::has_left_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RangeTreeNode::set_has_left_key() {
  _has_bits_[0] |= 0x00000008u;
}
void RangeTreeNode::clear_has_left_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void RangeTreeNode::clear_left_key() {
  left_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_key();
}
 const ::std::string& RangeTreeNode::left_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.left_key)
  return left_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_left_key(const ::std::string& value) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.left_key)
}
 void RangeTreeNode::set_left_key(const char* value) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.left_key)
}
 void RangeTreeNode::set_left_key(const void* value, size_t size) {
  set_has_left_key();
  left_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.left_key)
}
 ::std::string* RangeTreeNode::mutable_left_key() {
  set_has_left_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.left_key)
  return left_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeTreeNode::release_left_key() {
  clear_has_left_key();
  return left_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_allocated_left_key(::std::string* left_key) {
  if (left_key != NULL) {
    set_has_left_key();
  } else {
    clear_has_left_key();
  }
  left_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.left_key)
}

// optional bytes right_key = 5;
bool RangeTreeNode::has_right_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RangeTreeNode::set_has_right_key() {
  _has_bits_[0] |= 0x00000010u;
}
void RangeTreeNode::clear_has_right_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void RangeTreeNode::clear_right_key() {
  right_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_key();
}
 const ::std::string& RangeTreeNode::right_key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RangeTreeNode.right_key)
  return right_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_right_key(const ::std::string& value) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RangeTreeNode.right_key)
}
 void RangeTreeNode::set_right_key(const char* value) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RangeTreeNode.right_key)
}
 void RangeTreeNode::set_right_key(const void* value, size_t size) {
  set_has_right_key();
  right_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RangeTreeNode.right_key)
}
 ::std::string* RangeTreeNode::mutable_right_key() {
  set_has_right_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RangeTreeNode.right_key)
  return right_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeTreeNode::release_right_key() {
  clear_has_right_key();
  return right_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeTreeNode::set_allocated_right_key(::std::string* right_key) {
  if (right_key != NULL) {
    set_has_right_key();
  } else {
    clear_has_right_key();
  }
  right_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RangeTreeNode.right_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Addr::kNetworkFieldNumber;
const int Addr::kAddressFieldNumber;
#endif  // !_MSC_VER

Addr::Addr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Addr)
}

void Addr::InitAsDefaultInstance() {
}

Addr::Addr(const Addr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Addr)
}

void Addr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Addr::~Addr() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Addr)
  SharedDtor();
}

void Addr::SharedDtor() {
  network_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Addr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Addr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Addr_descriptor_;
}

const Addr& Addr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

Addr* Addr::default_instance_ = NULL;

Addr* Addr::New(::google::protobuf::Arena* arena) const {
  Addr* n = new Addr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Addr::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_network()) {
      network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Addr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Addr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.Addr.network");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.proto.Addr.address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Addr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Addr)
  return false;
#undef DO_
}

void Addr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Addr)
  // optional string network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.Addr.network");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network(), output);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.Addr.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Addr)
}

::google::protobuf::uint8* Addr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Addr)
  // optional string network = 1;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.Addr.network");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->network(), target);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.proto.Addr.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Addr)
  return target;
}

int Addr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional string network = 1;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Addr::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Addr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Addr>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Addr::MergeFrom(const Addr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_network()) {
      set_has_network();
      network_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_);
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Addr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addr::CopyFrom(const Addr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addr::IsInitialized() const {

  return true;
}

void Addr::Swap(Addr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Addr::InternalSwap(Addr* other) {
  network_.Swap(&other->network_);
  address_.Swap(&other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Addr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Addr_descriptor_;
  metadata.reflection = Addr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Addr

// optional string network = 1;
bool Addr::has_network() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Addr::set_has_network() {
  _has_bits_[0] |= 0x00000001u;
}
void Addr::clear_has_network() {
  _has_bits_[0] &= ~0x00000001u;
}
void Addr::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network();
}
 const ::std::string& Addr::network() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Addr.network)
  return network_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Addr::set_network(const ::std::string& value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Addr.network)
}
 void Addr::set_network(const char* value) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Addr.network)
}
 void Addr::set_network(const char* value, size_t size) {
  set_has_network();
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Addr.network)
}
 ::std::string* Addr::mutable_network() {
  set_has_network();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Addr.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Addr::release_network() {
  clear_has_network();
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Addr::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    set_has_network();
  } else {
    clear_has_network();
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Addr.network)
}

// optional string address = 2;
bool Addr::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Addr::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void Addr::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void Addr::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& Addr::address() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Addr.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Addr::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Addr.address)
}
 void Addr::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Addr.address)
}
 void Addr::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Addr.address)
}
 ::std::string* Addr::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Addr.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Addr::release_address() {
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Addr::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Addr.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StoreCapacity::kCapacityFieldNumber;
const int StoreCapacity::kAvailableFieldNumber;
const int StoreCapacity::kRangeCountFieldNumber;
#endif  // !_MSC_VER

StoreCapacity::StoreCapacity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.StoreCapacity)
}

void StoreCapacity::InitAsDefaultInstance() {
}

StoreCapacity::StoreCapacity(const StoreCapacity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.StoreCapacity)
}

void StoreCapacity::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = GOOGLE_LONGLONG(0);
  available_ = GOOGLE_LONGLONG(0);
  rangecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreCapacity::~StoreCapacity() {
  // @@protoc_insertion_point(destructor:cockroach.proto.StoreCapacity)
  SharedDtor();
}

void StoreCapacity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreCapacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreCapacity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreCapacity_descriptor_;
}

const StoreCapacity& StoreCapacity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

StoreCapacity* StoreCapacity::default_instance_ = NULL;

StoreCapacity* StoreCapacity::New(::google::protobuf::Arena* arena) const {
  StoreCapacity* n = new StoreCapacity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreCapacity::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreCapacity*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(capacity_, rangecount_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.StoreCapacity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Capacity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Available;
        break;
      }

      // optional int64 Available = 2;
      case 2: {
        if (tag == 16) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RangeCount;
        break;
      }

      // optional int32 RangeCount = 3;
      case 3: {
        if (tag == 24) {
         parse_RangeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rangecount_)));
          set_has_rangecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.StoreCapacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.StoreCapacity)
  return false;
#undef DO_
}

void StoreCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.StoreCapacity)
  // optional int64 Capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  // optional int64 Available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  // optional int32 RangeCount = 3;
  if (has_rangecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rangecount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.StoreCapacity)
}

::google::protobuf::uint8* StoreCapacity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.StoreCapacity)
  // optional int64 Capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->capacity(), target);
  }

  // optional int64 Available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->available(), target);
  }

  // optional int32 RangeCount = 3;
  if (has_rangecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rangecount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.StoreCapacity)
  return target;
}

int StoreCapacity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 Capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    // optional int64 Available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->available());
    }

    // optional int32 RangeCount = 3;
    if (has_rangecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rangecount());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCapacity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreCapacity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreCapacity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreCapacity::MergeFrom(const StoreCapacity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_rangecount()) {
      set_rangecount(from.rangecount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreCapacity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreCapacity::CopyFrom(const StoreCapacity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCapacity::IsInitialized() const {

  return true;
}

void StoreCapacity::Swap(StoreCapacity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreCapacity::InternalSwap(StoreCapacity* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(available_, other->available_);
  std::swap(rangecount_, other->rangecount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreCapacity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreCapacity_descriptor_;
  metadata.reflection = StoreCapacity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreCapacity

// optional int64 Capacity = 1;
bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
 ::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreCapacity.Capacity)
  return capacity_;
}
 void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreCapacity.Capacity)
}

// optional int64 Available = 2;
bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
 ::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreCapacity.Available)
  return available_;
}
 void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreCapacity.Available)
}

// optional int32 RangeCount = 3;
bool StoreCapacity::has_rangecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreCapacity::set_has_rangecount() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreCapacity::clear_has_rangecount() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreCapacity::clear_rangecount() {
  rangecount_ = 0;
  clear_has_rangecount();
}
 ::google::protobuf::int32 StoreCapacity::rangecount() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreCapacity.RangeCount)
  return rangecount_;
}
 void StoreCapacity::set_rangecount(::google::protobuf::int32 value) {
  set_has_rangecount();
  rangecount_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreCapacity.RangeCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NodeDescriptor::kNodeIdFieldNumber;
const int NodeDescriptor::kAddressFieldNumber;
const int NodeDescriptor::kAttrsFieldNumber;
#endif  // !_MSC_VER

NodeDescriptor::NodeDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.NodeDescriptor)
}

void NodeDescriptor::InitAsDefaultInstance() {
  address_ = const_cast< ::cockroach::proto::Addr*>(&::cockroach::proto::Addr::default_instance());
  attrs_ = const_cast< ::cockroach::proto::Attributes*>(&::cockroach::proto::Attributes::default_instance());
}

NodeDescriptor::NodeDescriptor(const NodeDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.NodeDescriptor)
}

void NodeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  address_ = NULL;
  attrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDescriptor::~NodeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.proto.NodeDescriptor)
  SharedDtor();
}

void NodeDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
    delete attrs_;
  }
}

void NodeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDescriptor_descriptor_;
}

const NodeDescriptor& NodeDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

NodeDescriptor* NodeDescriptor::default_instance_ = NULL;

NodeDescriptor* NodeDescriptor::New(::google::protobuf::Arena* arena) const {
  NodeDescriptor* n = new NodeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    node_id_ = 0;
    if (has_address()) {
      if (address_ != NULL) address_->::cockroach::proto::Addr::Clear();
    }
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.NodeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .cockroach.proto.Addr address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // optional .cockroach.proto.Attributes attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.NodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.NodeDescriptor)
  return false;
#undef DO_
}

void NodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.NodeDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional .cockroach.proto.Addr address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->address_, output);
  }

  // optional .cockroach.proto.Attributes attrs = 3;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->attrs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.NodeDescriptor)
}

::google::protobuf::uint8* NodeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.NodeDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional .cockroach.proto.Addr address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->address_, target);
  }

  // optional .cockroach.proto.Attributes attrs = 3;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->attrs_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.NodeDescriptor)
  return target;
}

int NodeDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional .cockroach.proto.Addr address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional .cockroach.proto.Attributes attrs = 3;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDescriptor::MergeFrom(const NodeDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_address()) {
      mutable_address()->::cockroach::proto::Addr::MergeFrom(from.address());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::proto::Attributes::MergeFrom(from.attrs());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDescriptor::CopyFrom(const NodeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDescriptor::IsInitialized() const {

  return true;
}

void NodeDescriptor::Swap(NodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDescriptor::InternalSwap(NodeDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(address_, other->address_);
  std::swap(attrs_, other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDescriptor_descriptor_;
  metadata.reflection = NodeDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDescriptor

// optional int32 node_id = 1;
bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.node_id)
  return node_id_;
}
 void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.NodeDescriptor.node_id)
}

// optional .cockroach.proto.Addr address = 2;
bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::proto::Addr::Clear();
  clear_has_address();
}
 const ::cockroach::proto::Addr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
 ::cockroach::proto::Addr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::cockroach::proto::Addr;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.NodeDescriptor.address)
  return address_;
}
 ::cockroach::proto::Addr* NodeDescriptor::release_address() {
  clear_has_address();
  ::cockroach::proto::Addr* temp = address_;
  address_ = NULL;
  return temp;
}
 void NodeDescriptor::set_allocated_address(::cockroach::proto::Addr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.NodeDescriptor.address)
}

// optional .cockroach.proto.Attributes attrs = 3;
bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
  clear_has_attrs();
}
 const ::cockroach::proto::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
 ::cockroach::proto::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::proto::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.NodeDescriptor.attrs)
  return attrs_;
}
 ::cockroach::proto::Attributes* NodeDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
 void NodeDescriptor::set_allocated_attrs(::cockroach::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.NodeDescriptor.attrs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StoreDescriptor::kStoreIdFieldNumber;
const int StoreDescriptor::kAttrsFieldNumber;
const int StoreDescriptor::kNodeFieldNumber;
const int StoreDescriptor::kCapacityFieldNumber;
#endif  // !_MSC_VER

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.StoreDescriptor)
}

void StoreDescriptor::InitAsDefaultInstance() {
  attrs_ = const_cast< ::cockroach::proto::Attributes*>(&::cockroach::proto::Attributes::default_instance());
  node_ = const_cast< ::cockroach::proto::NodeDescriptor*>(&::cockroach::proto::NodeDescriptor::default_instance());
  capacity_ = const_cast< ::cockroach::proto::StoreCapacity*>(&::cockroach::proto::StoreCapacity::default_instance());
}

StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
  attrs_ = NULL;
  node_ = NULL;
  capacity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.proto.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete attrs_;
    delete node_;
    delete capacity_;
  }
}

void StoreDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreDescriptor_descriptor_;
}

const StoreDescriptor& StoreDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

StoreDescriptor* StoreDescriptor::default_instance_ = NULL;

StoreDescriptor* StoreDescriptor::New(::google::protobuf::Arena* arena) const {
  StoreDescriptor* n = new StoreDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    store_id_ = 0;
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
    }
    if (has_node()) {
      if (node_ != NULL) node_->::cockroach::proto::NodeDescriptor::Clear();
    }
    if (has_capacity()) {
      if (capacity_ != NULL) capacity_->::cockroach::proto::StoreCapacity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.StoreDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 store_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // optional .cockroach.proto.Attributes attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }

      // optional .cockroach.proto.NodeDescriptor node = 3;
      case 3: {
        if (tag == 26) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_capacity;
        break;
      }

      // optional .cockroach.proto.StoreCapacity capacity = 4;
      case 4: {
        if (tag == 34) {
         parse_capacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.StoreDescriptor)
  return false;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.StoreDescriptor)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // optional .cockroach.proto.Attributes attrs = 2;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->attrs_, output);
  }

  // optional .cockroach.proto.NodeDescriptor node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->node_, output);
  }

  // optional .cockroach.proto.StoreCapacity capacity = 4;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->capacity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.StoreDescriptor)
}

::google::protobuf::uint8* StoreDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.StoreDescriptor)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->store_id(), target);
  }

  // optional .cockroach.proto.Attributes attrs = 2;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->attrs_, target);
  }

  // optional .cockroach.proto.NodeDescriptor node = 3;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->node_, target);
  }

  // optional .cockroach.proto.StoreCapacity capacity = 4;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->capacity_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.StoreDescriptor)
  return target;
}

int StoreDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15) {
    // optional int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional .cockroach.proto.Attributes attrs = 2;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    // optional .cockroach.proto.NodeDescriptor node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_);
    }

    // optional .cockroach.proto.StoreCapacity capacity = 4;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capacity_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::proto::Attributes::MergeFrom(from.attrs());
    }
    if (from.has_node()) {
      mutable_node()->::cockroach::proto::NodeDescriptor::MergeFrom(from.node());
    }
    if (from.has_capacity()) {
      mutable_capacity()->::cockroach::proto::StoreCapacity::MergeFrom(from.capacity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {

  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  std::swap(store_id_, other->store_id_);
  std::swap(attrs_, other->attrs_);
  std::swap(node_, other->node_);
  std::swap(capacity_, other->capacity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreDescriptor_descriptor_;
  metadata.reflection = StoreDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDescriptor

// optional int32 store_id = 1;
bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.store_id)
  return store_id_;
}
 void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreDescriptor.store_id)
}

// optional .cockroach.proto.Attributes attrs = 2;
bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
  clear_has_attrs();
}
 const ::cockroach::proto::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
 ::cockroach::proto::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::proto::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.attrs)
  return attrs_;
}
 ::cockroach::proto::Attributes* StoreDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::proto::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
 void StoreDescriptor::set_allocated_attrs(::cockroach::proto::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.attrs)
}

// optional .cockroach.proto.NodeDescriptor node = 3;
bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::proto::NodeDescriptor::Clear();
  clear_has_node();
}
 const ::cockroach::proto::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
 ::cockroach::proto::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cockroach::proto::NodeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.node)
  return node_;
}
 ::cockroach::proto::NodeDescriptor* StoreDescriptor::release_node() {
  clear_has_node();
  ::cockroach::proto::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
 void StoreDescriptor::set_allocated_node(::cockroach::proto::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.node)
}

// optional .cockroach.proto.StoreCapacity capacity = 4;
bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::proto::StoreCapacity::Clear();
  clear_has_capacity();
}
 const ::cockroach::proto::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_ : *default_instance_->capacity_;
}
 ::cockroach::proto::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) {
    capacity_ = new ::cockroach::proto::StoreCapacity;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreDescriptor.capacity)
  return capacity_;
}
 ::cockroach::proto::StoreCapacity* StoreDescriptor::release_capacity() {
  clear_has_capacity();
  ::cockroach::proto::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
 void StoreDescriptor::set_allocated_capacity(::cockroach::proto::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreDescriptor.capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
