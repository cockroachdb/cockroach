// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/data.proto

#ifndef PROTOBUF_cockroach_2fproto_2fdata_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/config.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

class Timestamp;
class Value;
class MVCCValue;
class KeyValue;
class RawKeyValue;
class StoreIdent;
class SplitTrigger;
class MergeTrigger;
class ChangeReplicasTrigger;
class InternalCommitTrigger;
class NodeList;
class Transaction;
class Lease;
class MVCCMetadata;
class GCMetadata;
class TimeSeriesDatapoint;
class TimeSeriesData;
class MVCCStats;

enum ReplicaChangeType {
  ADD_REPLICA = 0,
  REMOVE_REPLICA = 1
};
bool ReplicaChangeType_IsValid(int value);
const ReplicaChangeType ReplicaChangeType_MIN = ADD_REPLICA;
const ReplicaChangeType ReplicaChangeType_MAX = REMOVE_REPLICA;
const int ReplicaChangeType_ARRAYSIZE = ReplicaChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor();
inline const ::std::string& ReplicaChangeType_Name(ReplicaChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReplicaChangeType_descriptor(), value);
}
inline bool ReplicaChangeType_Parse(
    const ::std::string& name, ReplicaChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReplicaChangeType>(
    ReplicaChangeType_descriptor(), name, value);
}
enum IsolationType {
  SERIALIZABLE = 0,
  SNAPSHOT = 1
};
bool IsolationType_IsValid(int value);
const IsolationType IsolationType_MIN = SERIALIZABLE;
const IsolationType IsolationType_MAX = SNAPSHOT;
const int IsolationType_ARRAYSIZE = IsolationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsolationType_descriptor();
inline const ::std::string& IsolationType_Name(IsolationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsolationType_descriptor(), value);
}
inline bool IsolationType_Parse(
    const ::std::string& name, IsolationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsolationType>(
    IsolationType_descriptor(), name, value);
}
enum TransactionStatus {
  PENDING = 0,
  COMMITTED = 1,
  ABORTED = 2
};
bool TransactionStatus_IsValid(int value);
const TransactionStatus TransactionStatus_MIN = PENDING;
const TransactionStatus TransactionStatus_MAX = ABORTED;
const int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor();
inline const ::std::string& TransactionStatus_Name(TransactionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionStatus_descriptor(), value);
}
inline bool TransactionStatus_Parse(
    const ::std::string& name, TransactionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class Timestamp : public ::google::protobuf::Message {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  Timestamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 wall_time = 1;
  inline bool has_wall_time() const;
  inline void clear_wall_time();
  static const int kWallTimeFieldNumber = 1;
  inline ::google::protobuf::int64 wall_time() const;
  inline void set_wall_time(::google::protobuf::int64 value);

  // optional int32 logical = 2;
  inline bool has_logical() const;
  inline void clear_logical();
  static const int kLogicalFieldNumber = 2;
  inline ::google::protobuf::int32 logical() const;
  inline void set_logical(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Timestamp)
 private:
  inline void set_has_wall_time();
  inline void clear_has_wall_time();
  inline void set_has_logical();
  inline void clear_has_logical();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 wall_time_;
  ::google::protobuf::int32 logical_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes bytes = 1;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 1;
  inline const ::std::string& bytes() const;
  inline void set_bytes(const ::std::string& value);
  inline void set_bytes(const char* value);
  inline void set_bytes(const void* value, size_t size);
  inline ::std::string* mutable_bytes();
  inline ::std::string* release_bytes();
  inline void set_allocated_bytes(::std::string* bytes);

  // optional int64 integer = 2;
  inline bool has_integer() const;
  inline void clear_integer();
  static const int kIntegerFieldNumber = 2;
  inline ::google::protobuf::int64 integer() const;
  inline void set_integer(::google::protobuf::int64 value);

  // optional fixed32 checksum = 3;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);

  // optional .cockroach.proto.Timestamp timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional string tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const char* value, size_t size);
  inline ::std::string* mutable_tag();
  inline ::std::string* release_tag();
  inline void set_allocated_tag(::std::string* tag);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Value)
 private:
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_integer();
  inline void clear_has_integer();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bytes_;
  ::google::protobuf::int64 integer_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::std::string* tag_;
  ::google::protobuf::uint32 checksum_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class MVCCValue : public ::google::protobuf::Message {
 public:
  MVCCValue();
  virtual ~MVCCValue();

  MVCCValue(const MVCCValue& from);

  inline MVCCValue& operator=(const MVCCValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVCCValue& default_instance();

  void Swap(MVCCValue* other);

  // implements Message ----------------------------------------------

  MVCCValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVCCValue& from);
  void MergeFrom(const MVCCValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool deleted = 1;
  inline bool has_deleted() const;
  inline void clear_deleted();
  static const int kDeletedFieldNumber = 1;
  inline bool deleted() const;
  inline void set_deleted(bool value);

  // optional .cockroach.proto.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::cockroach::proto::Value& value() const;
  inline ::cockroach::proto::Value* mutable_value();
  inline ::cockroach::proto::Value* release_value();
  inline void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.MVCCValue)
 private:
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Value* value_;
  bool deleted_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MVCCValue* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional .cockroach.proto.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::cockroach::proto::Value& value() const;
  inline ::cockroach::proto::Value* mutable_value();
  inline ::cockroach::proto::Value* release_value();
  inline void set_allocated_value(::cockroach::proto::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::cockroach::proto::Value* value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class RawKeyValue : public ::google::protobuf::Message {
 public:
  RawKeyValue();
  virtual ~RawKeyValue();

  RawKeyValue(const RawKeyValue& from);

  inline RawKeyValue& operator=(const RawKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawKeyValue& default_instance();

  void Swap(RawKeyValue* other);

  // implements Message ----------------------------------------------

  RawKeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawKeyValue& from);
  void MergeFrom(const RawKeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RawKeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static RawKeyValue* default_instance_;
};
// -------------------------------------------------------------------

class StoreIdent : public ::google::protobuf::Message {
 public:
  StoreIdent();
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreIdent& default_instance();

  void Swap(StoreIdent* other);

  // implements Message ----------------------------------------------

  StoreIdent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_id = 1;
  inline bool has_cluster_id() const;
  inline void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  inline const ::std::string& cluster_id() const;
  inline void set_cluster_id(const ::std::string& value);
  inline void set_cluster_id(const char* value);
  inline void set_cluster_id(const char* value, size_t size);
  inline ::std::string* mutable_cluster_id();
  inline ::std::string* release_cluster_id();
  inline void set_allocated_cluster_id(::std::string* cluster_id);

  // optional int32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 3;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 3;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.StoreIdent)
 private:
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cluster_id_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static StoreIdent* default_instance_;
};
// -------------------------------------------------------------------

class SplitTrigger : public ::google::protobuf::Message {
 public:
  SplitTrigger();
  virtual ~SplitTrigger();

  SplitTrigger(const SplitTrigger& from);

  inline SplitTrigger& operator=(const SplitTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitTrigger& default_instance();

  void Swap(SplitTrigger* other);

  // implements Message ----------------------------------------------

  SplitTrigger* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitTrigger& from);
  void MergeFrom(const SplitTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  inline bool has_updated_desc() const;
  inline void clear_updated_desc();
  static const int kUpdatedDescFieldNumber = 1;
  inline const ::cockroach::proto::RangeDescriptor& updated_desc() const;
  inline ::cockroach::proto::RangeDescriptor* mutable_updated_desc();
  inline ::cockroach::proto::RangeDescriptor* release_updated_desc();
  inline void set_allocated_updated_desc(::cockroach::proto::RangeDescriptor* updated_desc);

  // optional .cockroach.proto.RangeDescriptor new_desc = 2;
  inline bool has_new_desc() const;
  inline void clear_new_desc();
  static const int kNewDescFieldNumber = 2;
  inline const ::cockroach::proto::RangeDescriptor& new_desc() const;
  inline ::cockroach::proto::RangeDescriptor* mutable_new_desc();
  inline ::cockroach::proto::RangeDescriptor* release_new_desc();
  inline void set_allocated_new_desc(::cockroach::proto::RangeDescriptor* new_desc);

  // @@protoc_insertion_point(class_scope:cockroach.proto.SplitTrigger)
 private:
  inline void set_has_updated_desc();
  inline void clear_has_updated_desc();
  inline void set_has_new_desc();
  inline void clear_has_new_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::RangeDescriptor* updated_desc_;
  ::cockroach::proto::RangeDescriptor* new_desc_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static SplitTrigger* default_instance_;
};
// -------------------------------------------------------------------

class MergeTrigger : public ::google::protobuf::Message {
 public:
  MergeTrigger();
  virtual ~MergeTrigger();

  MergeTrigger(const MergeTrigger& from);

  inline MergeTrigger& operator=(const MergeTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeTrigger& default_instance();

  void Swap(MergeTrigger* other);

  // implements Message ----------------------------------------------

  MergeTrigger* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeTrigger& from);
  void MergeFrom(const MergeTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.RangeDescriptor updated_desc = 1;
  inline bool has_updated_desc() const;
  inline void clear_updated_desc();
  static const int kUpdatedDescFieldNumber = 1;
  inline const ::cockroach::proto::RangeDescriptor& updated_desc() const;
  inline ::cockroach::proto::RangeDescriptor* mutable_updated_desc();
  inline ::cockroach::proto::RangeDescriptor* release_updated_desc();
  inline void set_allocated_updated_desc(::cockroach::proto::RangeDescriptor* updated_desc);

  // optional int64 subsumed_raft_id = 2;
  inline bool has_subsumed_raft_id() const;
  inline void clear_subsumed_raft_id();
  static const int kSubsumedRaftIdFieldNumber = 2;
  inline ::google::protobuf::int64 subsumed_raft_id() const;
  inline void set_subsumed_raft_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.MergeTrigger)
 private:
  inline void set_has_updated_desc();
  inline void clear_has_updated_desc();
  inline void set_has_subsumed_raft_id();
  inline void clear_has_subsumed_raft_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::RangeDescriptor* updated_desc_;
  ::google::protobuf::int64 subsumed_raft_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MergeTrigger* default_instance_;
};
// -------------------------------------------------------------------

class ChangeReplicasTrigger : public ::google::protobuf::Message {
 public:
  ChangeReplicasTrigger();
  virtual ~ChangeReplicasTrigger();

  ChangeReplicasTrigger(const ChangeReplicasTrigger& from);

  inline ChangeReplicasTrigger& operator=(const ChangeReplicasTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeReplicasTrigger& default_instance();

  void Swap(ChangeReplicasTrigger* other);

  // implements Message ----------------------------------------------

  ChangeReplicasTrigger* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeReplicasTrigger& from);
  void MergeFrom(const ChangeReplicasTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 node_id = 1;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 2;
  inline bool has_store_id() const;
  inline void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  inline ::google::protobuf::int32 store_id() const;
  inline void set_store_id(::google::protobuf::int32 value);

  // optional .cockroach.proto.ReplicaChangeType change_type = 3;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 3;
  inline ::cockroach::proto::ReplicaChangeType change_type() const;
  inline void set_change_type(::cockroach::proto::ReplicaChangeType value);

  // repeated .cockroach.proto.Replica updated_replicas = 4;
  inline int updated_replicas_size() const;
  inline void clear_updated_replicas();
  static const int kUpdatedReplicasFieldNumber = 4;
  inline const ::cockroach::proto::Replica& updated_replicas(int index) const;
  inline ::cockroach::proto::Replica* mutable_updated_replicas(int index);
  inline ::cockroach::proto::Replica* add_updated_replicas();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >&
      updated_replicas() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >*
      mutable_updated_replicas();

  // @@protoc_insertion_point(class_scope:cockroach.proto.ChangeReplicasTrigger)
 private:
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica > updated_replicas_;
  int change_type_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ChangeReplicasTrigger* default_instance_;
};
// -------------------------------------------------------------------

class InternalCommitTrigger : public ::google::protobuf::Message {
 public:
  InternalCommitTrigger();
  virtual ~InternalCommitTrigger();

  InternalCommitTrigger(const InternalCommitTrigger& from);

  inline InternalCommitTrigger& operator=(const InternalCommitTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalCommitTrigger& default_instance();

  void Swap(InternalCommitTrigger* other);

  // implements Message ----------------------------------------------

  InternalCommitTrigger* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InternalCommitTrigger& from);
  void MergeFrom(const InternalCommitTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.SplitTrigger split_trigger = 1;
  inline bool has_split_trigger() const;
  inline void clear_split_trigger();
  static const int kSplitTriggerFieldNumber = 1;
  inline const ::cockroach::proto::SplitTrigger& split_trigger() const;
  inline ::cockroach::proto::SplitTrigger* mutable_split_trigger();
  inline ::cockroach::proto::SplitTrigger* release_split_trigger();
  inline void set_allocated_split_trigger(::cockroach::proto::SplitTrigger* split_trigger);

  // optional .cockroach.proto.MergeTrigger merge_trigger = 2;
  inline bool has_merge_trigger() const;
  inline void clear_merge_trigger();
  static const int kMergeTriggerFieldNumber = 2;
  inline const ::cockroach::proto::MergeTrigger& merge_trigger() const;
  inline ::cockroach::proto::MergeTrigger* mutable_merge_trigger();
  inline ::cockroach::proto::MergeTrigger* release_merge_trigger();
  inline void set_allocated_merge_trigger(::cockroach::proto::MergeTrigger* merge_trigger);

  // optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
  inline bool has_change_replicas_trigger() const;
  inline void clear_change_replicas_trigger();
  static const int kChangeReplicasTriggerFieldNumber = 3;
  inline const ::cockroach::proto::ChangeReplicasTrigger& change_replicas_trigger() const;
  inline ::cockroach::proto::ChangeReplicasTrigger* mutable_change_replicas_trigger();
  inline ::cockroach::proto::ChangeReplicasTrigger* release_change_replicas_trigger();
  inline void set_allocated_change_replicas_trigger(::cockroach::proto::ChangeReplicasTrigger* change_replicas_trigger);

  // repeated bytes intents = 4;
  inline int intents_size() const;
  inline void clear_intents();
  static const int kIntentsFieldNumber = 4;
  inline const ::std::string& intents(int index) const;
  inline ::std::string* mutable_intents(int index);
  inline void set_intents(int index, const ::std::string& value);
  inline void set_intents(int index, const char* value);
  inline void set_intents(int index, const void* value, size_t size);
  inline ::std::string* add_intents();
  inline void add_intents(const ::std::string& value);
  inline void add_intents(const char* value);
  inline void add_intents(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& intents() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_intents();

  // @@protoc_insertion_point(class_scope:cockroach.proto.InternalCommitTrigger)
 private:
  inline void set_has_split_trigger();
  inline void clear_has_split_trigger();
  inline void set_has_merge_trigger();
  inline void clear_has_merge_trigger();
  inline void set_has_change_replicas_trigger();
  inline void clear_has_change_replicas_trigger();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::SplitTrigger* split_trigger_;
  ::cockroach::proto::MergeTrigger* merge_trigger_;
  ::cockroach::proto::ChangeReplicasTrigger* change_replicas_trigger_;
  ::google::protobuf::RepeatedPtrField< ::std::string> intents_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static InternalCommitTrigger* default_instance_;
};
// -------------------------------------------------------------------

class NodeList : public ::google::protobuf::Message {
 public:
  NodeList();
  virtual ~NodeList();

  NodeList(const NodeList& from);

  inline NodeList& operator=(const NodeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeList& default_instance();

  void Swap(NodeList* other);

  // implements Message ----------------------------------------------

  NodeList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeList& from);
  void MergeFrom(const NodeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 nodes = 1 [packed = true];
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline ::google::protobuf::int32 nodes(int index) const;
  inline void set_nodes(int index, ::google::protobuf::int32 value);
  inline void add_nodes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:cockroach.proto.NodeList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodes_;
  mutable int _nodes_cached_byte_size_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static NodeList* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional int32 priority = 4;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 4;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional .cockroach.proto.IsolationType isolation = 5;
  inline bool has_isolation() const;
  inline void clear_isolation();
  static const int kIsolationFieldNumber = 5;
  inline ::cockroach::proto::IsolationType isolation() const;
  inline void set_isolation(::cockroach::proto::IsolationType value);

  // optional .cockroach.proto.TransactionStatus status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::cockroach::proto::TransactionStatus status() const;
  inline void set_status(::cockroach::proto::TransactionStatus value);

  // optional int32 epoch = 7;
  inline bool has_epoch() const;
  inline void clear_epoch();
  static const int kEpochFieldNumber = 7;
  inline ::google::protobuf::int32 epoch() const;
  inline void set_epoch(::google::protobuf::int32 value);

  // optional .cockroach.proto.Timestamp last_heartbeat = 8;
  inline bool has_last_heartbeat() const;
  inline void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 8;
  inline const ::cockroach::proto::Timestamp& last_heartbeat() const;
  inline ::cockroach::proto::Timestamp* mutable_last_heartbeat();
  inline ::cockroach::proto::Timestamp* release_last_heartbeat();
  inline void set_allocated_last_heartbeat(::cockroach::proto::Timestamp* last_heartbeat);

  // optional .cockroach.proto.Timestamp timestamp = 9;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional .cockroach.proto.Timestamp orig_timestamp = 10;
  inline bool has_orig_timestamp() const;
  inline void clear_orig_timestamp();
  static const int kOrigTimestampFieldNumber = 10;
  inline const ::cockroach::proto::Timestamp& orig_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_orig_timestamp();
  inline ::cockroach::proto::Timestamp* release_orig_timestamp();
  inline void set_allocated_orig_timestamp(::cockroach::proto::Timestamp* orig_timestamp);

  // optional .cockroach.proto.Timestamp max_timestamp = 11;
  inline bool has_max_timestamp() const;
  inline void clear_max_timestamp();
  static const int kMaxTimestampFieldNumber = 11;
  inline const ::cockroach::proto::Timestamp& max_timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_max_timestamp();
  inline ::cockroach::proto::Timestamp* release_max_timestamp();
  inline void set_allocated_max_timestamp(::cockroach::proto::Timestamp* max_timestamp);

  // optional .cockroach.proto.NodeList certain_nodes = 12;
  inline bool has_certain_nodes() const;
  inline void clear_certain_nodes();
  static const int kCertainNodesFieldNumber = 12;
  inline const ::cockroach::proto::NodeList& certain_nodes() const;
  inline ::cockroach::proto::NodeList* mutable_certain_nodes();
  inline ::cockroach::proto::NodeList* release_certain_nodes();
  inline void set_allocated_certain_nodes(::cockroach::proto::NodeList* certain_nodes);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Transaction)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_isolation();
  inline void clear_has_isolation();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_epoch();
  inline void clear_has_epoch();
  inline void set_has_last_heartbeat();
  inline void clear_has_last_heartbeat();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_orig_timestamp();
  inline void clear_has_orig_timestamp();
  inline void set_has_max_timestamp();
  inline void clear_has_max_timestamp();
  inline void set_has_certain_nodes();
  inline void clear_has_certain_nodes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* key_;
  ::std::string* id_;
  ::google::protobuf::int32 priority_;
  int isolation_;
  int status_;
  ::google::protobuf::int32 epoch_;
  ::cockroach::proto::Timestamp* last_heartbeat_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::cockroach::proto::Timestamp* orig_timestamp_;
  ::cockroach::proto::Timestamp* max_timestamp_;
  ::cockroach::proto::NodeList* certain_nodes_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class Lease : public ::google::protobuf::Message {
 public:
  Lease();
  virtual ~Lease();

  Lease(const Lease& from);

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lease& default_instance();

  void Swap(Lease* other);

  // implements Message ----------------------------------------------

  Lease* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lease& from);
  void MergeFrom(const Lease& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 expiration = 1;
  inline bool has_expiration() const;
  inline void clear_expiration();
  static const int kExpirationFieldNumber = 1;
  inline ::google::protobuf::int64 expiration() const;
  inline void set_expiration(::google::protobuf::int64 value);

  // optional int64 duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline ::google::protobuf::int64 duration() const;
  inline void set_duration(::google::protobuf::int64 value);

  // optional uint64 term = 3;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 3;
  inline ::google::protobuf::uint64 term() const;
  inline void set_term(::google::protobuf::uint64 value);

  // optional uint64 raft_node_id = 4;
  inline bool has_raft_node_id() const;
  inline void clear_raft_node_id();
  static const int kRaftNodeIdFieldNumber = 4;
  inline ::google::protobuf::uint64 raft_node_id() const;
  inline void set_raft_node_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.Lease)
 private:
  inline void set_has_expiration();
  inline void clear_has_expiration();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_raft_node_id();
  inline void clear_has_raft_node_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 expiration_;
  ::google::protobuf::int64 duration_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 raft_node_id_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Lease* default_instance_;
};
// -------------------------------------------------------------------

class MVCCMetadata : public ::google::protobuf::Message {
 public:
  MVCCMetadata();
  virtual ~MVCCMetadata();

  MVCCMetadata(const MVCCMetadata& from);

  inline MVCCMetadata& operator=(const MVCCMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVCCMetadata& default_instance();

  void Swap(MVCCMetadata* other);

  // implements Message ----------------------------------------------

  MVCCMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVCCMetadata& from);
  void MergeFrom(const MVCCMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.Transaction txn = 1;
  inline bool has_txn() const;
  inline void clear_txn();
  static const int kTxnFieldNumber = 1;
  inline const ::cockroach::proto::Transaction& txn() const;
  inline ::cockroach::proto::Transaction* mutable_txn();
  inline ::cockroach::proto::Transaction* release_txn();
  inline void set_allocated_txn(::cockroach::proto::Transaction* txn);

  // optional .cockroach.proto.Timestamp timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline const ::cockroach::proto::Timestamp& timestamp() const;
  inline ::cockroach::proto::Timestamp* mutable_timestamp();
  inline ::cockroach::proto::Timestamp* release_timestamp();
  inline void set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp);

  // optional bool deleted = 3;
  inline bool has_deleted() const;
  inline void clear_deleted();
  static const int kDeletedFieldNumber = 3;
  inline bool deleted() const;
  inline void set_deleted(bool value);

  // optional int64 key_bytes = 4;
  inline bool has_key_bytes() const;
  inline void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 4;
  inline ::google::protobuf::int64 key_bytes() const;
  inline void set_key_bytes(::google::protobuf::int64 value);

  // optional int64 val_bytes = 5;
  inline bool has_val_bytes() const;
  inline void clear_val_bytes();
  static const int kValBytesFieldNumber = 5;
  inline ::google::protobuf::int64 val_bytes() const;
  inline void set_val_bytes(::google::protobuf::int64 value);

  // optional .cockroach.proto.Value value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline const ::cockroach::proto::Value& value() const;
  inline ::cockroach::proto::Value* mutable_value();
  inline ::cockroach::proto::Value* release_value();
  inline void set_allocated_value(::cockroach::proto::Value* value);

  // optional .cockroach.proto.Timestamp last_evicted = 7;
  inline bool has_last_evicted() const;
  inline void clear_last_evicted();
  static const int kLastEvictedFieldNumber = 7;
  inline const ::cockroach::proto::Timestamp& last_evicted() const;
  inline ::cockroach::proto::Timestamp* mutable_last_evicted();
  inline ::cockroach::proto::Timestamp* release_last_evicted();
  inline void set_allocated_last_evicted(::cockroach::proto::Timestamp* last_evicted);

  // @@protoc_insertion_point(class_scope:cockroach.proto.MVCCMetadata)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_key_bytes();
  inline void clear_has_key_bytes();
  inline void set_has_val_bytes();
  inline void clear_has_val_bytes();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_last_evicted();
  inline void clear_has_last_evicted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::Transaction* txn_;
  ::cockroach::proto::Timestamp* timestamp_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 val_bytes_;
  ::cockroach::proto::Value* value_;
  ::cockroach::proto::Timestamp* last_evicted_;
  bool deleted_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MVCCMetadata* default_instance_;
};
// -------------------------------------------------------------------

class GCMetadata : public ::google::protobuf::Message {
 public:
  GCMetadata();
  virtual ~GCMetadata();

  GCMetadata(const GCMetadata& from);

  inline GCMetadata& operator=(const GCMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMetadata& default_instance();

  void Swap(GCMetadata* other);

  // implements Message ----------------------------------------------

  GCMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMetadata& from);
  void MergeFrom(const GCMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 last_scan_nanos = 1;
  inline bool has_last_scan_nanos() const;
  inline void clear_last_scan_nanos();
  static const int kLastScanNanosFieldNumber = 1;
  inline ::google::protobuf::int64 last_scan_nanos() const;
  inline void set_last_scan_nanos(::google::protobuf::int64 value);

  // optional int64 oldest_intent_nanos = 2;
  inline bool has_oldest_intent_nanos() const;
  inline void clear_oldest_intent_nanos();
  static const int kOldestIntentNanosFieldNumber = 2;
  inline ::google::protobuf::int64 oldest_intent_nanos() const;
  inline void set_oldest_intent_nanos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.GCMetadata)
 private:
  inline void set_has_last_scan_nanos();
  inline void clear_has_last_scan_nanos();
  inline void set_has_oldest_intent_nanos();
  inline void clear_has_oldest_intent_nanos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 last_scan_nanos_;
  ::google::protobuf::int64 oldest_intent_nanos_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static GCMetadata* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesDatapoint : public ::google::protobuf::Message {
 public:
  TimeSeriesDatapoint();
  virtual ~TimeSeriesDatapoint();

  TimeSeriesDatapoint(const TimeSeriesDatapoint& from);

  inline TimeSeriesDatapoint& operator=(const TimeSeriesDatapoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesDatapoint& default_instance();

  void Swap(TimeSeriesDatapoint* other);

  // implements Message ----------------------------------------------

  TimeSeriesDatapoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesDatapoint& from);
  void MergeFrom(const TimeSeriesDatapoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp_nanos = 1;
  inline bool has_timestamp_nanos() const;
  inline void clear_timestamp_nanos();
  static const int kTimestampNanosFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp_nanos() const;
  inline void set_timestamp_nanos(::google::protobuf::int64 value);

  // optional int64 int_value = 2;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 2;
  inline ::google::protobuf::int64 int_value() const;
  inline void set_int_value(::google::protobuf::int64 value);

  // optional float float_value = 3;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 3;
  inline float float_value() const;
  inline void set_float_value(float value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesDatapoint)
 private:
  inline void set_has_timestamp_nanos();
  inline void clear_has_timestamp_nanos();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 timestamp_nanos_;
  ::google::protobuf::int64 int_value_;
  float float_value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesDatapoint* default_instance_;
};
// -------------------------------------------------------------------

class TimeSeriesData : public ::google::protobuf::Message {
 public:
  TimeSeriesData();
  virtual ~TimeSeriesData();

  TimeSeriesData(const TimeSeriesData& from);

  inline TimeSeriesData& operator=(const TimeSeriesData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeSeriesData& default_instance();

  void Swap(TimeSeriesData* other);

  // implements Message ----------------------------------------------

  TimeSeriesData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeSeriesData& from);
  void MergeFrom(const TimeSeriesData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string source = 2;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 2;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
  inline int datapoints_size() const;
  inline void clear_datapoints();
  static const int kDatapointsFieldNumber = 3;
  inline const ::cockroach::proto::TimeSeriesDatapoint& datapoints(int index) const;
  inline ::cockroach::proto::TimeSeriesDatapoint* mutable_datapoints(int index);
  inline ::cockroach::proto::TimeSeriesDatapoint* add_datapoints();
  inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
      datapoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
      mutable_datapoints();

  // @@protoc_insertion_point(class_scope:cockroach.proto.TimeSeriesData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* source_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint > datapoints_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static TimeSeriesData* default_instance_;
};
// -------------------------------------------------------------------

class MVCCStats : public ::google::protobuf::Message {
 public:
  MVCCStats();
  virtual ~MVCCStats();

  MVCCStats(const MVCCStats& from);

  inline MVCCStats& operator=(const MVCCStats& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVCCStats& default_instance();

  void Swap(MVCCStats* other);

  // implements Message ----------------------------------------------

  MVCCStats* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVCCStats& from);
  void MergeFrom(const MVCCStats& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 live_bytes = 1;
  inline bool has_live_bytes() const;
  inline void clear_live_bytes();
  static const int kLiveBytesFieldNumber = 1;
  inline ::google::protobuf::int64 live_bytes() const;
  inline void set_live_bytes(::google::protobuf::int64 value);

  // optional int64 key_bytes = 2;
  inline bool has_key_bytes() const;
  inline void clear_key_bytes();
  static const int kKeyBytesFieldNumber = 2;
  inline ::google::protobuf::int64 key_bytes() const;
  inline void set_key_bytes(::google::protobuf::int64 value);

  // optional int64 val_bytes = 3;
  inline bool has_val_bytes() const;
  inline void clear_val_bytes();
  static const int kValBytesFieldNumber = 3;
  inline ::google::protobuf::int64 val_bytes() const;
  inline void set_val_bytes(::google::protobuf::int64 value);

  // optional int64 intent_bytes = 4;
  inline bool has_intent_bytes() const;
  inline void clear_intent_bytes();
  static const int kIntentBytesFieldNumber = 4;
  inline ::google::protobuf::int64 intent_bytes() const;
  inline void set_intent_bytes(::google::protobuf::int64 value);

  // optional int64 live_count = 5;
  inline bool has_live_count() const;
  inline void clear_live_count();
  static const int kLiveCountFieldNumber = 5;
  inline ::google::protobuf::int64 live_count() const;
  inline void set_live_count(::google::protobuf::int64 value);

  // optional int64 key_count = 6;
  inline bool has_key_count() const;
  inline void clear_key_count();
  static const int kKeyCountFieldNumber = 6;
  inline ::google::protobuf::int64 key_count() const;
  inline void set_key_count(::google::protobuf::int64 value);

  // optional int64 val_count = 7;
  inline bool has_val_count() const;
  inline void clear_val_count();
  static const int kValCountFieldNumber = 7;
  inline ::google::protobuf::int64 val_count() const;
  inline void set_val_count(::google::protobuf::int64 value);

  // optional int64 intent_count = 8;
  inline bool has_intent_count() const;
  inline void clear_intent_count();
  static const int kIntentCountFieldNumber = 8;
  inline ::google::protobuf::int64 intent_count() const;
  inline void set_intent_count(::google::protobuf::int64 value);

  // optional int64 intent_age = 9;
  inline bool has_intent_age() const;
  inline void clear_intent_age();
  static const int kIntentAgeFieldNumber = 9;
  inline ::google::protobuf::int64 intent_age() const;
  inline void set_intent_age(::google::protobuf::int64 value);

  // optional int64 gc_bytes_age = 10;
  inline bool has_gc_bytes_age() const;
  inline void clear_gc_bytes_age();
  static const int kGcBytesAgeFieldNumber = 10;
  inline ::google::protobuf::int64 gc_bytes_age() const;
  inline void set_gc_bytes_age(::google::protobuf::int64 value);

  // optional int64 last_update_nanos = 11;
  inline bool has_last_update_nanos() const;
  inline void clear_last_update_nanos();
  static const int kLastUpdateNanosFieldNumber = 11;
  inline ::google::protobuf::int64 last_update_nanos() const;
  inline void set_last_update_nanos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.MVCCStats)
 private:
  inline void set_has_live_bytes();
  inline void clear_has_live_bytes();
  inline void set_has_key_bytes();
  inline void clear_has_key_bytes();
  inline void set_has_val_bytes();
  inline void clear_has_val_bytes();
  inline void set_has_intent_bytes();
  inline void clear_has_intent_bytes();
  inline void set_has_live_count();
  inline void clear_has_live_count();
  inline void set_has_key_count();
  inline void clear_has_key_count();
  inline void set_has_val_count();
  inline void clear_has_val_count();
  inline void set_has_intent_count();
  inline void clear_has_intent_count();
  inline void set_has_intent_age();
  inline void clear_has_intent_age();
  inline void set_has_gc_bytes_age();
  inline void clear_has_gc_bytes_age();
  inline void set_has_last_update_nanos();
  inline void clear_has_last_update_nanos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 live_bytes_;
  ::google::protobuf::int64 key_bytes_;
  ::google::protobuf::int64 val_bytes_;
  ::google::protobuf::int64 intent_bytes_;
  ::google::protobuf::int64 live_count_;
  ::google::protobuf::int64 key_count_;
  ::google::protobuf::int64 val_count_;
  ::google::protobuf::int64 intent_count_;
  ::google::protobuf::int64 intent_age_;
  ::google::protobuf::int64 gc_bytes_age_;
  ::google::protobuf::int64 last_update_nanos_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MVCCStats* default_instance_;
};
// ===================================================================


// ===================================================================

// Timestamp

// optional int64 wall_time = 1;
inline bool Timestamp::has_wall_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_wall_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_wall_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_wall_time() {
  wall_time_ = GOOGLE_LONGLONG(0);
  clear_has_wall_time();
}
inline ::google::protobuf::int64 Timestamp::wall_time() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Timestamp.wall_time)
  return wall_time_;
}
inline void Timestamp::set_wall_time(::google::protobuf::int64 value) {
  set_has_wall_time();
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Timestamp.wall_time)
}

// optional int32 logical = 2;
inline bool Timestamp::has_logical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_logical() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_logical() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_logical() {
  logical_ = 0;
  clear_has_logical();
}
inline ::google::protobuf::int32 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Timestamp.logical)
  return logical_;
}
inline void Timestamp::set_logical(::google::protobuf::int32 value) {
  set_has_logical();
  logical_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Timestamp.logical)
}

// -------------------------------------------------------------------

// Value

// optional bytes bytes = 1;
inline bool Value::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_bytes() {
  if (bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_->clear();
  }
  clear_has_bytes();
}
inline const ::std::string& Value::bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Value.bytes)
  return *bytes_;
}
inline void Value::set_bytes(const ::std::string& value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Value.bytes)
}
inline void Value::set_bytes(const char* value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Value.bytes)
}
inline void Value::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Value.bytes)
}
inline ::std::string* Value::mutable_bytes() {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Value.bytes)
  return bytes_;
}
inline ::std::string* Value::release_bytes() {
  clear_has_bytes();
  if (bytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bytes_;
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Value::set_allocated_bytes(::std::string* bytes) {
  if (bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bytes_;
  }
  if (bytes) {
    set_has_bytes();
    bytes_ = bytes;
  } else {
    clear_has_bytes();
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Value.bytes)
}

// optional int64 integer = 2;
inline bool Value::has_integer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_integer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_integer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_integer() {
  integer_ = GOOGLE_LONGLONG(0);
  clear_has_integer();
}
inline ::google::protobuf::int64 Value::integer() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Value.integer)
  return integer_;
}
inline void Value::set_integer(::google::protobuf::int64 value) {
  set_has_integer();
  integer_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Value.integer)
}

// optional fixed32 checksum = 3;
inline bool Value::has_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 Value::checksum() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Value.checksum)
  return checksum_;
}
inline void Value::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Value.checksum)
}

// optional .cockroach.proto.Timestamp timestamp = 4;
inline bool Value::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& Value::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Value.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* Value::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Value.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* Value::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Value::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Value.timestamp)
}

// optional string tag = 5;
inline bool Value::has_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Value::set_has_tag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Value::clear_has_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Value::clear_tag() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_->clear();
  }
  clear_has_tag();
}
inline const ::std::string& Value::tag() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Value.tag)
  return *tag_;
}
inline void Value::set_tag(const ::std::string& value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Value.tag)
}
inline void Value::set_tag(const char* value) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Value.tag)
}
inline void Value::set_tag(const char* value, size_t size) {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Value.tag)
}
inline ::std::string* Value::mutable_tag() {
  set_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tag_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Value.tag)
  return tag_;
}
inline ::std::string* Value::release_tag() {
  clear_has_tag();
  if (tag_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tag_;
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Value::set_allocated_tag(::std::string* tag) {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (tag) {
    set_has_tag();
    tag_ = tag;
  } else {
    clear_has_tag();
    tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Value.tag)
}

// -------------------------------------------------------------------

// MVCCValue

// optional bool deleted = 1;
inline bool MVCCValue::has_deleted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCValue::set_has_deleted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCValue::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCValue::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCValue::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCValue.deleted)
  return deleted_;
}
inline void MVCCValue::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCValue.deleted)
}

// optional .cockroach.proto.Value value = 2;
inline bool MVCCValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& MVCCValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* MVCCValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::cockroach::proto::Value;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MVCCValue.value)
  return value_;
}
inline ::cockroach::proto::Value* MVCCValue::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void MVCCValue::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MVCCValue.value)
}

// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KeyValue.key)
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KeyValue.key)
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KeyValue.key)
}

// optional .cockroach.proto.Value value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.KeyValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::cockroach::proto::Value;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.KeyValue.value)
  return value_;
}
inline ::cockroach::proto::Value* KeyValue::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void KeyValue::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.KeyValue.value)
}

// -------------------------------------------------------------------

// RawKeyValue

// optional bytes key = 1;
inline bool RawKeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawKeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawKeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawKeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RawKeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RawKeyValue.key)
  return *key_;
}
inline void RawKeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RawKeyValue.key)
}
inline void RawKeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RawKeyValue.key)
}
inline void RawKeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RawKeyValue.key)
}
inline ::std::string* RawKeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RawKeyValue.key)
  return key_;
}
inline ::std::string* RawKeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawKeyValue::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RawKeyValue.key)
}

// optional bytes value = 2;
inline bool RawKeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawKeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawKeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RawKeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RawKeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RawKeyValue.value)
  return *value_;
}
inline void RawKeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RawKeyValue.value)
}
inline void RawKeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RawKeyValue.value)
}
inline void RawKeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RawKeyValue.value)
}
inline ::std::string* RawKeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RawKeyValue.value)
  return value_;
}
inline ::std::string* RawKeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RawKeyValue::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RawKeyValue.value)
}

// -------------------------------------------------------------------

// StoreIdent

// optional string cluster_id = 1;
inline bool StoreIdent::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreIdent::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreIdent::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreIdent::clear_cluster_id() {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_->clear();
  }
  clear_has_cluster_id();
}
inline const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreIdent.cluster_id)
  return *cluster_id_;
}
inline void StoreIdent::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreIdent.cluster_id)
}
inline void StoreIdent::set_cluster_id(const char* value) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.StoreIdent.cluster_id)
}
inline void StoreIdent::set_cluster_id(const char* value, size_t size) {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  cluster_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.StoreIdent.cluster_id)
}
inline ::std::string* StoreIdent::mutable_cluster_id() {
  set_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cluster_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.StoreIdent.cluster_id)
  return cluster_id_;
}
inline ::std::string* StoreIdent::release_cluster_id() {
  clear_has_cluster_id();
  if (cluster_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cluster_id_;
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_id_;
  }
  if (cluster_id) {
    set_has_cluster_id();
    cluster_id_ = cluster_id;
  } else {
    clear_has_cluster_id();
    cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.StoreIdent.cluster_id)
}

// optional int32 node_id = 2;
inline bool StoreIdent::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreIdent::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreIdent::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreIdent::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreIdent.node_id)
  return node_id_;
}
inline void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreIdent.node_id)
}

// optional int32 store_id = 3;
inline bool StoreIdent::has_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreIdent::set_has_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreIdent::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreIdent::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.StoreIdent.store_id)
  return store_id_;
}
inline void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.StoreIdent.store_id)
}

// -------------------------------------------------------------------

// SplitTrigger

// optional .cockroach.proto.RangeDescriptor updated_desc = 1;
inline bool SplitTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
inline const ::cockroach::proto::RangeDescriptor& SplitTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.SplitTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
inline ::cockroach::proto::RangeDescriptor* SplitTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) updated_desc_ = new ::cockroach::proto::RangeDescriptor;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.SplitTrigger.updated_desc)
  return updated_desc_;
}
inline ::cockroach::proto::RangeDescriptor* SplitTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::proto::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
inline void SplitTrigger::set_allocated_updated_desc(::cockroach::proto::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.SplitTrigger.updated_desc)
}

// optional .cockroach.proto.RangeDescriptor new_desc = 2;
inline bool SplitTrigger::has_new_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitTrigger::set_has_new_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitTrigger::clear_has_new_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitTrigger::clear_new_desc() {
  if (new_desc_ != NULL) new_desc_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_new_desc();
}
inline const ::cockroach::proto::RangeDescriptor& SplitTrigger::new_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.SplitTrigger.new_desc)
  return new_desc_ != NULL ? *new_desc_ : *default_instance_->new_desc_;
}
inline ::cockroach::proto::RangeDescriptor* SplitTrigger::mutable_new_desc() {
  set_has_new_desc();
  if (new_desc_ == NULL) new_desc_ = new ::cockroach::proto::RangeDescriptor;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.SplitTrigger.new_desc)
  return new_desc_;
}
inline ::cockroach::proto::RangeDescriptor* SplitTrigger::release_new_desc() {
  clear_has_new_desc();
  ::cockroach::proto::RangeDescriptor* temp = new_desc_;
  new_desc_ = NULL;
  return temp;
}
inline void SplitTrigger::set_allocated_new_desc(::cockroach::proto::RangeDescriptor* new_desc) {
  delete new_desc_;
  new_desc_ = new_desc;
  if (new_desc) {
    set_has_new_desc();
  } else {
    clear_has_new_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.SplitTrigger.new_desc)
}

// -------------------------------------------------------------------

// MergeTrigger

// optional .cockroach.proto.RangeDescriptor updated_desc = 1;
inline bool MergeTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MergeTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MergeTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MergeTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
inline const ::cockroach::proto::RangeDescriptor& MergeTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MergeTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
inline ::cockroach::proto::RangeDescriptor* MergeTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) updated_desc_ = new ::cockroach::proto::RangeDescriptor;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MergeTrigger.updated_desc)
  return updated_desc_;
}
inline ::cockroach::proto::RangeDescriptor* MergeTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::proto::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
inline void MergeTrigger::set_allocated_updated_desc(::cockroach::proto::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MergeTrigger.updated_desc)
}

// optional int64 subsumed_raft_id = 2;
inline bool MergeTrigger::has_subsumed_raft_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MergeTrigger::set_has_subsumed_raft_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MergeTrigger::clear_has_subsumed_raft_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MergeTrigger::clear_subsumed_raft_id() {
  subsumed_raft_id_ = GOOGLE_LONGLONG(0);
  clear_has_subsumed_raft_id();
}
inline ::google::protobuf::int64 MergeTrigger::subsumed_raft_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MergeTrigger.subsumed_raft_id)
  return subsumed_raft_id_;
}
inline void MergeTrigger::set_subsumed_raft_id(::google::protobuf::int64 value) {
  set_has_subsumed_raft_id();
  subsumed_raft_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MergeTrigger.subsumed_raft_id)
}

// -------------------------------------------------------------------

// ChangeReplicasTrigger

// optional int32 node_id = 1;
inline bool ChangeReplicasTrigger::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeReplicasTrigger::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeReplicasTrigger::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeReplicasTrigger::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 ChangeReplicasTrigger::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ChangeReplicasTrigger.node_id)
  return node_id_;
}
inline void ChangeReplicasTrigger::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ChangeReplicasTrigger.node_id)
}

// optional int32 store_id = 2;
inline bool ChangeReplicasTrigger::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeReplicasTrigger::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeReplicasTrigger::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeReplicasTrigger::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 ChangeReplicasTrigger::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ChangeReplicasTrigger.store_id)
  return store_id_;
}
inline void ChangeReplicasTrigger::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ChangeReplicasTrigger.store_id)
}

// optional .cockroach.proto.ReplicaChangeType change_type = 3;
inline bool ChangeReplicasTrigger::has_change_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeReplicasTrigger::set_has_change_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeReplicasTrigger::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
inline ::cockroach::proto::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ChangeReplicasTrigger.change_type)
  return static_cast< ::cockroach::proto::ReplicaChangeType >(change_type_);
}
inline void ChangeReplicasTrigger::set_change_type(::cockroach::proto::ReplicaChangeType value) {
  assert(::cockroach::proto::ReplicaChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.ChangeReplicasTrigger.change_type)
}

// repeated .cockroach.proto.Replica updated_replicas = 4;
inline int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
inline void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
inline const ::cockroach::proto::Replica& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
inline ::cockroach::proto::Replica* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
inline ::cockroach::proto::Replica* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.proto.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::Replica >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}

// -------------------------------------------------------------------

// InternalCommitTrigger

// optional .cockroach.proto.SplitTrigger split_trigger = 1;
inline bool InternalCommitTrigger::has_split_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalCommitTrigger::set_has_split_trigger() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalCommitTrigger::clear_has_split_trigger() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalCommitTrigger::clear_split_trigger() {
  if (split_trigger_ != NULL) split_trigger_->::cockroach::proto::SplitTrigger::Clear();
  clear_has_split_trigger();
}
inline const ::cockroach::proto::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalCommitTrigger.split_trigger)
  return split_trigger_ != NULL ? *split_trigger_ : *default_instance_->split_trigger_;
}
inline ::cockroach::proto::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  set_has_split_trigger();
  if (split_trigger_ == NULL) split_trigger_ = new ::cockroach::proto::SplitTrigger;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
inline ::cockroach::proto::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  clear_has_split_trigger();
  ::cockroach::proto::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_split_trigger(::cockroach::proto::SplitTrigger* split_trigger) {
  delete split_trigger_;
  split_trigger_ = split_trigger;
  if (split_trigger) {
    set_has_split_trigger();
  } else {
    clear_has_split_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalCommitTrigger.split_trigger)
}

// optional .cockroach.proto.MergeTrigger merge_trigger = 2;
inline bool InternalCommitTrigger::has_merge_trigger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalCommitTrigger::set_has_merge_trigger() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalCommitTrigger::clear_has_merge_trigger() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalCommitTrigger::clear_merge_trigger() {
  if (merge_trigger_ != NULL) merge_trigger_->::cockroach::proto::MergeTrigger::Clear();
  clear_has_merge_trigger();
}
inline const ::cockroach::proto::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalCommitTrigger.merge_trigger)
  return merge_trigger_ != NULL ? *merge_trigger_ : *default_instance_->merge_trigger_;
}
inline ::cockroach::proto::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  set_has_merge_trigger();
  if (merge_trigger_ == NULL) merge_trigger_ = new ::cockroach::proto::MergeTrigger;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
inline ::cockroach::proto::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  clear_has_merge_trigger();
  ::cockroach::proto::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_merge_trigger(::cockroach::proto::MergeTrigger* merge_trigger) {
  delete merge_trigger_;
  merge_trigger_ = merge_trigger;
  if (merge_trigger) {
    set_has_merge_trigger();
  } else {
    clear_has_merge_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalCommitTrigger.merge_trigger)
}

// optional .cockroach.proto.ChangeReplicasTrigger change_replicas_trigger = 3;
inline bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InternalCommitTrigger::set_has_change_replicas_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InternalCommitTrigger::clear_has_change_replicas_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::proto::ChangeReplicasTrigger::Clear();
  clear_has_change_replicas_trigger();
}
inline const ::cockroach::proto::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_ != NULL ? *change_replicas_trigger_ : *default_instance_->change_replicas_trigger_;
}
inline ::cockroach::proto::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  set_has_change_replicas_trigger();
  if (change_replicas_trigger_ == NULL) change_replicas_trigger_ = new ::cockroach::proto::ChangeReplicasTrigger;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
inline ::cockroach::proto::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  clear_has_change_replicas_trigger();
  ::cockroach::proto::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_change_replicas_trigger(::cockroach::proto::ChangeReplicasTrigger* change_replicas_trigger) {
  delete change_replicas_trigger_;
  change_replicas_trigger_ = change_replicas_trigger;
  if (change_replicas_trigger) {
    set_has_change_replicas_trigger();
  } else {
    clear_has_change_replicas_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.InternalCommitTrigger.change_replicas_trigger)
}

// repeated bytes intents = 4;
inline int InternalCommitTrigger::intents_size() const {
  return intents_.size();
}
inline void InternalCommitTrigger::clear_intents() {
  intents_.Clear();
}
inline const ::std::string& InternalCommitTrigger::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalCommitTrigger.intents)
  return intents_.Get(index);
}
inline ::std::string* InternalCommitTrigger::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalCommitTrigger.intents)
  return intents_.Mutable(index);
}
inline void InternalCommitTrigger::set_intents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalCommitTrigger.intents)
  intents_.Mutable(index)->assign(value);
}
inline void InternalCommitTrigger::set_intents(int index, const char* value) {
  intents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.InternalCommitTrigger.intents)
}
inline void InternalCommitTrigger::set_intents(int index, const void* value, size_t size) {
  intents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.InternalCommitTrigger.intents)
}
inline ::std::string* InternalCommitTrigger::add_intents() {
  return intents_.Add();
}
inline void InternalCommitTrigger::add_intents(const ::std::string& value) {
  intents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalCommitTrigger.intents)
}
inline void InternalCommitTrigger::add_intents(const char* value) {
  intents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.proto.InternalCommitTrigger.intents)
}
inline void InternalCommitTrigger::add_intents(const void* value, size_t size) {
  intents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.proto.InternalCommitTrigger.intents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InternalCommitTrigger::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalCommitTrigger.intents)
  return intents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InternalCommitTrigger::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalCommitTrigger.intents)
  return &intents_;
}

// -------------------------------------------------------------------

// NodeList

// repeated int32 nodes = 1 [packed = true];
inline int NodeList::nodes_size() const {
  return nodes_.size();
}
inline void NodeList::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::int32 NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.NodeList.nodes)
  return nodes_.Get(index);
}
inline void NodeList::set_nodes(int index, ::google::protobuf::int32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.proto.NodeList.nodes)
}
inline void NodeList::add_nodes(::google::protobuf::int32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.proto.NodeList.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.NodeList.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.NodeList.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// Transaction

// optional string name = 1;
inline bool Transaction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.name)
  return *name_;
}
inline void Transaction::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.name)
}
inline void Transaction::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Transaction.name)
}
inline void Transaction::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Transaction.name)
}
inline ::std::string* Transaction::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.name)
  return name_;
}
inline ::std::string* Transaction::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Transaction::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.name)
}

// optional bytes key = 2;
inline bool Transaction::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Transaction::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.key)
  return *key_;
}
inline void Transaction::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.key)
}
inline void Transaction::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Transaction.key)
}
inline void Transaction::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Transaction.key)
}
inline ::std::string* Transaction::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.key)
  return key_;
}
inline ::std::string* Transaction::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Transaction::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.key)
}

// optional bytes id = 3;
inline bool Transaction::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Transaction::id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.id)
  return *id_;
}
inline void Transaction::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.id)
}
inline void Transaction::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.Transaction.id)
}
inline void Transaction::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.Transaction.id)
}
inline ::std::string* Transaction::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.id)
  return id_;
}
inline ::std::string* Transaction::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Transaction::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.id)
}

// optional int32 priority = 4;
inline bool Transaction::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Transaction::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.priority)
  return priority_;
}
inline void Transaction::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.priority)
}

// optional .cockroach.proto.IsolationType isolation = 5;
inline bool Transaction::has_isolation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transaction::set_has_isolation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transaction::clear_has_isolation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transaction::clear_isolation() {
  isolation_ = 0;
  clear_has_isolation();
}
inline ::cockroach::proto::IsolationType Transaction::isolation() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.isolation)
  return static_cast< ::cockroach::proto::IsolationType >(isolation_);
}
inline void Transaction::set_isolation(::cockroach::proto::IsolationType value) {
  assert(::cockroach::proto::IsolationType_IsValid(value));
  set_has_isolation();
  isolation_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.isolation)
}

// optional .cockroach.proto.TransactionStatus status = 6;
inline bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transaction::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transaction::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::cockroach::proto::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.status)
  return static_cast< ::cockroach::proto::TransactionStatus >(status_);
}
inline void Transaction::set_status(::cockroach::proto::TransactionStatus value) {
  assert(::cockroach::proto::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.status)
}

// optional int32 epoch = 7;
inline bool Transaction::has_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transaction::set_has_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transaction::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transaction::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
inline ::google::protobuf::int32 Transaction::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.epoch)
  return epoch_;
}
inline void Transaction::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Transaction.epoch)
}

// optional .cockroach.proto.Timestamp last_heartbeat = 8;
inline bool Transaction::has_last_heartbeat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transaction::set_has_last_heartbeat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transaction::clear_has_last_heartbeat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transaction::clear_last_heartbeat() {
  if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::proto::Timestamp::Clear();
  clear_has_last_heartbeat();
}
inline const ::cockroach::proto::Timestamp& Transaction::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.last_heartbeat)
  return last_heartbeat_ != NULL ? *last_heartbeat_ : *default_instance_->last_heartbeat_;
}
inline ::cockroach::proto::Timestamp* Transaction::mutable_last_heartbeat() {
  set_has_last_heartbeat();
  if (last_heartbeat_ == NULL) last_heartbeat_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.last_heartbeat)
  return last_heartbeat_;
}
inline ::cockroach::proto::Timestamp* Transaction::release_last_heartbeat() {
  clear_has_last_heartbeat();
  ::cockroach::proto::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_last_heartbeat(::cockroach::proto::Timestamp* last_heartbeat) {
  delete last_heartbeat_;
  last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    set_has_last_heartbeat();
  } else {
    clear_has_last_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.last_heartbeat)
}

// optional .cockroach.proto.Timestamp timestamp = 9;
inline bool Transaction::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transaction::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transaction::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transaction::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.timestamp)
}

// optional .cockroach.proto.Timestamp orig_timestamp = 10;
inline bool Transaction::has_orig_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transaction::set_has_orig_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transaction::clear_has_orig_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transaction::clear_orig_timestamp() {
  if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_orig_timestamp();
}
inline const ::cockroach::proto::Timestamp& Transaction::orig_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.orig_timestamp)
  return orig_timestamp_ != NULL ? *orig_timestamp_ : *default_instance_->orig_timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::mutable_orig_timestamp() {
  set_has_orig_timestamp();
  if (orig_timestamp_ == NULL) orig_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.orig_timestamp)
  return orig_timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::release_orig_timestamp() {
  clear_has_orig_timestamp();
  ::cockroach::proto::Timestamp* temp = orig_timestamp_;
  orig_timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_orig_timestamp(::cockroach::proto::Timestamp* orig_timestamp) {
  delete orig_timestamp_;
  orig_timestamp_ = orig_timestamp;
  if (orig_timestamp) {
    set_has_orig_timestamp();
  } else {
    clear_has_orig_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.orig_timestamp)
}

// optional .cockroach.proto.Timestamp max_timestamp = 11;
inline bool Transaction::has_max_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Transaction::set_has_max_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Transaction::clear_has_max_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Transaction::clear_max_timestamp() {
  if (max_timestamp_ != NULL) max_timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_max_timestamp();
}
inline const ::cockroach::proto::Timestamp& Transaction::max_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.max_timestamp)
  return max_timestamp_ != NULL ? *max_timestamp_ : *default_instance_->max_timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::mutable_max_timestamp() {
  set_has_max_timestamp();
  if (max_timestamp_ == NULL) max_timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.max_timestamp)
  return max_timestamp_;
}
inline ::cockroach::proto::Timestamp* Transaction::release_max_timestamp() {
  clear_has_max_timestamp();
  ::cockroach::proto::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_max_timestamp(::cockroach::proto::Timestamp* max_timestamp) {
  delete max_timestamp_;
  max_timestamp_ = max_timestamp;
  if (max_timestamp) {
    set_has_max_timestamp();
  } else {
    clear_has_max_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.max_timestamp)
}

// optional .cockroach.proto.NodeList certain_nodes = 12;
inline bool Transaction::has_certain_nodes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Transaction::set_has_certain_nodes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Transaction::clear_has_certain_nodes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Transaction::clear_certain_nodes() {
  if (certain_nodes_ != NULL) certain_nodes_->::cockroach::proto::NodeList::Clear();
  clear_has_certain_nodes();
}
inline const ::cockroach::proto::NodeList& Transaction::certain_nodes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Transaction.certain_nodes)
  return certain_nodes_ != NULL ? *certain_nodes_ : *default_instance_->certain_nodes_;
}
inline ::cockroach::proto::NodeList* Transaction::mutable_certain_nodes() {
  set_has_certain_nodes();
  if (certain_nodes_ == NULL) certain_nodes_ = new ::cockroach::proto::NodeList;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.Transaction.certain_nodes)
  return certain_nodes_;
}
inline ::cockroach::proto::NodeList* Transaction::release_certain_nodes() {
  clear_has_certain_nodes();
  ::cockroach::proto::NodeList* temp = certain_nodes_;
  certain_nodes_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_certain_nodes(::cockroach::proto::NodeList* certain_nodes) {
  delete certain_nodes_;
  certain_nodes_ = certain_nodes;
  if (certain_nodes) {
    set_has_certain_nodes();
  } else {
    clear_has_certain_nodes();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.Transaction.certain_nodes)
}

// -------------------------------------------------------------------

// Lease

// optional int64 expiration = 1;
inline bool Lease::has_expiration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lease::set_has_expiration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lease::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lease::clear_expiration() {
  expiration_ = GOOGLE_LONGLONG(0);
  clear_has_expiration();
}
inline ::google::protobuf::int64 Lease::expiration() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Lease.expiration)
  return expiration_;
}
inline void Lease::set_expiration(::google::protobuf::int64 value) {
  set_has_expiration();
  expiration_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Lease.expiration)
}

// optional int64 duration = 2;
inline bool Lease::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lease::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lease::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lease::clear_duration() {
  duration_ = GOOGLE_LONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::int64 Lease::duration() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Lease.duration)
  return duration_;
}
inline void Lease::set_duration(::google::protobuf::int64 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Lease.duration)
}

// optional uint64 term = 3;
inline bool Lease::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lease::set_has_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lease::clear_has_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lease::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 Lease::term() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Lease.term)
  return term_;
}
inline void Lease::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Lease.term)
}

// optional uint64 raft_node_id = 4;
inline bool Lease::has_raft_node_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lease::set_has_raft_node_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lease::clear_has_raft_node_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lease::clear_raft_node_id() {
  raft_node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_raft_node_id();
}
inline ::google::protobuf::uint64 Lease::raft_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.Lease.raft_node_id)
  return raft_node_id_;
}
inline void Lease::set_raft_node_id(::google::protobuf::uint64 value) {
  set_has_raft_node_id();
  raft_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.Lease.raft_node_id)
}

// -------------------------------------------------------------------

// MVCCMetadata

// optional .cockroach.proto.Transaction txn = 1;
inline bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCMetadata::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::proto::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::proto::Transaction& MVCCMetadata::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::proto::Transaction* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) txn_ = new ::cockroach::proto::Transaction;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MVCCMetadata.txn)
  return txn_;
}
inline ::cockroach::proto::Transaction* MVCCMetadata::release_txn() {
  clear_has_txn();
  ::cockroach::proto::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_txn(::cockroach::proto::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MVCCMetadata.txn)
}

// optional .cockroach.proto.Timestamp timestamp = 2;
inline bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCMetadata::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::proto::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::proto::Timestamp& MVCCMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MVCCMetadata.timestamp)
  return timestamp_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::proto::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_timestamp(::cockroach::proto::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MVCCMetadata.timestamp)
}

// optional bool deleted = 3;
inline bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.deleted)
  return deleted_;
}
inline void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCMetadata.deleted)
}

// optional int64 key_bytes = 4;
inline bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.key_bytes)
  return key_bytes_;
}
inline void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCMetadata.key_bytes)
}

// optional int64 val_bytes = 5;
inline bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.val_bytes)
  return val_bytes_;
}
inline void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCMetadata.val_bytes)
}

// optional .cockroach.proto.Value value = 6;
inline bool MVCCMetadata::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCMetadata::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCMetadata::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCMetadata::clear_value() {
  if (value_ != NULL) value_->::cockroach::proto::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::proto::Value& MVCCMetadata::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::proto::Value* MVCCMetadata::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::cockroach::proto::Value;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MVCCMetadata.value)
  return value_;
}
inline ::cockroach::proto::Value* MVCCMetadata::release_value() {
  clear_has_value();
  ::cockroach::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_value(::cockroach::proto::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MVCCMetadata.value)
}

// optional .cockroach.proto.Timestamp last_evicted = 7;
inline bool MVCCMetadata::has_last_evicted() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCMetadata::set_has_last_evicted() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCMetadata::clear_has_last_evicted() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCMetadata::clear_last_evicted() {
  if (last_evicted_ != NULL) last_evicted_->::cockroach::proto::Timestamp::Clear();
  clear_has_last_evicted();
}
inline const ::cockroach::proto::Timestamp& MVCCMetadata::last_evicted() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCMetadata.last_evicted)
  return last_evicted_ != NULL ? *last_evicted_ : *default_instance_->last_evicted_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::mutable_last_evicted() {
  set_has_last_evicted();
  if (last_evicted_ == NULL) last_evicted_ = new ::cockroach::proto::Timestamp;
  // @@protoc_insertion_point(field_mutable:cockroach.proto.MVCCMetadata.last_evicted)
  return last_evicted_;
}
inline ::cockroach::proto::Timestamp* MVCCMetadata::release_last_evicted() {
  clear_has_last_evicted();
  ::cockroach::proto::Timestamp* temp = last_evicted_;
  last_evicted_ = NULL;
  return temp;
}
inline void MVCCMetadata::set_allocated_last_evicted(::cockroach::proto::Timestamp* last_evicted) {
  delete last_evicted_;
  last_evicted_ = last_evicted;
  if (last_evicted) {
    set_has_last_evicted();
  } else {
    clear_has_last_evicted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.MVCCMetadata.last_evicted)
}

// -------------------------------------------------------------------

// GCMetadata

// optional int64 last_scan_nanos = 1;
inline bool GCMetadata::has_last_scan_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMetadata::set_has_last_scan_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMetadata::clear_has_last_scan_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMetadata::clear_last_scan_nanos() {
  last_scan_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_scan_nanos();
}
inline ::google::protobuf::int64 GCMetadata::last_scan_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GCMetadata.last_scan_nanos)
  return last_scan_nanos_;
}
inline void GCMetadata::set_last_scan_nanos(::google::protobuf::int64 value) {
  set_has_last_scan_nanos();
  last_scan_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GCMetadata.last_scan_nanos)
}

// optional int64 oldest_intent_nanos = 2;
inline bool GCMetadata::has_oldest_intent_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCMetadata::set_has_oldest_intent_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCMetadata::clear_has_oldest_intent_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCMetadata::clear_oldest_intent_nanos() {
  oldest_intent_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_oldest_intent_nanos();
}
inline ::google::protobuf::int64 GCMetadata::oldest_intent_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.GCMetadata.oldest_intent_nanos)
  return oldest_intent_nanos_;
}
inline void GCMetadata::set_oldest_intent_nanos(::google::protobuf::int64 value) {
  set_has_oldest_intent_nanos();
  oldest_intent_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.GCMetadata.oldest_intent_nanos)
}

// -------------------------------------------------------------------

// TimeSeriesDatapoint

// optional int64 timestamp_nanos = 1;
inline bool TimeSeriesDatapoint::has_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesDatapoint::set_has_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesDatapoint::clear_has_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesDatapoint::clear_timestamp_nanos() {
  timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_nanos();
}
inline ::google::protobuf::int64 TimeSeriesDatapoint::timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesDatapoint.timestamp_nanos)
  return timestamp_nanos_;
}
inline void TimeSeriesDatapoint::set_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_timestamp_nanos();
  timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesDatapoint.timestamp_nanos)
}

// optional int64 int_value = 2;
inline bool TimeSeriesDatapoint::has_int_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSeriesDatapoint::set_has_int_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSeriesDatapoint::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSeriesDatapoint::clear_int_value() {
  int_value_ = GOOGLE_LONGLONG(0);
  clear_has_int_value();
}
inline ::google::protobuf::int64 TimeSeriesDatapoint::int_value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesDatapoint.int_value)
  return int_value_;
}
inline void TimeSeriesDatapoint::set_int_value(::google::protobuf::int64 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesDatapoint.int_value)
}

// optional float float_value = 3;
inline bool TimeSeriesDatapoint::has_float_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeSeriesDatapoint::set_has_float_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeSeriesDatapoint::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeSeriesDatapoint::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float TimeSeriesDatapoint::float_value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesDatapoint.float_value)
  return float_value_;
}
inline void TimeSeriesDatapoint::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesDatapoint.float_value)
}

// -------------------------------------------------------------------

// TimeSeriesData

// optional string name = 1;
inline bool TimeSeriesData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSeriesData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSeriesData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSeriesData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TimeSeriesData::name() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.name)
  return *name_;
}
inline void TimeSeriesData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesData.name)
}
inline void TimeSeriesData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesData.name)
}
inline void TimeSeriesData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesData.name)
}
inline ::std::string* TimeSeriesData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.name)
  return name_;
}
inline ::std::string* TimeSeriesData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesData.name)
}

// optional string source = 2;
inline bool TimeSeriesData::has_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSeriesData::set_has_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSeriesData::clear_has_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSeriesData::clear_source() {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& TimeSeriesData::source() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.source)
  return *source_;
}
inline void TimeSeriesData::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set:cockroach.proto.TimeSeriesData.source)
}
inline void TimeSeriesData::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.proto.TimeSeriesData.source)
}
inline void TimeSeriesData::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.TimeSeriesData.source)
}
inline ::std::string* TimeSeriesData::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.source)
  return source_;
}
inline ::std::string* TimeSeriesData::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TimeSeriesData::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.TimeSeriesData.source)
}

// repeated .cockroach.proto.TimeSeriesDatapoint datapoints = 3;
inline int TimeSeriesData::datapoints_size() const {
  return datapoints_.size();
}
inline void TimeSeriesData::clear_datapoints() {
  datapoints_.Clear();
}
inline const ::cockroach::proto::TimeSeriesDatapoint& TimeSeriesData::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Get(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesData::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Mutable(index);
}
inline ::cockroach::proto::TimeSeriesDatapoint* TimeSeriesData::add_datapoints() {
  // @@protoc_insertion_point(field_add:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >&
TimeSeriesData::datapoints() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.TimeSeriesData.datapoints)
  return datapoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::TimeSeriesDatapoint >*
TimeSeriesData::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.TimeSeriesData.datapoints)
  return &datapoints_;
}

// -------------------------------------------------------------------

// MVCCStats

// optional int64 live_bytes = 1;
inline bool MVCCStats::has_live_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVCCStats::set_has_live_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVCCStats::clear_has_live_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVCCStats::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_live_bytes();
}
inline ::google::protobuf::int64 MVCCStats::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.live_bytes)
  return live_bytes_;
}
inline void MVCCStats::set_live_bytes(::google::protobuf::int64 value) {
  set_has_live_bytes();
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.live_bytes)
}

// optional int64 key_bytes = 2;
inline bool MVCCStats::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVCCStats::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVCCStats::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVCCStats::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
inline ::google::protobuf::int64 MVCCStats::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.key_bytes)
  return key_bytes_;
}
inline void MVCCStats::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.key_bytes)
}

// optional int64 val_bytes = 3;
inline bool MVCCStats::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVCCStats::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVCCStats::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVCCStats::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
inline ::google::protobuf::int64 MVCCStats::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.val_bytes)
  return val_bytes_;
}
inline void MVCCStats::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.val_bytes)
}

// optional int64 intent_bytes = 4;
inline bool MVCCStats::has_intent_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MVCCStats::set_has_intent_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MVCCStats::clear_has_intent_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MVCCStats::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_intent_bytes();
}
inline ::google::protobuf::int64 MVCCStats::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.intent_bytes)
  return intent_bytes_;
}
inline void MVCCStats::set_intent_bytes(::google::protobuf::int64 value) {
  set_has_intent_bytes();
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.intent_bytes)
}

// optional int64 live_count = 5;
inline bool MVCCStats::has_live_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MVCCStats::set_has_live_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MVCCStats::clear_has_live_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MVCCStats::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
  clear_has_live_count();
}
inline ::google::protobuf::int64 MVCCStats::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.live_count)
  return live_count_;
}
inline void MVCCStats::set_live_count(::google::protobuf::int64 value) {
  set_has_live_count();
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.live_count)
}

// optional int64 key_count = 6;
inline bool MVCCStats::has_key_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MVCCStats::set_has_key_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MVCCStats::clear_has_key_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MVCCStats::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
  clear_has_key_count();
}
inline ::google::protobuf::int64 MVCCStats::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.key_count)
  return key_count_;
}
inline void MVCCStats::set_key_count(::google::protobuf::int64 value) {
  set_has_key_count();
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.key_count)
}

// optional int64 val_count = 7;
inline bool MVCCStats::has_val_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MVCCStats::set_has_val_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MVCCStats::clear_has_val_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MVCCStats::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
  clear_has_val_count();
}
inline ::google::protobuf::int64 MVCCStats::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.val_count)
  return val_count_;
}
inline void MVCCStats::set_val_count(::google::protobuf::int64 value) {
  set_has_val_count();
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.val_count)
}

// optional int64 intent_count = 8;
inline bool MVCCStats::has_intent_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MVCCStats::set_has_intent_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MVCCStats::clear_has_intent_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MVCCStats::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
  clear_has_intent_count();
}
inline ::google::protobuf::int64 MVCCStats::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.intent_count)
  return intent_count_;
}
inline void MVCCStats::set_intent_count(::google::protobuf::int64 value) {
  set_has_intent_count();
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.intent_count)
}

// optional int64 intent_age = 9;
inline bool MVCCStats::has_intent_age() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MVCCStats::set_has_intent_age() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MVCCStats::clear_has_intent_age() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MVCCStats::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
  clear_has_intent_age();
}
inline ::google::protobuf::int64 MVCCStats::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.intent_age)
  return intent_age_;
}
inline void MVCCStats::set_intent_age(::google::protobuf::int64 value) {
  set_has_intent_age();
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.intent_age)
}

// optional int64 gc_bytes_age = 10;
inline bool MVCCStats::has_gc_bytes_age() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MVCCStats::set_has_gc_bytes_age() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MVCCStats::clear_has_gc_bytes_age() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MVCCStats::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  clear_has_gc_bytes_age();
}
inline ::google::protobuf::int64 MVCCStats::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.gc_bytes_age)
  return gc_bytes_age_;
}
inline void MVCCStats::set_gc_bytes_age(::google::protobuf::int64 value) {
  set_has_gc_bytes_age();
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.gc_bytes_age)
}

// optional int64 last_update_nanos = 11;
inline bool MVCCStats::has_last_update_nanos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MVCCStats::set_has_last_update_nanos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MVCCStats::clear_has_last_update_nanos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MVCCStats::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_nanos();
}
inline ::google::protobuf::int64 MVCCStats::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.MVCCStats.last_update_nanos)
  return last_update_nanos_;
}
inline void MVCCStats::set_last_update_nanos(::google::protobuf::int64 value) {
  set_has_last_update_nanos();
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.MVCCStats.last_update_nanos)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::proto::ReplicaChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::proto::ReplicaChangeType>() {
  return ::cockroach::proto::ReplicaChangeType_descriptor();
}
template <> struct is_proto_enum< ::cockroach::proto::IsolationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::proto::IsolationType>() {
  return ::cockroach::proto::IsolationType_descriptor();
}
template <> struct is_proto_enum< ::cockroach::proto::TransactionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::proto::TransactionStatus>() {
  return ::cockroach::proto::TransactionStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2fdata_2eproto__INCLUDED
