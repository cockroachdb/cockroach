// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/storage/engine/enginepb/mvcc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/storage/engine/enginepb/mvcc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace storage {
namespace engine {
namespace enginepb {

void protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto() {
  delete MVCCMetadata::default_instance_;
  delete MVCCStats::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cockroach::roachpb::protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  MVCCMetadata::default_instance_ = new MVCCMetadata();
  MVCCStats::default_instance_ = new MVCCStats();
  MVCCMetadata::default_instance_->InitAsDefaultInstance();
  MVCCStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto_once_);
void protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto_once_,
                 &protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto {
  StaticDescriptorInitializer_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto() {
    protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
  }
} static_descriptor_initializer_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForMVCCMetadata(
    MVCCMetadata* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCMetadata::kTxnFieldNumber;
const int MVCCMetadata::kTimestampFieldNumber;
const int MVCCMetadata::kDeletedFieldNumber;
const int MVCCMetadata::kKeyBytesFieldNumber;
const int MVCCMetadata::kValBytesFieldNumber;
const int MVCCMetadata::kRawBytesFieldNumber;
const int MVCCMetadata::kMergeTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCMetadata::MVCCMetadata()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.MVCCMetadata)
}

void MVCCMetadata::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_ = const_cast< ::cockroach::roachpb::TxnMeta*>(
      ::cockroach::roachpb::TxnMeta::internal_default_instance());
#else
  txn_ = const_cast< ::cockroach::roachpb::TxnMeta*>(&::cockroach::roachpb::TxnMeta::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(
      ::cockroach::roachpb::Timestamp::internal_default_instance());
#else
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  merge_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(
      ::cockroach::roachpb::Timestamp::internal_default_instance());
#else
  merge_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
#endif
}

MVCCMetadata::MVCCMetadata(const MVCCMetadata& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.MVCCMetadata)
}

void MVCCMetadata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txn_ = NULL;
  timestamp_ = NULL;
  deleted_ = false;
  key_bytes_ = GOOGLE_LONGLONG(0);
  val_bytes_ = GOOGLE_LONGLONG(0);
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merge_timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCMetadata::~MVCCMetadata() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.MVCCMetadata)
  SharedDtor();
}

void MVCCMetadata::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete txn_;
    delete timestamp_;
    delete merge_timestamp_;
  }
}

void MVCCMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MVCCMetadata& MVCCMetadata::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
#endif
  return *default_instance_;
}

MVCCMetadata* MVCCMetadata::default_instance_ = NULL;

MVCCMetadata* MVCCMetadata::New(::google::protobuf::Arena* arena) const {
  MVCCMetadata* n = new MVCCMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.MVCCMetadata)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MVCCMetadata, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MVCCMetadata*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(key_bytes_, val_bytes_);
    if (has_txn()) {
      if (txn_ != NULL) txn_->::cockroach::roachpb::TxnMeta::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
    deleted_ = false;
    if (has_raw_bytes()) {
      raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_merge_timestamp()) {
      if (merge_timestamp_ != NULL) merge_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MVCCMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMVCCMetadata, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.MVCCMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.TxnMeta txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 3;
      case 3: {
        if (tag == 24) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_bytes;
        break;
      }

      // optional int64 key_bytes = 4;
      case 4: {
        if (tag == 32) {
         parse_key_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_bytes_)));
          set_has_key_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_val_bytes;
        break;
      }

      // optional int64 val_bytes = 5;
      case 5: {
        if (tag == 40) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_raw_bytes;
        break;
      }

      // optional bytes raw_bytes = 6;
      case 6: {
        if (tag == 50) {
         parse_raw_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_merge_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp merge_timestamp = 7;
      case 7: {
        if (tag == 58) {
         parse_merge_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.MVCCMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.MVCCMetadata)
  return false;
#undef DO_
}

void MVCCMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.MVCCMetadata)
  // optional .cockroach.roachpb.TxnMeta txn = 1;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->txn_, output);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  // optional bool deleted = 3;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->deleted(), output);
  }

  // optional int64 key_bytes = 4;
  if (has_key_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->key_bytes(), output);
  }

  // optional int64 val_bytes = 5;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->val_bytes(), output);
  }

  // optional bytes raw_bytes = 6;
  if (has_raw_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->raw_bytes(), output);
  }

  // optional .cockroach.roachpb.Timestamp merge_timestamp = 7;
  if (has_merge_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->merge_timestamp_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.MVCCMetadata)
}

int MVCCMetadata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.MVCCMetadata)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .cockroach.roachpb.TxnMeta txn = 1;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txn_);
    }

    // optional .cockroach.roachpb.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional bool deleted = 3;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional int64 key_bytes = 4;
    if (has_key_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key_bytes());
    }

    // optional int64 val_bytes = 5;
    if (has_val_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val_bytes());
    }

    // optional bytes raw_bytes = 6;
    if (has_raw_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_bytes());
    }

    // optional .cockroach.roachpb.Timestamp merge_timestamp = 7;
    if (has_merge_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->merge_timestamp_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCMetadata::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MVCCMetadata*>(&from));
}

void MVCCMetadata::MergeFrom(const MVCCMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.MVCCMetadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_txn()) {
      mutable_txn()->::cockroach::roachpb::TxnMeta::MergeFrom(from.txn());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_key_bytes()) {
      set_key_bytes(from.key_bytes());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
    if (from.has_raw_bytes()) {
      set_has_raw_bytes();
      raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
    }
    if (from.has_merge_timestamp()) {
      mutable_merge_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.merge_timestamp());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MVCCMetadata::CopyFrom(const MVCCMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.MVCCMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCMetadata::IsInitialized() const {

  return true;
}

void MVCCMetadata::Swap(MVCCMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCMetadata::InternalSwap(MVCCMetadata* other) {
  std::swap(txn_, other->txn_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(deleted_, other->deleted_);
  std::swap(key_bytes_, other->key_bytes_);
  std::swap(val_bytes_, other->val_bytes_);
  raw_bytes_.Swap(&other->raw_bytes_);
  std::swap(merge_timestamp_, other->merge_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MVCCMetadata::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.MVCCMetadata";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCMetadata

// optional .cockroach.roachpb.TxnMeta txn = 1;
bool MVCCMetadata::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCMetadata::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCMetadata::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCMetadata::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::TxnMeta::Clear();
  clear_has_txn();
}
const ::cockroach::roachpb::TxnMeta& MVCCMetadata::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return txn_ != NULL ? *txn_ : *default_instance().txn_;
#else
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
#endif
}
::cockroach::roachpb::TxnMeta* MVCCMetadata::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
  return txn_;
}
::cockroach::roachpb::TxnMeta* MVCCMetadata::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
  clear_has_txn();
  ::cockroach::roachpb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
void MVCCMetadata::set_allocated_txn(::cockroach::roachpb::TxnMeta* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.txn)
}

// optional .cockroach.roachpb.Timestamp timestamp = 2;
bool MVCCMetadata::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCMetadata::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCMetadata::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCMetadata::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::roachpb::Timestamp& MVCCMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timestamp_ != NULL ? *timestamp_ : *default_instance().timestamp_;
#else
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
#endif
}
::cockroach::roachpb::Timestamp* MVCCMetadata::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
  return timestamp_;
}
::cockroach::roachpb::Timestamp* MVCCMetadata::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void MVCCMetadata::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.timestamp)
}

// optional bool deleted = 3;
bool MVCCMetadata::has_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCMetadata::set_has_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCMetadata::clear_has_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCMetadata::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
 bool MVCCMetadata::deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.deleted)
  return deleted_;
}
 void MVCCMetadata::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.deleted)
}

// optional int64 key_bytes = 4;
bool MVCCMetadata::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MVCCMetadata::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void MVCCMetadata::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void MVCCMetadata::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
 ::google::protobuf::int64 MVCCMetadata::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.key_bytes)
  return key_bytes_;
}
 void MVCCMetadata::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.key_bytes)
}

// optional int64 val_bytes = 5;
bool MVCCMetadata::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MVCCMetadata::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void MVCCMetadata::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void MVCCMetadata::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
 ::google::protobuf::int64 MVCCMetadata::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.val_bytes)
  return val_bytes_;
}
 void MVCCMetadata::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.val_bytes)
}

// optional bytes raw_bytes = 6;
bool MVCCMetadata::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MVCCMetadata::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
void MVCCMetadata::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
void MVCCMetadata::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
 const ::std::string& MVCCMetadata::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCMetadata::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
 void MVCCMetadata::set_raw_bytes(const char* value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
 void MVCCMetadata::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}
 ::std::string* MVCCMetadata::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MVCCMetadata::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MVCCMetadata::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.raw_bytes)
}

// optional .cockroach.roachpb.Timestamp merge_timestamp = 7;
bool MVCCMetadata::has_merge_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MVCCMetadata::set_has_merge_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void MVCCMetadata::clear_has_merge_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void MVCCMetadata::clear_merge_timestamp() {
  if (merge_timestamp_ != NULL) merge_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_merge_timestamp();
}
const ::cockroach::roachpb::Timestamp& MVCCMetadata::merge_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return merge_timestamp_ != NULL ? *merge_timestamp_ : *default_instance().merge_timestamp_;
#else
  return merge_timestamp_ != NULL ? *merge_timestamp_ : *default_instance_->merge_timestamp_;
#endif
}
::cockroach::roachpb::Timestamp* MVCCMetadata::mutable_merge_timestamp() {
  set_has_merge_timestamp();
  if (merge_timestamp_ == NULL) {
    merge_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
  return merge_timestamp_;
}
::cockroach::roachpb::Timestamp* MVCCMetadata::release_merge_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
  clear_has_merge_timestamp();
  ::cockroach::roachpb::Timestamp* temp = merge_timestamp_;
  merge_timestamp_ = NULL;
  return temp;
}
void MVCCMetadata::set_allocated_merge_timestamp(::cockroach::roachpb::Timestamp* merge_timestamp) {
  delete merge_timestamp_;
  merge_timestamp_ = merge_timestamp;
  if (merge_timestamp) {
    set_has_merge_timestamp();
  } else {
    clear_has_merge_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.storage.engine.enginepb.MVCCMetadata.merge_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMVCCStats(
    MVCCStats* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MVCCStats::kLastUpdateNanosFieldNumber;
const int MVCCStats::kIntentAgeFieldNumber;
const int MVCCStats::kGcBytesAgeFieldNumber;
const int MVCCStats::kLiveBytesFieldNumber;
const int MVCCStats::kLiveCountFieldNumber;
const int MVCCStats::kKeyBytesFieldNumber;
const int MVCCStats::kKeyCountFieldNumber;
const int MVCCStats::kValBytesFieldNumber;
const int MVCCStats::kValCountFieldNumber;
const int MVCCStats::kIntentBytesFieldNumber;
const int MVCCStats::kIntentCountFieldNumber;
const int MVCCStats::kSysBytesFieldNumber;
const int MVCCStats::kSysCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MVCCStats::MVCCStats()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.storage.engine.enginepb.MVCCStats)
}

void MVCCStats::InitAsDefaultInstance() {
}

MVCCStats::MVCCStats(const MVCCStats& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.storage.engine.enginepb.MVCCStats)
}

void MVCCStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  intent_age_ = GOOGLE_LONGLONG(0);
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  live_bytes_ = GOOGLE_LONGLONG(0);
  live_count_ = GOOGLE_LONGLONG(0);
  key_bytes_ = GOOGLE_LONGLONG(0);
  key_count_ = GOOGLE_LONGLONG(0);
  val_bytes_ = GOOGLE_LONGLONG(0);
  val_count_ = GOOGLE_LONGLONG(0);
  intent_bytes_ = GOOGLE_LONGLONG(0);
  intent_count_ = GOOGLE_LONGLONG(0);
  sys_bytes_ = GOOGLE_LONGLONG(0);
  sys_count_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVCCStats::~MVCCStats() {
  // @@protoc_insertion_point(destructor:cockroach.storage.engine.enginepb.MVCCStats)
  SharedDtor();
}

void MVCCStats::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MVCCStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MVCCStats& MVCCStats::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
#endif
  return *default_instance_;
}

MVCCStats* MVCCStats::default_instance_ = NULL;

MVCCStats* MVCCStats::New(::google::protobuf::Arena* arena) const {
  MVCCStats* n = new MVCCStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MVCCStats::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.storage.engine.enginepb.MVCCStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MVCCStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MVCCStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(last_update_nanos_, val_bytes_);
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ZR_(val_count_, sys_count_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MVCCStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMVCCStats, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.storage.engine.enginepb.MVCCStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 last_update_nanos = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_update_nanos_)));
          set_has_last_update_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_intent_age;
        break;
      }

      // optional sfixed64 intent_age = 2;
      case 2: {
        if (tag == 17) {
         parse_intent_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &intent_age_)));
          set_has_intent_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_gc_bytes_age;
        break;
      }

      // optional sfixed64 gc_bytes_age = 3;
      case 3: {
        if (tag == 25) {
         parse_gc_bytes_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gc_bytes_age_)));
          set_has_gc_bytes_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_live_bytes;
        break;
      }

      // optional sfixed64 live_bytes = 4;
      case 4: {
        if (tag == 33) {
         parse_live_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &live_bytes_)));
          set_has_live_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_live_count;
        break;
      }

      // optional sfixed64 live_count = 5;
      case 5: {
        if (tag == 41) {
         parse_live_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &live_count_)));
          set_has_live_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_key_bytes;
        break;
      }

      // optional sfixed64 key_bytes = 6;
      case 6: {
        if (tag == 49) {
         parse_key_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &key_bytes_)));
          set_has_key_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_key_count;
        break;
      }

      // optional sfixed64 key_count = 7;
      case 7: {
        if (tag == 57) {
         parse_key_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &key_count_)));
          set_has_key_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_val_bytes;
        break;
      }

      // optional sfixed64 val_bytes = 8;
      case 8: {
        if (tag == 65) {
         parse_val_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &val_bytes_)));
          set_has_val_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_val_count;
        break;
      }

      // optional sfixed64 val_count = 9;
      case 9: {
        if (tag == 73) {
         parse_val_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &val_count_)));
          set_has_val_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_intent_bytes;
        break;
      }

      // optional sfixed64 intent_bytes = 10;
      case 10: {
        if (tag == 81) {
         parse_intent_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &intent_bytes_)));
          set_has_intent_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_intent_count;
        break;
      }

      // optional sfixed64 intent_count = 11;
      case 11: {
        if (tag == 89) {
         parse_intent_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &intent_count_)));
          set_has_intent_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_sys_bytes;
        break;
      }

      // optional sfixed64 sys_bytes = 12;
      case 12: {
        if (tag == 97) {
         parse_sys_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sys_bytes_)));
          set_has_sys_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_sys_count;
        break;
      }

      // optional sfixed64 sys_count = 13;
      case 13: {
        if (tag == 105) {
         parse_sys_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sys_count_)));
          set_has_sys_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.storage.engine.enginepb.MVCCStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.storage.engine.enginepb.MVCCStats)
  return false;
#undef DO_
}

void MVCCStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.storage.engine.enginepb.MVCCStats)
  // optional sfixed64 last_update_nanos = 1;
  if (has_last_update_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->last_update_nanos(), output);
  }

  // optional sfixed64 intent_age = 2;
  if (has_intent_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->intent_age(), output);
  }

  // optional sfixed64 gc_bytes_age = 3;
  if (has_gc_bytes_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->gc_bytes_age(), output);
  }

  // optional sfixed64 live_bytes = 4;
  if (has_live_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->live_bytes(), output);
  }

  // optional sfixed64 live_count = 5;
  if (has_live_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->live_count(), output);
  }

  // optional sfixed64 key_bytes = 6;
  if (has_key_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->key_bytes(), output);
  }

  // optional sfixed64 key_count = 7;
  if (has_key_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->key_count(), output);
  }

  // optional sfixed64 val_bytes = 8;
  if (has_val_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->val_bytes(), output);
  }

  // optional sfixed64 val_count = 9;
  if (has_val_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->val_count(), output);
  }

  // optional sfixed64 intent_bytes = 10;
  if (has_intent_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->intent_bytes(), output);
  }

  // optional sfixed64 intent_count = 11;
  if (has_intent_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->intent_count(), output);
  }

  // optional sfixed64 sys_bytes = 12;
  if (has_sys_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->sys_bytes(), output);
  }

  // optional sfixed64 sys_count = 13;
  if (has_sys_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->sys_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.storage.engine.enginepb.MVCCStats)
}

int MVCCStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.storage.engine.enginepb.MVCCStats)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional sfixed64 last_update_nanos = 1;
    if (has_last_update_nanos()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 intent_age = 2;
    if (has_intent_age()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 gc_bytes_age = 3;
    if (has_gc_bytes_age()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 live_bytes = 4;
    if (has_live_bytes()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 live_count = 5;
    if (has_live_count()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 key_bytes = 6;
    if (has_key_bytes()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 key_count = 7;
    if (has_key_count()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 val_bytes = 8;
    if (has_val_bytes()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional sfixed64 val_count = 9;
    if (has_val_count()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 intent_bytes = 10;
    if (has_intent_bytes()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 intent_count = 11;
    if (has_intent_count()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 sys_bytes = 12;
    if (has_sys_bytes()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 sys_count = 13;
    if (has_sys_count()) {
      total_size += 1 + 8;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVCCStats::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MVCCStats*>(&from));
}

void MVCCStats::MergeFrom(const MVCCStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.storage.engine.enginepb.MVCCStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_update_nanos()) {
      set_last_update_nanos(from.last_update_nanos());
    }
    if (from.has_intent_age()) {
      set_intent_age(from.intent_age());
    }
    if (from.has_gc_bytes_age()) {
      set_gc_bytes_age(from.gc_bytes_age());
    }
    if (from.has_live_bytes()) {
      set_live_bytes(from.live_bytes());
    }
    if (from.has_live_count()) {
      set_live_count(from.live_count());
    }
    if (from.has_key_bytes()) {
      set_key_bytes(from.key_bytes());
    }
    if (from.has_key_count()) {
      set_key_count(from.key_count());
    }
    if (from.has_val_bytes()) {
      set_val_bytes(from.val_bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_val_count()) {
      set_val_count(from.val_count());
    }
    if (from.has_intent_bytes()) {
      set_intent_bytes(from.intent_bytes());
    }
    if (from.has_intent_count()) {
      set_intent_count(from.intent_count());
    }
    if (from.has_sys_bytes()) {
      set_sys_bytes(from.sys_bytes());
    }
    if (from.has_sys_count()) {
      set_sys_count(from.sys_count());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MVCCStats::CopyFrom(const MVCCStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.storage.engine.enginepb.MVCCStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVCCStats::IsInitialized() const {

  return true;
}

void MVCCStats::Swap(MVCCStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MVCCStats::InternalSwap(MVCCStats* other) {
  std::swap(last_update_nanos_, other->last_update_nanos_);
  std::swap(intent_age_, other->intent_age_);
  std::swap(gc_bytes_age_, other->gc_bytes_age_);
  std::swap(live_bytes_, other->live_bytes_);
  std::swap(live_count_, other->live_count_);
  std::swap(key_bytes_, other->key_bytes_);
  std::swap(key_count_, other->key_count_);
  std::swap(val_bytes_, other->val_bytes_);
  std::swap(val_count_, other->val_count_);
  std::swap(intent_bytes_, other->intent_bytes_);
  std::swap(intent_count_, other->intent_count_);
  std::swap(sys_bytes_, other->sys_bytes_);
  std::swap(sys_count_, other->sys_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MVCCStats::GetTypeName() const {
  return "cockroach.storage.engine.enginepb.MVCCStats";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MVCCStats

// optional sfixed64 last_update_nanos = 1;
bool MVCCStats::has_last_update_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MVCCStats::set_has_last_update_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
void MVCCStats::clear_has_last_update_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
void MVCCStats::clear_last_update_nanos() {
  last_update_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_update_nanos();
}
 ::google::protobuf::int64 MVCCStats::last_update_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.last_update_nanos)
  return last_update_nanos_;
}
 void MVCCStats::set_last_update_nanos(::google::protobuf::int64 value) {
  set_has_last_update_nanos();
  last_update_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.last_update_nanos)
}

// optional sfixed64 intent_age = 2;
bool MVCCStats::has_intent_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MVCCStats::set_has_intent_age() {
  _has_bits_[0] |= 0x00000002u;
}
void MVCCStats::clear_has_intent_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void MVCCStats::clear_intent_age() {
  intent_age_ = GOOGLE_LONGLONG(0);
  clear_has_intent_age();
}
 ::google::protobuf::int64 MVCCStats::intent_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_age)
  return intent_age_;
}
 void MVCCStats::set_intent_age(::google::protobuf::int64 value) {
  set_has_intent_age();
  intent_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_age)
}

// optional sfixed64 gc_bytes_age = 3;
bool MVCCStats::has_gc_bytes_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MVCCStats::set_has_gc_bytes_age() {
  _has_bits_[0] |= 0x00000004u;
}
void MVCCStats::clear_has_gc_bytes_age() {
  _has_bits_[0] &= ~0x00000004u;
}
void MVCCStats::clear_gc_bytes_age() {
  gc_bytes_age_ = GOOGLE_LONGLONG(0);
  clear_has_gc_bytes_age();
}
 ::google::protobuf::int64 MVCCStats::gc_bytes_age() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.gc_bytes_age)
  return gc_bytes_age_;
}
 void MVCCStats::set_gc_bytes_age(::google::protobuf::int64 value) {
  set_has_gc_bytes_age();
  gc_bytes_age_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.gc_bytes_age)
}

// optional sfixed64 live_bytes = 4;
bool MVCCStats::has_live_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MVCCStats::set_has_live_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
void MVCCStats::clear_has_live_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
void MVCCStats::clear_live_bytes() {
  live_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_live_bytes();
}
 ::google::protobuf::int64 MVCCStats::live_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.live_bytes)
  return live_bytes_;
}
 void MVCCStats::set_live_bytes(::google::protobuf::int64 value) {
  set_has_live_bytes();
  live_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.live_bytes)
}

// optional sfixed64 live_count = 5;
bool MVCCStats::has_live_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MVCCStats::set_has_live_count() {
  _has_bits_[0] |= 0x00000010u;
}
void MVCCStats::clear_has_live_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void MVCCStats::clear_live_count() {
  live_count_ = GOOGLE_LONGLONG(0);
  clear_has_live_count();
}
 ::google::protobuf::int64 MVCCStats::live_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.live_count)
  return live_count_;
}
 void MVCCStats::set_live_count(::google::protobuf::int64 value) {
  set_has_live_count();
  live_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.live_count)
}

// optional sfixed64 key_bytes = 6;
bool MVCCStats::has_key_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MVCCStats::set_has_key_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
void MVCCStats::clear_has_key_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
void MVCCStats::clear_key_bytes() {
  key_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_key_bytes();
}
 ::google::protobuf::int64 MVCCStats::key_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.key_bytes)
  return key_bytes_;
}
 void MVCCStats::set_key_bytes(::google::protobuf::int64 value) {
  set_has_key_bytes();
  key_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.key_bytes)
}

// optional sfixed64 key_count = 7;
bool MVCCStats::has_key_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MVCCStats::set_has_key_count() {
  _has_bits_[0] |= 0x00000040u;
}
void MVCCStats::clear_has_key_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void MVCCStats::clear_key_count() {
  key_count_ = GOOGLE_LONGLONG(0);
  clear_has_key_count();
}
 ::google::protobuf::int64 MVCCStats::key_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.key_count)
  return key_count_;
}
 void MVCCStats::set_key_count(::google::protobuf::int64 value) {
  set_has_key_count();
  key_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.key_count)
}

// optional sfixed64 val_bytes = 8;
bool MVCCStats::has_val_bytes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MVCCStats::set_has_val_bytes() {
  _has_bits_[0] |= 0x00000080u;
}
void MVCCStats::clear_has_val_bytes() {
  _has_bits_[0] &= ~0x00000080u;
}
void MVCCStats::clear_val_bytes() {
  val_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_val_bytes();
}
 ::google::protobuf::int64 MVCCStats::val_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.val_bytes)
  return val_bytes_;
}
 void MVCCStats::set_val_bytes(::google::protobuf::int64 value) {
  set_has_val_bytes();
  val_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.val_bytes)
}

// optional sfixed64 val_count = 9;
bool MVCCStats::has_val_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MVCCStats::set_has_val_count() {
  _has_bits_[0] |= 0x00000100u;
}
void MVCCStats::clear_has_val_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void MVCCStats::clear_val_count() {
  val_count_ = GOOGLE_LONGLONG(0);
  clear_has_val_count();
}
 ::google::protobuf::int64 MVCCStats::val_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.val_count)
  return val_count_;
}
 void MVCCStats::set_val_count(::google::protobuf::int64 value) {
  set_has_val_count();
  val_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.val_count)
}

// optional sfixed64 intent_bytes = 10;
bool MVCCStats::has_intent_bytes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MVCCStats::set_has_intent_bytes() {
  _has_bits_[0] |= 0x00000200u;
}
void MVCCStats::clear_has_intent_bytes() {
  _has_bits_[0] &= ~0x00000200u;
}
void MVCCStats::clear_intent_bytes() {
  intent_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_intent_bytes();
}
 ::google::protobuf::int64 MVCCStats::intent_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_bytes)
  return intent_bytes_;
}
 void MVCCStats::set_intent_bytes(::google::protobuf::int64 value) {
  set_has_intent_bytes();
  intent_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_bytes)
}

// optional sfixed64 intent_count = 11;
bool MVCCStats::has_intent_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MVCCStats::set_has_intent_count() {
  _has_bits_[0] |= 0x00000400u;
}
void MVCCStats::clear_has_intent_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void MVCCStats::clear_intent_count() {
  intent_count_ = GOOGLE_LONGLONG(0);
  clear_has_intent_count();
}
 ::google::protobuf::int64 MVCCStats::intent_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.intent_count)
  return intent_count_;
}
 void MVCCStats::set_intent_count(::google::protobuf::int64 value) {
  set_has_intent_count();
  intent_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.intent_count)
}

// optional sfixed64 sys_bytes = 12;
bool MVCCStats::has_sys_bytes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MVCCStats::set_has_sys_bytes() {
  _has_bits_[0] |= 0x00000800u;
}
void MVCCStats::clear_has_sys_bytes() {
  _has_bits_[0] &= ~0x00000800u;
}
void MVCCStats::clear_sys_bytes() {
  sys_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_sys_bytes();
}
 ::google::protobuf::int64 MVCCStats::sys_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.sys_bytes)
  return sys_bytes_;
}
 void MVCCStats::set_sys_bytes(::google::protobuf::int64 value) {
  set_has_sys_bytes();
  sys_bytes_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.sys_bytes)
}

// optional sfixed64 sys_count = 13;
bool MVCCStats::has_sys_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MVCCStats::set_has_sys_count() {
  _has_bits_[0] |= 0x00001000u;
}
void MVCCStats::clear_has_sys_count() {
  _has_bits_[0] &= ~0x00001000u;
}
void MVCCStats::clear_sys_count() {
  sys_count_ = GOOGLE_LONGLONG(0);
  clear_has_sys_count();
}
 ::google::protobuf::int64 MVCCStats::sys_count() const {
  // @@protoc_insertion_point(field_get:cockroach.storage.engine.enginepb.MVCCStats.sys_count)
  return sys_count_;
}
 void MVCCStats::set_sys_count(::google::protobuf::int64 value) {
  set_has_sys_count();
  sys_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.storage.engine.enginepb.MVCCStats.sys_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace enginepb
}  // namespace engine
}  // namespace storage
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
