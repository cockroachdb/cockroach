// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/data.proto

#ifndef PROTOBUF_cockroach_2froachpb_2fdata_2eproto__INCLUDED
#define PROTOBUF_cockroach_2froachpb_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/roachpb/metadata.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

class Span;
class Timestamp;
class Value;
class KeyValue;
class StoreIdent;
class SplitTrigger;
class MergeTrigger;
class ChangeReplicasTrigger;
class ModifiedSpanTrigger;
class InternalCommitTrigger;
class NodeList;
class Transaction;
class Intent;
class Lease;
class GCMetadata;

enum ValueType {
  UNKNOWN = 0,
  INT = 1,
  FLOAT = 2,
  BYTES = 3,
  TIME = 4,
  TIMESERIES = 100
};
bool ValueType_IsValid(int value);
const ValueType ValueType_MIN = UNKNOWN;
const ValueType ValueType_MAX = TIMESERIES;
const int ValueType_ARRAYSIZE = ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ValueType_descriptor();
inline const ::std::string& ValueType_Name(ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ValueType_descriptor(), value);
}
inline bool ValueType_Parse(
    const ::std::string& name, ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ValueType>(
    ValueType_descriptor(), name, value);
}
enum ReplicaChangeType {
  ADD_REPLICA = 0,
  REMOVE_REPLICA = 1
};
bool ReplicaChangeType_IsValid(int value);
const ReplicaChangeType ReplicaChangeType_MIN = ADD_REPLICA;
const ReplicaChangeType ReplicaChangeType_MAX = REMOVE_REPLICA;
const int ReplicaChangeType_ARRAYSIZE = ReplicaChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor();
inline const ::std::string& ReplicaChangeType_Name(ReplicaChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReplicaChangeType_descriptor(), value);
}
inline bool ReplicaChangeType_Parse(
    const ::std::string& name, ReplicaChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReplicaChangeType>(
    ReplicaChangeType_descriptor(), name, value);
}
enum IsolationType {
  SERIALIZABLE = 0,
  SNAPSHOT = 1
};
bool IsolationType_IsValid(int value);
const IsolationType IsolationType_MIN = SERIALIZABLE;
const IsolationType IsolationType_MAX = SNAPSHOT;
const int IsolationType_ARRAYSIZE = IsolationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsolationType_descriptor();
inline const ::std::string& IsolationType_Name(IsolationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsolationType_descriptor(), value);
}
inline bool IsolationType_Parse(
    const ::std::string& name, IsolationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsolationType>(
    IsolationType_descriptor(), name, value);
}
enum TransactionStatus {
  PENDING = 0,
  COMMITTED = 1,
  ABORTED = 2
};
bool TransactionStatus_IsValid(int value);
const TransactionStatus TransactionStatus_MIN = PENDING;
const TransactionStatus TransactionStatus_MAX = ABORTED;
const int TransactionStatus_ARRAYSIZE = TransactionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor();
inline const ::std::string& TransactionStatus_Name(TransactionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionStatus_descriptor(), value);
}
inline bool TransactionStatus_Parse(
    const ::std::string& name, TransactionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionStatus>(
    TransactionStatus_descriptor(), name, value);
}
// ===================================================================

class Span : public ::google::protobuf::Message {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Span& default_instance();

  void Swap(Span* other);

  // implements Message ----------------------------------------------

  inline Span* New() const { return New(NULL); }

  Span* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 3;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes end_key = 4;
  bool has_end_key() const;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 4;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Span)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_end_key();
  inline void clear_has_end_key();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Span* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  inline Timestamp* New() const { return New(NULL); }

  Timestamp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timestamp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 wall_time = 1;
  bool has_wall_time() const;
  void clear_wall_time();
  static const int kWallTimeFieldNumber = 1;
  ::google::protobuf::int64 wall_time() const;
  void set_wall_time(::google::protobuf::int64 value);

  // optional int32 logical = 2;
  bool has_logical() const;
  void clear_logical();
  static const int kLogicalFieldNumber = 2;
  ::google::protobuf::int32 logical() const;
  void set_logical(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Timestamp)
 private:
  inline void set_has_wall_time();
  inline void clear_has_wall_time();
  inline void set_has_logical();
  inline void clear_has_logical();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 wall_time_;
  ::google::protobuf::int32 logical_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  void Swap(Value* other);

  // implements Message ----------------------------------------------

  inline Value* New() const { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes raw_bytes = 1;
  bool has_raw_bytes() const;
  void clear_raw_bytes();
  static const int kRawBytesFieldNumber = 1;
  const ::std::string& raw_bytes() const;
  void set_raw_bytes(const ::std::string& value);
  void set_raw_bytes(const char* value);
  void set_raw_bytes(const void* value, size_t size);
  ::std::string* mutable_raw_bytes();
  ::std::string* release_raw_bytes();
  void set_allocated_raw_bytes(::std::string* raw_bytes);

  // optional fixed32 checksum = 3;
  bool has_checksum() const;
  void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  ::google::protobuf::uint32 checksum() const;
  void set_checksum(::google::protobuf::uint32 value);

  // optional .cockroach.roachpb.Timestamp timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::cockroach::roachpb::Timestamp& timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_timestamp();
  ::cockroach::roachpb::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp);

  // optional .cockroach.roachpb.ValueType tag = 5;
  bool has_tag() const;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::cockroach::roachpb::ValueType tag() const;
  void set_tag(::cockroach::roachpb::ValueType value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Value)
 private:
  inline void set_has_raw_bytes();
  inline void clear_has_raw_bytes();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr raw_bytes_;
  ::cockroach::roachpb::Timestamp* timestamp_;
  ::google::protobuf::uint32 checksum_;
  int tag_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  inline KeyValue* New() const { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional .cockroach.roachpb.Value value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::cockroach::roachpb::Value& value() const;
  ::cockroach::roachpb::Value* mutable_value();
  ::cockroach::roachpb::Value* release_value();
  void set_allocated_value(::cockroach::roachpb::Value* value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::cockroach::roachpb::Value* value_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class StoreIdent : public ::google::protobuf::Message {
 public:
  StoreIdent();
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreIdent& default_instance();

  void Swap(StoreIdent* other);

  // implements Message ----------------------------------------------

  inline StoreIdent* New() const { return New(NULL); }

  StoreIdent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreIdent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cluster_id = 1;
  bool has_cluster_id() const;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // optional int32 node_id = 2;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // optional int32 store_id = 3;
  bool has_store_id() const;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 3;
  ::google::protobuf::int32 store_id() const;
  void set_store_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.StoreIdent)
 private:
  inline void set_has_cluster_id();
  inline void clear_has_cluster_id();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_store_id();
  inline void clear_has_store_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::int32 node_id_;
  ::google::protobuf::int32 store_id_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static StoreIdent* default_instance_;
};
// -------------------------------------------------------------------

class SplitTrigger : public ::google::protobuf::Message {
 public:
  SplitTrigger();
  virtual ~SplitTrigger();

  SplitTrigger(const SplitTrigger& from);

  inline SplitTrigger& operator=(const SplitTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitTrigger& default_instance();

  void Swap(SplitTrigger* other);

  // implements Message ----------------------------------------------

  inline SplitTrigger* New() const { return New(NULL); }

  SplitTrigger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitTrigger& from);
  void MergeFrom(const SplitTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  bool has_updated_desc() const;
  void clear_updated_desc();
  static const int kUpdatedDescFieldNumber = 1;
  const ::cockroach::roachpb::RangeDescriptor& updated_desc() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* release_updated_desc();
  void set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc);

  // optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
  bool has_new_desc() const;
  void clear_new_desc();
  static const int kNewDescFieldNumber = 2;
  const ::cockroach::roachpb::RangeDescriptor& new_desc() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_new_desc();
  ::cockroach::roachpb::RangeDescriptor* release_new_desc();
  void set_allocated_new_desc(::cockroach::roachpb::RangeDescriptor* new_desc);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SplitTrigger)
 private:
  inline void set_has_updated_desc();
  inline void clear_has_updated_desc();
  inline void set_has_new_desc();
  inline void clear_has_new_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::RangeDescriptor* updated_desc_;
  ::cockroach::roachpb::RangeDescriptor* new_desc_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static SplitTrigger* default_instance_;
};
// -------------------------------------------------------------------

class MergeTrigger : public ::google::protobuf::Message {
 public:
  MergeTrigger();
  virtual ~MergeTrigger();

  MergeTrigger(const MergeTrigger& from);

  inline MergeTrigger& operator=(const MergeTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeTrigger& default_instance();

  void Swap(MergeTrigger* other);

  // implements Message ----------------------------------------------

  inline MergeTrigger* New() const { return New(NULL); }

  MergeTrigger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeTrigger& from);
  void MergeFrom(const MergeTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  bool has_updated_desc() const;
  void clear_updated_desc();
  static const int kUpdatedDescFieldNumber = 1;
  const ::cockroach::roachpb::RangeDescriptor& updated_desc() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* release_updated_desc();
  void set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc);

  // optional int64 subsumed_range_id = 2;
  bool has_subsumed_range_id() const;
  void clear_subsumed_range_id();
  static const int kSubsumedRangeIdFieldNumber = 2;
  ::google::protobuf::int64 subsumed_range_id() const;
  void set_subsumed_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.MergeTrigger)
 private:
  inline void set_has_updated_desc();
  inline void clear_has_updated_desc();
  inline void set_has_subsumed_range_id();
  inline void clear_has_subsumed_range_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::RangeDescriptor* updated_desc_;
  ::google::protobuf::int64 subsumed_range_id_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static MergeTrigger* default_instance_;
};
// -------------------------------------------------------------------

class ChangeReplicasTrigger : public ::google::protobuf::Message {
 public:
  ChangeReplicasTrigger();
  virtual ~ChangeReplicasTrigger();

  ChangeReplicasTrigger(const ChangeReplicasTrigger& from);

  inline ChangeReplicasTrigger& operator=(const ChangeReplicasTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeReplicasTrigger& default_instance();

  void Swap(ChangeReplicasTrigger* other);

  // implements Message ----------------------------------------------

  inline ChangeReplicasTrigger* New() const { return New(NULL); }

  ChangeReplicasTrigger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeReplicasTrigger& from);
  void MergeFrom(const ChangeReplicasTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangeReplicasTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
  bool has_change_type() const;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::cockroach::roachpb::ReplicaChangeType change_type() const;
  void set_change_type(::cockroach::roachpb::ReplicaChangeType value);

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 2;
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  int updated_replicas_size() const;
  void clear_updated_replicas();
  static const int kUpdatedReplicasFieldNumber = 3;
  const ::cockroach::roachpb::ReplicaDescriptor& updated_replicas(int index) const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_updated_replicas(int index);
  ::cockroach::roachpb::ReplicaDescriptor* add_updated_replicas();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
      updated_replicas() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
      mutable_updated_replicas();

  // optional int32 next_replica_id = 4;
  bool has_next_replica_id() const;
  void clear_next_replica_id();
  static const int kNextReplicaIdFieldNumber = 4;
  ::google::protobuf::int32 next_replica_id() const;
  void set_next_replica_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ChangeReplicasTrigger)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_replica();
  inline void clear_has_replica();
  inline void set_has_next_replica_id();
  inline void clear_has_next_replica_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  int change_type_;
  ::google::protobuf::int32 next_replica_id_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor > updated_replicas_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ChangeReplicasTrigger* default_instance_;
};
// -------------------------------------------------------------------

class ModifiedSpanTrigger : public ::google::protobuf::Message {
 public:
  ModifiedSpanTrigger();
  virtual ~ModifiedSpanTrigger();

  ModifiedSpanTrigger(const ModifiedSpanTrigger& from);

  inline ModifiedSpanTrigger& operator=(const ModifiedSpanTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifiedSpanTrigger& default_instance();

  void Swap(ModifiedSpanTrigger* other);

  // implements Message ----------------------------------------------

  inline ModifiedSpanTrigger* New() const { return New(NULL); }

  ModifiedSpanTrigger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifiedSpanTrigger& from);
  void MergeFrom(const ModifiedSpanTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModifiedSpanTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool system_db_span = 1;
  bool has_system_db_span() const;
  void clear_system_db_span();
  static const int kSystemDbSpanFieldNumber = 1;
  bool system_db_span() const;
  void set_system_db_span(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ModifiedSpanTrigger)
 private:
  inline void set_has_system_db_span();
  inline void clear_has_system_db_span();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool system_db_span_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static ModifiedSpanTrigger* default_instance_;
};
// -------------------------------------------------------------------

class InternalCommitTrigger : public ::google::protobuf::Message {
 public:
  InternalCommitTrigger();
  virtual ~InternalCommitTrigger();

  InternalCommitTrigger(const InternalCommitTrigger& from);

  inline InternalCommitTrigger& operator=(const InternalCommitTrigger& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalCommitTrigger& default_instance();

  void Swap(InternalCommitTrigger* other);

  // implements Message ----------------------------------------------

  inline InternalCommitTrigger* New() const { return New(NULL); }

  InternalCommitTrigger* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InternalCommitTrigger& from);
  void MergeFrom(const InternalCommitTrigger& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalCommitTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
  bool has_split_trigger() const;
  void clear_split_trigger();
  static const int kSplitTriggerFieldNumber = 1;
  const ::cockroach::roachpb::SplitTrigger& split_trigger() const;
  ::cockroach::roachpb::SplitTrigger* mutable_split_trigger();
  ::cockroach::roachpb::SplitTrigger* release_split_trigger();
  void set_allocated_split_trigger(::cockroach::roachpb::SplitTrigger* split_trigger);

  // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  bool has_merge_trigger() const;
  void clear_merge_trigger();
  static const int kMergeTriggerFieldNumber = 2;
  const ::cockroach::roachpb::MergeTrigger& merge_trigger() const;
  ::cockroach::roachpb::MergeTrigger* mutable_merge_trigger();
  ::cockroach::roachpb::MergeTrigger* release_merge_trigger();
  void set_allocated_merge_trigger(::cockroach::roachpb::MergeTrigger* merge_trigger);

  // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  bool has_change_replicas_trigger() const;
  void clear_change_replicas_trigger();
  static const int kChangeReplicasTriggerFieldNumber = 3;
  const ::cockroach::roachpb::ChangeReplicasTrigger& change_replicas_trigger() const;
  ::cockroach::roachpb::ChangeReplicasTrigger* mutable_change_replicas_trigger();
  ::cockroach::roachpb::ChangeReplicasTrigger* release_change_replicas_trigger();
  void set_allocated_change_replicas_trigger(::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger);

  // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  bool has_modified_span_trigger() const;
  void clear_modified_span_trigger();
  static const int kModifiedSpanTriggerFieldNumber = 4;
  const ::cockroach::roachpb::ModifiedSpanTrigger& modified_span_trigger() const;
  ::cockroach::roachpb::ModifiedSpanTrigger* mutable_modified_span_trigger();
  ::cockroach::roachpb::ModifiedSpanTrigger* release_modified_span_trigger();
  void set_allocated_modified_span_trigger(::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.InternalCommitTrigger)
 private:
  inline void set_has_split_trigger();
  inline void clear_has_split_trigger();
  inline void set_has_merge_trigger();
  inline void clear_has_merge_trigger();
  inline void set_has_change_replicas_trigger();
  inline void clear_has_change_replicas_trigger();
  inline void set_has_modified_span_trigger();
  inline void clear_has_modified_span_trigger();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::SplitTrigger* split_trigger_;
  ::cockroach::roachpb::MergeTrigger* merge_trigger_;
  ::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger_;
  ::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static InternalCommitTrigger* default_instance_;
};
// -------------------------------------------------------------------

class NodeList : public ::google::protobuf::Message {
 public:
  NodeList();
  virtual ~NodeList();

  NodeList(const NodeList& from);

  inline NodeList& operator=(const NodeList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeList& default_instance();

  void Swap(NodeList* other);

  // implements Message ----------------------------------------------

  inline NodeList* New() const { return New(NULL); }

  NodeList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeList& from);
  void MergeFrom(const NodeList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 nodes = 1 [packed = true];
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::google::protobuf::int32 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::int32 value);
  void add_nodes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NodeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodes_;
  mutable int _nodes_cached_byte_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static NodeList* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  inline Transaction* New() const { return New(NULL); }

  Transaction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bytes key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int32 priority = 4;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 4;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // optional .cockroach.roachpb.IsolationType isolation = 5;
  bool has_isolation() const;
  void clear_isolation();
  static const int kIsolationFieldNumber = 5;
  ::cockroach::roachpb::IsolationType isolation() const;
  void set_isolation(::cockroach::roachpb::IsolationType value);

  // optional .cockroach.roachpb.TransactionStatus status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::cockroach::roachpb::TransactionStatus status() const;
  void set_status(::cockroach::roachpb::TransactionStatus value);

  // optional int32 epoch = 7;
  bool has_epoch() const;
  void clear_epoch();
  static const int kEpochFieldNumber = 7;
  ::google::protobuf::int32 epoch() const;
  void set_epoch(::google::protobuf::int32 value);

  // optional .cockroach.roachpb.Timestamp last_heartbeat = 8;
  bool has_last_heartbeat() const;
  void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 8;
  const ::cockroach::roachpb::Timestamp& last_heartbeat() const;
  ::cockroach::roachpb::Timestamp* mutable_last_heartbeat();
  ::cockroach::roachpb::Timestamp* release_last_heartbeat();
  void set_allocated_last_heartbeat(::cockroach::roachpb::Timestamp* last_heartbeat);

  // optional .cockroach.roachpb.Timestamp timestamp = 9;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 9;
  const ::cockroach::roachpb::Timestamp& timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_timestamp();
  ::cockroach::roachpb::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp);

  // optional .cockroach.roachpb.Timestamp orig_timestamp = 10;
  bool has_orig_timestamp() const;
  void clear_orig_timestamp();
  static const int kOrigTimestampFieldNumber = 10;
  const ::cockroach::roachpb::Timestamp& orig_timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_orig_timestamp();
  ::cockroach::roachpb::Timestamp* release_orig_timestamp();
  void set_allocated_orig_timestamp(::cockroach::roachpb::Timestamp* orig_timestamp);

  // optional .cockroach.roachpb.Timestamp max_timestamp = 11;
  bool has_max_timestamp() const;
  void clear_max_timestamp();
  static const int kMaxTimestampFieldNumber = 11;
  const ::cockroach::roachpb::Timestamp& max_timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_max_timestamp();
  ::cockroach::roachpb::Timestamp* release_max_timestamp();
  void set_allocated_max_timestamp(::cockroach::roachpb::Timestamp* max_timestamp);

  // optional .cockroach.roachpb.NodeList certain_nodes = 12;
  bool has_certain_nodes() const;
  void clear_certain_nodes();
  static const int kCertainNodesFieldNumber = 12;
  const ::cockroach::roachpb::NodeList& certain_nodes() const;
  ::cockroach::roachpb::NodeList* mutable_certain_nodes();
  ::cockroach::roachpb::NodeList* release_certain_nodes();
  void set_allocated_certain_nodes(::cockroach::roachpb::NodeList* certain_nodes);

  // optional bool Writing = 13;
  bool has_writing() const;
  void clear_writing();
  static const int kWritingFieldNumber = 13;
  bool writing() const;
  void set_writing(bool value);

  // optional uint32 Sequence = 14;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 14;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // repeated .cockroach.roachpb.Span Intents = 15;
  int intents_size() const;
  void clear_intents();
  static const int kIntentsFieldNumber = 15;
  const ::cockroach::roachpb::Span& intents(int index) const;
  ::cockroach::roachpb::Span* mutable_intents(int index);
  ::cockroach::roachpb::Span* add_intents();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
      intents() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
      mutable_intents();

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Transaction)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_isolation();
  inline void clear_has_isolation();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_epoch();
  inline void clear_has_epoch();
  inline void set_has_last_heartbeat();
  inline void clear_has_last_heartbeat();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_orig_timestamp();
  inline void clear_has_orig_timestamp();
  inline void set_has_max_timestamp();
  inline void clear_has_max_timestamp();
  inline void set_has_certain_nodes();
  inline void clear_has_certain_nodes();
  inline void set_has_writing();
  inline void clear_has_writing();
  inline void set_has_sequence();
  inline void clear_has_sequence();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 priority_;
  int isolation_;
  int status_;
  ::google::protobuf::int32 epoch_;
  ::cockroach::roachpb::Timestamp* last_heartbeat_;
  ::cockroach::roachpb::Timestamp* timestamp_;
  ::cockroach::roachpb::Timestamp* orig_timestamp_;
  ::cockroach::roachpb::Timestamp* max_timestamp_;
  ::cockroach::roachpb::NodeList* certain_nodes_;
  bool writing_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span > intents_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class Intent : public ::google::protobuf::Message {
 public:
  Intent();
  virtual ~Intent();

  Intent(const Intent& from);

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Intent& default_instance();

  void Swap(Intent* other);

  // implements Message ----------------------------------------------

  inline Intent* New() const { return New(NULL); }

  Intent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Intent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Span span = 1;
  bool has_span() const;
  void clear_span();
  static const int kSpanFieldNumber = 1;
  const ::cockroach::roachpb::Span& span() const;
  ::cockroach::roachpb::Span* mutable_span();
  ::cockroach::roachpb::Span* release_span();
  void set_allocated_span(::cockroach::roachpb::Span* span);

  // optional .cockroach.roachpb.Transaction txn = 2;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 2;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Intent)
 private:
  inline void set_has_span();
  inline void clear_has_span();
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Span* span_;
  ::cockroach::roachpb::Transaction* txn_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Intent* default_instance_;
};
// -------------------------------------------------------------------

class Lease : public ::google::protobuf::Message {
 public:
  Lease();
  virtual ~Lease();

  Lease(const Lease& from);

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lease& default_instance();

  void Swap(Lease* other);

  // implements Message ----------------------------------------------

  inline Lease* New() const { return New(NULL); }

  Lease* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lease& from);
  void MergeFrom(const Lease& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Lease* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Timestamp start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::cockroach::roachpb::Timestamp& start() const;
  ::cockroach::roachpb::Timestamp* mutable_start();
  ::cockroach::roachpb::Timestamp* release_start();
  void set_allocated_start(::cockroach::roachpb::Timestamp* start);

  // optional .cockroach.roachpb.Timestamp expiration = 2;
  bool has_expiration() const;
  void clear_expiration();
  static const int kExpirationFieldNumber = 2;
  const ::cockroach::roachpb::Timestamp& expiration() const;
  ::cockroach::roachpb::Timestamp* mutable_expiration();
  ::cockroach::roachpb::Timestamp* release_expiration();
  void set_allocated_expiration(::cockroach::roachpb::Timestamp* expiration);

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 3;
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Lease)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_expiration();
  inline void clear_has_expiration();
  inline void set_has_replica();
  inline void clear_has_replica();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Timestamp* start_;
  ::cockroach::roachpb::Timestamp* expiration_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Lease* default_instance_;
};
// -------------------------------------------------------------------

class GCMetadata : public ::google::protobuf::Message {
 public:
  GCMetadata();
  virtual ~GCMetadata();

  GCMetadata(const GCMetadata& from);

  inline GCMetadata& operator=(const GCMetadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GCMetadata& default_instance();

  void Swap(GCMetadata* other);

  // implements Message ----------------------------------------------

  inline GCMetadata* New() const { return New(NULL); }

  GCMetadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GCMetadata& from);
  void MergeFrom(const GCMetadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GCMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 last_scan_nanos = 1;
  bool has_last_scan_nanos() const;
  void clear_last_scan_nanos();
  static const int kLastScanNanosFieldNumber = 1;
  ::google::protobuf::int64 last_scan_nanos() const;
  void set_last_scan_nanos(::google::protobuf::int64 value);

  // optional int64 oldest_intent_nanos = 2;
  bool has_oldest_intent_nanos() const;
  void clear_oldest_intent_nanos();
  static const int kOldestIntentNanosFieldNumber = 2;
  ::google::protobuf::int64 oldest_intent_nanos() const;
  void set_oldest_intent_nanos(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.GCMetadata)
 private:
  inline void set_has_last_scan_nanos();
  inline void clear_has_last_scan_nanos();
  inline void set_has_oldest_intent_nanos();
  inline void clear_has_oldest_intent_nanos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 last_scan_nanos_;
  ::google::protobuf::int64 oldest_intent_nanos_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto();

  void InitAsDefaultInstance();
  static GCMetadata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional bytes key = 3;
inline bool Span::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Span::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Span::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Span::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Span::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.key)
}
inline void Span::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.key)
}
inline void Span::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.key)
}
inline ::std::string* Span::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.key)
}

// optional bytes end_key = 4;
inline bool Span::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Span::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Span::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Span::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
inline const ::std::string& Span::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.end_key)
}
inline void Span::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.end_key)
}
inline void Span::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.end_key)
}
inline ::std::string* Span::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_end_key() {
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Span::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.end_key)
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 wall_time = 1;
inline bool Timestamp::has_wall_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_wall_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_wall_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_wall_time() {
  wall_time_ = GOOGLE_LONGLONG(0);
  clear_has_wall_time();
}
inline ::google::protobuf::int64 Timestamp::wall_time() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Timestamp.wall_time)
  return wall_time_;
}
inline void Timestamp::set_wall_time(::google::protobuf::int64 value) {
  set_has_wall_time();
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Timestamp.wall_time)
}

// optional int32 logical = 2;
inline bool Timestamp::has_logical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_logical() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_logical() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_logical() {
  logical_ = 0;
  clear_has_logical();
}
inline ::google::protobuf::int32 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Timestamp.logical)
  return logical_;
}
inline void Timestamp::set_logical(::google::protobuf::int32 value) {
  set_has_logical();
  logical_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Timestamp.logical)
}

// -------------------------------------------------------------------

// Value

// optional bytes raw_bytes = 1;
inline bool Value::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
inline const ::std::string& Value::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.raw_bytes)
}
inline void Value::set_raw_bytes(const char* value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Value.raw_bytes)
}
inline void Value::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Value.raw_bytes)
}
inline ::std::string* Value::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Value::release_raw_bytes() {
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.raw_bytes)
}

// optional fixed32 checksum = 3;
inline bool Value::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 Value::checksum() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.checksum)
  return checksum_;
}
inline void Value::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.checksum)
}

// optional .cockroach.roachpb.Timestamp timestamp = 4;
inline bool Value::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& Value::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Value::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.timestamp)
  return timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Value::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Value::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.timestamp)
}

// optional .cockroach.roachpb.ValueType tag = 5;
inline bool Value::has_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
inline ::cockroach::roachpb::ValueType Value::tag() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.tag)
  return static_cast< ::cockroach::roachpb::ValueType >(tag_);
}
inline void Value::set_tag(::cockroach::roachpb::ValueType value) {
  assert(::cockroach::roachpb::ValueType_IsValid(value));
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.tag)
}

// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.key)
}

// optional .cockroach.roachpb.Value value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::roachpb::Value::Clear();
  clear_has_value();
}
inline const ::cockroach::roachpb::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::cockroach::roachpb::Value* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.value)
  return value_;
}
inline ::cockroach::roachpb::Value* KeyValue::release_value() {
  clear_has_value();
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline void KeyValue::set_allocated_value(::cockroach::roachpb::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.value)
}

// -------------------------------------------------------------------

// StoreIdent

// optional string cluster_id = 1;
inline bool StoreIdent::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StoreIdent::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StoreIdent::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StoreIdent::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_id();
}
inline const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreIdent::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.cluster_id)
}
inline void StoreIdent::set_cluster_id(const char* value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.StoreIdent.cluster_id)
}
inline void StoreIdent::set_cluster_id(const char* value, size_t size) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.StoreIdent.cluster_id)
}
inline ::std::string* StoreIdent::mutable_cluster_id() {
  set_has_cluster_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StoreIdent::release_cluster_id() {
  clear_has_cluster_id();
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    set_has_cluster_id();
  } else {
    clear_has_cluster_id();
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreIdent.cluster_id)
}

// optional int32 node_id = 2;
inline bool StoreIdent::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreIdent::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreIdent::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreIdent::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.node_id)
  return node_id_;
}
inline void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.node_id)
}

// optional int32 store_id = 3;
inline bool StoreIdent::has_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreIdent::set_has_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreIdent::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreIdent::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
inline ::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.store_id)
  return store_id_;
}
inline void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.store_id)
}

// -------------------------------------------------------------------

// SplitTrigger

// optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
inline bool SplitTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
inline const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) {
    updated_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.updated_desc)
  return updated_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
inline void SplitTrigger::set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.updated_desc)
}

// optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
inline bool SplitTrigger::has_new_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitTrigger::set_has_new_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitTrigger::clear_has_new_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitTrigger::clear_new_desc() {
  if (new_desc_ != NULL) new_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_new_desc();
}
inline const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::new_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.new_desc)
  return new_desc_ != NULL ? *new_desc_ : *default_instance_->new_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_new_desc() {
  set_has_new_desc();
  if (new_desc_ == NULL) {
    new_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.new_desc)
  return new_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_new_desc() {
  clear_has_new_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = new_desc_;
  new_desc_ = NULL;
  return temp;
}
inline void SplitTrigger::set_allocated_new_desc(::cockroach::roachpb::RangeDescriptor* new_desc) {
  delete new_desc_;
  new_desc_ = new_desc;
  if (new_desc) {
    set_has_new_desc();
  } else {
    clear_has_new_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.new_desc)
}

// -------------------------------------------------------------------

// MergeTrigger

// optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
inline bool MergeTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MergeTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MergeTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MergeTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
inline const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) {
    updated_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.updated_desc)
  return updated_desc_;
}
inline ::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
inline void MergeTrigger::set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.updated_desc)
}

// optional int64 subsumed_range_id = 2;
inline bool MergeTrigger::has_subsumed_range_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MergeTrigger::set_has_subsumed_range_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MergeTrigger::clear_has_subsumed_range_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MergeTrigger::clear_subsumed_range_id() {
  subsumed_range_id_ = GOOGLE_LONGLONG(0);
  clear_has_subsumed_range_id();
}
inline ::google::protobuf::int64 MergeTrigger::subsumed_range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.subsumed_range_id)
  return subsumed_range_id_;
}
inline void MergeTrigger::set_subsumed_range_id(::google::protobuf::int64 value) {
  set_has_subsumed_range_id();
  subsumed_range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.MergeTrigger.subsumed_range_id)
}

// -------------------------------------------------------------------

// ChangeReplicasTrigger

// optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
inline bool ChangeReplicasTrigger::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeReplicasTrigger::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeReplicasTrigger::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
inline ::cockroach::roachpb::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(change_type_);
}
inline void ChangeReplicasTrigger::set_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  assert(::cockroach::roachpb::ReplicaChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.change_type)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
inline bool ChangeReplicasTrigger::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeReplicasTrigger::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeReplicasTrigger::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeReplicasTrigger::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void ChangeReplicasTrigger::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ChangeReplicasTrigger.replica)
}

// repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
inline int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
inline void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
inline ::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
inline ::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}

// optional int32 next_replica_id = 4;
inline bool ChangeReplicasTrigger::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeReplicasTrigger::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeReplicasTrigger::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeReplicasTrigger::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
inline ::google::protobuf::int32 ChangeReplicasTrigger::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
  return next_replica_id_;
}
inline void ChangeReplicasTrigger::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
}

// -------------------------------------------------------------------

// ModifiedSpanTrigger

// optional bool system_db_span = 1;
inline bool ModifiedSpanTrigger::has_system_db_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifiedSpanTrigger::set_has_system_db_span() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifiedSpanTrigger::clear_has_system_db_span() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifiedSpanTrigger::clear_system_db_span() {
  system_db_span_ = false;
  clear_has_system_db_span();
}
inline bool ModifiedSpanTrigger::system_db_span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ModifiedSpanTrigger.system_db_span)
  return system_db_span_;
}
inline void ModifiedSpanTrigger::set_system_db_span(bool value) {
  set_has_system_db_span();
  system_db_span_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ModifiedSpanTrigger.system_db_span)
}

// -------------------------------------------------------------------

// InternalCommitTrigger

// optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
inline bool InternalCommitTrigger::has_split_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalCommitTrigger::set_has_split_trigger() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalCommitTrigger::clear_has_split_trigger() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalCommitTrigger::clear_split_trigger() {
  if (split_trigger_ != NULL) split_trigger_->::cockroach::roachpb::SplitTrigger::Clear();
  clear_has_split_trigger();
}
inline const ::cockroach::roachpb::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_ != NULL ? *split_trigger_ : *default_instance_->split_trigger_;
}
inline ::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  set_has_split_trigger();
  if (split_trigger_ == NULL) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
inline ::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  clear_has_split_trigger();
  ::cockroach::roachpb::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_split_trigger(::cockroach::roachpb::SplitTrigger* split_trigger) {
  delete split_trigger_;
  split_trigger_ = split_trigger;
  if (split_trigger) {
    set_has_split_trigger();
  } else {
    clear_has_split_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.split_trigger)
}

// optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
inline bool InternalCommitTrigger::has_merge_trigger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalCommitTrigger::set_has_merge_trigger() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalCommitTrigger::clear_has_merge_trigger() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalCommitTrigger::clear_merge_trigger() {
  if (merge_trigger_ != NULL) merge_trigger_->::cockroach::roachpb::MergeTrigger::Clear();
  clear_has_merge_trigger();
}
inline const ::cockroach::roachpb::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_ != NULL ? *merge_trigger_ : *default_instance_->merge_trigger_;
}
inline ::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  set_has_merge_trigger();
  if (merge_trigger_ == NULL) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
inline ::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  clear_has_merge_trigger();
  ::cockroach::roachpb::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_merge_trigger(::cockroach::roachpb::MergeTrigger* merge_trigger) {
  delete merge_trigger_;
  merge_trigger_ = merge_trigger;
  if (merge_trigger) {
    set_has_merge_trigger();
  } else {
    clear_has_merge_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
}

// optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
inline bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InternalCommitTrigger::set_has_change_replicas_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InternalCommitTrigger::clear_has_change_replicas_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::roachpb::ChangeReplicasTrigger::Clear();
  clear_has_change_replicas_trigger();
}
inline const ::cockroach::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_ != NULL ? *change_replicas_trigger_ : *default_instance_->change_replicas_trigger_;
}
inline ::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  set_has_change_replicas_trigger();
  if (change_replicas_trigger_ == NULL) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
inline ::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  clear_has_change_replicas_trigger();
  ::cockroach::roachpb::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_change_replicas_trigger(::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger) {
  delete change_replicas_trigger_;
  change_replicas_trigger_ = change_replicas_trigger;
  if (change_replicas_trigger) {
    set_has_change_replicas_trigger();
  } else {
    clear_has_change_replicas_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
}

// optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
inline bool InternalCommitTrigger::has_modified_span_trigger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InternalCommitTrigger::set_has_modified_span_trigger() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InternalCommitTrigger::clear_has_modified_span_trigger() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InternalCommitTrigger::clear_modified_span_trigger() {
  if (modified_span_trigger_ != NULL) modified_span_trigger_->::cockroach::roachpb::ModifiedSpanTrigger::Clear();
  clear_has_modified_span_trigger();
}
inline const ::cockroach::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::modified_span_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_ != NULL ? *modified_span_trigger_ : *default_instance_->modified_span_trigger_;
}
inline ::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::mutable_modified_span_trigger() {
  set_has_modified_span_trigger();
  if (modified_span_trigger_ == NULL) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_;
}
inline ::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::release_modified_span_trigger() {
  clear_has_modified_span_trigger();
  ::cockroach::roachpb::ModifiedSpanTrigger* temp = modified_span_trigger_;
  modified_span_trigger_ = NULL;
  return temp;
}
inline void InternalCommitTrigger::set_allocated_modified_span_trigger(::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger) {
  delete modified_span_trigger_;
  modified_span_trigger_ = modified_span_trigger;
  if (modified_span_trigger) {
    set_has_modified_span_trigger();
  } else {
    clear_has_modified_span_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
}

// -------------------------------------------------------------------

// NodeList

// repeated int32 nodes = 1 [packed = true];
inline int NodeList::nodes_size() const {
  return nodes_.size();
}
inline void NodeList::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::int32 NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeList.nodes)
  return nodes_.Get(index);
}
inline void NodeList::set_nodes(int index, ::google::protobuf::int32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NodeList.nodes)
}
inline void NodeList::add_nodes(::google::protobuf::int32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.NodeList.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.NodeList.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.NodeList.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// Transaction

// optional string name = 1;
inline bool Transaction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.name)
}
inline void Transaction::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.name)
}
inline void Transaction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.name)
}
inline ::std::string* Transaction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.name)
}

// optional bytes key = 2;
inline bool Transaction::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Transaction::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.key)
}
inline void Transaction::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.key)
}
inline void Transaction::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.key)
}
inline ::std::string* Transaction::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.key)
}

// optional bytes id = 3;
inline bool Transaction::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transaction::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transaction::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Transaction::id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.id)
}
inline void Transaction::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.id)
}
inline void Transaction::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.id)
}
inline ::std::string* Transaction::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transaction::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.id)
}

// optional int32 priority = 4;
inline bool Transaction::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transaction::set_has_priority() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transaction::clear_has_priority() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transaction::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 Transaction::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.priority)
  return priority_;
}
inline void Transaction::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.priority)
}

// optional .cockroach.roachpb.IsolationType isolation = 5;
inline bool Transaction::has_isolation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transaction::set_has_isolation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transaction::clear_has_isolation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transaction::clear_isolation() {
  isolation_ = 0;
  clear_has_isolation();
}
inline ::cockroach::roachpb::IsolationType Transaction::isolation() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.isolation)
  return static_cast< ::cockroach::roachpb::IsolationType >(isolation_);
}
inline void Transaction::set_isolation(::cockroach::roachpb::IsolationType value) {
  assert(::cockroach::roachpb::IsolationType_IsValid(value));
  set_has_isolation();
  isolation_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.isolation)
}

// optional .cockroach.roachpb.TransactionStatus status = 6;
inline bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transaction::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transaction::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::cockroach::roachpb::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
inline void Transaction::set_status(::cockroach::roachpb::TransactionStatus value) {
  assert(::cockroach::roachpb::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.status)
}

// optional int32 epoch = 7;
inline bool Transaction::has_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transaction::set_has_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transaction::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transaction::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
inline ::google::protobuf::int32 Transaction::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.epoch)
  return epoch_;
}
inline void Transaction::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.epoch)
}

// optional .cockroach.roachpb.Timestamp last_heartbeat = 8;
inline bool Transaction::has_last_heartbeat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transaction::set_has_last_heartbeat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transaction::clear_has_last_heartbeat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transaction::clear_last_heartbeat() {
  if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_last_heartbeat();
}
inline const ::cockroach::roachpb::Timestamp& Transaction::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_ != NULL ? *last_heartbeat_ : *default_instance_->last_heartbeat_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::mutable_last_heartbeat() {
  set_has_last_heartbeat();
  if (last_heartbeat_ == NULL) {
    last_heartbeat_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::release_last_heartbeat() {
  clear_has_last_heartbeat();
  ::cockroach::roachpb::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_last_heartbeat(::cockroach::roachpb::Timestamp* last_heartbeat) {
  delete last_heartbeat_;
  last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    set_has_last_heartbeat();
  } else {
    clear_has_last_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.last_heartbeat)
}

// optional .cockroach.roachpb.Timestamp timestamp = 9;
inline bool Transaction::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transaction::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transaction::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transaction::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.timestamp)
  return timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.timestamp)
}

// optional .cockroach.roachpb.Timestamp orig_timestamp = 10;
inline bool Transaction::has_orig_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Transaction::set_has_orig_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Transaction::clear_has_orig_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Transaction::clear_orig_timestamp() {
  if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_orig_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& Transaction::orig_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_ != NULL ? *orig_timestamp_ : *default_instance_->orig_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::mutable_orig_timestamp() {
  set_has_orig_timestamp();
  if (orig_timestamp_ == NULL) {
    orig_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::release_orig_timestamp() {
  clear_has_orig_timestamp();
  ::cockroach::roachpb::Timestamp* temp = orig_timestamp_;
  orig_timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_orig_timestamp(::cockroach::roachpb::Timestamp* orig_timestamp) {
  delete orig_timestamp_;
  orig_timestamp_ = orig_timestamp;
  if (orig_timestamp) {
    set_has_orig_timestamp();
  } else {
    clear_has_orig_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.orig_timestamp)
}

// optional .cockroach.roachpb.Timestamp max_timestamp = 11;
inline bool Transaction::has_max_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Transaction::set_has_max_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Transaction::clear_has_max_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Transaction::clear_max_timestamp() {
  if (max_timestamp_ != NULL) max_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_max_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& Transaction::max_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_ != NULL ? *max_timestamp_ : *default_instance_->max_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::mutable_max_timestamp() {
  set_has_max_timestamp();
  if (max_timestamp_ == NULL) {
    max_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* Transaction::release_max_timestamp() {
  clear_has_max_timestamp();
  ::cockroach::roachpb::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_max_timestamp(::cockroach::roachpb::Timestamp* max_timestamp) {
  delete max_timestamp_;
  max_timestamp_ = max_timestamp;
  if (max_timestamp) {
    set_has_max_timestamp();
  } else {
    clear_has_max_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.max_timestamp)
}

// optional .cockroach.roachpb.NodeList certain_nodes = 12;
inline bool Transaction::has_certain_nodes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Transaction::set_has_certain_nodes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Transaction::clear_has_certain_nodes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Transaction::clear_certain_nodes() {
  if (certain_nodes_ != NULL) certain_nodes_->::cockroach::roachpb::NodeList::Clear();
  clear_has_certain_nodes();
}
inline const ::cockroach::roachpb::NodeList& Transaction::certain_nodes() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.certain_nodes)
  return certain_nodes_ != NULL ? *certain_nodes_ : *default_instance_->certain_nodes_;
}
inline ::cockroach::roachpb::NodeList* Transaction::mutable_certain_nodes() {
  set_has_certain_nodes();
  if (certain_nodes_ == NULL) {
    certain_nodes_ = new ::cockroach::roachpb::NodeList;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.certain_nodes)
  return certain_nodes_;
}
inline ::cockroach::roachpb::NodeList* Transaction::release_certain_nodes() {
  clear_has_certain_nodes();
  ::cockroach::roachpb::NodeList* temp = certain_nodes_;
  certain_nodes_ = NULL;
  return temp;
}
inline void Transaction::set_allocated_certain_nodes(::cockroach::roachpb::NodeList* certain_nodes) {
  delete certain_nodes_;
  certain_nodes_ = certain_nodes;
  if (certain_nodes) {
    set_has_certain_nodes();
  } else {
    clear_has_certain_nodes();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.certain_nodes)
}

// optional bool Writing = 13;
inline bool Transaction::has_writing() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Transaction::set_has_writing() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Transaction::clear_has_writing() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Transaction::clear_writing() {
  writing_ = false;
  clear_has_writing();
}
inline bool Transaction::writing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.Writing)
  return writing_;
}
inline void Transaction::set_writing(bool value) {
  set_has_writing();
  writing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.Writing)
}

// optional uint32 Sequence = 14;
inline bool Transaction::has_sequence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Transaction::set_has_sequence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Transaction::clear_has_sequence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Transaction::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 Transaction::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.Sequence)
  return sequence_;
}
inline void Transaction::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.Sequence)
}

// repeated .cockroach.roachpb.Span Intents = 15;
inline int Transaction::intents_size() const {
  return intents_.size();
}
inline void Transaction::clear_intents() {
  intents_.Clear();
}
inline const ::cockroach::roachpb::Span& Transaction::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.Intents)
  return intents_.Get(index);
}
inline ::cockroach::roachpb::Span* Transaction::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.Intents)
  return intents_.Mutable(index);
}
inline ::cockroach::roachpb::Span* Transaction::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Transaction.Intents)
  return intents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
Transaction::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Transaction.Intents)
  return intents_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
Transaction::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Transaction.Intents)
  return &intents_;
}

// -------------------------------------------------------------------

// Intent

// optional .cockroach.roachpb.Span span = 1;
inline bool Intent::has_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Intent::set_has_span() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Intent::clear_has_span() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Intent::clear_span() {
  if (span_ != NULL) span_->::cockroach::roachpb::Span::Clear();
  clear_has_span();
}
inline const ::cockroach::roachpb::Span& Intent::span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.span)
  return span_ != NULL ? *span_ : *default_instance_->span_;
}
inline ::cockroach::roachpb::Span* Intent::mutable_span() {
  set_has_span();
  if (span_ == NULL) {
    span_ = new ::cockroach::roachpb::Span;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.span)
  return span_;
}
inline ::cockroach::roachpb::Span* Intent::release_span() {
  clear_has_span();
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
inline void Intent::set_allocated_span(::cockroach::roachpb::Span* span) {
  delete span_;
  span_ = span;
  if (span) {
    set_has_span();
  } else {
    clear_has_span();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.span)
}

// optional .cockroach.roachpb.Transaction txn = 2;
inline bool Intent::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Intent::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Intent::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Intent::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& Intent::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* Intent::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* Intent::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void Intent::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.txn)
}

// -------------------------------------------------------------------

// Lease

// optional .cockroach.roachpb.Timestamp start = 1;
inline bool Lease::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lease::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lease::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lease::clear_start() {
  if (start_ != NULL) start_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_start();
}
inline const ::cockroach::roachpb::Timestamp& Lease::start() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::cockroach::roachpb::Timestamp* Lease::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.start)
  return start_;
}
inline ::cockroach::roachpb::Timestamp* Lease::release_start() {
  clear_has_start();
  ::cockroach::roachpb::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
inline void Lease::set_allocated_start(::cockroach::roachpb::Timestamp* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.start)
}

// optional .cockroach.roachpb.Timestamp expiration = 2;
inline bool Lease::has_expiration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lease::set_has_expiration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lease::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lease::clear_expiration() {
  if (expiration_ != NULL) expiration_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_expiration();
}
inline const ::cockroach::roachpb::Timestamp& Lease::expiration() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.expiration)
  return expiration_ != NULL ? *expiration_ : *default_instance_->expiration_;
}
inline ::cockroach::roachpb::Timestamp* Lease::mutable_expiration() {
  set_has_expiration();
  if (expiration_ == NULL) {
    expiration_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.expiration)
  return expiration_;
}
inline ::cockroach::roachpb::Timestamp* Lease::release_expiration() {
  clear_has_expiration();
  ::cockroach::roachpb::Timestamp* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
inline void Lease::set_allocated_expiration(::cockroach::roachpb::Timestamp* expiration) {
  delete expiration_;
  expiration_ = expiration;
  if (expiration) {
    set_has_expiration();
  } else {
    clear_has_expiration();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.expiration)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
inline bool Lease::has_replica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lease::set_has_replica() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lease::clear_has_replica() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lease::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& Lease::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* Lease::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.replica)
  return replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* Lease::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void Lease::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.replica)
}

// -------------------------------------------------------------------

// GCMetadata

// optional int64 last_scan_nanos = 1;
inline bool GCMetadata::has_last_scan_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GCMetadata::set_has_last_scan_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GCMetadata::clear_has_last_scan_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GCMetadata::clear_last_scan_nanos() {
  last_scan_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_last_scan_nanos();
}
inline ::google::protobuf::int64 GCMetadata::last_scan_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCMetadata.last_scan_nanos)
  return last_scan_nanos_;
}
inline void GCMetadata::set_last_scan_nanos(::google::protobuf::int64 value) {
  set_has_last_scan_nanos();
  last_scan_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.GCMetadata.last_scan_nanos)
}

// optional int64 oldest_intent_nanos = 2;
inline bool GCMetadata::has_oldest_intent_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GCMetadata::set_has_oldest_intent_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GCMetadata::clear_has_oldest_intent_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GCMetadata::clear_oldest_intent_nanos() {
  oldest_intent_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_oldest_intent_nanos();
}
inline ::google::protobuf::int64 GCMetadata::oldest_intent_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.GCMetadata.oldest_intent_nanos)
  return oldest_intent_nanos_;
}
inline void GCMetadata::set_oldest_intent_nanos(::google::protobuf::int64 value) {
  set_has_oldest_intent_nanos();
  oldest_intent_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.GCMetadata.oldest_intent_nanos)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::roachpb::ValueType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::roachpb::ValueType>() {
  return ::cockroach::roachpb::ValueType_descriptor();
}
template <> struct is_proto_enum< ::cockroach::roachpb::ReplicaChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::roachpb::ReplicaChangeType>() {
  return ::cockroach::roachpb::ReplicaChangeType_descriptor();
}
template <> struct is_proto_enum< ::cockroach::roachpb::IsolationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::roachpb::IsolationType>() {
  return ::cockroach::roachpb::IsolationType_descriptor();
}
template <> struct is_proto_enum< ::cockroach::roachpb::TransactionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::roachpb::TransactionStatus>() {
  return ::cockroach::roachpb::TransactionStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2froachpb_2fdata_2eproto__INCLUDED
