// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/errors.proto

#ifndef PROTOBUF_cockroach_2froachpb_2ferrors_2eproto__INCLUDED
#define PROTOBUF_cockroach_2froachpb_2ferrors_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/roachpb/metadata.pb.h"
#include "cockroach/roachpb/data.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

class ConditionFailedError;
class DidntUpdateDescriptorError;
class ErrPosition;
class Error;
class ErrorDetail;
class ExistingSchemaChangeLeaseError;
class LeaseRejectedError;
class LeaseVersionChangedError;
class NodeUnavailableError;
class NotLeaderError;
class OpRequiresTxnError;
class RaftGroupDeletedError;
class RangeKeyMismatchError;
class RangeNotFoundError;
class ReadWithinUncertaintyIntervalError;
class ReplicaCorruptionError;
class SendError;
class SqlTransactionAbortedError;
class TransactionAbortedError;
class TransactionPushError;
class TransactionRetryError;
class TransactionStatusError;
class WriteIntentError;
class WriteTooOldError;

enum TransactionRestart {
  ABORT = 0,
  BACKOFF = 1,
  IMMEDIATE = 2
};
bool TransactionRestart_IsValid(int value);
const TransactionRestart TransactionRestart_MIN = ABORT;
const TransactionRestart TransactionRestart_MAX = IMMEDIATE;
const int TransactionRestart_ARRAYSIZE = TransactionRestart_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransactionRestart_descriptor();
inline const ::std::string& TransactionRestart_Name(TransactionRestart value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransactionRestart_descriptor(), value);
}
inline bool TransactionRestart_Parse(
    const ::std::string& name, TransactionRestart* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransactionRestart>(
    TransactionRestart_descriptor(), name, value);
}
// ===================================================================

class NotLeaderError : public ::google::protobuf::Message {
 public:
  NotLeaderError();
  virtual ~NotLeaderError();

  NotLeaderError(const NotLeaderError& from);

  inline NotLeaderError& operator=(const NotLeaderError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotLeaderError& default_instance();

  void Swap(NotLeaderError* other);

  // implements Message ----------------------------------------------

  inline NotLeaderError* New() const { return New(NULL); }

  NotLeaderError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotLeaderError& from);
  void MergeFrom(const NotLeaderError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotLeaderError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 1;
  const ::cockroach::roachpb::ReplicaDescriptor& replica() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_replica();
  ::cockroach::roachpb::ReplicaDescriptor* release_replica();
  void set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica);

  // optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 2;
  const ::cockroach::roachpb::ReplicaDescriptor& leader() const;
  ::cockroach::roachpb::ReplicaDescriptor* mutable_leader();
  ::cockroach::roachpb::ReplicaDescriptor* release_leader();
  void set_allocated_leader(::cockroach::roachpb::ReplicaDescriptor* leader);

  // optional int64 range_id = 3;
  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 3;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NotLeaderError)
 private:
  inline void set_has_replica();
  inline void clear_has_replica();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_range_id();
  inline void clear_has_range_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::ReplicaDescriptor* replica_;
  ::cockroach::roachpb::ReplicaDescriptor* leader_;
  ::google::protobuf::int64 range_id_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static NotLeaderError* default_instance_;
};
// -------------------------------------------------------------------

class NodeUnavailableError : public ::google::protobuf::Message {
 public:
  NodeUnavailableError();
  virtual ~NodeUnavailableError();

  NodeUnavailableError(const NodeUnavailableError& from);

  inline NodeUnavailableError& operator=(const NodeUnavailableError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeUnavailableError& default_instance();

  void Swap(NodeUnavailableError* other);

  // implements Message ----------------------------------------------

  inline NodeUnavailableError* New() const { return New(NULL); }

  NodeUnavailableError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeUnavailableError& from);
  void MergeFrom(const NodeUnavailableError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeUnavailableError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.NodeUnavailableError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static NodeUnavailableError* default_instance_;
};
// -------------------------------------------------------------------

class RangeNotFoundError : public ::google::protobuf::Message {
 public:
  RangeNotFoundError();
  virtual ~RangeNotFoundError();

  RangeNotFoundError(const RangeNotFoundError& from);

  inline RangeNotFoundError& operator=(const RangeNotFoundError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeNotFoundError& default_instance();

  void Swap(RangeNotFoundError* other);

  // implements Message ----------------------------------------------

  inline RangeNotFoundError* New() const { return New(NULL); }

  RangeNotFoundError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeNotFoundError& from);
  void MergeFrom(const RangeNotFoundError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeNotFoundError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 range_id = 1;
  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeNotFoundError)
 private:
  inline void set_has_range_id();
  inline void clear_has_range_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 range_id_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static RangeNotFoundError* default_instance_;
};
// -------------------------------------------------------------------

class RangeKeyMismatchError : public ::google::protobuf::Message {
 public:
  RangeKeyMismatchError();
  virtual ~RangeKeyMismatchError();

  RangeKeyMismatchError(const RangeKeyMismatchError& from);

  inline RangeKeyMismatchError& operator=(const RangeKeyMismatchError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeKeyMismatchError& default_instance();

  void Swap(RangeKeyMismatchError* other);

  // implements Message ----------------------------------------------

  inline RangeKeyMismatchError* New() const { return New(NULL); }

  RangeKeyMismatchError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RangeKeyMismatchError& from);
  void MergeFrom(const RangeKeyMismatchError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RangeKeyMismatchError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes request_start_key = 1;
  bool has_request_start_key() const;
  void clear_request_start_key();
  static const int kRequestStartKeyFieldNumber = 1;
  const ::std::string& request_start_key() const;
  void set_request_start_key(const ::std::string& value);
  void set_request_start_key(const char* value);
  void set_request_start_key(const void* value, size_t size);
  ::std::string* mutable_request_start_key();
  ::std::string* release_request_start_key();
  void set_allocated_request_start_key(::std::string* request_start_key);

  // optional bytes request_end_key = 2;
  bool has_request_end_key() const;
  void clear_request_end_key();
  static const int kRequestEndKeyFieldNumber = 2;
  const ::std::string& request_end_key() const;
  void set_request_end_key(const ::std::string& value);
  void set_request_end_key(const char* value);
  void set_request_end_key(const void* value, size_t size);
  ::std::string* mutable_request_end_key();
  ::std::string* release_request_end_key();
  void set_allocated_request_end_key(::std::string* request_end_key);

  // optional .cockroach.roachpb.RangeDescriptor range = 3;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 3;
  const ::cockroach::roachpb::RangeDescriptor& range() const;
  ::cockroach::roachpb::RangeDescriptor* mutable_range();
  ::cockroach::roachpb::RangeDescriptor* release_range();
  void set_allocated_range(::cockroach::roachpb::RangeDescriptor* range);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RangeKeyMismatchError)
 private:
  inline void set_has_request_start_key();
  inline void clear_has_request_start_key();
  inline void set_has_request_end_key();
  inline void clear_has_request_end_key();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_start_key_;
  ::google::protobuf::internal::ArenaStringPtr request_end_key_;
  ::cockroach::roachpb::RangeDescriptor* range_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static RangeKeyMismatchError* default_instance_;
};
// -------------------------------------------------------------------

class ReadWithinUncertaintyIntervalError : public ::google::protobuf::Message {
 public:
  ReadWithinUncertaintyIntervalError();
  virtual ~ReadWithinUncertaintyIntervalError();

  ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from);

  inline ReadWithinUncertaintyIntervalError& operator=(const ReadWithinUncertaintyIntervalError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadWithinUncertaintyIntervalError& default_instance();

  void Swap(ReadWithinUncertaintyIntervalError* other);

  // implements Message ----------------------------------------------

  inline ReadWithinUncertaintyIntervalError* New() const { return New(NULL); }

  ReadWithinUncertaintyIntervalError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadWithinUncertaintyIntervalError& from);
  void MergeFrom(const ReadWithinUncertaintyIntervalError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadWithinUncertaintyIntervalError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::cockroach::roachpb::Timestamp& timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_timestamp();
  ::cockroach::roachpb::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp);

  // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
  bool has_existing_timestamp() const;
  void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  const ::cockroach::roachpb::Timestamp& existing_timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_existing_timestamp();
  ::cockroach::roachpb::Timestamp* release_existing_timestamp();
  void set_allocated_existing_timestamp(::cockroach::roachpb::Timestamp* existing_timestamp);

  // optional int32 node_id = 3;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  ::google::protobuf::int32 node_id() const;
  void set_node_id(::google::protobuf::int32 value);

  // optional .cockroach.roachpb.Transaction txn = 4;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 4;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Timestamp* timestamp_;
  ::cockroach::roachpb::Timestamp* existing_timestamp_;
  ::cockroach::roachpb::Transaction* txn_;
  ::google::protobuf::int32 node_id_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ReadWithinUncertaintyIntervalError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionAbortedError : public ::google::protobuf::Message {
 public:
  TransactionAbortedError();
  virtual ~TransactionAbortedError();

  TransactionAbortedError(const TransactionAbortedError& from);

  inline TransactionAbortedError& operator=(const TransactionAbortedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionAbortedError& default_instance();

  void Swap(TransactionAbortedError* other);

  // implements Message ----------------------------------------------

  inline TransactionAbortedError* New() const { return New(NULL); }

  TransactionAbortedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionAbortedError& from);
  void MergeFrom(const TransactionAbortedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionAbortedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Transaction txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionAbortedError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Transaction* txn_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionAbortedError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionPushError : public ::google::protobuf::Message {
 public:
  TransactionPushError();
  virtual ~TransactionPushError();

  TransactionPushError(const TransactionPushError& from);

  inline TransactionPushError& operator=(const TransactionPushError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionPushError& default_instance();

  void Swap(TransactionPushError* other);

  // implements Message ----------------------------------------------

  inline TransactionPushError* New() const { return New(NULL); }

  TransactionPushError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionPushError& from);
  void MergeFrom(const TransactionPushError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionPushError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Transaction txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // optional .cockroach.roachpb.Transaction pushee_txn = 2;
  bool has_pushee_txn() const;
  void clear_pushee_txn();
  static const int kPusheeTxnFieldNumber = 2;
  const ::cockroach::roachpb::Transaction& pushee_txn() const;
  ::cockroach::roachpb::Transaction* mutable_pushee_txn();
  ::cockroach::roachpb::Transaction* release_pushee_txn();
  void set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionPushError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_pushee_txn();
  inline void clear_has_pushee_txn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Transaction* txn_;
  ::cockroach::roachpb::Transaction* pushee_txn_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionPushError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionRetryError : public ::google::protobuf::Message {
 public:
  TransactionRetryError();
  virtual ~TransactionRetryError();

  TransactionRetryError(const TransactionRetryError& from);

  inline TransactionRetryError& operator=(const TransactionRetryError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionRetryError& default_instance();

  void Swap(TransactionRetryError* other);

  // implements Message ----------------------------------------------

  inline TransactionRetryError* New() const { return New(NULL); }

  TransactionRetryError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionRetryError& from);
  void MergeFrom(const TransactionRetryError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionRetryError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionRetryError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionRetryError* default_instance_;
};
// -------------------------------------------------------------------

class TransactionStatusError : public ::google::protobuf::Message {
 public:
  TransactionStatusError();
  virtual ~TransactionStatusError();

  TransactionStatusError(const TransactionStatusError& from);

  inline TransactionStatusError& operator=(const TransactionStatusError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransactionStatusError& default_instance();

  void Swap(TransactionStatusError* other);

  // implements Message ----------------------------------------------

  inline TransactionStatusError* New() const { return New(NULL); }

  TransactionStatusError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransactionStatusError& from);
  void MergeFrom(const TransactionStatusError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransactionStatusError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Transaction txn = 1;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 1;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.TransactionStatusError)
 private:
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Transaction* txn_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static TransactionStatusError* default_instance_;
};
// -------------------------------------------------------------------

class WriteIntentError : public ::google::protobuf::Message {
 public:
  WriteIntentError();
  virtual ~WriteIntentError();

  WriteIntentError(const WriteIntentError& from);

  inline WriteIntentError& operator=(const WriteIntentError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteIntentError& default_instance();

  void Swap(WriteIntentError* other);

  // implements Message ----------------------------------------------

  inline WriteIntentError* New() const { return New(NULL); }

  WriteIntentError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteIntentError& from);
  void MergeFrom(const WriteIntentError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteIntentError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cockroach.roachpb.Intent intents = 1;
  int intents_size() const;
  void clear_intents();
  static const int kIntentsFieldNumber = 1;
  const ::cockroach::roachpb::Intent& intents(int index) const;
  ::cockroach::roachpb::Intent* mutable_intents(int index);
  ::cockroach::roachpb::Intent* add_intents();
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >*
      mutable_intents();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >&
      intents() const;

  // optional bool resolved = 2;
  bool has_resolved() const;
  void clear_resolved();
  static const int kResolvedFieldNumber = 2;
  bool resolved() const;
  void set_resolved(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteIntentError)
 private:
  inline void set_has_resolved();
  inline void clear_has_resolved();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent > intents_;
  bool resolved_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static WriteIntentError* default_instance_;
};
// -------------------------------------------------------------------

class WriteTooOldError : public ::google::protobuf::Message {
 public:
  WriteTooOldError();
  virtual ~WriteTooOldError();

  WriteTooOldError(const WriteTooOldError& from);

  inline WriteTooOldError& operator=(const WriteTooOldError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteTooOldError& default_instance();

  void Swap(WriteTooOldError* other);

  // implements Message ----------------------------------------------

  inline WriteTooOldError* New() const { return New(NULL); }

  WriteTooOldError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteTooOldError& from);
  void MergeFrom(const WriteTooOldError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteTooOldError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::cockroach::roachpb::Timestamp& timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_timestamp();
  ::cockroach::roachpb::Timestamp* release_timestamp();
  void set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp);

  // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
  bool has_existing_timestamp() const;
  void clear_existing_timestamp();
  static const int kExistingTimestampFieldNumber = 2;
  const ::cockroach::roachpb::Timestamp& existing_timestamp() const;
  ::cockroach::roachpb::Timestamp* mutable_existing_timestamp();
  ::cockroach::roachpb::Timestamp* release_existing_timestamp();
  void set_allocated_existing_timestamp(::cockroach::roachpb::Timestamp* existing_timestamp);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.WriteTooOldError)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_existing_timestamp();
  inline void clear_has_existing_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Timestamp* timestamp_;
  ::cockroach::roachpb::Timestamp* existing_timestamp_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static WriteTooOldError* default_instance_;
};
// -------------------------------------------------------------------

class OpRequiresTxnError : public ::google::protobuf::Message {
 public:
  OpRequiresTxnError();
  virtual ~OpRequiresTxnError();

  OpRequiresTxnError(const OpRequiresTxnError& from);

  inline OpRequiresTxnError& operator=(const OpRequiresTxnError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpRequiresTxnError& default_instance();

  void Swap(OpRequiresTxnError* other);

  // implements Message ----------------------------------------------

  inline OpRequiresTxnError* New() const { return New(NULL); }

  OpRequiresTxnError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpRequiresTxnError& from);
  void MergeFrom(const OpRequiresTxnError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OpRequiresTxnError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.OpRequiresTxnError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static OpRequiresTxnError* default_instance_;
};
// -------------------------------------------------------------------

class ConditionFailedError : public ::google::protobuf::Message {
 public:
  ConditionFailedError();
  virtual ~ConditionFailedError();

  ConditionFailedError(const ConditionFailedError& from);

  inline ConditionFailedError& operator=(const ConditionFailedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionFailedError& default_instance();

  void Swap(ConditionFailedError* other);

  // implements Message ----------------------------------------------

  inline ConditionFailedError* New() const { return New(NULL); }

  ConditionFailedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConditionFailedError& from);
  void MergeFrom(const ConditionFailedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionFailedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.Value actual_value = 1;
  bool has_actual_value() const;
  void clear_actual_value();
  static const int kActualValueFieldNumber = 1;
  const ::cockroach::roachpb::Value& actual_value() const;
  ::cockroach::roachpb::Value* mutable_actual_value();
  ::cockroach::roachpb::Value* release_actual_value();
  void set_allocated_actual_value(::cockroach::roachpb::Value* actual_value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ConditionFailedError)
 private:
  inline void set_has_actual_value();
  inline void clear_has_actual_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::Value* actual_value_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ConditionFailedError* default_instance_;
};
// -------------------------------------------------------------------

class LeaseRejectedError : public ::google::protobuf::Message {
 public:
  LeaseRejectedError();
  virtual ~LeaseRejectedError();

  LeaseRejectedError(const LeaseRejectedError& from);

  inline LeaseRejectedError& operator=(const LeaseRejectedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaseRejectedError& default_instance();

  void Swap(LeaseRejectedError* other);

  // implements Message ----------------------------------------------

  inline LeaseRejectedError* New() const { return New(NULL); }

  LeaseRejectedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaseRejectedError& from);
  void MergeFrom(const LeaseRejectedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseRejectedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .cockroach.roachpb.Lease requested = 2;
  bool has_requested() const;
  void clear_requested();
  static const int kRequestedFieldNumber = 2;
  const ::cockroach::roachpb::Lease& requested() const;
  ::cockroach::roachpb::Lease* mutable_requested();
  ::cockroach::roachpb::Lease* release_requested();
  void set_allocated_requested(::cockroach::roachpb::Lease* requested);

  // optional .cockroach.roachpb.Lease existing = 3;
  bool has_existing() const;
  void clear_existing();
  static const int kExistingFieldNumber = 3;
  const ::cockroach::roachpb::Lease& existing() const;
  ::cockroach::roachpb::Lease* mutable_existing();
  ::cockroach::roachpb::Lease* release_existing();
  void set_allocated_existing(::cockroach::roachpb::Lease* existing);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.LeaseRejectedError)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_requested();
  inline void clear_has_requested();
  inline void set_has_existing();
  inline void clear_has_existing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::cockroach::roachpb::Lease* requested_;
  ::cockroach::roachpb::Lease* existing_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static LeaseRejectedError* default_instance_;
};
// -------------------------------------------------------------------

class SendError : public ::google::protobuf::Message {
 public:
  SendError();
  virtual ~SendError();

  SendError(const SendError& from);

  inline SendError& operator=(const SendError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendError& default_instance();

  void Swap(SendError* other);

  // implements Message ----------------------------------------------

  inline SendError* New() const { return New(NULL); }

  SendError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendError& from);
  void MergeFrom(const SendError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional bool retryable = 2;
  bool has_retryable() const;
  void clear_retryable();
  static const int kRetryableFieldNumber = 2;
  bool retryable() const;
  void set_retryable(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SendError)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retryable();
  inline void clear_has_retryable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool retryable_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static SendError* default_instance_;
};
// -------------------------------------------------------------------

class RaftGroupDeletedError : public ::google::protobuf::Message {
 public:
  RaftGroupDeletedError();
  virtual ~RaftGroupDeletedError();

  RaftGroupDeletedError(const RaftGroupDeletedError& from);

  inline RaftGroupDeletedError& operator=(const RaftGroupDeletedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftGroupDeletedError& default_instance();

  void Swap(RaftGroupDeletedError* other);

  // implements Message ----------------------------------------------

  inline RaftGroupDeletedError* New() const { return New(NULL); }

  RaftGroupDeletedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftGroupDeletedError& from);
  void MergeFrom(const RaftGroupDeletedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftGroupDeletedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.RaftGroupDeletedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static RaftGroupDeletedError* default_instance_;
};
// -------------------------------------------------------------------

class ReplicaCorruptionError : public ::google::protobuf::Message {
 public:
  ReplicaCorruptionError();
  virtual ~ReplicaCorruptionError();

  ReplicaCorruptionError(const ReplicaCorruptionError& from);

  inline ReplicaCorruptionError& operator=(const ReplicaCorruptionError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicaCorruptionError& default_instance();

  void Swap(ReplicaCorruptionError* other);

  // implements Message ----------------------------------------------

  inline ReplicaCorruptionError* New() const { return New(NULL); }

  ReplicaCorruptionError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplicaCorruptionError& from);
  void MergeFrom(const ReplicaCorruptionError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReplicaCorruptionError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_msg = 1;
  bool has_error_msg() const;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 1;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // optional bool processed = 2;
  bool has_processed() const;
  void clear_processed();
  static const int kProcessedFieldNumber = 2;
  bool processed() const;
  void set_processed(bool value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ReplicaCorruptionError)
 private:
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_processed();
  inline void clear_has_processed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  bool processed_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ReplicaCorruptionError* default_instance_;
};
// -------------------------------------------------------------------

class LeaseVersionChangedError : public ::google::protobuf::Message {
 public:
  LeaseVersionChangedError();
  virtual ~LeaseVersionChangedError();

  LeaseVersionChangedError(const LeaseVersionChangedError& from);

  inline LeaseVersionChangedError& operator=(const LeaseVersionChangedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaseVersionChangedError& default_instance();

  void Swap(LeaseVersionChangedError* other);

  // implements Message ----------------------------------------------

  inline LeaseVersionChangedError* New() const { return New(NULL); }

  LeaseVersionChangedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaseVersionChangedError& from);
  void MergeFrom(const LeaseVersionChangedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaseVersionChangedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.LeaseVersionChangedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static LeaseVersionChangedError* default_instance_;
};
// -------------------------------------------------------------------

class DidntUpdateDescriptorError : public ::google::protobuf::Message {
 public:
  DidntUpdateDescriptorError();
  virtual ~DidntUpdateDescriptorError();

  DidntUpdateDescriptorError(const DidntUpdateDescriptorError& from);

  inline DidntUpdateDescriptorError& operator=(const DidntUpdateDescriptorError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DidntUpdateDescriptorError& default_instance();

  void Swap(DidntUpdateDescriptorError* other);

  // implements Message ----------------------------------------------

  inline DidntUpdateDescriptorError* New() const { return New(NULL); }

  DidntUpdateDescriptorError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DidntUpdateDescriptorError& from);
  void MergeFrom(const DidntUpdateDescriptorError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DidntUpdateDescriptorError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.DidntUpdateDescriptorError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static DidntUpdateDescriptorError* default_instance_;
};
// -------------------------------------------------------------------

class SqlTransactionAbortedError : public ::google::protobuf::Message {
 public:
  SqlTransactionAbortedError();
  virtual ~SqlTransactionAbortedError();

  SqlTransactionAbortedError(const SqlTransactionAbortedError& from);

  inline SqlTransactionAbortedError& operator=(const SqlTransactionAbortedError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SqlTransactionAbortedError& default_instance();

  void Swap(SqlTransactionAbortedError* other);

  // implements Message ----------------------------------------------

  inline SqlTransactionAbortedError* New() const { return New(NULL); }

  SqlTransactionAbortedError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SqlTransactionAbortedError& from);
  void MergeFrom(const SqlTransactionAbortedError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SqlTransactionAbortedError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.SqlTransactionAbortedError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static SqlTransactionAbortedError* default_instance_;
};
// -------------------------------------------------------------------

class ExistingSchemaChangeLeaseError : public ::google::protobuf::Message {
 public:
  ExistingSchemaChangeLeaseError();
  virtual ~ExistingSchemaChangeLeaseError();

  ExistingSchemaChangeLeaseError(const ExistingSchemaChangeLeaseError& from);

  inline ExistingSchemaChangeLeaseError& operator=(const ExistingSchemaChangeLeaseError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExistingSchemaChangeLeaseError& default_instance();

  void Swap(ExistingSchemaChangeLeaseError* other);

  // implements Message ----------------------------------------------

  inline ExistingSchemaChangeLeaseError* New() const { return New(NULL); }

  ExistingSchemaChangeLeaseError* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExistingSchemaChangeLeaseError& from);
  void MergeFrom(const ExistingSchemaChangeLeaseError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExistingSchemaChangeLeaseError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ExistingSchemaChangeLeaseError)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ExistingSchemaChangeLeaseError* default_instance_;
};
// -------------------------------------------------------------------

class ErrorDetail : public ::google::protobuf::Message {
 public:
  ErrorDetail();
  virtual ~ErrorDetail();

  ErrorDetail(const ErrorDetail& from);

  inline ErrorDetail& operator=(const ErrorDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorDetail& default_instance();

  void Swap(ErrorDetail* other);

  // implements Message ----------------------------------------------

  inline ErrorDetail* New() const { return New(NULL); }

  ErrorDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorDetail& from);
  void MergeFrom(const ErrorDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrorDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cockroach.roachpb.NotLeaderError not_leader = 1;
  bool has_not_leader() const;
  void clear_not_leader();
  static const int kNotLeaderFieldNumber = 1;
  const ::cockroach::roachpb::NotLeaderError& not_leader() const;
  ::cockroach::roachpb::NotLeaderError* mutable_not_leader();
  ::cockroach::roachpb::NotLeaderError* release_not_leader();
  void set_allocated_not_leader(::cockroach::roachpb::NotLeaderError* not_leader);

  // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
  bool has_range_not_found() const;
  void clear_range_not_found();
  static const int kRangeNotFoundFieldNumber = 2;
  const ::cockroach::roachpb::RangeNotFoundError& range_not_found() const;
  ::cockroach::roachpb::RangeNotFoundError* mutable_range_not_found();
  ::cockroach::roachpb::RangeNotFoundError* release_range_not_found();
  void set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found);

  // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
  bool has_range_key_mismatch() const;
  void clear_range_key_mismatch();
  static const int kRangeKeyMismatchFieldNumber = 3;
  const ::cockroach::roachpb::RangeKeyMismatchError& range_key_mismatch() const;
  ::cockroach::roachpb::RangeKeyMismatchError* mutable_range_key_mismatch();
  ::cockroach::roachpb::RangeKeyMismatchError* release_range_key_mismatch();
  void set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch);

  // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  bool has_read_within_uncertainty_interval() const;
  void clear_read_within_uncertainty_interval();
  static const int kReadWithinUncertaintyIntervalFieldNumber = 4;
  const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError& read_within_uncertainty_interval() const;
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* mutable_read_within_uncertainty_interval();
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* release_read_within_uncertainty_interval();
  void set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval);

  // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
  bool has_transaction_aborted() const;
  void clear_transaction_aborted();
  static const int kTransactionAbortedFieldNumber = 5;
  const ::cockroach::roachpb::TransactionAbortedError& transaction_aborted() const;
  ::cockroach::roachpb::TransactionAbortedError* mutable_transaction_aborted();
  ::cockroach::roachpb::TransactionAbortedError* release_transaction_aborted();
  void set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted);

  // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
  bool has_transaction_push() const;
  void clear_transaction_push();
  static const int kTransactionPushFieldNumber = 6;
  const ::cockroach::roachpb::TransactionPushError& transaction_push() const;
  ::cockroach::roachpb::TransactionPushError* mutable_transaction_push();
  ::cockroach::roachpb::TransactionPushError* release_transaction_push();
  void set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push);

  // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
  bool has_transaction_retry() const;
  void clear_transaction_retry();
  static const int kTransactionRetryFieldNumber = 7;
  const ::cockroach::roachpb::TransactionRetryError& transaction_retry() const;
  ::cockroach::roachpb::TransactionRetryError* mutable_transaction_retry();
  ::cockroach::roachpb::TransactionRetryError* release_transaction_retry();
  void set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry);

  // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
  bool has_transaction_status() const;
  void clear_transaction_status();
  static const int kTransactionStatusFieldNumber = 8;
  const ::cockroach::roachpb::TransactionStatusError& transaction_status() const;
  ::cockroach::roachpb::TransactionStatusError* mutable_transaction_status();
  ::cockroach::roachpb::TransactionStatusError* release_transaction_status();
  void set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status);

  // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
  bool has_write_intent() const;
  void clear_write_intent();
  static const int kWriteIntentFieldNumber = 9;
  const ::cockroach::roachpb::WriteIntentError& write_intent() const;
  ::cockroach::roachpb::WriteIntentError* mutable_write_intent();
  ::cockroach::roachpb::WriteIntentError* release_write_intent();
  void set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent);

  // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
  bool has_write_too_old() const;
  void clear_write_too_old();
  static const int kWriteTooOldFieldNumber = 10;
  const ::cockroach::roachpb::WriteTooOldError& write_too_old() const;
  ::cockroach::roachpb::WriteTooOldError* mutable_write_too_old();
  ::cockroach::roachpb::WriteTooOldError* release_write_too_old();
  void set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old);

  // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
  bool has_op_requires_txn() const;
  void clear_op_requires_txn();
  static const int kOpRequiresTxnFieldNumber = 11;
  const ::cockroach::roachpb::OpRequiresTxnError& op_requires_txn() const;
  ::cockroach::roachpb::OpRequiresTxnError* mutable_op_requires_txn();
  ::cockroach::roachpb::OpRequiresTxnError* release_op_requires_txn();
  void set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn);

  // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
  bool has_condition_failed() const;
  void clear_condition_failed();
  static const int kConditionFailedFieldNumber = 12;
  const ::cockroach::roachpb::ConditionFailedError& condition_failed() const;
  ::cockroach::roachpb::ConditionFailedError* mutable_condition_failed();
  ::cockroach::roachpb::ConditionFailedError* release_condition_failed();
  void set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed);

  // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
  bool has_lease_rejected() const;
  void clear_lease_rejected();
  static const int kLeaseRejectedFieldNumber = 13;
  const ::cockroach::roachpb::LeaseRejectedError& lease_rejected() const;
  ::cockroach::roachpb::LeaseRejectedError* mutable_lease_rejected();
  ::cockroach::roachpb::LeaseRejectedError* release_lease_rejected();
  void set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected);

  // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
  bool has_node_unavailable() const;
  void clear_node_unavailable();
  static const int kNodeUnavailableFieldNumber = 14;
  const ::cockroach::roachpb::NodeUnavailableError& node_unavailable() const;
  ::cockroach::roachpb::NodeUnavailableError* mutable_node_unavailable();
  ::cockroach::roachpb::NodeUnavailableError* release_node_unavailable();
  void set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable);

  // optional .cockroach.roachpb.SendError send = 15;
  bool has_send() const;
  void clear_send();
  static const int kSendFieldNumber = 15;
  const ::cockroach::roachpb::SendError& send() const;
  ::cockroach::roachpb::SendError* mutable_send();
  ::cockroach::roachpb::SendError* release_send();
  void set_allocated_send(::cockroach::roachpb::SendError* send);

  // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
  bool has_raft_group_deleted() const;
  void clear_raft_group_deleted();
  static const int kRaftGroupDeletedFieldNumber = 16;
  const ::cockroach::roachpb::RaftGroupDeletedError& raft_group_deleted() const;
  ::cockroach::roachpb::RaftGroupDeletedError* mutable_raft_group_deleted();
  ::cockroach::roachpb::RaftGroupDeletedError* release_raft_group_deleted();
  void set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted);

  // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
  bool has_replica_corruption() const;
  void clear_replica_corruption();
  static const int kReplicaCorruptionFieldNumber = 17;
  const ::cockroach::roachpb::ReplicaCorruptionError& replica_corruption() const;
  ::cockroach::roachpb::ReplicaCorruptionError* mutable_replica_corruption();
  ::cockroach::roachpb::ReplicaCorruptionError* release_replica_corruption();
  void set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption);

  // optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
  bool has_lease_version_changed() const;
  void clear_lease_version_changed();
  static const int kLeaseVersionChangedFieldNumber = 18;
  const ::cockroach::roachpb::LeaseVersionChangedError& lease_version_changed() const;
  ::cockroach::roachpb::LeaseVersionChangedError* mutable_lease_version_changed();
  ::cockroach::roachpb::LeaseVersionChangedError* release_lease_version_changed();
  void set_allocated_lease_version_changed(::cockroach::roachpb::LeaseVersionChangedError* lease_version_changed);

  // optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
  bool has_didnt_update_descriptor() const;
  void clear_didnt_update_descriptor();
  static const int kDidntUpdateDescriptorFieldNumber = 19;
  const ::cockroach::roachpb::DidntUpdateDescriptorError& didnt_update_descriptor() const;
  ::cockroach::roachpb::DidntUpdateDescriptorError* mutable_didnt_update_descriptor();
  ::cockroach::roachpb::DidntUpdateDescriptorError* release_didnt_update_descriptor();
  void set_allocated_didnt_update_descriptor(::cockroach::roachpb::DidntUpdateDescriptorError* didnt_update_descriptor);

  // optional .cockroach.roachpb.SqlTransactionAbortedError sql_tranasction_aborted = 20;
  bool has_sql_tranasction_aborted() const;
  void clear_sql_tranasction_aborted();
  static const int kSqlTranasctionAbortedFieldNumber = 20;
  const ::cockroach::roachpb::SqlTransactionAbortedError& sql_tranasction_aborted() const;
  ::cockroach::roachpb::SqlTransactionAbortedError* mutable_sql_tranasction_aborted();
  ::cockroach::roachpb::SqlTransactionAbortedError* release_sql_tranasction_aborted();
  void set_allocated_sql_tranasction_aborted(::cockroach::roachpb::SqlTransactionAbortedError* sql_tranasction_aborted);

  // optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 21;
  bool has_existing_scheme_change_lease() const;
  void clear_existing_scheme_change_lease();
  static const int kExistingSchemeChangeLeaseFieldNumber = 21;
  const ::cockroach::roachpb::ExistingSchemaChangeLeaseError& existing_scheme_change_lease() const;
  ::cockroach::roachpb::ExistingSchemaChangeLeaseError* mutable_existing_scheme_change_lease();
  ::cockroach::roachpb::ExistingSchemaChangeLeaseError* release_existing_scheme_change_lease();
  void set_allocated_existing_scheme_change_lease(::cockroach::roachpb::ExistingSchemaChangeLeaseError* existing_scheme_change_lease);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ErrorDetail)
 private:
  inline void set_has_not_leader();
  inline void clear_has_not_leader();
  inline void set_has_range_not_found();
  inline void clear_has_range_not_found();
  inline void set_has_range_key_mismatch();
  inline void clear_has_range_key_mismatch();
  inline void set_has_read_within_uncertainty_interval();
  inline void clear_has_read_within_uncertainty_interval();
  inline void set_has_transaction_aborted();
  inline void clear_has_transaction_aborted();
  inline void set_has_transaction_push();
  inline void clear_has_transaction_push();
  inline void set_has_transaction_retry();
  inline void clear_has_transaction_retry();
  inline void set_has_transaction_status();
  inline void clear_has_transaction_status();
  inline void set_has_write_intent();
  inline void clear_has_write_intent();
  inline void set_has_write_too_old();
  inline void clear_has_write_too_old();
  inline void set_has_op_requires_txn();
  inline void clear_has_op_requires_txn();
  inline void set_has_condition_failed();
  inline void clear_has_condition_failed();
  inline void set_has_lease_rejected();
  inline void clear_has_lease_rejected();
  inline void set_has_node_unavailable();
  inline void clear_has_node_unavailable();
  inline void set_has_send();
  inline void clear_has_send();
  inline void set_has_raft_group_deleted();
  inline void clear_has_raft_group_deleted();
  inline void set_has_replica_corruption();
  inline void clear_has_replica_corruption();
  inline void set_has_lease_version_changed();
  inline void clear_has_lease_version_changed();
  inline void set_has_didnt_update_descriptor();
  inline void clear_has_didnt_update_descriptor();
  inline void set_has_sql_tranasction_aborted();
  inline void clear_has_sql_tranasction_aborted();
  inline void set_has_existing_scheme_change_lease();
  inline void clear_has_existing_scheme_change_lease();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::roachpb::NotLeaderError* not_leader_;
  ::cockroach::roachpb::RangeNotFoundError* range_not_found_;
  ::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch_;
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval_;
  ::cockroach::roachpb::TransactionAbortedError* transaction_aborted_;
  ::cockroach::roachpb::TransactionPushError* transaction_push_;
  ::cockroach::roachpb::TransactionRetryError* transaction_retry_;
  ::cockroach::roachpb::TransactionStatusError* transaction_status_;
  ::cockroach::roachpb::WriteIntentError* write_intent_;
  ::cockroach::roachpb::WriteTooOldError* write_too_old_;
  ::cockroach::roachpb::OpRequiresTxnError* op_requires_txn_;
  ::cockroach::roachpb::ConditionFailedError* condition_failed_;
  ::cockroach::roachpb::LeaseRejectedError* lease_rejected_;
  ::cockroach::roachpb::NodeUnavailableError* node_unavailable_;
  ::cockroach::roachpb::SendError* send_;
  ::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted_;
  ::cockroach::roachpb::ReplicaCorruptionError* replica_corruption_;
  ::cockroach::roachpb::LeaseVersionChangedError* lease_version_changed_;
  ::cockroach::roachpb::DidntUpdateDescriptorError* didnt_update_descriptor_;
  ::cockroach::roachpb::SqlTransactionAbortedError* sql_tranasction_aborted_;
  ::cockroach::roachpb::ExistingSchemaChangeLeaseError* existing_scheme_change_lease_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ErrorDetail* default_instance_;
};
// -------------------------------------------------------------------

class ErrPosition : public ::google::protobuf::Message {
 public:
  ErrPosition();
  virtual ~ErrPosition();

  ErrPosition(const ErrPosition& from);

  inline ErrPosition& operator=(const ErrPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrPosition& default_instance();

  void Swap(ErrPosition* other);

  // implements Message ----------------------------------------------

  inline ErrPosition* New() const { return New(NULL); }

  ErrPosition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrPosition& from);
  void MergeFrom(const ErrPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.ErrPosition)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static ErrPosition* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional bool retryable = 2;
  bool has_retryable() const;
  void clear_retryable();
  static const int kRetryableFieldNumber = 2;
  bool retryable() const;
  void set_retryable(bool value);

  // optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
  bool has_transaction_restart() const;
  void clear_transaction_restart();
  static const int kTransactionRestartFieldNumber = 3;
  ::cockroach::roachpb::TransactionRestart transaction_restart() const;
  void set_transaction_restart(::cockroach::roachpb::TransactionRestart value);

  // optional .cockroach.roachpb.Transaction txn = 4;
  bool has_txn() const;
  void clear_txn();
  static const int kTxnFieldNumber = 4;
  const ::cockroach::roachpb::Transaction& txn() const;
  ::cockroach::roachpb::Transaction* mutable_txn();
  ::cockroach::roachpb::Transaction* release_txn();
  void set_allocated_txn(::cockroach::roachpb::Transaction* txn);

  // optional .cockroach.roachpb.ErrorDetail detail = 5;
  bool has_detail() const;
  void clear_detail();
  static const int kDetailFieldNumber = 5;
  const ::cockroach::roachpb::ErrorDetail& detail() const;
  ::cockroach::roachpb::ErrorDetail* mutable_detail();
  ::cockroach::roachpb::ErrorDetail* release_detail();
  void set_allocated_detail(::cockroach::roachpb::ErrorDetail* detail);

  // optional .cockroach.roachpb.ErrPosition index = 6;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 6;
  const ::cockroach::roachpb::ErrPosition& index() const;
  ::cockroach::roachpb::ErrPosition* mutable_index();
  ::cockroach::roachpb::ErrPosition* release_index();
  void set_allocated_index(::cockroach::roachpb::ErrPosition* index);

  // @@protoc_insertion_point(class_scope:cockroach.roachpb.Error)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_retryable();
  inline void clear_has_retryable();
  inline void set_has_transaction_restart();
  inline void clear_has_transaction_restart();
  inline void set_has_txn();
  inline void clear_has_txn();
  inline void set_has_detail();
  inline void clear_has_detail();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool retryable_;
  int transaction_restart_;
  ::cockroach::roachpb::Transaction* txn_;
  ::cockroach::roachpb::ErrorDetail* detail_;
  ::cockroach::roachpb::ErrPosition* index_;
  friend void  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NotLeaderError

// optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
inline bool NotLeaderError::has_replica() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotLeaderError::set_has_replica() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotLeaderError::clear_has_replica() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotLeaderError::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& NotLeaderError::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaderError.replica)
  return replica_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline void NotLeaderError::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaderError.replica)
}

// optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
inline bool NotLeaderError::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotLeaderError::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotLeaderError::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotLeaderError::clear_leader() {
  if (leader_ != NULL) leader_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_leader();
}
inline const ::cockroach::roachpb::ReplicaDescriptor& NotLeaderError::leader() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) {
    leader_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaderError.leader)
  return leader_;
}
inline ::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::release_leader() {
  clear_has_leader();
  ::cockroach::roachpb::ReplicaDescriptor* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline void NotLeaderError::set_allocated_leader(::cockroach::roachpb::ReplicaDescriptor* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaderError.leader)
}

// optional int64 range_id = 3;
inline bool NotLeaderError::has_range_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotLeaderError::set_has_range_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotLeaderError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotLeaderError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 NotLeaderError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.range_id)
  return range_id_;
}
inline void NotLeaderError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NotLeaderError.range_id)
}

// -------------------------------------------------------------------

// NodeUnavailableError

// -------------------------------------------------------------------

// RangeNotFoundError

// optional int64 range_id = 1;
inline bool RangeNotFoundError::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeNotFoundError::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeNotFoundError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeNotFoundError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 RangeNotFoundError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeNotFoundError.range_id)
  return range_id_;
}
inline void RangeNotFoundError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeNotFoundError.range_id)
}

// -------------------------------------------------------------------

// RangeKeyMismatchError

// optional bytes request_start_key = 1;
inline bool RangeKeyMismatchError::has_request_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeKeyMismatchError::clear_has_request_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeKeyMismatchError::clear_request_start_key() {
  request_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_start_key();
}
inline const ::std::string& RangeKeyMismatchError::request_start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_request_start_key(const ::std::string& value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const char* value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
inline void RangeKeyMismatchError::set_request_start_key(const void* value, size_t size) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_start_key() {
  set_has_request_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeKeyMismatchError::release_request_start_key() {
  clear_has_request_start_key();
  return request_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_allocated_request_start_key(::std::string* request_start_key) {
  if (request_start_key != NULL) {
    set_has_request_start_key();
  } else {
    clear_has_request_start_key();
  }
  request_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}

// optional bytes request_end_key = 2;
inline bool RangeKeyMismatchError::has_request_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeKeyMismatchError::set_has_request_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeKeyMismatchError::clear_has_request_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeKeyMismatchError::clear_request_end_key() {
  request_end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_end_key();
}
inline const ::std::string& RangeKeyMismatchError::request_end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_request_end_key(const ::std::string& value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const char* value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
inline void RangeKeyMismatchError::set_request_end_key(const void* value, size_t size) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
inline ::std::string* RangeKeyMismatchError::mutable_request_end_key() {
  set_has_request_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RangeKeyMismatchError::release_request_end_key() {
  clear_has_request_end_key();
  return request_end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RangeKeyMismatchError::set_allocated_request_end_key(::std::string* request_end_key) {
  if (request_end_key != NULL) {
    set_has_request_end_key();
  } else {
    clear_has_request_end_key();
  }
  request_end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}

// optional .cockroach.roachpb.RangeDescriptor range = 3;
inline bool RangeKeyMismatchError::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeKeyMismatchError::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeKeyMismatchError::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeKeyMismatchError::clear_range() {
  if (range_ != NULL) range_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_range();
}
inline const ::cockroach::roachpb::RangeDescriptor& RangeKeyMismatchError::range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::mutable_range() {
  set_has_range();
  if (range_ == NULL) {
    range_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.range)
  return range_;
}
inline ::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::release_range() {
  clear_has_range();
  ::cockroach::roachpb::RangeDescriptor* temp = range_;
  range_ = NULL;
  return temp;
}
inline void RangeKeyMismatchError::set_allocated_range(::cockroach::roachpb::RangeDescriptor* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.range)
}

// -------------------------------------------------------------------

// ReadWithinUncertaintyIntervalError

// optional .cockroach.roachpb.Timestamp timestamp = 1;
inline bool ReadWithinUncertaintyIntervalError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReadWithinUncertaintyIntervalError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& ReadWithinUncertaintyIntervalError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.timestamp)
  return timestamp_;
}
inline ::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.timestamp)
}

// optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
inline bool ReadWithinUncertaintyIntervalError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& ReadWithinUncertaintyIntervalError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) {
    existing_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::cockroach::roachpb::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_existing_timestamp(::cockroach::roachpb::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
}

// optional int32 node_id = 3;
inline bool ReadWithinUncertaintyIntervalError::has_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReadWithinUncertaintyIntervalError::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 ReadWithinUncertaintyIntervalError::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.node_id)
  return node_id_;
}
inline void ReadWithinUncertaintyIntervalError::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReadWithinUncertaintyIntervalError.node_id)
}

// optional .cockroach.roachpb.Transaction txn = 4;
inline bool ReadWithinUncertaintyIntervalError::has_txn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadWithinUncertaintyIntervalError::set_has_txn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReadWithinUncertaintyIntervalError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReadWithinUncertaintyIntervalError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& ReadWithinUncertaintyIntervalError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* ReadWithinUncertaintyIntervalError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* ReadWithinUncertaintyIntervalError::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void ReadWithinUncertaintyIntervalError::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.txn)
}

// -------------------------------------------------------------------

// TransactionAbortedError

// optional .cockroach.roachpb.Transaction txn = 1;
inline bool TransactionAbortedError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionAbortedError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionAbortedError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionAbortedError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& TransactionAbortedError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionAbortedError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionAbortedError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionAbortedError.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionAbortedError::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionAbortedError::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionAbortedError.txn)
}

// -------------------------------------------------------------------

// TransactionPushError

// optional .cockroach.roachpb.Transaction txn = 1;
inline bool TransactionPushError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionPushError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionPushError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionPushError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& TransactionPushError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionPushError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionPushError.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionPushError.txn)
}

// optional .cockroach.roachpb.Transaction pushee_txn = 2;
inline bool TransactionPushError::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionPushError::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionPushError::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_pushee_txn();
}
inline const ::cockroach::roachpb::Transaction& TransactionPushError::pushee_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionPushError.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) {
    pushee_txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionPushError.pushee_txn)
  return pushee_txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionPushError::release_pushee_txn() {
  clear_has_pushee_txn();
  ::cockroach::roachpb::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
inline void TransactionPushError::set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionPushError.pushee_txn)
}

// -------------------------------------------------------------------

// TransactionRetryError

// -------------------------------------------------------------------

// TransactionStatusError

// optional .cockroach.roachpb.Transaction txn = 1;
inline bool TransactionStatusError::has_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransactionStatusError::set_has_txn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransactionStatusError::clear_has_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransactionStatusError::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& TransactionStatusError::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionStatusError.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionStatusError::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionStatusError.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* TransactionStatusError::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void TransactionStatusError::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionStatusError.txn)
}

// optional string msg = 2;
inline bool TransactionStatusError::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransactionStatusError::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransactionStatusError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransactionStatusError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& TransactionStatusError::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStatusError::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.TransactionStatusError.msg)
}
inline void TransactionStatusError::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.TransactionStatusError.msg)
}
inline ::std::string* TransactionStatusError::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransactionStatusError::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionStatusError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionStatusError.msg)
}

// -------------------------------------------------------------------

// WriteIntentError

// repeated .cockroach.roachpb.Intent intents = 1;
inline int WriteIntentError::intents_size() const {
  return intents_.size();
}
inline void WriteIntentError::clear_intents() {
  intents_.Clear();
}
inline const ::cockroach::roachpb::Intent& WriteIntentError::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Get(index);
}
inline ::cockroach::roachpb::Intent* WriteIntentError::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Mutable(index);
}
inline ::cockroach::roachpb::Intent* WriteIntentError::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >*
WriteIntentError::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.WriteIntentError.intents)
  return &intents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >&
WriteIntentError::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.WriteIntentError.intents)
  return intents_;
}

// optional bool resolved = 2;
inline bool WriteIntentError::has_resolved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteIntentError::set_has_resolved() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteIntentError::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteIntentError::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
inline bool WriteIntentError::resolved() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteIntentError.resolved)
  return resolved_;
}
inline void WriteIntentError::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.WriteIntentError.resolved)
}

// -------------------------------------------------------------------

// WriteTooOldError

// optional .cockroach.roachpb.Timestamp timestamp = 1;
inline bool WriteTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& WriteTooOldError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::cockroach::roachpb::Timestamp* WriteTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.timestamp)
  return timestamp_;
}
inline ::cockroach::roachpb::Timestamp* WriteTooOldError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.timestamp)
}

// optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
inline bool WriteTooOldError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteTooOldError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteTooOldError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteTooOldError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_existing_timestamp();
}
inline const ::cockroach::roachpb::Timestamp& WriteTooOldError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* WriteTooOldError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) {
    existing_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.existing_timestamp)
  return existing_timestamp_;
}
inline ::cockroach::roachpb::Timestamp* WriteTooOldError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::cockroach::roachpb::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
inline void WriteTooOldError::set_allocated_existing_timestamp(::cockroach::roachpb::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.existing_timestamp)
}

// -------------------------------------------------------------------

// OpRequiresTxnError

// -------------------------------------------------------------------

// ConditionFailedError

// optional .cockroach.roachpb.Value actual_value = 1;
inline bool ConditionFailedError::has_actual_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionFailedError::set_has_actual_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConditionFailedError::clear_has_actual_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->::cockroach::roachpb::Value::Clear();
  clear_has_actual_value();
}
inline const ::cockroach::roachpb::Value& ConditionFailedError::actual_value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionFailedError.actual_value)
  return actual_value_ != NULL ? *actual_value_ : *default_instance_->actual_value_;
}
inline ::cockroach::roachpb::Value* ConditionFailedError::mutable_actual_value() {
  set_has_actual_value();
  if (actual_value_ == NULL) {
    actual_value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionFailedError.actual_value)
  return actual_value_;
}
inline ::cockroach::roachpb::Value* ConditionFailedError::release_actual_value() {
  clear_has_actual_value();
  ::cockroach::roachpb::Value* temp = actual_value_;
  actual_value_ = NULL;
  return temp;
}
inline void ConditionFailedError::set_allocated_actual_value(::cockroach::roachpb::Value* actual_value) {
  delete actual_value_;
  actual_value_ = actual_value;
  if (actual_value) {
    set_has_actual_value();
  } else {
    clear_has_actual_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionFailedError.actual_value)
}

// -------------------------------------------------------------------

// LeaseRejectedError

// optional string message = 1;
inline bool LeaseRejectedError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaseRejectedError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaseRejectedError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaseRejectedError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LeaseRejectedError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseRejectedError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.LeaseRejectedError.message)
}
inline void LeaseRejectedError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.LeaseRejectedError.message)
}
inline void LeaseRejectedError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.LeaseRejectedError.message)
}
inline ::std::string* LeaseRejectedError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaseRejectedError::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaseRejectedError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.message)
}

// optional .cockroach.roachpb.Lease requested = 2;
inline bool LeaseRejectedError::has_requested() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaseRejectedError::set_has_requested() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaseRejectedError::clear_has_requested() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaseRejectedError::clear_requested() {
  if (requested_ != NULL) requested_->::cockroach::roachpb::Lease::Clear();
  clear_has_requested();
}
inline const ::cockroach::roachpb::Lease& LeaseRejectedError::requested() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.requested)
  return requested_ != NULL ? *requested_ : *default_instance_->requested_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::mutable_requested() {
  set_has_requested();
  if (requested_ == NULL) {
    requested_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.requested)
  return requested_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::release_requested() {
  clear_has_requested();
  ::cockroach::roachpb::Lease* temp = requested_;
  requested_ = NULL;
  return temp;
}
inline void LeaseRejectedError::set_allocated_requested(::cockroach::roachpb::Lease* requested) {
  delete requested_;
  requested_ = requested;
  if (requested) {
    set_has_requested();
  } else {
    clear_has_requested();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.requested)
}

// optional .cockroach.roachpb.Lease existing = 3;
inline bool LeaseRejectedError::has_existing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaseRejectedError::set_has_existing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaseRejectedError::clear_has_existing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaseRejectedError::clear_existing() {
  if (existing_ != NULL) existing_->::cockroach::roachpb::Lease::Clear();
  clear_has_existing();
}
inline const ::cockroach::roachpb::Lease& LeaseRejectedError::existing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.existing)
  return existing_ != NULL ? *existing_ : *default_instance_->existing_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::mutable_existing() {
  set_has_existing();
  if (existing_ == NULL) {
    existing_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.existing)
  return existing_;
}
inline ::cockroach::roachpb::Lease* LeaseRejectedError::release_existing() {
  clear_has_existing();
  ::cockroach::roachpb::Lease* temp = existing_;
  existing_ = NULL;
  return temp;
}
inline void LeaseRejectedError::set_allocated_existing(::cockroach::roachpb::Lease* existing) {
  delete existing_;
  existing_ = existing;
  if (existing) {
    set_has_existing();
  } else {
    clear_has_existing();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.existing)
}

// -------------------------------------------------------------------

// SendError

// optional string message = 1;
inline bool SendError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& SendError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SendError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SendError.message)
}
inline void SendError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.SendError.message)
}
inline void SendError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.SendError.message)
}
inline ::std::string* SendError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SendError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendError::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SendError.message)
}

// optional bool retryable = 2;
inline bool SendError::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendError::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendError::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendError::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
inline bool SendError::retryable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SendError.retryable)
  return retryable_;
}
inline void SendError::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SendError.retryable)
}

// -------------------------------------------------------------------

// RaftGroupDeletedError

// -------------------------------------------------------------------

// ReplicaCorruptionError

// optional string error_msg = 1;
inline bool ReplicaCorruptionError::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaCorruptionError::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaCorruptionError::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaCorruptionError::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
inline const ::std::string& ReplicaCorruptionError::error_msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicaCorruptionError::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
inline void ReplicaCorruptionError::set_error_msg(const char* value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
inline void ReplicaCorruptionError::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
inline ::std::string* ReplicaCorruptionError::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReplicaCorruptionError::release_error_msg() {
  clear_has_error_msg();
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReplicaCorruptionError::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}

// optional bool processed = 2;
inline bool ReplicaCorruptionError::has_processed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplicaCorruptionError::set_has_processed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplicaCorruptionError::clear_has_processed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplicaCorruptionError::clear_processed() {
  processed_ = false;
  clear_has_processed();
}
inline bool ReplicaCorruptionError::processed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.processed)
  return processed_;
}
inline void ReplicaCorruptionError::set_processed(bool value) {
  set_has_processed();
  processed_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.processed)
}

// -------------------------------------------------------------------

// LeaseVersionChangedError

// -------------------------------------------------------------------

// DidntUpdateDescriptorError

// -------------------------------------------------------------------

// SqlTransactionAbortedError

// -------------------------------------------------------------------

// ExistingSchemaChangeLeaseError

// -------------------------------------------------------------------

// ErrorDetail

// optional .cockroach.roachpb.NotLeaderError not_leader = 1;
inline bool ErrorDetail::has_not_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorDetail::set_has_not_leader() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorDetail::clear_has_not_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorDetail::clear_not_leader() {
  if (not_leader_ != NULL) not_leader_->::cockroach::roachpb::NotLeaderError::Clear();
  clear_has_not_leader();
}
inline const ::cockroach::roachpb::NotLeaderError& ErrorDetail::not_leader() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.not_leader)
  return not_leader_ != NULL ? *not_leader_ : *default_instance_->not_leader_;
}
inline ::cockroach::roachpb::NotLeaderError* ErrorDetail::mutable_not_leader() {
  set_has_not_leader();
  if (not_leader_ == NULL) {
    not_leader_ = new ::cockroach::roachpb::NotLeaderError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.not_leader)
  return not_leader_;
}
inline ::cockroach::roachpb::NotLeaderError* ErrorDetail::release_not_leader() {
  clear_has_not_leader();
  ::cockroach::roachpb::NotLeaderError* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_not_leader(::cockroach::roachpb::NotLeaderError* not_leader) {
  delete not_leader_;
  not_leader_ = not_leader;
  if (not_leader) {
    set_has_not_leader();
  } else {
    clear_has_not_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.not_leader)
}

// optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
inline bool ErrorDetail::has_range_not_found() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorDetail::set_has_range_not_found() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorDetail::clear_has_range_not_found() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorDetail::clear_range_not_found() {
  if (range_not_found_ != NULL) range_not_found_->::cockroach::roachpb::RangeNotFoundError::Clear();
  clear_has_range_not_found();
}
inline const ::cockroach::roachpb::RangeNotFoundError& ErrorDetail::range_not_found() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_not_found)
  return range_not_found_ != NULL ? *range_not_found_ : *default_instance_->range_not_found_;
}
inline ::cockroach::roachpb::RangeNotFoundError* ErrorDetail::mutable_range_not_found() {
  set_has_range_not_found();
  if (range_not_found_ == NULL) {
    range_not_found_ = new ::cockroach::roachpb::RangeNotFoundError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_not_found)
  return range_not_found_;
}
inline ::cockroach::roachpb::RangeNotFoundError* ErrorDetail::release_range_not_found() {
  clear_has_range_not_found();
  ::cockroach::roachpb::RangeNotFoundError* temp = range_not_found_;
  range_not_found_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found) {
  delete range_not_found_;
  range_not_found_ = range_not_found;
  if (range_not_found) {
    set_has_range_not_found();
  } else {
    clear_has_range_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_not_found)
}

// optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
inline bool ErrorDetail::has_range_key_mismatch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorDetail::set_has_range_key_mismatch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorDetail::clear_has_range_key_mismatch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorDetail::clear_range_key_mismatch() {
  if (range_key_mismatch_ != NULL) range_key_mismatch_->::cockroach::roachpb::RangeKeyMismatchError::Clear();
  clear_has_range_key_mismatch();
}
inline const ::cockroach::roachpb::RangeKeyMismatchError& ErrorDetail::range_key_mismatch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return range_key_mismatch_ != NULL ? *range_key_mismatch_ : *default_instance_->range_key_mismatch_;
}
inline ::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::mutable_range_key_mismatch() {
  set_has_range_key_mismatch();
  if (range_key_mismatch_ == NULL) {
    range_key_mismatch_ = new ::cockroach::roachpb::RangeKeyMismatchError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return range_key_mismatch_;
}
inline ::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::release_range_key_mismatch() {
  clear_has_range_key_mismatch();
  ::cockroach::roachpb::RangeKeyMismatchError* temp = range_key_mismatch_;
  range_key_mismatch_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch) {
  delete range_key_mismatch_;
  range_key_mismatch_ = range_key_mismatch;
  if (range_key_mismatch) {
    set_has_range_key_mismatch();
  } else {
    clear_has_range_key_mismatch();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_key_mismatch)
}

// optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
inline bool ErrorDetail::has_read_within_uncertainty_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ErrorDetail::set_has_read_within_uncertainty_interval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ErrorDetail::clear_has_read_within_uncertainty_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ErrorDetail::clear_read_within_uncertainty_interval() {
  if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::Clear();
  clear_has_read_within_uncertainty_interval();
}
inline const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError& ErrorDetail::read_within_uncertainty_interval() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_ != NULL ? *read_within_uncertainty_interval_ : *default_instance_->read_within_uncertainty_interval_;
}
inline ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::mutable_read_within_uncertainty_interval() {
  set_has_read_within_uncertainty_interval();
  if (read_within_uncertainty_interval_ == NULL) {
    read_within_uncertainty_interval_ = new ::cockroach::roachpb::ReadWithinUncertaintyIntervalError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_;
}
inline ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::release_read_within_uncertainty_interval() {
  clear_has_read_within_uncertainty_interval();
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* temp = read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  delete read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  if (read_within_uncertainty_interval) {
    set_has_read_within_uncertainty_interval();
  } else {
    clear_has_read_within_uncertainty_interval();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
}

// optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
inline bool ErrorDetail::has_transaction_aborted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ErrorDetail::set_has_transaction_aborted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ErrorDetail::clear_has_transaction_aborted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ErrorDetail::clear_transaction_aborted() {
  if (transaction_aborted_ != NULL) transaction_aborted_->::cockroach::roachpb::TransactionAbortedError::Clear();
  clear_has_transaction_aborted();
}
inline const ::cockroach::roachpb::TransactionAbortedError& ErrorDetail::transaction_aborted() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return transaction_aborted_ != NULL ? *transaction_aborted_ : *default_instance_->transaction_aborted_;
}
inline ::cockroach::roachpb::TransactionAbortedError* ErrorDetail::mutable_transaction_aborted() {
  set_has_transaction_aborted();
  if (transaction_aborted_ == NULL) {
    transaction_aborted_ = new ::cockroach::roachpb::TransactionAbortedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return transaction_aborted_;
}
inline ::cockroach::roachpb::TransactionAbortedError* ErrorDetail::release_transaction_aborted() {
  clear_has_transaction_aborted();
  ::cockroach::roachpb::TransactionAbortedError* temp = transaction_aborted_;
  transaction_aborted_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted) {
  delete transaction_aborted_;
  transaction_aborted_ = transaction_aborted;
  if (transaction_aborted) {
    set_has_transaction_aborted();
  } else {
    clear_has_transaction_aborted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_aborted)
}

// optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
inline bool ErrorDetail::has_transaction_push() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ErrorDetail::set_has_transaction_push() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ErrorDetail::clear_has_transaction_push() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ErrorDetail::clear_transaction_push() {
  if (transaction_push_ != NULL) transaction_push_->::cockroach::roachpb::TransactionPushError::Clear();
  clear_has_transaction_push();
}
inline const ::cockroach::roachpb::TransactionPushError& ErrorDetail::transaction_push() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_push)
  return transaction_push_ != NULL ? *transaction_push_ : *default_instance_->transaction_push_;
}
inline ::cockroach::roachpb::TransactionPushError* ErrorDetail::mutable_transaction_push() {
  set_has_transaction_push();
  if (transaction_push_ == NULL) {
    transaction_push_ = new ::cockroach::roachpb::TransactionPushError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_push)
  return transaction_push_;
}
inline ::cockroach::roachpb::TransactionPushError* ErrorDetail::release_transaction_push() {
  clear_has_transaction_push();
  ::cockroach::roachpb::TransactionPushError* temp = transaction_push_;
  transaction_push_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push) {
  delete transaction_push_;
  transaction_push_ = transaction_push;
  if (transaction_push) {
    set_has_transaction_push();
  } else {
    clear_has_transaction_push();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_push)
}

// optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
inline bool ErrorDetail::has_transaction_retry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ErrorDetail::set_has_transaction_retry() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ErrorDetail::clear_has_transaction_retry() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ErrorDetail::clear_transaction_retry() {
  if (transaction_retry_ != NULL) transaction_retry_->::cockroach::roachpb::TransactionRetryError::Clear();
  clear_has_transaction_retry();
}
inline const ::cockroach::roachpb::TransactionRetryError& ErrorDetail::transaction_retry() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_retry)
  return transaction_retry_ != NULL ? *transaction_retry_ : *default_instance_->transaction_retry_;
}
inline ::cockroach::roachpb::TransactionRetryError* ErrorDetail::mutable_transaction_retry() {
  set_has_transaction_retry();
  if (transaction_retry_ == NULL) {
    transaction_retry_ = new ::cockroach::roachpb::TransactionRetryError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_retry)
  return transaction_retry_;
}
inline ::cockroach::roachpb::TransactionRetryError* ErrorDetail::release_transaction_retry() {
  clear_has_transaction_retry();
  ::cockroach::roachpb::TransactionRetryError* temp = transaction_retry_;
  transaction_retry_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry) {
  delete transaction_retry_;
  transaction_retry_ = transaction_retry;
  if (transaction_retry) {
    set_has_transaction_retry();
  } else {
    clear_has_transaction_retry();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_retry)
}

// optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
inline bool ErrorDetail::has_transaction_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ErrorDetail::set_has_transaction_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ErrorDetail::clear_has_transaction_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ErrorDetail::clear_transaction_status() {
  if (transaction_status_ != NULL) transaction_status_->::cockroach::roachpb::TransactionStatusError::Clear();
  clear_has_transaction_status();
}
inline const ::cockroach::roachpb::TransactionStatusError& ErrorDetail::transaction_status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_status)
  return transaction_status_ != NULL ? *transaction_status_ : *default_instance_->transaction_status_;
}
inline ::cockroach::roachpb::TransactionStatusError* ErrorDetail::mutable_transaction_status() {
  set_has_transaction_status();
  if (transaction_status_ == NULL) {
    transaction_status_ = new ::cockroach::roachpb::TransactionStatusError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_status)
  return transaction_status_;
}
inline ::cockroach::roachpb::TransactionStatusError* ErrorDetail::release_transaction_status() {
  clear_has_transaction_status();
  ::cockroach::roachpb::TransactionStatusError* temp = transaction_status_;
  transaction_status_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status) {
  delete transaction_status_;
  transaction_status_ = transaction_status;
  if (transaction_status) {
    set_has_transaction_status();
  } else {
    clear_has_transaction_status();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_status)
}

// optional .cockroach.roachpb.WriteIntentError write_intent = 9;
inline bool ErrorDetail::has_write_intent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ErrorDetail::set_has_write_intent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ErrorDetail::clear_has_write_intent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ErrorDetail::clear_write_intent() {
  if (write_intent_ != NULL) write_intent_->::cockroach::roachpb::WriteIntentError::Clear();
  clear_has_write_intent();
}
inline const ::cockroach::roachpb::WriteIntentError& ErrorDetail::write_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_intent)
  return write_intent_ != NULL ? *write_intent_ : *default_instance_->write_intent_;
}
inline ::cockroach::roachpb::WriteIntentError* ErrorDetail::mutable_write_intent() {
  set_has_write_intent();
  if (write_intent_ == NULL) {
    write_intent_ = new ::cockroach::roachpb::WriteIntentError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_intent)
  return write_intent_;
}
inline ::cockroach::roachpb::WriteIntentError* ErrorDetail::release_write_intent() {
  clear_has_write_intent();
  ::cockroach::roachpb::WriteIntentError* temp = write_intent_;
  write_intent_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent) {
  delete write_intent_;
  write_intent_ = write_intent;
  if (write_intent) {
    set_has_write_intent();
  } else {
    clear_has_write_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_intent)
}

// optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
inline bool ErrorDetail::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ErrorDetail::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ErrorDetail::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ErrorDetail::clear_write_too_old() {
  if (write_too_old_ != NULL) write_too_old_->::cockroach::roachpb::WriteTooOldError::Clear();
  clear_has_write_too_old();
}
inline const ::cockroach::roachpb::WriteTooOldError& ErrorDetail::write_too_old() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_too_old)
  return write_too_old_ != NULL ? *write_too_old_ : *default_instance_->write_too_old_;
}
inline ::cockroach::roachpb::WriteTooOldError* ErrorDetail::mutable_write_too_old() {
  set_has_write_too_old();
  if (write_too_old_ == NULL) {
    write_too_old_ = new ::cockroach::roachpb::WriteTooOldError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_too_old)
  return write_too_old_;
}
inline ::cockroach::roachpb::WriteTooOldError* ErrorDetail::release_write_too_old() {
  clear_has_write_too_old();
  ::cockroach::roachpb::WriteTooOldError* temp = write_too_old_;
  write_too_old_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old) {
  delete write_too_old_;
  write_too_old_ = write_too_old;
  if (write_too_old) {
    set_has_write_too_old();
  } else {
    clear_has_write_too_old();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_too_old)
}

// optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
inline bool ErrorDetail::has_op_requires_txn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ErrorDetail::set_has_op_requires_txn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ErrorDetail::clear_has_op_requires_txn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ErrorDetail::clear_op_requires_txn() {
  if (op_requires_txn_ != NULL) op_requires_txn_->::cockroach::roachpb::OpRequiresTxnError::Clear();
  clear_has_op_requires_txn();
}
inline const ::cockroach::roachpb::OpRequiresTxnError& ErrorDetail::op_requires_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return op_requires_txn_ != NULL ? *op_requires_txn_ : *default_instance_->op_requires_txn_;
}
inline ::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::mutable_op_requires_txn() {
  set_has_op_requires_txn();
  if (op_requires_txn_ == NULL) {
    op_requires_txn_ = new ::cockroach::roachpb::OpRequiresTxnError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return op_requires_txn_;
}
inline ::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::release_op_requires_txn() {
  clear_has_op_requires_txn();
  ::cockroach::roachpb::OpRequiresTxnError* temp = op_requires_txn_;
  op_requires_txn_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn) {
  delete op_requires_txn_;
  op_requires_txn_ = op_requires_txn;
  if (op_requires_txn) {
    set_has_op_requires_txn();
  } else {
    clear_has_op_requires_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.op_requires_txn)
}

// optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
inline bool ErrorDetail::has_condition_failed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ErrorDetail::set_has_condition_failed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ErrorDetail::clear_has_condition_failed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ErrorDetail::clear_condition_failed() {
  if (condition_failed_ != NULL) condition_failed_->::cockroach::roachpb::ConditionFailedError::Clear();
  clear_has_condition_failed();
}
inline const ::cockroach::roachpb::ConditionFailedError& ErrorDetail::condition_failed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.condition_failed)
  return condition_failed_ != NULL ? *condition_failed_ : *default_instance_->condition_failed_;
}
inline ::cockroach::roachpb::ConditionFailedError* ErrorDetail::mutable_condition_failed() {
  set_has_condition_failed();
  if (condition_failed_ == NULL) {
    condition_failed_ = new ::cockroach::roachpb::ConditionFailedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.condition_failed)
  return condition_failed_;
}
inline ::cockroach::roachpb::ConditionFailedError* ErrorDetail::release_condition_failed() {
  clear_has_condition_failed();
  ::cockroach::roachpb::ConditionFailedError* temp = condition_failed_;
  condition_failed_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed) {
  delete condition_failed_;
  condition_failed_ = condition_failed;
  if (condition_failed) {
    set_has_condition_failed();
  } else {
    clear_has_condition_failed();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.condition_failed)
}

// optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
inline bool ErrorDetail::has_lease_rejected() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ErrorDetail::set_has_lease_rejected() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ErrorDetail::clear_has_lease_rejected() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ErrorDetail::clear_lease_rejected() {
  if (lease_rejected_ != NULL) lease_rejected_->::cockroach::roachpb::LeaseRejectedError::Clear();
  clear_has_lease_rejected();
}
inline const ::cockroach::roachpb::LeaseRejectedError& ErrorDetail::lease_rejected() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.lease_rejected)
  return lease_rejected_ != NULL ? *lease_rejected_ : *default_instance_->lease_rejected_;
}
inline ::cockroach::roachpb::LeaseRejectedError* ErrorDetail::mutable_lease_rejected() {
  set_has_lease_rejected();
  if (lease_rejected_ == NULL) {
    lease_rejected_ = new ::cockroach::roachpb::LeaseRejectedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.lease_rejected)
  return lease_rejected_;
}
inline ::cockroach::roachpb::LeaseRejectedError* ErrorDetail::release_lease_rejected() {
  clear_has_lease_rejected();
  ::cockroach::roachpb::LeaseRejectedError* temp = lease_rejected_;
  lease_rejected_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected) {
  delete lease_rejected_;
  lease_rejected_ = lease_rejected;
  if (lease_rejected) {
    set_has_lease_rejected();
  } else {
    clear_has_lease_rejected();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_rejected)
}

// optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
inline bool ErrorDetail::has_node_unavailable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ErrorDetail::set_has_node_unavailable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ErrorDetail::clear_has_node_unavailable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ErrorDetail::clear_node_unavailable() {
  if (node_unavailable_ != NULL) node_unavailable_->::cockroach::roachpb::NodeUnavailableError::Clear();
  clear_has_node_unavailable();
}
inline const ::cockroach::roachpb::NodeUnavailableError& ErrorDetail::node_unavailable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.node_unavailable)
  return node_unavailable_ != NULL ? *node_unavailable_ : *default_instance_->node_unavailable_;
}
inline ::cockroach::roachpb::NodeUnavailableError* ErrorDetail::mutable_node_unavailable() {
  set_has_node_unavailable();
  if (node_unavailable_ == NULL) {
    node_unavailable_ = new ::cockroach::roachpb::NodeUnavailableError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.node_unavailable)
  return node_unavailable_;
}
inline ::cockroach::roachpb::NodeUnavailableError* ErrorDetail::release_node_unavailable() {
  clear_has_node_unavailable();
  ::cockroach::roachpb::NodeUnavailableError* temp = node_unavailable_;
  node_unavailable_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable) {
  delete node_unavailable_;
  node_unavailable_ = node_unavailable;
  if (node_unavailable) {
    set_has_node_unavailable();
  } else {
    clear_has_node_unavailable();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.node_unavailable)
}

// optional .cockroach.roachpb.SendError send = 15;
inline bool ErrorDetail::has_send() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ErrorDetail::set_has_send() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ErrorDetail::clear_has_send() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ErrorDetail::clear_send() {
  if (send_ != NULL) send_->::cockroach::roachpb::SendError::Clear();
  clear_has_send();
}
inline const ::cockroach::roachpb::SendError& ErrorDetail::send() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.send)
  return send_ != NULL ? *send_ : *default_instance_->send_;
}
inline ::cockroach::roachpb::SendError* ErrorDetail::mutable_send() {
  set_has_send();
  if (send_ == NULL) {
    send_ = new ::cockroach::roachpb::SendError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.send)
  return send_;
}
inline ::cockroach::roachpb::SendError* ErrorDetail::release_send() {
  clear_has_send();
  ::cockroach::roachpb::SendError* temp = send_;
  send_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_send(::cockroach::roachpb::SendError* send) {
  delete send_;
  send_ = send;
  if (send) {
    set_has_send();
  } else {
    clear_has_send();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.send)
}

// optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
inline bool ErrorDetail::has_raft_group_deleted() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ErrorDetail::set_has_raft_group_deleted() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ErrorDetail::clear_has_raft_group_deleted() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ErrorDetail::clear_raft_group_deleted() {
  if (raft_group_deleted_ != NULL) raft_group_deleted_->::cockroach::roachpb::RaftGroupDeletedError::Clear();
  clear_has_raft_group_deleted();
}
inline const ::cockroach::roachpb::RaftGroupDeletedError& ErrorDetail::raft_group_deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return raft_group_deleted_ != NULL ? *raft_group_deleted_ : *default_instance_->raft_group_deleted_;
}
inline ::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::mutable_raft_group_deleted() {
  set_has_raft_group_deleted();
  if (raft_group_deleted_ == NULL) {
    raft_group_deleted_ = new ::cockroach::roachpb::RaftGroupDeletedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return raft_group_deleted_;
}
inline ::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::release_raft_group_deleted() {
  clear_has_raft_group_deleted();
  ::cockroach::roachpb::RaftGroupDeletedError* temp = raft_group_deleted_;
  raft_group_deleted_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted) {
  delete raft_group_deleted_;
  raft_group_deleted_ = raft_group_deleted;
  if (raft_group_deleted) {
    set_has_raft_group_deleted();
  } else {
    clear_has_raft_group_deleted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.raft_group_deleted)
}

// optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
inline bool ErrorDetail::has_replica_corruption() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ErrorDetail::set_has_replica_corruption() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ErrorDetail::clear_has_replica_corruption() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ErrorDetail::clear_replica_corruption() {
  if (replica_corruption_ != NULL) replica_corruption_->::cockroach::roachpb::ReplicaCorruptionError::Clear();
  clear_has_replica_corruption();
}
inline const ::cockroach::roachpb::ReplicaCorruptionError& ErrorDetail::replica_corruption() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.replica_corruption)
  return replica_corruption_ != NULL ? *replica_corruption_ : *default_instance_->replica_corruption_;
}
inline ::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::mutable_replica_corruption() {
  set_has_replica_corruption();
  if (replica_corruption_ == NULL) {
    replica_corruption_ = new ::cockroach::roachpb::ReplicaCorruptionError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.replica_corruption)
  return replica_corruption_;
}
inline ::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::release_replica_corruption() {
  clear_has_replica_corruption();
  ::cockroach::roachpb::ReplicaCorruptionError* temp = replica_corruption_;
  replica_corruption_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption) {
  delete replica_corruption_;
  replica_corruption_ = replica_corruption;
  if (replica_corruption) {
    set_has_replica_corruption();
  } else {
    clear_has_replica_corruption();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_corruption)
}

// optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
inline bool ErrorDetail::has_lease_version_changed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ErrorDetail::set_has_lease_version_changed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ErrorDetail::clear_has_lease_version_changed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ErrorDetail::clear_lease_version_changed() {
  if (lease_version_changed_ != NULL) lease_version_changed_->::cockroach::roachpb::LeaseVersionChangedError::Clear();
  clear_has_lease_version_changed();
}
inline const ::cockroach::roachpb::LeaseVersionChangedError& ErrorDetail::lease_version_changed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.lease_version_changed)
  return lease_version_changed_ != NULL ? *lease_version_changed_ : *default_instance_->lease_version_changed_;
}
inline ::cockroach::roachpb::LeaseVersionChangedError* ErrorDetail::mutable_lease_version_changed() {
  set_has_lease_version_changed();
  if (lease_version_changed_ == NULL) {
    lease_version_changed_ = new ::cockroach::roachpb::LeaseVersionChangedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.lease_version_changed)
  return lease_version_changed_;
}
inline ::cockroach::roachpb::LeaseVersionChangedError* ErrorDetail::release_lease_version_changed() {
  clear_has_lease_version_changed();
  ::cockroach::roachpb::LeaseVersionChangedError* temp = lease_version_changed_;
  lease_version_changed_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_lease_version_changed(::cockroach::roachpb::LeaseVersionChangedError* lease_version_changed) {
  delete lease_version_changed_;
  lease_version_changed_ = lease_version_changed;
  if (lease_version_changed) {
    set_has_lease_version_changed();
  } else {
    clear_has_lease_version_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_version_changed)
}

// optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
inline bool ErrorDetail::has_didnt_update_descriptor() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ErrorDetail::set_has_didnt_update_descriptor() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ErrorDetail::clear_has_didnt_update_descriptor() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ErrorDetail::clear_didnt_update_descriptor() {
  if (didnt_update_descriptor_ != NULL) didnt_update_descriptor_->::cockroach::roachpb::DidntUpdateDescriptorError::Clear();
  clear_has_didnt_update_descriptor();
}
inline const ::cockroach::roachpb::DidntUpdateDescriptorError& ErrorDetail::didnt_update_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
  return didnt_update_descriptor_ != NULL ? *didnt_update_descriptor_ : *default_instance_->didnt_update_descriptor_;
}
inline ::cockroach::roachpb::DidntUpdateDescriptorError* ErrorDetail::mutable_didnt_update_descriptor() {
  set_has_didnt_update_descriptor();
  if (didnt_update_descriptor_ == NULL) {
    didnt_update_descriptor_ = new ::cockroach::roachpb::DidntUpdateDescriptorError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
  return didnt_update_descriptor_;
}
inline ::cockroach::roachpb::DidntUpdateDescriptorError* ErrorDetail::release_didnt_update_descriptor() {
  clear_has_didnt_update_descriptor();
  ::cockroach::roachpb::DidntUpdateDescriptorError* temp = didnt_update_descriptor_;
  didnt_update_descriptor_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_didnt_update_descriptor(::cockroach::roachpb::DidntUpdateDescriptorError* didnt_update_descriptor) {
  delete didnt_update_descriptor_;
  didnt_update_descriptor_ = didnt_update_descriptor;
  if (didnt_update_descriptor) {
    set_has_didnt_update_descriptor();
  } else {
    clear_has_didnt_update_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
}

// optional .cockroach.roachpb.SqlTransactionAbortedError sql_tranasction_aborted = 20;
inline bool ErrorDetail::has_sql_tranasction_aborted() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ErrorDetail::set_has_sql_tranasction_aborted() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ErrorDetail::clear_has_sql_tranasction_aborted() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ErrorDetail::clear_sql_tranasction_aborted() {
  if (sql_tranasction_aborted_ != NULL) sql_tranasction_aborted_->::cockroach::roachpb::SqlTransactionAbortedError::Clear();
  clear_has_sql_tranasction_aborted();
}
inline const ::cockroach::roachpb::SqlTransactionAbortedError& ErrorDetail::sql_tranasction_aborted() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.sql_tranasction_aborted)
  return sql_tranasction_aborted_ != NULL ? *sql_tranasction_aborted_ : *default_instance_->sql_tranasction_aborted_;
}
inline ::cockroach::roachpb::SqlTransactionAbortedError* ErrorDetail::mutable_sql_tranasction_aborted() {
  set_has_sql_tranasction_aborted();
  if (sql_tranasction_aborted_ == NULL) {
    sql_tranasction_aborted_ = new ::cockroach::roachpb::SqlTransactionAbortedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.sql_tranasction_aborted)
  return sql_tranasction_aborted_;
}
inline ::cockroach::roachpb::SqlTransactionAbortedError* ErrorDetail::release_sql_tranasction_aborted() {
  clear_has_sql_tranasction_aborted();
  ::cockroach::roachpb::SqlTransactionAbortedError* temp = sql_tranasction_aborted_;
  sql_tranasction_aborted_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_sql_tranasction_aborted(::cockroach::roachpb::SqlTransactionAbortedError* sql_tranasction_aborted) {
  delete sql_tranasction_aborted_;
  sql_tranasction_aborted_ = sql_tranasction_aborted;
  if (sql_tranasction_aborted) {
    set_has_sql_tranasction_aborted();
  } else {
    clear_has_sql_tranasction_aborted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.sql_tranasction_aborted)
}

// optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 21;
inline bool ErrorDetail::has_existing_scheme_change_lease() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ErrorDetail::set_has_existing_scheme_change_lease() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ErrorDetail::clear_has_existing_scheme_change_lease() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ErrorDetail::clear_existing_scheme_change_lease() {
  if (existing_scheme_change_lease_ != NULL) existing_scheme_change_lease_->::cockroach::roachpb::ExistingSchemaChangeLeaseError::Clear();
  clear_has_existing_scheme_change_lease();
}
inline const ::cockroach::roachpb::ExistingSchemaChangeLeaseError& ErrorDetail::existing_scheme_change_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
  return existing_scheme_change_lease_ != NULL ? *existing_scheme_change_lease_ : *default_instance_->existing_scheme_change_lease_;
}
inline ::cockroach::roachpb::ExistingSchemaChangeLeaseError* ErrorDetail::mutable_existing_scheme_change_lease() {
  set_has_existing_scheme_change_lease();
  if (existing_scheme_change_lease_ == NULL) {
    existing_scheme_change_lease_ = new ::cockroach::roachpb::ExistingSchemaChangeLeaseError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
  return existing_scheme_change_lease_;
}
inline ::cockroach::roachpb::ExistingSchemaChangeLeaseError* ErrorDetail::release_existing_scheme_change_lease() {
  clear_has_existing_scheme_change_lease();
  ::cockroach::roachpb::ExistingSchemaChangeLeaseError* temp = existing_scheme_change_lease_;
  existing_scheme_change_lease_ = NULL;
  return temp;
}
inline void ErrorDetail::set_allocated_existing_scheme_change_lease(::cockroach::roachpb::ExistingSchemaChangeLeaseError* existing_scheme_change_lease) {
  delete existing_scheme_change_lease_;
  existing_scheme_change_lease_ = existing_scheme_change_lease;
  if (existing_scheme_change_lease) {
    set_has_existing_scheme_change_lease();
  } else {
    clear_has_existing_scheme_change_lease();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
}

// -------------------------------------------------------------------

// ErrPosition

// optional int32 index = 1;
inline bool ErrPosition::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrPosition::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrPosition::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrPosition::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ErrPosition::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrPosition.index)
  return index_;
}
inline void ErrPosition::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ErrPosition.index)
}

// -------------------------------------------------------------------

// Error

// optional string message = 1;
inline bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.message)
}
inline void Error::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Error.message)
}
inline ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.message)
}

// optional bool retryable = 2;
inline bool Error::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
inline bool Error::retryable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.retryable)
  return retryable_;
}
inline void Error::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.retryable)
}

// optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
inline bool Error::has_transaction_restart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Error::set_has_transaction_restart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Error::clear_has_transaction_restart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Error::clear_transaction_restart() {
  transaction_restart_ = 0;
  clear_has_transaction_restart();
}
inline ::cockroach::roachpb::TransactionRestart Error::transaction_restart() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.transaction_restart)
  return static_cast< ::cockroach::roachpb::TransactionRestart >(transaction_restart_);
}
inline void Error::set_transaction_restart(::cockroach::roachpb::TransactionRestart value) {
  assert(::cockroach::roachpb::TransactionRestart_IsValid(value));
  set_has_transaction_restart();
  transaction_restart_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.transaction_restart)
}

// optional .cockroach.roachpb.Transaction txn = 4;
inline bool Error::has_txn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Error::set_has_txn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Error::clear_has_txn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Error::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_txn();
}
inline const ::cockroach::roachpb::Transaction& Error::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
inline ::cockroach::roachpb::Transaction* Error::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.txn)
  return txn_;
}
inline ::cockroach::roachpb::Transaction* Error::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::Transaction* temp = txn_;
  txn_ = NULL;
  return temp;
}
inline void Error::set_allocated_txn(::cockroach::roachpb::Transaction* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.txn)
}

// optional .cockroach.roachpb.ErrorDetail detail = 5;
inline bool Error::has_detail() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Error::set_has_detail() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Error::clear_has_detail() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Error::clear_detail() {
  if (detail_ != NULL) detail_->::cockroach::roachpb::ErrorDetail::Clear();
  clear_has_detail();
}
inline const ::cockroach::roachpb::ErrorDetail& Error::detail() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.detail)
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::cockroach::roachpb::ErrorDetail* Error::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) {
    detail_ = new ::cockroach::roachpb::ErrorDetail;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.detail)
  return detail_;
}
inline ::cockroach::roachpb::ErrorDetail* Error::release_detail() {
  clear_has_detail();
  ::cockroach::roachpb::ErrorDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Error::set_allocated_detail(::cockroach::roachpb::ErrorDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.detail)
}

// optional .cockroach.roachpb.ErrPosition index = 6;
inline bool Error::has_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Error::set_has_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Error::clear_has_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Error::clear_index() {
  if (index_ != NULL) index_->::cockroach::roachpb::ErrPosition::Clear();
  clear_has_index();
}
inline const ::cockroach::roachpb::ErrPosition& Error::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::cockroach::roachpb::ErrPosition* Error::mutable_index() {
  set_has_index();
  if (index_ == NULL) {
    index_ = new ::cockroach::roachpb::ErrPosition;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.index)
  return index_;
}
inline ::cockroach::roachpb::ErrPosition* Error::release_index() {
  clear_has_index();
  ::cockroach::roachpb::ErrPosition* temp = index_;
  index_ = NULL;
  return temp;
}
inline void Error::set_allocated_index(::cockroach::roachpb::ErrPosition* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.index)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cockroach::roachpb::TransactionRestart> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cockroach::roachpb::TransactionRestart>() {
  return ::cockroach::roachpb::TransactionRestart_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2froachpb_2ferrors_2eproto__INCLUDED
