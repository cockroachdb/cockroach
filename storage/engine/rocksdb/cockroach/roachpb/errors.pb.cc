// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/errors.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/roachpb/errors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

namespace {

const ::google::protobuf::Descriptor* NotLeaderError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotLeaderError_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeUnavailableError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeUnavailableError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeNotFoundError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeNotFoundError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeKeyMismatchError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeKeyMismatchError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadWithinUncertaintyIntervalError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadWithinUncertaintyIntervalError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionAbortedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionAbortedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionPushError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionPushError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRetryError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRetryError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionReplayError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionReplayError_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionStatusError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionStatusError_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteIntentError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteIntentError_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteTooOldError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteTooOldError_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpRequiresTxnError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpRequiresTxnError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionFailedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionFailedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaseRejectedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaseRejectedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendError_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftGroupDeletedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftGroupDeletedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicaCorruptionError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicaCorruptionError_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaseVersionChangedError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaseVersionChangedError_reflection_ = NULL;
const ::google::protobuf::Descriptor* DidntUpdateDescriptorError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DidntUpdateDescriptorError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExistingSchemaChangeLeaseError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExistingSchemaChangeLeaseError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorWithPGCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorWithPGCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionRestart_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto() {
  protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/roachpb/errors.proto");
  GOOGLE_CHECK(file != NULL);
  NotLeaderError_descriptor_ = file->message_type(0);
  static const int NotLeaderError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, range_id_),
  };
  NotLeaderError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotLeaderError_descriptor_,
      NotLeaderError::default_instance_,
      NotLeaderError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, _has_bits_[0]),
      -1,
      -1,
      sizeof(NotLeaderError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotLeaderError, _internal_metadata_),
      -1);
  NodeUnavailableError_descriptor_ = file->message_type(1);
  static const int NodeUnavailableError_offsets_[1] = {
  };
  NodeUnavailableError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeUnavailableError_descriptor_,
      NodeUnavailableError::default_instance_,
      NodeUnavailableError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeUnavailableError, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeUnavailableError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeUnavailableError, _internal_metadata_),
      -1);
  RangeNotFoundError_descriptor_ = file->message_type(2);
  static const int RangeNotFoundError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, range_id_),
  };
  RangeNotFoundError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeNotFoundError_descriptor_,
      RangeNotFoundError::default_instance_,
      RangeNotFoundError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeNotFoundError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeNotFoundError, _internal_metadata_),
      -1);
  RangeKeyMismatchError_descriptor_ = file->message_type(3);
  static const int RangeKeyMismatchError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, request_start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, request_end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, range_),
  };
  RangeKeyMismatchError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeKeyMismatchError_descriptor_,
      RangeKeyMismatchError::default_instance_,
      RangeKeyMismatchError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeKeyMismatchError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeKeyMismatchError, _internal_metadata_),
      -1);
  ReadWithinUncertaintyIntervalError_descriptor_ = file->message_type(4);
  static const int ReadWithinUncertaintyIntervalError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, read_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, existing_timestamp_),
  };
  ReadWithinUncertaintyIntervalError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReadWithinUncertaintyIntervalError_descriptor_,
      ReadWithinUncertaintyIntervalError::default_instance_,
      ReadWithinUncertaintyIntervalError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReadWithinUncertaintyIntervalError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadWithinUncertaintyIntervalError, _internal_metadata_),
      -1);
  TransactionAbortedError_descriptor_ = file->message_type(5);
  static const int TransactionAbortedError_offsets_[1] = {
  };
  TransactionAbortedError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionAbortedError_descriptor_,
      TransactionAbortedError::default_instance_,
      TransactionAbortedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionAbortedError, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionAbortedError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionAbortedError, _internal_metadata_),
      -1);
  TransactionPushError_descriptor_ = file->message_type(6);
  static const int TransactionPushError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, pushee_txn_),
  };
  TransactionPushError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionPushError_descriptor_,
      TransactionPushError::default_instance_,
      TransactionPushError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionPushError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPushError, _internal_metadata_),
      -1);
  TransactionRetryError_descriptor_ = file->message_type(7);
  static const int TransactionRetryError_offsets_[1] = {
  };
  TransactionRetryError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionRetryError_descriptor_,
      TransactionRetryError::default_instance_,
      TransactionRetryError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRetryError, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionRetryError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRetryError, _internal_metadata_),
      -1);
  TransactionReplayError_descriptor_ = file->message_type(8);
  static const int TransactionReplayError_offsets_[1] = {
  };
  TransactionReplayError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionReplayError_descriptor_,
      TransactionReplayError::default_instance_,
      TransactionReplayError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReplayError, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionReplayError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReplayError, _internal_metadata_),
      -1);
  TransactionStatusError_descriptor_ = file->message_type(9);
  static const int TransactionStatusError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, msg_),
  };
  TransactionStatusError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionStatusError_descriptor_,
      TransactionStatusError::default_instance_,
      TransactionStatusError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransactionStatusError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionStatusError, _internal_metadata_),
      -1);
  WriteIntentError_descriptor_ = file->message_type(10);
  static const int WriteIntentError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, intents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, resolved_),
  };
  WriteIntentError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteIntentError_descriptor_,
      WriteIntentError::default_instance_,
      WriteIntentError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteIntentError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteIntentError, _internal_metadata_),
      -1);
  WriteTooOldError_descriptor_ = file->message_type(11);
  static const int WriteTooOldError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, actual_timestamp_),
  };
  WriteTooOldError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteTooOldError_descriptor_,
      WriteTooOldError::default_instance_,
      WriteTooOldError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, _has_bits_[0]),
      -1,
      -1,
      sizeof(WriteTooOldError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteTooOldError, _internal_metadata_),
      -1);
  OpRequiresTxnError_descriptor_ = file->message_type(12);
  static const int OpRequiresTxnError_offsets_[1] = {
  };
  OpRequiresTxnError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OpRequiresTxnError_descriptor_,
      OpRequiresTxnError::default_instance_,
      OpRequiresTxnError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequiresTxnError, _has_bits_[0]),
      -1,
      -1,
      sizeof(OpRequiresTxnError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpRequiresTxnError, _internal_metadata_),
      -1);
  ConditionFailedError_descriptor_ = file->message_type(13);
  static const int ConditionFailedError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, actual_value_),
  };
  ConditionFailedError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConditionFailedError_descriptor_,
      ConditionFailedError::default_instance_,
      ConditionFailedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConditionFailedError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionFailedError, _internal_metadata_),
      -1);
  LeaseRejectedError_descriptor_ = file->message_type(14);
  static const int LeaseRejectedError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRejectedError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRejectedError, requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRejectedError, existing_),
  };
  LeaseRejectedError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaseRejectedError_descriptor_,
      LeaseRejectedError::default_instance_,
      LeaseRejectedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRejectedError, _has_bits_[0]),
      -1,
      -1,
      sizeof(LeaseRejectedError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseRejectedError, _internal_metadata_),
      -1);
  SendError_descriptor_ = file->message_type(15);
  static const int SendError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendError, retryable_),
  };
  SendError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SendError_descriptor_,
      SendError::default_instance_,
      SendError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendError, _has_bits_[0]),
      -1,
      -1,
      sizeof(SendError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendError, _internal_metadata_),
      -1);
  RaftGroupDeletedError_descriptor_ = file->message_type(16);
  static const int RaftGroupDeletedError_offsets_[1] = {
  };
  RaftGroupDeletedError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftGroupDeletedError_descriptor_,
      RaftGroupDeletedError::default_instance_,
      RaftGroupDeletedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftGroupDeletedError, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftGroupDeletedError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftGroupDeletedError, _internal_metadata_),
      -1);
  ReplicaCorruptionError_descriptor_ = file->message_type(17);
  static const int ReplicaCorruptionError_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaCorruptionError, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaCorruptionError, processed_),
  };
  ReplicaCorruptionError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplicaCorruptionError_descriptor_,
      ReplicaCorruptionError::default_instance_,
      ReplicaCorruptionError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaCorruptionError, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReplicaCorruptionError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaCorruptionError, _internal_metadata_),
      -1);
  LeaseVersionChangedError_descriptor_ = file->message_type(18);
  static const int LeaseVersionChangedError_offsets_[1] = {
  };
  LeaseVersionChangedError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LeaseVersionChangedError_descriptor_,
      LeaseVersionChangedError::default_instance_,
      LeaseVersionChangedError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseVersionChangedError, _has_bits_[0]),
      -1,
      -1,
      sizeof(LeaseVersionChangedError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaseVersionChangedError, _internal_metadata_),
      -1);
  DidntUpdateDescriptorError_descriptor_ = file->message_type(19);
  static const int DidntUpdateDescriptorError_offsets_[1] = {
  };
  DidntUpdateDescriptorError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DidntUpdateDescriptorError_descriptor_,
      DidntUpdateDescriptorError::default_instance_,
      DidntUpdateDescriptorError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DidntUpdateDescriptorError, _has_bits_[0]),
      -1,
      -1,
      sizeof(DidntUpdateDescriptorError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DidntUpdateDescriptorError, _internal_metadata_),
      -1);
  ExistingSchemaChangeLeaseError_descriptor_ = file->message_type(20);
  static const int ExistingSchemaChangeLeaseError_offsets_[1] = {
  };
  ExistingSchemaChangeLeaseError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExistingSchemaChangeLeaseError_descriptor_,
      ExistingSchemaChangeLeaseError::default_instance_,
      ExistingSchemaChangeLeaseError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExistingSchemaChangeLeaseError, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExistingSchemaChangeLeaseError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExistingSchemaChangeLeaseError, _internal_metadata_),
      -1);
  ErrorWithPGCode_descriptor_ = file->message_type(21);
  static const int ErrorWithPGCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorWithPGCode, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorWithPGCode, message_),
  };
  ErrorWithPGCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorWithPGCode_descriptor_,
      ErrorWithPGCode::default_instance_,
      ErrorWithPGCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorWithPGCode, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrorWithPGCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorWithPGCode, _internal_metadata_),
      -1);
  ErrorDetail_descriptor_ = file->message_type(22);
  static const int ErrorDetail_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, not_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, range_not_found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, range_key_mismatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, read_within_uncertainty_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, transaction_aborted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, transaction_push_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, transaction_retry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, transaction_replay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, transaction_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, write_intent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, write_too_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, op_requires_txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, condition_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, lease_rejected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, node_unavailable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, raft_group_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, replica_corruption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, lease_version_changed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, didnt_update_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, existing_scheme_change_lease_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, error_with_pg_code_),
  };
  ErrorDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorDetail_descriptor_,
      ErrorDetail::default_instance_,
      ErrorDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrorDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorDetail, _internal_metadata_),
      -1);
  ErrPosition_descriptor_ = file->message_type(23);
  static const int ErrPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrPosition, index_),
  };
  ErrPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrPosition_descriptor_,
      ErrPosition::default_instance_,
      ErrPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(ErrPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrPosition, _internal_metadata_),
      -1);
  Error_descriptor_ = file->message_type(24);
  static const int Error_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, retryable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, transaction_restart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, unexposed_txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, origin_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, now_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      -1);
  TransactionRestart_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2froachpb_2ferrors_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotLeaderError_descriptor_, &NotLeaderError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeUnavailableError_descriptor_, &NodeUnavailableError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeNotFoundError_descriptor_, &RangeNotFoundError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeKeyMismatchError_descriptor_, &RangeKeyMismatchError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReadWithinUncertaintyIntervalError_descriptor_, &ReadWithinUncertaintyIntervalError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionAbortedError_descriptor_, &TransactionAbortedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionPushError_descriptor_, &TransactionPushError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionRetryError_descriptor_, &TransactionRetryError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionReplayError_descriptor_, &TransactionReplayError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionStatusError_descriptor_, &TransactionStatusError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteIntentError_descriptor_, &WriteIntentError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteTooOldError_descriptor_, &WriteTooOldError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OpRequiresTxnError_descriptor_, &OpRequiresTxnError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConditionFailedError_descriptor_, &ConditionFailedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaseRejectedError_descriptor_, &LeaseRejectedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SendError_descriptor_, &SendError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftGroupDeletedError_descriptor_, &RaftGroupDeletedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplicaCorruptionError_descriptor_, &ReplicaCorruptionError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LeaseVersionChangedError_descriptor_, &LeaseVersionChangedError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DidntUpdateDescriptorError_descriptor_, &DidntUpdateDescriptorError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExistingSchemaChangeLeaseError_descriptor_, &ExistingSchemaChangeLeaseError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorWithPGCode_descriptor_, &ErrorWithPGCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorDetail_descriptor_, &ErrorDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrPosition_descriptor_, &ErrPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto() {
  delete NotLeaderError::default_instance_;
  delete NotLeaderError_reflection_;
  delete NodeUnavailableError::default_instance_;
  delete NodeUnavailableError_reflection_;
  delete RangeNotFoundError::default_instance_;
  delete RangeNotFoundError_reflection_;
  delete RangeKeyMismatchError::default_instance_;
  delete RangeKeyMismatchError_reflection_;
  delete ReadWithinUncertaintyIntervalError::default_instance_;
  delete ReadWithinUncertaintyIntervalError_reflection_;
  delete TransactionAbortedError::default_instance_;
  delete TransactionAbortedError_reflection_;
  delete TransactionPushError::default_instance_;
  delete TransactionPushError_reflection_;
  delete TransactionRetryError::default_instance_;
  delete TransactionRetryError_reflection_;
  delete TransactionReplayError::default_instance_;
  delete TransactionReplayError_reflection_;
  delete TransactionStatusError::default_instance_;
  delete TransactionStatusError_reflection_;
  delete WriteIntentError::default_instance_;
  delete WriteIntentError_reflection_;
  delete WriteTooOldError::default_instance_;
  delete WriteTooOldError_reflection_;
  delete OpRequiresTxnError::default_instance_;
  delete OpRequiresTxnError_reflection_;
  delete ConditionFailedError::default_instance_;
  delete ConditionFailedError_reflection_;
  delete LeaseRejectedError::default_instance_;
  delete LeaseRejectedError_reflection_;
  delete SendError::default_instance_;
  delete SendError_reflection_;
  delete RaftGroupDeletedError::default_instance_;
  delete RaftGroupDeletedError_reflection_;
  delete ReplicaCorruptionError::default_instance_;
  delete ReplicaCorruptionError_reflection_;
  delete LeaseVersionChangedError::default_instance_;
  delete LeaseVersionChangedError_reflection_;
  delete DidntUpdateDescriptorError::default_instance_;
  delete DidntUpdateDescriptorError_reflection_;
  delete ExistingSchemaChangeLeaseError::default_instance_;
  delete ExistingSchemaChangeLeaseError_reflection_;
  delete ErrorWithPGCode::default_instance_;
  delete ErrorWithPGCode_reflection_;
  delete ErrorDetail::default_instance_;
  delete ErrorDetail_reflection_;
  delete ErrPosition::default_instance_;
  delete ErrPosition_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
}

void protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::roachpb::protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  ::cockroach::roachpb::protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cockroach/roachpb/errors.proto\022\021cockro"
    "ach.roachpb\032 cockroach/roachpb/metadata."
    "proto\032\034cockroach/roachpb/data.proto\032\024gog"
    "oproto/gogo.proto\"\253\001\n\016NotLeaderError\0225\n\007"
    "replica\030\001 \001(\0132$.cockroach.roachpb.Replic"
    "aDescriptor\0224\n\006leader\030\002 \001(\0132$.cockroach."
    "roachpb.ReplicaDescriptor\022,\n\010range_id\030\003 "
    "\001(\003B\032\310\336\037\000\342\336\037\007RangeID\372\336\037\007RangeID\"\026\n\024NodeU"
    "navailableError\"B\n\022RangeNotFoundError\022,\n"
    "\010range_id\030\001 \001(\003B\032\310\336\037\000\342\336\037\007RangeID\372\336\037\007Rang"
    "eID\"\220\001\n\025RangeKeyMismatchError\022\"\n\021request"
    "_start_key\030\001 \001(\014B\007\372\336\037\003Key\022 \n\017request_end"
    "_key\030\002 \001(\014B\007\372\336\037\003Key\0221\n\005range\030\003 \001(\0132\".coc"
    "kroach.roachpb.RangeDescriptor\"\240\001\n\"ReadW"
    "ithinUncertaintyIntervalError\022:\n\016read_ti"
    "mestamp\030\001 \001(\0132\034.cockroach.roachpb.Timest"
    "ampB\004\310\336\037\000\022>\n\022existing_timestamp\030\002 \001(\0132\034."
    "cockroach.roachpb.TimestampB\004\310\336\037\000\"\031\n\027Tra"
    "nsactionAbortedError\"P\n\024TransactionPushE"
    "rror\0228\n\npushee_txn\030\001 \001(\0132\036.cockroach.roa"
    "chpb.TransactionB\004\310\336\037\000\"\027\n\025TransactionRet"
    "ryError\"\030\n\026TransactionReplayError\"+\n\026Tra"
    "nsactionStatusError\022\021\n\003msg\030\001 \001(\tB\004\310\336\037\000\"\\"
    "\n\020WriteIntentError\0220\n\007intents\030\001 \003(\0132\031.co"
    "ckroach.roachpb.IntentB\004\310\336\037\000\022\026\n\010resolved"
    "\030\002 \001(\010B\004\310\336\037\000\"\207\001\n\020WriteTooOldError\0225\n\ttim"
    "estamp\030\001 \001(\0132\034.cockroach.roachpb.Timesta"
    "mpB\004\310\336\037\000\022<\n\020actual_timestamp\030\002 \001(\0132\034.coc"
    "kroach.roachpb.TimestampB\004\310\336\037\000\"\024\n\022OpRequ"
    "iresTxnError\"F\n\024ConditionFailedError\022.\n\014"
    "actual_value\030\001 \001(\0132\030.cockroach.roachpb.V"
    "alue\"\220\001\n\022LeaseRejectedError\022\025\n\007message\030\001"
    " \001(\tB\004\310\336\037\000\0221\n\trequested\030\002 \001(\0132\030.cockroac"
    "h.roachpb.LeaseB\004\310\336\037\000\0220\n\010existing\030\003 \001(\0132"
    "\030.cockroach.roachpb.LeaseB\004\310\336\037\000\";\n\tSendE"
    "rror\022\025\n\007message\030\001 \001(\tB\004\310\336\037\000\022\027\n\tretryable"
    "\030\002 \001(\010B\004\310\336\037\000\"\027\n\025RaftGroupDeletedError\"J\n"
    "\026ReplicaCorruptionError\022\027\n\terror_msg\030\001 \001"
    "(\tB\004\310\336\037\000\022\027\n\tprocessed\030\002 \001(\010B\004\310\336\037\000\"\032\n\030Lea"
    "seVersionChangedError\"\034\n\032DidntUpdateDesc"
    "riptorError\" \n\036ExistingSchemaChangeLease"
    "Error\"B\n\017ErrorWithPGCode\022\030\n\nerror_code\030\001"
    " \001(\tB\004\310\336\037\000\022\025\n\007message\030\002 \001(\tB\004\310\336\037\000\"\372\013\n\013Er"
    "rorDetail\0225\n\nnot_leader\030\001 \001(\0132!.cockroac"
    "h.roachpb.NotLeaderError\022>\n\017range_not_fo"
    "und\030\002 \001(\0132%.cockroach.roachpb.RangeNotFo"
    "undError\022D\n\022range_key_mismatch\030\003 \001(\0132(.c"
    "ockroach.roachpb.RangeKeyMismatchError\022_"
    "\n read_within_uncertainty_interval\030\004 \001(\013"
    "25.cockroach.roachpb.ReadWithinUncertain"
    "tyIntervalError\022G\n\023transaction_aborted\030\005"
    " \001(\0132*.cockroach.roachpb.TransactionAbor"
    "tedError\022A\n\020transaction_push\030\006 \001(\0132\'.coc"
    "kroach.roachpb.TransactionPushError\022C\n\021t"
    "ransaction_retry\030\007 \001(\0132(.cockroach.roach"
    "pb.TransactionRetryError\022E\n\022transaction_"
    "replay\030\026 \001(\0132).cockroach.roachpb.Transac"
    "tionReplayError\022E\n\022transaction_status\030\010 "
    "\001(\0132).cockroach.roachpb.TransactionStatu"
    "sError\0229\n\014write_intent\030\t \001(\0132#.cockroach"
    ".roachpb.WriteIntentError\022:\n\rwrite_too_o"
    "ld\030\n \001(\0132#.cockroach.roachpb.WriteTooOld"
    "Error\022>\n\017op_requires_txn\030\013 \001(\0132%.cockroa"
    "ch.roachpb.OpRequiresTxnError\022A\n\020conditi"
    "on_failed\030\014 \001(\0132\'.cockroach.roachpb.Cond"
    "itionFailedError\022=\n\016lease_rejected\030\r \001(\013"
    "2%.cockroach.roachpb.LeaseRejectedError\022"
    "A\n\020node_unavailable\030\016 \001(\0132\'.cockroach.ro"
    "achpb.NodeUnavailableError\022*\n\004send\030\017 \001(\013"
    "2\034.cockroach.roachpb.SendError\022D\n\022raft_g"
    "roup_deleted\030\020 \001(\0132(.cockroach.roachpb.R"
    "aftGroupDeletedError\022E\n\022replica_corrupti"
    "on\030\021 \001(\0132).cockroach.roachpb.ReplicaCorr"
    "uptionError\022J\n\025lease_version_changed\030\022 \001"
    "(\0132+.cockroach.roachpb.LeaseVersionChang"
    "edError\022N\n\027didnt_update_descriptor\030\023 \001(\013"
    "2-.cockroach.roachpb.DidntUpdateDescript"
    "orError\022W\n\034existing_scheme_change_lease\030"
    "\024 \001(\01321.cockroach.roachpb.ExistingSchema"
    "ChangeLeaseError\022>\n\022error_with_pg_code\030\025"
    " \001(\0132\".cockroach.roachpb.ErrorWithPGCode"
    ":\004\310\240\037\001\"\"\n\013ErrPosition\022\023\n\005index\030\001 \001(\005B\004\310\336"
    "\037\000\"\363\002\n\005Error\022\025\n\007message\030\001 \001(\tB\004\310\336\037\000\022\027\n\tr"
    "etryable\030\002 \001(\010B\004\310\336\037\000\022H\n\023transaction_rest"
    "art\030\003 \001(\0162%.cockroach.roachpb.Transactio"
    "nRestartB\004\310\336\037\000\0225\n\runexposed_txn\030\004 \001(\0132\036."
    "cockroach.roachpb.Transaction\022#\n\013origin_"
    "node\030\005 \001(\005B\016\310\336\037\000\372\336\037\006NodeID\022.\n\006detail\030\006 \001"
    "(\0132\036.cockroach.roachpb.ErrorDetail\022-\n\005in"
    "dex\030\007 \001(\0132\036.cockroach.roachpb.ErrPositio"
    "n\022/\n\003now\030\010 \001(\0132\034.cockroach.roachpb.Times"
    "tampB\004\310\336\037\000:\004\230\240\037\000*:\n\022TransactionRestart\022\010"
    "\n\004NONE\020\000\022\013\n\007BACKOFF\020\001\022\r\n\tIMMEDIATE\020\002B\tZ\007"
    "roachpbX\002", 3729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/roachpb/errors.proto", &protobuf_RegisterTypes);
  NotLeaderError::default_instance_ = new NotLeaderError();
  NodeUnavailableError::default_instance_ = new NodeUnavailableError();
  RangeNotFoundError::default_instance_ = new RangeNotFoundError();
  RangeKeyMismatchError::default_instance_ = new RangeKeyMismatchError();
  ReadWithinUncertaintyIntervalError::default_instance_ = new ReadWithinUncertaintyIntervalError();
  TransactionAbortedError::default_instance_ = new TransactionAbortedError();
  TransactionPushError::default_instance_ = new TransactionPushError();
  TransactionRetryError::default_instance_ = new TransactionRetryError();
  TransactionReplayError::default_instance_ = new TransactionReplayError();
  TransactionStatusError::default_instance_ = new TransactionStatusError();
  WriteIntentError::default_instance_ = new WriteIntentError();
  WriteTooOldError::default_instance_ = new WriteTooOldError();
  OpRequiresTxnError::default_instance_ = new OpRequiresTxnError();
  ConditionFailedError::default_instance_ = new ConditionFailedError();
  LeaseRejectedError::default_instance_ = new LeaseRejectedError();
  SendError::default_instance_ = new SendError();
  RaftGroupDeletedError::default_instance_ = new RaftGroupDeletedError();
  ReplicaCorruptionError::default_instance_ = new ReplicaCorruptionError();
  LeaseVersionChangedError::default_instance_ = new LeaseVersionChangedError();
  DidntUpdateDescriptorError::default_instance_ = new DidntUpdateDescriptorError();
  ExistingSchemaChangeLeaseError::default_instance_ = new ExistingSchemaChangeLeaseError();
  ErrorWithPGCode::default_instance_ = new ErrorWithPGCode();
  ErrorDetail::default_instance_ = new ErrorDetail();
  ErrPosition::default_instance_ = new ErrPosition();
  Error::default_instance_ = new Error();
  NotLeaderError::default_instance_->InitAsDefaultInstance();
  NodeUnavailableError::default_instance_->InitAsDefaultInstance();
  RangeNotFoundError::default_instance_->InitAsDefaultInstance();
  RangeKeyMismatchError::default_instance_->InitAsDefaultInstance();
  ReadWithinUncertaintyIntervalError::default_instance_->InitAsDefaultInstance();
  TransactionAbortedError::default_instance_->InitAsDefaultInstance();
  TransactionPushError::default_instance_->InitAsDefaultInstance();
  TransactionRetryError::default_instance_->InitAsDefaultInstance();
  TransactionReplayError::default_instance_->InitAsDefaultInstance();
  TransactionStatusError::default_instance_->InitAsDefaultInstance();
  WriteIntentError::default_instance_->InitAsDefaultInstance();
  WriteTooOldError::default_instance_->InitAsDefaultInstance();
  OpRequiresTxnError::default_instance_->InitAsDefaultInstance();
  ConditionFailedError::default_instance_->InitAsDefaultInstance();
  LeaseRejectedError::default_instance_->InitAsDefaultInstance();
  SendError::default_instance_->InitAsDefaultInstance();
  RaftGroupDeletedError::default_instance_->InitAsDefaultInstance();
  ReplicaCorruptionError::default_instance_->InitAsDefaultInstance();
  LeaseVersionChangedError::default_instance_->InitAsDefaultInstance();
  DidntUpdateDescriptorError::default_instance_->InitAsDefaultInstance();
  ExistingSchemaChangeLeaseError::default_instance_->InitAsDefaultInstance();
  ErrorWithPGCode::default_instance_->InitAsDefaultInstance();
  ErrorDetail::default_instance_->InitAsDefaultInstance();
  ErrPosition::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2froachpb_2ferrors_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2froachpb_2ferrors_2eproto {
  StaticDescriptorInitializer_cockroach_2froachpb_2ferrors_2eproto() {
    protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  }
} static_descriptor_initializer_cockroach_2froachpb_2ferrors_2eproto_;
const ::google::protobuf::EnumDescriptor* TransactionRestart_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRestart_descriptor_;
}
bool TransactionRestart_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotLeaderError::kReplicaFieldNumber;
const int NotLeaderError::kLeaderFieldNumber;
const int NotLeaderError::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotLeaderError::NotLeaderError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NotLeaderError)
}

void NotLeaderError::InitAsDefaultInstance() {
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
  leader_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
}

NotLeaderError::NotLeaderError(const NotLeaderError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NotLeaderError)
}

void NotLeaderError::SharedCtor() {
  _cached_size_ = 0;
  replica_ = NULL;
  leader_ = NULL;
  range_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotLeaderError::~NotLeaderError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NotLeaderError)
  SharedDtor();
}

void NotLeaderError::SharedDtor() {
  if (this != default_instance_) {
    delete replica_;
    delete leader_;
  }
}

void NotLeaderError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotLeaderError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotLeaderError_descriptor_;
}

const NotLeaderError& NotLeaderError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

NotLeaderError* NotLeaderError::default_instance_ = NULL;

NotLeaderError* NotLeaderError::New(::google::protobuf::Arena* arena) const {
  NotLeaderError* n = new NotLeaderError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotLeaderError::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
    if (has_leader()) {
      if (leader_ != NULL) leader_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
    range_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotLeaderError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NotLeaderError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range_id;
        break;
      }

      // optional int64 range_id = 3;
      case 3: {
        if (tag == 24) {
         parse_range_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
          set_has_range_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NotLeaderError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NotLeaderError)
  return false;
#undef DO_
}

void NotLeaderError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NotLeaderError)
  // optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->replica_, output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  // optional int64 range_id = 3;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NotLeaderError)
}

::google::protobuf::uint8* NotLeaderError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.NotLeaderError)
  // optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->replica_, target);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->leader_, target);
  }

  // optional int64 range_id = 3;
  if (has_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->range_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.NotLeaderError)
  return target;
}

int NotLeaderError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

    // optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leader_);
    }

    // optional int64 range_id = 3;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotLeaderError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotLeaderError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotLeaderError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotLeaderError::MergeFrom(const NotLeaderError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (from.has_leader()) {
      mutable_leader()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.leader());
    }
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NotLeaderError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotLeaderError::CopyFrom(const NotLeaderError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotLeaderError::IsInitialized() const {

  return true;
}

void NotLeaderError::Swap(NotLeaderError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotLeaderError::InternalSwap(NotLeaderError* other) {
  std::swap(replica_, other->replica_);
  std::swap(leader_, other->leader_);
  std::swap(range_id_, other->range_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotLeaderError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotLeaderError_descriptor_;
  metadata.reflection = NotLeaderError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotLeaderError

// optional .cockroach.roachpb.ReplicaDescriptor replica = 1;
bool NotLeaderError::has_replica() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NotLeaderError::set_has_replica() {
  _has_bits_[0] |= 0x00000001u;
}
void NotLeaderError::clear_has_replica() {
  _has_bits_[0] &= ~0x00000001u;
}
void NotLeaderError::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& NotLeaderError::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaderError.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void NotLeaderError::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaderError.replica)
}

// optional .cockroach.roachpb.ReplicaDescriptor leader = 2;
bool NotLeaderError::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NotLeaderError::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
void NotLeaderError::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
void NotLeaderError::clear_leader() {
  if (leader_ != NULL) leader_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_leader();
}
const ::cockroach::roachpb::ReplicaDescriptor& NotLeaderError::leader() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.leader)
  return leader_ != NULL ? *leader_ : *default_instance_->leader_;
}
::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::mutable_leader() {
  set_has_leader();
  if (leader_ == NULL) {
    leader_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NotLeaderError.leader)
  return leader_;
}
::cockroach::roachpb::ReplicaDescriptor* NotLeaderError::release_leader() {
  clear_has_leader();
  ::cockroach::roachpb::ReplicaDescriptor* temp = leader_;
  leader_ = NULL;
  return temp;
}
void NotLeaderError::set_allocated_leader(::cockroach::roachpb::ReplicaDescriptor* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NotLeaderError.leader)
}

// optional int64 range_id = 3;
bool NotLeaderError::has_range_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NotLeaderError::set_has_range_id() {
  _has_bits_[0] |= 0x00000004u;
}
void NotLeaderError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void NotLeaderError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
 ::google::protobuf::int64 NotLeaderError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NotLeaderError.range_id)
  return range_id_;
}
 void NotLeaderError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NotLeaderError.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeUnavailableError::NodeUnavailableError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NodeUnavailableError)
}

void NodeUnavailableError::InitAsDefaultInstance() {
}

NodeUnavailableError::NodeUnavailableError(const NodeUnavailableError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NodeUnavailableError)
}

void NodeUnavailableError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeUnavailableError::~NodeUnavailableError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NodeUnavailableError)
  SharedDtor();
}

void NodeUnavailableError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeUnavailableError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeUnavailableError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeUnavailableError_descriptor_;
}

const NodeUnavailableError& NodeUnavailableError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

NodeUnavailableError* NodeUnavailableError::default_instance_ = NULL;

NodeUnavailableError* NodeUnavailableError::New(::google::protobuf::Arena* arena) const {
  NodeUnavailableError* n = new NodeUnavailableError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeUnavailableError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeUnavailableError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NodeUnavailableError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NodeUnavailableError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NodeUnavailableError)
  return false;
#undef DO_
}

void NodeUnavailableError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NodeUnavailableError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NodeUnavailableError)
}

::google::protobuf::uint8* NodeUnavailableError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.NodeUnavailableError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.NodeUnavailableError)
  return target;
}

int NodeUnavailableError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeUnavailableError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeUnavailableError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeUnavailableError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeUnavailableError::MergeFrom(const NodeUnavailableError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeUnavailableError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUnavailableError::CopyFrom(const NodeUnavailableError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUnavailableError::IsInitialized() const {

  return true;
}

void NodeUnavailableError::Swap(NodeUnavailableError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeUnavailableError::InternalSwap(NodeUnavailableError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeUnavailableError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeUnavailableError_descriptor_;
  metadata.reflection = NodeUnavailableError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeUnavailableError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeNotFoundError::kRangeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeNotFoundError::RangeNotFoundError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeNotFoundError)
}

void RangeNotFoundError::InitAsDefaultInstance() {
}

RangeNotFoundError::RangeNotFoundError(const RangeNotFoundError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeNotFoundError)
}

void RangeNotFoundError::SharedCtor() {
  _cached_size_ = 0;
  range_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeNotFoundError::~RangeNotFoundError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeNotFoundError)
  SharedDtor();
}

void RangeNotFoundError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RangeNotFoundError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeNotFoundError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeNotFoundError_descriptor_;
}

const RangeNotFoundError& RangeNotFoundError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

RangeNotFoundError* RangeNotFoundError::default_instance_ = NULL;

RangeNotFoundError* RangeNotFoundError::New(::google::protobuf::Arena* arena) const {
  RangeNotFoundError* n = new RangeNotFoundError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeNotFoundError::Clear() {
  range_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeNotFoundError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeNotFoundError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
          set_has_range_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeNotFoundError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeNotFoundError)
  return false;
#undef DO_
}

void RangeNotFoundError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeNotFoundError)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeNotFoundError)
}

::google::protobuf::uint8* RangeNotFoundError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.RangeNotFoundError)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->range_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.RangeNotFoundError)
  return target;
}

int RangeNotFoundError::ByteSize() const {
  int total_size = 0;

  // optional int64 range_id = 1;
  if (has_range_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->range_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeNotFoundError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeNotFoundError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeNotFoundError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeNotFoundError::MergeFrom(const RangeNotFoundError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeNotFoundError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeNotFoundError::CopyFrom(const RangeNotFoundError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeNotFoundError::IsInitialized() const {

  return true;
}

void RangeNotFoundError::Swap(RangeNotFoundError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeNotFoundError::InternalSwap(RangeNotFoundError* other) {
  std::swap(range_id_, other->range_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeNotFoundError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeNotFoundError_descriptor_;
  metadata.reflection = RangeNotFoundError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeNotFoundError

// optional int64 range_id = 1;
bool RangeNotFoundError::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeNotFoundError::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeNotFoundError::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeNotFoundError::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
 ::google::protobuf::int64 RangeNotFoundError::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeNotFoundError.range_id)
  return range_id_;
}
 void RangeNotFoundError::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeNotFoundError.range_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeKeyMismatchError::kRequestStartKeyFieldNumber;
const int RangeKeyMismatchError::kRequestEndKeyFieldNumber;
const int RangeKeyMismatchError::kRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeKeyMismatchError::RangeKeyMismatchError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeKeyMismatchError)
}

void RangeKeyMismatchError::InitAsDefaultInstance() {
  range_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
}

RangeKeyMismatchError::RangeKeyMismatchError(const RangeKeyMismatchError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeKeyMismatchError)
}

void RangeKeyMismatchError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeKeyMismatchError::~RangeKeyMismatchError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeKeyMismatchError)
  SharedDtor();
}

void RangeKeyMismatchError::SharedDtor() {
  request_start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete range_;
  }
}

void RangeKeyMismatchError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeKeyMismatchError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeKeyMismatchError_descriptor_;
}

const RangeKeyMismatchError& RangeKeyMismatchError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

RangeKeyMismatchError* RangeKeyMismatchError::default_instance_ = NULL;

RangeKeyMismatchError* RangeKeyMismatchError::New(::google::protobuf::Arena* arena) const {
  RangeKeyMismatchError* n = new RangeKeyMismatchError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeKeyMismatchError::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_request_start_key()) {
      request_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_request_end_key()) {
      request_end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_range()) {
      if (range_ != NULL) range_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeKeyMismatchError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeKeyMismatchError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes request_start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_end_key;
        break;
      }

      // optional bytes request_end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_request_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range;
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor range = 3;
      case 3: {
        if (tag == 26) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeKeyMismatchError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeKeyMismatchError)
  return false;
#undef DO_
}

void RangeKeyMismatchError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeKeyMismatchError)
  // optional bytes request_start_key = 1;
  if (has_request_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request_start_key(), output);
  }

  // optional bytes request_end_key = 2;
  if (has_request_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request_end_key(), output);
  }

  // optional .cockroach.roachpb.RangeDescriptor range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeKeyMismatchError)
}

::google::protobuf::uint8* RangeKeyMismatchError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.RangeKeyMismatchError)
  // optional bytes request_start_key = 1;
  if (has_request_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request_start_key(), target);
  }

  // optional bytes request_end_key = 2;
  if (has_request_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request_end_key(), target);
  }

  // optional .cockroach.roachpb.RangeDescriptor range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->range_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.RangeKeyMismatchError)
  return target;
}

int RangeKeyMismatchError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes request_start_key = 1;
    if (has_request_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_start_key());
    }

    // optional bytes request_end_key = 2;
    if (has_request_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request_end_key());
    }

    // optional .cockroach.roachpb.RangeDescriptor range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->range_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeKeyMismatchError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeKeyMismatchError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeKeyMismatchError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeKeyMismatchError::MergeFrom(const RangeKeyMismatchError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_start_key()) {
      set_has_request_start_key();
      request_start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_start_key_);
    }
    if (from.has_request_end_key()) {
      set_has_request_end_key();
      request_end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_end_key_);
    }
    if (from.has_range()) {
      mutable_range()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.range());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeKeyMismatchError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeKeyMismatchError::CopyFrom(const RangeKeyMismatchError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeKeyMismatchError::IsInitialized() const {

  return true;
}

void RangeKeyMismatchError::Swap(RangeKeyMismatchError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeKeyMismatchError::InternalSwap(RangeKeyMismatchError* other) {
  request_start_key_.Swap(&other->request_start_key_);
  request_end_key_.Swap(&other->request_end_key_);
  std::swap(range_, other->range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeKeyMismatchError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeKeyMismatchError_descriptor_;
  metadata.reflection = RangeKeyMismatchError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeKeyMismatchError

// optional bytes request_start_key = 1;
bool RangeKeyMismatchError::has_request_start_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeKeyMismatchError::set_has_request_start_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeKeyMismatchError::clear_has_request_start_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeKeyMismatchError::clear_request_start_key() {
  request_start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_start_key();
}
 const ::std::string& RangeKeyMismatchError::request_start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeKeyMismatchError::set_request_start_key(const ::std::string& value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
 void RangeKeyMismatchError::set_request_start_key(const char* value) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
 void RangeKeyMismatchError::set_request_start_key(const void* value, size_t size) {
  set_has_request_start_key();
  request_start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}
 ::std::string* RangeKeyMismatchError::mutable_request_start_key() {
  set_has_request_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
  return request_start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeKeyMismatchError::release_request_start_key() {
  clear_has_request_start_key();
  return request_start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeKeyMismatchError::set_allocated_request_start_key(::std::string* request_start_key) {
  if (request_start_key != NULL) {
    set_has_request_start_key();
  } else {
    clear_has_request_start_key();
  }
  request_start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_start_key)
}

// optional bytes request_end_key = 2;
bool RangeKeyMismatchError::has_request_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeKeyMismatchError::set_has_request_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeKeyMismatchError::clear_has_request_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeKeyMismatchError::clear_request_end_key() {
  request_end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request_end_key();
}
 const ::std::string& RangeKeyMismatchError::request_end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeKeyMismatchError::set_request_end_key(const ::std::string& value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
 void RangeKeyMismatchError::set_request_end_key(const char* value) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
 void RangeKeyMismatchError::set_request_end_key(const void* value, size_t size) {
  set_has_request_end_key();
  request_end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}
 ::std::string* RangeKeyMismatchError::mutable_request_end_key() {
  set_has_request_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
  return request_end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeKeyMismatchError::release_request_end_key() {
  clear_has_request_end_key();
  return request_end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeKeyMismatchError::set_allocated_request_end_key(::std::string* request_end_key) {
  if (request_end_key != NULL) {
    set_has_request_end_key();
  } else {
    clear_has_request_end_key();
  }
  request_end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.request_end_key)
}

// optional .cockroach.roachpb.RangeDescriptor range = 3;
bool RangeKeyMismatchError::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeKeyMismatchError::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeKeyMismatchError::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeKeyMismatchError::clear_range() {
  if (range_ != NULL) range_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_range();
}
const ::cockroach::roachpb::RangeDescriptor& RangeKeyMismatchError::range() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeKeyMismatchError.range)
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::mutable_range() {
  set_has_range();
  if (range_ == NULL) {
    range_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeKeyMismatchError.range)
  return range_;
}
::cockroach::roachpb::RangeDescriptor* RangeKeyMismatchError::release_range() {
  clear_has_range();
  ::cockroach::roachpb::RangeDescriptor* temp = range_;
  range_ = NULL;
  return temp;
}
void RangeKeyMismatchError::set_allocated_range(::cockroach::roachpb::RangeDescriptor* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeKeyMismatchError.range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadWithinUncertaintyIntervalError::kReadTimestampFieldNumber;
const int ReadWithinUncertaintyIntervalError::kExistingTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}

void ReadWithinUncertaintyIntervalError::InitAsDefaultInstance() {
  read_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  existing_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

ReadWithinUncertaintyIntervalError::ReadWithinUncertaintyIntervalError(const ReadWithinUncertaintyIntervalError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}

void ReadWithinUncertaintyIntervalError::SharedCtor() {
  _cached_size_ = 0;
  read_timestamp_ = NULL;
  existing_timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadWithinUncertaintyIntervalError::~ReadWithinUncertaintyIntervalError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  SharedDtor();
}

void ReadWithinUncertaintyIntervalError::SharedDtor() {
  if (this != default_instance_) {
    delete read_timestamp_;
    delete existing_timestamp_;
  }
}

void ReadWithinUncertaintyIntervalError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadWithinUncertaintyIntervalError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadWithinUncertaintyIntervalError_descriptor_;
}

const ReadWithinUncertaintyIntervalError& ReadWithinUncertaintyIntervalError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ReadWithinUncertaintyIntervalError* ReadWithinUncertaintyIntervalError::default_instance_ = NULL;

ReadWithinUncertaintyIntervalError* ReadWithinUncertaintyIntervalError::New(::google::protobuf::Arena* arena) const {
  ReadWithinUncertaintyIntervalError* n = new ReadWithinUncertaintyIntervalError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadWithinUncertaintyIntervalError::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_read_timestamp()) {
      if (read_timestamp_ != NULL) read_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_existing_timestamp()) {
      if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReadWithinUncertaintyIntervalError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Timestamp read_timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_existing_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_existing_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existing_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  return false;
#undef DO_
}

void ReadWithinUncertaintyIntervalError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  // optional .cockroach.roachpb.Timestamp read_timestamp = 1;
  if (has_read_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->read_timestamp_, output);
  }

  // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->existing_timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
}

::google::protobuf::uint8* ReadWithinUncertaintyIntervalError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  // optional .cockroach.roachpb.Timestamp read_timestamp = 1;
  if (has_read_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->read_timestamp_, target);
  }

  // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
  if (has_existing_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->existing_timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ReadWithinUncertaintyIntervalError)
  return target;
}

int ReadWithinUncertaintyIntervalError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cockroach.roachpb.Timestamp read_timestamp = 1;
    if (has_read_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->read_timestamp_);
    }

    // optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
    if (has_existing_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->existing_timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadWithinUncertaintyIntervalError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReadWithinUncertaintyIntervalError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadWithinUncertaintyIntervalError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadWithinUncertaintyIntervalError::MergeFrom(const ReadWithinUncertaintyIntervalError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_timestamp()) {
      mutable_read_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.read_timestamp());
    }
    if (from.has_existing_timestamp()) {
      mutable_existing_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.existing_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReadWithinUncertaintyIntervalError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadWithinUncertaintyIntervalError::CopyFrom(const ReadWithinUncertaintyIntervalError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadWithinUncertaintyIntervalError::IsInitialized() const {

  return true;
}

void ReadWithinUncertaintyIntervalError::Swap(ReadWithinUncertaintyIntervalError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadWithinUncertaintyIntervalError::InternalSwap(ReadWithinUncertaintyIntervalError* other) {
  std::swap(read_timestamp_, other->read_timestamp_);
  std::swap(existing_timestamp_, other->existing_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadWithinUncertaintyIntervalError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadWithinUncertaintyIntervalError_descriptor_;
  metadata.reflection = ReadWithinUncertaintyIntervalError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReadWithinUncertaintyIntervalError

// optional .cockroach.roachpb.Timestamp read_timestamp = 1;
bool ReadWithinUncertaintyIntervalError::has_read_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReadWithinUncertaintyIntervalError::set_has_read_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void ReadWithinUncertaintyIntervalError::clear_has_read_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReadWithinUncertaintyIntervalError::clear_read_timestamp() {
  if (read_timestamp_ != NULL) read_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_read_timestamp();
}
const ::cockroach::roachpb::Timestamp& ReadWithinUncertaintyIntervalError::read_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
  return read_timestamp_ != NULL ? *read_timestamp_ : *default_instance_->read_timestamp_;
}
::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::mutable_read_timestamp() {
  set_has_read_timestamp();
  if (read_timestamp_ == NULL) {
    read_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
  return read_timestamp_;
}
::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::release_read_timestamp() {
  clear_has_read_timestamp();
  ::cockroach::roachpb::Timestamp* temp = read_timestamp_;
  read_timestamp_ = NULL;
  return temp;
}
void ReadWithinUncertaintyIntervalError::set_allocated_read_timestamp(::cockroach::roachpb::Timestamp* read_timestamp) {
  delete read_timestamp_;
  read_timestamp_ = read_timestamp;
  if (read_timestamp) {
    set_has_read_timestamp();
  } else {
    clear_has_read_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.read_timestamp)
}

// optional .cockroach.roachpb.Timestamp existing_timestamp = 2;
bool ReadWithinUncertaintyIntervalError::has_existing_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReadWithinUncertaintyIntervalError::set_has_existing_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void ReadWithinUncertaintyIntervalError::clear_has_existing_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReadWithinUncertaintyIntervalError::clear_existing_timestamp() {
  if (existing_timestamp_ != NULL) existing_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_existing_timestamp();
}
const ::cockroach::roachpb::Timestamp& ReadWithinUncertaintyIntervalError::existing_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_ != NULL ? *existing_timestamp_ : *default_instance_->existing_timestamp_;
}
::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::mutable_existing_timestamp() {
  set_has_existing_timestamp();
  if (existing_timestamp_ == NULL) {
    existing_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
  return existing_timestamp_;
}
::cockroach::roachpb::Timestamp* ReadWithinUncertaintyIntervalError::release_existing_timestamp() {
  clear_has_existing_timestamp();
  ::cockroach::roachpb::Timestamp* temp = existing_timestamp_;
  existing_timestamp_ = NULL;
  return temp;
}
void ReadWithinUncertaintyIntervalError::set_allocated_existing_timestamp(::cockroach::roachpb::Timestamp* existing_timestamp) {
  delete existing_timestamp_;
  existing_timestamp_ = existing_timestamp;
  if (existing_timestamp) {
    set_has_existing_timestamp();
  } else {
    clear_has_existing_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReadWithinUncertaintyIntervalError.existing_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionAbortedError::TransactionAbortedError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionAbortedError)
}

void TransactionAbortedError::InitAsDefaultInstance() {
}

TransactionAbortedError::TransactionAbortedError(const TransactionAbortedError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionAbortedError)
}

void TransactionAbortedError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionAbortedError::~TransactionAbortedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionAbortedError)
  SharedDtor();
}

void TransactionAbortedError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionAbortedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionAbortedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionAbortedError_descriptor_;
}

const TransactionAbortedError& TransactionAbortedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

TransactionAbortedError* TransactionAbortedError::default_instance_ = NULL;

TransactionAbortedError* TransactionAbortedError::New(::google::protobuf::Arena* arena) const {
  TransactionAbortedError* n = new TransactionAbortedError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionAbortedError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionAbortedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionAbortedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionAbortedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionAbortedError)
  return false;
#undef DO_
}

void TransactionAbortedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionAbortedError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionAbortedError)
}

::google::protobuf::uint8* TransactionAbortedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TransactionAbortedError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TransactionAbortedError)
  return target;
}

int TransactionAbortedError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionAbortedError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionAbortedError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionAbortedError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionAbortedError::MergeFrom(const TransactionAbortedError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionAbortedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionAbortedError::CopyFrom(const TransactionAbortedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAbortedError::IsInitialized() const {

  return true;
}

void TransactionAbortedError::Swap(TransactionAbortedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionAbortedError::InternalSwap(TransactionAbortedError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionAbortedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionAbortedError_descriptor_;
  metadata.reflection = TransactionAbortedError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionAbortedError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPushError::kPusheeTxnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPushError::TransactionPushError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionPushError)
}

void TransactionPushError::InitAsDefaultInstance() {
  pushee_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(&::cockroach::roachpb::Transaction::default_instance());
}

TransactionPushError::TransactionPushError(const TransactionPushError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionPushError)
}

void TransactionPushError::SharedCtor() {
  _cached_size_ = 0;
  pushee_txn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionPushError::~TransactionPushError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionPushError)
  SharedDtor();
}

void TransactionPushError::SharedDtor() {
  if (this != default_instance_) {
    delete pushee_txn_;
  }
}

void TransactionPushError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPushError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionPushError_descriptor_;
}

const TransactionPushError& TransactionPushError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

TransactionPushError* TransactionPushError::default_instance_ = NULL;

TransactionPushError* TransactionPushError::New(::google::protobuf::Arena* arena) const {
  TransactionPushError* n = new TransactionPushError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPushError::Clear() {
  if (has_pushee_txn()) {
    if (pushee_txn_ != NULL) pushee_txn_->::cockroach::roachpb::Transaction::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionPushError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionPushError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Transaction pushee_txn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushee_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionPushError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionPushError)
  return false;
#undef DO_
}

void TransactionPushError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionPushError)
  // optional .cockroach.roachpb.Transaction pushee_txn = 1;
  if (has_pushee_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pushee_txn_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionPushError)
}

::google::protobuf::uint8* TransactionPushError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TransactionPushError)
  // optional .cockroach.roachpb.Transaction pushee_txn = 1;
  if (has_pushee_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->pushee_txn_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TransactionPushError)
  return target;
}

int TransactionPushError::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.roachpb.Transaction pushee_txn = 1;
  if (has_pushee_txn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pushee_txn_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPushError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionPushError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPushError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionPushError::MergeFrom(const TransactionPushError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pushee_txn()) {
      mutable_pushee_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.pushee_txn());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionPushError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPushError::CopyFrom(const TransactionPushError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPushError::IsInitialized() const {

  return true;
}

void TransactionPushError::Swap(TransactionPushError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPushError::InternalSwap(TransactionPushError* other) {
  std::swap(pushee_txn_, other->pushee_txn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPushError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionPushError_descriptor_;
  metadata.reflection = TransactionPushError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPushError

// optional .cockroach.roachpb.Transaction pushee_txn = 1;
bool TransactionPushError::has_pushee_txn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPushError::set_has_pushee_txn() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPushError::clear_has_pushee_txn() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPushError::clear_pushee_txn() {
  if (pushee_txn_ != NULL) pushee_txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_pushee_txn();
}
const ::cockroach::roachpb::Transaction& TransactionPushError::pushee_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionPushError.pushee_txn)
  return pushee_txn_ != NULL ? *pushee_txn_ : *default_instance_->pushee_txn_;
}
::cockroach::roachpb::Transaction* TransactionPushError::mutable_pushee_txn() {
  set_has_pushee_txn();
  if (pushee_txn_ == NULL) {
    pushee_txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionPushError.pushee_txn)
  return pushee_txn_;
}
::cockroach::roachpb::Transaction* TransactionPushError::release_pushee_txn() {
  clear_has_pushee_txn();
  ::cockroach::roachpb::Transaction* temp = pushee_txn_;
  pushee_txn_ = NULL;
  return temp;
}
void TransactionPushError::set_allocated_pushee_txn(::cockroach::roachpb::Transaction* pushee_txn) {
  delete pushee_txn_;
  pushee_txn_ = pushee_txn;
  if (pushee_txn) {
    set_has_pushee_txn();
  } else {
    clear_has_pushee_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionPushError.pushee_txn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRetryError::TransactionRetryError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionRetryError)
}

void TransactionRetryError::InitAsDefaultInstance() {
}

TransactionRetryError::TransactionRetryError(const TransactionRetryError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionRetryError)
}

void TransactionRetryError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRetryError::~TransactionRetryError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionRetryError)
  SharedDtor();
}

void TransactionRetryError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionRetryError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRetryError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRetryError_descriptor_;
}

const TransactionRetryError& TransactionRetryError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

TransactionRetryError* TransactionRetryError::default_instance_ = NULL;

TransactionRetryError* TransactionRetryError::New(::google::protobuf::Arena* arena) const {
  TransactionRetryError* n = new TransactionRetryError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRetryError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionRetryError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionRetryError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionRetryError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionRetryError)
  return false;
#undef DO_
}

void TransactionRetryError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionRetryError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionRetryError)
}

::google::protobuf::uint8* TransactionRetryError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TransactionRetryError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TransactionRetryError)
  return target;
}

int TransactionRetryError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRetryError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionRetryError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRetryError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRetryError::MergeFrom(const TransactionRetryError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionRetryError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRetryError::CopyFrom(const TransactionRetryError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRetryError::IsInitialized() const {

  return true;
}

void TransactionRetryError::Swap(TransactionRetryError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRetryError::InternalSwap(TransactionRetryError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRetryError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRetryError_descriptor_;
  metadata.reflection = TransactionRetryError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRetryError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReplayError::TransactionReplayError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionReplayError)
}

void TransactionReplayError::InitAsDefaultInstance() {
}

TransactionReplayError::TransactionReplayError(const TransactionReplayError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionReplayError)
}

void TransactionReplayError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionReplayError::~TransactionReplayError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionReplayError)
  SharedDtor();
}

void TransactionReplayError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionReplayError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReplayError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionReplayError_descriptor_;
}

const TransactionReplayError& TransactionReplayError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

TransactionReplayError* TransactionReplayError::default_instance_ = NULL;

TransactionReplayError* TransactionReplayError::New(::google::protobuf::Arena* arena) const {
  TransactionReplayError* n = new TransactionReplayError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReplayError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionReplayError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionReplayError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionReplayError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionReplayError)
  return false;
#undef DO_
}

void TransactionReplayError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionReplayError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionReplayError)
}

::google::protobuf::uint8* TransactionReplayError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TransactionReplayError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TransactionReplayError)
  return target;
}

int TransactionReplayError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReplayError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionReplayError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReplayError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionReplayError::MergeFrom(const TransactionReplayError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionReplayError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReplayError::CopyFrom(const TransactionReplayError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReplayError::IsInitialized() const {

  return true;
}

void TransactionReplayError::Swap(TransactionReplayError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReplayError::InternalSwap(TransactionReplayError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReplayError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionReplayError_descriptor_;
  metadata.reflection = TransactionReplayError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReplayError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionStatusError::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionStatusError::TransactionStatusError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TransactionStatusError)
}

void TransactionStatusError::InitAsDefaultInstance() {
}

TransactionStatusError::TransactionStatusError(const TransactionStatusError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TransactionStatusError)
}

void TransactionStatusError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionStatusError::~TransactionStatusError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TransactionStatusError)
  SharedDtor();
}

void TransactionStatusError::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionStatusError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionStatusError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatusError_descriptor_;
}

const TransactionStatusError& TransactionStatusError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

TransactionStatusError* TransactionStatusError::default_instance_ = NULL;

TransactionStatusError* TransactionStatusError::New(::google::protobuf::Arena* arena) const {
  TransactionStatusError* n = new TransactionStatusError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionStatusError::Clear() {
  if (has_msg()) {
    msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionStatusError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TransactionStatusError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.TransactionStatusError.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TransactionStatusError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TransactionStatusError)
  return false;
#undef DO_
}

void TransactionStatusError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TransactionStatusError)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.TransactionStatusError.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TransactionStatusError)
}

::google::protobuf::uint8* TransactionStatusError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TransactionStatusError)
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.TransactionStatusError.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TransactionStatusError)
  return target;
}

int TransactionStatusError::ByteSize() const {
  int total_size = 0;

  // optional string msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionStatusError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionStatusError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionStatusError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionStatusError::MergeFrom(const TransactionStatusError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransactionStatusError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionStatusError::CopyFrom(const TransactionStatusError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatusError::IsInitialized() const {

  return true;
}

void TransactionStatusError::Swap(TransactionStatusError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionStatusError::InternalSwap(TransactionStatusError* other) {
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionStatusError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionStatusError_descriptor_;
  metadata.reflection = TransactionStatusError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionStatusError

// optional string msg = 1;
bool TransactionStatusError::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionStatusError::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionStatusError::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionStatusError::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& TransactionStatusError::msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionStatusError::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TransactionStatusError.msg)
}
 void TransactionStatusError::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.TransactionStatusError.msg)
}
 void TransactionStatusError::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.TransactionStatusError.msg)
}
 ::std::string* TransactionStatusError::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TransactionStatusError.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionStatusError::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionStatusError::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TransactionStatusError.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteIntentError::kIntentsFieldNumber;
const int WriteIntentError::kResolvedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteIntentError::WriteIntentError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteIntentError)
}

void WriteIntentError::InitAsDefaultInstance() {
}

WriteIntentError::WriteIntentError(const WriteIntentError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteIntentError)
}

void WriteIntentError::SharedCtor() {
  _cached_size_ = 0;
  resolved_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteIntentError::~WriteIntentError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteIntentError)
  SharedDtor();
}

void WriteIntentError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteIntentError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteIntentError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteIntentError_descriptor_;
}

const WriteIntentError& WriteIntentError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

WriteIntentError* WriteIntentError::default_instance_ = NULL;

WriteIntentError* WriteIntentError::New(::google::protobuf::Arena* arena) const {
  WriteIntentError* n = new WriteIntentError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteIntentError::Clear() {
  resolved_ = false;
  intents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteIntentError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteIntentError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.roachpb.Intent intents = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_intents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_intents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_resolved;
        break;
      }

      // optional bool resolved = 2;
      case 2: {
        if (tag == 16) {
         parse_resolved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resolved_)));
          set_has_resolved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteIntentError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteIntentError)
  return false;
#undef DO_
}

void WriteIntentError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteIntentError)
  // repeated .cockroach.roachpb.Intent intents = 1;
  for (unsigned int i = 0, n = this->intents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->intents(i), output);
  }

  // optional bool resolved = 2;
  if (has_resolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->resolved(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteIntentError)
}

::google::protobuf::uint8* WriteIntentError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.WriteIntentError)
  // repeated .cockroach.roachpb.Intent intents = 1;
  for (unsigned int i = 0, n = this->intents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->intents(i), target);
  }

  // optional bool resolved = 2;
  if (has_resolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->resolved(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.WriteIntentError)
  return target;
}

int WriteIntentError::ByteSize() const {
  int total_size = 0;

  // optional bool resolved = 2;
  if (has_resolved()) {
    total_size += 1 + 1;
  }

  // repeated .cockroach.roachpb.Intent intents = 1;
  total_size += 1 * this->intents_size();
  for (int i = 0; i < this->intents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intents(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteIntentError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteIntentError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteIntentError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteIntentError::MergeFrom(const WriteIntentError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  intents_.MergeFrom(from.intents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_resolved()) {
      set_resolved(from.resolved());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteIntentError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteIntentError::CopyFrom(const WriteIntentError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteIntentError::IsInitialized() const {

  return true;
}

void WriteIntentError::Swap(WriteIntentError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteIntentError::InternalSwap(WriteIntentError* other) {
  intents_.UnsafeArenaSwap(&other->intents_);
  std::swap(resolved_, other->resolved_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteIntentError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteIntentError_descriptor_;
  metadata.reflection = WriteIntentError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteIntentError

// repeated .cockroach.roachpb.Intent intents = 1;
int WriteIntentError::intents_size() const {
  return intents_.size();
}
void WriteIntentError::clear_intents() {
  intents_.Clear();
}
const ::cockroach::roachpb::Intent& WriteIntentError::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Get(index);
}
::cockroach::roachpb::Intent* WriteIntentError::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Mutable(index);
}
::cockroach::roachpb::Intent* WriteIntentError::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.WriteIntentError.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >*
WriteIntentError::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.WriteIntentError.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Intent >&
WriteIntentError::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.WriteIntentError.intents)
  return intents_;
}

// optional bool resolved = 2;
bool WriteIntentError::has_resolved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WriteIntentError::set_has_resolved() {
  _has_bits_[0] |= 0x00000002u;
}
void WriteIntentError::clear_has_resolved() {
  _has_bits_[0] &= ~0x00000002u;
}
void WriteIntentError::clear_resolved() {
  resolved_ = false;
  clear_has_resolved();
}
 bool WriteIntentError::resolved() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteIntentError.resolved)
  return resolved_;
}
 void WriteIntentError::set_resolved(bool value) {
  set_has_resolved();
  resolved_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.WriteIntentError.resolved)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteTooOldError::kTimestampFieldNumber;
const int WriteTooOldError::kActualTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteTooOldError::WriteTooOldError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.WriteTooOldError)
}

void WriteTooOldError::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  actual_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

WriteTooOldError::WriteTooOldError(const WriteTooOldError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.WriteTooOldError)
}

void WriteTooOldError::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = NULL;
  actual_timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteTooOldError::~WriteTooOldError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.WriteTooOldError)
  SharedDtor();
}

void WriteTooOldError::SharedDtor() {
  if (this != default_instance_) {
    delete timestamp_;
    delete actual_timestamp_;
  }
}

void WriteTooOldError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteTooOldError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteTooOldError_descriptor_;
}

const WriteTooOldError& WriteTooOldError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

WriteTooOldError* WriteTooOldError::default_instance_ = NULL;

WriteTooOldError* WriteTooOldError::New(::google::protobuf::Arena* arena) const {
  WriteTooOldError* n = new WriteTooOldError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteTooOldError::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_actual_timestamp()) {
      if (actual_timestamp_ != NULL) actual_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WriteTooOldError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.WriteTooOldError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Timestamp timestamp = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_actual_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp actual_timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_actual_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actual_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.WriteTooOldError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.WriteTooOldError)
  return false;
#undef DO_
}

void WriteTooOldError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.WriteTooOldError)
  // optional .cockroach.roachpb.Timestamp timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->timestamp_, output);
  }

  // optional .cockroach.roachpb.Timestamp actual_timestamp = 2;
  if (has_actual_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->actual_timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.WriteTooOldError)
}

::google::protobuf::uint8* WriteTooOldError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.WriteTooOldError)
  // optional .cockroach.roachpb.Timestamp timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->timestamp_, target);
  }

  // optional .cockroach.roachpb.Timestamp actual_timestamp = 2;
  if (has_actual_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->actual_timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.WriteTooOldError)
  return target;
}

int WriteTooOldError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cockroach.roachpb.Timestamp timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional .cockroach.roachpb.Timestamp actual_timestamp = 2;
    if (has_actual_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->actual_timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteTooOldError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteTooOldError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteTooOldError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteTooOldError::MergeFrom(const WriteTooOldError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_actual_timestamp()) {
      mutable_actual_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.actual_timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WriteTooOldError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteTooOldError::CopyFrom(const WriteTooOldError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteTooOldError::IsInitialized() const {

  return true;
}

void WriteTooOldError::Swap(WriteTooOldError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteTooOldError::InternalSwap(WriteTooOldError* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(actual_timestamp_, other->actual_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteTooOldError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteTooOldError_descriptor_;
  metadata.reflection = WriteTooOldError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteTooOldError

// optional .cockroach.roachpb.Timestamp timestamp = 1;
bool WriteTooOldError::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WriteTooOldError::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void WriteTooOldError::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void WriteTooOldError::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::roachpb::Timestamp& WriteTooOldError::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::cockroach::roachpb::Timestamp* WriteTooOldError::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.timestamp)
  return timestamp_;
}
::cockroach::roachpb::Timestamp* WriteTooOldError::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void WriteTooOldError::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.timestamp)
}

// optional .cockroach.roachpb.Timestamp actual_timestamp = 2;
bool WriteTooOldError::has_actual_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WriteTooOldError::set_has_actual_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void WriteTooOldError::clear_has_actual_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void WriteTooOldError::clear_actual_timestamp() {
  if (actual_timestamp_ != NULL) actual_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_actual_timestamp();
}
const ::cockroach::roachpb::Timestamp& WriteTooOldError::actual_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.WriteTooOldError.actual_timestamp)
  return actual_timestamp_ != NULL ? *actual_timestamp_ : *default_instance_->actual_timestamp_;
}
::cockroach::roachpb::Timestamp* WriteTooOldError::mutable_actual_timestamp() {
  set_has_actual_timestamp();
  if (actual_timestamp_ == NULL) {
    actual_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.WriteTooOldError.actual_timestamp)
  return actual_timestamp_;
}
::cockroach::roachpb::Timestamp* WriteTooOldError::release_actual_timestamp() {
  clear_has_actual_timestamp();
  ::cockroach::roachpb::Timestamp* temp = actual_timestamp_;
  actual_timestamp_ = NULL;
  return temp;
}
void WriteTooOldError::set_allocated_actual_timestamp(::cockroach::roachpb::Timestamp* actual_timestamp) {
  delete actual_timestamp_;
  actual_timestamp_ = actual_timestamp;
  if (actual_timestamp) {
    set_has_actual_timestamp();
  } else {
    clear_has_actual_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.WriteTooOldError.actual_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpRequiresTxnError::OpRequiresTxnError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.OpRequiresTxnError)
}

void OpRequiresTxnError::InitAsDefaultInstance() {
}

OpRequiresTxnError::OpRequiresTxnError(const OpRequiresTxnError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.OpRequiresTxnError)
}

void OpRequiresTxnError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpRequiresTxnError::~OpRequiresTxnError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.OpRequiresTxnError)
  SharedDtor();
}

void OpRequiresTxnError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpRequiresTxnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpRequiresTxnError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpRequiresTxnError_descriptor_;
}

const OpRequiresTxnError& OpRequiresTxnError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

OpRequiresTxnError* OpRequiresTxnError::default_instance_ = NULL;

OpRequiresTxnError* OpRequiresTxnError::New(::google::protobuf::Arena* arena) const {
  OpRequiresTxnError* n = new OpRequiresTxnError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OpRequiresTxnError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OpRequiresTxnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.OpRequiresTxnError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.OpRequiresTxnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.OpRequiresTxnError)
  return false;
#undef DO_
}

void OpRequiresTxnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.OpRequiresTxnError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.OpRequiresTxnError)
}

::google::protobuf::uint8* OpRequiresTxnError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.OpRequiresTxnError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.OpRequiresTxnError)
  return target;
}

int OpRequiresTxnError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpRequiresTxnError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OpRequiresTxnError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OpRequiresTxnError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpRequiresTxnError::MergeFrom(const OpRequiresTxnError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OpRequiresTxnError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpRequiresTxnError::CopyFrom(const OpRequiresTxnError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpRequiresTxnError::IsInitialized() const {

  return true;
}

void OpRequiresTxnError::Swap(OpRequiresTxnError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpRequiresTxnError::InternalSwap(OpRequiresTxnError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OpRequiresTxnError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpRequiresTxnError_descriptor_;
  metadata.reflection = OpRequiresTxnError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OpRequiresTxnError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConditionFailedError::kActualValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConditionFailedError::ConditionFailedError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ConditionFailedError)
}

void ConditionFailedError::InitAsDefaultInstance() {
  actual_value_ = const_cast< ::cockroach::roachpb::Value*>(&::cockroach::roachpb::Value::default_instance());
}

ConditionFailedError::ConditionFailedError(const ConditionFailedError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ConditionFailedError)
}

void ConditionFailedError::SharedCtor() {
  _cached_size_ = 0;
  actual_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionFailedError::~ConditionFailedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ConditionFailedError)
  SharedDtor();
}

void ConditionFailedError::SharedDtor() {
  if (this != default_instance_) {
    delete actual_value_;
  }
}

void ConditionFailedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionFailedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionFailedError_descriptor_;
}

const ConditionFailedError& ConditionFailedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ConditionFailedError* ConditionFailedError::default_instance_ = NULL;

ConditionFailedError* ConditionFailedError::New(::google::protobuf::Arena* arena) const {
  ConditionFailedError* n = new ConditionFailedError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConditionFailedError::Clear() {
  if (has_actual_value()) {
    if (actual_value_ != NULL) actual_value_->::cockroach::roachpb::Value::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConditionFailedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ConditionFailedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Value actual_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actual_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ConditionFailedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ConditionFailedError)
  return false;
#undef DO_
}

void ConditionFailedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ConditionFailedError)
  // optional .cockroach.roachpb.Value actual_value = 1;
  if (has_actual_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->actual_value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ConditionFailedError)
}

::google::protobuf::uint8* ConditionFailedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ConditionFailedError)
  // optional .cockroach.roachpb.Value actual_value = 1;
  if (has_actual_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->actual_value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ConditionFailedError)
  return target;
}

int ConditionFailedError::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.roachpb.Value actual_value = 1;
  if (has_actual_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actual_value_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionFailedError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConditionFailedError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConditionFailedError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionFailedError::MergeFrom(const ConditionFailedError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actual_value()) {
      mutable_actual_value()->::cockroach::roachpb::Value::MergeFrom(from.actual_value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConditionFailedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionFailedError::CopyFrom(const ConditionFailedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionFailedError::IsInitialized() const {

  return true;
}

void ConditionFailedError::Swap(ConditionFailedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConditionFailedError::InternalSwap(ConditionFailedError* other) {
  std::swap(actual_value_, other->actual_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConditionFailedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionFailedError_descriptor_;
  metadata.reflection = ConditionFailedError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConditionFailedError

// optional .cockroach.roachpb.Value actual_value = 1;
bool ConditionFailedError::has_actual_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConditionFailedError::set_has_actual_value() {
  _has_bits_[0] |= 0x00000001u;
}
void ConditionFailedError::clear_has_actual_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConditionFailedError::clear_actual_value() {
  if (actual_value_ != NULL) actual_value_->::cockroach::roachpb::Value::Clear();
  clear_has_actual_value();
}
const ::cockroach::roachpb::Value& ConditionFailedError::actual_value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ConditionFailedError.actual_value)
  return actual_value_ != NULL ? *actual_value_ : *default_instance_->actual_value_;
}
::cockroach::roachpb::Value* ConditionFailedError::mutable_actual_value() {
  set_has_actual_value();
  if (actual_value_ == NULL) {
    actual_value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ConditionFailedError.actual_value)
  return actual_value_;
}
::cockroach::roachpb::Value* ConditionFailedError::release_actual_value() {
  clear_has_actual_value();
  ::cockroach::roachpb::Value* temp = actual_value_;
  actual_value_ = NULL;
  return temp;
}
void ConditionFailedError::set_allocated_actual_value(::cockroach::roachpb::Value* actual_value) {
  delete actual_value_;
  actual_value_ = actual_value;
  if (actual_value) {
    set_has_actual_value();
  } else {
    clear_has_actual_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ConditionFailedError.actual_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeaseRejectedError::kMessageFieldNumber;
const int LeaseRejectedError::kRequestedFieldNumber;
const int LeaseRejectedError::kExistingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseRejectedError::LeaseRejectedError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.LeaseRejectedError)
}

void LeaseRejectedError::InitAsDefaultInstance() {
  requested_ = const_cast< ::cockroach::roachpb::Lease*>(&::cockroach::roachpb::Lease::default_instance());
  existing_ = const_cast< ::cockroach::roachpb::Lease*>(&::cockroach::roachpb::Lease::default_instance());
}

LeaseRejectedError::LeaseRejectedError(const LeaseRejectedError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.LeaseRejectedError)
}

void LeaseRejectedError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requested_ = NULL;
  existing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaseRejectedError::~LeaseRejectedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.LeaseRejectedError)
  SharedDtor();
}

void LeaseRejectedError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete requested_;
    delete existing_;
  }
}

void LeaseRejectedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseRejectedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaseRejectedError_descriptor_;
}

const LeaseRejectedError& LeaseRejectedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

LeaseRejectedError* LeaseRejectedError::default_instance_ = NULL;

LeaseRejectedError* LeaseRejectedError::New(::google::protobuf::Arena* arena) const {
  LeaseRejectedError* n = new LeaseRejectedError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseRejectedError::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_requested()) {
      if (requested_ != NULL) requested_->::cockroach::roachpb::Lease::Clear();
    }
    if (has_existing()) {
      if (existing_ != NULL) existing_->::cockroach::roachpb::Lease::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LeaseRejectedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.LeaseRejectedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.LeaseRejectedError.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requested;
        break;
      }

      // optional .cockroach.roachpb.Lease requested = 2;
      case 2: {
        if (tag == 18) {
         parse_requested:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requested()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_existing;
        break;
      }

      // optional .cockroach.roachpb.Lease existing = 3;
      case 3: {
        if (tag == 26) {
         parse_existing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.LeaseRejectedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.LeaseRejectedError)
  return false;
#undef DO_
}

void LeaseRejectedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.LeaseRejectedError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.LeaseRejectedError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional .cockroach.roachpb.Lease requested = 2;
  if (has_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->requested_, output);
  }

  // optional .cockroach.roachpb.Lease existing = 3;
  if (has_existing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->existing_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.LeaseRejectedError)
}

::google::protobuf::uint8* LeaseRejectedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.LeaseRejectedError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.LeaseRejectedError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional .cockroach.roachpb.Lease requested = 2;
  if (has_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->requested_, target);
  }

  // optional .cockroach.roachpb.Lease existing = 3;
  if (has_existing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->existing_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.LeaseRejectedError)
  return target;
}

int LeaseRejectedError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .cockroach.roachpb.Lease requested = 2;
    if (has_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->requested_);
    }

    // optional .cockroach.roachpb.Lease existing = 3;
    if (has_existing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->existing_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseRejectedError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeaseRejectedError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseRejectedError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaseRejectedError::MergeFrom(const LeaseRejectedError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_requested()) {
      mutable_requested()->::cockroach::roachpb::Lease::MergeFrom(from.requested());
    }
    if (from.has_existing()) {
      mutable_existing()->::cockroach::roachpb::Lease::MergeFrom(from.existing());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LeaseRejectedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseRejectedError::CopyFrom(const LeaseRejectedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseRejectedError::IsInitialized() const {

  return true;
}

void LeaseRejectedError::Swap(LeaseRejectedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseRejectedError::InternalSwap(LeaseRejectedError* other) {
  message_.Swap(&other->message_);
  std::swap(requested_, other->requested_);
  std::swap(existing_, other->existing_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseRejectedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaseRejectedError_descriptor_;
  metadata.reflection = LeaseRejectedError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseRejectedError

// optional string message = 1;
bool LeaseRejectedError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LeaseRejectedError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void LeaseRejectedError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void LeaseRejectedError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& LeaseRejectedError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LeaseRejectedError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.LeaseRejectedError.message)
}
 void LeaseRejectedError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.LeaseRejectedError.message)
}
 void LeaseRejectedError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.LeaseRejectedError.message)
}
 ::std::string* LeaseRejectedError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LeaseRejectedError::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LeaseRejectedError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.message)
}

// optional .cockroach.roachpb.Lease requested = 2;
bool LeaseRejectedError::has_requested() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LeaseRejectedError::set_has_requested() {
  _has_bits_[0] |= 0x00000002u;
}
void LeaseRejectedError::clear_has_requested() {
  _has_bits_[0] &= ~0x00000002u;
}
void LeaseRejectedError::clear_requested() {
  if (requested_ != NULL) requested_->::cockroach::roachpb::Lease::Clear();
  clear_has_requested();
}
const ::cockroach::roachpb::Lease& LeaseRejectedError::requested() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.requested)
  return requested_ != NULL ? *requested_ : *default_instance_->requested_;
}
::cockroach::roachpb::Lease* LeaseRejectedError::mutable_requested() {
  set_has_requested();
  if (requested_ == NULL) {
    requested_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.requested)
  return requested_;
}
::cockroach::roachpb::Lease* LeaseRejectedError::release_requested() {
  clear_has_requested();
  ::cockroach::roachpb::Lease* temp = requested_;
  requested_ = NULL;
  return temp;
}
void LeaseRejectedError::set_allocated_requested(::cockroach::roachpb::Lease* requested) {
  delete requested_;
  requested_ = requested;
  if (requested) {
    set_has_requested();
  } else {
    clear_has_requested();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.requested)
}

// optional .cockroach.roachpb.Lease existing = 3;
bool LeaseRejectedError::has_existing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LeaseRejectedError::set_has_existing() {
  _has_bits_[0] |= 0x00000004u;
}
void LeaseRejectedError::clear_has_existing() {
  _has_bits_[0] &= ~0x00000004u;
}
void LeaseRejectedError::clear_existing() {
  if (existing_ != NULL) existing_->::cockroach::roachpb::Lease::Clear();
  clear_has_existing();
}
const ::cockroach::roachpb::Lease& LeaseRejectedError::existing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.LeaseRejectedError.existing)
  return existing_ != NULL ? *existing_ : *default_instance_->existing_;
}
::cockroach::roachpb::Lease* LeaseRejectedError::mutable_existing() {
  set_has_existing();
  if (existing_ == NULL) {
    existing_ = new ::cockroach::roachpb::Lease;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.LeaseRejectedError.existing)
  return existing_;
}
::cockroach::roachpb::Lease* LeaseRejectedError::release_existing() {
  clear_has_existing();
  ::cockroach::roachpb::Lease* temp = existing_;
  existing_ = NULL;
  return temp;
}
void LeaseRejectedError::set_allocated_existing(::cockroach::roachpb::Lease* existing) {
  delete existing_;
  existing_ = existing;
  if (existing) {
    set_has_existing();
  } else {
    clear_has_existing();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.LeaseRejectedError.existing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendError::kMessageFieldNumber;
const int SendError::kRetryableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendError::SendError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SendError)
}

void SendError::InitAsDefaultInstance() {
}

SendError::SendError(const SendError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SendError)
}

void SendError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retryable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendError::~SendError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SendError)
  SharedDtor();
}

void SendError::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SendError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendError_descriptor_;
}

const SendError& SendError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

SendError* SendError::default_instance_ = NULL;

SendError* SendError::New(::google::protobuf::Arena* arena) const {
  SendError* n = new SendError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendError::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    retryable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SendError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SendError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.SendError.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retryable;
        break;
      }

      // optional bool retryable = 2;
      case 2: {
        if (tag == 16) {
         parse_retryable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retryable_)));
          set_has_retryable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SendError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SendError)
  return false;
#undef DO_
}

void SendError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SendError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.SendError.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->retryable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SendError)
}

::google::protobuf::uint8* SendError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.SendError)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.SendError.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->retryable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.SendError)
  return target;
}

int SendError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool retryable = 2;
    if (has_retryable()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SendError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SendError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendError::MergeFrom(const SendError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_retryable()) {
      set_retryable(from.retryable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SendError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendError::CopyFrom(const SendError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendError::IsInitialized() const {

  return true;
}

void SendError::Swap(SendError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendError::InternalSwap(SendError* other) {
  message_.Swap(&other->message_);
  std::swap(retryable_, other->retryable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendError_descriptor_;
  metadata.reflection = SendError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendError

// optional string message = 1;
bool SendError::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendError::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void SendError::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendError::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& SendError::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SendError.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendError::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SendError.message)
}
 void SendError::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.SendError.message)
}
 void SendError::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.SendError.message)
}
 ::std::string* SendError::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SendError.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SendError::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SendError::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SendError.message)
}

// optional bool retryable = 2;
bool SendError::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendError::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
void SendError::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendError::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
 bool SendError::retryable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SendError.retryable)
  return retryable_;
}
 void SendError::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SendError.retryable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftGroupDeletedError::RaftGroupDeletedError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RaftGroupDeletedError)
}

void RaftGroupDeletedError::InitAsDefaultInstance() {
}

RaftGroupDeletedError::RaftGroupDeletedError(const RaftGroupDeletedError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RaftGroupDeletedError)
}

void RaftGroupDeletedError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftGroupDeletedError::~RaftGroupDeletedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RaftGroupDeletedError)
  SharedDtor();
}

void RaftGroupDeletedError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftGroupDeletedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftGroupDeletedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftGroupDeletedError_descriptor_;
}

const RaftGroupDeletedError& RaftGroupDeletedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

RaftGroupDeletedError* RaftGroupDeletedError::default_instance_ = NULL;

RaftGroupDeletedError* RaftGroupDeletedError::New(::google::protobuf::Arena* arena) const {
  RaftGroupDeletedError* n = new RaftGroupDeletedError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftGroupDeletedError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftGroupDeletedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RaftGroupDeletedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RaftGroupDeletedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RaftGroupDeletedError)
  return false;
#undef DO_
}

void RaftGroupDeletedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RaftGroupDeletedError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RaftGroupDeletedError)
}

::google::protobuf::uint8* RaftGroupDeletedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.RaftGroupDeletedError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.RaftGroupDeletedError)
  return target;
}

int RaftGroupDeletedError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftGroupDeletedError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftGroupDeletedError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftGroupDeletedError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftGroupDeletedError::MergeFrom(const RaftGroupDeletedError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftGroupDeletedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftGroupDeletedError::CopyFrom(const RaftGroupDeletedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftGroupDeletedError::IsInitialized() const {

  return true;
}

void RaftGroupDeletedError::Swap(RaftGroupDeletedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftGroupDeletedError::InternalSwap(RaftGroupDeletedError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftGroupDeletedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftGroupDeletedError_descriptor_;
  metadata.reflection = RaftGroupDeletedError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftGroupDeletedError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaCorruptionError::kErrorMsgFieldNumber;
const int ReplicaCorruptionError::kProcessedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaCorruptionError::ReplicaCorruptionError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaCorruptionError)
}

void ReplicaCorruptionError::InitAsDefaultInstance() {
}

ReplicaCorruptionError::ReplicaCorruptionError(const ReplicaCorruptionError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaCorruptionError)
}

void ReplicaCorruptionError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicaCorruptionError::~ReplicaCorruptionError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaCorruptionError)
  SharedDtor();
}

void ReplicaCorruptionError::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReplicaCorruptionError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicaCorruptionError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicaCorruptionError_descriptor_;
}

const ReplicaCorruptionError& ReplicaCorruptionError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ReplicaCorruptionError* ReplicaCorruptionError::default_instance_ = NULL;

ReplicaCorruptionError* ReplicaCorruptionError::New(::google::protobuf::Arena* arena) const {
  ReplicaCorruptionError* n = new ReplicaCorruptionError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaCorruptionError::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error_msg()) {
      error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    processed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReplicaCorruptionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaCorruptionError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.ReplicaCorruptionError.error_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processed;
        break;
      }

      // optional bool processed = 2;
      case 2: {
        if (tag == 16) {
         parse_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processed_)));
          set_has_processed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaCorruptionError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaCorruptionError)
  return false;
#undef DO_
}

void ReplicaCorruptionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaCorruptionError)
  // optional string error_msg = 1;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ReplicaCorruptionError.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_msg(), output);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->processed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaCorruptionError)
}

::google::protobuf::uint8* ReplicaCorruptionError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ReplicaCorruptionError)
  // optional string error_msg = 1;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ReplicaCorruptionError.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_msg(), target);
  }

  // optional bool processed = 2;
  if (has_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->processed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ReplicaCorruptionError)
  return target;
}

int ReplicaCorruptionError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_msg = 1;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // optional bool processed = 2;
    if (has_processed()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaCorruptionError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReplicaCorruptionError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicaCorruptionError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicaCorruptionError::MergeFrom(const ReplicaCorruptionError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_msg()) {
      set_has_error_msg();
      error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
    }
    if (from.has_processed()) {
      set_processed(from.processed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReplicaCorruptionError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaCorruptionError::CopyFrom(const ReplicaCorruptionError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaCorruptionError::IsInitialized() const {

  return true;
}

void ReplicaCorruptionError::Swap(ReplicaCorruptionError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaCorruptionError::InternalSwap(ReplicaCorruptionError* other) {
  error_msg_.Swap(&other->error_msg_);
  std::swap(processed_, other->processed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicaCorruptionError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicaCorruptionError_descriptor_;
  metadata.reflection = ReplicaCorruptionError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaCorruptionError

// optional string error_msg = 1;
bool ReplicaCorruptionError::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaCorruptionError::set_has_error_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaCorruptionError::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaCorruptionError::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_msg();
}
 const ::std::string& ReplicaCorruptionError::error_msg() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReplicaCorruptionError::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
 void ReplicaCorruptionError::set_error_msg(const char* value) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
 void ReplicaCorruptionError::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}
 ::std::string* ReplicaCorruptionError::mutable_error_msg() {
  set_has_error_msg();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ReplicaCorruptionError.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReplicaCorruptionError::release_error_msg() {
  clear_has_error_msg();
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReplicaCorruptionError::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    set_has_error_msg();
  } else {
    clear_has_error_msg();
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ReplicaCorruptionError.error_msg)
}

// optional bool processed = 2;
bool ReplicaCorruptionError::has_processed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaCorruptionError::set_has_processed() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaCorruptionError::clear_has_processed() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaCorruptionError::clear_processed() {
  processed_ = false;
  clear_has_processed();
}
 bool ReplicaCorruptionError::processed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaCorruptionError.processed)
  return processed_;
}
 void ReplicaCorruptionError::set_processed(bool value) {
  set_has_processed();
  processed_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaCorruptionError.processed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeaseVersionChangedError::LeaseVersionChangedError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.LeaseVersionChangedError)
}

void LeaseVersionChangedError::InitAsDefaultInstance() {
}

LeaseVersionChangedError::LeaseVersionChangedError(const LeaseVersionChangedError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.LeaseVersionChangedError)
}

void LeaseVersionChangedError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaseVersionChangedError::~LeaseVersionChangedError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.LeaseVersionChangedError)
  SharedDtor();
}

void LeaseVersionChangedError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaseVersionChangedError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaseVersionChangedError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaseVersionChangedError_descriptor_;
}

const LeaseVersionChangedError& LeaseVersionChangedError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

LeaseVersionChangedError* LeaseVersionChangedError::default_instance_ = NULL;

LeaseVersionChangedError* LeaseVersionChangedError::New(::google::protobuf::Arena* arena) const {
  LeaseVersionChangedError* n = new LeaseVersionChangedError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeaseVersionChangedError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LeaseVersionChangedError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.LeaseVersionChangedError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.LeaseVersionChangedError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.LeaseVersionChangedError)
  return false;
#undef DO_
}

void LeaseVersionChangedError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.LeaseVersionChangedError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.LeaseVersionChangedError)
}

::google::protobuf::uint8* LeaseVersionChangedError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.LeaseVersionChangedError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.LeaseVersionChangedError)
  return target;
}

int LeaseVersionChangedError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaseVersionChangedError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LeaseVersionChangedError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LeaseVersionChangedError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaseVersionChangedError::MergeFrom(const LeaseVersionChangedError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LeaseVersionChangedError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseVersionChangedError::CopyFrom(const LeaseVersionChangedError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseVersionChangedError::IsInitialized() const {

  return true;
}

void LeaseVersionChangedError::Swap(LeaseVersionChangedError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeaseVersionChangedError::InternalSwap(LeaseVersionChangedError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeaseVersionChangedError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaseVersionChangedError_descriptor_;
  metadata.reflection = LeaseVersionChangedError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeaseVersionChangedError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DidntUpdateDescriptorError::DidntUpdateDescriptorError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.DidntUpdateDescriptorError)
}

void DidntUpdateDescriptorError::InitAsDefaultInstance() {
}

DidntUpdateDescriptorError::DidntUpdateDescriptorError(const DidntUpdateDescriptorError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.DidntUpdateDescriptorError)
}

void DidntUpdateDescriptorError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DidntUpdateDescriptorError::~DidntUpdateDescriptorError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.DidntUpdateDescriptorError)
  SharedDtor();
}

void DidntUpdateDescriptorError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DidntUpdateDescriptorError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DidntUpdateDescriptorError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DidntUpdateDescriptorError_descriptor_;
}

const DidntUpdateDescriptorError& DidntUpdateDescriptorError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

DidntUpdateDescriptorError* DidntUpdateDescriptorError::default_instance_ = NULL;

DidntUpdateDescriptorError* DidntUpdateDescriptorError::New(::google::protobuf::Arena* arena) const {
  DidntUpdateDescriptorError* n = new DidntUpdateDescriptorError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DidntUpdateDescriptorError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DidntUpdateDescriptorError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.DidntUpdateDescriptorError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.DidntUpdateDescriptorError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.DidntUpdateDescriptorError)
  return false;
#undef DO_
}

void DidntUpdateDescriptorError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.DidntUpdateDescriptorError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.DidntUpdateDescriptorError)
}

::google::protobuf::uint8* DidntUpdateDescriptorError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.DidntUpdateDescriptorError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.DidntUpdateDescriptorError)
  return target;
}

int DidntUpdateDescriptorError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DidntUpdateDescriptorError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DidntUpdateDescriptorError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DidntUpdateDescriptorError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DidntUpdateDescriptorError::MergeFrom(const DidntUpdateDescriptorError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DidntUpdateDescriptorError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DidntUpdateDescriptorError::CopyFrom(const DidntUpdateDescriptorError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DidntUpdateDescriptorError::IsInitialized() const {

  return true;
}

void DidntUpdateDescriptorError::Swap(DidntUpdateDescriptorError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DidntUpdateDescriptorError::InternalSwap(DidntUpdateDescriptorError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DidntUpdateDescriptorError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DidntUpdateDescriptorError_descriptor_;
  metadata.reflection = DidntUpdateDescriptorError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DidntUpdateDescriptorError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExistingSchemaChangeLeaseError::ExistingSchemaChangeLeaseError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ExistingSchemaChangeLeaseError)
}

void ExistingSchemaChangeLeaseError::InitAsDefaultInstance() {
}

ExistingSchemaChangeLeaseError::ExistingSchemaChangeLeaseError(const ExistingSchemaChangeLeaseError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ExistingSchemaChangeLeaseError)
}

void ExistingSchemaChangeLeaseError::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExistingSchemaChangeLeaseError::~ExistingSchemaChangeLeaseError() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  SharedDtor();
}

void ExistingSchemaChangeLeaseError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExistingSchemaChangeLeaseError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExistingSchemaChangeLeaseError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExistingSchemaChangeLeaseError_descriptor_;
}

const ExistingSchemaChangeLeaseError& ExistingSchemaChangeLeaseError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ExistingSchemaChangeLeaseError* ExistingSchemaChangeLeaseError::default_instance_ = NULL;

ExistingSchemaChangeLeaseError* ExistingSchemaChangeLeaseError::New(::google::protobuf::Arena* arena) const {
  ExistingSchemaChangeLeaseError* n = new ExistingSchemaChangeLeaseError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExistingSchemaChangeLeaseError::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExistingSchemaChangeLeaseError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  return false;
#undef DO_
}

void ExistingSchemaChangeLeaseError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ExistingSchemaChangeLeaseError)
}

::google::protobuf::uint8* ExistingSchemaChangeLeaseError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ExistingSchemaChangeLeaseError)
  return target;
}

int ExistingSchemaChangeLeaseError::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExistingSchemaChangeLeaseError::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExistingSchemaChangeLeaseError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExistingSchemaChangeLeaseError>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExistingSchemaChangeLeaseError::MergeFrom(const ExistingSchemaChangeLeaseError& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExistingSchemaChangeLeaseError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExistingSchemaChangeLeaseError::CopyFrom(const ExistingSchemaChangeLeaseError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExistingSchemaChangeLeaseError::IsInitialized() const {

  return true;
}

void ExistingSchemaChangeLeaseError::Swap(ExistingSchemaChangeLeaseError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExistingSchemaChangeLeaseError::InternalSwap(ExistingSchemaChangeLeaseError* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExistingSchemaChangeLeaseError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExistingSchemaChangeLeaseError_descriptor_;
  metadata.reflection = ExistingSchemaChangeLeaseError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExistingSchemaChangeLeaseError

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorWithPGCode::kErrorCodeFieldNumber;
const int ErrorWithPGCode::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorWithPGCode::ErrorWithPGCode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ErrorWithPGCode)
}

void ErrorWithPGCode::InitAsDefaultInstance() {
}

ErrorWithPGCode::ErrorWithPGCode(const ErrorWithPGCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ErrorWithPGCode)
}

void ErrorWithPGCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorWithPGCode::~ErrorWithPGCode() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ErrorWithPGCode)
  SharedDtor();
}

void ErrorWithPGCode::SharedDtor() {
  error_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ErrorWithPGCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorWithPGCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorWithPGCode_descriptor_;
}

const ErrorWithPGCode& ErrorWithPGCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ErrorWithPGCode* ErrorWithPGCode::default_instance_ = NULL;

ErrorWithPGCode* ErrorWithPGCode::New(::google::protobuf::Arena* arena) const {
  ErrorWithPGCode* n = new ErrorWithPGCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorWithPGCode::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error_code()) {
      error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrorWithPGCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ErrorWithPGCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_code().data(), this->error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.ErrorWithPGCode.error_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.ErrorWithPGCode.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ErrorWithPGCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ErrorWithPGCode)
  return false;
#undef DO_
}

void ErrorWithPGCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ErrorWithPGCode)
  // optional string error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_code().data(), this->error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ErrorWithPGCode.error_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_code(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ErrorWithPGCode.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ErrorWithPGCode)
}

::google::protobuf::uint8* ErrorWithPGCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ErrorWithPGCode)
  // optional string error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_code().data(), this->error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ErrorWithPGCode.error_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_code(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.ErrorWithPGCode.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ErrorWithPGCode)
  return target;
}

int ErrorWithPGCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_code());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorWithPGCode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ErrorWithPGCode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorWithPGCode>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorWithPGCode::MergeFrom(const ErrorWithPGCode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_has_error_code();
      error_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_code_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrorWithPGCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorWithPGCode::CopyFrom(const ErrorWithPGCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorWithPGCode::IsInitialized() const {

  return true;
}

void ErrorWithPGCode::Swap(ErrorWithPGCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorWithPGCode::InternalSwap(ErrorWithPGCode* other) {
  error_code_.Swap(&other->error_code_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorWithPGCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorWithPGCode_descriptor_;
  metadata.reflection = ErrorWithPGCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorWithPGCode

// optional string error_code = 1;
bool ErrorWithPGCode::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorWithPGCode::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorWithPGCode::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorWithPGCode::clear_error_code() {
  error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_code();
}
 const ::std::string& ErrorWithPGCode::error_code() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorWithPGCode.error_code)
  return error_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorWithPGCode::set_error_code(const ::std::string& value) {
  set_has_error_code();
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ErrorWithPGCode.error_code)
}
 void ErrorWithPGCode::set_error_code(const char* value) {
  set_has_error_code();
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ErrorWithPGCode.error_code)
}
 void ErrorWithPGCode::set_error_code(const char* value, size_t size) {
  set_has_error_code();
  error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ErrorWithPGCode.error_code)
}
 ::std::string* ErrorWithPGCode::mutable_error_code() {
  set_has_error_code();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorWithPGCode.error_code)
  return error_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrorWithPGCode::release_error_code() {
  clear_has_error_code();
  return error_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorWithPGCode::set_allocated_error_code(::std::string* error_code) {
  if (error_code != NULL) {
    set_has_error_code();
  } else {
    clear_has_error_code();
  }
  error_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_code);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorWithPGCode.error_code)
}

// optional string message = 2;
bool ErrorWithPGCode::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ErrorWithPGCode::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ErrorWithPGCode::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ErrorWithPGCode::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& ErrorWithPGCode::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorWithPGCode.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorWithPGCode::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ErrorWithPGCode.message)
}
 void ErrorWithPGCode::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.ErrorWithPGCode.message)
}
 void ErrorWithPGCode::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.ErrorWithPGCode.message)
}
 ::std::string* ErrorWithPGCode::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorWithPGCode.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ErrorWithPGCode::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ErrorWithPGCode::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorWithPGCode.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorDetail::kNotLeaderFieldNumber;
const int ErrorDetail::kRangeNotFoundFieldNumber;
const int ErrorDetail::kRangeKeyMismatchFieldNumber;
const int ErrorDetail::kReadWithinUncertaintyIntervalFieldNumber;
const int ErrorDetail::kTransactionAbortedFieldNumber;
const int ErrorDetail::kTransactionPushFieldNumber;
const int ErrorDetail::kTransactionRetryFieldNumber;
const int ErrorDetail::kTransactionReplayFieldNumber;
const int ErrorDetail::kTransactionStatusFieldNumber;
const int ErrorDetail::kWriteIntentFieldNumber;
const int ErrorDetail::kWriteTooOldFieldNumber;
const int ErrorDetail::kOpRequiresTxnFieldNumber;
const int ErrorDetail::kConditionFailedFieldNumber;
const int ErrorDetail::kLeaseRejectedFieldNumber;
const int ErrorDetail::kNodeUnavailableFieldNumber;
const int ErrorDetail::kSendFieldNumber;
const int ErrorDetail::kRaftGroupDeletedFieldNumber;
const int ErrorDetail::kReplicaCorruptionFieldNumber;
const int ErrorDetail::kLeaseVersionChangedFieldNumber;
const int ErrorDetail::kDidntUpdateDescriptorFieldNumber;
const int ErrorDetail::kExistingSchemeChangeLeaseFieldNumber;
const int ErrorDetail::kErrorWithPgCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorDetail::ErrorDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ErrorDetail)
}

void ErrorDetail::InitAsDefaultInstance() {
  not_leader_ = const_cast< ::cockroach::roachpb::NotLeaderError*>(&::cockroach::roachpb::NotLeaderError::default_instance());
  range_not_found_ = const_cast< ::cockroach::roachpb::RangeNotFoundError*>(&::cockroach::roachpb::RangeNotFoundError::default_instance());
  range_key_mismatch_ = const_cast< ::cockroach::roachpb::RangeKeyMismatchError*>(&::cockroach::roachpb::RangeKeyMismatchError::default_instance());
  read_within_uncertainty_interval_ = const_cast< ::cockroach::roachpb::ReadWithinUncertaintyIntervalError*>(&::cockroach::roachpb::ReadWithinUncertaintyIntervalError::default_instance());
  transaction_aborted_ = const_cast< ::cockroach::roachpb::TransactionAbortedError*>(&::cockroach::roachpb::TransactionAbortedError::default_instance());
  transaction_push_ = const_cast< ::cockroach::roachpb::TransactionPushError*>(&::cockroach::roachpb::TransactionPushError::default_instance());
  transaction_retry_ = const_cast< ::cockroach::roachpb::TransactionRetryError*>(&::cockroach::roachpb::TransactionRetryError::default_instance());
  transaction_replay_ = const_cast< ::cockroach::roachpb::TransactionReplayError*>(&::cockroach::roachpb::TransactionReplayError::default_instance());
  transaction_status_ = const_cast< ::cockroach::roachpb::TransactionStatusError*>(&::cockroach::roachpb::TransactionStatusError::default_instance());
  write_intent_ = const_cast< ::cockroach::roachpb::WriteIntentError*>(&::cockroach::roachpb::WriteIntentError::default_instance());
  write_too_old_ = const_cast< ::cockroach::roachpb::WriteTooOldError*>(&::cockroach::roachpb::WriteTooOldError::default_instance());
  op_requires_txn_ = const_cast< ::cockroach::roachpb::OpRequiresTxnError*>(&::cockroach::roachpb::OpRequiresTxnError::default_instance());
  condition_failed_ = const_cast< ::cockroach::roachpb::ConditionFailedError*>(&::cockroach::roachpb::ConditionFailedError::default_instance());
  lease_rejected_ = const_cast< ::cockroach::roachpb::LeaseRejectedError*>(&::cockroach::roachpb::LeaseRejectedError::default_instance());
  node_unavailable_ = const_cast< ::cockroach::roachpb::NodeUnavailableError*>(&::cockroach::roachpb::NodeUnavailableError::default_instance());
  send_ = const_cast< ::cockroach::roachpb::SendError*>(&::cockroach::roachpb::SendError::default_instance());
  raft_group_deleted_ = const_cast< ::cockroach::roachpb::RaftGroupDeletedError*>(&::cockroach::roachpb::RaftGroupDeletedError::default_instance());
  replica_corruption_ = const_cast< ::cockroach::roachpb::ReplicaCorruptionError*>(&::cockroach::roachpb::ReplicaCorruptionError::default_instance());
  lease_version_changed_ = const_cast< ::cockroach::roachpb::LeaseVersionChangedError*>(&::cockroach::roachpb::LeaseVersionChangedError::default_instance());
  didnt_update_descriptor_ = const_cast< ::cockroach::roachpb::DidntUpdateDescriptorError*>(&::cockroach::roachpb::DidntUpdateDescriptorError::default_instance());
  existing_scheme_change_lease_ = const_cast< ::cockroach::roachpb::ExistingSchemaChangeLeaseError*>(&::cockroach::roachpb::ExistingSchemaChangeLeaseError::default_instance());
  error_with_pg_code_ = const_cast< ::cockroach::roachpb::ErrorWithPGCode*>(&::cockroach::roachpb::ErrorWithPGCode::default_instance());
}

ErrorDetail::ErrorDetail(const ErrorDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ErrorDetail)
}

void ErrorDetail::SharedCtor() {
  _cached_size_ = 0;
  not_leader_ = NULL;
  range_not_found_ = NULL;
  range_key_mismatch_ = NULL;
  read_within_uncertainty_interval_ = NULL;
  transaction_aborted_ = NULL;
  transaction_push_ = NULL;
  transaction_retry_ = NULL;
  transaction_replay_ = NULL;
  transaction_status_ = NULL;
  write_intent_ = NULL;
  write_too_old_ = NULL;
  op_requires_txn_ = NULL;
  condition_failed_ = NULL;
  lease_rejected_ = NULL;
  node_unavailable_ = NULL;
  send_ = NULL;
  raft_group_deleted_ = NULL;
  replica_corruption_ = NULL;
  lease_version_changed_ = NULL;
  didnt_update_descriptor_ = NULL;
  existing_scheme_change_lease_ = NULL;
  error_with_pg_code_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorDetail::~ErrorDetail() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ErrorDetail)
  SharedDtor();
}

void ErrorDetail::SharedDtor() {
  if (this != default_instance_) {
    delete not_leader_;
    delete range_not_found_;
    delete range_key_mismatch_;
    delete read_within_uncertainty_interval_;
    delete transaction_aborted_;
    delete transaction_push_;
    delete transaction_retry_;
    delete transaction_replay_;
    delete transaction_status_;
    delete write_intent_;
    delete write_too_old_;
    delete op_requires_txn_;
    delete condition_failed_;
    delete lease_rejected_;
    delete node_unavailable_;
    delete send_;
    delete raft_group_deleted_;
    delete replica_corruption_;
    delete lease_version_changed_;
    delete didnt_update_descriptor_;
    delete existing_scheme_change_lease_;
    delete error_with_pg_code_;
  }
}

void ErrorDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorDetail_descriptor_;
}

const ErrorDetail& ErrorDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ErrorDetail* ErrorDetail::default_instance_ = NULL;

ErrorDetail* ErrorDetail::New(::google::protobuf::Arena* arena) const {
  ErrorDetail* n = new ErrorDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorDetail::Clear() {
  if (_has_bits_[0 / 32] & 255u) {
    if (has_not_leader()) {
      if (not_leader_ != NULL) not_leader_->::cockroach::roachpb::NotLeaderError::Clear();
    }
    if (has_range_not_found()) {
      if (range_not_found_ != NULL) range_not_found_->::cockroach::roachpb::RangeNotFoundError::Clear();
    }
    if (has_range_key_mismatch()) {
      if (range_key_mismatch_ != NULL) range_key_mismatch_->::cockroach::roachpb::RangeKeyMismatchError::Clear();
    }
    if (has_read_within_uncertainty_interval()) {
      if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::Clear();
    }
    if (has_transaction_aborted()) {
      if (transaction_aborted_ != NULL) transaction_aborted_->::cockroach::roachpb::TransactionAbortedError::Clear();
    }
    if (has_transaction_push()) {
      if (transaction_push_ != NULL) transaction_push_->::cockroach::roachpb::TransactionPushError::Clear();
    }
    if (has_transaction_retry()) {
      if (transaction_retry_ != NULL) transaction_retry_->::cockroach::roachpb::TransactionRetryError::Clear();
    }
    if (has_transaction_replay()) {
      if (transaction_replay_ != NULL) transaction_replay_->::cockroach::roachpb::TransactionReplayError::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_transaction_status()) {
      if (transaction_status_ != NULL) transaction_status_->::cockroach::roachpb::TransactionStatusError::Clear();
    }
    if (has_write_intent()) {
      if (write_intent_ != NULL) write_intent_->::cockroach::roachpb::WriteIntentError::Clear();
    }
    if (has_write_too_old()) {
      if (write_too_old_ != NULL) write_too_old_->::cockroach::roachpb::WriteTooOldError::Clear();
    }
    if (has_op_requires_txn()) {
      if (op_requires_txn_ != NULL) op_requires_txn_->::cockroach::roachpb::OpRequiresTxnError::Clear();
    }
    if (has_condition_failed()) {
      if (condition_failed_ != NULL) condition_failed_->::cockroach::roachpb::ConditionFailedError::Clear();
    }
    if (has_lease_rejected()) {
      if (lease_rejected_ != NULL) lease_rejected_->::cockroach::roachpb::LeaseRejectedError::Clear();
    }
    if (has_node_unavailable()) {
      if (node_unavailable_ != NULL) node_unavailable_->::cockroach::roachpb::NodeUnavailableError::Clear();
    }
    if (has_send()) {
      if (send_ != NULL) send_->::cockroach::roachpb::SendError::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    if (has_raft_group_deleted()) {
      if (raft_group_deleted_ != NULL) raft_group_deleted_->::cockroach::roachpb::RaftGroupDeletedError::Clear();
    }
    if (has_replica_corruption()) {
      if (replica_corruption_ != NULL) replica_corruption_->::cockroach::roachpb::ReplicaCorruptionError::Clear();
    }
    if (has_lease_version_changed()) {
      if (lease_version_changed_ != NULL) lease_version_changed_->::cockroach::roachpb::LeaseVersionChangedError::Clear();
    }
    if (has_didnt_update_descriptor()) {
      if (didnt_update_descriptor_ != NULL) didnt_update_descriptor_->::cockroach::roachpb::DidntUpdateDescriptorError::Clear();
    }
    if (has_existing_scheme_change_lease()) {
      if (existing_scheme_change_lease_ != NULL) existing_scheme_change_lease_->::cockroach::roachpb::ExistingSchemaChangeLeaseError::Clear();
    }
    if (has_error_with_pg_code()) {
      if (error_with_pg_code_ != NULL) error_with_pg_code_->::cockroach::roachpb::ErrorWithPGCode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrorDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ErrorDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.NotLeaderError not_leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_not_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_range_not_found;
        break;
      }

      // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
      case 2: {
        if (tag == 18) {
         parse_range_not_found:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_not_found()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_range_key_mismatch;
        break;
      }

      // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
      case 3: {
        if (tag == 26) {
         parse_range_key_mismatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_key_mismatch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_read_within_uncertainty_interval;
        break;
      }

      // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
      case 4: {
        if (tag == 34) {
         parse_read_within_uncertainty_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_within_uncertainty_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transaction_aborted;
        break;
      }

      // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
      case 5: {
        if (tag == 42) {
         parse_transaction_aborted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_aborted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_transaction_push;
        break;
      }

      // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
      case 6: {
        if (tag == 50) {
         parse_transaction_push:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_push()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_transaction_retry;
        break;
      }

      // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
      case 7: {
        if (tag == 58) {
         parse_transaction_retry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_retry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_transaction_status;
        break;
      }

      // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
      case 8: {
        if (tag == 66) {
         parse_transaction_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_write_intent;
        break;
      }

      // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
      case 9: {
        if (tag == 74) {
         parse_write_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_intent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_write_too_old;
        break;
      }

      // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
      case 10: {
        if (tag == 82) {
         parse_write_too_old:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write_too_old()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_op_requires_txn;
        break;
      }

      // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
      case 11: {
        if (tag == 90) {
         parse_op_requires_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_requires_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_condition_failed;
        break;
      }

      // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
      case 12: {
        if (tag == 98) {
         parse_condition_failed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition_failed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_lease_rejected;
        break;
      }

      // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
      case 13: {
        if (tag == 106) {
         parse_lease_rejected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lease_rejected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_node_unavailable;
        break;
      }

      // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
      case 14: {
        if (tag == 114) {
         parse_node_unavailable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_unavailable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_send;
        break;
      }

      // optional .cockroach.roachpb.SendError send = 15;
      case 15: {
        if (tag == 122) {
         parse_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_raft_group_deleted;
        break;
      }

      // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
      case 16: {
        if (tag == 130) {
         parse_raft_group_deleted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raft_group_deleted()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_replica_corruption;
        break;
      }

      // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
      case 17: {
        if (tag == 138) {
         parse_replica_corruption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica_corruption()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lease_version_changed;
        break;
      }

      // optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
      case 18: {
        if (tag == 146) {
         parse_lease_version_changed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lease_version_changed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_didnt_update_descriptor;
        break;
      }

      // optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
      case 19: {
        if (tag == 154) {
         parse_didnt_update_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_didnt_update_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_existing_scheme_change_lease;
        break;
      }

      // optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 20;
      case 20: {
        if (tag == 162) {
         parse_existing_scheme_change_lease:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_existing_scheme_change_lease()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_error_with_pg_code;
        break;
      }

      // optional .cockroach.roachpb.ErrorWithPGCode error_with_pg_code = 21;
      case 21: {
        if (tag == 170) {
         parse_error_with_pg_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error_with_pg_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_transaction_replay;
        break;
      }

      // optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
      case 22: {
        if (tag == 178) {
         parse_transaction_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ErrorDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ErrorDetail)
  return false;
#undef DO_
}

void ErrorDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ErrorDetail)
  // optional .cockroach.roachpb.NotLeaderError not_leader = 1;
  if (has_not_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->not_leader_, output);
  }

  // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
  if (has_range_not_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->range_not_found_, output);
  }

  // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
  if (has_range_key_mismatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->range_key_mismatch_, output);
  }

  // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  if (has_read_within_uncertainty_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->read_within_uncertainty_interval_, output);
  }

  // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
  if (has_transaction_aborted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transaction_aborted_, output);
  }

  // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
  if (has_transaction_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->transaction_push_, output);
  }

  // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
  if (has_transaction_retry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->transaction_retry_, output);
  }

  // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
  if (has_transaction_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->transaction_status_, output);
  }

  // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
  if (has_write_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->write_intent_, output);
  }

  // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
  if (has_write_too_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->write_too_old_, output);
  }

  // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
  if (has_op_requires_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->op_requires_txn_, output);
  }

  // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
  if (has_condition_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->condition_failed_, output);
  }

  // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
  if (has_lease_rejected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->lease_rejected_, output);
  }

  // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
  if (has_node_unavailable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->node_unavailable_, output);
  }

  // optional .cockroach.roachpb.SendError send = 15;
  if (has_send()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->send_, output);
  }

  // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
  if (has_raft_group_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->raft_group_deleted_, output);
  }

  // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
  if (has_replica_corruption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->replica_corruption_, output);
  }

  // optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
  if (has_lease_version_changed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->lease_version_changed_, output);
  }

  // optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
  if (has_didnt_update_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->didnt_update_descriptor_, output);
  }

  // optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 20;
  if (has_existing_scheme_change_lease()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->existing_scheme_change_lease_, output);
  }

  // optional .cockroach.roachpb.ErrorWithPGCode error_with_pg_code = 21;
  if (has_error_with_pg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->error_with_pg_code_, output);
  }

  // optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
  if (has_transaction_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->transaction_replay_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ErrorDetail)
}

::google::protobuf::uint8* ErrorDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ErrorDetail)
  // optional .cockroach.roachpb.NotLeaderError not_leader = 1;
  if (has_not_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->not_leader_, target);
  }

  // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
  if (has_range_not_found()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->range_not_found_, target);
  }

  // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
  if (has_range_key_mismatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->range_key_mismatch_, target);
  }

  // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
  if (has_read_within_uncertainty_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->read_within_uncertainty_interval_, target);
  }

  // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
  if (has_transaction_aborted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->transaction_aborted_, target);
  }

  // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
  if (has_transaction_push()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->transaction_push_, target);
  }

  // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
  if (has_transaction_retry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->transaction_retry_, target);
  }

  // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
  if (has_transaction_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->transaction_status_, target);
  }

  // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
  if (has_write_intent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, *this->write_intent_, target);
  }

  // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
  if (has_write_too_old()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->write_too_old_, target);
  }

  // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
  if (has_op_requires_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->op_requires_txn_, target);
  }

  // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
  if (has_condition_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, *this->condition_failed_, target);
  }

  // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
  if (has_lease_rejected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->lease_rejected_, target);
  }

  // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
  if (has_node_unavailable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, *this->node_unavailable_, target);
  }

  // optional .cockroach.roachpb.SendError send = 15;
  if (has_send()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, *this->send_, target);
  }

  // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
  if (has_raft_group_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, *this->raft_group_deleted_, target);
  }

  // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
  if (has_replica_corruption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, *this->replica_corruption_, target);
  }

  // optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
  if (has_lease_version_changed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, *this->lease_version_changed_, target);
  }

  // optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
  if (has_didnt_update_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, *this->didnt_update_descriptor_, target);
  }

  // optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 20;
  if (has_existing_scheme_change_lease()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, *this->existing_scheme_change_lease_, target);
  }

  // optional .cockroach.roachpb.ErrorWithPGCode error_with_pg_code = 21;
  if (has_error_with_pg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, *this->error_with_pg_code_, target);
  }

  // optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
  if (has_transaction_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, *this->transaction_replay_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ErrorDetail)
  return target;
}

int ErrorDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .cockroach.roachpb.NotLeaderError not_leader = 1;
    if (has_not_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->not_leader_);
    }

    // optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
    if (has_range_not_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->range_not_found_);
    }

    // optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
    if (has_range_key_mismatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->range_key_mismatch_);
    }

    // optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
    if (has_read_within_uncertainty_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->read_within_uncertainty_interval_);
    }

    // optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
    if (has_transaction_aborted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_aborted_);
    }

    // optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
    if (has_transaction_push()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_push_);
    }

    // optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
    if (has_transaction_retry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_retry_);
    }

    // optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
    if (has_transaction_replay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_replay_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
    if (has_transaction_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_status_);
    }

    // optional .cockroach.roachpb.WriteIntentError write_intent = 9;
    if (has_write_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->write_intent_);
    }

    // optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
    if (has_write_too_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->write_too_old_);
    }

    // optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
    if (has_op_requires_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->op_requires_txn_);
    }

    // optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
    if (has_condition_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->condition_failed_);
    }

    // optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
    if (has_lease_rejected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lease_rejected_);
    }

    // optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
    if (has_node_unavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_unavailable_);
    }

    // optional .cockroach.roachpb.SendError send = 15;
    if (has_send()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->send_);
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
    if (has_raft_group_deleted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->raft_group_deleted_);
    }

    // optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
    if (has_replica_corruption()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_corruption_);
    }

    // optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
    if (has_lease_version_changed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lease_version_changed_);
    }

    // optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
    if (has_didnt_update_descriptor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->didnt_update_descriptor_);
    }

    // optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 20;
    if (has_existing_scheme_change_lease()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->existing_scheme_change_lease_);
    }

    // optional .cockroach.roachpb.ErrorWithPGCode error_with_pg_code = 21;
    if (has_error_with_pg_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->error_with_pg_code_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorDetail::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ErrorDetail* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorDetail>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorDetail::MergeFrom(const ErrorDetail& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_not_leader()) {
      mutable_not_leader()->::cockroach::roachpb::NotLeaderError::MergeFrom(from.not_leader());
    }
    if (from.has_range_not_found()) {
      mutable_range_not_found()->::cockroach::roachpb::RangeNotFoundError::MergeFrom(from.range_not_found());
    }
    if (from.has_range_key_mismatch()) {
      mutable_range_key_mismatch()->::cockroach::roachpb::RangeKeyMismatchError::MergeFrom(from.range_key_mismatch());
    }
    if (from.has_read_within_uncertainty_interval()) {
      mutable_read_within_uncertainty_interval()->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::MergeFrom(from.read_within_uncertainty_interval());
    }
    if (from.has_transaction_aborted()) {
      mutable_transaction_aborted()->::cockroach::roachpb::TransactionAbortedError::MergeFrom(from.transaction_aborted());
    }
    if (from.has_transaction_push()) {
      mutable_transaction_push()->::cockroach::roachpb::TransactionPushError::MergeFrom(from.transaction_push());
    }
    if (from.has_transaction_retry()) {
      mutable_transaction_retry()->::cockroach::roachpb::TransactionRetryError::MergeFrom(from.transaction_retry());
    }
    if (from.has_transaction_replay()) {
      mutable_transaction_replay()->::cockroach::roachpb::TransactionReplayError::MergeFrom(from.transaction_replay());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transaction_status()) {
      mutable_transaction_status()->::cockroach::roachpb::TransactionStatusError::MergeFrom(from.transaction_status());
    }
    if (from.has_write_intent()) {
      mutable_write_intent()->::cockroach::roachpb::WriteIntentError::MergeFrom(from.write_intent());
    }
    if (from.has_write_too_old()) {
      mutable_write_too_old()->::cockroach::roachpb::WriteTooOldError::MergeFrom(from.write_too_old());
    }
    if (from.has_op_requires_txn()) {
      mutable_op_requires_txn()->::cockroach::roachpb::OpRequiresTxnError::MergeFrom(from.op_requires_txn());
    }
    if (from.has_condition_failed()) {
      mutable_condition_failed()->::cockroach::roachpb::ConditionFailedError::MergeFrom(from.condition_failed());
    }
    if (from.has_lease_rejected()) {
      mutable_lease_rejected()->::cockroach::roachpb::LeaseRejectedError::MergeFrom(from.lease_rejected());
    }
    if (from.has_node_unavailable()) {
      mutable_node_unavailable()->::cockroach::roachpb::NodeUnavailableError::MergeFrom(from.node_unavailable());
    }
    if (from.has_send()) {
      mutable_send()->::cockroach::roachpb::SendError::MergeFrom(from.send());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_raft_group_deleted()) {
      mutable_raft_group_deleted()->::cockroach::roachpb::RaftGroupDeletedError::MergeFrom(from.raft_group_deleted());
    }
    if (from.has_replica_corruption()) {
      mutable_replica_corruption()->::cockroach::roachpb::ReplicaCorruptionError::MergeFrom(from.replica_corruption());
    }
    if (from.has_lease_version_changed()) {
      mutable_lease_version_changed()->::cockroach::roachpb::LeaseVersionChangedError::MergeFrom(from.lease_version_changed());
    }
    if (from.has_didnt_update_descriptor()) {
      mutable_didnt_update_descriptor()->::cockroach::roachpb::DidntUpdateDescriptorError::MergeFrom(from.didnt_update_descriptor());
    }
    if (from.has_existing_scheme_change_lease()) {
      mutable_existing_scheme_change_lease()->::cockroach::roachpb::ExistingSchemaChangeLeaseError::MergeFrom(from.existing_scheme_change_lease());
    }
    if (from.has_error_with_pg_code()) {
      mutable_error_with_pg_code()->::cockroach::roachpb::ErrorWithPGCode::MergeFrom(from.error_with_pg_code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrorDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorDetail::CopyFrom(const ErrorDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorDetail::IsInitialized() const {

  return true;
}

void ErrorDetail::Swap(ErrorDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorDetail::InternalSwap(ErrorDetail* other) {
  std::swap(not_leader_, other->not_leader_);
  std::swap(range_not_found_, other->range_not_found_);
  std::swap(range_key_mismatch_, other->range_key_mismatch_);
  std::swap(read_within_uncertainty_interval_, other->read_within_uncertainty_interval_);
  std::swap(transaction_aborted_, other->transaction_aborted_);
  std::swap(transaction_push_, other->transaction_push_);
  std::swap(transaction_retry_, other->transaction_retry_);
  std::swap(transaction_replay_, other->transaction_replay_);
  std::swap(transaction_status_, other->transaction_status_);
  std::swap(write_intent_, other->write_intent_);
  std::swap(write_too_old_, other->write_too_old_);
  std::swap(op_requires_txn_, other->op_requires_txn_);
  std::swap(condition_failed_, other->condition_failed_);
  std::swap(lease_rejected_, other->lease_rejected_);
  std::swap(node_unavailable_, other->node_unavailable_);
  std::swap(send_, other->send_);
  std::swap(raft_group_deleted_, other->raft_group_deleted_);
  std::swap(replica_corruption_, other->replica_corruption_);
  std::swap(lease_version_changed_, other->lease_version_changed_);
  std::swap(didnt_update_descriptor_, other->didnt_update_descriptor_);
  std::swap(existing_scheme_change_lease_, other->existing_scheme_change_lease_);
  std::swap(error_with_pg_code_, other->error_with_pg_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorDetail_descriptor_;
  metadata.reflection = ErrorDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorDetail

// optional .cockroach.roachpb.NotLeaderError not_leader = 1;
bool ErrorDetail::has_not_leader() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorDetail::set_has_not_leader() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorDetail::clear_has_not_leader() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorDetail::clear_not_leader() {
  if (not_leader_ != NULL) not_leader_->::cockroach::roachpb::NotLeaderError::Clear();
  clear_has_not_leader();
}
const ::cockroach::roachpb::NotLeaderError& ErrorDetail::not_leader() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.not_leader)
  return not_leader_ != NULL ? *not_leader_ : *default_instance_->not_leader_;
}
::cockroach::roachpb::NotLeaderError* ErrorDetail::mutable_not_leader() {
  set_has_not_leader();
  if (not_leader_ == NULL) {
    not_leader_ = new ::cockroach::roachpb::NotLeaderError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.not_leader)
  return not_leader_;
}
::cockroach::roachpb::NotLeaderError* ErrorDetail::release_not_leader() {
  clear_has_not_leader();
  ::cockroach::roachpb::NotLeaderError* temp = not_leader_;
  not_leader_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_not_leader(::cockroach::roachpb::NotLeaderError* not_leader) {
  delete not_leader_;
  not_leader_ = not_leader;
  if (not_leader) {
    set_has_not_leader();
  } else {
    clear_has_not_leader();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.not_leader)
}

// optional .cockroach.roachpb.RangeNotFoundError range_not_found = 2;
bool ErrorDetail::has_range_not_found() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ErrorDetail::set_has_range_not_found() {
  _has_bits_[0] |= 0x00000002u;
}
void ErrorDetail::clear_has_range_not_found() {
  _has_bits_[0] &= ~0x00000002u;
}
void ErrorDetail::clear_range_not_found() {
  if (range_not_found_ != NULL) range_not_found_->::cockroach::roachpb::RangeNotFoundError::Clear();
  clear_has_range_not_found();
}
const ::cockroach::roachpb::RangeNotFoundError& ErrorDetail::range_not_found() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_not_found)
  return range_not_found_ != NULL ? *range_not_found_ : *default_instance_->range_not_found_;
}
::cockroach::roachpb::RangeNotFoundError* ErrorDetail::mutable_range_not_found() {
  set_has_range_not_found();
  if (range_not_found_ == NULL) {
    range_not_found_ = new ::cockroach::roachpb::RangeNotFoundError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_not_found)
  return range_not_found_;
}
::cockroach::roachpb::RangeNotFoundError* ErrorDetail::release_range_not_found() {
  clear_has_range_not_found();
  ::cockroach::roachpb::RangeNotFoundError* temp = range_not_found_;
  range_not_found_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_range_not_found(::cockroach::roachpb::RangeNotFoundError* range_not_found) {
  delete range_not_found_;
  range_not_found_ = range_not_found;
  if (range_not_found) {
    set_has_range_not_found();
  } else {
    clear_has_range_not_found();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_not_found)
}

// optional .cockroach.roachpb.RangeKeyMismatchError range_key_mismatch = 3;
bool ErrorDetail::has_range_key_mismatch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ErrorDetail::set_has_range_key_mismatch() {
  _has_bits_[0] |= 0x00000004u;
}
void ErrorDetail::clear_has_range_key_mismatch() {
  _has_bits_[0] &= ~0x00000004u;
}
void ErrorDetail::clear_range_key_mismatch() {
  if (range_key_mismatch_ != NULL) range_key_mismatch_->::cockroach::roachpb::RangeKeyMismatchError::Clear();
  clear_has_range_key_mismatch();
}
const ::cockroach::roachpb::RangeKeyMismatchError& ErrorDetail::range_key_mismatch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return range_key_mismatch_ != NULL ? *range_key_mismatch_ : *default_instance_->range_key_mismatch_;
}
::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::mutable_range_key_mismatch() {
  set_has_range_key_mismatch();
  if (range_key_mismatch_ == NULL) {
    range_key_mismatch_ = new ::cockroach::roachpb::RangeKeyMismatchError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.range_key_mismatch)
  return range_key_mismatch_;
}
::cockroach::roachpb::RangeKeyMismatchError* ErrorDetail::release_range_key_mismatch() {
  clear_has_range_key_mismatch();
  ::cockroach::roachpb::RangeKeyMismatchError* temp = range_key_mismatch_;
  range_key_mismatch_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_range_key_mismatch(::cockroach::roachpb::RangeKeyMismatchError* range_key_mismatch) {
  delete range_key_mismatch_;
  range_key_mismatch_ = range_key_mismatch;
  if (range_key_mismatch) {
    set_has_range_key_mismatch();
  } else {
    clear_has_range_key_mismatch();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.range_key_mismatch)
}

// optional .cockroach.roachpb.ReadWithinUncertaintyIntervalError read_within_uncertainty_interval = 4;
bool ErrorDetail::has_read_within_uncertainty_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ErrorDetail::set_has_read_within_uncertainty_interval() {
  _has_bits_[0] |= 0x00000008u;
}
void ErrorDetail::clear_has_read_within_uncertainty_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
void ErrorDetail::clear_read_within_uncertainty_interval() {
  if (read_within_uncertainty_interval_ != NULL) read_within_uncertainty_interval_->::cockroach::roachpb::ReadWithinUncertaintyIntervalError::Clear();
  clear_has_read_within_uncertainty_interval();
}
const ::cockroach::roachpb::ReadWithinUncertaintyIntervalError& ErrorDetail::read_within_uncertainty_interval() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_ != NULL ? *read_within_uncertainty_interval_ : *default_instance_->read_within_uncertainty_interval_;
}
::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::mutable_read_within_uncertainty_interval() {
  set_has_read_within_uncertainty_interval();
  if (read_within_uncertainty_interval_ == NULL) {
    read_within_uncertainty_interval_ = new ::cockroach::roachpb::ReadWithinUncertaintyIntervalError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
  return read_within_uncertainty_interval_;
}
::cockroach::roachpb::ReadWithinUncertaintyIntervalError* ErrorDetail::release_read_within_uncertainty_interval() {
  clear_has_read_within_uncertainty_interval();
  ::cockroach::roachpb::ReadWithinUncertaintyIntervalError* temp = read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_read_within_uncertainty_interval(::cockroach::roachpb::ReadWithinUncertaintyIntervalError* read_within_uncertainty_interval) {
  delete read_within_uncertainty_interval_;
  read_within_uncertainty_interval_ = read_within_uncertainty_interval;
  if (read_within_uncertainty_interval) {
    set_has_read_within_uncertainty_interval();
  } else {
    clear_has_read_within_uncertainty_interval();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.read_within_uncertainty_interval)
}

// optional .cockroach.roachpb.TransactionAbortedError transaction_aborted = 5;
bool ErrorDetail::has_transaction_aborted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ErrorDetail::set_has_transaction_aborted() {
  _has_bits_[0] |= 0x00000010u;
}
void ErrorDetail::clear_has_transaction_aborted() {
  _has_bits_[0] &= ~0x00000010u;
}
void ErrorDetail::clear_transaction_aborted() {
  if (transaction_aborted_ != NULL) transaction_aborted_->::cockroach::roachpb::TransactionAbortedError::Clear();
  clear_has_transaction_aborted();
}
const ::cockroach::roachpb::TransactionAbortedError& ErrorDetail::transaction_aborted() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return transaction_aborted_ != NULL ? *transaction_aborted_ : *default_instance_->transaction_aborted_;
}
::cockroach::roachpb::TransactionAbortedError* ErrorDetail::mutable_transaction_aborted() {
  set_has_transaction_aborted();
  if (transaction_aborted_ == NULL) {
    transaction_aborted_ = new ::cockroach::roachpb::TransactionAbortedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_aborted)
  return transaction_aborted_;
}
::cockroach::roachpb::TransactionAbortedError* ErrorDetail::release_transaction_aborted() {
  clear_has_transaction_aborted();
  ::cockroach::roachpb::TransactionAbortedError* temp = transaction_aborted_;
  transaction_aborted_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_transaction_aborted(::cockroach::roachpb::TransactionAbortedError* transaction_aborted) {
  delete transaction_aborted_;
  transaction_aborted_ = transaction_aborted;
  if (transaction_aborted) {
    set_has_transaction_aborted();
  } else {
    clear_has_transaction_aborted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_aborted)
}

// optional .cockroach.roachpb.TransactionPushError transaction_push = 6;
bool ErrorDetail::has_transaction_push() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ErrorDetail::set_has_transaction_push() {
  _has_bits_[0] |= 0x00000020u;
}
void ErrorDetail::clear_has_transaction_push() {
  _has_bits_[0] &= ~0x00000020u;
}
void ErrorDetail::clear_transaction_push() {
  if (transaction_push_ != NULL) transaction_push_->::cockroach::roachpb::TransactionPushError::Clear();
  clear_has_transaction_push();
}
const ::cockroach::roachpb::TransactionPushError& ErrorDetail::transaction_push() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_push)
  return transaction_push_ != NULL ? *transaction_push_ : *default_instance_->transaction_push_;
}
::cockroach::roachpb::TransactionPushError* ErrorDetail::mutable_transaction_push() {
  set_has_transaction_push();
  if (transaction_push_ == NULL) {
    transaction_push_ = new ::cockroach::roachpb::TransactionPushError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_push)
  return transaction_push_;
}
::cockroach::roachpb::TransactionPushError* ErrorDetail::release_transaction_push() {
  clear_has_transaction_push();
  ::cockroach::roachpb::TransactionPushError* temp = transaction_push_;
  transaction_push_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_transaction_push(::cockroach::roachpb::TransactionPushError* transaction_push) {
  delete transaction_push_;
  transaction_push_ = transaction_push;
  if (transaction_push) {
    set_has_transaction_push();
  } else {
    clear_has_transaction_push();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_push)
}

// optional .cockroach.roachpb.TransactionRetryError transaction_retry = 7;
bool ErrorDetail::has_transaction_retry() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ErrorDetail::set_has_transaction_retry() {
  _has_bits_[0] |= 0x00000040u;
}
void ErrorDetail::clear_has_transaction_retry() {
  _has_bits_[0] &= ~0x00000040u;
}
void ErrorDetail::clear_transaction_retry() {
  if (transaction_retry_ != NULL) transaction_retry_->::cockroach::roachpb::TransactionRetryError::Clear();
  clear_has_transaction_retry();
}
const ::cockroach::roachpb::TransactionRetryError& ErrorDetail::transaction_retry() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_retry)
  return transaction_retry_ != NULL ? *transaction_retry_ : *default_instance_->transaction_retry_;
}
::cockroach::roachpb::TransactionRetryError* ErrorDetail::mutable_transaction_retry() {
  set_has_transaction_retry();
  if (transaction_retry_ == NULL) {
    transaction_retry_ = new ::cockroach::roachpb::TransactionRetryError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_retry)
  return transaction_retry_;
}
::cockroach::roachpb::TransactionRetryError* ErrorDetail::release_transaction_retry() {
  clear_has_transaction_retry();
  ::cockroach::roachpb::TransactionRetryError* temp = transaction_retry_;
  transaction_retry_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_transaction_retry(::cockroach::roachpb::TransactionRetryError* transaction_retry) {
  delete transaction_retry_;
  transaction_retry_ = transaction_retry;
  if (transaction_retry) {
    set_has_transaction_retry();
  } else {
    clear_has_transaction_retry();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_retry)
}

// optional .cockroach.roachpb.TransactionReplayError transaction_replay = 22;
bool ErrorDetail::has_transaction_replay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ErrorDetail::set_has_transaction_replay() {
  _has_bits_[0] |= 0x00000080u;
}
void ErrorDetail::clear_has_transaction_replay() {
  _has_bits_[0] &= ~0x00000080u;
}
void ErrorDetail::clear_transaction_replay() {
  if (transaction_replay_ != NULL) transaction_replay_->::cockroach::roachpb::TransactionReplayError::Clear();
  clear_has_transaction_replay();
}
const ::cockroach::roachpb::TransactionReplayError& ErrorDetail::transaction_replay() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_replay)
  return transaction_replay_ != NULL ? *transaction_replay_ : *default_instance_->transaction_replay_;
}
::cockroach::roachpb::TransactionReplayError* ErrorDetail::mutable_transaction_replay() {
  set_has_transaction_replay();
  if (transaction_replay_ == NULL) {
    transaction_replay_ = new ::cockroach::roachpb::TransactionReplayError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_replay)
  return transaction_replay_;
}
::cockroach::roachpb::TransactionReplayError* ErrorDetail::release_transaction_replay() {
  clear_has_transaction_replay();
  ::cockroach::roachpb::TransactionReplayError* temp = transaction_replay_;
  transaction_replay_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_transaction_replay(::cockroach::roachpb::TransactionReplayError* transaction_replay) {
  delete transaction_replay_;
  transaction_replay_ = transaction_replay;
  if (transaction_replay) {
    set_has_transaction_replay();
  } else {
    clear_has_transaction_replay();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_replay)
}

// optional .cockroach.roachpb.TransactionStatusError transaction_status = 8;
bool ErrorDetail::has_transaction_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ErrorDetail::set_has_transaction_status() {
  _has_bits_[0] |= 0x00000100u;
}
void ErrorDetail::clear_has_transaction_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void ErrorDetail::clear_transaction_status() {
  if (transaction_status_ != NULL) transaction_status_->::cockroach::roachpb::TransactionStatusError::Clear();
  clear_has_transaction_status();
}
const ::cockroach::roachpb::TransactionStatusError& ErrorDetail::transaction_status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.transaction_status)
  return transaction_status_ != NULL ? *transaction_status_ : *default_instance_->transaction_status_;
}
::cockroach::roachpb::TransactionStatusError* ErrorDetail::mutable_transaction_status() {
  set_has_transaction_status();
  if (transaction_status_ == NULL) {
    transaction_status_ = new ::cockroach::roachpb::TransactionStatusError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.transaction_status)
  return transaction_status_;
}
::cockroach::roachpb::TransactionStatusError* ErrorDetail::release_transaction_status() {
  clear_has_transaction_status();
  ::cockroach::roachpb::TransactionStatusError* temp = transaction_status_;
  transaction_status_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_transaction_status(::cockroach::roachpb::TransactionStatusError* transaction_status) {
  delete transaction_status_;
  transaction_status_ = transaction_status;
  if (transaction_status) {
    set_has_transaction_status();
  } else {
    clear_has_transaction_status();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.transaction_status)
}

// optional .cockroach.roachpb.WriteIntentError write_intent = 9;
bool ErrorDetail::has_write_intent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ErrorDetail::set_has_write_intent() {
  _has_bits_[0] |= 0x00000200u;
}
void ErrorDetail::clear_has_write_intent() {
  _has_bits_[0] &= ~0x00000200u;
}
void ErrorDetail::clear_write_intent() {
  if (write_intent_ != NULL) write_intent_->::cockroach::roachpb::WriteIntentError::Clear();
  clear_has_write_intent();
}
const ::cockroach::roachpb::WriteIntentError& ErrorDetail::write_intent() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_intent)
  return write_intent_ != NULL ? *write_intent_ : *default_instance_->write_intent_;
}
::cockroach::roachpb::WriteIntentError* ErrorDetail::mutable_write_intent() {
  set_has_write_intent();
  if (write_intent_ == NULL) {
    write_intent_ = new ::cockroach::roachpb::WriteIntentError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_intent)
  return write_intent_;
}
::cockroach::roachpb::WriteIntentError* ErrorDetail::release_write_intent() {
  clear_has_write_intent();
  ::cockroach::roachpb::WriteIntentError* temp = write_intent_;
  write_intent_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_write_intent(::cockroach::roachpb::WriteIntentError* write_intent) {
  delete write_intent_;
  write_intent_ = write_intent;
  if (write_intent) {
    set_has_write_intent();
  } else {
    clear_has_write_intent();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_intent)
}

// optional .cockroach.roachpb.WriteTooOldError write_too_old = 10;
bool ErrorDetail::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ErrorDetail::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000400u;
}
void ErrorDetail::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000400u;
}
void ErrorDetail::clear_write_too_old() {
  if (write_too_old_ != NULL) write_too_old_->::cockroach::roachpb::WriteTooOldError::Clear();
  clear_has_write_too_old();
}
const ::cockroach::roachpb::WriteTooOldError& ErrorDetail::write_too_old() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.write_too_old)
  return write_too_old_ != NULL ? *write_too_old_ : *default_instance_->write_too_old_;
}
::cockroach::roachpb::WriteTooOldError* ErrorDetail::mutable_write_too_old() {
  set_has_write_too_old();
  if (write_too_old_ == NULL) {
    write_too_old_ = new ::cockroach::roachpb::WriteTooOldError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.write_too_old)
  return write_too_old_;
}
::cockroach::roachpb::WriteTooOldError* ErrorDetail::release_write_too_old() {
  clear_has_write_too_old();
  ::cockroach::roachpb::WriteTooOldError* temp = write_too_old_;
  write_too_old_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_write_too_old(::cockroach::roachpb::WriteTooOldError* write_too_old) {
  delete write_too_old_;
  write_too_old_ = write_too_old;
  if (write_too_old) {
    set_has_write_too_old();
  } else {
    clear_has_write_too_old();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.write_too_old)
}

// optional .cockroach.roachpb.OpRequiresTxnError op_requires_txn = 11;
bool ErrorDetail::has_op_requires_txn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ErrorDetail::set_has_op_requires_txn() {
  _has_bits_[0] |= 0x00000800u;
}
void ErrorDetail::clear_has_op_requires_txn() {
  _has_bits_[0] &= ~0x00000800u;
}
void ErrorDetail::clear_op_requires_txn() {
  if (op_requires_txn_ != NULL) op_requires_txn_->::cockroach::roachpb::OpRequiresTxnError::Clear();
  clear_has_op_requires_txn();
}
const ::cockroach::roachpb::OpRequiresTxnError& ErrorDetail::op_requires_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return op_requires_txn_ != NULL ? *op_requires_txn_ : *default_instance_->op_requires_txn_;
}
::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::mutable_op_requires_txn() {
  set_has_op_requires_txn();
  if (op_requires_txn_ == NULL) {
    op_requires_txn_ = new ::cockroach::roachpb::OpRequiresTxnError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.op_requires_txn)
  return op_requires_txn_;
}
::cockroach::roachpb::OpRequiresTxnError* ErrorDetail::release_op_requires_txn() {
  clear_has_op_requires_txn();
  ::cockroach::roachpb::OpRequiresTxnError* temp = op_requires_txn_;
  op_requires_txn_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_op_requires_txn(::cockroach::roachpb::OpRequiresTxnError* op_requires_txn) {
  delete op_requires_txn_;
  op_requires_txn_ = op_requires_txn;
  if (op_requires_txn) {
    set_has_op_requires_txn();
  } else {
    clear_has_op_requires_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.op_requires_txn)
}

// optional .cockroach.roachpb.ConditionFailedError condition_failed = 12;
bool ErrorDetail::has_condition_failed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ErrorDetail::set_has_condition_failed() {
  _has_bits_[0] |= 0x00001000u;
}
void ErrorDetail::clear_has_condition_failed() {
  _has_bits_[0] &= ~0x00001000u;
}
void ErrorDetail::clear_condition_failed() {
  if (condition_failed_ != NULL) condition_failed_->::cockroach::roachpb::ConditionFailedError::Clear();
  clear_has_condition_failed();
}
const ::cockroach::roachpb::ConditionFailedError& ErrorDetail::condition_failed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.condition_failed)
  return condition_failed_ != NULL ? *condition_failed_ : *default_instance_->condition_failed_;
}
::cockroach::roachpb::ConditionFailedError* ErrorDetail::mutable_condition_failed() {
  set_has_condition_failed();
  if (condition_failed_ == NULL) {
    condition_failed_ = new ::cockroach::roachpb::ConditionFailedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.condition_failed)
  return condition_failed_;
}
::cockroach::roachpb::ConditionFailedError* ErrorDetail::release_condition_failed() {
  clear_has_condition_failed();
  ::cockroach::roachpb::ConditionFailedError* temp = condition_failed_;
  condition_failed_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_condition_failed(::cockroach::roachpb::ConditionFailedError* condition_failed) {
  delete condition_failed_;
  condition_failed_ = condition_failed;
  if (condition_failed) {
    set_has_condition_failed();
  } else {
    clear_has_condition_failed();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.condition_failed)
}

// optional .cockroach.roachpb.LeaseRejectedError lease_rejected = 13;
bool ErrorDetail::has_lease_rejected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ErrorDetail::set_has_lease_rejected() {
  _has_bits_[0] |= 0x00002000u;
}
void ErrorDetail::clear_has_lease_rejected() {
  _has_bits_[0] &= ~0x00002000u;
}
void ErrorDetail::clear_lease_rejected() {
  if (lease_rejected_ != NULL) lease_rejected_->::cockroach::roachpb::LeaseRejectedError::Clear();
  clear_has_lease_rejected();
}
const ::cockroach::roachpb::LeaseRejectedError& ErrorDetail::lease_rejected() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.lease_rejected)
  return lease_rejected_ != NULL ? *lease_rejected_ : *default_instance_->lease_rejected_;
}
::cockroach::roachpb::LeaseRejectedError* ErrorDetail::mutable_lease_rejected() {
  set_has_lease_rejected();
  if (lease_rejected_ == NULL) {
    lease_rejected_ = new ::cockroach::roachpb::LeaseRejectedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.lease_rejected)
  return lease_rejected_;
}
::cockroach::roachpb::LeaseRejectedError* ErrorDetail::release_lease_rejected() {
  clear_has_lease_rejected();
  ::cockroach::roachpb::LeaseRejectedError* temp = lease_rejected_;
  lease_rejected_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_lease_rejected(::cockroach::roachpb::LeaseRejectedError* lease_rejected) {
  delete lease_rejected_;
  lease_rejected_ = lease_rejected;
  if (lease_rejected) {
    set_has_lease_rejected();
  } else {
    clear_has_lease_rejected();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_rejected)
}

// optional .cockroach.roachpb.NodeUnavailableError node_unavailable = 14;
bool ErrorDetail::has_node_unavailable() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ErrorDetail::set_has_node_unavailable() {
  _has_bits_[0] |= 0x00004000u;
}
void ErrorDetail::clear_has_node_unavailable() {
  _has_bits_[0] &= ~0x00004000u;
}
void ErrorDetail::clear_node_unavailable() {
  if (node_unavailable_ != NULL) node_unavailable_->::cockroach::roachpb::NodeUnavailableError::Clear();
  clear_has_node_unavailable();
}
const ::cockroach::roachpb::NodeUnavailableError& ErrorDetail::node_unavailable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.node_unavailable)
  return node_unavailable_ != NULL ? *node_unavailable_ : *default_instance_->node_unavailable_;
}
::cockroach::roachpb::NodeUnavailableError* ErrorDetail::mutable_node_unavailable() {
  set_has_node_unavailable();
  if (node_unavailable_ == NULL) {
    node_unavailable_ = new ::cockroach::roachpb::NodeUnavailableError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.node_unavailable)
  return node_unavailable_;
}
::cockroach::roachpb::NodeUnavailableError* ErrorDetail::release_node_unavailable() {
  clear_has_node_unavailable();
  ::cockroach::roachpb::NodeUnavailableError* temp = node_unavailable_;
  node_unavailable_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_node_unavailable(::cockroach::roachpb::NodeUnavailableError* node_unavailable) {
  delete node_unavailable_;
  node_unavailable_ = node_unavailable;
  if (node_unavailable) {
    set_has_node_unavailable();
  } else {
    clear_has_node_unavailable();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.node_unavailable)
}

// optional .cockroach.roachpb.SendError send = 15;
bool ErrorDetail::has_send() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ErrorDetail::set_has_send() {
  _has_bits_[0] |= 0x00008000u;
}
void ErrorDetail::clear_has_send() {
  _has_bits_[0] &= ~0x00008000u;
}
void ErrorDetail::clear_send() {
  if (send_ != NULL) send_->::cockroach::roachpb::SendError::Clear();
  clear_has_send();
}
const ::cockroach::roachpb::SendError& ErrorDetail::send() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.send)
  return send_ != NULL ? *send_ : *default_instance_->send_;
}
::cockroach::roachpb::SendError* ErrorDetail::mutable_send() {
  set_has_send();
  if (send_ == NULL) {
    send_ = new ::cockroach::roachpb::SendError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.send)
  return send_;
}
::cockroach::roachpb::SendError* ErrorDetail::release_send() {
  clear_has_send();
  ::cockroach::roachpb::SendError* temp = send_;
  send_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_send(::cockroach::roachpb::SendError* send) {
  delete send_;
  send_ = send;
  if (send) {
    set_has_send();
  } else {
    clear_has_send();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.send)
}

// optional .cockroach.roachpb.RaftGroupDeletedError raft_group_deleted = 16;
bool ErrorDetail::has_raft_group_deleted() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ErrorDetail::set_has_raft_group_deleted() {
  _has_bits_[0] |= 0x00010000u;
}
void ErrorDetail::clear_has_raft_group_deleted() {
  _has_bits_[0] &= ~0x00010000u;
}
void ErrorDetail::clear_raft_group_deleted() {
  if (raft_group_deleted_ != NULL) raft_group_deleted_->::cockroach::roachpb::RaftGroupDeletedError::Clear();
  clear_has_raft_group_deleted();
}
const ::cockroach::roachpb::RaftGroupDeletedError& ErrorDetail::raft_group_deleted() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return raft_group_deleted_ != NULL ? *raft_group_deleted_ : *default_instance_->raft_group_deleted_;
}
::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::mutable_raft_group_deleted() {
  set_has_raft_group_deleted();
  if (raft_group_deleted_ == NULL) {
    raft_group_deleted_ = new ::cockroach::roachpb::RaftGroupDeletedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.raft_group_deleted)
  return raft_group_deleted_;
}
::cockroach::roachpb::RaftGroupDeletedError* ErrorDetail::release_raft_group_deleted() {
  clear_has_raft_group_deleted();
  ::cockroach::roachpb::RaftGroupDeletedError* temp = raft_group_deleted_;
  raft_group_deleted_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_raft_group_deleted(::cockroach::roachpb::RaftGroupDeletedError* raft_group_deleted) {
  delete raft_group_deleted_;
  raft_group_deleted_ = raft_group_deleted;
  if (raft_group_deleted) {
    set_has_raft_group_deleted();
  } else {
    clear_has_raft_group_deleted();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.raft_group_deleted)
}

// optional .cockroach.roachpb.ReplicaCorruptionError replica_corruption = 17;
bool ErrorDetail::has_replica_corruption() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ErrorDetail::set_has_replica_corruption() {
  _has_bits_[0] |= 0x00020000u;
}
void ErrorDetail::clear_has_replica_corruption() {
  _has_bits_[0] &= ~0x00020000u;
}
void ErrorDetail::clear_replica_corruption() {
  if (replica_corruption_ != NULL) replica_corruption_->::cockroach::roachpb::ReplicaCorruptionError::Clear();
  clear_has_replica_corruption();
}
const ::cockroach::roachpb::ReplicaCorruptionError& ErrorDetail::replica_corruption() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.replica_corruption)
  return replica_corruption_ != NULL ? *replica_corruption_ : *default_instance_->replica_corruption_;
}
::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::mutable_replica_corruption() {
  set_has_replica_corruption();
  if (replica_corruption_ == NULL) {
    replica_corruption_ = new ::cockroach::roachpb::ReplicaCorruptionError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.replica_corruption)
  return replica_corruption_;
}
::cockroach::roachpb::ReplicaCorruptionError* ErrorDetail::release_replica_corruption() {
  clear_has_replica_corruption();
  ::cockroach::roachpb::ReplicaCorruptionError* temp = replica_corruption_;
  replica_corruption_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_replica_corruption(::cockroach::roachpb::ReplicaCorruptionError* replica_corruption) {
  delete replica_corruption_;
  replica_corruption_ = replica_corruption;
  if (replica_corruption) {
    set_has_replica_corruption();
  } else {
    clear_has_replica_corruption();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.replica_corruption)
}

// optional .cockroach.roachpb.LeaseVersionChangedError lease_version_changed = 18;
bool ErrorDetail::has_lease_version_changed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ErrorDetail::set_has_lease_version_changed() {
  _has_bits_[0] |= 0x00040000u;
}
void ErrorDetail::clear_has_lease_version_changed() {
  _has_bits_[0] &= ~0x00040000u;
}
void ErrorDetail::clear_lease_version_changed() {
  if (lease_version_changed_ != NULL) lease_version_changed_->::cockroach::roachpb::LeaseVersionChangedError::Clear();
  clear_has_lease_version_changed();
}
const ::cockroach::roachpb::LeaseVersionChangedError& ErrorDetail::lease_version_changed() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.lease_version_changed)
  return lease_version_changed_ != NULL ? *lease_version_changed_ : *default_instance_->lease_version_changed_;
}
::cockroach::roachpb::LeaseVersionChangedError* ErrorDetail::mutable_lease_version_changed() {
  set_has_lease_version_changed();
  if (lease_version_changed_ == NULL) {
    lease_version_changed_ = new ::cockroach::roachpb::LeaseVersionChangedError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.lease_version_changed)
  return lease_version_changed_;
}
::cockroach::roachpb::LeaseVersionChangedError* ErrorDetail::release_lease_version_changed() {
  clear_has_lease_version_changed();
  ::cockroach::roachpb::LeaseVersionChangedError* temp = lease_version_changed_;
  lease_version_changed_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_lease_version_changed(::cockroach::roachpb::LeaseVersionChangedError* lease_version_changed) {
  delete lease_version_changed_;
  lease_version_changed_ = lease_version_changed;
  if (lease_version_changed) {
    set_has_lease_version_changed();
  } else {
    clear_has_lease_version_changed();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.lease_version_changed)
}

// optional .cockroach.roachpb.DidntUpdateDescriptorError didnt_update_descriptor = 19;
bool ErrorDetail::has_didnt_update_descriptor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ErrorDetail::set_has_didnt_update_descriptor() {
  _has_bits_[0] |= 0x00080000u;
}
void ErrorDetail::clear_has_didnt_update_descriptor() {
  _has_bits_[0] &= ~0x00080000u;
}
void ErrorDetail::clear_didnt_update_descriptor() {
  if (didnt_update_descriptor_ != NULL) didnt_update_descriptor_->::cockroach::roachpb::DidntUpdateDescriptorError::Clear();
  clear_has_didnt_update_descriptor();
}
const ::cockroach::roachpb::DidntUpdateDescriptorError& ErrorDetail::didnt_update_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
  return didnt_update_descriptor_ != NULL ? *didnt_update_descriptor_ : *default_instance_->didnt_update_descriptor_;
}
::cockroach::roachpb::DidntUpdateDescriptorError* ErrorDetail::mutable_didnt_update_descriptor() {
  set_has_didnt_update_descriptor();
  if (didnt_update_descriptor_ == NULL) {
    didnt_update_descriptor_ = new ::cockroach::roachpb::DidntUpdateDescriptorError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
  return didnt_update_descriptor_;
}
::cockroach::roachpb::DidntUpdateDescriptorError* ErrorDetail::release_didnt_update_descriptor() {
  clear_has_didnt_update_descriptor();
  ::cockroach::roachpb::DidntUpdateDescriptorError* temp = didnt_update_descriptor_;
  didnt_update_descriptor_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_didnt_update_descriptor(::cockroach::roachpb::DidntUpdateDescriptorError* didnt_update_descriptor) {
  delete didnt_update_descriptor_;
  didnt_update_descriptor_ = didnt_update_descriptor;
  if (didnt_update_descriptor) {
    set_has_didnt_update_descriptor();
  } else {
    clear_has_didnt_update_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.didnt_update_descriptor)
}

// optional .cockroach.roachpb.ExistingSchemaChangeLeaseError existing_scheme_change_lease = 20;
bool ErrorDetail::has_existing_scheme_change_lease() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ErrorDetail::set_has_existing_scheme_change_lease() {
  _has_bits_[0] |= 0x00100000u;
}
void ErrorDetail::clear_has_existing_scheme_change_lease() {
  _has_bits_[0] &= ~0x00100000u;
}
void ErrorDetail::clear_existing_scheme_change_lease() {
  if (existing_scheme_change_lease_ != NULL) existing_scheme_change_lease_->::cockroach::roachpb::ExistingSchemaChangeLeaseError::Clear();
  clear_has_existing_scheme_change_lease();
}
const ::cockroach::roachpb::ExistingSchemaChangeLeaseError& ErrorDetail::existing_scheme_change_lease() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
  return existing_scheme_change_lease_ != NULL ? *existing_scheme_change_lease_ : *default_instance_->existing_scheme_change_lease_;
}
::cockroach::roachpb::ExistingSchemaChangeLeaseError* ErrorDetail::mutable_existing_scheme_change_lease() {
  set_has_existing_scheme_change_lease();
  if (existing_scheme_change_lease_ == NULL) {
    existing_scheme_change_lease_ = new ::cockroach::roachpb::ExistingSchemaChangeLeaseError;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
  return existing_scheme_change_lease_;
}
::cockroach::roachpb::ExistingSchemaChangeLeaseError* ErrorDetail::release_existing_scheme_change_lease() {
  clear_has_existing_scheme_change_lease();
  ::cockroach::roachpb::ExistingSchemaChangeLeaseError* temp = existing_scheme_change_lease_;
  existing_scheme_change_lease_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_existing_scheme_change_lease(::cockroach::roachpb::ExistingSchemaChangeLeaseError* existing_scheme_change_lease) {
  delete existing_scheme_change_lease_;
  existing_scheme_change_lease_ = existing_scheme_change_lease;
  if (existing_scheme_change_lease) {
    set_has_existing_scheme_change_lease();
  } else {
    clear_has_existing_scheme_change_lease();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.existing_scheme_change_lease)
}

// optional .cockroach.roachpb.ErrorWithPGCode error_with_pg_code = 21;
bool ErrorDetail::has_error_with_pg_code() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ErrorDetail::set_has_error_with_pg_code() {
  _has_bits_[0] |= 0x00200000u;
}
void ErrorDetail::clear_has_error_with_pg_code() {
  _has_bits_[0] &= ~0x00200000u;
}
void ErrorDetail::clear_error_with_pg_code() {
  if (error_with_pg_code_ != NULL) error_with_pg_code_->::cockroach::roachpb::ErrorWithPGCode::Clear();
  clear_has_error_with_pg_code();
}
const ::cockroach::roachpb::ErrorWithPGCode& ErrorDetail::error_with_pg_code() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrorDetail.error_with_pg_code)
  return error_with_pg_code_ != NULL ? *error_with_pg_code_ : *default_instance_->error_with_pg_code_;
}
::cockroach::roachpb::ErrorWithPGCode* ErrorDetail::mutable_error_with_pg_code() {
  set_has_error_with_pg_code();
  if (error_with_pg_code_ == NULL) {
    error_with_pg_code_ = new ::cockroach::roachpb::ErrorWithPGCode;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ErrorDetail.error_with_pg_code)
  return error_with_pg_code_;
}
::cockroach::roachpb::ErrorWithPGCode* ErrorDetail::release_error_with_pg_code() {
  clear_has_error_with_pg_code();
  ::cockroach::roachpb::ErrorWithPGCode* temp = error_with_pg_code_;
  error_with_pg_code_ = NULL;
  return temp;
}
void ErrorDetail::set_allocated_error_with_pg_code(::cockroach::roachpb::ErrorWithPGCode* error_with_pg_code) {
  delete error_with_pg_code_;
  error_with_pg_code_ = error_with_pg_code;
  if (error_with_pg_code) {
    set_has_error_with_pg_code();
  } else {
    clear_has_error_with_pg_code();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ErrorDetail.error_with_pg_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrPosition::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrPosition::ErrPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ErrPosition)
}

void ErrPosition::InitAsDefaultInstance() {
}

ErrPosition::ErrPosition(const ErrPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ErrPosition)
}

void ErrPosition::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrPosition::~ErrPosition() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ErrPosition)
  SharedDtor();
}

void ErrPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ErrPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrPosition_descriptor_;
}

const ErrPosition& ErrPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

ErrPosition* ErrPosition::default_instance_ = NULL;

ErrPosition* ErrPosition::New(::google::protobuf::Arena* arena) const {
  ErrPosition* n = new ErrPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrPosition::Clear() {
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ErrPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ErrPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ErrPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ErrPosition)
  return false;
#undef DO_
}

void ErrPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ErrPosition)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ErrPosition)
}

::google::protobuf::uint8* ErrPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ErrPosition)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ErrPosition)
  return target;
}

int ErrPosition::ByteSize() const {
  int total_size = 0;

  // optional int32 index = 1;
  if (has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrPosition::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ErrPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrPosition>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrPosition::MergeFrom(const ErrPosition& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ErrPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrPosition::CopyFrom(const ErrPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrPosition::IsInitialized() const {

  return true;
}

void ErrPosition::Swap(ErrPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrPosition::InternalSwap(ErrPosition* other) {
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrPosition_descriptor_;
  metadata.reflection = ErrPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrPosition

// optional int32 index = 1;
bool ErrPosition::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrPosition::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrPosition::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrPosition::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 ErrPosition::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ErrPosition.index)
  return index_;
}
 void ErrPosition::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ErrPosition.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kMessageFieldNumber;
const int Error::kRetryableFieldNumber;
const int Error::kTransactionRestartFieldNumber;
const int Error::kUnexposedTxnFieldNumber;
const int Error::kOriginNodeFieldNumber;
const int Error::kDetailFieldNumber;
const int Error::kIndexFieldNumber;
const int Error::kNowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Error)
}

void Error::InitAsDefaultInstance() {
  unexposed_txn_ = const_cast< ::cockroach::roachpb::Transaction*>(&::cockroach::roachpb::Transaction::default_instance());
  detail_ = const_cast< ::cockroach::roachpb::ErrorDetail*>(&::cockroach::roachpb::ErrorDetail::default_instance());
  index_ = const_cast< ::cockroach::roachpb::ErrPosition*>(&::cockroach::roachpb::ErrPosition::default_instance());
  now_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retryable_ = false;
  transaction_restart_ = 0;
  unexposed_txn_ = NULL;
  origin_node_ = 0;
  detail_ = NULL;
  index_ = NULL;
  now_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete unexposed_txn_;
    delete detail_;
    delete index_;
    delete now_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2ferrors_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Error*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(retryable_, transaction_restart_);
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_unexposed_txn()) {
      if (unexposed_txn_ != NULL) unexposed_txn_->::cockroach::roachpb::Transaction::Clear();
    }
    origin_node_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::cockroach::roachpb::ErrorDetail::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::cockroach::roachpb::ErrPosition::Clear();
    }
    if (has_now()) {
      if (now_ != NULL) now_->::cockroach::roachpb::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.Error.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retryable;
        break;
      }

      // optional bool retryable = 2;
      case 2: {
        if (tag == 16) {
         parse_retryable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retryable_)));
          set_has_retryable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_transaction_restart;
        break;
      }

      // optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
      case 3: {
        if (tag == 24) {
         parse_transaction_restart:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionRestart_IsValid(value)) {
            set_transaction_restart(static_cast< ::cockroach::roachpb::TransactionRestart >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unexposed_txn;
        break;
      }

      // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
      case 4: {
        if (tag == 34) {
         parse_unexposed_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unexposed_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_origin_node;
        break;
      }

      // optional int32 origin_node = 5;
      case 5: {
        if (tag == 40) {
         parse_origin_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_node_)));
          set_has_origin_node();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_detail;
        break;
      }

      // optional .cockroach.roachpb.ErrorDetail detail = 6;
      case 6: {
        if (tag == 50) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_index;
        break;
      }

      // optional .cockroach.roachpb.ErrPosition index = 7;
      case 7: {
        if (tag == 58) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_now;
        break;
      }

      // optional .cockroach.roachpb.Timestamp now = 8;
      case 8: {
        if (tag == 66) {
         parse_now:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->retryable(), output);
  }

  // optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
  if (has_transaction_restart()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->transaction_restart(), output);
  }

  // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
  if (has_unexposed_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unexposed_txn_, output);
  }

  // optional int32 origin_node = 5;
  if (has_origin_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->origin_node(), output);
  }

  // optional .cockroach.roachpb.ErrorDetail detail = 6;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->detail_, output);
  }

  // optional .cockroach.roachpb.ErrPosition index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->index_, output);
  }

  // optional .cockroach.roachpb.Timestamp now = 8;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->now_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Error)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional bool retryable = 2;
  if (has_retryable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->retryable(), target);
  }

  // optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
  if (has_transaction_restart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->transaction_restart(), target);
  }

  // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
  if (has_unexposed_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->unexposed_txn_, target);
  }

  // optional int32 origin_node = 5;
  if (has_origin_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->origin_node(), target);
  }

  // optional .cockroach.roachpb.ErrorDetail detail = 6;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->detail_, target);
  }

  // optional .cockroach.roachpb.ErrPosition index = 7;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->index_, target);
  }

  // optional .cockroach.roachpb.Timestamp now = 8;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, *this->now_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional bool retryable = 2;
    if (has_retryable()) {
      total_size += 1 + 1;
    }

    // optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
    if (has_transaction_restart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transaction_restart());
    }

    // optional .cockroach.roachpb.Transaction unexposed_txn = 4;
    if (has_unexposed_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unexposed_txn_);
    }

    // optional int32 origin_node = 5;
    if (has_origin_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_node());
    }

    // optional .cockroach.roachpb.ErrorDetail detail = 6;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->detail_);
    }

    // optional .cockroach.roachpb.ErrPosition index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->index_);
    }

    // optional .cockroach.roachpb.Timestamp now = 8;
    if (has_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->now_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_retryable()) {
      set_retryable(from.retryable());
    }
    if (from.has_transaction_restart()) {
      set_transaction_restart(from.transaction_restart());
    }
    if (from.has_unexposed_txn()) {
      mutable_unexposed_txn()->::cockroach::roachpb::Transaction::MergeFrom(from.unexposed_txn());
    }
    if (from.has_origin_node()) {
      set_origin_node(from.origin_node());
    }
    if (from.has_detail()) {
      mutable_detail()->::cockroach::roachpb::ErrorDetail::MergeFrom(from.detail());
    }
    if (from.has_index()) {
      mutable_index()->::cockroach::roachpb::ErrPosition::MergeFrom(from.index());
    }
    if (from.has_now()) {
      mutable_now()->::cockroach::roachpb::Timestamp::MergeFrom(from.now());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  message_.Swap(&other->message_);
  std::swap(retryable_, other->retryable_);
  std::swap(transaction_restart_, other->transaction_restart_);
  std::swap(unexposed_txn_, other->unexposed_txn_);
  std::swap(origin_node_, other->origin_node_);
  std::swap(detail_, other->detail_);
  std::swap(index_, other->index_);
  std::swap(now_, other->now_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional string message = 1;
bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.message)
}
 void Error::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Error.message)
}
 void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Error.message)
}
 ::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.message)
}

// optional bool retryable = 2;
bool Error::has_retryable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_retryable() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_retryable() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_retryable() {
  retryable_ = false;
  clear_has_retryable();
}
 bool Error::retryable() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.retryable)
  return retryable_;
}
 void Error::set_retryable(bool value) {
  set_has_retryable();
  retryable_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.retryable)
}

// optional .cockroach.roachpb.TransactionRestart transaction_restart = 3;
bool Error::has_transaction_restart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Error::set_has_transaction_restart() {
  _has_bits_[0] |= 0x00000004u;
}
void Error::clear_has_transaction_restart() {
  _has_bits_[0] &= ~0x00000004u;
}
void Error::clear_transaction_restart() {
  transaction_restart_ = 0;
  clear_has_transaction_restart();
}
 ::cockroach::roachpb::TransactionRestart Error::transaction_restart() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.transaction_restart)
  return static_cast< ::cockroach::roachpb::TransactionRestart >(transaction_restart_);
}
 void Error::set_transaction_restart(::cockroach::roachpb::TransactionRestart value) {
  assert(::cockroach::roachpb::TransactionRestart_IsValid(value));
  set_has_transaction_restart();
  transaction_restart_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.transaction_restart)
}

// optional .cockroach.roachpb.Transaction unexposed_txn = 4;
bool Error::has_unexposed_txn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Error::set_has_unexposed_txn() {
  _has_bits_[0] |= 0x00000008u;
}
void Error::clear_has_unexposed_txn() {
  _has_bits_[0] &= ~0x00000008u;
}
void Error::clear_unexposed_txn() {
  if (unexposed_txn_ != NULL) unexposed_txn_->::cockroach::roachpb::Transaction::Clear();
  clear_has_unexposed_txn();
}
const ::cockroach::roachpb::Transaction& Error::unexposed_txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.unexposed_txn)
  return unexposed_txn_ != NULL ? *unexposed_txn_ : *default_instance_->unexposed_txn_;
}
::cockroach::roachpb::Transaction* Error::mutable_unexposed_txn() {
  set_has_unexposed_txn();
  if (unexposed_txn_ == NULL) {
    unexposed_txn_ = new ::cockroach::roachpb::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.unexposed_txn)
  return unexposed_txn_;
}
::cockroach::roachpb::Transaction* Error::release_unexposed_txn() {
  clear_has_unexposed_txn();
  ::cockroach::roachpb::Transaction* temp = unexposed_txn_;
  unexposed_txn_ = NULL;
  return temp;
}
void Error::set_allocated_unexposed_txn(::cockroach::roachpb::Transaction* unexposed_txn) {
  delete unexposed_txn_;
  unexposed_txn_ = unexposed_txn;
  if (unexposed_txn) {
    set_has_unexposed_txn();
  } else {
    clear_has_unexposed_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.unexposed_txn)
}

// optional int32 origin_node = 5;
bool Error::has_origin_node() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Error::set_has_origin_node() {
  _has_bits_[0] |= 0x00000010u;
}
void Error::clear_has_origin_node() {
  _has_bits_[0] &= ~0x00000010u;
}
void Error::clear_origin_node() {
  origin_node_ = 0;
  clear_has_origin_node();
}
 ::google::protobuf::int32 Error::origin_node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.origin_node)
  return origin_node_;
}
 void Error::set_origin_node(::google::protobuf::int32 value) {
  set_has_origin_node();
  origin_node_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Error.origin_node)
}

// optional .cockroach.roachpb.ErrorDetail detail = 6;
bool Error::has_detail() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Error::set_has_detail() {
  _has_bits_[0] |= 0x00000020u;
}
void Error::clear_has_detail() {
  _has_bits_[0] &= ~0x00000020u;
}
void Error::clear_detail() {
  if (detail_ != NULL) detail_->::cockroach::roachpb::ErrorDetail::Clear();
  clear_has_detail();
}
const ::cockroach::roachpb::ErrorDetail& Error::detail() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.detail)
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
::cockroach::roachpb::ErrorDetail* Error::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) {
    detail_ = new ::cockroach::roachpb::ErrorDetail;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.detail)
  return detail_;
}
::cockroach::roachpb::ErrorDetail* Error::release_detail() {
  clear_has_detail();
  ::cockroach::roachpb::ErrorDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
void Error::set_allocated_detail(::cockroach::roachpb::ErrorDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.detail)
}

// optional .cockroach.roachpb.ErrPosition index = 7;
bool Error::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Error::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
void Error::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void Error::clear_index() {
  if (index_ != NULL) index_->::cockroach::roachpb::ErrPosition::Clear();
  clear_has_index();
}
const ::cockroach::roachpb::ErrPosition& Error::index() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
::cockroach::roachpb::ErrPosition* Error::mutable_index() {
  set_has_index();
  if (index_ == NULL) {
    index_ = new ::cockroach::roachpb::ErrPosition;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.index)
  return index_;
}
::cockroach::roachpb::ErrPosition* Error::release_index() {
  clear_has_index();
  ::cockroach::roachpb::ErrPosition* temp = index_;
  index_ = NULL;
  return temp;
}
void Error::set_allocated_index(::cockroach::roachpb::ErrPosition* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.index)
}

// optional .cockroach.roachpb.Timestamp now = 8;
bool Error::has_now() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Error::set_has_now() {
  _has_bits_[0] |= 0x00000080u;
}
void Error::clear_has_now() {
  _has_bits_[0] &= ~0x00000080u;
}
void Error::clear_now() {
  if (now_ != NULL) now_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_now();
}
const ::cockroach::roachpb::Timestamp& Error::now() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Error.now)
  return now_ != NULL ? *now_ : *default_instance_->now_;
}
::cockroach::roachpb::Timestamp* Error::mutable_now() {
  set_has_now();
  if (now_ == NULL) {
    now_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Error.now)
  return now_;
}
::cockroach::roachpb::Timestamp* Error::release_now() {
  clear_has_now();
  ::cockroach::roachpb::Timestamp* temp = now_;
  now_ = NULL;
  return temp;
}
void Error::set_allocated_now(::cockroach::roachpb::Timestamp* now) {
  delete now_;
  now_ = now;
  if (now) {
    set_has_now();
  } else {
    clear_has_now();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Error.now)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
