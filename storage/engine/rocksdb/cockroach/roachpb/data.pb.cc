// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/roachpb/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto() {
  delete Span::default_instance_;
  delete Value::default_instance_;
  delete KeyValue::default_instance_;
  delete StoreIdent::default_instance_;
  delete SplitTrigger::default_instance_;
  delete MergeTrigger::default_instance_;
  delete ChangeReplicasTrigger::default_instance_;
  delete ModifiedSpanTrigger::default_instance_;
  delete InternalCommitTrigger::default_instance_;
  delete Transaction::default_instance_;
  delete Intent::default_instance_;
  delete Lease::default_instance_;
  delete AbortCacheEntry::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cockroach::roachpb::protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  ::cockroach::storage::engine::enginepb::protobuf_AddDesc_cockroach_2fstorage_2fengine_2fenginepb_2fmvcc_2eproto();
  ::cockroach::util::hlc::protobuf_AddDesc_cockroach_2futil_2fhlc_2ftimestamp_2eproto();
  Span::default_instance_ = new Span();
  Value::default_instance_ = new Value();
  KeyValue::default_instance_ = new KeyValue();
  StoreIdent::default_instance_ = new StoreIdent();
  SplitTrigger::default_instance_ = new SplitTrigger();
  MergeTrigger::default_instance_ = new MergeTrigger();
  ChangeReplicasTrigger::default_instance_ = new ChangeReplicasTrigger();
  ModifiedSpanTrigger::default_instance_ = new ModifiedSpanTrigger();
  InternalCommitTrigger::default_instance_ = new InternalCommitTrigger();
  Transaction::default_instance_ = new Transaction();
  Intent::default_instance_ = new Intent();
  Lease::default_instance_ = new Lease();
  AbortCacheEntry::default_instance_ = new AbortCacheEntry();
  Span::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  StoreIdent::default_instance_->InitAsDefaultInstance();
  SplitTrigger::default_instance_->InitAsDefaultInstance();
  MergeTrigger::default_instance_->InitAsDefaultInstance();
  ChangeReplicasTrigger::default_instance_->InitAsDefaultInstance();
  ModifiedSpanTrigger::default_instance_->InitAsDefaultInstance();
  InternalCommitTrigger::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  Intent::default_instance_->InitAsDefaultInstance();
  Lease::default_instance_->InitAsDefaultInstance();
  AbortCacheEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto_once_);
void protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto_once_,
                 &protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2froachpb_2fdata_2eproto {
  StaticDescriptorInitializer_cockroach_2froachpb_2fdata_2eproto() {
    protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  }
} static_descriptor_initializer_cockroach_2froachpb_2fdata_2eproto_;
#endif
bool ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ReplicaChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool TransactionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

static ::std::string* MutableUnknownFieldsForSpan(
    Span* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kKeyFieldNumber;
const int Span::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Span)
}

void Span::InitAsDefaultInstance() {
}

Span::Span(const Span& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Span)
}

void Span::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Span& Span::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

Span* Span::default_instance_ = NULL;

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Span)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSpan, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 4;
      case 4: {
        if (tag == 34) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Span)
  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Span)
}

int Span::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Span)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes end_key = 4;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Span*>(&from));
}

void Span::MergeFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Span)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Span::CopyFrom(const Span& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Span)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {

  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  key_.Swap(&other->key_);
  end_key_.Swap(&other->end_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Span::GetTypeName() const {
  return "cockroach.roachpb.Span";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional bytes key = 3;
bool Span::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Span::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Span::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Span::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Span::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.key)
}
 void Span::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.key)
}
 void Span::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.key)
}
 ::std::string* Span::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Span.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.key)
}

// optional bytes end_key = 4;
bool Span::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Span::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Span::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Span::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
 const ::std::string& Span::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.end_key)
}
 void Span::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.end_key)
}
 void Span::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.end_key)
}
 ::std::string* Span::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_end_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Span.end_key)
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForValue(
    Value* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRawBytesFieldNumber;
const int Value::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Value)
}

void Value::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
}

Value::Value(const Value& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete timestamp_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Value& Value::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Value)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_raw_bytes()) {
      raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForValue, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw_bytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Value)
  // optional bytes raw_bytes = 1;
  if (has_raw_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_bytes(), output);
  }

  // optional .cockroach.util.hlc.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Value)
}

int Value::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Value)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes raw_bytes = 1;
    if (has_raw_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_bytes());
    }

    // optional .cockroach.util.hlc.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Value*>(&from));
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Value)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_bytes()) {
      set_has_raw_bytes();
      raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  raw_bytes_.Swap(&other->raw_bytes_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Value::GetTypeName() const {
  return "cockroach.roachpb.Value";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional bytes raw_bytes = 1;
bool Value::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Value::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void Value::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void Value::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
 const ::std::string& Value::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.raw_bytes)
}
 void Value::set_raw_bytes(const char* value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Value.raw_bytes)
}
 void Value::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Value.raw_bytes)
}
 ::std::string* Value::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Value::release_raw_bytes() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Value.raw_bytes)
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.raw_bytes)
}

// optional .cockroach.util.hlc.Timestamp timestamp = 2;
bool Value::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Value::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Value::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Value::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::util::hlc::Timestamp& Value::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timestamp_ != NULL ? *timestamp_ : *default_instance().timestamp_;
#else
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
#endif
}
::cockroach::util::hlc::Timestamp* Value::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.timestamp)
  return timestamp_;
}
::cockroach::util::hlc::Timestamp* Value::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Value.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Value::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForKeyValue(
    KeyValue* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  value_ = const_cast< ::cockroach::roachpb::Value*>(
      ::cockroach::roachpb::Value::internal_default_instance());
#else
  value_ = const_cast< ::cockroach::roachpb::Value*>(&::cockroach::roachpb::Value::default_instance());
#endif
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyValue& KeyValue::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.KeyValue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::roachpb::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForKeyValue, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.roachpb.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.roachpb.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->value_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.KeyValue)
}

int KeyValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.KeyValue)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.roachpb.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyValue*>(&from));
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeyValue::GetTypeName() const {
  return "cockroach.roachpb.KeyValue";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional bytes key = 1;
bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.KeyValue.key)
}
 void KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.KeyValue.key)
}
 void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.KeyValue.key)
}
 ::std::string* KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.KeyValue.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.key)
}

// optional .cockroach.roachpb.Value value = 2;
bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::roachpb::Value::Clear();
  clear_has_value();
}
const ::cockroach::roachpb::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.value)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return value_ != NULL ? *value_ : *default_instance().value_;
#else
  return value_ != NULL ? *value_ : *default_instance_->value_;
#endif
}
::cockroach::roachpb::Value* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.value)
  return value_;
}
::cockroach::roachpb::Value* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.KeyValue.value)
  clear_has_value();
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValue::set_allocated_value(::cockroach::roachpb::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForStoreIdent(
    StoreIdent* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoreIdent& StoreIdent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

StoreIdent* StoreIdent::default_instance_ = NULL;

StoreIdent* StoreIdent::New(::google::protobuf::Arena* arena) const {
  StoreIdent* n = new StoreIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.StoreIdent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoreIdent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreIdent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(node_id_, store_id_);
    if (has_cluster_id()) {
      cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForStoreIdent, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cluster_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 3;
      case 3: {
        if (tag == 24) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreIdent)
  // optional bytes cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cluster_id(), output);
  }

  // optional int32 node_id = 2;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // optional int32 store_id = 3;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreIdent)
}

int StoreIdent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.StoreIdent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cluster_id());
    }

    // optional int32 node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 3;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoreIdent*>(&from));
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.StoreIdent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_has_cluster_id();
      cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StoreIdent::GetTypeName() const {
  return "cockroach.roachpb.StoreIdent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreIdent

// optional bytes cluster_id = 1;
bool StoreIdent::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreIdent::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreIdent::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreIdent::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_id();
}
 const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.cluster_id)
}
 void StoreIdent::set_cluster_id(const char* value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.StoreIdent.cluster_id)
}
 void StoreIdent::set_cluster_id(const void* value, size_t size) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.StoreIdent.cluster_id)
}
 ::std::string* StoreIdent::mutable_cluster_id() {
  set_has_cluster_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreIdent::release_cluster_id() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.StoreIdent.cluster_id)
  clear_has_cluster_id();
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    set_has_cluster_id();
  } else {
    clear_has_cluster_id();
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreIdent.cluster_id)
}

// optional int32 node_id = 2;
bool StoreIdent::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreIdent::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreIdent::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreIdent::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.node_id)
  return node_id_;
}
 void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.node_id)
}

// optional int32 store_id = 3;
bool StoreIdent::has_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreIdent::set_has_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreIdent::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreIdent::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.store_id)
  return store_id_;
}
 void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForSplitTrigger(
    SplitTrigger* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitTrigger::kLeftDescFieldNumber;
const int SplitTrigger::kRightDescFieldNumber;
const int SplitTrigger::kInitialLeaderStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitTrigger::SplitTrigger()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
#else
  left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
#else
  right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
#endif
}

SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_desc_ = NULL;
  right_desc_ = NULL;
  initial_leader_store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete left_desc_;
    delete right_desc_;
  }
}

void SplitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SplitTrigger& SplitTrigger::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

SplitTrigger* SplitTrigger::default_instance_ = NULL;

SplitTrigger* SplitTrigger::New(::google::protobuf::Arena* arena) const {
  SplitTrigger* n = new SplitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.SplitTrigger)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_left_desc()) {
      if (left_desc_ != NULL) left_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    if (has_right_desc()) {
      if (right_desc_ != NULL) right_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    initial_leader_store_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForSplitTrigger, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SplitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_desc;
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_right_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_initial_leader_store_id;
        break;
      }

      // optional int32 initial_leader_store_id = 3;
      case 3: {
        if (tag == 24) {
         parse_initial_leader_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_leader_store_id_)));
          set_has_initial_leader_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SplitTrigger)
  // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
  if (has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->left_desc_, output);
  }

  // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
  if (has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->right_desc_, output);
  }

  // optional int32 initial_leader_store_id = 3;
  if (has_initial_leader_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initial_leader_store_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SplitTrigger)
}

int SplitTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.SplitTrigger)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
    if (has_left_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_desc_);
    }

    // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
    if (has_right_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_desc_);
    }

    // optional int32 initial_leader_store_id = 3;
    if (has_initial_leader_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_leader_store_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SplitTrigger*>(&from));
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.SplitTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_desc()) {
      mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
    }
    if (from.has_right_desc()) {
      mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
    }
    if (from.has_initial_leader_store_id()) {
      set_initial_leader_store_id(from.initial_leader_store_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.SplitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {

  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitTrigger::InternalSwap(SplitTrigger* other) {
  std::swap(left_desc_, other->left_desc_);
  std::swap(right_desc_, other->right_desc_);
  std::swap(initial_leader_store_id_, other->initial_leader_store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SplitTrigger::GetTypeName() const {
  return "cockroach.roachpb.SplitTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitTrigger

// optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
bool SplitTrigger::has_left_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitTrigger::set_has_left_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitTrigger::clear_has_left_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitTrigger::clear_left_desc() {
  if (left_desc_ != NULL) left_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_left_desc();
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::left_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.left_desc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return left_desc_ != NULL ? *left_desc_ : *default_instance().left_desc_;
#else
  return left_desc_ != NULL ? *left_desc_ : *default_instance_->left_desc_;
#endif
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_left_desc() {
  set_has_left_desc();
  if (left_desc_ == NULL) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.left_desc)
  return left_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SplitTrigger.left_desc)
  clear_has_left_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc) {
  delete left_desc_;
  left_desc_ = left_desc;
  if (left_desc) {
    set_has_left_desc();
  } else {
    clear_has_left_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.left_desc)
}

// optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
bool SplitTrigger::has_right_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitTrigger::set_has_right_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitTrigger::clear_has_right_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitTrigger::clear_right_desc() {
  if (right_desc_ != NULL) right_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_right_desc();
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::right_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.right_desc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return right_desc_ != NULL ? *right_desc_ : *default_instance().right_desc_;
#else
  return right_desc_ != NULL ? *right_desc_ : *default_instance_->right_desc_;
#endif
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_right_desc() {
  set_has_right_desc();
  if (right_desc_ == NULL) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.right_desc)
  return right_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.SplitTrigger.right_desc)
  clear_has_right_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc) {
  delete right_desc_;
  right_desc_ = right_desc;
  if (right_desc) {
    set_has_right_desc();
  } else {
    clear_has_right_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.right_desc)
}

// optional int32 initial_leader_store_id = 3;
bool SplitTrigger::has_initial_leader_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SplitTrigger::set_has_initial_leader_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SplitTrigger::clear_has_initial_leader_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SplitTrigger::clear_initial_leader_store_id() {
  initial_leader_store_id_ = 0;
  clear_has_initial_leader_store_id();
}
 ::google::protobuf::int32 SplitTrigger::initial_leader_store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.initial_leader_store_id)
  return initial_leader_store_id_;
}
 void SplitTrigger::set_initial_leader_store_id(::google::protobuf::int32 value) {
  set_has_initial_leader_store_id();
  initial_leader_store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SplitTrigger.initial_leader_store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForMergeTrigger(
    MergeTrigger* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeTrigger::kLeftDescFieldNumber;
const int MergeTrigger::kRightDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeTrigger::MergeTrigger()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
#else
  left_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(
      ::cockroach::roachpb::RangeDescriptor::internal_default_instance());
#else
  right_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
#endif
}

MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_desc_ = NULL;
  right_desc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete left_desc_;
    delete right_desc_;
  }
}

void MergeTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MergeTrigger& MergeTrigger::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

MergeTrigger* MergeTrigger::default_instance_ = NULL;

MergeTrigger* MergeTrigger::New(::google::protobuf::Arena* arena) const {
  MergeTrigger* n = new MergeTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.MergeTrigger)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_left_desc()) {
      if (left_desc_ != NULL) left_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    if (has_right_desc()) {
      if (right_desc_ != NULL) right_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForMergeTrigger, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right_desc;
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_right_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeTrigger)
  // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
  if (has_left_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->left_desc_, output);
  }

  // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
  if (has_right_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->right_desc_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeTrigger)
}

int MergeTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.MergeTrigger)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
    if (has_left_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_desc_);
    }

    // optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
    if (has_right_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_desc_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MergeTrigger*>(&from));
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.MergeTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_desc()) {
      mutable_left_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.left_desc());
    }
    if (from.has_right_desc()) {
      mutable_right_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.right_desc());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.MergeTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {

  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeTrigger::InternalSwap(MergeTrigger* other) {
  std::swap(left_desc_, other->left_desc_);
  std::swap(right_desc_, other->right_desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MergeTrigger::GetTypeName() const {
  return "cockroach.roachpb.MergeTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeTrigger

// optional .cockroach.roachpb.RangeDescriptor left_desc = 1;
bool MergeTrigger::has_left_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MergeTrigger::set_has_left_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void MergeTrigger::clear_has_left_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void MergeTrigger::clear_left_desc() {
  if (left_desc_ != NULL) left_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_left_desc();
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::left_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.left_desc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return left_desc_ != NULL ? *left_desc_ : *default_instance().left_desc_;
#else
  return left_desc_ != NULL ? *left_desc_ : *default_instance_->left_desc_;
#endif
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_left_desc() {
  set_has_left_desc();
  if (left_desc_ == NULL) {
    left_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.left_desc)
  return left_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_left_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeTrigger.left_desc)
  clear_has_left_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = left_desc_;
  left_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_left_desc(::cockroach::roachpb::RangeDescriptor* left_desc) {
  delete left_desc_;
  left_desc_ = left_desc;
  if (left_desc) {
    set_has_left_desc();
  } else {
    clear_has_left_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.left_desc)
}

// optional .cockroach.roachpb.RangeDescriptor right_desc = 2;
bool MergeTrigger::has_right_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MergeTrigger::set_has_right_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void MergeTrigger::clear_has_right_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void MergeTrigger::clear_right_desc() {
  if (right_desc_ != NULL) right_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_right_desc();
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::right_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.right_desc)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return right_desc_ != NULL ? *right_desc_ : *default_instance().right_desc_;
#else
  return right_desc_ != NULL ? *right_desc_ : *default_instance_->right_desc_;
#endif
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_right_desc() {
  set_has_right_desc();
  if (right_desc_ == NULL) {
    right_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.right_desc)
  return right_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_right_desc() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.MergeTrigger.right_desc)
  clear_has_right_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = right_desc_;
  right_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_right_desc(::cockroach::roachpb::RangeDescriptor* right_desc) {
  delete right_desc_;
  right_desc_ = right_desc;
  if (right_desc) {
    set_has_right_desc();
  } else {
    clear_has_right_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.right_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForChangeReplicasTrigger(
    ChangeReplicasTrigger* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReplicasTrigger::kChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kReplicaFieldNumber;
const int ChangeReplicasTrigger::kUpdatedReplicasFieldNumber;
const int ChangeReplicasTrigger::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
#else
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
#endif
}

ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  change_type_ = 0;
  replica_ = NULL;
  next_replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete replica_;
  }
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

ChangeReplicasTrigger* ChangeReplicasTrigger::default_instance_ = NULL;

ChangeReplicasTrigger* ChangeReplicasTrigger::New(::google::protobuf::Arena* arena) const {
  ChangeReplicasTrigger* n = new ChangeReplicasTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeReplicasTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ChangeReplicasTrigger)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChangeReplicasTrigger, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChangeReplicasTrigger*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(change_type_, next_replica_id_);
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  updated_replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForChangeReplicasTrigger, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::ReplicaChangeType_IsValid(value)) {
            set_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replica;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
      case 2: {
        if (tag == 18) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updated_replicas;
        break;
      }

      // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
      case 3: {
        if (tag == 26) {
         parse_updated_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_updated_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_updated_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_next_replica_id;
        break;
      }

      // optional int32 next_replica_id = 4;
      case 4: {
        if (tag == 32) {
         parse_next_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
          set_has_next_replica_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ChangeReplicasTrigger)
  // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->replica_, output);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  for (unsigned int i = 0, n = this->updated_replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->updated_replicas(i), output);
  }

  // optional int32 next_replica_id = 4;
  if (has_next_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_replica_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ChangeReplicasTrigger)
}

int ChangeReplicasTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ChangeReplicasTrigger)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

    // optional int32 next_replica_id = 4;
    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  total_size += 1 * this->updated_replicas_size();
  for (int i = 0; i < this->updated_replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updated_replicas(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeReplicasTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChangeReplicasTrigger*>(&from));
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  updated_replicas_.MergeFrom(from.updated_replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (from.has_next_replica_id()) {
      set_next_replica_id(from.next_replica_id());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ChangeReplicasTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {

  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReplicasTrigger::InternalSwap(ChangeReplicasTrigger* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(replica_, other->replica_);
  updated_replicas_.UnsafeArenaSwap(&other->updated_replicas_);
  std::swap(next_replica_id_, other->next_replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChangeReplicasTrigger::GetTypeName() const {
  return "cockroach.roachpb.ChangeReplicasTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeReplicasTrigger

// optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
bool ChangeReplicasTrigger::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeReplicasTrigger::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeReplicasTrigger::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
 ::cockroach::roachpb::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(change_type_);
}
 void ChangeReplicasTrigger::set_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  assert(::cockroach::roachpb::ReplicaChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.change_type)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
bool ChangeReplicasTrigger::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeReplicasTrigger::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeReplicasTrigger::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeReplicasTrigger::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.replica)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return replica_ != NULL ? *replica_ : *default_instance().replica_;
#else
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
#endif
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.ChangeReplicasTrigger.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void ChangeReplicasTrigger::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ChangeReplicasTrigger.replica)
}

// repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}

// optional int32 next_replica_id = 4;
bool ChangeReplicasTrigger::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChangeReplicasTrigger::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ChangeReplicasTrigger::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChangeReplicasTrigger::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
 ::google::protobuf::int32 ChangeReplicasTrigger::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
  return next_replica_id_;
}
 void ChangeReplicasTrigger::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForModifiedSpanTrigger(
    ModifiedSpanTrigger* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedSpanTrigger::kSystemConfigSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedSpanTrigger::ModifiedSpanTrigger()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::InitAsDefaultInstance() {
}

ModifiedSpanTrigger::ModifiedSpanTrigger(const ModifiedSpanTrigger& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_config_span_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifiedSpanTrigger::~ModifiedSpanTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ModifiedSpanTrigger)
  SharedDtor();
}

void ModifiedSpanTrigger::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModifiedSpanTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModifiedSpanTrigger& ModifiedSpanTrigger::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

ModifiedSpanTrigger* ModifiedSpanTrigger::default_instance_ = NULL;

ModifiedSpanTrigger* ModifiedSpanTrigger::New(::google::protobuf::Arena* arena) const {
  ModifiedSpanTrigger* n = new ModifiedSpanTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifiedSpanTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.ModifiedSpanTrigger)
  system_config_span_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ModifiedSpanTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForModifiedSpanTrigger, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ModifiedSpanTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool system_config_span = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_config_span_)));
          set_has_system_config_span();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ModifiedSpanTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ModifiedSpanTrigger)
  return false;
#undef DO_
}

void ModifiedSpanTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ModifiedSpanTrigger)
  // optional bool system_config_span = 1;
  if (has_system_config_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->system_config_span(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ModifiedSpanTrigger)
}

int ModifiedSpanTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.ModifiedSpanTrigger)
  int total_size = 0;

  // optional bool system_config_span = 1;
  if (has_system_config_span()) {
    total_size += 1 + 1;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifiedSpanTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModifiedSpanTrigger*>(&from));
}

void ModifiedSpanTrigger::MergeFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_config_span()) {
      set_system_config_span(from.system_config_span());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void ModifiedSpanTrigger::CopyFrom(const ModifiedSpanTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.ModifiedSpanTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedSpanTrigger::IsInitialized() const {

  return true;
}

void ModifiedSpanTrigger::Swap(ModifiedSpanTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedSpanTrigger::InternalSwap(ModifiedSpanTrigger* other) {
  std::swap(system_config_span_, other->system_config_span_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ModifiedSpanTrigger::GetTypeName() const {
  return "cockroach.roachpb.ModifiedSpanTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifiedSpanTrigger

// optional bool system_config_span = 1;
bool ModifiedSpanTrigger::has_system_config_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifiedSpanTrigger::set_has_system_config_span() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifiedSpanTrigger::clear_has_system_config_span() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifiedSpanTrigger::clear_system_config_span() {
  system_config_span_ = false;
  clear_has_system_config_span();
}
 bool ModifiedSpanTrigger::system_config_span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
  return system_config_span_;
}
 void ModifiedSpanTrigger::set_system_config_span(bool value) {
  set_has_system_config_span();
  system_config_span_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForInternalCommitTrigger(
    InternalCommitTrigger* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kModifiedSpanTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  split_trigger_ = const_cast< ::cockroach::roachpb::SplitTrigger*>(
      ::cockroach::roachpb::SplitTrigger::internal_default_instance());
#else
  split_trigger_ = const_cast< ::cockroach::roachpb::SplitTrigger*>(&::cockroach::roachpb::SplitTrigger::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  merge_trigger_ = const_cast< ::cockroach::roachpb::MergeTrigger*>(
      ::cockroach::roachpb::MergeTrigger::internal_default_instance());
#else
  merge_trigger_ = const_cast< ::cockroach::roachpb::MergeTrigger*>(&::cockroach::roachpb::MergeTrigger::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  change_replicas_trigger_ = const_cast< ::cockroach::roachpb::ChangeReplicasTrigger*>(
      ::cockroach::roachpb::ChangeReplicasTrigger::internal_default_instance());
#else
  change_replicas_trigger_ = const_cast< ::cockroach::roachpb::ChangeReplicasTrigger*>(&::cockroach::roachpb::ChangeReplicasTrigger::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  modified_span_trigger_ = const_cast< ::cockroach::roachpb::ModifiedSpanTrigger*>(
      ::cockroach::roachpb::ModifiedSpanTrigger::internal_default_instance());
#else
  modified_span_trigger_ = const_cast< ::cockroach::roachpb::ModifiedSpanTrigger*>(&::cockroach::roachpb::ModifiedSpanTrigger::default_instance());
#endif
}

InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  split_trigger_ = NULL;
  merge_trigger_ = NULL;
  change_replicas_trigger_ = NULL;
  modified_span_trigger_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete split_trigger_;
    delete merge_trigger_;
    delete change_replicas_trigger_;
    delete modified_span_trigger_;
  }
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

InternalCommitTrigger* InternalCommitTrigger::default_instance_ = NULL;

InternalCommitTrigger* InternalCommitTrigger::New(::google::protobuf::Arena* arena) const {
  InternalCommitTrigger* n = new InternalCommitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalCommitTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.InternalCommitTrigger)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_split_trigger()) {
      if (split_trigger_ != NULL) split_trigger_->::cockroach::roachpb::SplitTrigger::Clear();
    }
    if (has_merge_trigger()) {
      if (merge_trigger_ != NULL) merge_trigger_->::cockroach::roachpb::MergeTrigger::Clear();
    }
    if (has_change_replicas_trigger()) {
      if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::roachpb::ChangeReplicasTrigger::Clear();
    }
    if (has_modified_span_trigger()) {
      if (modified_span_trigger_ != NULL) modified_span_trigger_->::cockroach::roachpb::ModifiedSpanTrigger::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForInternalCommitTrigger, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InternalCommitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merge_trigger;
        break;
      }

      // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
      case 2: {
        if (tag == 18) {
         parse_merge_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_change_replicas_trigger;
        break;
      }

      // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (tag == 26) {
         parse_change_replicas_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_modified_span_trigger;
        break;
      }

      // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
      case 4: {
        if (tag == 34) {
         parse_modified_span_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified_span_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InternalCommitTrigger)
  // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->split_trigger_, output);
  }

  // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->merge_trigger_, output);
  }

  // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->change_replicas_trigger_, output);
  }

  // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (has_modified_span_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->modified_span_trigger_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InternalCommitTrigger)
}

int InternalCommitTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.InternalCommitTrigger)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
    if (has_split_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_trigger_);
    }

    // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
    if (has_merge_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->merge_trigger_);
    }

    // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
    if (has_change_replicas_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_replicas_trigger_);
    }

    // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
    if (has_modified_span_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modified_span_trigger_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalCommitTrigger::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalCommitTrigger*>(&from));
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.InternalCommitTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_trigger()) {
      mutable_split_trigger()->::cockroach::roachpb::SplitTrigger::MergeFrom(from.split_trigger());
    }
    if (from.has_merge_trigger()) {
      mutable_merge_trigger()->::cockroach::roachpb::MergeTrigger::MergeFrom(from.merge_trigger());
    }
    if (from.has_change_replicas_trigger()) {
      mutable_change_replicas_trigger()->::cockroach::roachpb::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
    }
    if (from.has_modified_span_trigger()) {
      mutable_modified_span_trigger()->::cockroach::roachpb::ModifiedSpanTrigger::MergeFrom(from.modified_span_trigger());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.InternalCommitTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {

  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalCommitTrigger::InternalSwap(InternalCommitTrigger* other) {
  std::swap(split_trigger_, other->split_trigger_);
  std::swap(merge_trigger_, other->merge_trigger_);
  std::swap(change_replicas_trigger_, other->change_replicas_trigger_);
  std::swap(modified_span_trigger_, other->modified_span_trigger_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string InternalCommitTrigger::GetTypeName() const {
  return "cockroach.roachpb.InternalCommitTrigger";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalCommitTrigger

// optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
bool InternalCommitTrigger::has_split_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalCommitTrigger::set_has_split_trigger() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalCommitTrigger::clear_has_split_trigger() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalCommitTrigger::clear_split_trigger() {
  if (split_trigger_ != NULL) split_trigger_->::cockroach::roachpb::SplitTrigger::Clear();
  clear_has_split_trigger();
}
const ::cockroach::roachpb::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.split_trigger)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return split_trigger_ != NULL ? *split_trigger_ : *default_instance().split_trigger_;
#else
  return split_trigger_ != NULL ? *split_trigger_ : *default_instance_->split_trigger_;
#endif
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  set_has_split_trigger();
  if (split_trigger_ == NULL) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  clear_has_split_trigger();
  ::cockroach::roachpb::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_split_trigger(::cockroach::roachpb::SplitTrigger* split_trigger) {
  delete split_trigger_;
  split_trigger_ = split_trigger;
  if (split_trigger) {
    set_has_split_trigger();
  } else {
    clear_has_split_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.split_trigger)
}

// optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
bool InternalCommitTrigger::has_merge_trigger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalCommitTrigger::set_has_merge_trigger() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalCommitTrigger::clear_has_merge_trigger() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalCommitTrigger::clear_merge_trigger() {
  if (merge_trigger_ != NULL) merge_trigger_->::cockroach::roachpb::MergeTrigger::Clear();
  clear_has_merge_trigger();
}
const ::cockroach::roachpb::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return merge_trigger_ != NULL ? *merge_trigger_ : *default_instance().merge_trigger_;
#else
  return merge_trigger_ != NULL ? *merge_trigger_ : *default_instance_->merge_trigger_;
#endif
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  set_has_merge_trigger();
  if (merge_trigger_ == NULL) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  clear_has_merge_trigger();
  ::cockroach::roachpb::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_merge_trigger(::cockroach::roachpb::MergeTrigger* merge_trigger) {
  delete merge_trigger_;
  merge_trigger_ = merge_trigger;
  if (merge_trigger) {
    set_has_merge_trigger();
  } else {
    clear_has_merge_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
}

// optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalCommitTrigger::set_has_change_replicas_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalCommitTrigger::clear_has_change_replicas_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::roachpb::ChangeReplicasTrigger::Clear();
  clear_has_change_replicas_trigger();
}
const ::cockroach::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return change_replicas_trigger_ != NULL ? *change_replicas_trigger_ : *default_instance().change_replicas_trigger_;
#else
  return change_replicas_trigger_ != NULL ? *change_replicas_trigger_ : *default_instance_->change_replicas_trigger_;
#endif
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  set_has_change_replicas_trigger();
  if (change_replicas_trigger_ == NULL) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  clear_has_change_replicas_trigger();
  ::cockroach::roachpb::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_change_replicas_trigger(::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger) {
  delete change_replicas_trigger_;
  change_replicas_trigger_ = change_replicas_trigger;
  if (change_replicas_trigger) {
    set_has_change_replicas_trigger();
  } else {
    clear_has_change_replicas_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
}

// optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
bool InternalCommitTrigger::has_modified_span_trigger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalCommitTrigger::set_has_modified_span_trigger() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalCommitTrigger::clear_has_modified_span_trigger() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalCommitTrigger::clear_modified_span_trigger() {
  if (modified_span_trigger_ != NULL) modified_span_trigger_->::cockroach::roachpb::ModifiedSpanTrigger::Clear();
  clear_has_modified_span_trigger();
}
const ::cockroach::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::modified_span_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return modified_span_trigger_ != NULL ? *modified_span_trigger_ : *default_instance().modified_span_trigger_;
#else
  return modified_span_trigger_ != NULL ? *modified_span_trigger_ : *default_instance_->modified_span_trigger_;
#endif
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::mutable_modified_span_trigger() {
  set_has_modified_span_trigger();
  if (modified_span_trigger_ == NULL) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_;
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::release_modified_span_trigger() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  clear_has_modified_span_trigger();
  ::cockroach::roachpb::ModifiedSpanTrigger* temp = modified_span_trigger_;
  modified_span_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_modified_span_trigger(::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger) {
  delete modified_span_trigger_;
  modified_span_trigger_ = modified_span_trigger;
  if (modified_span_trigger) {
    set_has_modified_span_trigger();
  } else {
    clear_has_modified_span_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForTransaction(
    Transaction* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kMetaFieldNumber;
const int Transaction::kNameFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kOrigTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kObservedTimestampsFieldNumber;
const int Transaction::kWritingFieldNumber;
const int Transaction::kWriteTooOldFieldNumber;
const int Transaction::kRetryOnPushFieldNumber;
const int Transaction::kIntentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Transaction)
}

void Transaction::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  meta_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
#else
  meta_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(&::cockroach::storage::engine::enginepb::TxnMeta::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  last_heartbeat_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  last_heartbeat_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  orig_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  orig_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  max_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  max_timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Transaction)
}

void Transaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  meta_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  last_heartbeat_ = NULL;
  orig_timestamp_ = NULL;
  max_timestamp_ = NULL;
  writing_ = false;
  write_too_old_ = false;
  retry_on_push_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete meta_;
    delete last_heartbeat_;
    delete orig_timestamp_;
    delete max_timestamp_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Transaction& Transaction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Transaction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Transaction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transaction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(status_, writing_);
    if (has_meta()) {
      if (meta_ != NULL) meta_->::cockroach::storage::engine::enginepb::TxnMeta::Clear();
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_heartbeat()) {
      if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::util::hlc::Timestamp::Clear();
    }
    if (has_orig_timestamp()) {
      if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
    }
    if (has_max_timestamp()) {
      if (max_timestamp_ != NULL) max_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
    }
  }
  ZR_(write_too_old_, retry_on_push_);

#undef ZR_HELPER_
#undef ZR_

  observed_timestamps_.Clear();
  intents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForTransaction, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.storage.engine.enginepb.TxnMeta meta = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .cockroach.roachpb.TransactionStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_heartbeat;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp last_heartbeat = 5;
      case 5: {
        if (tag == 42) {
         parse_last_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orig_timestamp;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp orig_timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_orig_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_max_timestamp;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp max_timestamp = 7;
      case 7: {
        if (tag == 58) {
         parse_max_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_observed_timestamps;
        break;
      }

      // map<int32, .cockroach.util.hlc.Timestamp> observed_timestamps = 8;
      case 8: {
        if (tag == 66) {
         parse_observed_timestamps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_observed_timestamps:
          ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry(observed_timestamps_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_observed_timestamps())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_observed_timestamps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_writing;
        break;
      }

      // optional bool writing = 9;
      case 9: {
        if (tag == 72) {
         parse_writing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writing_)));
          set_has_writing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_intents;
        break;
      }

      // repeated .cockroach.roachpb.Span intents = 11;
      case 11: {
        if (tag == 90) {
         parse_intents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_intents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_intents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_write_too_old;
        break;
      }

      // optional bool write_too_old = 12;
      case 12: {
        if (tag == 96) {
         parse_write_too_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_too_old_)));
          set_has_write_too_old();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_retry_on_push;
        break;
      }

      // optional bool retry_on_push = 13;
      case 13: {
        if (tag == 104) {
         parse_retry_on_push:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retry_on_push_)));
          set_has_retry_on_push();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Transaction)
  // optional .cockroach.storage.engine.enginepb.TxnMeta meta = 1;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->meta_, output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .cockroach.util.hlc.Timestamp last_heartbeat = 5;
  if (has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->last_heartbeat_, output);
  }

  // optional .cockroach.util.hlc.Timestamp orig_timestamp = 6;
  if (has_orig_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->orig_timestamp_, output);
  }

  // optional .cockroach.util.hlc.Timestamp max_timestamp = 7;
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->max_timestamp_, output);
  }

  // map<int32, .cockroach.util.hlc.Timestamp> observed_timestamps = 8;
  {
    ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::util::hlc::Timestamp >::const_iterator
        it = this->observed_timestamps().begin();
        it != this->observed_timestamps().end(); ++it) {
      entry.reset(observed_timestamps_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessage(
          8, *entry, output);
    }
  }

  // optional bool writing = 9;
  if (has_writing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->writing(), output);
  }

  // repeated .cockroach.roachpb.Span intents = 11;
  for (unsigned int i = 0, n = this->intents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->intents(i), output);
  }

  // optional bool write_too_old = 12;
  if (has_write_too_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->write_too_old(), output);
  }

  // optional bool retry_on_push = 13;
  if (has_retry_on_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->retry_on_push(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Transaction)
}

int Transaction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Transaction)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 191u) {
    // optional .cockroach.storage.engine.enginepb.TxnMeta meta = 1;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meta_);
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .cockroach.roachpb.TransactionStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .cockroach.util.hlc.Timestamp last_heartbeat = 5;
    if (has_last_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_heartbeat_);
    }

    // optional .cockroach.util.hlc.Timestamp orig_timestamp = 6;
    if (has_orig_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orig_timestamp_);
    }

    // optional .cockroach.util.hlc.Timestamp max_timestamp = 7;
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_timestamp_);
    }

    // optional bool writing = 9;
    if (has_writing()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool write_too_old = 12;
    if (has_write_too_old()) {
      total_size += 1 + 1;
    }

    // optional bool retry_on_push = 13;
    if (has_retry_on_push()) {
      total_size += 1 + 1;
    }

  }
  // map<int32, .cockroach.util.hlc.Timestamp> observed_timestamps = 8;
  total_size += 1 * this->observed_timestamps_size();
  {
    ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::util::hlc::Timestamp >::const_iterator
        it = this->observed_timestamps().begin();
        it != this->observed_timestamps().end(); ++it) {
      entry.reset(observed_timestamps_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .cockroach.roachpb.Span intents = 11;
  total_size += 1 * this->intents_size();
  for (int i = 0; i < this->intents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intents(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transaction*>(&from));
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  intents_.MergeFrom(from.intents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta()) {
      mutable_meta()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.meta());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last_heartbeat()) {
      mutable_last_heartbeat()->::cockroach::util::hlc::Timestamp::MergeFrom(from.last_heartbeat());
    }
    if (from.has_orig_timestamp()) {
      mutable_orig_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.orig_timestamp());
    }
    if (from.has_max_timestamp()) {
      mutable_max_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.max_timestamp());
    }
    if (from.has_writing()) {
      set_writing(from.writing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_write_too_old()) {
      set_write_too_old(from.write_too_old());
    }
    if (from.has_retry_on_push()) {
      set_retry_on_push(from.retry_on_push());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  std::swap(meta_, other->meta_);
  name_.Swap(&other->name_);
  std::swap(status_, other->status_);
  std::swap(last_heartbeat_, other->last_heartbeat_);
  std::swap(orig_timestamp_, other->orig_timestamp_);
  std::swap(max_timestamp_, other->max_timestamp_);
  observed_timestamps_.Swap(&other->observed_timestamps_);
  std::swap(writing_, other->writing_);
  std::swap(write_too_old_, other->write_too_old_);
  std::swap(retry_on_push_, other->retry_on_push_);
  intents_.UnsafeArenaSwap(&other->intents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Transaction::GetTypeName() const {
  return "cockroach.roachpb.Transaction";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// optional .cockroach.storage.engine.enginepb.TxnMeta meta = 1;
bool Transaction::has_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transaction::set_has_meta() {
  _has_bits_[0] |= 0x00000001u;
}
void Transaction::clear_has_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transaction::clear_meta() {
  if (meta_ != NULL) meta_->::cockroach::storage::engine::enginepb::TxnMeta::Clear();
  clear_has_meta();
}
const ::cockroach::storage::engine::enginepb::TxnMeta& Transaction::meta() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.meta)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return meta_ != NULL ? *meta_ : *default_instance().meta_;
#else
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
#endif
}
::cockroach::storage::engine::enginepb::TxnMeta* Transaction::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) {
    meta_ = new ::cockroach::storage::engine::enginepb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.meta)
  return meta_;
}
::cockroach::storage::engine::enginepb::TxnMeta* Transaction::release_meta() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.meta)
  clear_has_meta();
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Transaction::set_allocated_meta(::cockroach::storage::engine::enginepb::TxnMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.meta)
}

// optional string name = 2;
bool Transaction::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transaction::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Transaction::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.name)
}
 void Transaction::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.name)
}
 void Transaction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.name)
}
 ::std::string* Transaction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_name() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.name)
}

// optional .cockroach.roachpb.TransactionStatus status = 4;
bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transaction::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transaction::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::cockroach::roachpb::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
 void Transaction::set_status(::cockroach::roachpb::TransactionStatus value) {
  assert(::cockroach::roachpb::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.status)
}

// optional .cockroach.util.hlc.Timestamp last_heartbeat = 5;
bool Transaction::has_last_heartbeat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transaction::set_has_last_heartbeat() {
  _has_bits_[0] |= 0x00000008u;
}
void Transaction::clear_has_last_heartbeat() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transaction::clear_last_heartbeat() {
  if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_last_heartbeat();
}
const ::cockroach::util::hlc::Timestamp& Transaction::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.last_heartbeat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return last_heartbeat_ != NULL ? *last_heartbeat_ : *default_instance().last_heartbeat_;
#else
  return last_heartbeat_ != NULL ? *last_heartbeat_ : *default_instance_->last_heartbeat_;
#endif
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_last_heartbeat() {
  set_has_last_heartbeat();
  if (last_heartbeat_ == NULL) {
    last_heartbeat_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_last_heartbeat() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.last_heartbeat)
  clear_has_last_heartbeat();
  ::cockroach::util::hlc::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
void Transaction::set_allocated_last_heartbeat(::cockroach::util::hlc::Timestamp* last_heartbeat) {
  delete last_heartbeat_;
  last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    set_has_last_heartbeat();
  } else {
    clear_has_last_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.last_heartbeat)
}

// optional .cockroach.util.hlc.Timestamp orig_timestamp = 6;
bool Transaction::has_orig_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transaction::set_has_orig_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void Transaction::clear_has_orig_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transaction::clear_orig_timestamp() {
  if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_orig_timestamp();
}
const ::cockroach::util::hlc::Timestamp& Transaction::orig_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.orig_timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return orig_timestamp_ != NULL ? *orig_timestamp_ : *default_instance().orig_timestamp_;
#else
  return orig_timestamp_ != NULL ? *orig_timestamp_ : *default_instance_->orig_timestamp_;
#endif
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_orig_timestamp() {
  set_has_orig_timestamp();
  if (orig_timestamp_ == NULL) {
    orig_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_orig_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.orig_timestamp)
  clear_has_orig_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = orig_timestamp_;
  orig_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_orig_timestamp(::cockroach::util::hlc::Timestamp* orig_timestamp) {
  delete orig_timestamp_;
  orig_timestamp_ = orig_timestamp;
  if (orig_timestamp) {
    set_has_orig_timestamp();
  } else {
    clear_has_orig_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.orig_timestamp)
}

// optional .cockroach.util.hlc.Timestamp max_timestamp = 7;
bool Transaction::has_max_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transaction::set_has_max_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Transaction::clear_has_max_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transaction::clear_max_timestamp() {
  if (max_timestamp_ != NULL) max_timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_max_timestamp();
}
const ::cockroach::util::hlc::Timestamp& Transaction::max_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.max_timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return max_timestamp_ != NULL ? *max_timestamp_ : *default_instance().max_timestamp_;
#else
  return max_timestamp_ != NULL ? *max_timestamp_ : *default_instance_->max_timestamp_;
#endif
}
::cockroach::util::hlc::Timestamp* Transaction::mutable_max_timestamp() {
  set_has_max_timestamp();
  if (max_timestamp_ == NULL) {
    max_timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_;
}
::cockroach::util::hlc::Timestamp* Transaction::release_max_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Transaction.max_timestamp)
  clear_has_max_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_max_timestamp(::cockroach::util::hlc::Timestamp* max_timestamp) {
  delete max_timestamp_;
  max_timestamp_ = max_timestamp;
  if (max_timestamp) {
    set_has_max_timestamp();
  } else {
    clear_has_max_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.max_timestamp)
}

// map<int32, .cockroach.util.hlc.Timestamp> observed_timestamps = 8;
int Transaction::observed_timestamps_size() const {
  return observed_timestamps_.size();
}
void Transaction::clear_observed_timestamps() {
  observed_timestamps_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::util::hlc::Timestamp >&
Transaction::observed_timestamps() const {
  // @@protoc_insertion_point(field_map:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::util::hlc::Timestamp >*
Transaction::mutable_observed_timestamps() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.MutableMap();
}

// optional bool writing = 9;
bool Transaction::has_writing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transaction::set_has_writing() {
  _has_bits_[0] |= 0x00000080u;
}
void Transaction::clear_has_writing() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transaction::clear_writing() {
  writing_ = false;
  clear_has_writing();
}
 bool Transaction::writing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.writing)
  return writing_;
}
 void Transaction::set_writing(bool value) {
  set_has_writing();
  writing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.writing)
}

// optional bool write_too_old = 12;
bool Transaction::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transaction::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000100u;
}
void Transaction::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transaction::clear_write_too_old() {
  write_too_old_ = false;
  clear_has_write_too_old();
}
 bool Transaction::write_too_old() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.write_too_old)
  return write_too_old_;
}
 void Transaction::set_write_too_old(bool value) {
  set_has_write_too_old();
  write_too_old_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.write_too_old)
}

// optional bool retry_on_push = 13;
bool Transaction::has_retry_on_push() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transaction::set_has_retry_on_push() {
  _has_bits_[0] |= 0x00000200u;
}
void Transaction::clear_has_retry_on_push() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transaction::clear_retry_on_push() {
  retry_on_push_ = false;
  clear_has_retry_on_push();
}
 bool Transaction::retry_on_push() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.retry_on_push)
  return retry_on_push_;
}
 void Transaction::set_retry_on_push(bool value) {
  set_has_retry_on_push();
  retry_on_push_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.retry_on_push)
}

// repeated .cockroach.roachpb.Span intents = 11;
int Transaction::intents_size() const {
  return intents_.size();
}
void Transaction::clear_intents() {
  intents_.Clear();
}
const ::cockroach::roachpb::Span& Transaction::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.intents)
  return intents_.Get(index);
}
::cockroach::roachpb::Span* Transaction::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.intents)
  return intents_.Mutable(index);
}
::cockroach::roachpb::Span* Transaction::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Transaction.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
Transaction::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Transaction.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
Transaction::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Transaction.intents)
  return intents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForIntent(
    Intent* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kSpanFieldNumber;
const int Intent::kTxnFieldNumber;
const int Intent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Intent)
}

void Intent::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  span_ = const_cast< ::cockroach::roachpb::Span*>(
      ::cockroach::roachpb::Span::internal_default_instance());
#else
  span_ = const_cast< ::cockroach::roachpb::Span*>(&::cockroach::roachpb::Span::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  txn_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(
      ::cockroach::storage::engine::enginepb::TxnMeta::internal_default_instance());
#else
  txn_ = const_cast< ::cockroach::storage::engine::enginepb::TxnMeta*>(&::cockroach::storage::engine::enginepb::TxnMeta::default_instance());
#endif
}

Intent::Intent(const Intent& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Intent)
}

void Intent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  span_ = NULL;
  txn_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete span_;
    delete txn_;
  }
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Intent& Intent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

Intent* Intent::default_instance_ = NULL;

Intent* Intent::New(::google::protobuf::Arena* arena) const {
  Intent* n = new Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Intent)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_span()) {
      if (span_ != NULL) span_->::cockroach::roachpb::Span::Clear();
    }
    if (has_txn()) {
      if (txn_ != NULL) txn_->::cockroach::storage::engine::enginepb::TxnMeta::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForIntent, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Span span = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txn;
        break;
      }

      // optional .cockroach.storage.engine.enginepb.TxnMeta txn = 2;
      case 2: {
        if (tag == 18) {
         parse_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Intent)
  // optional .cockroach.roachpb.Span span = 1;
  if (has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->span_, output);
  }

  // optional .cockroach.storage.engine.enginepb.TxnMeta txn = 2;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->txn_, output);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Intent)
}

int Intent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Intent)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.Span span = 1;
    if (has_span()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->span_);
    }

    // optional .cockroach.storage.engine.enginepb.TxnMeta txn = 2;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txn_);
    }

    // optional .cockroach.roachpb.TransactionStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent*>(&from));
}

void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Intent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_span()) {
      mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
    }
    if (from.has_txn()) {
      mutable_txn()->::cockroach::storage::engine::enginepb::TxnMeta::MergeFrom(from.txn());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {

  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  std::swap(span_, other->span_);
  std::swap(txn_, other->txn_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Intent::GetTypeName() const {
  return "cockroach.roachpb.Intent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Intent

// optional .cockroach.roachpb.Span span = 1;
bool Intent::has_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Intent::set_has_span() {
  _has_bits_[0] |= 0x00000001u;
}
void Intent::clear_has_span() {
  _has_bits_[0] &= ~0x00000001u;
}
void Intent::clear_span() {
  if (span_ != NULL) span_->::cockroach::roachpb::Span::Clear();
  clear_has_span();
}
const ::cockroach::roachpb::Span& Intent::span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.span)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return span_ != NULL ? *span_ : *default_instance().span_;
#else
  return span_ != NULL ? *span_ : *default_instance_->span_;
#endif
}
::cockroach::roachpb::Span* Intent::mutable_span() {
  set_has_span();
  if (span_ == NULL) {
    span_ = new ::cockroach::roachpb::Span;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.span)
  return span_;
}
::cockroach::roachpb::Span* Intent::release_span() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Intent.span)
  clear_has_span();
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
void Intent::set_allocated_span(::cockroach::roachpb::Span* span) {
  delete span_;
  span_ = span;
  if (span) {
    set_has_span();
  } else {
    clear_has_span();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.span)
}

// optional .cockroach.storage.engine.enginepb.TxnMeta txn = 2;
bool Intent::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Intent::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
void Intent::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
void Intent::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::storage::engine::enginepb::TxnMeta::Clear();
  clear_has_txn();
}
const ::cockroach::storage::engine::enginepb::TxnMeta& Intent::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.txn)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return txn_ != NULL ? *txn_ : *default_instance().txn_;
#else
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
#endif
}
::cockroach::storage::engine::enginepb::TxnMeta* Intent::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::storage::engine::enginepb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.txn)
  return txn_;
}
::cockroach::storage::engine::enginepb::TxnMeta* Intent::release_txn() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Intent.txn)
  clear_has_txn();
  ::cockroach::storage::engine::enginepb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
void Intent::set_allocated_txn(::cockroach::storage::engine::enginepb::TxnMeta* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.txn)
}

// optional .cockroach.roachpb.TransactionStatus status = 3;
bool Intent::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Intent::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Intent::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Intent::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::cockroach::roachpb::TransactionStatus Intent::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
 void Intent::set_status(::cockroach::roachpb::TransactionStatus value) {
  assert(::cockroach::roachpb::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Intent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForLease(
    Lease* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kStartFieldNumber;
const int Lease::kStartStasisFieldNumber;
const int Lease::kExpirationFieldNumber;
const int Lease::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Lease)
}

void Lease::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  start_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  start_stasis_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  start_stasis_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  expiration_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  expiration_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(
      ::cockroach::roachpb::ReplicaDescriptor::internal_default_instance());
#else
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
#endif
}

Lease::Lease(const Lease& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Lease)
}

void Lease::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = NULL;
  start_stasis_ = NULL;
  expiration_ = NULL;
  replica_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete start_;
    delete start_stasis_;
    delete expiration_;
    delete replica_;
  }
}

void Lease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Lease& Lease::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

Lease* Lease::default_instance_ = NULL;

Lease* Lease::New(::google::protobuf::Arena* arena) const {
  Lease* n = new Lease;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.Lease)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_start()) {
      if (start_ != NULL) start_->::cockroach::util::hlc::Timestamp::Clear();
    }
    if (has_start_stasis()) {
      if (start_stasis_ != NULL) start_stasis_->::cockroach::util::hlc::Timestamp::Clear();
    }
    if (has_expiration()) {
      if (expiration_ != NULL) expiration_->::cockroach::util::hlc::Timestamp::Clear();
    }
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForLease, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Lease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.util.hlc.Timestamp start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_expiration;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp expiration = 2;
      case 2: {
        if (tag == 18) {
         parse_expiration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_replica;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
      case 3: {
        if (tag == 26) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_stasis;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp start_stasis = 4;
      case 4: {
        if (tag == 34) {
         parse_start_stasis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_stasis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Lease)
  // optional .cockroach.util.hlc.Timestamp start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->start_, output);
  }

  // optional .cockroach.util.hlc.Timestamp expiration = 2;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->expiration_, output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->replica_, output);
  }

  // optional .cockroach.util.hlc.Timestamp start_stasis = 4;
  if (has_start_stasis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->start_stasis_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Lease)
}

int Lease::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.Lease)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .cockroach.util.hlc.Timestamp start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .cockroach.util.hlc.Timestamp start_stasis = 4;
    if (has_start_stasis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_stasis_);
    }

    // optional .cockroach.util.hlc.Timestamp expiration = 2;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expiration_);
    }

    // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lease::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Lease*>(&from));
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.Lease)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start());
    }
    if (from.has_start_stasis()) {
      mutable_start_stasis()->::cockroach::util::hlc::Timestamp::MergeFrom(from.start_stasis());
    }
    if (from.has_expiration()) {
      mutable_expiration()->::cockroach::util::hlc::Timestamp::MergeFrom(from.expiration());
    }
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {

  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  std::swap(start_, other->start_);
  std::swap(start_stasis_, other->start_stasis_);
  std::swap(expiration_, other->expiration_);
  std::swap(replica_, other->replica_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Lease::GetTypeName() const {
  return "cockroach.roachpb.Lease";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lease

// optional .cockroach.util.hlc.Timestamp start = 1;
bool Lease::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lease::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void Lease::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lease::clear_start() {
  if (start_ != NULL) start_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_start();
}
const ::cockroach::util::hlc::Timestamp& Lease::start() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.start)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return start_ != NULL ? *start_ : *default_instance().start_;
#else
  return start_ != NULL ? *start_ : *default_instance_->start_;
#endif
}
::cockroach::util::hlc::Timestamp* Lease::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.start)
  return start_;
}
::cockroach::util::hlc::Timestamp* Lease::release_start() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.start)
  clear_has_start();
  ::cockroach::util::hlc::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
void Lease::set_allocated_start(::cockroach::util::hlc::Timestamp* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.start)
}

// optional .cockroach.util.hlc.Timestamp start_stasis = 4;
bool Lease::has_start_stasis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lease::set_has_start_stasis() {
  _has_bits_[0] |= 0x00000002u;
}
void Lease::clear_has_start_stasis() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lease::clear_start_stasis() {
  if (start_stasis_ != NULL) start_stasis_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_start_stasis();
}
const ::cockroach::util::hlc::Timestamp& Lease::start_stasis() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.start_stasis)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return start_stasis_ != NULL ? *start_stasis_ : *default_instance().start_stasis_;
#else
  return start_stasis_ != NULL ? *start_stasis_ : *default_instance_->start_stasis_;
#endif
}
::cockroach::util::hlc::Timestamp* Lease::mutable_start_stasis() {
  set_has_start_stasis();
  if (start_stasis_ == NULL) {
    start_stasis_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.start_stasis)
  return start_stasis_;
}
::cockroach::util::hlc::Timestamp* Lease::release_start_stasis() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.start_stasis)
  clear_has_start_stasis();
  ::cockroach::util::hlc::Timestamp* temp = start_stasis_;
  start_stasis_ = NULL;
  return temp;
}
void Lease::set_allocated_start_stasis(::cockroach::util::hlc::Timestamp* start_stasis) {
  delete start_stasis_;
  start_stasis_ = start_stasis;
  if (start_stasis) {
    set_has_start_stasis();
  } else {
    clear_has_start_stasis();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.start_stasis)
}

// optional .cockroach.util.hlc.Timestamp expiration = 2;
bool Lease::has_expiration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lease::set_has_expiration() {
  _has_bits_[0] |= 0x00000004u;
}
void Lease::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lease::clear_expiration() {
  if (expiration_ != NULL) expiration_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_expiration();
}
const ::cockroach::util::hlc::Timestamp& Lease::expiration() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.expiration)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return expiration_ != NULL ? *expiration_ : *default_instance().expiration_;
#else
  return expiration_ != NULL ? *expiration_ : *default_instance_->expiration_;
#endif
}
::cockroach::util::hlc::Timestamp* Lease::mutable_expiration() {
  set_has_expiration();
  if (expiration_ == NULL) {
    expiration_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.expiration)
  return expiration_;
}
::cockroach::util::hlc::Timestamp* Lease::release_expiration() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.expiration)
  clear_has_expiration();
  ::cockroach::util::hlc::Timestamp* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
void Lease::set_allocated_expiration(::cockroach::util::hlc::Timestamp* expiration) {
  delete expiration_;
  expiration_ = expiration;
  if (expiration) {
    set_has_expiration();
  } else {
    clear_has_expiration();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.expiration)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
bool Lease::has_replica() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lease::set_has_replica() {
  _has_bits_[0] |= 0x00000008u;
}
void Lease::clear_has_replica() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lease::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& Lease::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.replica)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return replica_ != NULL ? *replica_ : *default_instance().replica_;
#else
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
#endif
}
::cockroach::roachpb::ReplicaDescriptor* Lease::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* Lease::release_replica() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.Lease.replica)
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void Lease::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.replica)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForAbortCacheEntry(
    AbortCacheEntry* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbortCacheEntry::kKeyFieldNumber;
const int AbortCacheEntry::kTimestampFieldNumber;
const int AbortCacheEntry::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbortCacheEntry::AbortCacheEntry()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.AbortCacheEntry)
}

void AbortCacheEntry::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(
      ::cockroach::util::hlc::Timestamp::internal_default_instance());
#else
  timestamp_ = const_cast< ::cockroach::util::hlc::Timestamp*>(&::cockroach::util::hlc::Timestamp::default_instance());
#endif
}

AbortCacheEntry::AbortCacheEntry(const AbortCacheEntry& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.AbortCacheEntry)
}

void AbortCacheEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbortCacheEntry::~AbortCacheEntry() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.AbortCacheEntry)
  SharedDtor();
}

void AbortCacheEntry::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete timestamp_;
  }
}

void AbortCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AbortCacheEntry& AbortCacheEntry::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
#endif
  return *default_instance_;
}

AbortCacheEntry* AbortCacheEntry::default_instance_ = NULL;

AbortCacheEntry* AbortCacheEntry::New(::google::protobuf::Arena* arena) const {
  AbortCacheEntry* n = new AbortCacheEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbortCacheEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.roachpb.AbortCacheEntry)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
    }
    priority_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AbortCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::internal::NewPermanentCallback(
          &MutableUnknownFieldsForAbortCacheEntry, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.AbortCacheEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.util.hlc.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.AbortCacheEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.AbortCacheEntry)
  return false;
#undef DO_
}

void AbortCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.AbortCacheEntry)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.util.hlc.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->timestamp_, output);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.AbortCacheEntry)
}

int AbortCacheEntry::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.roachpb.AbortCacheEntry)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.util.hlc.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

    // optional int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbortCacheEntry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbortCacheEntry*>(&from));
}

void AbortCacheEntry::MergeFrom(const AbortCacheEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.roachpb.AbortCacheEntry)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::util::hlc::Timestamp::MergeFrom(from.timestamp());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void AbortCacheEntry::CopyFrom(const AbortCacheEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.roachpb.AbortCacheEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortCacheEntry::IsInitialized() const {

  return true;
}

void AbortCacheEntry::Swap(AbortCacheEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbortCacheEntry::InternalSwap(AbortCacheEntry* other) {
  key_.Swap(&other->key_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(priority_, other->priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AbortCacheEntry::GetTypeName() const {
  return "cockroach.roachpb.AbortCacheEntry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbortCacheEntry

// optional bytes key = 1;
bool AbortCacheEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AbortCacheEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void AbortCacheEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void AbortCacheEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& AbortCacheEntry::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortCacheEntry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbortCacheEntry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AbortCacheEntry.key)
}
 void AbortCacheEntry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.AbortCacheEntry.key)
}
 void AbortCacheEntry::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.AbortCacheEntry.key)
}
 ::std::string* AbortCacheEntry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AbortCacheEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbortCacheEntry::release_key() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AbortCacheEntry.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbortCacheEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AbortCacheEntry.key)
}

// optional .cockroach.util.hlc.Timestamp timestamp = 2;
bool AbortCacheEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AbortCacheEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void AbortCacheEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void AbortCacheEntry::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::util::hlc::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::util::hlc::Timestamp& AbortCacheEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortCacheEntry.timestamp)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return timestamp_ != NULL ? *timestamp_ : *default_instance().timestamp_;
#else
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
#endif
}
::cockroach::util::hlc::Timestamp* AbortCacheEntry::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::util::hlc::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.AbortCacheEntry.timestamp)
  return timestamp_;
}
::cockroach::util::hlc::Timestamp* AbortCacheEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:cockroach.roachpb.AbortCacheEntry.timestamp)
  clear_has_timestamp();
  ::cockroach::util::hlc::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void AbortCacheEntry::set_allocated_timestamp(::cockroach::util::hlc::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.AbortCacheEntry.timestamp)
}

// optional int32 priority = 3;
bool AbortCacheEntry::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AbortCacheEntry::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
void AbortCacheEntry::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
void AbortCacheEntry::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
 ::google::protobuf::int32 AbortCacheEntry::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.AbortCacheEntry.priority)
  return priority_;
}
 void AbortCacheEntry::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.AbortCacheEntry.priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
