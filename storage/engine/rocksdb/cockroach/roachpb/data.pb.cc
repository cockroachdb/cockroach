// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/roachpb/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

namespace {

const ::google::protobuf::Descriptor* Span_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeReplicasTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeReplicasTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifiedSpanTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifiedSpanTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalCommitTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalCommitTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxnMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxnMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_ObservedTimestampsEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Intent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Intent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Lease_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lease_reflection_ = NULL;
const ::google::protobuf::Descriptor* SequenceCacheEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SequenceCacheEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IsolationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto() {
  protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/roachpb/data.proto");
  GOOGLE_CHECK(file != NULL);
  Span_descriptor_ = file->message_type(0);
  static const int Span_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, end_key_),
  };
  Span_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_descriptor_,
      Span::default_instance_,
      Span_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _has_bits_[0]),
      -1,
      -1,
      sizeof(Span),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _internal_metadata_),
      -1);
  Timestamp_descriptor_ = file->message_type(1);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, wall_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, logical_),
  };
  Timestamp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::default_instance_,
      Timestamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_[0]),
      -1,
      -1,
      sizeof(Timestamp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_),
      -1);
  Value_descriptor_ = file->message_type(2);
  static const int Value_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, raw_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, timestamp_),
  };
  Value_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      -1,
      -1,
      sizeof(Value),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
      -1);
  KeyValue_descriptor_ = file->message_type(3);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
      -1);
  StoreIdent_descriptor_ = file->message_type(4);
  static const int StoreIdent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, store_id_),
  };
  StoreIdent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreIdent_descriptor_,
      StoreIdent::default_instance_,
      StoreIdent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreIdent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _internal_metadata_),
      -1);
  SplitTrigger_descriptor_ = file->message_type(5);
  static const int SplitTrigger_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, updated_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, new_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, initial_leader_store_id_),
  };
  SplitTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitTrigger_descriptor_,
      SplitTrigger::default_instance_,
      SplitTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(SplitTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitTrigger, _internal_metadata_),
      -1);
  MergeTrigger_descriptor_ = file->message_type(6);
  static const int MergeTrigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, updated_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, subsumed_desc_),
  };
  MergeTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeTrigger_descriptor_,
      MergeTrigger::default_instance_,
      MergeTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(MergeTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeTrigger, _internal_metadata_),
      -1);
  ChangeReplicasTrigger_descriptor_ = file->message_type(7);
  static const int ChangeReplicasTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, updated_replicas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, next_replica_id_),
  };
  ChangeReplicasTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeReplicasTrigger_descriptor_,
      ChangeReplicasTrigger::default_instance_,
      ChangeReplicasTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeReplicasTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeReplicasTrigger, _internal_metadata_),
      -1);
  ModifiedSpanTrigger_descriptor_ = file->message_type(8);
  static const int ModifiedSpanTrigger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifiedSpanTrigger, system_config_span_),
  };
  ModifiedSpanTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ModifiedSpanTrigger_descriptor_,
      ModifiedSpanTrigger::default_instance_,
      ModifiedSpanTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifiedSpanTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(ModifiedSpanTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifiedSpanTrigger, _internal_metadata_),
      -1);
  InternalCommitTrigger_descriptor_ = file->message_type(9);
  static const int InternalCommitTrigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, split_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, merge_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, change_replicas_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, modified_span_trigger_),
  };
  InternalCommitTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalCommitTrigger_descriptor_,
      InternalCommitTrigger::default_instance_,
      InternalCommitTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalCommitTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalCommitTrigger, _internal_metadata_),
      -1);
  TxnMeta_descriptor_ = file->message_type(10);
  static const int TxnMeta_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, isolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, timestamp_),
  };
  TxnMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxnMeta_descriptor_,
      TxnMeta::default_instance_,
      TxnMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(TxnMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnMeta, _internal_metadata_),
      -1);
  Transaction_descriptor_ = file->message_type(11);
  static const int Transaction_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, last_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, orig_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, max_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, observed_timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, writing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, write_too_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, intents_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      -1,
      -1,
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      -1);
  Transaction_ObservedTimestampsEntry_descriptor_ = Transaction_descriptor_->nested_type(0);
  Intent_descriptor_ = file->message_type(12);
  static const int Intent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, span_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, status_),
  };
  Intent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Intent_descriptor_,
      Intent::default_instance_,
      Intent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _has_bits_[0]),
      -1,
      -1,
      sizeof(Intent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _internal_metadata_),
      -1);
  Lease_descriptor_ = file->message_type(13);
  static const int Lease_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, replica_),
  };
  Lease_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Lease_descriptor_,
      Lease::default_instance_,
      Lease_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, _has_bits_[0]),
      -1,
      -1,
      sizeof(Lease),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lease, _internal_metadata_),
      -1);
  SequenceCacheEntry_descriptor_ = file->message_type(14);
  static const int SequenceCacheEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceCacheEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceCacheEntry, timestamp_),
  };
  SequenceCacheEntry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SequenceCacheEntry_descriptor_,
      SequenceCacheEntry::default_instance_,
      SequenceCacheEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceCacheEntry, _has_bits_[0]),
      -1,
      -1,
      sizeof(SequenceCacheEntry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SequenceCacheEntry, _internal_metadata_),
      -1);
  ValueType_descriptor_ = file->enum_type(0);
  ReplicaChangeType_descriptor_ = file->enum_type(1);
  IsolationType_descriptor_ = file->enum_type(2);
  TransactionStatus_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2froachpb_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_descriptor_, &Span::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Timestamp_descriptor_, &Timestamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreIdent_descriptor_, &StoreIdent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitTrigger_descriptor_, &SplitTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeTrigger_descriptor_, &MergeTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeReplicasTrigger_descriptor_, &ChangeReplicasTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ModifiedSpanTrigger_descriptor_, &ModifiedSpanTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalCommitTrigger_descriptor_, &InternalCommitTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxnMeta_descriptor_, &TxnMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Transaction_ObservedTimestampsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::cockroach::roachpb::Timestamp,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Transaction_ObservedTimestampsEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Intent_descriptor_, &Intent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Lease_descriptor_, &Lease::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SequenceCacheEntry_descriptor_, &SequenceCacheEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto() {
  delete Span::default_instance_;
  delete Span_reflection_;
  delete Timestamp::default_instance_;
  delete Timestamp_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete StoreIdent::default_instance_;
  delete StoreIdent_reflection_;
  delete SplitTrigger::default_instance_;
  delete SplitTrigger_reflection_;
  delete MergeTrigger::default_instance_;
  delete MergeTrigger_reflection_;
  delete ChangeReplicasTrigger::default_instance_;
  delete ChangeReplicasTrigger_reflection_;
  delete ModifiedSpanTrigger::default_instance_;
  delete ModifiedSpanTrigger_reflection_;
  delete InternalCommitTrigger::default_instance_;
  delete InternalCommitTrigger_reflection_;
  delete TxnMeta::default_instance_;
  delete TxnMeta_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete Intent::default_instance_;
  delete Intent_reflection_;
  delete Lease::default_instance_;
  delete Lease_reflection_;
  delete SequenceCacheEntry::default_instance_;
  delete SequenceCacheEntry_reflection_;
}

void protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::roachpb::protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cockroach/roachpb/data.proto\022\021cockroac"
    "h.roachpb\032 cockroach/roachpb/metadata.pr"
    "oto\032\024gogoproto/gogo.proto\"6\n\004Span\022\024\n\003key"
    "\030\003 \001(\014B\007\372\336\037\003Key\022\030\n\007end_key\030\004 \001(\014B\007\372\336\037\003Ke"
    "y\"A\n\tTimestamp\022\027\n\twall_time\030\001 \001(\003B\004\310\336\037\000\022"
    "\025\n\007logical\030\002 \001(\005B\004\310\336\037\000:\004\230\240\037\000\"Q\n\005Value\022\021\n"
    "\traw_bytes\030\001 \001(\014\0225\n\ttimestamp\030\002 \001(\0132\034.co"
    "ckroach.roachpb.TimestampB\004\310\336\037\000\"O\n\010KeyVa"
    "lue\022\024\n\003key\030\001 \001(\014B\007\372\336\037\003Key\022-\n\005value\030\002 \001(\013"
    "2\030.cockroach.roachpb.ValueB\004\310\336\037\000\"\277\001\n\nSto"
    "reIdent\022X\n\ncluster_id\030\001 \001(\014BD\310\336\037\000\342\336\037\tClu"
    "sterID\332\336\037/github.com/cockroachdb/cockroa"
    "ch/util/uuid.UUID\022)\n\007node_id\030\002 \001(\005B\030\310\336\037\000"
    "\342\336\037\006NodeID\372\336\037\006NodeID\022,\n\010store_id\030\003 \001(\005B\032"
    "\310\336\037\000\342\336\037\007StoreID\372\336\037\007StoreID\"\324\001\n\014SplitTrig"
    "ger\022>\n\014updated_desc\030\001 \001(\0132\".cockroach.ro"
    "achpb.RangeDescriptorB\004\310\336\037\000\022:\n\010new_desc\030"
    "\002 \001(\0132\".cockroach.roachpb.RangeDescripto"
    "rB\004\310\336\037\000\022H\n\027initial_leader_store_id\030\003 \001(\005"
    "B\'\310\336\037\000\342\336\037\024InitialLeaderStoreID\372\336\037\007StoreI"
    "D\"\217\001\n\014MergeTrigger\022>\n\014updated_desc\030\001 \001(\013"
    "2\".cockroach.roachpb.RangeDescriptorB\004\310\336"
    "\037\000\022\?\n\rsubsumed_desc\030\002 \001(\0132\".cockroach.ro"
    "achpb.RangeDescriptorB\004\310\336\037\000\"\230\002\n\025ChangeRe"
    "plicasTrigger\022\?\n\013change_type\030\001 \001(\0162$.coc"
    "kroach.roachpb.ReplicaChangeTypeB\004\310\336\037\000\022;"
    "\n\007replica\030\002 \001(\0132$.cockroach.roachpb.Repl"
    "icaDescriptorB\004\310\336\037\000\022D\n\020updated_replicas\030"
    "\003 \003(\0132$.cockroach.roachpb.ReplicaDescrip"
    "torB\004\310\336\037\000\022;\n\017next_replica_id\030\004 \001(\005B\"\310\336\037\000"
    "\342\336\037\rNextReplicaID\372\336\037\tReplicaID\"7\n\023Modifi"
    "edSpanTrigger\022 \n\022system_config_span\030\001 \001("
    "\010B\004\310\336\037\000\"\237\002\n\025InternalCommitTrigger\0226\n\rspl"
    "it_trigger\030\001 \001(\0132\037.cockroach.roachpb.Spl"
    "itTrigger\0226\n\rmerge_trigger\030\002 \001(\0132\037.cockr"
    "oach.roachpb.MergeTrigger\022I\n\027change_repl"
    "icas_trigger\030\003 \001(\0132(.cockroach.roachpb.C"
    "hangeReplicasTrigger\022E\n\025modified_span_tr"
    "igger\030\004 \001(\0132&.cockroach.roachpb.Modified"
    "SpanTrigger:\004\210\240\037\001\"\355\001\n\007TxnMeta\022E\n\002id\030\001 \001("
    "\014B9\342\336\037\002ID\332\336\037/github.com/cockroachdb/cock"
    "roach/util/uuid.UUID\0229\n\tisolation\030\002 \001(\0162"
    " .cockroach.roachpb.IsolationTypeB\004\310\336\037\000\022"
    "\024\n\003key\030\003 \001(\014B\007\372\336\037\003Key\022\023\n\005epoch\030\004 \001(\rB\004\310\336"
    "\037\000\0225\n\ttimestamp\030\005 \001(\0132\034.cockroach.roachp"
    "b.TimestampB\004\310\336\037\000\"\226\005\n\013Transaction\0222\n\004met"
    "a\030\001 \001(\0132\032.cockroach.roachpb.TxnMetaB\010\310\336\037"
    "\000\320\336\037\001\022\022\n\004name\030\002 \001(\tB\004\310\336\037\000\022\026\n\010priority\030\003 "
    "\001(\005B\004\310\336\037\000\022:\n\006status\030\004 \001(\0162$.cockroach.ro"
    "achpb.TransactionStatusB\004\310\336\037\000\0224\n\016last_he"
    "artbeat\030\005 \001(\0132\034.cockroach.roachpb.Timest"
    "amp\022:\n\016orig_timestamp\030\006 \001(\0132\034.cockroach."
    "roachpb.TimestampB\004\310\336\037\000\0229\n\rmax_timestamp"
    "\030\007 \001(\0132\034.cockroach.roachpb.TimestampB\004\310\336"
    "\037\000\022c\n\023observed_timestamps\030\010 \003(\01326.cockro"
    "ach.roachpb.Transaction.ObservedTimestam"
    "psEntryB\016\310\336\037\000\202\337\037\006NodeID\022\025\n\007writing\030\t \001(\010"
    "B\004\310\336\037\000\022\033\n\rwrite_too_old\030\014 \001(\010B\004\310\336\037\000\022\026\n\010s"
    "equence\030\n \001(\rB\004\310\336\037\000\022.\n\007intents\030\013 \003(\0132\027.c"
    "ockroach.roachpb.SpanB\004\310\336\037\000\032W\n\027ObservedT"
    "imestampsEntry\022\013\n\003key\030\001 \001(\005\022+\n\005value\030\002 \001"
    "(\0132\034.cockroach.roachpb.Timestamp:\0028\001:\004\230\240"
    "\037\000\"\244\001\n\006Intent\022/\n\004span\030\001 \001(\0132\027.cockroach."
    "roachpb.SpanB\010\310\336\037\000\320\336\037\001\022-\n\003txn\030\002 \001(\0132\032.co"
    "ckroach.roachpb.TxnMetaB\004\310\336\037\000\022:\n\006status\030"
    "\003 \001(\0162$.cockroach.roachpb.TransactionSta"
    "tusB\004\310\336\037\000\"\265\001\n\005Lease\0221\n\005start\030\001 \001(\0132\034.coc"
    "kroach.roachpb.TimestampB\004\310\336\037\000\0226\n\nexpira"
    "tion\030\002 \001(\0132\034.cockroach.roachpb.Timestamp"
    "B\004\310\336\037\000\022;\n\007replica\030\003 \001(\0132$.cockroach.roac"
    "hpb.ReplicaDescriptorB\004\310\336\037\000:\004\230\240\037\000\"a\n\022Seq"
    "uenceCacheEntry\022\024\n\003key\030\001 \001(\014B\007\372\336\037\003Key\0225\n"
    "\ttimestamp\030\002 \001(\0132\034.cockroach.roachpb.Tim"
    "estampB\004\310\336\037\000*l\n\tValueType\022\013\n\007UNKNOWN\020\000\022\007"
    "\n\003INT\020\001\022\t\n\005FLOAT\020\002\022\t\n\005BYTES\020\003\022\010\n\004TIME\020\004\022"
    "\013\n\007DECIMAL\020\005\022\014\n\010DURATION\020\006\022\016\n\nTIMESERIES"
    "\020d*>\n\021ReplicaChangeType\022\017\n\013ADD_REPLICA\020\000"
    "\022\022\n\016REMOVE_REPLICA\020\001\032\004\210\243\036\000*5\n\rIsolationT"
    "ype\022\020\n\014SERIALIZABLE\020\000\022\014\n\010SNAPSHOT\020\001\032\004\210\243\036"
    "\000*B\n\021TransactionStatus\022\013\n\007PENDING\020\000\022\r\n\tC"
    "OMMITTED\020\001\022\013\n\007ABORTED\020\002\032\004\210\243\036\000B\tZ\007roachpb"
    "X\001", 3242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/roachpb/data.proto", &protobuf_RegisterTypes);
  Span::default_instance_ = new Span();
  Timestamp::default_instance_ = new Timestamp();
  Value::default_instance_ = new Value();
  KeyValue::default_instance_ = new KeyValue();
  StoreIdent::default_instance_ = new StoreIdent();
  SplitTrigger::default_instance_ = new SplitTrigger();
  MergeTrigger::default_instance_ = new MergeTrigger();
  ChangeReplicasTrigger::default_instance_ = new ChangeReplicasTrigger();
  ModifiedSpanTrigger::default_instance_ = new ModifiedSpanTrigger();
  InternalCommitTrigger::default_instance_ = new InternalCommitTrigger();
  TxnMeta::default_instance_ = new TxnMeta();
  Transaction::default_instance_ = new Transaction();
  Intent::default_instance_ = new Intent();
  Lease::default_instance_ = new Lease();
  SequenceCacheEntry::default_instance_ = new SequenceCacheEntry();
  Span::default_instance_->InitAsDefaultInstance();
  Timestamp::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  KeyValue::default_instance_->InitAsDefaultInstance();
  StoreIdent::default_instance_->InitAsDefaultInstance();
  SplitTrigger::default_instance_->InitAsDefaultInstance();
  MergeTrigger::default_instance_->InitAsDefaultInstance();
  ChangeReplicasTrigger::default_instance_->InitAsDefaultInstance();
  ModifiedSpanTrigger::default_instance_->InitAsDefaultInstance();
  InternalCommitTrigger::default_instance_->InitAsDefaultInstance();
  TxnMeta::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  Intent::default_instance_->InitAsDefaultInstance();
  Lease::default_instance_->InitAsDefaultInstance();
  SequenceCacheEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2froachpb_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2froachpb_2fdata_2eproto {
  StaticDescriptorInitializer_cockroach_2froachpb_2fdata_2eproto() {
    protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  }
} static_descriptor_initializer_cockroach_2froachpb_2fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}
bool ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplicaChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicaChangeType_descriptor_;
}
bool ReplicaChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IsolationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolationType_descriptor_;
}
bool IsolationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransactionStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionStatus_descriptor_;
}
bool TransactionStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kKeyFieldNumber;
const int Span::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Span)
}

void Span::InitAsDefaultInstance() {
}

Span::Span(const Span& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Span)
}

void Span::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_descriptor_;
}

const Span& Span::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Span* Span::default_instance_ = NULL;

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 4;
      case 4: {
        if (tag == 34) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Span)
  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->end_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Span)
}

::google::protobuf::uint8* Span::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Span)
  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional bytes end_key = 4;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->end_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Span)
  return target;
}

int Span::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes end_key = 4;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {

  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  key_.Swap(&other->key_);
  end_key_.Swap(&other->end_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_descriptor_;
  metadata.reflection = Span_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional bytes key = 3;
bool Span::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Span::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Span::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Span::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Span::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.key)
}
 void Span::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.key)
}
 void Span::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.key)
}
 ::std::string* Span::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.key)
}

// optional bytes end_key = 4;
bool Span::has_end_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Span::set_has_end_key() {
  _has_bits_[0] |= 0x00000002u;
}
void Span::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void Span::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
 const ::std::string& Span::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Span.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Span.end_key)
}
 void Span::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Span.end_key)
}
 void Span::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Span.end_key)
}
 ::std::string* Span::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Span.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_end_key() {
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Span.end_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kWallTimeFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  wall_time_ = GOOGLE_LONGLONG(0);
  logical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Timestamp* Timestamp::default_instance_ = NULL;

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Timestamp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wall_time_, logical_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 wall_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wall_time_)));
          set_has_wall_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logical;
        break;
      }

      // optional int32 logical = 2;
      case 2: {
        if (tag == 16) {
         parse_logical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logical_)));
          set_has_logical();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Timestamp)
  // optional int64 wall_time = 1;
  if (has_wall_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wall_time(), output);
  }

  // optional int32 logical = 2;
  if (has_logical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->logical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Timestamp)
}

::google::protobuf::uint8* Timestamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Timestamp)
  // optional int64 wall_time = 1;
  if (has_wall_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->wall_time(), target);
  }

  // optional int32 logical = 2;
  if (has_logical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->logical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Timestamp)
  return target;
}

int Timestamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 wall_time = 1;
    if (has_wall_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wall_time());
    }

    // optional int32 logical = 2;
    if (has_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logical());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Timestamp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wall_time()) {
      set_wall_time(from.wall_time());
    }
    if (from.has_logical()) {
      set_logical(from.logical());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  std::swap(wall_time_, other->wall_time_);
  std::swap(logical_, other->logical_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// optional int64 wall_time = 1;
bool Timestamp::has_wall_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Timestamp::set_has_wall_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Timestamp::clear_has_wall_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Timestamp::clear_wall_time() {
  wall_time_ = GOOGLE_LONGLONG(0);
  clear_has_wall_time();
}
 ::google::protobuf::int64 Timestamp::wall_time() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Timestamp.wall_time)
  return wall_time_;
}
 void Timestamp::set_wall_time(::google::protobuf::int64 value) {
  set_has_wall_time();
  wall_time_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Timestamp.wall_time)
}

// optional int32 logical = 2;
bool Timestamp::has_logical() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Timestamp::set_has_logical() {
  _has_bits_[0] |= 0x00000002u;
}
void Timestamp::clear_has_logical() {
  _has_bits_[0] &= ~0x00000002u;
}
void Timestamp::clear_logical() {
  logical_ = 0;
  clear_has_logical();
}
 ::google::protobuf::int32 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Timestamp.logical)
  return logical_;
}
 void Timestamp::set_logical(::google::protobuf::int32 value) {
  set_has_logical();
  logical_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Timestamp.logical)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kRawBytesFieldNumber;
const int Value::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Value)
}

void Value::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raw_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  raw_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New(::google::protobuf::Arena* arena) const {
  Value* n = new Value;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_raw_bytes()) {
      raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes raw_bytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Value)
  // optional bytes raw_bytes = 1;
  if (has_raw_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->raw_bytes(), output);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Value)
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Value)
  // optional bytes raw_bytes = 1;
  if (has_raw_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->raw_bytes(), target);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Value)
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes raw_bytes = 1;
    if (has_raw_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_bytes());
    }

    // optional .cockroach.roachpb.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Value* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_bytes()) {
      set_has_raw_bytes();
      raw_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_bytes_);
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {

  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  raw_bytes_.Swap(&other->raw_bytes_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// optional bytes raw_bytes = 1;
bool Value::has_raw_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Value::set_has_raw_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void Value::clear_has_raw_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void Value::clear_raw_bytes() {
  raw_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_raw_bytes();
}
 const ::std::string& Value::raw_bytes() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_raw_bytes(const ::std::string& value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Value.raw_bytes)
}
 void Value::set_raw_bytes(const char* value) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Value.raw_bytes)
}
 void Value::set_raw_bytes(const void* value, size_t size) {
  set_has_raw_bytes();
  raw_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Value.raw_bytes)
}
 ::std::string* Value::mutable_raw_bytes() {
  set_has_raw_bytes();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.raw_bytes)
  return raw_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Value::release_raw_bytes() {
  clear_has_raw_bytes();
  return raw_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Value::set_allocated_raw_bytes(::std::string* raw_bytes) {
  if (raw_bytes != NULL) {
    set_has_raw_bytes();
  } else {
    clear_has_raw_bytes();
  }
  raw_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_bytes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.raw_bytes)
}

// optional .cockroach.roachpb.Timestamp timestamp = 2;
bool Value::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Value::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Value::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Value::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::roachpb::Timestamp& Value::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Value.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::cockroach::roachpb::Timestamp* Value::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Value.timestamp)
  return timestamp_;
}
::cockroach::roachpb::Timestamp* Value::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Value::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Value.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
  value_ = const_cast< ::cockroach::roachpb::Value*>(&::cockroach::roachpb::Value::default_instance());
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.KeyValue)
}

void KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      if (value_ != NULL) value_->::cockroach::roachpb::Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .cockroach.roachpb.Value value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.roachpb.Value value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.KeyValue)
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .cockroach.roachpb.Value value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.KeyValue)
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.roachpb.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->value_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      mutable_value()->::cockroach::roachpb::Value::MergeFrom(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional bytes key = 1;
bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.KeyValue.key)
}
 void KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.KeyValue.key)
}
 void KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.KeyValue.key)
}
 ::std::string* KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.key)
}

// optional .cockroach.roachpb.Value value = 2;
bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void KeyValue::clear_value() {
  if (value_ != NULL) value_->::cockroach::roachpb::Value::Clear();
  clear_has_value();
}
const ::cockroach::roachpb::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.KeyValue.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::cockroach::roachpb::Value* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == NULL) {
    value_ = new ::cockroach::roachpb::Value;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.KeyValue.value)
  return value_;
}
::cockroach::roachpb::Value* KeyValue::release_value() {
  clear_has_value();
  ::cockroach::roachpb::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValue::set_allocated_value(::cockroach::roachpb::Value* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kNodeIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_id_ = 0;
  store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
  cluster_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIdent_descriptor_;
}

const StoreIdent& StoreIdent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

StoreIdent* StoreIdent::default_instance_ = NULL;

StoreIdent* StoreIdent::New(::google::protobuf::Arena* arena) const {
  StoreIdent* n = new StoreIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreIdent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreIdent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(node_id_, store_id_);
    if (has_cluster_id()) {
      cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cluster_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cluster_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_id;
        break;
      }

      // optional int32 node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 3;
      case 3: {
        if (tag == 24) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreIdent)
  // optional bytes cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cluster_id(), output);
  }

  // optional int32 node_id = 2;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_id(), output);
  }

  // optional int32 store_id = 3;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreIdent)
}

::google::protobuf::uint8* StoreIdent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.StoreIdent)
  // optional bytes cluster_id = 1;
  if (has_cluster_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cluster_id(), target);
  }

  // optional int32 node_id = 2;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_id(), target);
  }

  // optional int32 store_id = 3;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.StoreIdent)
  return target;
}

int StoreIdent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cluster_id());
    }

    // optional int32 node_id = 2;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 3;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreIdent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreIdent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_has_cluster_id();
      cluster_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_id_);
    }
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreIdent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  cluster_id_.Swap(&other->cluster_id_);
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIdent_descriptor_;
  metadata.reflection = StoreIdent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreIdent

// optional bytes cluster_id = 1;
bool StoreIdent::has_cluster_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreIdent::set_has_cluster_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreIdent::clear_has_cluster_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreIdent::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_id();
}
 const ::std::string& StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_cluster_id(const ::std::string& value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.cluster_id)
}
 void StoreIdent::set_cluster_id(const char* value) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.StoreIdent.cluster_id)
}
 void StoreIdent::set_cluster_id(const void* value, size_t size) {
  set_has_cluster_id();
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.StoreIdent.cluster_id)
}
 ::std::string* StoreIdent::mutable_cluster_id() {
  set_has_cluster_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreIdent.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StoreIdent::release_cluster_id() {
  clear_has_cluster_id();
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StoreIdent::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    set_has_cluster_id();
  } else {
    clear_has_cluster_id();
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreIdent.cluster_id)
}

// optional int32 node_id = 2;
bool StoreIdent::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreIdent::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreIdent::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreIdent::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 StoreIdent::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.node_id)
  return node_id_;
}
 void StoreIdent::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.node_id)
}

// optional int32 store_id = 3;
bool StoreIdent::has_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreIdent::set_has_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreIdent::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreIdent::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreIdent.store_id)
  return store_id_;
}
 void StoreIdent::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreIdent.store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitTrigger::kUpdatedDescFieldNumber;
const int SplitTrigger::kNewDescFieldNumber;
const int SplitTrigger::kInitialLeaderStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitTrigger::SplitTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::InitAsDefaultInstance() {
  updated_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
  new_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
}

SplitTrigger::SplitTrigger(const SplitTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SplitTrigger)
}

void SplitTrigger::SharedCtor() {
  _cached_size_ = 0;
  updated_desc_ = NULL;
  new_desc_ = NULL;
  initial_leader_store_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitTrigger::~SplitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SplitTrigger)
  SharedDtor();
}

void SplitTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete updated_desc_;
    delete new_desc_;
  }
}

void SplitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitTrigger_descriptor_;
}

const SplitTrigger& SplitTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

SplitTrigger* SplitTrigger::default_instance_ = NULL;

SplitTrigger* SplitTrigger::New(::google::protobuf::Arena* arena) const {
  SplitTrigger* n = new SplitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitTrigger::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_updated_desc()) {
      if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    if (has_new_desc()) {
      if (new_desc_ != NULL) new_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    initial_leader_store_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SplitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SplitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_desc;
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_new_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_initial_leader_store_id;
        break;
      }

      // optional int32 initial_leader_store_id = 3;
      case 3: {
        if (tag == 24) {
         parse_initial_leader_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_leader_store_id_)));
          set_has_initial_leader_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SplitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SplitTrigger)
  return false;
#undef DO_
}

void SplitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SplitTrigger)
  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->updated_desc_, output);
  }

  // optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
  if (has_new_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->new_desc_, output);
  }

  // optional int32 initial_leader_store_id = 3;
  if (has_initial_leader_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->initial_leader_store_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SplitTrigger)
}

::google::protobuf::uint8* SplitTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.SplitTrigger)
  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->updated_desc_, target);
  }

  // optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
  if (has_new_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->new_desc_, target);
  }

  // optional int32 initial_leader_store_id = 3;
  if (has_initial_leader_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->initial_leader_store_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.SplitTrigger)
  return target;
}

int SplitTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
    if (has_updated_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updated_desc_);
    }

    // optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
    if (has_new_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_desc_);
    }

    // optional int32 initial_leader_store_id = 3;
    if (has_initial_leader_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_leader_store_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitTrigger>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitTrigger::MergeFrom(const SplitTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updated_desc()) {
      mutable_updated_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.updated_desc());
    }
    if (from.has_new_desc()) {
      mutable_new_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.new_desc());
    }
    if (from.has_initial_leader_store_id()) {
      set_initial_leader_store_id(from.initial_leader_store_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SplitTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitTrigger::CopyFrom(const SplitTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitTrigger::IsInitialized() const {

  return true;
}

void SplitTrigger::Swap(SplitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitTrigger::InternalSwap(SplitTrigger* other) {
  std::swap(updated_desc_, other->updated_desc_);
  std::swap(new_desc_, other->new_desc_);
  std::swap(initial_leader_store_id_, other->initial_leader_store_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitTrigger_descriptor_;
  metadata.reflection = SplitTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitTrigger

// optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
bool SplitTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SplitTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void SplitTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void SplitTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) {
    updated_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.updated_desc)
  return updated_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.updated_desc)
}

// optional .cockroach.roachpb.RangeDescriptor new_desc = 2;
bool SplitTrigger::has_new_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SplitTrigger::set_has_new_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void SplitTrigger::clear_has_new_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void SplitTrigger::clear_new_desc() {
  if (new_desc_ != NULL) new_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_new_desc();
}
const ::cockroach::roachpb::RangeDescriptor& SplitTrigger::new_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.new_desc)
  return new_desc_ != NULL ? *new_desc_ : *default_instance_->new_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::mutable_new_desc() {
  set_has_new_desc();
  if (new_desc_ == NULL) {
    new_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SplitTrigger.new_desc)
  return new_desc_;
}
::cockroach::roachpb::RangeDescriptor* SplitTrigger::release_new_desc() {
  clear_has_new_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = new_desc_;
  new_desc_ = NULL;
  return temp;
}
void SplitTrigger::set_allocated_new_desc(::cockroach::roachpb::RangeDescriptor* new_desc) {
  delete new_desc_;
  new_desc_ = new_desc;
  if (new_desc) {
    set_has_new_desc();
  } else {
    clear_has_new_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SplitTrigger.new_desc)
}

// optional int32 initial_leader_store_id = 3;
bool SplitTrigger::has_initial_leader_store_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SplitTrigger::set_has_initial_leader_store_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SplitTrigger::clear_has_initial_leader_store_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SplitTrigger::clear_initial_leader_store_id() {
  initial_leader_store_id_ = 0;
  clear_has_initial_leader_store_id();
}
 ::google::protobuf::int32 SplitTrigger::initial_leader_store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SplitTrigger.initial_leader_store_id)
  return initial_leader_store_id_;
}
 void SplitTrigger::set_initial_leader_store_id(::google::protobuf::int32 value) {
  set_has_initial_leader_store_id();
  initial_leader_store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SplitTrigger.initial_leader_store_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeTrigger::kUpdatedDescFieldNumber;
const int MergeTrigger::kSubsumedDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeTrigger::MergeTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::InitAsDefaultInstance() {
  updated_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
  subsumed_desc_ = const_cast< ::cockroach::roachpb::RangeDescriptor*>(&::cockroach::roachpb::RangeDescriptor::default_instance());
}

MergeTrigger::MergeTrigger(const MergeTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.MergeTrigger)
}

void MergeTrigger::SharedCtor() {
  _cached_size_ = 0;
  updated_desc_ = NULL;
  subsumed_desc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MergeTrigger::~MergeTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.MergeTrigger)
  SharedDtor();
}

void MergeTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete updated_desc_;
    delete subsumed_desc_;
  }
}

void MergeTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeTrigger_descriptor_;
}

const MergeTrigger& MergeTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

MergeTrigger* MergeTrigger::default_instance_ = NULL;

MergeTrigger* MergeTrigger::New(::google::protobuf::Arena* arena) const {
  MergeTrigger* n = new MergeTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeTrigger::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_updated_desc()) {
      if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
    if (has_subsumed_desc()) {
      if (subsumed_desc_ != NULL) subsumed_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MergeTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.MergeTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subsumed_desc;
        break;
      }

      // optional .cockroach.roachpb.RangeDescriptor subsumed_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_subsumed_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subsumed_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.MergeTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.MergeTrigger)
  return false;
#undef DO_
}

void MergeTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.MergeTrigger)
  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->updated_desc_, output);
  }

  // optional .cockroach.roachpb.RangeDescriptor subsumed_desc = 2;
  if (has_subsumed_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->subsumed_desc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.MergeTrigger)
}

::google::protobuf::uint8* MergeTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.MergeTrigger)
  // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
  if (has_updated_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->updated_desc_, target);
  }

  // optional .cockroach.roachpb.RangeDescriptor subsumed_desc = 2;
  if (has_subsumed_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->subsumed_desc_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.MergeTrigger)
  return target;
}

int MergeTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
    if (has_updated_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->updated_desc_);
    }

    // optional .cockroach.roachpb.RangeDescriptor subsumed_desc = 2;
    if (has_subsumed_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subsumed_desc_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MergeTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeTrigger>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeTrigger::MergeFrom(const MergeTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_updated_desc()) {
      mutable_updated_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.updated_desc());
    }
    if (from.has_subsumed_desc()) {
      mutable_subsumed_desc()->::cockroach::roachpb::RangeDescriptor::MergeFrom(from.subsumed_desc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MergeTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeTrigger::CopyFrom(const MergeTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeTrigger::IsInitialized() const {

  return true;
}

void MergeTrigger::Swap(MergeTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeTrigger::InternalSwap(MergeTrigger* other) {
  std::swap(updated_desc_, other->updated_desc_);
  std::swap(subsumed_desc_, other->subsumed_desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeTrigger_descriptor_;
  metadata.reflection = MergeTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeTrigger

// optional .cockroach.roachpb.RangeDescriptor updated_desc = 1;
bool MergeTrigger::has_updated_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MergeTrigger::set_has_updated_desc() {
  _has_bits_[0] |= 0x00000001u;
}
void MergeTrigger::clear_has_updated_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
void MergeTrigger::clear_updated_desc() {
  if (updated_desc_ != NULL) updated_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_updated_desc();
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::updated_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.updated_desc)
  return updated_desc_ != NULL ? *updated_desc_ : *default_instance_->updated_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_updated_desc() {
  set_has_updated_desc();
  if (updated_desc_ == NULL) {
    updated_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.updated_desc)
  return updated_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_updated_desc() {
  clear_has_updated_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = updated_desc_;
  updated_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_updated_desc(::cockroach::roachpb::RangeDescriptor* updated_desc) {
  delete updated_desc_;
  updated_desc_ = updated_desc;
  if (updated_desc) {
    set_has_updated_desc();
  } else {
    clear_has_updated_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.updated_desc)
}

// optional .cockroach.roachpb.RangeDescriptor subsumed_desc = 2;
bool MergeTrigger::has_subsumed_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MergeTrigger::set_has_subsumed_desc() {
  _has_bits_[0] |= 0x00000002u;
}
void MergeTrigger::clear_has_subsumed_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
void MergeTrigger::clear_subsumed_desc() {
  if (subsumed_desc_ != NULL) subsumed_desc_->::cockroach::roachpb::RangeDescriptor::Clear();
  clear_has_subsumed_desc();
}
const ::cockroach::roachpb::RangeDescriptor& MergeTrigger::subsumed_desc() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.MergeTrigger.subsumed_desc)
  return subsumed_desc_ != NULL ? *subsumed_desc_ : *default_instance_->subsumed_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::mutable_subsumed_desc() {
  set_has_subsumed_desc();
  if (subsumed_desc_ == NULL) {
    subsumed_desc_ = new ::cockroach::roachpb::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.MergeTrigger.subsumed_desc)
  return subsumed_desc_;
}
::cockroach::roachpb::RangeDescriptor* MergeTrigger::release_subsumed_desc() {
  clear_has_subsumed_desc();
  ::cockroach::roachpb::RangeDescriptor* temp = subsumed_desc_;
  subsumed_desc_ = NULL;
  return temp;
}
void MergeTrigger::set_allocated_subsumed_desc(::cockroach::roachpb::RangeDescriptor* subsumed_desc) {
  delete subsumed_desc_;
  subsumed_desc_ = subsumed_desc;
  if (subsumed_desc) {
    set_has_subsumed_desc();
  } else {
    clear_has_subsumed_desc();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.MergeTrigger.subsumed_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeReplicasTrigger::kChangeTypeFieldNumber;
const int ChangeReplicasTrigger::kReplicaFieldNumber;
const int ChangeReplicasTrigger::kUpdatedReplicasFieldNumber;
const int ChangeReplicasTrigger::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeReplicasTrigger::ChangeReplicasTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::InitAsDefaultInstance() {
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
}

ChangeReplicasTrigger::ChangeReplicasTrigger(const ChangeReplicasTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ChangeReplicasTrigger)
}

void ChangeReplicasTrigger::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 0;
  replica_ = NULL;
  next_replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeReplicasTrigger::~ChangeReplicasTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ChangeReplicasTrigger)
  SharedDtor();
}

void ChangeReplicasTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete replica_;
  }
}

void ChangeReplicasTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeReplicasTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeReplicasTrigger_descriptor_;
}

const ChangeReplicasTrigger& ChangeReplicasTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

ChangeReplicasTrigger* ChangeReplicasTrigger::default_instance_ = NULL;

ChangeReplicasTrigger* ChangeReplicasTrigger::New(::google::protobuf::Arena* arena) const {
  ChangeReplicasTrigger* n = new ChangeReplicasTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeReplicasTrigger::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChangeReplicasTrigger*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 11u) {
    ZR_(change_type_, next_replica_id_);
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  updated_replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeReplicasTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ChangeReplicasTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::ReplicaChangeType_IsValid(value)) {
            set_change_type(static_cast< ::cockroach::roachpb::ReplicaChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replica;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
      case 2: {
        if (tag == 18) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updated_replicas;
        break;
      }

      // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
      case 3: {
        if (tag == 26) {
         parse_updated_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_updated_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_updated_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_updated_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_next_replica_id;
        break;
      }

      // optional int32 next_replica_id = 4;
      case 4: {
        if (tag == 32) {
         parse_next_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
          set_has_next_replica_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ChangeReplicasTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ChangeReplicasTrigger)
  return false;
#undef DO_
}

void ChangeReplicasTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ChangeReplicasTrigger)
  // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->replica_, output);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  for (unsigned int i = 0, n = this->updated_replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updated_replicas(i), output);
  }

  // optional int32 next_replica_id = 4;
  if (has_next_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->next_replica_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ChangeReplicasTrigger)
}

::google::protobuf::uint8* ChangeReplicasTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ChangeReplicasTrigger)
  // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->replica_, target);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  for (unsigned int i = 0, n = this->updated_replicas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updated_replicas(i), target);
  }

  // optional int32 next_replica_id = 4;
  if (has_next_replica_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->next_replica_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ChangeReplicasTrigger)
  return target;
}

int ChangeReplicasTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 11u) {
    // optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

    // optional int32 next_replica_id = 4;
    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  // repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
  total_size += 1 * this->updated_replicas_size();
  for (int i = 0; i < this->updated_replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updated_replicas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeReplicasTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangeReplicasTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeReplicasTrigger>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeReplicasTrigger::MergeFrom(const ChangeReplicasTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  updated_replicas_.MergeFrom(from.updated_replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
    if (from.has_next_replica_id()) {
      set_next_replica_id(from.next_replica_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeReplicasTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeReplicasTrigger::CopyFrom(const ChangeReplicasTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeReplicasTrigger::IsInitialized() const {

  return true;
}

void ChangeReplicasTrigger::Swap(ChangeReplicasTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeReplicasTrigger::InternalSwap(ChangeReplicasTrigger* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(replica_, other->replica_);
  updated_replicas_.UnsafeArenaSwap(&other->updated_replicas_);
  std::swap(next_replica_id_, other->next_replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeReplicasTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeReplicasTrigger_descriptor_;
  metadata.reflection = ChangeReplicasTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeReplicasTrigger

// optional .cockroach.roachpb.ReplicaChangeType change_type = 1;
bool ChangeReplicasTrigger::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeReplicasTrigger::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeReplicasTrigger::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeReplicasTrigger::clear_change_type() {
  change_type_ = 0;
  clear_has_change_type();
}
 ::cockroach::roachpb::ReplicaChangeType ChangeReplicasTrigger::change_type() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.change_type)
  return static_cast< ::cockroach::roachpb::ReplicaChangeType >(change_type_);
}
 void ChangeReplicasTrigger::set_change_type(::cockroach::roachpb::ReplicaChangeType value) {
  assert(::cockroach::roachpb::ReplicaChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.change_type)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 2;
bool ChangeReplicasTrigger::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeReplicasTrigger::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeReplicasTrigger::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeReplicasTrigger::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void ChangeReplicasTrigger::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.ChangeReplicasTrigger.replica)
}

// repeated .cockroach.roachpb.ReplicaDescriptor updated_replicas = 3;
int ChangeReplicasTrigger::updated_replicas_size() const {
  return updated_replicas_.size();
}
void ChangeReplicasTrigger::clear_updated_replicas() {
  updated_replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& ChangeReplicasTrigger::updated_replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::mutable_updated_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* ChangeReplicasTrigger::add_updated_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
ChangeReplicasTrigger::mutable_updated_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return &updated_replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
ChangeReplicasTrigger::updated_replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.ChangeReplicasTrigger.updated_replicas)
  return updated_replicas_;
}

// optional int32 next_replica_id = 4;
bool ChangeReplicasTrigger::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChangeReplicasTrigger::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ChangeReplicasTrigger::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChangeReplicasTrigger::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
 ::google::protobuf::int32 ChangeReplicasTrigger::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
  return next_replica_id_;
}
 void ChangeReplicasTrigger::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ChangeReplicasTrigger.next_replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifiedSpanTrigger::kSystemConfigSpanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifiedSpanTrigger::ModifiedSpanTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::InitAsDefaultInstance() {
}

ModifiedSpanTrigger::ModifiedSpanTrigger(const ModifiedSpanTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ModifiedSpanTrigger)
}

void ModifiedSpanTrigger::SharedCtor() {
  _cached_size_ = 0;
  system_config_span_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifiedSpanTrigger::~ModifiedSpanTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ModifiedSpanTrigger)
  SharedDtor();
}

void ModifiedSpanTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifiedSpanTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifiedSpanTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifiedSpanTrigger_descriptor_;
}

const ModifiedSpanTrigger& ModifiedSpanTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

ModifiedSpanTrigger* ModifiedSpanTrigger::default_instance_ = NULL;

ModifiedSpanTrigger* ModifiedSpanTrigger::New(::google::protobuf::Arena* arena) const {
  ModifiedSpanTrigger* n = new ModifiedSpanTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModifiedSpanTrigger::Clear() {
  system_config_span_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ModifiedSpanTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ModifiedSpanTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool system_config_span = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_config_span_)));
          set_has_system_config_span();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ModifiedSpanTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ModifiedSpanTrigger)
  return false;
#undef DO_
}

void ModifiedSpanTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ModifiedSpanTrigger)
  // optional bool system_config_span = 1;
  if (has_system_config_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->system_config_span(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ModifiedSpanTrigger)
}

::google::protobuf::uint8* ModifiedSpanTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ModifiedSpanTrigger)
  // optional bool system_config_span = 1;
  if (has_system_config_span()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->system_config_span(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ModifiedSpanTrigger)
  return target;
}

int ModifiedSpanTrigger::ByteSize() const {
  int total_size = 0;

  // optional bool system_config_span = 1;
  if (has_system_config_span()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifiedSpanTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ModifiedSpanTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifiedSpanTrigger>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifiedSpanTrigger::MergeFrom(const ModifiedSpanTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_config_span()) {
      set_system_config_span(from.system_config_span());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ModifiedSpanTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifiedSpanTrigger::CopyFrom(const ModifiedSpanTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifiedSpanTrigger::IsInitialized() const {

  return true;
}

void ModifiedSpanTrigger::Swap(ModifiedSpanTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModifiedSpanTrigger::InternalSwap(ModifiedSpanTrigger* other) {
  std::swap(system_config_span_, other->system_config_span_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifiedSpanTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifiedSpanTrigger_descriptor_;
  metadata.reflection = ModifiedSpanTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModifiedSpanTrigger

// optional bool system_config_span = 1;
bool ModifiedSpanTrigger::has_system_config_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModifiedSpanTrigger::set_has_system_config_span() {
  _has_bits_[0] |= 0x00000001u;
}
void ModifiedSpanTrigger::clear_has_system_config_span() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModifiedSpanTrigger::clear_system_config_span() {
  system_config_span_ = false;
  clear_has_system_config_span();
}
 bool ModifiedSpanTrigger::system_config_span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
  return system_config_span_;
}
 void ModifiedSpanTrigger::set_system_config_span(bool value) {
  set_has_system_config_span();
  system_config_span_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ModifiedSpanTrigger.system_config_span)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalCommitTrigger::kSplitTriggerFieldNumber;
const int InternalCommitTrigger::kMergeTriggerFieldNumber;
const int InternalCommitTrigger::kChangeReplicasTriggerFieldNumber;
const int InternalCommitTrigger::kModifiedSpanTriggerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalCommitTrigger::InternalCommitTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::InitAsDefaultInstance() {
  split_trigger_ = const_cast< ::cockroach::roachpb::SplitTrigger*>(&::cockroach::roachpb::SplitTrigger::default_instance());
  merge_trigger_ = const_cast< ::cockroach::roachpb::MergeTrigger*>(&::cockroach::roachpb::MergeTrigger::default_instance());
  change_replicas_trigger_ = const_cast< ::cockroach::roachpb::ChangeReplicasTrigger*>(&::cockroach::roachpb::ChangeReplicasTrigger::default_instance());
  modified_span_trigger_ = const_cast< ::cockroach::roachpb::ModifiedSpanTrigger*>(&::cockroach::roachpb::ModifiedSpanTrigger::default_instance());
}

InternalCommitTrigger::InternalCommitTrigger(const InternalCommitTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.InternalCommitTrigger)
}

void InternalCommitTrigger::SharedCtor() {
  _cached_size_ = 0;
  split_trigger_ = NULL;
  merge_trigger_ = NULL;
  change_replicas_trigger_ = NULL;
  modified_span_trigger_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalCommitTrigger::~InternalCommitTrigger() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.InternalCommitTrigger)
  SharedDtor();
}

void InternalCommitTrigger::SharedDtor() {
  if (this != default_instance_) {
    delete split_trigger_;
    delete merge_trigger_;
    delete change_replicas_trigger_;
    delete modified_span_trigger_;
  }
}

void InternalCommitTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalCommitTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalCommitTrigger_descriptor_;
}

const InternalCommitTrigger& InternalCommitTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

InternalCommitTrigger* InternalCommitTrigger::default_instance_ = NULL;

InternalCommitTrigger* InternalCommitTrigger::New(::google::protobuf::Arena* arena) const {
  InternalCommitTrigger* n = new InternalCommitTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalCommitTrigger::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_split_trigger()) {
      if (split_trigger_ != NULL) split_trigger_->::cockroach::roachpb::SplitTrigger::Clear();
    }
    if (has_merge_trigger()) {
      if (merge_trigger_ != NULL) merge_trigger_->::cockroach::roachpb::MergeTrigger::Clear();
    }
    if (has_change_replicas_trigger()) {
      if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::roachpb::ChangeReplicasTrigger::Clear();
    }
    if (has_modified_span_trigger()) {
      if (modified_span_trigger_ != NULL) modified_span_trigger_->::cockroach::roachpb::ModifiedSpanTrigger::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalCommitTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.InternalCommitTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merge_trigger;
        break;
      }

      // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
      case 2: {
        if (tag == 18) {
         parse_merge_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_change_replicas_trigger;
        break;
      }

      // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
      case 3: {
        if (tag == 26) {
         parse_change_replicas_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_replicas_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_modified_span_trigger;
        break;
      }

      // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
      case 4: {
        if (tag == 34) {
         parse_modified_span_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modified_span_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.InternalCommitTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.InternalCommitTrigger)
  return false;
#undef DO_
}

void InternalCommitTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.InternalCommitTrigger)
  // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (has_split_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->split_trigger_, output);
  }

  // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (has_merge_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->merge_trigger_, output);
  }

  // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (has_change_replicas_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->change_replicas_trigger_, output);
  }

  // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (has_modified_span_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->modified_span_trigger_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.InternalCommitTrigger)
}

::google::protobuf::uint8* InternalCommitTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.InternalCommitTrigger)
  // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
  if (has_split_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->split_trigger_, target);
  }

  // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
  if (has_merge_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->merge_trigger_, target);
  }

  // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
  if (has_change_replicas_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->change_replicas_trigger_, target);
  }

  // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
  if (has_modified_span_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->modified_span_trigger_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.InternalCommitTrigger)
  return target;
}

int InternalCommitTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
    if (has_split_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->split_trigger_);
    }

    // optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
    if (has_merge_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->merge_trigger_);
    }

    // optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
    if (has_change_replicas_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_replicas_trigger_);
    }

    // optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
    if (has_modified_span_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->modified_span_trigger_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalCommitTrigger::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalCommitTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalCommitTrigger>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalCommitTrigger::MergeFrom(const InternalCommitTrigger& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_split_trigger()) {
      mutable_split_trigger()->::cockroach::roachpb::SplitTrigger::MergeFrom(from.split_trigger());
    }
    if (from.has_merge_trigger()) {
      mutable_merge_trigger()->::cockroach::roachpb::MergeTrigger::MergeFrom(from.merge_trigger());
    }
    if (from.has_change_replicas_trigger()) {
      mutable_change_replicas_trigger()->::cockroach::roachpb::ChangeReplicasTrigger::MergeFrom(from.change_replicas_trigger());
    }
    if (from.has_modified_span_trigger()) {
      mutable_modified_span_trigger()->::cockroach::roachpb::ModifiedSpanTrigger::MergeFrom(from.modified_span_trigger());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalCommitTrigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCommitTrigger::CopyFrom(const InternalCommitTrigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCommitTrigger::IsInitialized() const {

  return true;
}

void InternalCommitTrigger::Swap(InternalCommitTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalCommitTrigger::InternalSwap(InternalCommitTrigger* other) {
  std::swap(split_trigger_, other->split_trigger_);
  std::swap(merge_trigger_, other->merge_trigger_);
  std::swap(change_replicas_trigger_, other->change_replicas_trigger_);
  std::swap(modified_span_trigger_, other->modified_span_trigger_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalCommitTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalCommitTrigger_descriptor_;
  metadata.reflection = InternalCommitTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalCommitTrigger

// optional .cockroach.roachpb.SplitTrigger split_trigger = 1;
bool InternalCommitTrigger::has_split_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalCommitTrigger::set_has_split_trigger() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalCommitTrigger::clear_has_split_trigger() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalCommitTrigger::clear_split_trigger() {
  if (split_trigger_ != NULL) split_trigger_->::cockroach::roachpb::SplitTrigger::Clear();
  clear_has_split_trigger();
}
const ::cockroach::roachpb::SplitTrigger& InternalCommitTrigger::split_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_ != NULL ? *split_trigger_ : *default_instance_->split_trigger_;
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::mutable_split_trigger() {
  set_has_split_trigger();
  if (split_trigger_ == NULL) {
    split_trigger_ = new ::cockroach::roachpb::SplitTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.split_trigger)
  return split_trigger_;
}
::cockroach::roachpb::SplitTrigger* InternalCommitTrigger::release_split_trigger() {
  clear_has_split_trigger();
  ::cockroach::roachpb::SplitTrigger* temp = split_trigger_;
  split_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_split_trigger(::cockroach::roachpb::SplitTrigger* split_trigger) {
  delete split_trigger_;
  split_trigger_ = split_trigger;
  if (split_trigger) {
    set_has_split_trigger();
  } else {
    clear_has_split_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.split_trigger)
}

// optional .cockroach.roachpb.MergeTrigger merge_trigger = 2;
bool InternalCommitTrigger::has_merge_trigger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalCommitTrigger::set_has_merge_trigger() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalCommitTrigger::clear_has_merge_trigger() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalCommitTrigger::clear_merge_trigger() {
  if (merge_trigger_ != NULL) merge_trigger_->::cockroach::roachpb::MergeTrigger::Clear();
  clear_has_merge_trigger();
}
const ::cockroach::roachpb::MergeTrigger& InternalCommitTrigger::merge_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_ != NULL ? *merge_trigger_ : *default_instance_->merge_trigger_;
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::mutable_merge_trigger() {
  set_has_merge_trigger();
  if (merge_trigger_ == NULL) {
    merge_trigger_ = new ::cockroach::roachpb::MergeTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
  return merge_trigger_;
}
::cockroach::roachpb::MergeTrigger* InternalCommitTrigger::release_merge_trigger() {
  clear_has_merge_trigger();
  ::cockroach::roachpb::MergeTrigger* temp = merge_trigger_;
  merge_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_merge_trigger(::cockroach::roachpb::MergeTrigger* merge_trigger) {
  delete merge_trigger_;
  merge_trigger_ = merge_trigger;
  if (merge_trigger) {
    set_has_merge_trigger();
  } else {
    clear_has_merge_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.merge_trigger)
}

// optional .cockroach.roachpb.ChangeReplicasTrigger change_replicas_trigger = 3;
bool InternalCommitTrigger::has_change_replicas_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalCommitTrigger::set_has_change_replicas_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalCommitTrigger::clear_has_change_replicas_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalCommitTrigger::clear_change_replicas_trigger() {
  if (change_replicas_trigger_ != NULL) change_replicas_trigger_->::cockroach::roachpb::ChangeReplicasTrigger::Clear();
  clear_has_change_replicas_trigger();
}
const ::cockroach::roachpb::ChangeReplicasTrigger& InternalCommitTrigger::change_replicas_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_ != NULL ? *change_replicas_trigger_ : *default_instance_->change_replicas_trigger_;
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::mutable_change_replicas_trigger() {
  set_has_change_replicas_trigger();
  if (change_replicas_trigger_ == NULL) {
    change_replicas_trigger_ = new ::cockroach::roachpb::ChangeReplicasTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
  return change_replicas_trigger_;
}
::cockroach::roachpb::ChangeReplicasTrigger* InternalCommitTrigger::release_change_replicas_trigger() {
  clear_has_change_replicas_trigger();
  ::cockroach::roachpb::ChangeReplicasTrigger* temp = change_replicas_trigger_;
  change_replicas_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_change_replicas_trigger(::cockroach::roachpb::ChangeReplicasTrigger* change_replicas_trigger) {
  delete change_replicas_trigger_;
  change_replicas_trigger_ = change_replicas_trigger;
  if (change_replicas_trigger) {
    set_has_change_replicas_trigger();
  } else {
    clear_has_change_replicas_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.change_replicas_trigger)
}

// optional .cockroach.roachpb.ModifiedSpanTrigger modified_span_trigger = 4;
bool InternalCommitTrigger::has_modified_span_trigger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalCommitTrigger::set_has_modified_span_trigger() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalCommitTrigger::clear_has_modified_span_trigger() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalCommitTrigger::clear_modified_span_trigger() {
  if (modified_span_trigger_ != NULL) modified_span_trigger_->::cockroach::roachpb::ModifiedSpanTrigger::Clear();
  clear_has_modified_span_trigger();
}
const ::cockroach::roachpb::ModifiedSpanTrigger& InternalCommitTrigger::modified_span_trigger() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_ != NULL ? *modified_span_trigger_ : *default_instance_->modified_span_trigger_;
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::mutable_modified_span_trigger() {
  set_has_modified_span_trigger();
  if (modified_span_trigger_ == NULL) {
    modified_span_trigger_ = new ::cockroach::roachpb::ModifiedSpanTrigger;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
  return modified_span_trigger_;
}
::cockroach::roachpb::ModifiedSpanTrigger* InternalCommitTrigger::release_modified_span_trigger() {
  clear_has_modified_span_trigger();
  ::cockroach::roachpb::ModifiedSpanTrigger* temp = modified_span_trigger_;
  modified_span_trigger_ = NULL;
  return temp;
}
void InternalCommitTrigger::set_allocated_modified_span_trigger(::cockroach::roachpb::ModifiedSpanTrigger* modified_span_trigger) {
  delete modified_span_trigger_;
  modified_span_trigger_ = modified_span_trigger;
  if (modified_span_trigger) {
    set_has_modified_span_trigger();
  } else {
    clear_has_modified_span_trigger();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.InternalCommitTrigger.modified_span_trigger)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnMeta::kIdFieldNumber;
const int TxnMeta::kIsolationFieldNumber;
const int TxnMeta::kKeyFieldNumber;
const int TxnMeta::kEpochFieldNumber;
const int TxnMeta::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnMeta::TxnMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.TxnMeta)
}

void TxnMeta::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

TxnMeta::TxnMeta(const TxnMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.TxnMeta)
}

void TxnMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isolation_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = 0u;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxnMeta::~TxnMeta() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.TxnMeta)
  SharedDtor();
}

void TxnMeta::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void TxnMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxnMeta_descriptor_;
}

const TxnMeta& TxnMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

TxnMeta* TxnMeta::default_instance_ = NULL;

TxnMeta* TxnMeta::New(::google::protobuf::Arena* arena) const {
  TxnMeta* n = new TxnMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnMeta::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TxnMeta*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(isolation_, epoch_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TxnMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.TxnMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isolation;
        break;
      }

      // optional .cockroach.roachpb.IsolationType isolation = 2;
      case 2: {
        if (tag == 16) {
         parse_isolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::IsolationType_IsValid(value)) {
            set_isolation(static_cast< ::cockroach::roachpb::IsolationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_epoch;
        break;
      }

      // optional uint32 epoch = 4;
      case 4: {
        if (tag == 32) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp timestamp = 5;
      case 5: {
        if (tag == 42) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.TxnMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.TxnMeta)
  return false;
#undef DO_
}

void TxnMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.TxnMeta)
  // optional bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // optional .cockroach.roachpb.IsolationType isolation = 2;
  if (has_isolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->isolation(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional uint32 epoch = 4;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->epoch(), output);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.TxnMeta)
}

::google::protobuf::uint8* TxnMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.TxnMeta)
  // optional bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // optional .cockroach.roachpb.IsolationType isolation = 2;
  if (has_isolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->isolation(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional uint32 epoch = 4;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->epoch(), target);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.TxnMeta)
  return target;
}

int TxnMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // optional .cockroach.roachpb.IsolationType isolation = 2;
    if (has_isolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->isolation());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 epoch = 4;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epoch());
    }

    // optional .cockroach.roachpb.Timestamp timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnMeta::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TxnMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnMeta>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxnMeta::MergeFrom(const TxnMeta& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_isolation()) {
      set_isolation(from.isolation());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TxnMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnMeta::CopyFrom(const TxnMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxnMeta::IsInitialized() const {

  return true;
}

void TxnMeta::Swap(TxnMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnMeta::InternalSwap(TxnMeta* other) {
  id_.Swap(&other->id_);
  std::swap(isolation_, other->isolation_);
  key_.Swap(&other->key_);
  std::swap(epoch_, other->epoch_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxnMeta_descriptor_;
  metadata.reflection = TxnMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnMeta

// optional bytes id = 1;
bool TxnMeta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TxnMeta::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TxnMeta::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TxnMeta::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& TxnMeta::id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnMeta.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxnMeta::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnMeta.id)
}
 void TxnMeta::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.TxnMeta.id)
}
 void TxnMeta::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.TxnMeta.id)
}
 ::std::string* TxnMeta::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnMeta.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxnMeta::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxnMeta::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TxnMeta.id)
}

// optional .cockroach.roachpb.IsolationType isolation = 2;
bool TxnMeta::has_isolation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TxnMeta::set_has_isolation() {
  _has_bits_[0] |= 0x00000002u;
}
void TxnMeta::clear_has_isolation() {
  _has_bits_[0] &= ~0x00000002u;
}
void TxnMeta::clear_isolation() {
  isolation_ = 0;
  clear_has_isolation();
}
 ::cockroach::roachpb::IsolationType TxnMeta::isolation() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnMeta.isolation)
  return static_cast< ::cockroach::roachpb::IsolationType >(isolation_);
}
 void TxnMeta::set_isolation(::cockroach::roachpb::IsolationType value) {
  assert(::cockroach::roachpb::IsolationType_IsValid(value));
  set_has_isolation();
  isolation_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnMeta.isolation)
}

// optional bytes key = 3;
bool TxnMeta::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TxnMeta::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void TxnMeta::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void TxnMeta::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& TxnMeta::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnMeta.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxnMeta::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnMeta.key)
}
 void TxnMeta::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.TxnMeta.key)
}
 void TxnMeta::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.TxnMeta.key)
}
 ::std::string* TxnMeta::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnMeta.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxnMeta::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxnMeta::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TxnMeta.key)
}

// optional uint32 epoch = 4;
bool TxnMeta::has_epoch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TxnMeta::set_has_epoch() {
  _has_bits_[0] |= 0x00000008u;
}
void TxnMeta::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000008u;
}
void TxnMeta::clear_epoch() {
  epoch_ = 0u;
  clear_has_epoch();
}
 ::google::protobuf::uint32 TxnMeta::epoch() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnMeta.epoch)
  return epoch_;
}
 void TxnMeta::set_epoch(::google::protobuf::uint32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.TxnMeta.epoch)
}

// optional .cockroach.roachpb.Timestamp timestamp = 5;
bool TxnMeta::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TxnMeta::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void TxnMeta::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void TxnMeta::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::roachpb::Timestamp& TxnMeta::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.TxnMeta.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::cockroach::roachpb::Timestamp* TxnMeta::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.TxnMeta.timestamp)
  return timestamp_;
}
::cockroach::roachpb::Timestamp* TxnMeta::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void TxnMeta::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.TxnMeta.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kMetaFieldNumber;
const int Transaction::kNameFieldNumber;
const int Transaction::kPriorityFieldNumber;
const int Transaction::kStatusFieldNumber;
const int Transaction::kLastHeartbeatFieldNumber;
const int Transaction::kOrigTimestampFieldNumber;
const int Transaction::kMaxTimestampFieldNumber;
const int Transaction::kObservedTimestampsFieldNumber;
const int Transaction::kWritingFieldNumber;
const int Transaction::kWriteTooOldFieldNumber;
const int Transaction::kSequenceFieldNumber;
const int Transaction::kIntentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  meta_ = const_cast< ::cockroach::roachpb::TxnMeta*>(&::cockroach::roachpb::TxnMeta::default_instance());
  last_heartbeat_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  orig_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  max_timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Transaction)
}

void Transaction::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  meta_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  status_ = 0;
  last_heartbeat_ = NULL;
  orig_timestamp_ = NULL;
  max_timestamp_ = NULL;
  observed_timestamps_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  observed_timestamps_.SetEntryDescriptor(
      &::cockroach::roachpb::Transaction_ObservedTimestampsEntry_descriptor_);
  writing_ = false;
  write_too_old_ = false;
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete meta_;
    delete last_heartbeat_;
    delete orig_timestamp_;
    delete max_timestamp_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Transaction*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(priority_, status_);
    if (has_meta()) {
      if (meta_ != NULL) meta_->::cockroach::roachpb::TxnMeta::Clear();
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_last_heartbeat()) {
      if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_orig_timestamp()) {
      if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_max_timestamp()) {
      if (max_timestamp_ != NULL) max_timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }
  ZR_(writing_, sequence_);

#undef ZR_HELPER_
#undef ZR_

  observed_timestamps_.Clear();
  intents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.TxnMeta meta = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.Transaction.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .cockroach.roachpb.TransactionStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_last_heartbeat;
        break;
      }

      // optional .cockroach.roachpb.Timestamp last_heartbeat = 5;
      case 5: {
        if (tag == 42) {
         parse_last_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_orig_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp orig_timestamp = 6;
      case 6: {
        if (tag == 50) {
         parse_orig_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orig_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_max_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp max_timestamp = 7;
      case 7: {
        if (tag == 58) {
         parse_max_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_observed_timestamps;
        break;
      }

      // map<int32, .cockroach.roachpb.Timestamp> observed_timestamps = 8;
      case 8: {
        if (tag == 66) {
         parse_observed_timestamps:
          DO_(input->IncrementRecursionDepth());
         parse_loop_observed_timestamps:
          ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry(observed_timestamps_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_observed_timestamps())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_observed_timestamps;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_writing;
        break;
      }

      // optional bool writing = 9;
      case 9: {
        if (tag == 72) {
         parse_writing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writing_)));
          set_has_writing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 10;
      case 10: {
        if (tag == 80) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_intents;
        break;
      }

      // repeated .cockroach.roachpb.Span intents = 11;
      case 11: {
        if (tag == 90) {
         parse_intents:
          DO_(input->IncrementRecursionDepth());
         parse_loop_intents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_intents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_intents;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_write_too_old;
        break;
      }

      // optional bool write_too_old = 12;
      case 12: {
        if (tag == 96) {
         parse_write_too_old:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_too_old_)));
          set_has_write_too_old();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Transaction)
  // optional .cockroach.roachpb.TxnMeta meta = 1;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Transaction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .cockroach.roachpb.Timestamp last_heartbeat = 5;
  if (has_last_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->last_heartbeat_, output);
  }

  // optional .cockroach.roachpb.Timestamp orig_timestamp = 6;
  if (has_orig_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->orig_timestamp_, output);
  }

  // optional .cockroach.roachpb.Timestamp max_timestamp = 7;
  if (has_max_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->max_timestamp_, output);
  }

  // map<int32, .cockroach.roachpb.Timestamp> observed_timestamps = 8;
  {
    ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::roachpb::Timestamp >::const_iterator
        it = this->observed_timestamps().begin();
        it != this->observed_timestamps().end(); ++it) {
      entry.reset(observed_timestamps_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          8, *entry, output);
    }
  }

  // optional bool writing = 9;
  if (has_writing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->writing(), output);
  }

  // optional uint32 sequence = 10;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sequence(), output);
  }

  // repeated .cockroach.roachpb.Span intents = 11;
  for (unsigned int i = 0, n = this->intents_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->intents(i), output);
  }

  // optional bool write_too_old = 12;
  if (has_write_too_old()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->write_too_old(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Transaction)
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Transaction)
  // optional .cockroach.roachpb.TxnMeta meta = 1;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->meta_, target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Transaction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .cockroach.roachpb.Timestamp last_heartbeat = 5;
  if (has_last_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->last_heartbeat_, target);
  }

  // optional .cockroach.roachpb.Timestamp orig_timestamp = 6;
  if (has_orig_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->orig_timestamp_, target);
  }

  // optional .cockroach.roachpb.Timestamp max_timestamp = 7;
  if (has_max_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, *this->max_timestamp_, target);
  }

  // map<int32, .cockroach.roachpb.Timestamp> observed_timestamps = 8;
  {
    ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::roachpb::Timestamp >::const_iterator
        it = this->observed_timestamps().begin();
        it != this->observed_timestamps().end(); ++it) {
      entry.reset(observed_timestamps_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              8, *entry, target);
    }
  }

  // optional bool writing = 9;
  if (has_writing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->writing(), target);
  }

  // optional uint32 sequence = 10;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sequence(), target);
  }

  // repeated .cockroach.roachpb.Span intents = 11;
  for (unsigned int i = 0, n = this->intents_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->intents(i), target);
  }

  // optional bool write_too_old = 12;
  if (has_write_too_old()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->write_too_old(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Transaction)
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .cockroach.roachpb.TxnMeta meta = 1;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meta_);
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional .cockroach.roachpb.TransactionStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .cockroach.roachpb.Timestamp last_heartbeat = 5;
    if (has_last_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->last_heartbeat_);
    }

    // optional .cockroach.roachpb.Timestamp orig_timestamp = 6;
    if (has_orig_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orig_timestamp_);
    }

    // optional .cockroach.roachpb.Timestamp max_timestamp = 7;
    if (has_max_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_timestamp_);
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool writing = 9;
    if (has_writing()) {
      total_size += 1 + 1;
    }

    // optional bool write_too_old = 12;
    if (has_write_too_old()) {
      total_size += 1 + 1;
    }

    // optional uint32 sequence = 10;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  // map<int32, .cockroach.roachpb.Timestamp> observed_timestamps = 8;
  total_size += 1 * this->observed_timestamps_size();
  {
    ::google::protobuf::scoped_ptr<Transaction_ObservedTimestampsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::roachpb::Timestamp >::const_iterator
        it = this->observed_timestamps().begin();
        it != this->observed_timestamps().end(); ++it) {
      entry.reset(observed_timestamps_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .cockroach.roachpb.Span intents = 11;
  total_size += 1 * this->intents_size();
  for (int i = 0; i < this->intents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->intents(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  observed_timestamps_.MergeFrom(from.observed_timestamps_);
  intents_.MergeFrom(from.intents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta()) {
      mutable_meta()->::cockroach::roachpb::TxnMeta::MergeFrom(from.meta());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_last_heartbeat()) {
      mutable_last_heartbeat()->::cockroach::roachpb::Timestamp::MergeFrom(from.last_heartbeat());
    }
    if (from.has_orig_timestamp()) {
      mutable_orig_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.orig_timestamp());
    }
    if (from.has_max_timestamp()) {
      mutable_max_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.max_timestamp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writing()) {
      set_writing(from.writing());
    }
    if (from.has_write_too_old()) {
      set_write_too_old(from.write_too_old());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  std::swap(meta_, other->meta_);
  name_.Swap(&other->name_);
  std::swap(priority_, other->priority_);
  std::swap(status_, other->status_);
  std::swap(last_heartbeat_, other->last_heartbeat_);
  std::swap(orig_timestamp_, other->orig_timestamp_);
  std::swap(max_timestamp_, other->max_timestamp_);
  observed_timestamps_.Swap(&other->observed_timestamps_);
  std::swap(writing_, other->writing_);
  std::swap(write_too_old_, other->write_too_old_);
  std::swap(sequence_, other->sequence_);
  intents_.UnsafeArenaSwap(&other->intents_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// optional .cockroach.roachpb.TxnMeta meta = 1;
bool Transaction::has_meta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transaction::set_has_meta() {
  _has_bits_[0] |= 0x00000001u;
}
void Transaction::clear_has_meta() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transaction::clear_meta() {
  if (meta_ != NULL) meta_->::cockroach::roachpb::TxnMeta::Clear();
  clear_has_meta();
}
const ::cockroach::roachpb::TxnMeta& Transaction::meta() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.meta)
  return meta_ != NULL ? *meta_ : *default_instance_->meta_;
}
::cockroach::roachpb::TxnMeta* Transaction::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) {
    meta_ = new ::cockroach::roachpb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.meta)
  return meta_;
}
::cockroach::roachpb::TxnMeta* Transaction::release_meta() {
  clear_has_meta();
  ::cockroach::roachpb::TxnMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Transaction::set_allocated_meta(::cockroach::roachpb::TxnMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    set_has_meta();
  } else {
    clear_has_meta();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.meta)
}

// optional string name = 2;
bool Transaction::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transaction::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Transaction::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transaction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Transaction::name() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.name)
}
 void Transaction::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Transaction.name)
}
 void Transaction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Transaction.name)
}
 ::std::string* Transaction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.name)
}

// optional int32 priority = 3;
bool Transaction::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transaction::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
void Transaction::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transaction::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
 ::google::protobuf::int32 Transaction::priority() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.priority)
  return priority_;
}
 void Transaction::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.priority)
}

// optional .cockroach.roachpb.TransactionStatus status = 4;
bool Transaction::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transaction::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void Transaction::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transaction::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::cockroach::roachpb::TransactionStatus Transaction::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
 void Transaction::set_status(::cockroach::roachpb::TransactionStatus value) {
  assert(::cockroach::roachpb::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.status)
}

// optional .cockroach.roachpb.Timestamp last_heartbeat = 5;
bool Transaction::has_last_heartbeat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transaction::set_has_last_heartbeat() {
  _has_bits_[0] |= 0x00000010u;
}
void Transaction::clear_has_last_heartbeat() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transaction::clear_last_heartbeat() {
  if (last_heartbeat_ != NULL) last_heartbeat_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_last_heartbeat();
}
const ::cockroach::roachpb::Timestamp& Transaction::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_ != NULL ? *last_heartbeat_ : *default_instance_->last_heartbeat_;
}
::cockroach::roachpb::Timestamp* Transaction::mutable_last_heartbeat() {
  set_has_last_heartbeat();
  if (last_heartbeat_ == NULL) {
    last_heartbeat_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.last_heartbeat)
  return last_heartbeat_;
}
::cockroach::roachpb::Timestamp* Transaction::release_last_heartbeat() {
  clear_has_last_heartbeat();
  ::cockroach::roachpb::Timestamp* temp = last_heartbeat_;
  last_heartbeat_ = NULL;
  return temp;
}
void Transaction::set_allocated_last_heartbeat(::cockroach::roachpb::Timestamp* last_heartbeat) {
  delete last_heartbeat_;
  last_heartbeat_ = last_heartbeat;
  if (last_heartbeat) {
    set_has_last_heartbeat();
  } else {
    clear_has_last_heartbeat();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.last_heartbeat)
}

// optional .cockroach.roachpb.Timestamp orig_timestamp = 6;
bool Transaction::has_orig_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transaction::set_has_orig_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void Transaction::clear_has_orig_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transaction::clear_orig_timestamp() {
  if (orig_timestamp_ != NULL) orig_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_orig_timestamp();
}
const ::cockroach::roachpb::Timestamp& Transaction::orig_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_ != NULL ? *orig_timestamp_ : *default_instance_->orig_timestamp_;
}
::cockroach::roachpb::Timestamp* Transaction::mutable_orig_timestamp() {
  set_has_orig_timestamp();
  if (orig_timestamp_ == NULL) {
    orig_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.orig_timestamp)
  return orig_timestamp_;
}
::cockroach::roachpb::Timestamp* Transaction::release_orig_timestamp() {
  clear_has_orig_timestamp();
  ::cockroach::roachpb::Timestamp* temp = orig_timestamp_;
  orig_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_orig_timestamp(::cockroach::roachpb::Timestamp* orig_timestamp) {
  delete orig_timestamp_;
  orig_timestamp_ = orig_timestamp;
  if (orig_timestamp) {
    set_has_orig_timestamp();
  } else {
    clear_has_orig_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.orig_timestamp)
}

// optional .cockroach.roachpb.Timestamp max_timestamp = 7;
bool Transaction::has_max_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transaction::set_has_max_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void Transaction::clear_has_max_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transaction::clear_max_timestamp() {
  if (max_timestamp_ != NULL) max_timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_max_timestamp();
}
const ::cockroach::roachpb::Timestamp& Transaction::max_timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_ != NULL ? *max_timestamp_ : *default_instance_->max_timestamp_;
}
::cockroach::roachpb::Timestamp* Transaction::mutable_max_timestamp() {
  set_has_max_timestamp();
  if (max_timestamp_ == NULL) {
    max_timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.max_timestamp)
  return max_timestamp_;
}
::cockroach::roachpb::Timestamp* Transaction::release_max_timestamp() {
  clear_has_max_timestamp();
  ::cockroach::roachpb::Timestamp* temp = max_timestamp_;
  max_timestamp_ = NULL;
  return temp;
}
void Transaction::set_allocated_max_timestamp(::cockroach::roachpb::Timestamp* max_timestamp) {
  delete max_timestamp_;
  max_timestamp_ = max_timestamp;
  if (max_timestamp) {
    set_has_max_timestamp();
  } else {
    clear_has_max_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Transaction.max_timestamp)
}

// map<int32, .cockroach.roachpb.Timestamp> observed_timestamps = 8;
int Transaction::observed_timestamps_size() const {
  return observed_timestamps_.size();
}
void Transaction::clear_observed_timestamps() {
  observed_timestamps_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::roachpb::Timestamp >&
Transaction::observed_timestamps() const {
  // @@protoc_insertion_point(field_map:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::cockroach::roachpb::Timestamp >*
Transaction::mutable_observed_timestamps() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.roachpb.Transaction.observed_timestamps)
  return observed_timestamps_.MutableMap();
}

// optional bool writing = 9;
bool Transaction::has_writing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transaction::set_has_writing() {
  _has_bits_[0] |= 0x00000100u;
}
void Transaction::clear_has_writing() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transaction::clear_writing() {
  writing_ = false;
  clear_has_writing();
}
 bool Transaction::writing() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.writing)
  return writing_;
}
 void Transaction::set_writing(bool value) {
  set_has_writing();
  writing_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.writing)
}

// optional bool write_too_old = 12;
bool Transaction::has_write_too_old() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Transaction::set_has_write_too_old() {
  _has_bits_[0] |= 0x00000200u;
}
void Transaction::clear_has_write_too_old() {
  _has_bits_[0] &= ~0x00000200u;
}
void Transaction::clear_write_too_old() {
  write_too_old_ = false;
  clear_has_write_too_old();
}
 bool Transaction::write_too_old() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.write_too_old)
  return write_too_old_;
}
 void Transaction::set_write_too_old(bool value) {
  set_has_write_too_old();
  write_too_old_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.write_too_old)
}

// optional uint32 sequence = 10;
bool Transaction::has_sequence() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Transaction::set_has_sequence() {
  _has_bits_[0] |= 0x00000400u;
}
void Transaction::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000400u;
}
void Transaction::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
 ::google::protobuf::uint32 Transaction::sequence() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.sequence)
  return sequence_;
}
 void Transaction::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Transaction.sequence)
}

// repeated .cockroach.roachpb.Span intents = 11;
int Transaction::intents_size() const {
  return intents_.size();
}
void Transaction::clear_intents() {
  intents_.Clear();
}
const ::cockroach::roachpb::Span& Transaction::intents(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Transaction.intents)
  return intents_.Get(index);
}
::cockroach::roachpb::Span* Transaction::mutable_intents(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Transaction.intents)
  return intents_.Mutable(index);
}
::cockroach::roachpb::Span* Transaction::add_intents() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Transaction.intents)
  return intents_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >*
Transaction::mutable_intents() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Transaction.intents)
  return &intents_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::Span >&
Transaction::intents() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Transaction.intents)
  return intents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Intent::kSpanFieldNumber;
const int Intent::kTxnFieldNumber;
const int Intent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Intent::Intent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Intent)
}

void Intent::InitAsDefaultInstance() {
  span_ = const_cast< ::cockroach::roachpb::Span*>(&::cockroach::roachpb::Span::default_instance());
  txn_ = const_cast< ::cockroach::roachpb::TxnMeta*>(&::cockroach::roachpb::TxnMeta::default_instance());
}

Intent::Intent(const Intent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Intent)
}

void Intent::SharedCtor() {
  _cached_size_ = 0;
  span_ = NULL;
  txn_ = NULL;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Intent)
  SharedDtor();
}

void Intent::SharedDtor() {
  if (this != default_instance_) {
    delete span_;
    delete txn_;
  }
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Intent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intent_descriptor_;
}

const Intent& Intent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Intent* Intent::default_instance_ = NULL;

Intent* Intent::New(::google::protobuf::Arena* arena) const {
  Intent* n = new Intent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Intent::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_span()) {
      if (span_ != NULL) span_->::cockroach::roachpb::Span::Clear();
    }
    if (has_txn()) {
      if (txn_ != NULL) txn_->::cockroach::roachpb::TxnMeta::Clear();
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Intent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Span span = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_txn;
        break;
      }

      // optional .cockroach.roachpb.TxnMeta txn = 2;
      case 2: {
        if (tag == 18) {
         parse_txn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .cockroach.roachpb.TransactionStatus status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cockroach::roachpb::TransactionStatus_IsValid(value)) {
            set_status(static_cast< ::cockroach::roachpb::TransactionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Intent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Intent)
  return false;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Intent)
  // optional .cockroach.roachpb.Span span = 1;
  if (has_span()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->span_, output);
  }

  // optional .cockroach.roachpb.TxnMeta txn = 2;
  if (has_txn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->txn_, output);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Intent)
}

::google::protobuf::uint8* Intent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Intent)
  // optional .cockroach.roachpb.Span span = 1;
  if (has_span()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->span_, target);
  }

  // optional .cockroach.roachpb.TxnMeta txn = 2;
  if (has_txn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->txn_, target);
  }

  // optional .cockroach.roachpb.TransactionStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Intent)
  return target;
}

int Intent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.Span span = 1;
    if (has_span()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->span_);
    }

    // optional .cockroach.roachpb.TxnMeta txn = 2;
    if (has_txn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->txn_);
    }

    // optional .cockroach.roachpb.TransactionStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Intent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Intent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_span()) {
      mutable_span()->::cockroach::roachpb::Span::MergeFrom(from.span());
    }
    if (from.has_txn()) {
      mutable_txn()->::cockroach::roachpb::TxnMeta::MergeFrom(from.txn());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Intent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {

  return true;
}

void Intent::Swap(Intent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Intent::InternalSwap(Intent* other) {
  std::swap(span_, other->span_);
  std::swap(txn_, other->txn_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Intent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Intent_descriptor_;
  metadata.reflection = Intent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Intent

// optional .cockroach.roachpb.Span span = 1;
bool Intent::has_span() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Intent::set_has_span() {
  _has_bits_[0] |= 0x00000001u;
}
void Intent::clear_has_span() {
  _has_bits_[0] &= ~0x00000001u;
}
void Intent::clear_span() {
  if (span_ != NULL) span_->::cockroach::roachpb::Span::Clear();
  clear_has_span();
}
const ::cockroach::roachpb::Span& Intent::span() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.span)
  return span_ != NULL ? *span_ : *default_instance_->span_;
}
::cockroach::roachpb::Span* Intent::mutable_span() {
  set_has_span();
  if (span_ == NULL) {
    span_ = new ::cockroach::roachpb::Span;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.span)
  return span_;
}
::cockroach::roachpb::Span* Intent::release_span() {
  clear_has_span();
  ::cockroach::roachpb::Span* temp = span_;
  span_ = NULL;
  return temp;
}
void Intent::set_allocated_span(::cockroach::roachpb::Span* span) {
  delete span_;
  span_ = span;
  if (span) {
    set_has_span();
  } else {
    clear_has_span();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.span)
}

// optional .cockroach.roachpb.TxnMeta txn = 2;
bool Intent::has_txn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Intent::set_has_txn() {
  _has_bits_[0] |= 0x00000002u;
}
void Intent::clear_has_txn() {
  _has_bits_[0] &= ~0x00000002u;
}
void Intent::clear_txn() {
  if (txn_ != NULL) txn_->::cockroach::roachpb::TxnMeta::Clear();
  clear_has_txn();
}
const ::cockroach::roachpb::TxnMeta& Intent::txn() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.txn)
  return txn_ != NULL ? *txn_ : *default_instance_->txn_;
}
::cockroach::roachpb::TxnMeta* Intent::mutable_txn() {
  set_has_txn();
  if (txn_ == NULL) {
    txn_ = new ::cockroach::roachpb::TxnMeta;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Intent.txn)
  return txn_;
}
::cockroach::roachpb::TxnMeta* Intent::release_txn() {
  clear_has_txn();
  ::cockroach::roachpb::TxnMeta* temp = txn_;
  txn_ = NULL;
  return temp;
}
void Intent::set_allocated_txn(::cockroach::roachpb::TxnMeta* txn) {
  delete txn_;
  txn_ = txn;
  if (txn) {
    set_has_txn();
  } else {
    clear_has_txn();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Intent.txn)
}

// optional .cockroach.roachpb.TransactionStatus status = 3;
bool Intent::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Intent::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Intent::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Intent::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::cockroach::roachpb::TransactionStatus Intent::status() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Intent.status)
  return static_cast< ::cockroach::roachpb::TransactionStatus >(status_);
}
 void Intent::set_status(::cockroach::roachpb::TransactionStatus value) {
  assert(::cockroach::roachpb::TransactionStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Intent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kStartFieldNumber;
const int Lease::kExpirationFieldNumber;
const int Lease::kReplicaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Lease)
}

void Lease::InitAsDefaultInstance() {
  start_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  expiration_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
  replica_ = const_cast< ::cockroach::roachpb::ReplicaDescriptor*>(&::cockroach::roachpb::ReplicaDescriptor::default_instance());
}

Lease::Lease(const Lease& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Lease)
}

void Lease::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  expiration_ = NULL;
  replica_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete expiration_;
    delete replica_;
  }
}

void Lease::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lease::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lease_descriptor_;
}

const Lease& Lease::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

Lease* Lease::default_instance_ = NULL;

Lease* Lease::New(::google::protobuf::Arena* arena) const {
  Lease* n = new Lease;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lease::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_start()) {
      if (start_ != NULL) start_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_expiration()) {
      if (expiration_ != NULL) expiration_->::cockroach::roachpb::Timestamp::Clear();
    }
    if (has_replica()) {
      if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Lease)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.roachpb.Timestamp start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_expiration;
        break;
      }

      // optional .cockroach.roachpb.Timestamp expiration = 2;
      case 2: {
        if (tag == 18) {
         parse_expiration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expiration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_replica;
        break;
      }

      // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
      case 3: {
        if (tag == 26) {
         parse_replica:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Lease)
  return false;
#undef DO_
}

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Lease)
  // optional .cockroach.roachpb.Timestamp start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // optional .cockroach.roachpb.Timestamp expiration = 2;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->expiration_, output);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->replica_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Lease)
}

::google::protobuf::uint8* Lease::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Lease)
  // optional .cockroach.roachpb.Timestamp start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->start_, target);
  }

  // optional .cockroach.roachpb.Timestamp expiration = 2;
  if (has_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->expiration_, target);
  }

  // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->replica_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Lease)
  return target;
}

int Lease::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .cockroach.roachpb.Timestamp start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .cockroach.roachpb.Timestamp expiration = 2;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->expiration_);
    }

    // optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->replica_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lease::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Lease* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Lease>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lease::MergeFrom(const Lease& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::cockroach::roachpb::Timestamp::MergeFrom(from.start());
    }
    if (from.has_expiration()) {
      mutable_expiration()->::cockroach::roachpb::Timestamp::MergeFrom(from.expiration());
    }
    if (from.has_replica()) {
      mutable_replica()->::cockroach::roachpb::ReplicaDescriptor::MergeFrom(from.replica());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Lease::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lease::CopyFrom(const Lease& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {

  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  std::swap(start_, other->start_);
  std::swap(expiration_, other->expiration_);
  std::swap(replica_, other->replica_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lease::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lease_descriptor_;
  metadata.reflection = Lease_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lease

// optional .cockroach.roachpb.Timestamp start = 1;
bool Lease::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lease::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void Lease::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lease::clear_start() {
  if (start_ != NULL) start_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_start();
}
const ::cockroach::roachpb::Timestamp& Lease::start() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::cockroach::roachpb::Timestamp* Lease::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.start)
  return start_;
}
::cockroach::roachpb::Timestamp* Lease::release_start() {
  clear_has_start();
  ::cockroach::roachpb::Timestamp* temp = start_;
  start_ = NULL;
  return temp;
}
void Lease::set_allocated_start(::cockroach::roachpb::Timestamp* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.start)
}

// optional .cockroach.roachpb.Timestamp expiration = 2;
bool Lease::has_expiration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lease::set_has_expiration() {
  _has_bits_[0] |= 0x00000002u;
}
void Lease::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lease::clear_expiration() {
  if (expiration_ != NULL) expiration_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_expiration();
}
const ::cockroach::roachpb::Timestamp& Lease::expiration() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.expiration)
  return expiration_ != NULL ? *expiration_ : *default_instance_->expiration_;
}
::cockroach::roachpb::Timestamp* Lease::mutable_expiration() {
  set_has_expiration();
  if (expiration_ == NULL) {
    expiration_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.expiration)
  return expiration_;
}
::cockroach::roachpb::Timestamp* Lease::release_expiration() {
  clear_has_expiration();
  ::cockroach::roachpb::Timestamp* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
void Lease::set_allocated_expiration(::cockroach::roachpb::Timestamp* expiration) {
  delete expiration_;
  expiration_ = expiration;
  if (expiration) {
    set_has_expiration();
  } else {
    clear_has_expiration();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.expiration)
}

// optional .cockroach.roachpb.ReplicaDescriptor replica = 3;
bool Lease::has_replica() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lease::set_has_replica() {
  _has_bits_[0] |= 0x00000004u;
}
void Lease::clear_has_replica() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lease::clear_replica() {
  if (replica_ != NULL) replica_->::cockroach::roachpb::ReplicaDescriptor::Clear();
  clear_has_replica();
}
const ::cockroach::roachpb::ReplicaDescriptor& Lease::replica() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Lease.replica)
  return replica_ != NULL ? *replica_ : *default_instance_->replica_;
}
::cockroach::roachpb::ReplicaDescriptor* Lease::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    replica_ = new ::cockroach::roachpb::ReplicaDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Lease.replica)
  return replica_;
}
::cockroach::roachpb::ReplicaDescriptor* Lease::release_replica() {
  clear_has_replica();
  ::cockroach::roachpb::ReplicaDescriptor* temp = replica_;
  replica_ = NULL;
  return temp;
}
void Lease::set_allocated_replica(::cockroach::roachpb::ReplicaDescriptor* replica) {
  delete replica_;
  replica_ = replica;
  if (replica) {
    set_has_replica();
  } else {
    clear_has_replica();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.Lease.replica)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SequenceCacheEntry::kKeyFieldNumber;
const int SequenceCacheEntry::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SequenceCacheEntry::SequenceCacheEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.SequenceCacheEntry)
}

void SequenceCacheEntry::InitAsDefaultInstance() {
  timestamp_ = const_cast< ::cockroach::roachpb::Timestamp*>(&::cockroach::roachpb::Timestamp::default_instance());
}

SequenceCacheEntry::SequenceCacheEntry(const SequenceCacheEntry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.SequenceCacheEntry)
}

void SequenceCacheEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SequenceCacheEntry::~SequenceCacheEntry() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.SequenceCacheEntry)
  SharedDtor();
}

void SequenceCacheEntry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void SequenceCacheEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SequenceCacheEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SequenceCacheEntry_descriptor_;
}

const SequenceCacheEntry& SequenceCacheEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fdata_2eproto();
  return *default_instance_;
}

SequenceCacheEntry* SequenceCacheEntry::default_instance_ = NULL;

SequenceCacheEntry* SequenceCacheEntry::New(::google::protobuf::Arena* arena) const {
  SequenceCacheEntry* n = new SequenceCacheEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SequenceCacheEntry::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SequenceCacheEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.SequenceCacheEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .cockroach.roachpb.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.SequenceCacheEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.SequenceCacheEntry)
  return false;
#undef DO_
}

void SequenceCacheEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.SequenceCacheEntry)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.SequenceCacheEntry)
}

::google::protobuf::uint8* SequenceCacheEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.SequenceCacheEntry)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional .cockroach.roachpb.Timestamp timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->timestamp_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.SequenceCacheEntry)
  return target;
}

int SequenceCacheEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional .cockroach.roachpb.Timestamp timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->timestamp_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SequenceCacheEntry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SequenceCacheEntry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SequenceCacheEntry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SequenceCacheEntry::MergeFrom(const SequenceCacheEntry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::cockroach::roachpb::Timestamp::MergeFrom(from.timestamp());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SequenceCacheEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceCacheEntry::CopyFrom(const SequenceCacheEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceCacheEntry::IsInitialized() const {

  return true;
}

void SequenceCacheEntry::Swap(SequenceCacheEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SequenceCacheEntry::InternalSwap(SequenceCacheEntry* other) {
  key_.Swap(&other->key_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SequenceCacheEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SequenceCacheEntry_descriptor_;
  metadata.reflection = SequenceCacheEntry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SequenceCacheEntry

// optional bytes key = 1;
bool SequenceCacheEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SequenceCacheEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void SequenceCacheEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void SequenceCacheEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& SequenceCacheEntry::key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SequenceCacheEntry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceCacheEntry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.SequenceCacheEntry.key)
}
 void SequenceCacheEntry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.SequenceCacheEntry.key)
}
 void SequenceCacheEntry::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.SequenceCacheEntry.key)
}
 ::std::string* SequenceCacheEntry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SequenceCacheEntry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SequenceCacheEntry::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SequenceCacheEntry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SequenceCacheEntry.key)
}

// optional .cockroach.roachpb.Timestamp timestamp = 2;
bool SequenceCacheEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SequenceCacheEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void SequenceCacheEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void SequenceCacheEntry::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::cockroach::roachpb::Timestamp::Clear();
  clear_has_timestamp();
}
const ::cockroach::roachpb::Timestamp& SequenceCacheEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.SequenceCacheEntry.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::cockroach::roachpb::Timestamp* SequenceCacheEntry::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::cockroach::roachpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.SequenceCacheEntry.timestamp)
  return timestamp_;
}
::cockroach::roachpb::Timestamp* SequenceCacheEntry::release_timestamp() {
  clear_has_timestamp();
  ::cockroach::roachpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void SequenceCacheEntry::set_allocated_timestamp(::cockroach::roachpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.SequenceCacheEntry.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
