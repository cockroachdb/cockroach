// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/roachpb/metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/roachpb/metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace roachpb {

namespace {

const ::google::protobuf::Descriptor* Attributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplicaDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplicaDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreCapacity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreCapacity_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreDescriptor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2froachpb_2fmetadata_2eproto() {
  protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/roachpb/metadata.proto");
  GOOGLE_CHECK(file != NULL);
  Attributes_descriptor_ = file->message_type(0);
  static const int Attributes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, attrs_),
  };
  Attributes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Attributes_descriptor_,
      Attributes::default_instance_,
      Attributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _has_bits_[0]),
      -1,
      -1,
      sizeof(Attributes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _internal_metadata_),
      -1);
  ReplicaDescriptor_descriptor_ = file->message_type(1);
  static const int ReplicaDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaDescriptor, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaDescriptor, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaDescriptor, replica_id_),
  };
  ReplicaDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplicaDescriptor_descriptor_,
      ReplicaDescriptor::default_instance_,
      ReplicaDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReplicaDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplicaDescriptor, _internal_metadata_),
      -1);
  RangeDescriptor_descriptor_ = file->message_type(2);
  static const int RangeDescriptor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, range_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, replicas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, next_replica_id_),
  };
  RangeDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RangeDescriptor_descriptor_,
      RangeDescriptor::default_instance_,
      RangeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(RangeDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _internal_metadata_),
      -1);
  StoreCapacity_descriptor_ = file->message_type(3);
  static const int StoreCapacity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, range_count_),
  };
  StoreCapacity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreCapacity_descriptor_,
      StoreCapacity::default_instance_,
      StoreCapacity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreCapacity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreCapacity, _internal_metadata_),
      -1);
  NodeDescriptor_descriptor_ = file->message_type(4);
  static const int NodeDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, attrs_),
  };
  NodeDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeDescriptor_descriptor_,
      NodeDescriptor::default_instance_,
      NodeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(NodeDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeDescriptor, _internal_metadata_),
      -1);
  StoreDescriptor_descriptor_ = file->message_type(5);
  static const int StoreDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, capacity_),
  };
  StoreDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreDescriptor_descriptor_,
      StoreDescriptor::default_instance_,
      StoreDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _has_bits_[0]),
      -1,
      -1,
      sizeof(StoreDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDescriptor, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2froachpb_2fmetadata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Attributes_descriptor_, &Attributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplicaDescriptor_descriptor_, &ReplicaDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RangeDescriptor_descriptor_, &RangeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreCapacity_descriptor_, &StoreCapacity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeDescriptor_descriptor_, &NodeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreDescriptor_descriptor_, &StoreDescriptor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2froachpb_2fmetadata_2eproto() {
  delete Attributes::default_instance_;
  delete Attributes_reflection_;
  delete ReplicaDescriptor::default_instance_;
  delete ReplicaDescriptor_reflection_;
  delete RangeDescriptor::default_instance_;
  delete RangeDescriptor_reflection_;
  delete StoreCapacity::default_instance_;
  delete StoreCapacity_reflection_;
  delete NodeDescriptor::default_instance_;
  delete NodeDescriptor_reflection_;
  delete StoreDescriptor::default_instance_;
  delete StoreDescriptor_reflection_;
}

void protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::util::protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n cockroach/roachpb/metadata.proto\022\021cock"
    "roach.roachpb\032$cockroach/util/unresolved"
    "_addr.proto\032\024gogoproto/gogo.proto\"8\n\nAtt"
    "ributes\022$\n\005attrs\030\001 \003(\tB\025\362\336\037\021yaml:\"attrs,"
    "flow\":\004\230\240\037\000\"\246\001\n\021ReplicaDescriptor\022)\n\007nod"
    "e_id\030\001 \001(\005B\030\310\336\037\000\342\336\037\006NodeID\372\336\037\006NodeID\022,\n\010"
    "store_id\030\002 \001(\005B\032\310\336\037\000\342\336\037\007StoreID\372\336\037\007Store"
    "ID\0222\n\nreplica_id\030\003 \001(\005B\036\310\336\037\000\342\336\037\tReplicaI"
    "D\372\336\037\tReplicaID:\004\270\240\037\001\"\362\001\n\017RangeDescriptor"
    "\022,\n\010range_id\030\001 \001(\003B\032\310\336\037\000\342\336\037\007RangeID\372\336\037\007R"
    "angeID\022\033\n\tstart_key\030\002 \001(\014B\010\372\336\037\004RKey\022\031\n\007e"
    "nd_key\030\003 \001(\014B\010\372\336\037\004RKey\022<\n\010replicas\030\004 \003(\013"
    "2$.cockroach.roachpb.ReplicaDescriptorB\004"
    "\310\336\037\000\022;\n\017next_replica_id\030\005 \001(\005B\"\310\336\037\000\342\336\037\rN"
    "extReplicaID\372\336\037\tReplicaID\"[\n\rStoreCapaci"
    "ty\022\026\n\010capacity\030\001 \001(\003B\004\310\336\037\000\022\027\n\tavailable\030"
    "\002 \001(\003B\004\310\336\037\000\022\031\n\013range_count\030\003 \001(\005B\004\310\336\037\000\"\246"
    "\001\n\016NodeDescriptor\022)\n\007node_id\030\001 \001(\005B\030\310\336\037\000"
    "\342\336\037\006NodeID\372\336\037\006NodeID\0225\n\007address\030\002 \001(\0132\036."
    "cockroach.util.UnresolvedAddrB\004\310\336\037\000\0222\n\005a"
    "ttrs\030\003 \001(\0132\035.cockroach.roachpb.Attribute"
    "sB\004\310\336\037\000\"\344\001\n\017StoreDescriptor\022,\n\010store_id\030"
    "\001 \001(\005B\032\310\336\037\000\342\336\037\007StoreID\372\336\037\007StoreID\0222\n\005att"
    "rs\030\002 \001(\0132\035.cockroach.roachpb.AttributesB"
    "\004\310\336\037\000\0225\n\004node\030\003 \001(\0132!.cockroach.roachpb."
    "NodeDescriptorB\004\310\336\037\000\0228\n\010capacity\030\004 \001(\0132 "
    ".cockroach.roachpb.StoreCapacityB\004\310\336\037\000B\t"
    "Z\007roachpbX\001", 1091);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/roachpb/metadata.proto", &protobuf_RegisterTypes);
  Attributes::default_instance_ = new Attributes();
  ReplicaDescriptor::default_instance_ = new ReplicaDescriptor();
  RangeDescriptor::default_instance_ = new RangeDescriptor();
  StoreCapacity::default_instance_ = new StoreCapacity();
  NodeDescriptor::default_instance_ = new NodeDescriptor();
  StoreDescriptor::default_instance_ = new StoreDescriptor();
  Attributes::default_instance_->InitAsDefaultInstance();
  ReplicaDescriptor::default_instance_->InitAsDefaultInstance();
  RangeDescriptor::default_instance_->InitAsDefaultInstance();
  StoreCapacity::default_instance_->InitAsDefaultInstance();
  NodeDescriptor::default_instance_->InitAsDefaultInstance();
  StoreDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2froachpb_2fmetadata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2froachpb_2fmetadata_2eproto {
  StaticDescriptorInitializer_cockroach_2froachpb_2fmetadata_2eproto() {
    protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  }
} static_descriptor_initializer_cockroach_2froachpb_2fmetadata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Attributes::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Attributes::Attributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.Attributes)
}

void Attributes::InitAsDefaultInstance() {
}

Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.Attributes)
}

void Attributes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attributes_descriptor_;
}

const Attributes& Attributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

Attributes* Attributes::default_instance_ = NULL;

Attributes* Attributes::New(::google::protobuf::Arena* arena) const {
  Attributes* n = new Attributes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Attributes::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrs(this->attrs_size() - 1).data(),
            this->attrs(this->attrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cockroach.roachpb.Attributes.attrs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrs(i).data(), this->attrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Attributes.attrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.Attributes)
}

::google::protobuf::uint8* Attributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrs(i).data(), this->attrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cockroach.roachpb.Attributes.attrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->attrs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.Attributes)
  return target;
}

int Attributes::ByteSize() const {
  int total_size = 0;

  // repeated string attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Attributes* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Attributes>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attributes::MergeFrom(const Attributes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  attrs_.MergeFrom(from.attrs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Attributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attributes::CopyFrom(const Attributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {

  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Attributes::InternalSwap(Attributes* other) {
  attrs_.UnsafeArenaSwap(&other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Attributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attributes_descriptor_;
  metadata.reflection = Attributes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Attributes

// repeated string attrs = 1;
int Attributes::attrs_size() const {
  return attrs_.size();
}
void Attributes::clear_attrs() {
  attrs_.Clear();
}
 const ::std::string& Attributes::attrs(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.Attributes.attrs)
  return attrs_.Get(index);
}
 ::std::string* Attributes::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.Attributes.attrs)
  return attrs_.Mutable(index);
}
 void Attributes::set_attrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:cockroach.roachpb.Attributes.attrs)
  attrs_.Mutable(index)->assign(value);
}
 void Attributes::set_attrs(int index, const char* value) {
  attrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.Attributes.attrs)
}
 void Attributes::set_attrs(int index, const char* value, size_t size) {
  attrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.Attributes.attrs)
}
 ::std::string* Attributes::add_attrs() {
  return attrs_.Add();
}
 void Attributes::add_attrs(const ::std::string& value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cockroach.roachpb.Attributes.attrs)
}
 void Attributes::add_attrs(const char* value) {
  attrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cockroach.roachpb.Attributes.attrs)
}
 void Attributes::add_attrs(const char* value, size_t size) {
  attrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cockroach.roachpb.Attributes.attrs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attributes::attrs() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.Attributes.attrs)
  return attrs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Attributes::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.Attributes.attrs)
  return &attrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplicaDescriptor::kNodeIdFieldNumber;
const int ReplicaDescriptor::kStoreIdFieldNumber;
const int ReplicaDescriptor::kReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplicaDescriptor::ReplicaDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::InitAsDefaultInstance() {
}

ReplicaDescriptor::ReplicaDescriptor(const ReplicaDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.ReplicaDescriptor)
}

void ReplicaDescriptor::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  store_id_ = 0;
  replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplicaDescriptor::~ReplicaDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.ReplicaDescriptor)
  SharedDtor();
}

void ReplicaDescriptor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplicaDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplicaDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplicaDescriptor_descriptor_;
}

const ReplicaDescriptor& ReplicaDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

ReplicaDescriptor* ReplicaDescriptor::default_instance_ = NULL;

ReplicaDescriptor* ReplicaDescriptor::New(::google::protobuf::Arena* arena) const {
  ReplicaDescriptor* n = new ReplicaDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplicaDescriptor::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplicaDescriptor*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(node_id_, replica_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReplicaDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.ReplicaDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replica_id;
        break;
      }

      // optional int32 replica_id = 3;
      case 3: {
        if (tag == 24) {
         parse_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
          set_has_replica_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.ReplicaDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.ReplicaDescriptor)
  return false;
#undef DO_
}

void ReplicaDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.ReplicaDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  // optional int32 replica_id = 3;
  if (has_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replica_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.ReplicaDescriptor)
}

::google::protobuf::uint8* ReplicaDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.ReplicaDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_id(), target);
  }

  // optional int32 replica_id = 3;
  if (has_replica_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replica_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.ReplicaDescriptor)
  return target;
}

int ReplicaDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional int32 replica_id = 3;
    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplicaDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReplicaDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplicaDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplicaDescriptor::MergeFrom(const ReplicaDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_replica_id()) {
      set_replica_id(from.replica_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReplicaDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaDescriptor::CopyFrom(const ReplicaDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaDescriptor::IsInitialized() const {

  return true;
}

void ReplicaDescriptor::Swap(ReplicaDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplicaDescriptor::InternalSwap(ReplicaDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(store_id_, other->store_id_);
  std::swap(replica_id_, other->replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplicaDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplicaDescriptor_descriptor_;
  metadata.reflection = ReplicaDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplicaDescriptor

// optional int32 node_id = 1;
bool ReplicaDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplicaDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplicaDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplicaDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 ReplicaDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.node_id)
  return node_id_;
}
 void ReplicaDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.node_id)
}

// optional int32 store_id = 2;
bool ReplicaDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplicaDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplicaDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplicaDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 ReplicaDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.store_id)
  return store_id_;
}
 void ReplicaDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.store_id)
}

// optional int32 replica_id = 3;
bool ReplicaDescriptor::has_replica_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplicaDescriptor::set_has_replica_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplicaDescriptor::clear_has_replica_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplicaDescriptor::clear_replica_id() {
  replica_id_ = 0;
  clear_has_replica_id();
}
 ::google::protobuf::int32 ReplicaDescriptor::replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.ReplicaDescriptor.replica_id)
  return replica_id_;
}
 void ReplicaDescriptor::set_replica_id(::google::protobuf::int32 value) {
  set_has_replica_id();
  replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.ReplicaDescriptor.replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDescriptor::kRangeIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
const int RangeDescriptor::kNextReplicaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::InitAsDefaultInstance() {
}

RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  range_id_ = GOOGLE_LONGLONG(0);
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RangeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeDescriptor_descriptor_;
}

const RangeDescriptor& RangeDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

RangeDescriptor* RangeDescriptor::default_instance_ = NULL;

RangeDescriptor* RangeDescriptor::New(::google::protobuf::Arena* arena) const {
  RangeDescriptor* n = new RangeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 23u) {
    range_id_ = GOOGLE_LONGLONG(0);
    if (has_start_key()) {
      start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_end_key()) {
      end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    next_replica_id_ = 0;
  }
  replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.RangeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
          set_has_range_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replicas;
        break;
      }

      // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
      case 4: {
        if (tag == 34) {
         parse_replicas:
          DO_(input->IncrementRecursionDepth());
         parse_loop_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_replicas;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_next_replica_id;
        break;
      }

      // optional int32 next_replica_id = 5;
      case 5: {
        if (tag == 40) {
         parse_next_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_replica_id_)));
          set_has_next_replica_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.RangeDescriptor)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->replicas(i), output);
  }

  // optional int32 next_replica_id = 5;
  if (has_next_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_replica_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.RangeDescriptor)
}

::google::protobuf::uint8* RangeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.RangeDescriptor)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->range_id(), target);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  for (unsigned int i = 0, n = this->replicas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->replicas(i), target);
  }

  // optional int32 next_replica_id = 5;
  if (has_next_replica_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->next_replica_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.RangeDescriptor)
  return target;
}

int RangeDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 23u) {
    // optional int64 range_id = 1;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional int32 next_replica_id = 5;
    if (has_next_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_replica_id());
    }

  }
  // repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
  total_size += 1 * this->replicas_size();
  for (int i = 0; i < this->replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replicas(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RangeDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  replicas_.MergeFrom(from.replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
    if (from.has_start_key()) {
      set_has_start_key();
      start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
    }
    if (from.has_end_key()) {
      set_has_end_key();
      end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
    }
    if (from.has_next_replica_id()) {
      set_next_replica_id(from.next_replica_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RangeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {

  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDescriptor::InternalSwap(RangeDescriptor* other) {
  std::swap(range_id_, other->range_id_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  replicas_.UnsafeArenaSwap(&other->replicas_);
  std::swap(next_replica_id_, other->next_replica_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeDescriptor_descriptor_;
  metadata.reflection = RangeDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeDescriptor

// optional int64 range_id = 1;
bool RangeDescriptor::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RangeDescriptor::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RangeDescriptor::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RangeDescriptor::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
 ::google::protobuf::int64 RangeDescriptor::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.range_id)
  return range_id_;
}
 void RangeDescriptor::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.range_id)
}

// optional bytes start_key = 2;
bool RangeDescriptor::has_start_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RangeDescriptor::set_has_start_key() {
  _has_bits_[0] |= 0x00000002u;
}
void RangeDescriptor::clear_has_start_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void RangeDescriptor::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_key();
}
 const ::std::string& RangeDescriptor::start_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_start_key(const ::std::string& value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.start_key)
}
 void RangeDescriptor::set_start_key(const char* value) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.start_key)
}
 void RangeDescriptor::set_start_key(const void* value, size_t size) {
  set_has_start_key();
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.start_key)
}
 ::std::string* RangeDescriptor::mutable_start_key() {
  set_has_start_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeDescriptor::release_start_key() {
  clear_has_start_key();
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    set_has_start_key();
  } else {
    clear_has_start_key();
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.start_key)
}

// optional bytes end_key = 3;
bool RangeDescriptor::has_end_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RangeDescriptor::set_has_end_key() {
  _has_bits_[0] |= 0x00000004u;
}
void RangeDescriptor::clear_has_end_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void RangeDescriptor::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_end_key();
}
 const ::std::string& RangeDescriptor::end_key() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_end_key(const ::std::string& value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.end_key)
}
 void RangeDescriptor::set_end_key(const char* value) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.roachpb.RangeDescriptor.end_key)
}
 void RangeDescriptor::set_end_key(const void* value, size_t size) {
  set_has_end_key();
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.roachpb.RangeDescriptor.end_key)
}
 ::std::string* RangeDescriptor::mutable_end_key() {
  set_has_end_key();
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RangeDescriptor::release_end_key() {
  clear_has_end_key();
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RangeDescriptor::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    set_has_end_key();
  } else {
    clear_has_end_key();
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.RangeDescriptor.end_key)
}

// repeated .cockroach.roachpb.ReplicaDescriptor replicas = 4;
int RangeDescriptor::replicas_size() const {
  return replicas_.size();
}
void RangeDescriptor::clear_replicas() {
  replicas_.Clear();
}
const ::cockroach::roachpb::ReplicaDescriptor& RangeDescriptor::replicas(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Get(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Mutable(index);
}
::cockroach::roachpb::ReplicaDescriptor* RangeDescriptor::add_replicas() {
  // @@protoc_insertion_point(field_add:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >*
RangeDescriptor::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.roachpb.RangeDescriptor.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::cockroach::roachpb::ReplicaDescriptor >&
RangeDescriptor::replicas() const {
  // @@protoc_insertion_point(field_list:cockroach.roachpb.RangeDescriptor.replicas)
  return replicas_;
}

// optional int32 next_replica_id = 5;
bool RangeDescriptor::has_next_replica_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RangeDescriptor::set_has_next_replica_id() {
  _has_bits_[0] |= 0x00000010u;
}
void RangeDescriptor::clear_has_next_replica_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void RangeDescriptor::clear_next_replica_id() {
  next_replica_id_ = 0;
  clear_has_next_replica_id();
}
 ::google::protobuf::int32 RangeDescriptor::next_replica_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.RangeDescriptor.next_replica_id)
  return next_replica_id_;
}
 void RangeDescriptor::set_next_replica_id(::google::protobuf::int32 value) {
  set_has_next_replica_id();
  next_replica_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.RangeDescriptor.next_replica_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreCapacity::kCapacityFieldNumber;
const int StoreCapacity::kAvailableFieldNumber;
const int StoreCapacity::kRangeCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreCapacity::StoreCapacity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreCapacity)
}

void StoreCapacity::InitAsDefaultInstance() {
}

StoreCapacity::StoreCapacity(const StoreCapacity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreCapacity)
}

void StoreCapacity::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = GOOGLE_LONGLONG(0);
  available_ = GOOGLE_LONGLONG(0);
  range_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreCapacity::~StoreCapacity() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreCapacity)
  SharedDtor();
}

void StoreCapacity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreCapacity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreCapacity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreCapacity_descriptor_;
}

const StoreCapacity& StoreCapacity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

StoreCapacity* StoreCapacity::default_instance_ = NULL;

StoreCapacity* StoreCapacity::New(::google::protobuf::Arena* arena) const {
  StoreCapacity* n = new StoreCapacity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreCapacity::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreCapacity*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(capacity_, range_count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreCapacity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreCapacity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 capacity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // optional int64 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range_count;
        break;
      }

      // optional int32 range_count = 3;
      case 3: {
        if (tag == 24) {
         parse_range_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_count_)));
          set_has_range_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreCapacity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreCapacity)
  return false;
#undef DO_
}

void StoreCapacity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreCapacity)
  // optional int64 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->capacity(), output);
  }

  // optional int64 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->available(), output);
  }

  // optional int32 range_count = 3;
  if (has_range_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreCapacity)
}

::google::protobuf::uint8* StoreCapacity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.StoreCapacity)
  // optional int64 capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->capacity(), target);
  }

  // optional int64 available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->available(), target);
  }

  // optional int32 range_count = 3;
  if (has_range_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->range_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.StoreCapacity)
  return target;
}

int StoreCapacity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->capacity());
    }

    // optional int64 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->available());
    }

    // optional int32 range_count = 3;
    if (has_range_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreCapacity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreCapacity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreCapacity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreCapacity::MergeFrom(const StoreCapacity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_range_count()) {
      set_range_count(from.range_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreCapacity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreCapacity::CopyFrom(const StoreCapacity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreCapacity::IsInitialized() const {

  return true;
}

void StoreCapacity::Swap(StoreCapacity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreCapacity::InternalSwap(StoreCapacity* other) {
  std::swap(capacity_, other->capacity_);
  std::swap(available_, other->available_);
  std::swap(range_count_, other->range_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreCapacity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreCapacity_descriptor_;
  metadata.reflection = StoreCapacity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreCapacity

// optional int64 capacity = 1;
bool StoreCapacity::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreCapacity::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreCapacity::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreCapacity::clear_capacity() {
  capacity_ = GOOGLE_LONGLONG(0);
  clear_has_capacity();
}
 ::google::protobuf::int64 StoreCapacity::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.capacity)
  return capacity_;
}
 void StoreCapacity::set_capacity(::google::protobuf::int64 value) {
  set_has_capacity();
  capacity_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.capacity)
}

// optional int64 available = 2;
bool StoreCapacity::has_available() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreCapacity::set_has_available() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreCapacity::clear_has_available() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreCapacity::clear_available() {
  available_ = GOOGLE_LONGLONG(0);
  clear_has_available();
}
 ::google::protobuf::int64 StoreCapacity::available() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.available)
  return available_;
}
 void StoreCapacity::set_available(::google::protobuf::int64 value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.available)
}

// optional int32 range_count = 3;
bool StoreCapacity::has_range_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreCapacity::set_has_range_count() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreCapacity::clear_has_range_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreCapacity::clear_range_count() {
  range_count_ = 0;
  clear_has_range_count();
}
 ::google::protobuf::int32 StoreCapacity::range_count() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreCapacity.range_count)
  return range_count_;
}
 void StoreCapacity::set_range_count(::google::protobuf::int32 value) {
  set_has_range_count();
  range_count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreCapacity.range_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDescriptor::kNodeIdFieldNumber;
const int NodeDescriptor::kAddressFieldNumber;
const int NodeDescriptor::kAttrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDescriptor::NodeDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.NodeDescriptor)
}

void NodeDescriptor::InitAsDefaultInstance() {
  address_ = const_cast< ::cockroach::util::UnresolvedAddr*>(&::cockroach::util::UnresolvedAddr::default_instance());
  attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(&::cockroach::roachpb::Attributes::default_instance());
}

NodeDescriptor::NodeDescriptor(const NodeDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.NodeDescriptor)
}

void NodeDescriptor::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  address_ = NULL;
  attrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeDescriptor::~NodeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.NodeDescriptor)
  SharedDtor();
}

void NodeDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
    delete attrs_;
  }
}

void NodeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeDescriptor_descriptor_;
}

const NodeDescriptor& NodeDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

NodeDescriptor* NodeDescriptor::default_instance_ = NULL;

NodeDescriptor* NodeDescriptor::New(::google::protobuf::Arena* arena) const {
  NodeDescriptor* n = new NodeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    node_id_ = 0;
    if (has_address()) {
      if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
    }
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.NodeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .cockroach.util.UnresolvedAddr address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // optional .cockroach.roachpb.Attributes attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.NodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.NodeDescriptor)
  return false;
#undef DO_
}

void NodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.NodeDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional .cockroach.util.UnresolvedAddr address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->address_, output);
  }

  // optional .cockroach.roachpb.Attributes attrs = 3;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->attrs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.NodeDescriptor)
}

::google::protobuf::uint8* NodeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.NodeDescriptor)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional .cockroach.util.UnresolvedAddr address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->address_, target);
  }

  // optional .cockroach.roachpb.Attributes attrs = 3;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->attrs_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.NodeDescriptor)
  return target;
}

int NodeDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional .cockroach.util.UnresolvedAddr address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

    // optional .cockroach.roachpb.Attributes attrs = 3;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeDescriptor::MergeFrom(const NodeDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_address()) {
      mutable_address()->::cockroach::util::UnresolvedAddr::MergeFrom(from.address());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NodeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDescriptor::CopyFrom(const NodeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDescriptor::IsInitialized() const {

  return true;
}

void NodeDescriptor::Swap(NodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDescriptor::InternalSwap(NodeDescriptor* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(address_, other->address_);
  std::swap(attrs_, other->attrs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeDescriptor_descriptor_;
  metadata.reflection = NodeDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeDescriptor

// optional int32 node_id = 1;
bool NodeDescriptor::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NodeDescriptor::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NodeDescriptor::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NodeDescriptor::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
 ::google::protobuf::int32 NodeDescriptor::node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.node_id)
  return node_id_;
}
 void NodeDescriptor::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.NodeDescriptor.node_id)
}

// optional .cockroach.util.UnresolvedAddr address = 2;
bool NodeDescriptor::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NodeDescriptor::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void NodeDescriptor::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void NodeDescriptor::clear_address() {
  if (address_ != NULL) address_->::cockroach::util::UnresolvedAddr::Clear();
  clear_has_address();
}
const ::cockroach::util::UnresolvedAddr& NodeDescriptor::address() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::cockroach::util::UnresolvedAddr;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.address)
  return address_;
}
::cockroach::util::UnresolvedAddr* NodeDescriptor::release_address() {
  clear_has_address();
  ::cockroach::util::UnresolvedAddr* temp = address_;
  address_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_address(::cockroach::util::UnresolvedAddr* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.address)
}

// optional .cockroach.roachpb.Attributes attrs = 3;
bool NodeDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& NodeDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
::cockroach::roachpb::Attributes* NodeDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.NodeDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* NodeDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void NodeDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.NodeDescriptor.attrs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreDescriptor::kStoreIdFieldNumber;
const int StoreDescriptor::kAttrsFieldNumber;
const int StoreDescriptor::kNodeFieldNumber;
const int StoreDescriptor::kCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreDescriptor::StoreDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.roachpb.StoreDescriptor)
}

void StoreDescriptor::InitAsDefaultInstance() {
  attrs_ = const_cast< ::cockroach::roachpb::Attributes*>(&::cockroach::roachpb::Attributes::default_instance());
  node_ = const_cast< ::cockroach::roachpb::NodeDescriptor*>(&::cockroach::roachpb::NodeDescriptor::default_instance());
  capacity_ = const_cast< ::cockroach::roachpb::StoreCapacity*>(&::cockroach::roachpb::StoreCapacity::default_instance());
}

StoreDescriptor::StoreDescriptor(const StoreDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.roachpb.StoreDescriptor)
}

void StoreDescriptor::SharedCtor() {
  _cached_size_ = 0;
  store_id_ = 0;
  attrs_ = NULL;
  node_ = NULL;
  capacity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreDescriptor::~StoreDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.roachpb.StoreDescriptor)
  SharedDtor();
}

void StoreDescriptor::SharedDtor() {
  if (this != default_instance_) {
    delete attrs_;
    delete node_;
    delete capacity_;
  }
}

void StoreDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreDescriptor_descriptor_;
}

const StoreDescriptor& StoreDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2froachpb_2fmetadata_2eproto();
  return *default_instance_;
}

StoreDescriptor* StoreDescriptor::default_instance_ = NULL;

StoreDescriptor* StoreDescriptor::New(::google::protobuf::Arena* arena) const {
  StoreDescriptor* n = new StoreDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    store_id_ = 0;
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
    }
    if (has_node()) {
      if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
    }
    if (has_capacity()) {
      if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StoreDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.roachpb.StoreDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 store_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // optional .cockroach.roachpb.Attributes attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }

      // optional .cockroach.roachpb.NodeDescriptor node = 3;
      case 3: {
        if (tag == 26) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_capacity;
        break;
      }

      // optional .cockroach.roachpb.StoreCapacity capacity = 4;
      case 4: {
        if (tag == 34) {
         parse_capacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.roachpb.StoreDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.roachpb.StoreDescriptor)
  return false;
#undef DO_
}

void StoreDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.roachpb.StoreDescriptor)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->store_id(), output);
  }

  // optional .cockroach.roachpb.Attributes attrs = 2;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->attrs_, output);
  }

  // optional .cockroach.roachpb.NodeDescriptor node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->node_, output);
  }

  // optional .cockroach.roachpb.StoreCapacity capacity = 4;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->capacity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.roachpb.StoreDescriptor)
}

::google::protobuf::uint8* StoreDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.roachpb.StoreDescriptor)
  // optional int32 store_id = 1;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->store_id(), target);
  }

  // optional .cockroach.roachpb.Attributes attrs = 2;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->attrs_, target);
  }

  // optional .cockroach.roachpb.NodeDescriptor node = 3;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->node_, target);
  }

  // optional .cockroach.roachpb.StoreCapacity capacity = 4;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->capacity_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.roachpb.StoreDescriptor)
  return target;
}

int StoreDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 store_id = 1;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional .cockroach.roachpb.Attributes attrs = 2;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->attrs_);
    }

    // optional .cockroach.roachpb.NodeDescriptor node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->node_);
    }

    // optional .cockroach.roachpb.StoreCapacity capacity = 4;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capacity_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreDescriptor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreDescriptor>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreDescriptor::MergeFrom(const StoreDescriptor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::roachpb::Attributes::MergeFrom(from.attrs());
    }
    if (from.has_node()) {
      mutable_node()->::cockroach::roachpb::NodeDescriptor::MergeFrom(from.node());
    }
    if (from.has_capacity()) {
      mutable_capacity()->::cockroach::roachpb::StoreCapacity::MergeFrom(from.capacity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StoreDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDescriptor::CopyFrom(const StoreDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDescriptor::IsInitialized() const {

  return true;
}

void StoreDescriptor::Swap(StoreDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreDescriptor::InternalSwap(StoreDescriptor* other) {
  std::swap(store_id_, other->store_id_);
  std::swap(attrs_, other->attrs_);
  std::swap(node_, other->node_);
  std::swap(capacity_, other->capacity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreDescriptor_descriptor_;
  metadata.reflection = StoreDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreDescriptor

// optional int32 store_id = 1;
bool StoreDescriptor::has_store_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StoreDescriptor::set_has_store_id() {
  _has_bits_[0] |= 0x00000001u;
}
void StoreDescriptor::clear_has_store_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void StoreDescriptor::clear_store_id() {
  store_id_ = 0;
  clear_has_store_id();
}
 ::google::protobuf::int32 StoreDescriptor::store_id() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.store_id)
  return store_id_;
}
 void StoreDescriptor::set_store_id(::google::protobuf::int32 value) {
  set_has_store_id();
  store_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.roachpb.StoreDescriptor.store_id)
}

// optional .cockroach.roachpb.Attributes attrs = 2;
bool StoreDescriptor::has_attrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StoreDescriptor::set_has_attrs() {
  _has_bits_[0] |= 0x00000002u;
}
void StoreDescriptor::clear_has_attrs() {
  _has_bits_[0] &= ~0x00000002u;
}
void StoreDescriptor::clear_attrs() {
  if (attrs_ != NULL) attrs_->::cockroach::roachpb::Attributes::Clear();
  clear_has_attrs();
}
const ::cockroach::roachpb::Attributes& StoreDescriptor::attrs() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_ != NULL ? *attrs_ : *default_instance_->attrs_;
}
::cockroach::roachpb::Attributes* StoreDescriptor::mutable_attrs() {
  set_has_attrs();
  if (attrs_ == NULL) {
    attrs_ = new ::cockroach::roachpb::Attributes;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.attrs)
  return attrs_;
}
::cockroach::roachpb::Attributes* StoreDescriptor::release_attrs() {
  clear_has_attrs();
  ::cockroach::roachpb::Attributes* temp = attrs_;
  attrs_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_attrs(::cockroach::roachpb::Attributes* attrs) {
  delete attrs_;
  attrs_ = attrs;
  if (attrs) {
    set_has_attrs();
  } else {
    clear_has_attrs();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.attrs)
}

// optional .cockroach.roachpb.NodeDescriptor node = 3;
bool StoreDescriptor::has_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StoreDescriptor::set_has_node() {
  _has_bits_[0] |= 0x00000004u;
}
void StoreDescriptor::clear_has_node() {
  _has_bits_[0] &= ~0x00000004u;
}
void StoreDescriptor::clear_node() {
  if (node_ != NULL) node_->::cockroach::roachpb::NodeDescriptor::Clear();
  clear_has_node();
}
const ::cockroach::roachpb::NodeDescriptor& StoreDescriptor::node() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    node_ = new ::cockroach::roachpb::NodeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.node)
  return node_;
}
::cockroach::roachpb::NodeDescriptor* StoreDescriptor::release_node() {
  clear_has_node();
  ::cockroach::roachpb::NodeDescriptor* temp = node_;
  node_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_node(::cockroach::roachpb::NodeDescriptor* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.node)
}

// optional .cockroach.roachpb.StoreCapacity capacity = 4;
bool StoreDescriptor::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StoreDescriptor::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
void StoreDescriptor::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
void StoreDescriptor::clear_capacity() {
  if (capacity_ != NULL) capacity_->::cockroach::roachpb::StoreCapacity::Clear();
  clear_has_capacity();
}
const ::cockroach::roachpb::StoreCapacity& StoreDescriptor::capacity() const {
  // @@protoc_insertion_point(field_get:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_ != NULL ? *capacity_ : *default_instance_->capacity_;
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::mutable_capacity() {
  set_has_capacity();
  if (capacity_ == NULL) {
    capacity_ = new ::cockroach::roachpb::StoreCapacity;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.roachpb.StoreDescriptor.capacity)
  return capacity_;
}
::cockroach::roachpb::StoreCapacity* StoreDescriptor::release_capacity() {
  clear_has_capacity();
  ::cockroach::roachpb::StoreCapacity* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
void StoreDescriptor::set_allocated_capacity(::cockroach::roachpb::StoreCapacity* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    set_has_capacity();
  } else {
    clear_has_capacity();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.roachpb.StoreDescriptor.capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roachpb
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
