// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/util/unresolved_addr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/util/unresolved_addr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {

void protobuf_ShutdownFile_cockroach_2futil_2funresolved_5faddr_2eproto() {
  delete UnresolvedAddr::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  UnresolvedAddr::default_instance_ = new UnresolvedAddr();
  UnresolvedAddr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2futil_2funresolved_5faddr_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto_once_);
void protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto_once_,
                 &protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2futil_2funresolved_5faddr_2eproto {
  StaticDescriptorInitializer_cockroach_2futil_2funresolved_5faddr_2eproto() {
    protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto();
  }
} static_descriptor_initializer_cockroach_2futil_2funresolved_5faddr_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnresolvedAddr::kNetworkFieldFieldNumber;
const int UnresolvedAddr::kAddressFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnresolvedAddr::UnresolvedAddr()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.UnresolvedAddr)
}

void UnresolvedAddr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnresolvedAddr::UnresolvedAddr(const UnresolvedAddr& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.util.UnresolvedAddr)
}

void UnresolvedAddr::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnresolvedAddr::~UnresolvedAddr() {
  // @@protoc_insertion_point(destructor:cockroach.util.UnresolvedAddr)
  SharedDtor();
}

void UnresolvedAddr::SharedDtor() {
  network_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnresolvedAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnresolvedAddr& UnresolvedAddr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2futil_2funresolved_5faddr_2eproto();
#endif
  return *default_instance_;
}

UnresolvedAddr* UnresolvedAddr::default_instance_ = NULL;

UnresolvedAddr* UnresolvedAddr::New(::google::protobuf::Arena* arena) const {
  UnresolvedAddr* n = new UnresolvedAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnresolvedAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:cockroach.util.UnresolvedAddr)
  network_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnresolvedAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.util.UnresolvedAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string network_field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->network_field().data(), this->network_field().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.UnresolvedAddr.network_field"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address_field;
        break;
      }

      // optional string address_field = 2;
      case 2: {
        if (tag == 18) {
         parse_address_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address_field().data(), this->address_field().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.UnresolvedAddr.address_field"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.UnresolvedAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.UnresolvedAddr)
  return false;
#undef DO_
}

void UnresolvedAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.UnresolvedAddr)
  // optional string network_field = 1;
  if (this->network_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->network_field().data(), this->network_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.UnresolvedAddr.network_field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->network_field(), output);
  }

  // optional string address_field = 2;
  if (this->address_field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address_field().data(), this->address_field().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cockroach.util.UnresolvedAddr.address_field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address_field(), output);
  }

  // @@protoc_insertion_point(serialize_end:cockroach.util.UnresolvedAddr)
}

int UnresolvedAddr::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cockroach.util.UnresolvedAddr)
  int total_size = 0;

  // optional string network_field = 1;
  if (this->network_field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->network_field());
  }

  // optional string address_field = 2;
  if (this->address_field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address_field());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnresolvedAddr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnresolvedAddr*>(&from));
}

void UnresolvedAddr::MergeFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cockroach.util.UnresolvedAddr)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.network_field().size() > 0) {

    network_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.network_field_);
  }
  if (from.address_field().size() > 0) {

    address_field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_field_);
  }
}

void UnresolvedAddr::CopyFrom(const UnresolvedAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cockroach.util.UnresolvedAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnresolvedAddr::IsInitialized() const {

  return true;
}

void UnresolvedAddr::Swap(UnresolvedAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnresolvedAddr::InternalSwap(UnresolvedAddr* other) {
  network_field_.Swap(&other->network_field_);
  address_field_.Swap(&other->address_field_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UnresolvedAddr::GetTypeName() const {
  return "cockroach.util.UnresolvedAddr";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnresolvedAddr

// optional string network_field = 1;
void UnresolvedAddr::clear_network_field() {
  network_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnresolvedAddr::network_field() const {
  // @@protoc_insertion_point(field_get:cockroach.util.UnresolvedAddr.network_field)
  return network_field_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnresolvedAddr::set_network_field(const ::std::string& value) {
  
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.UnresolvedAddr.network_field)
}
 void UnresolvedAddr::set_network_field(const char* value) {
  
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.UnresolvedAddr.network_field)
}
 void UnresolvedAddr::set_network_field(const char* value, size_t size) {
  
  network_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.UnresolvedAddr.network_field)
}
 ::std::string* UnresolvedAddr::mutable_network_field() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.UnresolvedAddr.network_field)
  return network_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnresolvedAddr::release_network_field() {
  // @@protoc_insertion_point(field_release:cockroach.util.UnresolvedAddr.network_field)
  
  return network_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnresolvedAddr::set_allocated_network_field(::std::string* network_field) {
  if (network_field != NULL) {
    
  } else {
    
  }
  network_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_field);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.UnresolvedAddr.network_field)
}

// optional string address_field = 2;
void UnresolvedAddr::clear_address_field() {
  address_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnresolvedAddr::address_field() const {
  // @@protoc_insertion_point(field_get:cockroach.util.UnresolvedAddr.address_field)
  return address_field_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnresolvedAddr::set_address_field(const ::std::string& value) {
  
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.UnresolvedAddr.address_field)
}
 void UnresolvedAddr::set_address_field(const char* value) {
  
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.UnresolvedAddr.address_field)
}
 void UnresolvedAddr::set_address_field(const char* value, size_t size) {
  
  address_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.UnresolvedAddr.address_field)
}
 ::std::string* UnresolvedAddr::mutable_address_field() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.UnresolvedAddr.address_field)
  return address_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnresolvedAddr::release_address_field() {
  // @@protoc_insertion_point(field_release:cockroach.util.UnresolvedAddr.address_field)
  
  return address_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnresolvedAddr::set_allocated_address_field(::std::string* address_field) {
  if (address_field != NULL) {
    
  } else {
    
  }
  address_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address_field);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.UnresolvedAddr.address_field)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
