// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/util/tracing/span.proto

#ifndef PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED
#define PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
namespace tracing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto();

class WireSpan;

// ===================================================================

class WireSpan : public ::google::protobuf::Message {
 public:
  WireSpan();
  virtual ~WireSpan();

  WireSpan(const WireSpan& from);

  inline WireSpan& operator=(const WireSpan& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WireSpan& default_instance();

  void Swap(WireSpan* other);

  // implements Message ----------------------------------------------

  inline WireSpan* New() const { return New(NULL); }

  WireSpan* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WireSpan& from);
  void MergeFrom(const WireSpan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WireSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes context = 1;
  void clear_context();
  static const int kContextFieldNumber = 1;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const void* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // optional bytes baggage = 2;
  void clear_baggage();
  static const int kBaggageFieldNumber = 2;
  const ::std::string& baggage() const;
  void set_baggage(const ::std::string& value);
  void set_baggage(const char* value);
  void set_baggage(const void* value, size_t size);
  ::std::string* mutable_baggage();
  ::std::string* release_baggage();
  void set_allocated_baggage(::std::string* baggage);

  // @@protoc_insertion_point(class_scope:cockroach.util.tracing.WireSpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr baggage_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  friend void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto();

  void InitAsDefaultInstance();
  static WireSpan* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WireSpan

// optional bytes context = 1;
inline void WireSpan::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WireSpan::context() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.WireSpan.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WireSpan::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.WireSpan.context)
}
inline void WireSpan::set_context(const char* value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.tracing.WireSpan.context)
}
inline void WireSpan::set_context(const void* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.tracing.WireSpan.context)
}
inline ::std::string* WireSpan::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.tracing.WireSpan.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WireSpan::release_context() {
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WireSpan::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.tracing.WireSpan.context)
}

// optional bytes baggage = 2;
inline void WireSpan::clear_baggage() {
  baggage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WireSpan::baggage() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.WireSpan.baggage)
  return baggage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WireSpan::set_baggage(const ::std::string& value) {
  
  baggage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.WireSpan.baggage)
}
inline void WireSpan::set_baggage(const char* value) {
  
  baggage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.tracing.WireSpan.baggage)
}
inline void WireSpan::set_baggage(const void* value, size_t size) {
  
  baggage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.tracing.WireSpan.baggage)
}
inline ::std::string* WireSpan::mutable_baggage() {
  
  // @@protoc_insertion_point(field_mutable:cockroach.util.tracing.WireSpan.baggage)
  return baggage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WireSpan::release_baggage() {
  
  return baggage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WireSpan::set_allocated_baggage(::std::string* baggage) {
  if (baggage != NULL) {
    
  } else {
    
  }
  baggage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baggage);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.tracing.WireSpan.baggage)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracing
}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED
