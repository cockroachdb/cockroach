// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/util/tracing/span.proto

#ifndef PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED
#define PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
namespace tracing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto();

class Span;

// ===================================================================

class Span : public ::google::protobuf::Message {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Span& default_instance();

  void Swap(Span* other);

  // implements Message ----------------------------------------------

  inline Span* New() const { return New(NULL); }

  Span* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional int64 trace_id = 1;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  ::google::protobuf::int64 trace_id() const;
  void set_trace_id(::google::protobuf::int64 value);

  // optional int64 span_id = 2;
  void clear_span_id();
  static const int kSpanIdFieldNumber = 2;
  ::google::protobuf::int64 span_id() const;
  void set_span_id(::google::protobuf::int64 value);

  // optional bool sampled = 3;
  void clear_sampled();
  static const int kSampledFieldNumber = 3;
  bool sampled() const;
  void set_sampled(bool value);

  // map<string, string> baggage = 4;
  int baggage_size() const;
  void clear_baggage();
  static const int kBaggageFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      baggage() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_baggage();

  // @@protoc_insertion_point(class_scope:cockroach.util.tracing.Span)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 trace_id_;
  ::google::protobuf::int64 span_id_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      Span_BaggageEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > baggage_;
  bool sampled_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  friend void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto();

  void InitAsDefaultInstance();
  static Span* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional int64 trace_id = 1;
inline void Span::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Span::trace_id() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.trace_id)
  return trace_id_;
}
inline void Span::set_trace_id(::google::protobuf::int64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.trace_id)
}

// optional int64 span_id = 2;
inline void Span::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Span::span_id() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.span_id)
  return span_id_;
}
inline void Span::set_span_id(::google::protobuf::int64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.span_id)
}

// optional bool sampled = 3;
inline void Span::clear_sampled() {
  sampled_ = false;
}
inline bool Span::sampled() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.sampled)
  return sampled_;
}
inline void Span::set_sampled(bool value) {
  
  sampled_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.sampled)
}

// map<string, string> baggage = 4;
inline int Span::baggage_size() const {
  return baggage_.size();
}
inline void Span::clear_baggage() {
  baggage_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Span::baggage() const {
  // @@protoc_insertion_point(field_map:cockroach.util.tracing.Span.baggage)
  return baggage_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Span::mutable_baggage() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.util.tracing.Span.baggage)
  return baggage_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracing
}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2futil_2ftracing_2fspan_2eproto__INCLUDED
