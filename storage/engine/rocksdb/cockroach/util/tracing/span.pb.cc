// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/util/tracing/span.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/util/tracing/span.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
namespace tracing {

namespace {

const ::google::protobuf::Descriptor* Span_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto() {
  protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/util/tracing/span.proto");
  GOOGLE_CHECK(file != NULL);
  Span_descriptor_ = file->message_type(0);
  static const int Span_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, attributes_),
  };
  Span_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_descriptor_,
      Span::default_instance_,
      Span_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _has_bits_[0]),
      -1,
      -1,
      sizeof(Span),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_descriptor_, &Span::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto() {
  delete Span::default_instance_;
  delete Span_reflection_;
}

void protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!cockroach/util/tracing/span.proto\022\026coc"
    "kroach.util.tracing\032\024gogoproto/gogo.prot"
    "o\"+\n\004Span\022\017\n\007context\030\001 \001(\014\022\022\n\nattributes"
    "\030\002 \001(\014B\tZ\007tracingX\000", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/util/tracing/span.proto", &protobuf_RegisterTypes);
  Span::default_instance_ = new Span();
  Span::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2futil_2ftracing_2fspan_2eproto {
  StaticDescriptorInitializer_cockroach_2futil_2ftracing_2fspan_2eproto() {
    protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  }
} static_descriptor_initializer_cockroach_2futil_2ftracing_2fspan_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kContextFieldNumber;
const int Span::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.Span)
}

void Span::InitAsDefaultInstance() {
}

Span::Span(const Span& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.Span)
}

void Span::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attributes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attributes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_descriptor_;
}

const Span& Span::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  return *default_instance_;
}

Span* Span::default_instance_ = NULL;

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_context()) {
      context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_attributes()) {
      attributes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attributes;
        break;
      }

      // optional bytes attributes = 2;
      case 2: {
        if (tag == 18) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.Span)
  // optional bytes context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->context(), output);
  }

  // optional bytes attributes = 2;
  if (has_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->attributes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.Span)
}

::google::protobuf::uint8* Span::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.util.tracing.Span)
  // optional bytes context = 1;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->context(), target);
  }

  // optional bytes attributes = 2;
  if (has_attributes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->attributes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.util.tracing.Span)
  return target;
}

int Span::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // optional bytes attributes = 2;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attributes());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      set_has_context();
      context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
    }
    if (from.has_attributes()) {
      set_has_attributes();
      attributes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attributes_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {

  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  context_.Swap(&other->context_);
  attributes_.Swap(&other->attributes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_descriptor_;
  metadata.reflection = Span_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional bytes context = 1;
bool Span::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Span::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
void Span::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void Span::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
 const ::std::string& Span::context() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.context)
}
 void Span::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.tracing.Span.context)
}
 void Span::set_context(const void* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.tracing.Span.context)
}
 ::std::string* Span::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:cockroach.util.tracing.Span.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_context() {
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.tracing.Span.context)
}

// optional bytes attributes = 2;
bool Span::has_attributes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Span::set_has_attributes() {
  _has_bits_[0] |= 0x00000002u;
}
void Span::clear_has_attributes() {
  _has_bits_[0] &= ~0x00000002u;
}
void Span::clear_attributes() {
  attributes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attributes();
}
 const ::std::string& Span::attributes() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.attributes)
  return attributes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_attributes(const ::std::string& value) {
  set_has_attributes();
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.attributes)
}
 void Span::set_attributes(const char* value) {
  set_has_attributes();
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.util.tracing.Span.attributes)
}
 void Span::set_attributes(const void* value, size_t size) {
  set_has_attributes();
  attributes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.util.tracing.Span.attributes)
}
 ::std::string* Span::mutable_attributes() {
  set_has_attributes();
  // @@protoc_insertion_point(field_mutable:cockroach.util.tracing.Span.attributes)
  return attributes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Span::release_attributes() {
  clear_has_attributes();
  return attributes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Span::set_allocated_attributes(::std::string* attributes) {
  if (attributes != NULL) {
    set_has_attributes();
  } else {
    clear_has_attributes();
  }
  attributes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attributes);
  // @@protoc_insertion_point(field_set_allocated:cockroach.util.tracing.Span.attributes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracing
}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
