// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/util/tracing/span.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/util/tracing/span.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace util {
namespace tracing {

namespace {

const ::google::protobuf::Descriptor* Span_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_reflection_ = NULL;
const ::google::protobuf::Descriptor* Span_BaggageEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto() {
  protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/util/tracing/span.proto");
  GOOGLE_CHECK(file != NULL);
  Span_descriptor_ = file->message_type(0);
  static const int Span_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, span_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, sampled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, baggage_),
  };
  Span_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Span_descriptor_,
      Span::default_instance_,
      Span_offsets_,
      -1,
      -1,
      -1,
      sizeof(Span),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _is_default_instance_));
  Span_BaggageEntry_descriptor_ = Span_descriptor_->nested_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2futil_2ftracing_2fspan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Span_descriptor_, &Span::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Span_BaggageEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                Span_BaggageEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto() {
  delete Span::default_instance_;
  delete Span_reflection_;
}

void protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!cockroach/util/tracing/span.proto\022\026coc"
    "kroach.util.tracing\032\024gogoproto/gogo.prot"
    "o\"\277\001\n\004Span\022\035\n\010trace_id\030\001 \001(\003B\013\342\336\037\007TraceI"
    "D\022\033\n\007span_id\030\002 \001(\003B\n\342\336\037\006SpanID\022\017\n\007sample"
    "d\030\003 \001(\010\022:\n\007baggage\030\004 \003(\0132).cockroach.uti"
    "l.tracing.Span.BaggageEntry\032.\n\014BaggageEn"
    "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\tZ\007t"
    "racingX\000b\006proto3", 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/util/tracing/span.proto", &protobuf_RegisterTypes);
  Span::default_instance_ = new Span();
  Span::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2futil_2ftracing_2fspan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2futil_2ftracing_2fspan_2eproto {
  StaticDescriptorInitializer_cockroach_2futil_2ftracing_2fspan_2eproto() {
    protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  }
} static_descriptor_initializer_cockroach_2futil_2ftracing_2fspan_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Span::kTraceIdFieldNumber;
const int Span::kSpanIdFieldNumber;
const int Span::kSampledFieldNumber;
const int Span::kBaggageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Span::Span()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.util.tracing.Span)
}

void Span::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Span::Span(const Span& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.util.tracing.Span)
}

void Span::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  trace_id_ = GOOGLE_LONGLONG(0);
  span_id_ = GOOGLE_LONGLONG(0);
  sampled_ = false;
  baggage_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  baggage_.SetEntryDescriptor(
      &::cockroach::util::tracing::Span_BaggageEntry_descriptor_);
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:cockroach.util.tracing.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_descriptor_;
}

const Span& Span::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2futil_2ftracing_2fspan_2eproto();
  return *default_instance_;
}

Span* Span::default_instance_ = NULL;

Span* Span::New(::google::protobuf::Arena* arena) const {
  Span* n = new Span;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Span::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Span*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(trace_id_, span_id_);
  sampled_ = false;

#undef ZR_HELPER_
#undef ZR_

  baggage_.Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.util.tracing.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trace_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trace_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_span_id;
        break;
      }

      // optional int64 span_id = 2;
      case 2: {
        if (tag == 16) {
         parse_span_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &span_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sampled;
        break;
      }

      // optional bool sampled = 3;
      case 3: {
        if (tag == 24) {
         parse_sampled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sampled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baggage;
        break;
      }

      // map<string, string> baggage = 4;
      case 4: {
        if (tag == 34) {
         parse_baggage:
          DO_(input->IncrementRecursionDepth());
         parse_loop_baggage:
          ::google::protobuf::scoped_ptr<Span_BaggageEntry> entry(baggage_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_baggage())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.Span.BaggageEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cockroach.util.tracing.Span.BaggageEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_baggage;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.util.tracing.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.util.tracing.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.util.tracing.Span)
  // optional int64 trace_id = 1;
  if (this->trace_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->trace_id(), output);
  }

  // optional int64 span_id = 2;
  if (this->span_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->span_id(), output);
  }

  // optional bool sampled = 3;
  if (this->sampled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sampled(), output);
  }

  // map<string, string> baggage = 4;
  {
    ::google::protobuf::scoped_ptr<Span_BaggageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->baggage().begin();
        it != this->baggage().end(); ++it) {
      entry.reset(baggage_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          4, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "cockroach.util.tracing.Span.BaggageEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "cockroach.util.tracing.Span.BaggageEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_end:cockroach.util.tracing.Span)
}

::google::protobuf::uint8* Span::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.util.tracing.Span)
  // optional int64 trace_id = 1;
  if (this->trace_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->trace_id(), target);
  }

  // optional int64 span_id = 2;
  if (this->span_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->span_id(), target);
  }

  // optional bool sampled = 3;
  if (this->sampled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sampled(), target);
  }

  // map<string, string> baggage = 4;
  {
    ::google::protobuf::scoped_ptr<Span_BaggageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->baggage().begin();
        it != this->baggage().end(); ++it) {
      entry.reset(baggage_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              4, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "cockroach.util.tracing.Span.BaggageEntry.key");
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "cockroach.util.tracing.Span.BaggageEntry.value");
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:cockroach.util.tracing.Span)
  return target;
}

int Span::ByteSize() const {
  int total_size = 0;

  // optional int64 trace_id = 1;
  if (this->trace_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->trace_id());
  }

  // optional int64 span_id = 2;
  if (this->span_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->span_id());
  }

  // optional bool sampled = 3;
  if (this->sampled() != 0) {
    total_size += 1 + 1;
  }

  // map<string, string> baggage = 4;
  total_size += 1 * this->baggage_size();
  {
    ::google::protobuf::scoped_ptr<Span_BaggageEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->baggage().begin();
        it != this->baggage().end(); ++it) {
      entry.reset(baggage_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Span* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Span>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  baggage_.MergeFrom(from.baggage_);
  if (from.trace_id() != 0) {
    set_trace_id(from.trace_id());
  }
  if (from.span_id() != 0) {
    set_span_id(from.span_id());
  }
  if (from.sampled() != 0) {
    set_sampled(from.sampled());
  }
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {

  return true;
}

void Span::Swap(Span* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Span::InternalSwap(Span* other) {
  std::swap(trace_id_, other->trace_id_);
  std::swap(span_id_, other->span_id_);
  std::swap(sampled_, other->sampled_);
  baggage_.Swap(&other->baggage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_descriptor_;
  metadata.reflection = Span_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Span

// optional int64 trace_id = 1;
void Span::clear_trace_id() {
  trace_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Span::trace_id() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.trace_id)
  return trace_id_;
}
 void Span::set_trace_id(::google::protobuf::int64 value) {
  
  trace_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.trace_id)
}

// optional int64 span_id = 2;
void Span::clear_span_id() {
  span_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Span::span_id() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.span_id)
  return span_id_;
}
 void Span::set_span_id(::google::protobuf::int64 value) {
  
  span_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.span_id)
}

// optional bool sampled = 3;
void Span::clear_sampled() {
  sampled_ = false;
}
 bool Span::sampled() const {
  // @@protoc_insertion_point(field_get:cockroach.util.tracing.Span.sampled)
  return sampled_;
}
 void Span::set_sampled(bool value) {
  
  sampled_ = value;
  // @@protoc_insertion_point(field_set:cockroach.util.tracing.Span.sampled)
}

// map<string, string> baggage = 4;
int Span::baggage_size() const {
  return baggage_.size();
}
void Span::clear_baggage() {
  baggage_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
Span::baggage() const {
  // @@protoc_insertion_point(field_map:cockroach.util.tracing.Span.baggage)
  return baggage_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
Span::mutable_baggage() {
  // @@protoc_insertion_point(field_mutable_map:cockroach.util.tracing.Span.baggage)
  return baggage_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracing
}  // namespace util
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
