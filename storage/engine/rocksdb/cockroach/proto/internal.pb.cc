// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RaftCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InternalTimeSeriesSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InternalTimeSeriesSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_KeyValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/internal.proto");
  GOOGLE_CHECK(file != NULL);
  RaftCommand_descriptor_ = file->message_type(0);
  static const int RaftCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, range_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, origin_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, cmd_),
  };
  RaftCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCommand_descriptor_,
      RaftCommand::default_instance_,
      RaftCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCommand, _internal_metadata_),
      -1);
  InternalTimeSeriesData_descriptor_ = file->message_type(1);
  static const int InternalTimeSeriesData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, start_timestamp_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, sample_duration_nanos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, samples_),
  };
  InternalTimeSeriesData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesData_descriptor_,
      InternalTimeSeriesData::default_instance_,
      InternalTimeSeriesData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesData, _internal_metadata_),
      -1);
  InternalTimeSeriesSample_descriptor_ = file->message_type(2);
  static const int InternalTimeSeriesSample_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, min_),
  };
  InternalTimeSeriesSample_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InternalTimeSeriesSample_descriptor_,
      InternalTimeSeriesSample::default_instance_,
      InternalTimeSeriesSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _has_bits_[0]),
      -1,
      -1,
      sizeof(InternalTimeSeriesSample),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InternalTimeSeriesSample, _internal_metadata_),
      -1);
  RaftTruncatedState_descriptor_ = file->message_type(3);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::default_instance_,
      RaftTruncatedState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftTruncatedState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _internal_metadata_),
      -1);
  RaftSnapshotData_descriptor_ = file->message_type(4);
  static const int RaftSnapshotData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, range_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, kv_),
  };
  RaftSnapshotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::default_instance_,
      RaftSnapshotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _internal_metadata_),
      -1);
  RaftSnapshotData_KeyValue_descriptor_ = RaftSnapshotData_descriptor_->nested_type(0);
  static const int RaftSnapshotData_KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, value_),
  };
  RaftSnapshotData_KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_KeyValue_descriptor_,
      RaftSnapshotData_KeyValue::default_instance_,
      RaftSnapshotData_KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(RaftSnapshotData_KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData_KeyValue, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCommand_descriptor_, &RaftCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesData_descriptor_, &InternalTimeSeriesData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InternalTimeSeriesSample_descriptor_, &InternalTimeSeriesSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftTruncatedState_descriptor_, &RaftTruncatedState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_descriptor_, &RaftSnapshotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_KeyValue_descriptor_, &RaftSnapshotData_KeyValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto() {
  delete RaftCommand::default_instance_;
  delete RaftCommand_reflection_;
  delete InternalTimeSeriesData::default_instance_;
  delete InternalTimeSeriesData_reflection_;
  delete InternalTimeSeriesSample::default_instance_;
  delete InternalTimeSeriesSample_reflection_;
  delete RaftTruncatedState::default_instance_;
  delete RaftTruncatedState_reflection_;
  delete RaftSnapshotData::default_instance_;
  delete RaftSnapshotData_reflection_;
  delete RaftSnapshotData_KeyValue::default_instance_;
  delete RaftSnapshotData_KeyValue_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fapi_2eproto();
  ::cockroach::proto::protobuf_AddDesc_cockroach_2fproto_2fmetadata_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cockroach/proto/internal.proto\022\017cockro"
    "ach.proto\032\031cockroach/proto/api.proto\032\036co"
    "ckroach/proto/metadata.proto\032\024gogoproto/"
    "gogo.proto\"\251\001\n\013RaftCommand\022,\n\010range_id\030\001"
    " \001(\003B\032\310\336\037\000\342\336\037\007RangeID\372\336\037\007RangeID\022:\n\016orig"
    "in_node_id\030\002 \001(\004B\"\310\336\037\000\342\336\037\014OriginNodeID\372\336"
    "\037\nRaftNodeID\0220\n\003cmd\030\003 \001(\0132\035.cockroach.pr"
    "oto.BatchRequestB\004\310\336\037\000\"\236\001\n\026InternalTimeS"
    "eriesData\022#\n\025start_timestamp_nanos\030\001 \001(\003"
    "B\004\310\336\037\000\022#\n\025sample_duration_nanos\030\002 \001(\003B\004\310"
    "\336\037\000\022:\n\007samples\030\003 \003(\0132).cockroach.proto.I"
    "nternalTimeSeriesSample\"r\n\030InternalTimeS"
    "eriesSample\022\024\n\006offset\030\001 \001(\005B\004\310\336\037\000\022\023\n\005cou"
    "nt\030\006 \001(\rB\004\310\336\037\000\022\021\n\003sum\030\007 \001(\001B\004\310\336\037\000\022\013\n\003max"
    "\030\010 \001(\001\022\013\n\003min\030\t \001(\001\"=\n\022RaftTruncatedStat"
    "e\022\023\n\005index\030\001 \001(\004B\004\310\336\037\000\022\022\n\004term\030\002 \001(\004B\004\310\336"
    "\037\000\"\274\001\n\020RaftSnapshotData\022@\n\020range_descrip"
    "tor\030\001 \001(\0132 .cockroach.proto.RangeDescrip"
    "torB\004\310\336\037\000\022>\n\002KV\030\002 \003(\0132*.cockroach.proto."
    "RaftSnapshotData.KeyValueB\006\342\336\037\002KV\032&\n\010Key"
    "Value\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014B\027Z\005pro"
    "to\340\342\036\001\310\342\036\001\320\342\036\001\220\343\036\000", 858);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/internal.proto", &protobuf_RegisterTypes);
  RaftCommand::default_instance_ = new RaftCommand();
  InternalTimeSeriesData::default_instance_ = new InternalTimeSeriesData();
  InternalTimeSeriesSample::default_instance_ = new InternalTimeSeriesSample();
  RaftTruncatedState::default_instance_ = new RaftTruncatedState();
  RaftSnapshotData::default_instance_ = new RaftSnapshotData();
  RaftSnapshotData_KeyValue::default_instance_ = new RaftSnapshotData_KeyValue();
  RaftCommand::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesData::default_instance_->InitAsDefaultInstance();
  InternalTimeSeriesSample::default_instance_->InitAsDefaultInstance();
  RaftTruncatedState::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData::default_instance_->InitAsDefaultInstance();
  RaftSnapshotData_KeyValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2finternal_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2finternal_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int RaftCommand::kRangeIdFieldNumber;
const int RaftCommand::kOriginNodeIdFieldNumber;
const int RaftCommand::kCmdFieldNumber;
#endif  // !_MSC_VER

RaftCommand::RaftCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftCommand)
}

void RaftCommand::InitAsDefaultInstance() {
  cmd_ = const_cast< ::cockroach::proto::BatchRequest*>(&::cockroach::proto::BatchRequest::default_instance());
}

RaftCommand::RaftCommand(const RaftCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftCommand)
}

void RaftCommand::SharedCtor() {
  _cached_size_ = 0;
  range_id_ = GOOGLE_LONGLONG(0);
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftCommand::~RaftCommand() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftCommand)
  SharedDtor();
}

void RaftCommand::SharedDtor() {
  if (this != default_instance_) {
    delete cmd_;
  }
}

void RaftCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCommand_descriptor_;
}

const RaftCommand& RaftCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftCommand* RaftCommand::default_instance_ = NULL;

RaftCommand* RaftCommand::New(::google::protobuf::Arena* arena) const {
  RaftCommand* n = new RaftCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCommand::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftCommand*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(range_id_, origin_node_id_);
    if (has_cmd()) {
      if (cmd_ != NULL) cmd_->::cockroach::proto::BatchRequest::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 range_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_id_)));
          set_has_range_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_origin_node_id;
        break;
      }

      // optional uint64 origin_node_id = 2;
      case 2: {
        if (tag == 16) {
         parse_origin_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &origin_node_id_)));
          set_has_origin_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cmd;
        break;
      }

      // optional .cockroach.proto.BatchRequest cmd = 3;
      case 3: {
        if (tag == 26) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftCommand)
  return false;
#undef DO_
}

void RaftCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftCommand)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->range_id(), output);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->origin_node_id(), output);
  }

  // optional .cockroach.proto.BatchRequest cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cmd_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftCommand)
}

::google::protobuf::uint8* RaftCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftCommand)
  // optional int64 range_id = 1;
  if (has_range_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->range_id(), target);
  }

  // optional uint64 origin_node_id = 2;
  if (has_origin_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->origin_node_id(), target);
  }

  // optional .cockroach.proto.BatchRequest cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cmd_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftCommand)
  return target;
}

int RaftCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional int64 range_id = 1;
    if (has_range_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_id());
    }

    // optional uint64 origin_node_id = 2;
    if (has_origin_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->origin_node_id());
    }

    // optional .cockroach.proto.BatchRequest cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cmd_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCommand::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCommand>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftCommand::MergeFrom(const RaftCommand& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_id()) {
      set_range_id(from.range_id());
    }
    if (from.has_origin_node_id()) {
      set_origin_node_id(from.origin_node_id());
    }
    if (from.has_cmd()) {
      mutable_cmd()->::cockroach::proto::BatchRequest::MergeFrom(from.cmd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCommand::CopyFrom(const RaftCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommand::IsInitialized() const {

  return true;
}

void RaftCommand::Swap(RaftCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCommand::InternalSwap(RaftCommand* other) {
  std::swap(range_id_, other->range_id_);
  std::swap(origin_node_id_, other->origin_node_id_);
  std::swap(cmd_, other->cmd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCommand_descriptor_;
  metadata.reflection = RaftCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCommand

// optional int64 range_id = 1;
bool RaftCommand::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftCommand::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftCommand::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftCommand::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
 ::google::protobuf::int64 RaftCommand::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.range_id)
  return range_id_;
}
 void RaftCommand::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.range_id)
}

// optional uint64 origin_node_id = 2;
bool RaftCommand::has_origin_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftCommand::set_has_origin_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftCommand::clear_has_origin_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftCommand::clear_origin_node_id() {
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_node_id();
}
 ::google::protobuf::uint64 RaftCommand::origin_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.origin_node_id)
  return origin_node_id_;
}
 void RaftCommand::set_origin_node_id(::google::protobuf::uint64 value) {
  set_has_origin_node_id();
  origin_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.origin_node_id)
}

// optional .cockroach.proto.BatchRequest cmd = 3;
bool RaftCommand::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RaftCommand::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
void RaftCommand::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
void RaftCommand::clear_cmd() {
  if (cmd_ != NULL) cmd_->::cockroach::proto::BatchRequest::Clear();
  clear_has_cmd();
}
 const ::cockroach::proto::BatchRequest& RaftCommand::cmd() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.cmd)
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
 ::cockroach::proto::BatchRequest* RaftCommand::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::cockroach::proto::BatchRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommand.cmd)
  return cmd_;
}
 ::cockroach::proto::BatchRequest* RaftCommand::release_cmd() {
  clear_has_cmd();
  ::cockroach::proto::BatchRequest* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
 void RaftCommand::set_allocated_cmd(::cockroach::proto::BatchRequest* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommand.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesData::kStartTimestampNanosFieldNumber;
const int InternalTimeSeriesData::kSampleDurationNanosFieldNumber;
const int InternalTimeSeriesData::kSamplesFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesData::InternalTimeSeriesData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::InitAsDefaultInstance() {
}

InternalTimeSeriesData::InternalTimeSeriesData(const InternalTimeSeriesData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesData)
}

void InternalTimeSeriesData::SharedCtor() {
  _cached_size_ = 0;
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesData::~InternalTimeSeriesData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesData)
  SharedDtor();
}

void InternalTimeSeriesData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesData_descriptor_;
}

const InternalTimeSeriesData& InternalTimeSeriesData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesData* InternalTimeSeriesData::default_instance_ = NULL;

InternalTimeSeriesData* InternalTimeSeriesData::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesData* n = new InternalTimeSeriesData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_nanos_, sample_duration_nanos_);

#undef ZR_HELPER_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_timestamp_nanos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_timestamp_nanos_)));
          set_has_start_timestamp_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sample_duration_nanos;
        break;
      }

      // optional int64 sample_duration_nanos = 2;
      case 2: {
        if (tag == 16) {
         parse_sample_duration_nanos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sample_duration_nanos_)));
          set_has_sample_duration_nanos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_samples;
        break;
      }

      // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
      case 3: {
        if (tag == 26) {
         parse_samples:
          DO_(input->IncrementRecursionDepth());
         parse_loop_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_samples;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesData)
  return false;
#undef DO_
}

void InternalTimeSeriesData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_timestamp_nanos(), output);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sample_duration_nanos(), output);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->samples(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesData)
}

::google::protobuf::uint8* InternalTimeSeriesData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesData)
  // optional int64 start_timestamp_nanos = 1;
  if (has_start_timestamp_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_timestamp_nanos(), target);
  }

  // optional int64 sample_duration_nanos = 2;
  if (has_sample_duration_nanos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sample_duration_nanos(), target);
  }

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  for (unsigned int i = 0, n = this->samples_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->samples(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesData)
  return target;
}

int InternalTimeSeriesData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional int64 start_timestamp_nanos = 1;
    if (has_start_timestamp_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_timestamp_nanos());
    }

    // optional int64 sample_duration_nanos = 2;
    if (has_sample_duration_nanos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sample_duration_nanos());
    }

  }
  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesData::MergeFrom(const InternalTimeSeriesData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_timestamp_nanos()) {
      set_start_timestamp_nanos(from.start_timestamp_nanos());
    }
    if (from.has_sample_duration_nanos()) {
      set_sample_duration_nanos(from.sample_duration_nanos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesData::CopyFrom(const InternalTimeSeriesData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesData::IsInitialized() const {

  return true;
}

void InternalTimeSeriesData::Swap(InternalTimeSeriesData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesData::InternalSwap(InternalTimeSeriesData* other) {
  std::swap(start_timestamp_nanos_, other->start_timestamp_nanos_);
  std::swap(sample_duration_nanos_, other->sample_duration_nanos_);
  samples_.UnsafeArenaSwap(&other->samples_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesData_descriptor_;
  metadata.reflection = InternalTimeSeriesData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesData

// optional int64 start_timestamp_nanos = 1;
bool InternalTimeSeriesData::has_start_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesData::set_has_start_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesData::clear_has_start_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesData::clear_start_timestamp_nanos() {
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::start_timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
  return start_timestamp_nanos_;
}
 void InternalTimeSeriesData::set_start_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_start_timestamp_nanos();
  start_timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
}

// optional int64 sample_duration_nanos = 2;
bool InternalTimeSeriesData::has_sample_duration_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesData::set_has_sample_duration_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesData::clear_has_sample_duration_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesData::clear_sample_duration_nanos() {
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_sample_duration_nanos();
}
 ::google::protobuf::int64 InternalTimeSeriesData::sample_duration_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
  return sample_duration_nanos_;
}
 void InternalTimeSeriesData::set_sample_duration_nanos(::google::protobuf::int64 value) {
  set_has_sample_duration_nanos();
  sample_duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
}

// repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
int InternalTimeSeriesData::samples_size() const {
  return samples_.size();
}
void InternalTimeSeriesData::clear_samples() {
  samples_.Clear();
}
 const ::cockroach::proto::InternalTimeSeriesSample& InternalTimeSeriesData::samples(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Get(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Mutable(index);
}
 ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::add_samples() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >&
InternalTimeSeriesData::samples() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >*
InternalTimeSeriesData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalTimeSeriesData.samples)
  return &samples_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int InternalTimeSeriesSample::kOffsetFieldNumber;
const int InternalTimeSeriesSample::kCountFieldNumber;
const int InternalTimeSeriesSample::kSumFieldNumber;
const int InternalTimeSeriesSample::kMaxFieldNumber;
const int InternalTimeSeriesSample::kMinFieldNumber;
#endif  // !_MSC_VER

InternalTimeSeriesSample::InternalTimeSeriesSample()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::InitAsDefaultInstance() {
}

InternalTimeSeriesSample::InternalTimeSeriesSample(const InternalTimeSeriesSample& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.InternalTimeSeriesSample)
}

void InternalTimeSeriesSample::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0u;
  sum_ = 0;
  max_ = 0;
  min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InternalTimeSeriesSample::~InternalTimeSeriesSample() {
  // @@protoc_insertion_point(destructor:cockroach.proto.InternalTimeSeriesSample)
  SharedDtor();
}

void InternalTimeSeriesSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InternalTimeSeriesSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InternalTimeSeriesSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InternalTimeSeriesSample_descriptor_;
}

const InternalTimeSeriesSample& InternalTimeSeriesSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

InternalTimeSeriesSample* InternalTimeSeriesSample::default_instance_ = NULL;

InternalTimeSeriesSample* InternalTimeSeriesSample::New(::google::protobuf::Arena* arena) const {
  InternalTimeSeriesSample* n = new InternalTimeSeriesSample;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InternalTimeSeriesSample::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InternalTimeSeriesSample*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(offset_, min_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InternalTimeSeriesSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.InternalTimeSeriesSample)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_sum;
        break;
      }

      // optional double sum = 7;
      case 7: {
        if (tag == 57) {
         parse_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_max;
        break;
      }

      // optional double max = 8;
      case 8: {
        if (tag == 65) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_min;
        break;
      }

      // optional double min = 9;
      case 9: {
        if (tag == 73) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.InternalTimeSeriesSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.InternalTimeSeriesSample)
  return false;
#undef DO_
}

void InternalTimeSeriesSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // optional double sum = 7;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sum(), output);
  }

  // optional double max = 8;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max(), output);
  }

  // optional double min = 9;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.InternalTimeSeriesSample)
}

::google::protobuf::uint8* InternalTimeSeriesSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.InternalTimeSeriesSample)
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // optional double sum = 7;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sum(), target);
  }

  // optional double max = 8;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max(), target);
  }

  // optional double min = 9;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.InternalTimeSeriesSample)
  return target;
}

int InternalTimeSeriesSample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional double sum = 7;
    if (has_sum()) {
      total_size += 1 + 8;
    }

    // optional double max = 8;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double min = 9;
    if (has_min()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InternalTimeSeriesSample::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const InternalTimeSeriesSample* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InternalTimeSeriesSample>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InternalTimeSeriesSample::MergeFrom(const InternalTimeSeriesSample& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_sum()) {
      set_sum(from.sum());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InternalTimeSeriesSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTimeSeriesSample::CopyFrom(const InternalTimeSeriesSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTimeSeriesSample::IsInitialized() const {

  return true;
}

void InternalTimeSeriesSample::Swap(InternalTimeSeriesSample* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalTimeSeriesSample::InternalSwap(InternalTimeSeriesSample* other) {
  std::swap(offset_, other->offset_);
  std::swap(count_, other->count_);
  std::swap(sum_, other->sum_);
  std::swap(max_, other->max_);
  std::swap(min_, other->min_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InternalTimeSeriesSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InternalTimeSeriesSample_descriptor_;
  metadata.reflection = InternalTimeSeriesSample_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InternalTimeSeriesSample

// optional int32 offset = 1;
bool InternalTimeSeriesSample::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InternalTimeSeriesSample::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void InternalTimeSeriesSample::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void InternalTimeSeriesSample::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
 ::google::protobuf::int32 InternalTimeSeriesSample::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.offset)
  return offset_;
}
 void InternalTimeSeriesSample::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.offset)
}

// optional uint32 count = 6;
bool InternalTimeSeriesSample::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InternalTimeSeriesSample::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void InternalTimeSeriesSample::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void InternalTimeSeriesSample::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 InternalTimeSeriesSample::count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.count)
  return count_;
}
 void InternalTimeSeriesSample::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.count)
}

// optional double sum = 7;
bool InternalTimeSeriesSample::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InternalTimeSeriesSample::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
void InternalTimeSeriesSample::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
void InternalTimeSeriesSample::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
 double InternalTimeSeriesSample::sum() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.sum)
  return sum_;
}
 void InternalTimeSeriesSample::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.sum)
}

// optional double max = 8;
bool InternalTimeSeriesSample::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InternalTimeSeriesSample::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
void InternalTimeSeriesSample::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void InternalTimeSeriesSample::clear_max() {
  max_ = 0;
  clear_has_max();
}
 double InternalTimeSeriesSample::max() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.max)
  return max_;
}
 void InternalTimeSeriesSample::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.max)
}

// optional double min = 9;
bool InternalTimeSeriesSample::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InternalTimeSeriesSample::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
void InternalTimeSeriesSample::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void InternalTimeSeriesSample::clear_min() {
  min_ = 0;
  clear_has_min();
}
 double InternalTimeSeriesSample::min() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.min)
  return min_;
}
 void InternalTimeSeriesSample::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.min)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !_MSC_VER

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  _cached_size_ = 0;
  index_ = GOOGLE_ULONGLONG(0);
  term_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftTruncatedState* RaftTruncatedState::default_instance_ = NULL;

RaftTruncatedState* RaftTruncatedState::New(::google::protobuf::Arena* arena) const {
  RaftTruncatedState* n = new RaftTruncatedState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftTruncatedState::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftTruncatedState*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, term_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftTruncatedState)
  // optional uint64 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftTruncatedState)
  return target;
}

int RaftTruncatedState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional uint64 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 term = 2;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->term());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftTruncatedState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftTruncatedState>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftTruncatedState::InternalSwap(RaftTruncatedState* other) {
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftTruncatedState

// optional uint64 index = 1;
bool RaftTruncatedState::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftTruncatedState::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftTruncatedState::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
 ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.index)
  return index_;
}
 void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.index)
}

// optional uint64 term = 2;
bool RaftTruncatedState::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftTruncatedState::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftTruncatedState::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
 ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.term)
  return term_;
}
 void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.term)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RaftSnapshotData_KeyValue::kKeyFieldNumber;
const int RaftSnapshotData_KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::InitAsDefaultInstance() {
}

RaftSnapshotData_KeyValue::RaftSnapshotData_KeyValue(const RaftSnapshotData_KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData.KeyValue)
}

void RaftSnapshotData_KeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData_KeyValue::~RaftSnapshotData_KeyValue() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData.KeyValue)
  SharedDtor();
}

void RaftSnapshotData_KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RaftSnapshotData_KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData_KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_KeyValue_descriptor_;
}

const RaftSnapshotData_KeyValue& RaftSnapshotData_KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::default_instance_ = NULL;

RaftSnapshotData_KeyValue* RaftSnapshotData_KeyValue::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData_KeyValue* n = new RaftSnapshotData_KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData_KeyValue::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData_KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData.KeyValue)
  return false;
#undef DO_
}

void RaftSnapshotData_KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData.KeyValue)
}

::google::protobuf::uint8* RaftSnapshotData_KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData.KeyValue)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData.KeyValue)
  return target;
}

int RaftSnapshotData_KeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData_KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData_KeyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData_KeyValue>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData_KeyValue::MergeFrom(const RaftSnapshotData_KeyValue& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData_KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData_KeyValue::CopyFrom(const RaftSnapshotData_KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData_KeyValue::IsInitialized() const {

  return true;
}

void RaftSnapshotData_KeyValue::Swap(RaftSnapshotData_KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData_KeyValue::InternalSwap(RaftSnapshotData_KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData_KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_KeyValue_descriptor_;
  metadata.reflection = RaftSnapshotData_KeyValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RaftSnapshotData::kRangeDescriptorFieldNumber;
const int RaftSnapshotData::kKVFieldNumber;
#endif  // !_MSC_VER

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
  range_descriptor_ = const_cast< ::cockroach::proto::RangeDescriptor*>(&::cockroach::proto::RangeDescriptor::default_instance());
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  _cached_size_ = 0;
  range_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != default_instance_) {
    delete range_descriptor_;
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  return *default_instance_;
}

RaftSnapshotData* RaftSnapshotData::default_instance_ = NULL;

RaftSnapshotData* RaftSnapshotData::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData* n = new RaftSnapshotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData::Clear() {
  if (has_range_descriptor()) {
    if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  }
  kv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_KV;
        break;
      }

      // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
      case 2: {
        if (tag == 18) {
         parse_KV:
          DO_(input->IncrementRecursionDepth());
         parse_loop_KV:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_KV;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->range_descriptor_, output);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kv(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RaftSnapshotData)
  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->range_descriptor_, target);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  for (unsigned int i = 0, n = this->kv_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kv(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RaftSnapshotData)
  return target;
}

int RaftSnapshotData::ByteSize() const {
  int total_size = 0;

  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  if (has_range_descriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_descriptor_);
  }

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  total_size += 1 * this->kv_size();
  for (int i = 0; i < this->kv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  kv_.MergeFrom(from.kv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range_descriptor()) {
      mutable_range_descriptor()->::cockroach::proto::RangeDescriptor::MergeFrom(from.range_descriptor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData::InternalSwap(RaftSnapshotData* other) {
  std::swap(range_descriptor_, other->range_descriptor_);
  kv_.UnsafeArenaSwap(&other->kv_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftSnapshotData_KeyValue

// optional bytes key = 1;
bool RaftSnapshotData_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& RaftSnapshotData_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 void RaftSnapshotData_KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.key)
}

// optional bytes value = 2;
bool RaftSnapshotData_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RaftSnapshotData_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void RaftSnapshotData_KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& RaftSnapshotData_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 void RaftSnapshotData_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
 ::std::string* RaftSnapshotData_KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RaftSnapshotData_KeyValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RaftSnapshotData_KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.value)
}

// -------------------------------------------------------------------

// RaftSnapshotData

// optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
bool RaftSnapshotData::has_range_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RaftSnapshotData::set_has_range_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
void RaftSnapshotData::clear_has_range_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
void RaftSnapshotData::clear_range_descriptor() {
  if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_range_descriptor();
}
 const ::cockroach::proto::RangeDescriptor& RaftSnapshotData::range_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_ != NULL ? *range_descriptor_ : *default_instance_->range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::mutable_range_descriptor() {
  set_has_range_descriptor();
  if (range_descriptor_ == NULL) {
    range_descriptor_ = new ::cockroach::proto::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_;
}
 ::cockroach::proto::RangeDescriptor* RaftSnapshotData::release_range_descriptor() {
  clear_has_range_descriptor();
  ::cockroach::proto::RangeDescriptor* temp = range_descriptor_;
  range_descriptor_ = NULL;
  return temp;
}
 void RaftSnapshotData::set_allocated_range_descriptor(::cockroach::proto::RangeDescriptor* range_descriptor) {
  delete range_descriptor_;
  range_descriptor_ = range_descriptor;
  if (range_descriptor) {
    set_has_range_descriptor();
  } else {
    clear_has_range_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.range_descriptor)
}

// repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
int RaftSnapshotData::kv_size() const {
  return kv_.size();
}
void RaftSnapshotData::clear_kv() {
  kv_.Clear();
}
 const ::cockroach::proto::RaftSnapshotData_KeyValue& RaftSnapshotData::kv(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Get(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Mutable(index);
}
 ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::add_kv() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >&
RaftSnapshotData::kv() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RaftSnapshotData.KV)
  return kv_;
}
 ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >*
RaftSnapshotData::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RaftSnapshotData.KV)
  return &kv_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
