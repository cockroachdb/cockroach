// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/internal.proto

#ifndef PROTOBUF_cockroach_2fproto_2finternal_2eproto__INCLUDED
#define PROTOBUF_cockroach_2fproto_2finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "cockroach/proto/api.pb.h"
#include "cockroach/proto/metadata.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

class RaftCommand;
class InternalTimeSeriesData;
class InternalTimeSeriesSample;
class RaftTruncatedState;
class RaftSnapshotData;
class RaftSnapshotData_KeyValue;

// ===================================================================

class RaftCommand : public ::google::protobuf::Message {
 public:
  RaftCommand();
  virtual ~RaftCommand();

  RaftCommand(const RaftCommand& from);

  inline RaftCommand& operator=(const RaftCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftCommand& default_instance();

  void Swap(RaftCommand* other);

  // implements Message ----------------------------------------------

  inline RaftCommand* New() const { return New(NULL); }

  RaftCommand* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftCommand& from);
  void MergeFrom(const RaftCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 range_id = 1;
  bool has_range_id() const;
  void clear_range_id();
  static const int kRangeIdFieldNumber = 1;
  ::google::protobuf::int64 range_id() const;
  void set_range_id(::google::protobuf::int64 value);

  // optional uint64 origin_node_id = 2;
  bool has_origin_node_id() const;
  void clear_origin_node_id();
  static const int kOriginNodeIdFieldNumber = 2;
  ::google::protobuf::uint64 origin_node_id() const;
  void set_origin_node_id(::google::protobuf::uint64 value);

  // optional .cockroach.proto.BatchRequest cmd = 3;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 3;
  const ::cockroach::proto::BatchRequest& cmd() const;
  ::cockroach::proto::BatchRequest* mutable_cmd();
  ::cockroach::proto::BatchRequest* release_cmd();
  void set_allocated_cmd(::cockroach::proto::BatchRequest* cmd);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RaftCommand)
 private:
  inline void set_has_range_id();
  inline void clear_has_range_id();
  inline void set_has_origin_node_id();
  inline void clear_has_origin_node_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 range_id_;
  ::google::protobuf::uint64 origin_node_id_;
  ::cockroach::proto::BatchRequest* cmd_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static RaftCommand* default_instance_;
};
// -------------------------------------------------------------------

class InternalTimeSeriesData : public ::google::protobuf::Message {
 public:
  InternalTimeSeriesData();
  virtual ~InternalTimeSeriesData();

  InternalTimeSeriesData(const InternalTimeSeriesData& from);

  inline InternalTimeSeriesData& operator=(const InternalTimeSeriesData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalTimeSeriesData& default_instance();

  void Swap(InternalTimeSeriesData* other);

  // implements Message ----------------------------------------------

  inline InternalTimeSeriesData* New() const { return New(NULL); }

  InternalTimeSeriesData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InternalTimeSeriesData& from);
  void MergeFrom(const InternalTimeSeriesData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalTimeSeriesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 start_timestamp_nanos = 1;
  bool has_start_timestamp_nanos() const;
  void clear_start_timestamp_nanos();
  static const int kStartTimestampNanosFieldNumber = 1;
  ::google::protobuf::int64 start_timestamp_nanos() const;
  void set_start_timestamp_nanos(::google::protobuf::int64 value);

  // optional int64 sample_duration_nanos = 2;
  bool has_sample_duration_nanos() const;
  void clear_sample_duration_nanos();
  static const int kSampleDurationNanosFieldNumber = 2;
  ::google::protobuf::int64 sample_duration_nanos() const;
  void set_sample_duration_nanos(::google::protobuf::int64 value);

  // repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
  int samples_size() const;
  void clear_samples();
  static const int kSamplesFieldNumber = 3;
  const ::cockroach::proto::InternalTimeSeriesSample& samples(int index) const;
  ::cockroach::proto::InternalTimeSeriesSample* mutable_samples(int index);
  ::cockroach::proto::InternalTimeSeriesSample* add_samples();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >&
      samples() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >*
      mutable_samples();

  // @@protoc_insertion_point(class_scope:cockroach.proto.InternalTimeSeriesData)
 private:
  inline void set_has_start_timestamp_nanos();
  inline void clear_has_start_timestamp_nanos();
  inline void set_has_sample_duration_nanos();
  inline void clear_has_sample_duration_nanos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 start_timestamp_nanos_;
  ::google::protobuf::int64 sample_duration_nanos_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample > samples_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static InternalTimeSeriesData* default_instance_;
};
// -------------------------------------------------------------------

class InternalTimeSeriesSample : public ::google::protobuf::Message {
 public:
  InternalTimeSeriesSample();
  virtual ~InternalTimeSeriesSample();

  InternalTimeSeriesSample(const InternalTimeSeriesSample& from);

  inline InternalTimeSeriesSample& operator=(const InternalTimeSeriesSample& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InternalTimeSeriesSample& default_instance();

  void Swap(InternalTimeSeriesSample* other);

  // implements Message ----------------------------------------------

  inline InternalTimeSeriesSample* New() const { return New(NULL); }

  InternalTimeSeriesSample* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InternalTimeSeriesSample& from);
  void MergeFrom(const InternalTimeSeriesSample& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalTimeSeriesSample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 offset = 1;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // optional uint32 count = 6;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional double sum = 7;
  bool has_sum() const;
  void clear_sum();
  static const int kSumFieldNumber = 7;
  double sum() const;
  void set_sum(double value);

  // optional double max = 8;
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 8;
  double max() const;
  void set_max(double value);

  // optional double min = 9;
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 9;
  double min() const;
  void set_min(double value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.InternalTimeSeriesSample)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_sum();
  inline void clear_has_sum();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_min();
  inline void clear_has_min();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::uint32 count_;
  double sum_;
  double max_;
  double min_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static InternalTimeSeriesSample* default_instance_;
};
// -------------------------------------------------------------------

class RaftTruncatedState : public ::google::protobuf::Message {
 public:
  RaftTruncatedState();
  virtual ~RaftTruncatedState();

  RaftTruncatedState(const RaftTruncatedState& from);

  inline RaftTruncatedState& operator=(const RaftTruncatedState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftTruncatedState& default_instance();

  void Swap(RaftTruncatedState* other);

  // implements Message ----------------------------------------------

  inline RaftTruncatedState* New() const { return New(NULL); }

  RaftTruncatedState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftTruncatedState& from);
  void MergeFrom(const RaftTruncatedState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftTruncatedState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // optional uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RaftTruncatedState)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_term();
  inline void clear_has_term();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static RaftTruncatedState* default_instance_;
};
// -------------------------------------------------------------------

class RaftSnapshotData_KeyValue : public ::google::protobuf::Message {
 public:
  RaftSnapshotData_KeyValue();
  virtual ~RaftSnapshotData_KeyValue();

  RaftSnapshotData_KeyValue(const RaftSnapshotData_KeyValue& from);

  inline RaftSnapshotData_KeyValue& operator=(const RaftSnapshotData_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftSnapshotData_KeyValue& default_instance();

  void Swap(RaftSnapshotData_KeyValue* other);

  // implements Message ----------------------------------------------

  inline RaftSnapshotData_KeyValue* New() const { return New(NULL); }

  RaftSnapshotData_KeyValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftSnapshotData_KeyValue& from);
  void MergeFrom(const RaftSnapshotData_KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftSnapshotData_KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cockroach.proto.RaftSnapshotData.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static RaftSnapshotData_KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class RaftSnapshotData : public ::google::protobuf::Message {
 public:
  RaftSnapshotData();
  virtual ~RaftSnapshotData();

  RaftSnapshotData(const RaftSnapshotData& from);

  inline RaftSnapshotData& operator=(const RaftSnapshotData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftSnapshotData& default_instance();

  void Swap(RaftSnapshotData* other);

  // implements Message ----------------------------------------------

  inline RaftSnapshotData* New() const { return New(NULL); }

  RaftSnapshotData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftSnapshotData& from);
  void MergeFrom(const RaftSnapshotData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftSnapshotData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RaftSnapshotData_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  // optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
  bool has_range_descriptor() const;
  void clear_range_descriptor();
  static const int kRangeDescriptorFieldNumber = 1;
  const ::cockroach::proto::RangeDescriptor& range_descriptor() const;
  ::cockroach::proto::RangeDescriptor* mutable_range_descriptor();
  ::cockroach::proto::RangeDescriptor* release_range_descriptor();
  void set_allocated_range_descriptor(::cockroach::proto::RangeDescriptor* range_descriptor);

  // repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKVFieldNumber = 2;
  const ::cockroach::proto::RaftSnapshotData_KeyValue& kv(int index) const;
  ::cockroach::proto::RaftSnapshotData_KeyValue* mutable_kv(int index);
  ::cockroach::proto::RaftSnapshotData_KeyValue* add_kv();
  const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >&
      kv() const;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >*
      mutable_kv();

  // @@protoc_insertion_point(class_scope:cockroach.proto.RaftSnapshotData)
 private:
  inline void set_has_range_descriptor();
  inline void clear_has_range_descriptor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::cockroach::proto::RangeDescriptor* range_descriptor_;
  ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue > kv_;
  friend void  protobuf_AddDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_AssignDesc_cockroach_2fproto_2finternal_2eproto();
  friend void protobuf_ShutdownFile_cockroach_2fproto_2finternal_2eproto();

  void InitAsDefaultInstance();
  static RaftSnapshotData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCommand

// optional int64 range_id = 1;
inline bool RaftCommand::has_range_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftCommand::set_has_range_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftCommand::clear_has_range_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftCommand::clear_range_id() {
  range_id_ = GOOGLE_LONGLONG(0);
  clear_has_range_id();
}
inline ::google::protobuf::int64 RaftCommand::range_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.range_id)
  return range_id_;
}
inline void RaftCommand::set_range_id(::google::protobuf::int64 value) {
  set_has_range_id();
  range_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.range_id)
}

// optional uint64 origin_node_id = 2;
inline bool RaftCommand::has_origin_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftCommand::set_has_origin_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftCommand::clear_has_origin_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftCommand::clear_origin_node_id() {
  origin_node_id_ = GOOGLE_ULONGLONG(0);
  clear_has_origin_node_id();
}
inline ::google::protobuf::uint64 RaftCommand::origin_node_id() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.origin_node_id)
  return origin_node_id_;
}
inline void RaftCommand::set_origin_node_id(::google::protobuf::uint64 value) {
  set_has_origin_node_id();
  origin_node_id_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftCommand.origin_node_id)
}

// optional .cockroach.proto.BatchRequest cmd = 3;
inline bool RaftCommand::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RaftCommand::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RaftCommand::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RaftCommand::clear_cmd() {
  if (cmd_ != NULL) cmd_->::cockroach::proto::BatchRequest::Clear();
  clear_has_cmd();
}
inline const ::cockroach::proto::BatchRequest& RaftCommand::cmd() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftCommand.cmd)
  return cmd_ != NULL ? *cmd_ : *default_instance_->cmd_;
}
inline ::cockroach::proto::BatchRequest* RaftCommand::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == NULL) {
    cmd_ = new ::cockroach::proto::BatchRequest;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftCommand.cmd)
  return cmd_;
}
inline ::cockroach::proto::BatchRequest* RaftCommand::release_cmd() {
  clear_has_cmd();
  ::cockroach::proto::BatchRequest* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
inline void RaftCommand::set_allocated_cmd(::cockroach::proto::BatchRequest* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftCommand.cmd)
}

// -------------------------------------------------------------------

// InternalTimeSeriesData

// optional int64 start_timestamp_nanos = 1;
inline bool InternalTimeSeriesData::has_start_timestamp_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalTimeSeriesData::set_has_start_timestamp_nanos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalTimeSeriesData::clear_has_start_timestamp_nanos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalTimeSeriesData::clear_start_timestamp_nanos() {
  start_timestamp_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_start_timestamp_nanos();
}
inline ::google::protobuf::int64 InternalTimeSeriesData::start_timestamp_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
  return start_timestamp_nanos_;
}
inline void InternalTimeSeriesData::set_start_timestamp_nanos(::google::protobuf::int64 value) {
  set_has_start_timestamp_nanos();
  start_timestamp_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.start_timestamp_nanos)
}

// optional int64 sample_duration_nanos = 2;
inline bool InternalTimeSeriesData::has_sample_duration_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalTimeSeriesData::set_has_sample_duration_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalTimeSeriesData::clear_has_sample_duration_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalTimeSeriesData::clear_sample_duration_nanos() {
  sample_duration_nanos_ = GOOGLE_LONGLONG(0);
  clear_has_sample_duration_nanos();
}
inline ::google::protobuf::int64 InternalTimeSeriesData::sample_duration_nanos() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
  return sample_duration_nanos_;
}
inline void InternalTimeSeriesData::set_sample_duration_nanos(::google::protobuf::int64 value) {
  set_has_sample_duration_nanos();
  sample_duration_nanos_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesData.sample_duration_nanos)
}

// repeated .cockroach.proto.InternalTimeSeriesSample samples = 3;
inline int InternalTimeSeriesData::samples_size() const {
  return samples_.size();
}
inline void InternalTimeSeriesData::clear_samples() {
  samples_.Clear();
}
inline const ::cockroach::proto::InternalTimeSeriesSample& InternalTimeSeriesData::samples(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Get(index);
}
inline ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Mutable(index);
}
inline ::cockroach::proto::InternalTimeSeriesSample* InternalTimeSeriesData::add_samples() {
  // @@protoc_insertion_point(field_add:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >&
InternalTimeSeriesData::samples() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.InternalTimeSeriesData.samples)
  return samples_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::InternalTimeSeriesSample >*
InternalTimeSeriesData::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.InternalTimeSeriesData.samples)
  return &samples_;
}

// -------------------------------------------------------------------

// InternalTimeSeriesSample

// optional int32 offset = 1;
inline bool InternalTimeSeriesSample::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalTimeSeriesSample::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InternalTimeSeriesSample::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InternalTimeSeriesSample::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 InternalTimeSeriesSample::offset() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.offset)
  return offset_;
}
inline void InternalTimeSeriesSample::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.offset)
}

// optional uint32 count = 6;
inline bool InternalTimeSeriesSample::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalTimeSeriesSample::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InternalTimeSeriesSample::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InternalTimeSeriesSample::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 InternalTimeSeriesSample::count() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.count)
  return count_;
}
inline void InternalTimeSeriesSample::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.count)
}

// optional double sum = 7;
inline bool InternalTimeSeriesSample::has_sum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InternalTimeSeriesSample::set_has_sum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InternalTimeSeriesSample::clear_has_sum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InternalTimeSeriesSample::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline double InternalTimeSeriesSample::sum() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.sum)
  return sum_;
}
inline void InternalTimeSeriesSample::set_sum(double value) {
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.sum)
}

// optional double max = 8;
inline bool InternalTimeSeriesSample::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InternalTimeSeriesSample::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InternalTimeSeriesSample::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InternalTimeSeriesSample::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double InternalTimeSeriesSample::max() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.max)
  return max_;
}
inline void InternalTimeSeriesSample::set_max(double value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.max)
}

// optional double min = 9;
inline bool InternalTimeSeriesSample::has_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InternalTimeSeriesSample::set_has_min() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InternalTimeSeriesSample::clear_has_min() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InternalTimeSeriesSample::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double InternalTimeSeriesSample::min() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.InternalTimeSeriesSample.min)
  return min_;
}
inline void InternalTimeSeriesSample::set_min(double value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.InternalTimeSeriesSample.min)
}

// -------------------------------------------------------------------

// RaftTruncatedState

// optional uint64 index = 1;
inline bool RaftTruncatedState::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftTruncatedState::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftTruncatedState::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.index)
  return index_;
}
inline void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.index)
}

// optional uint64 term = 2;
inline bool RaftTruncatedState::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftTruncatedState::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftTruncatedState::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftTruncatedState.term)
  return term_;
}
inline void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftTruncatedState.term)
}

// -------------------------------------------------------------------

// RaftSnapshotData_KeyValue

// optional bytes key = 1;
inline bool RaftSnapshotData_KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftSnapshotData_KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftSnapshotData_KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftSnapshotData_KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& RaftSnapshotData_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftSnapshotData_KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
inline void RaftSnapshotData_KeyValue::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
inline void RaftSnapshotData_KeyValue::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.key)
}
inline ::std::string* RaftSnapshotData_KeyValue::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftSnapshotData_KeyValue::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftSnapshotData_KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.key)
}

// optional bytes value = 2;
inline bool RaftSnapshotData_KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RaftSnapshotData_KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RaftSnapshotData_KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RaftSnapshotData_KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& RaftSnapshotData_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftSnapshotData_KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
inline void RaftSnapshotData_KeyValue::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
inline void RaftSnapshotData_KeyValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cockroach.proto.RaftSnapshotData.KeyValue.value)
}
inline ::std::string* RaftSnapshotData_KeyValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftSnapshotData_KeyValue::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftSnapshotData_KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.KeyValue.value)
}

// -------------------------------------------------------------------

// RaftSnapshotData

// optional .cockroach.proto.RangeDescriptor range_descriptor = 1;
inline bool RaftSnapshotData::has_range_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RaftSnapshotData::set_has_range_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RaftSnapshotData::clear_has_range_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RaftSnapshotData::clear_range_descriptor() {
  if (range_descriptor_ != NULL) range_descriptor_->::cockroach::proto::RangeDescriptor::Clear();
  clear_has_range_descriptor();
}
inline const ::cockroach::proto::RangeDescriptor& RaftSnapshotData::range_descriptor() const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_ != NULL ? *range_descriptor_ : *default_instance_->range_descriptor_;
}
inline ::cockroach::proto::RangeDescriptor* RaftSnapshotData::mutable_range_descriptor() {
  set_has_range_descriptor();
  if (range_descriptor_ == NULL) {
    range_descriptor_ = new ::cockroach::proto::RangeDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.range_descriptor)
  return range_descriptor_;
}
inline ::cockroach::proto::RangeDescriptor* RaftSnapshotData::release_range_descriptor() {
  clear_has_range_descriptor();
  ::cockroach::proto::RangeDescriptor* temp = range_descriptor_;
  range_descriptor_ = NULL;
  return temp;
}
inline void RaftSnapshotData::set_allocated_range_descriptor(::cockroach::proto::RangeDescriptor* range_descriptor) {
  delete range_descriptor_;
  range_descriptor_ = range_descriptor;
  if (range_descriptor) {
    set_has_range_descriptor();
  } else {
    clear_has_range_descriptor();
  }
  // @@protoc_insertion_point(field_set_allocated:cockroach.proto.RaftSnapshotData.range_descriptor)
}

// repeated .cockroach.proto.RaftSnapshotData.KeyValue KV = 2;
inline int RaftSnapshotData::kv_size() const {
  return kv_.size();
}
inline void RaftSnapshotData::clear_kv() {
  kv_.Clear();
}
inline const ::cockroach::proto::RaftSnapshotData_KeyValue& RaftSnapshotData::kv(int index) const {
  // @@protoc_insertion_point(field_get:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Get(index);
}
inline ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::mutable_kv(int index) {
  // @@protoc_insertion_point(field_mutable:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Mutable(index);
}
inline ::cockroach::proto::RaftSnapshotData_KeyValue* RaftSnapshotData::add_kv() {
  // @@protoc_insertion_point(field_add:cockroach.proto.RaftSnapshotData.KV)
  return kv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >&
RaftSnapshotData::kv() const {
  // @@protoc_insertion_point(field_list:cockroach.proto.RaftSnapshotData.KV)
  return kv_;
}
inline ::google::protobuf::RepeatedPtrField< ::cockroach::proto::RaftSnapshotData_KeyValue >*
RaftSnapshotData::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:cockroach.proto.RaftSnapshotData.KV)
  return &kv_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cockroach_2fproto_2finternal_2eproto__INCLUDED
