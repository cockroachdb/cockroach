// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Tobias Schottdorf (tobias.schottdorf@gmail.com)

syntax = "proto3";
package cockroach.storage.storagebase;
option go_package = "storagebase";

import "cockroach/storage/engine/enginepb/mvcc.proto";
import "cockroach/roachpb/internal_raft.proto";
import "cockroach/roachpb/metadata.proto";
import "cockroach/roachpb/data.proto";
import "cockroach/util/hlc/timestamp.proto";

import weak "gogoproto/gogo.proto";

// RangeState is the part of the Range Raft state machine which is cached in
// memory and which is manipulated exclusively through consensus.
message RangeState {
  // The highest (and last) index applied to the state machine.
  uint64 raftAppliedIndex = 4;
  // The highest (and last) lease index applied to the state machine.
  uint64 leaseAppliedIndex = 5;
  // The Range descriptor.
  // The pointer may change, but the referenced RangeDescriptor struct itself
  // must be treated as immutable; it is leaked out of the lock.
  //
  // Changes of the descriptor should normally go through one of the
  // (*Replica).setDesc* methods.
  roachpb.RangeDescriptor desc = 6;
  // The latest lease holder, if any.
  roachpb.Lease lease = 7;
  // The truncation state of the Raft log.
  roachpb.RaftTruncatedState truncatedState = 8;
  // gcThreshold is the GC threshold of the Range, typically updated when keys
  // are garbage collected. Reads and writes at timestamps <= this time will
  // not be served.
  util.hlc.Timestamp gcThreshold = 9 [(gogoproto.nullable) = false,
                                      (gogoproto.customname) = "GCThreshold"];
  storage.engine.enginepb.MVCCStats stats = 10 [(gogoproto.nullable) = false];
  bool frozen = 11;
}

message RangeInfo {
  RangeState state = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // The highest (and last) index in the Raft log.
  uint64 lastIndex = 2;
}
