// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Tristan Rice (wiz@cockroachlabs.com)

syntax = "proto3";
package cockroach.server.serverpb;
option go_package = "serverpb";

import "cockroach/build/info.proto";
import "cockroach/gossip/gossip.proto";
import "cockroach/roachpb/metadata.proto";
import "cockroach/server/status/status.proto";
import "cockroach/util/unresolved_addr.proto";

import weak "gogoproto/gogo.proto";
import weak "google/api/annotations.proto";

// DetailsRequest requests a nodes details.
message DetailsRequest {
  string node_id = 1;
}

message DetailsResponse {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  util.UnresolvedAddr address = 2 [(gogoproto.nullable) = false];
  build.Info build_info = 3 [(gogoproto.nullable) = false];
}

message NodesRequest {
}

message NodesResponse {
  repeated status.NodeStatus nodes = 1 [(gogoproto.nullable) = false];
}

message NodeRequest {
  string node_id = 1;
}

message RangeInfo {
  PrettyRangeDescriptor desc = 1 [(gogoproto.nullable) = false];
  string raft_state = 2;
  // pending_cmds is the number of pendingCmds on the range.
  int32 pending_cmds = 3;
}

message RangesRequest {
  string node_id = 1;
}

message RangesResponse {
  repeated RangeInfo ranges = 1 [(gogoproto.nullable) = false];
}

message GossipRequest {
  string node_id = 1;
}

message JSONResponse {
  bytes data = 1;
}

message LogsRequest {
  string node_id = 1;
  string level = 2;
  string start_time = 3;
  string end_time = 4;
  string max = 5;
  string pattern = 6;
}

message LogFilesListRequest {
  string node_id = 1;
}

message LogFileRequest {
  string node_id = 1;
  string file = 2;
}

message StacksRequest {
  string node_id = 1;
}

message MetricsRequest {
  string node_id = 1;
}

message RaftRangeNode {
  int32 node_id = 1 [(gogoproto.customname) = "NodeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.NodeID"];
  RangeInfo range = 2 [(gogoproto.nullable) = false];
}

message RaftRangeError {
  string message = 1;
}

message RaftRangeStatus {
  int64 range_id = 1 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];
  repeated RaftRangeError errors = 2 [(gogoproto.nullable) = false];
  repeated RaftRangeNode nodes = 3 [(gogoproto.nullable) = false];
}

message RaftDebugRequest {
}

message RaftDebugResponse {
  map<int64, RaftRangeStatus> ranges = 1 [(gogoproto.nullable) = false,
    (gogoproto.castkey) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];
}

service Status {
  rpc Details(DetailsRequest) returns (DetailsResponse) {
    option (google.api.http) = {
      get: "/_status/details/{node_id}"
      additional_bindings {
        get: "/health"
      }
    };
  }
  rpc Nodes(NodesRequest) returns (NodesResponse) {
    option (google.api.http) = {
      get: "/_status/nodes"
    };
  }
  rpc Node(NodeRequest) returns (status.NodeStatus) {
    option (google.api.http) = {
      get: "/_status/nodes/{node_id}"
    };
  }
  rpc RaftDebug(RaftDebugRequest) returns (RaftDebugResponse) {
    option (google.api.http) = {
      get: "/_status/raft"
    };
  }
  rpc Ranges(RangesRequest) returns (RangesResponse) {
    option (google.api.http) = {
      get: "/_status/ranges/{node_id}"
    };
  }
  rpc Gossip(GossipRequest) returns (gossip.InfoStatus) {
    option (google.api.http) = {
      get: "/_status/gossip/{node_id}"
    };
  }
  rpc Stacks(StacksRequest) returns (JSONResponse) {}
  rpc Metrics(MetricsRequest) returns (JSONResponse) {}
  rpc Logs(LogsRequest) returns (JSONResponse) {}
  rpc LogFilesList(LogFilesListRequest) returns (JSONResponse) {}
  rpc LogFile(LogFileRequest) returns (JSONResponse) {}
}


// PrettyRangeDescriptor is identical to roachpb.RangeDescriptor except the
// start and end keys are encoded as strings instead of bytes. This needs to be
// kept in sync with roachpb.RangeDescriptor.
message PrettyRangeDescriptor {
  int64 range_id = 1 [(gogoproto.customname) = "RangeID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.RangeID"];
  string start_key = 2;
  string end_key = 3;
  repeated roachpb.ReplicaDescriptor replicas = 4 [(gogoproto.nullable) = false];
  int32 next_replica_id = 5 [(gogoproto.customname) = "NextReplicaID",
    (gogoproto.casttype) = "github.com/cockroachdb/cockroach/roachpb.ReplicaID"];
}
