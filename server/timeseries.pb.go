// Code generated by protoc-gen-gogo.
// source: cockroach/server/timeseries.proto
// DO NOT EDIT!

package server

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/cockroachdb/gogoproto"
// skipping weak import google_api1 "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import cockroach_ts "github.com/cockroachdb/cockroach/ts"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for TimeSeries service

type TimeSeriesClient interface {
	// URL: /ts/query
	Query(ctx context.Context, in *cockroach_ts.TimeSeriesQueryRequest, opts ...grpc.CallOption) (*cockroach_ts.TimeSeriesQueryResponse, error)
}

type timeSeriesClient struct {
	cc *grpc.ClientConn
}

func NewTimeSeriesClient(cc *grpc.ClientConn) TimeSeriesClient {
	return &timeSeriesClient{cc}
}

func (c *timeSeriesClient) Query(ctx context.Context, in *cockroach_ts.TimeSeriesQueryRequest, opts ...grpc.CallOption) (*cockroach_ts.TimeSeriesQueryResponse, error) {
	out := new(cockroach_ts.TimeSeriesQueryResponse)
	err := grpc.Invoke(ctx, "/cockroach.server.TimeSeries/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TimeSeries service

type TimeSeriesServer interface {
	// URL: /ts/query
	Query(context.Context, *cockroach_ts.TimeSeriesQueryRequest) (*cockroach_ts.TimeSeriesQueryResponse, error)
}

func RegisterTimeSeriesServer(s *grpc.Server, srv TimeSeriesServer) {
	s.RegisterService(&_TimeSeries_serviceDesc, srv)
}

func _TimeSeries_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cockroach_ts.TimeSeriesQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSeriesServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cockroach.server.TimeSeries/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSeriesServer).Query(ctx, req.(*cockroach_ts.TimeSeriesQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeSeries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cockroach.server.TimeSeries",
	HandlerType: (*TimeSeriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _TimeSeries_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptorTimeseries = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xce, 0x4f, 0xce,
	0x2e, 0xca, 0x4f, 0x4c, 0xce, 0xd0, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2f, 0xc9, 0xcc,
	0x4d, 0x05, 0x32, 0x33, 0x53, 0x8b, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04, 0xe0, 0x4a,
	0xf4, 0x20, 0x4a, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x92, 0xfa, 0x20, 0x16, 0x44, 0x9d,
	0x94, 0x4c, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x7e, 0x62, 0x41, 0xa6, 0x7e, 0x62, 0x5e, 0x5e,
	0x7e, 0x49, 0x62, 0x49, 0x66, 0x7e, 0x1e, 0xd4, 0x14, 0x29, 0x59, 0x84, 0x45, 0x25, 0xc5, 0x18,
	0x96, 0x18, 0x95, 0x72, 0x71, 0x85, 0x00, 0xc5, 0x82, 0xc1, 0x62, 0x42, 0xe9, 0x5c, 0xac, 0x81,
	0xa5, 0xa9, 0x45, 0x95, 0x42, 0x2a, 0x7a, 0x08, 0xcb, 0x4b, 0x8a, 0xf5, 0x10, 0x4a, 0xc0, 0xd2,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xaa, 0x04, 0x54, 0x15, 0x17, 0x00, 0xdd, 0x91,
	0xaa, 0x24, 0xd8, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x6e, 0x25, 0x4e, 0x90, 0x0b, 0x0a, 0x41, 0x52,
	0x4e, 0x0a, 0x27, 0x1e, 0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0x01, 0x88, 0x6f, 0x00, 0xf1,
	0x03, 0x20, 0x9e, 0xf0, 0x58, 0x8e, 0x21, 0x8a, 0x0d, 0xe2, 0xd7, 0x08, 0x86, 0x08, 0xc6, 0x24,
	0x36, 0xb0, 0x1b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xe1, 0x13, 0x17, 0x2d, 0x01,
	0x00, 0x00,
}
