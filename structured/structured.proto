// Copyright 2015 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License. See the AUTHORS file
// for names of contributors.
//
// Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";
package cockroach.structured;
option go_package = "structured";

import "gogoproto/gogo.proto";

message Table {
  optional string name = 1 [(gogoproto.nullable) = false];
}

message Column {
  enum ColumnType {
    BYTES = 0;
  }

  optional string name = 1 [(gogoproto.nullable) = false];
  optional ColumnType type = 2 [(gogoproto.nullable) = false];
}

message Index {
  optional string name = 1 [(gogoproto.nullable) = false];
  optional bool unique = 2 [(gogoproto.nullable) = false];
}

message TableSchema {
  message IndexByName {
    optional Index index = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
    // An ordered list of column names of which the index is comprised. Each
    // column_name refers to a column in the TableSchema's columns.
    repeated string column_names = 2;
  }
  optional Table table = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated Column columns = 2 [(gogoproto.nullable) = false];
  // An ordered list of indexes included in the table. The first index is the
  // primary key; it is required.
  repeated IndexByName indexes = 3 [(gogoproto.nullable) = false];
}

message ColumnDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Column column = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
}

message IndexDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Index index = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  // An ordered list of column ids of which the index is comprised. Each
  // column_id refers to a column in the TableDescriptor's columns; special
  // care is taken to update this when deleting columns.
  repeated uint32 column_ids = 3 [(gogoproto.customname) = "ColumnIDs"];
}

// A TableDescriptor represents a table and is stored in a structured metadata
// key. The TableDescriptor has a globally-unique ID, while its member
// {Column,Index}Descriptors have locally-unique IDs.
message TableDescriptor {
  optional uint32 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
  optional Table table = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true];
  repeated ColumnDescriptor columns = 3 [(gogoproto.nullable) = false];
  // next_column_id is used to ensure that deleted column ids are not reused
  optional uint32 next_column_id = 4 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextColumnID"];
  repeated IndexDescriptor indexes = 5 [(gogoproto.nullable) = false];
  // next_index_id is used to ensure that deleted index ids are not reused
  optional uint32 next_index_id = 6 [(gogoproto.nullable) = false,
      (gogoproto.customname) = "NextIndexID"];
}
