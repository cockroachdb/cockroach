// Copyright 2016 The Cockroach Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Author: Cuong Do (cdo@cockroachlabs.com)

package cli

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"

	"github.com/cockroachdb/cockroach/util"
)

var manPath string

var genManCmd = &cobra.Command{
	Use:   "man",
	Short: "Generate man pages bash autocompletion for CockroachDB",
	Long: `This command generates man pages and bash autocompletion files for CockroachDB. By default,
this places man pages into the "man" directory under the current directory.`,
	RunE: runGenManCmd,
}

func runGenManCmd(cmd *cobra.Command, args []string) error {
	info := util.GetBuildInfo()
	header := &doc.GenManHeader{
		Section: "1",
		Manual:  "CockroachDB Manual",
		Source:  fmt.Sprintf("CockroachDB %s", info.Tag),
	}

	if !strings.HasSuffix(manPath, string(os.PathSeparator)) {
		manPath += string(os.PathSeparator)
	}

	if _, err := os.Stat(manPath); err != nil {
		if os.IsNotExist(err) {
			if err = os.MkdirAll(manPath, 0755); err != nil {
				return err
			}
		} else {
			return err
		}
	}

	if err := doc.GenManTree(cmd.Root(), header, manPath); err != nil {
		return err
	}

	// TODO(cdo): The man page generated by the cobra package doesn't include a list of commands, so
	// one has to notice the "See Also" section at the bottom of the page to know which commands
	// are supported. I'd like to make this better somehow.

	fmt.Println("Generated CockroachDB man pages in", manPath)
	return nil
}

var (
	autoCompletePath string
	autoCompleteType string
)

var genAutocompleteCmd = &cobra.Command{
	Use:   "autocomplete",
	Short: "generate bash autocompletion script for CockroachDB",
	Long: `Generate bash autocompletion script for CockroachDB. This takes an optional parameter
to specify the path for the completion file.

By default, completion file is written to ./cockroach.bash. Use "--flag=/path/to/file" to
override the file location.

--type [bash|bash-mac] specifies the type of bash completion file to create. The "bash-mac"
type generates a bash completion script that works correctly on OS X.
	`,
	RunE: runGenAutocompleteCmd,
}

func runGenAutocompleteCmd(cmd *cobra.Command, args []string) error {
	if autoCompleteType != "bash" && autoCompleteType != "bash-mac" {
		mustUsage(cmd)
		return util.Errorf("unknown autocomplete type: %s", autoCompleteType)
	}

	acbuf := &bytes.Buffer{}
	if err := cmd.Root().GenBashCompletion(acbuf); err != nil {
		return err
	}
	acbytes := acbuf.Bytes()
	if autoCompleteType == "bash-mac" {
		// Work around minor syntactic differences with bash on OS X. Issue #240 filed against cobra.
		acbytes = []byte(strings.Replace(string(acbytes), "declare -A", "declare -a", -1))
	}
	if err := ioutil.WriteFile(autoCompletePath, acbytes, 0777); err != nil {
		return err
	}

	fmt.Println("Generated bash completion file", autoCompletePath)
	return nil
}

var genCmd = &cobra.Command{
	Use:   "gen [command]",
	Short: "generate manpages and bash completion file",
	Long:  "Generate manpages and bash completion file.",
	Run: func(cmd *cobra.Command, args []string) {
		mustUsage(cmd)
	},
}

var genCmds = []*cobra.Command{
	genManCmd,
	genAutocompleteCmd,
}

func init() {
	genManCmd.PersistentFlags().StringVarP(&manPath, "path", "",
		"man/man1", "path where man pages will be outputted")

	genAutocompleteCmd.PersistentFlags().StringVarP(&autoCompletePath, "out", "",
		"cockroach.bash", "path to generated autocomplete file")
	genAutocompleteCmd.PersistentFlags().StringVarP(&autoCompleteType, "type", "",
		"bash", "autocompletion type (bash or bash-mac)")

	genCmd.AddCommand(genCmds...)
}
