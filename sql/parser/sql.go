// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:259
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TO = 57565
const TRAILING = 57566
const TRANSACTION = 57567
const TREAT = 57568
const TRIM = 57569
const TRUE = 57570
const TRUNCATE = 57571
const TYPE = 57572
const UNBOUNDED = 57573
const UNCOMMITTED = 57574
const UNION = 57575
const UNIQUE = 57576
const UNKNOWN = 57577
const UPDATE = 57578
const USER = 57579
const USING = 57580
const VALID = 57581
const VALIDATE = 57582
const VALUE = 57583
const VALUES = 57584
const VARCHAR = 57585
const VARIADIC = 57586
const VARYING = 57587
const WHEN = 57588
const WHERE = 57589
const WINDOW = 57590
const WITH = 57591
const WITHIN = 57592
const WITHOUT = 57593
const YEAR = 57594
const ZONE = 57595
const NOT_LA = 57596
const WITH_LA = 57597
const POSTFIXOP = 57598
const UMINUS = 57599

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4220

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	276, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	160, 289,
	188, 289,
	274, 289,
	276, 289,
	-2, 299,
	-1, 44,
	1, 292,
	160, 292,
	188, 292,
	274, 292,
	276, 292,
	-2, 298,
	-1, 53,
	1, 21,
	276, 21,
	-2, 318,
	-1, 235,
	1, 138,
	276, 138,
	-2, 789,
	-1, 266,
	135, 328,
	159, 328,
	-2, 295,
	-1, 269,
	135, 327,
	159, 327,
	-2, 293,
	-1, 379,
	135, 327,
	159, 327,
	-2, 296,
	-1, 435,
	273, 735,
	-2, 730,
	-1, 436,
	273, 736,
	-2, 731,
	-1, 442,
	6, 456,
	273, 456,
	-2, 869,
	-1, 464,
	6, 426,
	-2, 846,
	-1, 465,
	6, 453,
	273, 453,
	-2, 847,
	-1, 466,
	6, 434,
	-2, 848,
	-1, 467,
	6, 433,
	-2, 849,
	-1, 468,
	6, 453,
	273, 453,
	-2, 852,
	-1, 469,
	6, 453,
	273, 453,
	-2, 853,
	-1, 470,
	6, 454,
	-2, 856,
	-1, 471,
	6, 421,
	-2, 857,
	-1, 472,
	6, 421,
	-2, 858,
	-1, 473,
	6, 436,
	-2, 861,
	-1, 474,
	6, 422,
	-2, 866,
	-1, 475,
	6, 423,
	-2, 867,
	-1, 476,
	6, 424,
	-2, 868,
	-1, 477,
	6, 421,
	-2, 872,
	-1, 478,
	6, 427,
	-2, 877,
	-1, 479,
	6, 425,
	-2, 879,
	-1, 480,
	6, 455,
	-2, 883,
	-1, 481,
	6, 451,
	273, 451,
	-2, 887,
	-1, 739,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 558,
	-1, 747,
	273, 715,
	-2, 704,
	-1, 941,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 489,
	-1, 942,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 490,
	-1, 943,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 491,
	-1, 947,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 495,
	-1, 948,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 496,
	-1, 949,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 497,
	-1, 952,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 502,
	-1, 983,
	168, 628,
	-2, 631,
	-1, 1135,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	233, 299,
	-2, 378,
	-1, 1143,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 503,
	-1, 1148,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 504,
	-1, 1167,
	168, 627,
	-2, 630,
	-1, 1310,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 505,
	-1, 1315,
	124, 0,
	-2, 515,
	-1, 1324,
	168, 629,
	-2, 632,
	-1, 1364,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 539,
	-1, 1365,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 540,
	-1, 1366,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 541,
	-1, 1370,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 545,
	-1, 1371,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 546,
	-1, 1372,
	12, 0,
	13, 0,
	14, 0,
	256, 0,
	257, 0,
	258, 0,
	-2, 547,
	-1, 1472,
	124, 0,
	-2, 516,
	-1, 1476,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 519,
	-1, 1477,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 521,
	-1, 1559,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 520,
	-1, 1560,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 522,
	-1, 1568,
	124, 0,
	-2, 548,
	-1, 1607,
	124, 0,
	-2, 549,
	-1, 1652,
	30, 0,
	134, 0,
	205, 0,
	254, 0,
	-2, 845,
}

const sqlNprod = 979
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20262

var sqlAct = [...]int{

	980, 1651, 1634, 1513, 1672, 1612, 1635, 1650, 1636, 825,
	881, 1576, 1535, 270, 1434, 1458, 868, 1316, 434, 433,
	426, 1344, 1402, 1546, 1435, 236, 577, 742, 818, 1452,
	494, 1446, 1132, 292, 865, 1079, 522, 1170, 1225, 1287,
	1224, 996, 1131, 744, 1122, 867, 500, 86, 1296, 826,
	890, 14, 1317, 398, 275, 31, 677, 794, 803, 1000,
	1118, 1035, 968, 773, 965, 893, 777, 277, 43, 860,
	20, 482, 990, 1084, 10, 550, 693, 697, 6, 65,
	503, 535, 31, 269, 699, 367, 505, 408, 312, 399,
	495, 532, 368, 310, 496, 43, 63, 280, 67, 382,
	381, 561, 66, 383, 314, 81, 68, 233, 31, 307,
	870, 531, 318, 44, 552, 309, 72, 548, 45, 891,
	303, 43, 1552, 524, 993, 1553, 819, 1648, 524, 274,
	1534, 278, 823, 1130, 1642, 1641, 319, 885, 885, 1633,
	1628, 1609, 1475, 885, 1475, 1603, 259, 1595, 885, 1586,
	1534, 1561, 1534, 274, 1475, 1556, 1089, 267, 885, 701,
	994, 1543, 266, 49, 1534, 428, 315, 1533, 701, 514,
	1534, 288, 298, 1518, 295, 1163, 885, 1598, 1038, 304,
	282, 51, 1517, 1498, 702, 885, 1163, 1478, 484, 1474,
	1163, 700, 1475, 995, 992, 1412, 1320, 1278, 885, 1163,
	1274, 1377, 704, 702, 729, 1273, 52, 1242, 1274, 1240,
	1243, 1239, 1163, 47, 1163, 1238, 1323, 1167, 1163, 48,
	1163, 704, 703, 886, 1165, 1164, 885, 1102, 717, 1166,
	1163, 791, 529, 49, 790, 530, 792, 46, 1120, 1104,
	885, 703, 840, 1169, 527, 976, 880, 717, 1537, 997,
	497, 51, 854, 393, 498, 49, 49, 394, 671, 670,
	542, 541, 335, 287, 497, 53, 498, 1163, 498, 576,
	525, 354, 1649, 51, 51, 525, 52, 1647, 1604, 1542,
	380, 1503, 386, 47, 400, 400, 730, 1499, 374, 48,
	1491, 1490, 1485, 1484, 501, 1483, 1482, 1469, 52, 52,
	1392, 1429, 1387, 991, 379, 47, 1386, 64, 725, 1385,
	1327, 48, 1305, 1286, 718, 1245, 342, 1244, 1232, 493,
	1223, 489, 483, 343, 1141, 1106, 1196, 1193, 1191, 822,
	46, 750, 1180, 718, 1174, 1103, 1089, 1050, 488, 1007,
	1006, 393, 1577, 973, 392, 700, 1346, 1597, 1578, 1570,
	1549, 1540, 1532, 1510, 1496, 1463, 755, 1442, 1314, 1304,
	523, 1447, 1284, 1283, 371, 674, 1281, 1257, 1256, 719,
	1222, 1188, 1187, 1467, 1179, 1160, 1156, 970, 778, 727,
	373, 781, 1064, 1063, 1045, 685, 687, 1005, 719, 1197,
	884, 267, 694, 783, 318, 318, 266, 771, 770, 769,
	1197, 768, 580, 767, 733, 734, 735, 736, 737, 673,
	766, 395, 702, 740, 1428, 765, 764, 1197, 319, 319,
	763, 304, 515, 974, 762, 761, 581, 760, 726, 759,
	704, 1197, 758, 753, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 757, 1210, 748, 746, 1558, 539, 747,
	703, 46, 538, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 675, 661, 572, 565, 665, 666, 667, 664,
	668, 497, 293, 745, 397, 498, 672, 1557, 1307, 702,
	1306, 681, 490, 683, 702, 1064, 682, 1197, 1554, 1433,
	409, 1090, 695, 366, 1142, 363, 349, 704, 787, 1021,
	267, 819, 704, 267, 267, 689, 1347, 1001, 690, 691,
	774, 1086, 1618, 1661, 1183, 571, 506, 703, 507, 1211,
	1098, 1420, 703, 797, 786, 788, 258, 1585, 257, 506,
	1211, 507, 775, 776, 846, 1662, 348, 57, 252, 779,
	253, 227, 289, 1526, 782, 289, 580, 300, 931, 1525,
	289, 1269, 300, 835, 312, 389, 390, 1249, 436, 1248,
	1178, 1211, 1177, 1176, 1175, 808, 810, 1144, 821, 957,
	581, 31, 839, 784, 1212, 441, 58, 815, 318, 814,
	796, 65, 508, 370, 31, 1212, 1268, 967, 967, 85,
	261, 741, 85, 1638, 1620, 508, 518, 43, 751, 85,
	67, 997, 319, 859, 66, 486, 85, 85, 68, 718,
	85, 1584, 842, 85, 85, 85, 1212, 800, 85, 85,
	85, 85, 836, 317, 580, 841, 837, 843, 848, 816,
	813, 844, 315, 1669, 847, 838, 834, 1466, 1675, 833,
	1080, 85, 1205, 1198, 1199, 1200, 1201, 1202, 581, 1336,
	1206, 1203, 1204, 1205, 1198, 1199, 1200, 1201, 1202, 346,
	60, 506, 1639, 507, 719, 264, 705, 706, 707, 708,
	709, 1198, 1199, 1200, 1201, 1202, 1001, 570, 558, 569,
	1078, 563, 1515, 1075, 485, 1198, 1199, 1200, 1201, 1202,
	1259, 1579, 1011, 1661, 347, 59, 504, 804, 1640, 1097,
	512, 400, 511, 61, 273, 997, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 508, 887, 930,
	710, 711, 712, 705, 706, 707, 708, 709, 272, 509,
	707, 708, 709, 1200, 1201, 1202, 1673, 369, 1099, 573,
	807, 289, 509, 1266, 345, 895, 1668, 863, 971, 344,
	1008, 1014, 1019, 862, 1029, 1031, 1036, 1039, 1040, 1041,
	338, 340, 438, 786, 772, 1333, 1146, 966, 786, 580,
	274, 491, 993, 1566, 364, 1674, 738, 85, 85, 981,
	888, 501, 289, 517, 864, 575, 1186, 1015, 1630, 55,
	796, 1676, 1121, 581, 878, 879, 795, 62, 1334, 574,
	1260, 345, 262, 1049, 1631, 524, 1059, 85, 994, 85,
	1081, 85, 1297, 85, 1153, 1416, 972, 806, 274, 265,
	1016, 1013, 1637, 384, 1667, 1151, 365, 1053, 85, 1516,
	1660, 850, 56, 1658, 1125, 1445, 1197, 852, 385, 85,
	271, 995, 992, 1083, 1061, 874, 357, 385, 702, 1128,
	85, 85, 853, 85, 997, 955, 336, 334, 901, 1123,
	851, 1092, 1520, 1519, 1508, 1126, 704, 1251, 1058, 1054,
	1332, 694, 875, 680, 509, 805, 1017, 1494, 1682, 1124,
	676, 921, 1613, 85, 1074, 85, 703, 1149, 384, 1107,
	1415, 1154, 318, 1454, 1091, 317, 317, 997, 1509, 1093,
	1088, 669, 543, 579, 85, 1095, 85, 85, 85, 85,
	1066, 85, 1094, 1373, 977, 982, 319, 985, 1105, 85,
	1100, 1101, 1096, 1127, 1455, 85, 1113, 564, 559, 31,
	1012, 1408, 1030, 1403, 1461, 1137, 54, 956, 1042, 1043,
	1044, 1401, 43, 85, 1143, 1115, 85, 1111, 1148, 1114,
	1136, 991, 525, 1116, 1495, 1681, 547, 901, 1419, 953,
	1292, 1409, 1150, 793, 1140, 1418, 1211, 1162, 1065, 1152,
	1291, 1453, 779, 785, 782, 344, 302, 1171, 718, 272,
	921, 776, 775, 376, 1374, 1462, 1288, 545, 1119, 1168,
	1375, 289, 1184, 73, 300, 1004, 1189, 1569, 546, 829,
	1493, 1226, 1313, 1192, 300, 1155, 402, 300, 702, 1147,
	1145, 845, 362, 78, 360, 920, 359, 740, 74, 1003,
	1125, 1212, 358, 1036, 1036, 1036, 704, 355, 301, 1227,
	954, 756, 1399, 719, 663, 1128, 1404, 75, 1405, 963,
	1417, 85, 1264, 1247, 1262, 1295, 703, 579, 1250, 1182,
	961, 1126, 77, 1109, 1254, 85, 876, 873, 528, 85,
	526, 1407, 85, 85, 521, 513, 510, 85, 1410, 85,
	85, 400, 85, 1341, 1527, 85, 85, 85, 882, 317,
	387, 501, 85, 85, 1229, 1230, 1231, 1203, 1204, 1205,
	1198, 1199, 1200, 1201, 1202, 1662, 285, 1263, 567, 1265,
	1246, 712, 705, 706, 707, 708, 709, 1275, 1271, 1127,
	959, 1253, 958, 1529, 920, 351, 964, 812, 1272, 1406,
	796, 1537, 796, 1267, 1270, 579, 811, 1277, 809, 1276,
	3, 883, 1255, 1309, 76, 1310, 1581, 1606, 718, 1159,
	1280, 702, 388, 1161, 1289, 391, 1315, 1301, 69, 1599,
	824, 702, 251, 1282, 1325, 289, 1172, 1173, 286, 1294,
	1325, 1290, 1300, 696, 1293, 1298, 1299, 540, 580, 704,
	1139, 79, 1679, 1680, 1342, 1329, 1330, 1331, 80, 703,
	1197, 702, 289, 1351, 294, 352, 1353, 960, 1468, 703,
	254, 255, 581, 719, 962, 1221, 855, 1393, 1339, 856,
	1326, 1308, 1241, 1048, 1047, 1046, 1234, 998, 1335, 1337,
	1338, 857, 85, 1480, 1340, 858, 1348, 1382, 1383, 749,
	1460, 1459, 260, 85, 85, 1352, 1389, 1390, 1391, 1514,
	71, 662, 356, 1350, 1487, 1629, 1185, 1565, 1545, 1002,
	1354, 754, 25, 1437, 414, 1400, 1252, 869, 582, 568,
	85, 557, 85, 1380, 437, 361, 1381, 1398, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 551, 900, 560,
	1010, 1384, 487, 439, 1055, 898, 1394, 440, 899, 1448,
	579, 780, 427, 896, 313, 827, 999, 1181, 752, 1444,
	1440, 1439, 1441, 1440, 1439, 1441, 413, 419, 923, 418,
	978, 1432, 410, 1085, 1472, 1457, 1129, 341, 1443, 1476,
	1477, 1085, 901, 231, 1479, 1430, 232, 1082, 31, 1481,
	1427, 820, 1473, 877, 1413, 1414, 684, 1261, 1465, 1321,
	263, 1194, 1450, 1451, 1486, 921, 1456, 1028, 1489, 1020,
	1018, 1121, 85, 85, 85, 1009, 901, 372, 85, 499,
	828, 85, 353, 901, 889, 1108, 1138, 85, 85, 85,
	85, 85, 396, 85, 85, 692, 284, 900, 1497, 921,
	283, 85, 1464, 85, 866, 289, 921, 922, 350, 85,
	544, 1492, 849, 1125, 901, 516, 256, 1408, 85, 85,
	1580, 1378, 688, 1617, 85, 1258, 50, 923, 1128, 19,
	17, 16, 1388, 317, 15, 13, 1505, 921, 1123, 1521,
	12, 11, 18, 1112, 1126, 9, 1504, 1409, 8, 1507,
	85, 7, 85, 85, 24, 85, 23, 22, 1124, 1539,
	5, 4, 2, 1528, 85, 1, 0, 1440, 1439, 1441,
	1538, 85, 0, 85, 0, 1550, 0, 1541, 1523, 1524,
	0, 1440, 1439, 1441, 1536, 1157, 1158, 1530, 1449, 0,
	0, 1559, 1560, 1522, 0, 897, 0, 0, 0, 920,
	901, 1548, 1127, 0, 0, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 1564, 0, 0, 0, 0,
	0, 1573, 1404, 921, 1405, 0, 1551, 0, 0, 421,
	0, 1575, 0, 920, 1571, 0, 0, 0, 0, 0,
	920, 0, 0, 1218, 1219, 1220, 0, 1407, 1562, 1574,
	0, 0, 0, 501, 1410, 0, 0, 1588, 0, 0,
	83, 1555, 0, 237, 0, 0, 1590, 1596, 0, 1592,
	83, 920, 0, 1440, 1439, 1441, 0, 281, 281, 1589,
	0, 291, 0, 1591, 291, 297, 291, 786, 1601, 291,
	305, 291, 237, 0, 897, 0, 0, 0, 0, 1605,
	829, 1602, 0, 0, 0, 1406, 901, 0, 1608, 0,
	0, 0, 337, 0, 0, 0, 0, 0, 0, 1624,
	0, 0, 580, 0, 0, 0, 1622, 1619, 1623, 921,
	0, 289, 1625, 0, 289, 1621, 1440, 1439, 1441, 1644,
	0, 1627, 1626, 85, 0, 0, 581, 1600, 1643, 0,
	1645, 1655, 1655, 1646, 0, 0, 0, 920, 0, 1656,
	0, 901, 0, 1659, 1657, 1311, 1312, 0, 85, 1663,
	0, 0, 1665, 1655, 1666, 1614, 1615, 0, 0, 0,
	0, 85, 901, 85, 921, 85, 1678, 1677, 85, 0,
	0, 0, 0, 0, 1664, 0, 0, 0, 0, 85,
	1655, 1683, 85, 0, 0, 921, 0, 0, 85, 579,
	0, 0, 85, 0, 85, 0, 0, 0, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 0, 1376, 0, 1594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 900, 0, 0, 0, 901, 0, 237, 237,
	0, 0, 0, 920, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 0, 0, 1423, 0, 921,
	0, 0, 923, 0, 0, 1431, 900, 0, 83, 0,
	291, 704, 237, 900, 377, 0, 0, 0, 0, 1022,
	0, 0, 289, 289, 0, 1632, 289, 0, 0, 281,
	0, 703, 0, 0, 0, 70, 923, 0, 920, 0,
	291, 0, 1197, 923, 900, 0, 0, 85, 85, 85,
	0, 291, 291, 0, 519, 85, 85, 0, 0, 920,
	0, 85, 0, 85, 0, 85, 85, 85, 85, 0,
	0, 0, 0, 85, 923, 73, 0, 0, 0, 0,
	0, 922, 85, 0, 536, 0, 536, 0, 0, 0,
	85, 85, 0, 0, 85, 78, 0, 0, 0, 0,
	74, 0, 0, 85, 85, 237, 0, 536, 237, 237,
	237, 0, 237, 0, 0, 922, 0, 0, 0, 75,
	83, 0, 922, 718, 0, 0, 679, 0, 0, 0,
	900, 0, 0, 920, 77, 0, 0, 0, 0, 0,
	0, 1512, 0, 0, 281, 85, 0, 698, 0, 1511,
	0, 0, 0, 922, 0, 0, 0, 0, 0, 0,
	923, 0, 0, 0, 415, 32, 0, 0, 0, 897,
	0, 0, 1211, 0, 0, 0, 1544, 0, 719, 0,
	0, 0, 0, 0, 0, 0, 289, 0, 0, 0,
	0, 0, 32, 0, 0, 0, 0, 0, 85, 0,
	85, 0, 85, 897, 0, 0, 0, 0, 268, 85,
	897, 276, 0, 0, 0, 0, 76, 0, 32, 0,
	239, 0, 1022, 1022, 0, 0, 0, 1212, 0, 276,
	0, 0, 0, 1568, 250, 0, 900, 0, 0, 922,
	0, 897, 291, 0, 85, 0, 85, 705, 706, 707,
	708, 709, 0, 79, 85, 0, 801, 0, 0, 0,
	291, 0, 85, 291, 817, 0, 923, 241, 291, 0,
	831, 832, 0, 291, 0, 0, 291, 237, 237, 0,
	1022, 1022, 1022, 536, 698, 0, 240, 242, 0, 0,
	0, 900, 1206, 1203, 1204, 1205, 1198, 1199, 1200, 1201,
	1202, 0, 0, 0, 0, 0, 0, 0, 0, 1607,
	1616, 0, 900, 0, 0, 0, 0, 0, 0, 243,
	0, 923, 0, 0, 85, 85, 0, 897, 85, 244,
	245, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 923, 0, 246, 922, 0, 0, 85, 0,
	0, 829, 0, 579, 1197, 0, 1213, 1214, 1215, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 85, 85, 0,
	85, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 1210, 0,
	922, 0, 1022, 1022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 923, 0, 0, 85,
	0, 922, 0, 0, 291, 801, 0, 0, 0, 0,
	0, 0, 0, 897, 247, 0, 0, 248, 0, 0,
	0, 249, 268, 0, 0, 0, 0, 0, 0, 0,
	0, 291, 0, 237, 0, 1022, 1022, 1022, 1022, 1022,
	1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
	1022, 1022, 1022, 702, 1022, 720, 721, 722, 0, 0,
	0, 0, 0, 0, 1211, 723, 0, 0, 897, 0,
	0, 704, 0, 729, 0, 922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 703, 0, 0, 0, 0, 0, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 291, 1056, 1057, 0, 0, 0, 801,
	0, 268, 1062, 0, 268, 268, 0, 0, 1067, 1068,
	1070, 1072, 1073, 0, 1076, 1077, 0, 0, 0, 0,
	0, 0, 291, 0, 1087, 730, 0, 739, 0, 0,
	291, 743, 0, 897, 0, 0, 0, 728, 0, 861,
	536, 0, 0, 0, 0, 861, 0, 725, 0, 0,
	1207, 1208, 1209, 718, 1206, 1203, 1204, 1205, 1198, 1199,
	1200, 1201, 1202, 0, 0, 0, 0, 0, 0, 0,
	0, 679, 0, 237, 291, 724, 1110, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 0, 0, 0, 0,
	0, 0, 1134, 0, 291, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 720, 721, 722, 0, 719, 0,
	0, 0, 0, 0, 723, 0, 1022, 0, 727, 0,
	704, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	703, 0, 0, 0, 32, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 714,
	715, 716, 0, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 0, 0, 0, 1051, 0, 0, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	1022, 0, 0, 0, 730, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 698, 0, 0, 0, 0, 0,
	702, 0, 720, 721, 722, 0, 1022, 0, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 719, 704, 291,
	729, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 1279, 0, 801, 0, 679, 0, 703, 1285,
	0, 0, 0, 0, 717, 0, 892, 0, 0, 0,
	291, 0, 0, 291, 0, 0, 0, 0, 0, 1134,
	0, 0, 0, 1303, 0, 1134, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 969, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 0, 0, 21, 0, 0, 0, 0, 1500,
	0, 0, 730, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 1345, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 0, 37, 0, 0,
	718, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 0, 26, 1197,
	38, 1213, 1214, 1215, 27, 0, 0, 276, 0, 0,
	0, 1471, 0, 0, 0, 0, 0, 28, 1396, 1397,
	801, 0, 0, 0, 0, 719, 698, 698, 0, 0,
	0, 0, 1421, 0, 1422, 727, 291, 1424, 1425, 1426,
	0, 0, 0, 1210, 291, 0, 0, 0, 0, 0,
	0, 1436, 0, 801, 1436, 0, 0, 0, 0, 0,
	0, 291, 291, 0, 0, 291, 0, 0, 0, 32,
	0, 0, 0, 0, 698, 1134, 0, 0, 1197, 1135,
	1213, 1214, 1215, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 40, 0, 0, 29, 0, 39, 1237, 0, 0,
	0, 30, 0, 1216, 49, 0, 1488, 0, 33, 34,
	0, 0, 1210, 0, 0, 0, 36, 0, 0, 1211,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 969, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 52, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 801,
	48, 1506, 0, 237, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 1212, 0, 0, 0, 46, 0,
	0, 0, 1216, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1211, 0,
	0, 739, 1436, 0, 0, 291, 0, 1547, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1207, 1208, 1209, 0, 1206,
	1203, 1204, 1205, 1198, 1199, 1200, 1201, 1202, 0, 0,
	0, 0, 0, 1212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1582, 1583, 0, 0, 1587,
	0, 0, 0, 0, 1436, 892, 0, 237, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 0, 1207, 1208, 1209, 0, 1206, 1203,
	1204, 1205, 1198, 1199, 1200, 1201, 1202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 698, 698, 291,
	0, 237, 0, 0, 0, 0, 0, 0, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 1436, 1547, 0,
	90, 91, 184, 185, 186, 92, 187, 188, 0, 93,
	189, 190, 94, 0, 0, 191, 192, 193, 0, 194,
	291, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 195, 106, 196, 197, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	198, 110, 199, 0, 0, 111, 112, 200, 113, 0,
	0, 0, 0, 0, 0, 114, 201, 0, 202, 0,
	115, 116, 203, 204, 0, 0, 117, 0, 32, 118,
	205, 206, 207, 0, 208, 0, 0, 119, 0, 120,
	121, 0, 0, 209, 0, 122, 892, 892, 123, 0,
	892, 124, 0, 125, 126, 127, 128, 129, 0, 130,
	131, 0, 132, 0, 133, 0, 210, 134, 211, 135,
	136, 0, 0, 290, 0, 0, 137, 212, 0, 138,
	0, 213, 139, 140, 0, 214, 141, 215, 0, 142,
	143, 144, 216, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 217, 154, 0, 238, 155,
	156, 49, 157, 158, 0, 159, 160, 0, 161, 218,
	162, 0, 163, 164, 166, 219, 165, 220, 0, 51,
	167, 168, 0, 221, 222, 0, 0, 169, 223, 224,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 0,
	0, 176, 177, 178, 320, 226, 0, 179, 0, 0,
	0, 47, 180, 181, 182, 183, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 1531, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 87, 88, 583,
	89, 584, 585, 586, 587, 588, 589, 590, 591, 90,
	91, 184, 185, 186, 92, 187, 188, 592, 93, 189,
	190, 94, 593, 594, 191, 192, 193, 595, 194, 596,
	321, 597, 95, 96, 97, 0, 98, 598, 99, 599,
	322, 100, 101, 600, 601, 602, 603, 604, 605, 102,
	103, 104, 105, 195, 106, 196, 197, 606, 607, 107,
	608, 609, 610, 108, 109, 611, 612, 739, 613, 198,
	110, 199, 614, 615, 111, 112, 200, 113, 616, 0,
	617, 618, 323, 619, 114, 201, 620, 202, 621, 115,
	116, 203, 204, 622, 623, 117, 624, 324, 118, 205,
	206, 207, 625, 208, 626, 325, 119, 326, 120, 121,
	627, 628, 209, 327, 122, 328, 629, 123, 630, 631,
	124, 0, 125, 126, 127, 128, 129, 329, 130, 131,
	0, 132, 632, 133, 633, 210, 134, 211, 135, 136,
	634, 635, 636, 637, 638, 137, 212, 330, 138, 331,
	213, 139, 140, 639, 214, 141, 215, 640, 142, 143,
	144, 216, 145, 146, 641, 148, 149, 147, 150, 642,
	151, 332, 152, 153, 217, 154, 0, 238, 155, 156,
	643, 157, 158, 644, 159, 160, 333, 161, 218, 162,
	645, 163, 164, 166, 219, 165, 220, 646, 647, 167,
	168, 648, 221, 222, 649, 650, 169, 223, 224, 651,
	170, 171, 172, 173, 652, 653, 174, 175, 654, 655,
	176, 177, 178, 225, 226, 656, 179, 657, 658, 659,
	660, 180, 181, 182, 183, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1302, 87, 88, 583, 89, 584, 585, 586, 587, 588,
	589, 590, 591, 90, 91, 184, 185, 186, 92, 187,
	188, 592, 93, 189, 190, 94, 593, 594, 191, 192,
	193, 595, 194, 596, 321, 597, 95, 96, 97, 0,
	98, 598, 99, 599, 322, 100, 101, 600, 601, 602,
	603, 604, 605, 102, 103, 104, 105, 195, 106, 196,
	197, 606, 607, 107, 608, 609, 610, 108, 109, 611,
	612, 0, 613, 198, 110, 199, 614, 615, 111, 112,
	200, 113, 616, 0, 617, 618, 323, 619, 114, 201,
	620, 202, 621, 115, 116, 203, 204, 622, 623, 117,
	624, 324, 118, 205, 206, 207, 625, 208, 626, 325,
	119, 326, 120, 121, 627, 628, 209, 327, 122, 328,
	629, 123, 630, 631, 124, 0, 125, 126, 127, 128,
	129, 329, 130, 131, 0, 132, 632, 133, 633, 210,
	134, 211, 135, 136, 634, 635, 636, 637, 638, 137,
	212, 330, 138, 331, 213, 139, 140, 639, 214, 141,
	215, 640, 142, 143, 144, 216, 145, 146, 641, 148,
	149, 147, 150, 642, 151, 332, 152, 153, 217, 154,
	0, 238, 155, 156, 643, 157, 158, 644, 159, 160,
	333, 161, 218, 162, 645, 163, 164, 166, 219, 165,
	220, 646, 647, 167, 168, 648, 221, 222, 649, 650,
	169, 223, 224, 651, 170, 171, 172, 173, 652, 653,
	174, 175, 654, 655, 176, 177, 178, 225, 226, 656,
	179, 657, 658, 659, 660, 180, 181, 182, 183, 0,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 789, 87, 88, 583, 89, 584, 585, 586, 587,
	588, 589, 590, 591, 90, 91, 184, 185, 186, 92,
	187, 188, 592, 93, 189, 190, 94, 593, 594, 191,
	192, 193, 595, 194, 596, 321, 597, 95, 96, 97,
	0, 98, 598, 99, 599, 322, 100, 101, 600, 601,
	602, 603, 604, 605, 102, 103, 104, 105, 195, 106,
	196, 197, 606, 607, 107, 608, 609, 610, 108, 109,
	611, 612, 0, 613, 198, 110, 199, 614, 615, 111,
	112, 200, 113, 616, 0, 617, 618, 323, 619, 114,
	201, 620, 202, 621, 115, 116, 203, 204, 622, 623,
	117, 624, 324, 118, 205, 206, 207, 625, 208, 626,
	325, 119, 326, 120, 121, 627, 628, 209, 327, 122,
	328, 629, 123, 630, 631, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 632, 133, 633,
	210, 134, 211, 135, 136, 634, 635, 636, 637, 638,
	137, 212, 330, 138, 331, 213, 139, 140, 639, 214,
	141, 215, 640, 142, 143, 144, 216, 145, 146, 641,
	148, 149, 147, 150, 642, 151, 332, 152, 153, 217,
	154, 0, 238, 155, 156, 643, 157, 158, 644, 159,
	160, 333, 161, 218, 162, 645, 163, 164, 166, 219,
	165, 220, 646, 647, 167, 168, 648, 221, 222, 649,
	650, 169, 223, 224, 651, 170, 171, 172, 173, 652,
	653, 174, 175, 654, 655, 176, 177, 178, 225, 226,
	656, 179, 657, 658, 659, 660, 180, 181, 182, 183,
	435, 423, 424, 425, 422, 411, 0, 0, 0, 0,
	0, 0, 87, 88, 987, 89, 0, 0, 0, 0,
	417, 0, 0, 0, 90, 91, 184, 464, 465, 92,
	466, 467, 0, 93, 189, 190, 94, 432, 450, 468,
	469, 193, 0, 460, 0, 443, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 444,
	446, 0, 445, 447, 102, 103, 104, 105, 470, 106,
	471, 472, 0, 0, 107, 0, 988, 0, 463, 109,
	0, 0, 0, 0, 416, 110, 451, 430, 0, 111,
	112, 473, 113, 0, 0, 0, 0, 323, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 324, 118, 474, 475, 476, 0, 442, 0,
	325, 119, 326, 120, 121, 0, 0, 462, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 406, 133, 431,
	458, 134, 477, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 452, 139, 140, 0, 453,
	141, 215, 0, 142, 143, 144, 478, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 420,
	154, 0, 238, 155, 156, 0, 157, 158, 448, 159,
	160, 333, 161, 479, 162, 0, 163, 164, 166, 219,
	165, 454, 0, 0, 167, 168, 0, 221, 480, 0,
	0, 169, 455, 456, 429, 170, 171, 172, 173, 0,
	0, 174, 175, 449, 0, 176, 177, 178, 225, 481,
	986, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	407, 0, 435, 423, 424, 425, 422, 411, 0, 0,
	403, 404, 989, 0, 87, 88, 405, 89, 0, 412,
	984, 0, 417, 0, 0, 0, 90, 91, 184, 464,
	465, 92, 466, 467, 0, 93, 189, 190, 94, 432,
	450, 468, 469, 193, 0, 460, 0, 443, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 101,
	0, 444, 446, 0, 445, 447, 102, 103, 104, 105,
	470, 106, 471, 472, 502, 0, 107, 0, 0, 0,
	463, 109, 0, 0, 0, 0, 416, 110, 451, 430,
	0, 111, 112, 473, 113, 0, 0, 0, 0, 323,
	0, 114, 461, 0, 202, 0, 115, 116, 457, 459,
	0, 0, 117, 0, 324, 118, 474, 475, 476, 0,
	442, 0, 325, 119, 326, 120, 121, 0, 0, 462,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 406,
	133, 431, 458, 134, 477, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 452, 139, 140,
	0, 453, 141, 215, 0, 142, 143, 144, 478, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 420, 154, 0, 238, 155, 156, 49, 157, 158,
	448, 159, 160, 333, 161, 479, 162, 0, 163, 164,
	166, 219, 165, 454, 0, 51, 167, 168, 0, 221,
	480, 0, 0, 169, 455, 456, 429, 170, 171, 172,
	173, 0, 0, 174, 175, 449, 0, 176, 177, 178,
	320, 481, 0, 179, 0, 0, 0, 47, 180, 181,
	182, 183, 407, 48, 435, 423, 424, 425, 422, 411,
	0, 0, 403, 404, 0, 0, 87, 88, 405, 89,
	0, 412, 0, 0, 417, 0, 0, 0, 90, 91,
	184, 464, 465, 92, 466, 467, 0, 93, 189, 190,
	94, 432, 450, 468, 469, 193, 0, 460, 0, 443,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 444, 446, 0, 445, 447, 102, 103,
	104, 105, 470, 106, 471, 472, 0, 0, 107, 0,
	0, 0, 463, 109, 0, 0, 0, 0, 416, 110,
	451, 430, 0, 111, 112, 473, 113, 0, 0, 0,
	0, 323, 0, 114, 461, 0, 202, 0, 115, 116,
	457, 459, 0, 0, 117, 0, 324, 118, 474, 475,
	476, 0, 442, 0, 325, 119, 326, 120, 121, 0,
	0, 462, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 406, 133, 431, 458, 134, 477, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 452,
	139, 140, 0, 453, 141, 215, 0, 142, 143, 144,
	478, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 420, 154, 0, 238, 155, 156, 49,
	157, 158, 448, 159, 160, 333, 161, 479, 162, 0,
	163, 164, 166, 219, 165, 454, 0, 51, 167, 168,
	0, 221, 480, 0, 0, 169, 455, 456, 429, 170,
	171, 172, 173, 0, 0, 174, 175, 449, 0, 176,
	177, 178, 320, 481, 0, 179, 0, 0, 0, 47,
	180, 181, 182, 183, 407, 48, 435, 423, 424, 425,
	422, 411, 0, 0, 403, 404, 0, 0, 87, 88,
	405, 89, 0, 412, 0, 0, 417, 0, 0, 0,
	90, 91, 184, 464, 465, 92, 466, 467, 1032, 93,
	189, 190, 94, 432, 450, 468, 469, 193, 0, 460,
	0, 443, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 444, 446, 0, 445, 447,
	102, 103, 104, 105, 470, 106, 471, 472, 0, 0,
	107, 0, 0, 0, 463, 109, 0, 0, 0, 0,
	416, 110, 451, 430, 0, 111, 112, 473, 113, 0,
	0, 0, 1037, 323, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 324, 118,
	474, 475, 476, 0, 442, 0, 325, 119, 326, 120,
	121, 0, 1033, 462, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 406, 133, 431, 458, 134, 477, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 452, 139, 140, 0, 453, 141, 215, 0, 142,
	143, 144, 478, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 420, 154, 0, 238, 155,
	156, 0, 157, 158, 448, 159, 160, 333, 161, 479,
	162, 0, 163, 164, 166, 219, 165, 454, 0, 0,
	167, 168, 0, 221, 480, 0, 1034, 169, 455, 456,
	429, 170, 171, 172, 173, 0, 0, 174, 175, 449,
	0, 176, 177, 178, 225, 481, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 407, 0, 435, 423,
	424, 425, 422, 411, 0, 0, 403, 404, 0, 0,
	87, 88, 405, 89, 0, 412, 0, 0, 417, 0,
	0, 0, 90, 91, 184, 464, 465, 92, 466, 467,
	0, 93, 189, 190, 94, 432, 450, 468, 469, 193,
	0, 460, 0, 443, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 444, 446, 0,
	445, 447, 102, 103, 104, 105, 470, 106, 471, 472,
	0, 0, 107, 0, 0, 0, 463, 109, 0, 0,
	0, 0, 416, 110, 451, 430, 0, 111, 112, 473,
	113, 0, 0, 0, 0, 323, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	324, 118, 474, 475, 476, 0, 442, 0, 325, 119,
	326, 120, 121, 0, 0, 462, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 406, 133, 431, 458, 134,
	477, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 452, 139, 140, 0, 453, 141, 215,
	0, 142, 143, 144, 478, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 420, 154, 0,
	238, 155, 156, 0, 157, 158, 448, 159, 160, 333,
	161, 479, 162, 0, 163, 164, 166, 219, 165, 454,
	0, 0, 167, 168, 0, 221, 480, 0, 0, 169,
	455, 456, 429, 170, 171, 172, 173, 0, 0, 174,
	175, 449, 0, 176, 177, 178, 225, 481, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 407, 0,
	435, 423, 424, 425, 422, 411, 0, 0, 403, 404,
	0, 0, 87, 88, 405, 89, 0, 412, 1379, 0,
	417, 0, 0, 0, 90, 91, 184, 464, 465, 92,
	466, 467, 0, 93, 189, 190, 94, 432, 450, 468,
	469, 193, 0, 460, 0, 443, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 444,
	446, 0, 445, 447, 102, 103, 104, 105, 470, 106,
	471, 472, 0, 0, 107, 0, 0, 0, 463, 109,
	0, 0, 0, 0, 416, 110, 451, 430, 0, 111,
	112, 473, 113, 0, 0, 0, 0, 323, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 324, 118, 474, 475, 476, 0, 442, 0,
	325, 119, 326, 120, 121, 0, 0, 462, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 406, 133, 431,
	458, 134, 477, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 452, 139, 140, 0, 453,
	141, 215, 0, 142, 143, 144, 478, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 420,
	154, 0, 238, 155, 156, 0, 157, 158, 448, 159,
	160, 333, 161, 479, 162, 0, 163, 164, 166, 219,
	165, 454, 0, 0, 167, 168, 0, 221, 480, 0,
	0, 169, 455, 456, 429, 170, 171, 172, 173, 0,
	0, 174, 175, 449, 0, 176, 177, 178, 225, 481,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	407, 0, 435, 423, 424, 425, 422, 411, 0, 0,
	403, 404, 0, 0, 87, 88, 405, 89, 0, 412,
	1322, 0, 417, 0, 0, 0, 90, 91, 184, 464,
	465, 92, 466, 467, 0, 93, 189, 190, 94, 432,
	450, 468, 469, 193, 0, 460, 0, 443, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 101,
	0, 444, 446, 0, 445, 447, 102, 103, 104, 105,
	470, 106, 471, 472, 0, 0, 107, 0, 0, 0,
	463, 109, 0, 0, 0, 0, 416, 110, 451, 430,
	0, 111, 112, 473, 113, 0, 0, 0, 0, 323,
	0, 114, 461, 0, 202, 0, 115, 116, 457, 459,
	0, 0, 117, 0, 324, 118, 474, 475, 476, 0,
	442, 0, 325, 119, 326, 120, 121, 0, 0, 462,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 406,
	133, 431, 458, 134, 477, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 452, 139, 140,
	0, 453, 141, 215, 0, 142, 143, 144, 478, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 420, 154, 0, 238, 155, 156, 0, 157, 158,
	448, 159, 160, 333, 161, 479, 162, 0, 163, 164,
	166, 219, 165, 454, 0, 0, 167, 168, 0, 221,
	480, 0, 0, 169, 455, 456, 429, 170, 171, 172,
	173, 0, 0, 174, 175, 449, 0, 176, 177, 178,
	225, 481, 0, 179, 0, 0, 0, 0, 180, 181,
	182, 183, 407, 0, 435, 423, 424, 425, 422, 411,
	0, 0, 403, 404, 0, 0, 87, 88, 405, 89,
	0, 412, 983, 0, 417, 0, 0, 0, 90, 91,
	184, 464, 465, 92, 466, 467, 0, 93, 189, 190,
	94, 432, 450, 468, 469, 193, 0, 460, 0, 443,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 444, 446, 0, 445, 447, 102, 103,
	104, 105, 470, 106, 471, 472, 0, 0, 107, 0,
	0, 0, 463, 109, 0, 0, 0, 0, 416, 110,
	451, 430, 0, 111, 112, 473, 113, 0, 0, 0,
	0, 323, 0, 114, 461, 0, 202, 0, 115, 116,
	457, 459, 0, 0, 117, 0, 324, 118, 474, 475,
	476, 0, 442, 0, 325, 119, 326, 120, 121, 0,
	0, 462, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 406, 133, 431, 458, 134, 477, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 452,
	139, 140, 0, 453, 141, 215, 0, 142, 143, 144,
	478, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 420, 154, 0, 238, 155, 156, 0,
	157, 158, 448, 159, 160, 333, 161, 479, 162, 0,
	163, 164, 166, 219, 165, 454, 0, 0, 167, 168,
	0, 221, 480, 0, 0, 169, 455, 456, 429, 170,
	171, 172, 173, 0, 0, 174, 175, 449, 0, 176,
	177, 178, 225, 481, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 407, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 404, 0, 0, 0, 0,
	405, 745, 979, 412, 435, 423, 424, 425, 422, 411,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 0, 417, 0, 0, 0, 90, 91,
	184, 464, 465, 92, 466, 467, 0, 93, 189, 190,
	94, 432, 450, 468, 469, 193, 0, 460, 0, 443,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 101, 0, 444, 446, 0, 445, 447, 102, 103,
	104, 105, 470, 106, 471, 472, 0, 0, 107, 0,
	0, 0, 463, 109, 0, 0, 0, 0, 416, 110,
	451, 430, 0, 111, 112, 473, 113, 0, 0, 0,
	0, 323, 0, 114, 461, 0, 202, 0, 115, 116,
	457, 459, 0, 0, 117, 0, 324, 118, 474, 475,
	476, 0, 442, 0, 325, 119, 326, 120, 121, 0,
	0, 462, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 406, 133, 431, 458, 134, 477, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 452,
	139, 140, 0, 453, 141, 215, 0, 142, 143, 144,
	478, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 420, 154, 0, 238, 155, 156, 0,
	157, 158, 448, 159, 160, 333, 161, 479, 162, 0,
	163, 164, 166, 219, 165, 454, 0, 0, 167, 168,
	0, 221, 480, 0, 0, 169, 455, 456, 429, 170,
	171, 172, 173, 0, 0, 174, 175, 449, 0, 176,
	177, 178, 225, 481, 1328, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 407, 0, 435, 423, 424, 425,
	422, 411, 0, 0, 403, 404, 0, 0, 87, 88,
	405, 89, 0, 412, 0, 0, 417, 0, 0, 0,
	90, 91, 184, 464, 465, 92, 466, 467, 0, 93,
	189, 190, 94, 432, 450, 468, 469, 193, 0, 460,
	0, 443, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 444, 446, 0, 445, 447,
	102, 103, 104, 105, 470, 106, 471, 472, 502, 0,
	107, 0, 0, 0, 463, 109, 0, 0, 0, 0,
	416, 110, 451, 430, 0, 111, 112, 473, 113, 0,
	0, 0, 0, 323, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 324, 118,
	474, 475, 476, 0, 442, 0, 325, 119, 326, 120,
	121, 0, 0, 462, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 406, 133, 431, 458, 134, 477, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 452, 139, 140, 0, 453, 141, 215, 0, 142,
	143, 144, 478, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 420, 154, 0, 238, 155,
	156, 0, 157, 158, 448, 159, 160, 333, 161, 479,
	162, 0, 163, 164, 166, 219, 165, 454, 0, 0,
	167, 168, 0, 221, 480, 0, 0, 169, 455, 456,
	429, 170, 171, 172, 173, 0, 0, 174, 175, 449,
	0, 176, 177, 178, 225, 481, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 407, 0, 435, 423,
	424, 425, 422, 411, 0, 0, 403, 404, 0, 0,
	87, 88, 405, 89, 0, 412, 0, 0, 417, 0,
	0, 0, 90, 91, 184, 464, 465, 92, 466, 467,
	0, 93, 189, 190, 94, 432, 450, 468, 469, 193,
	0, 460, 0, 443, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 444, 446, 0,
	445, 447, 102, 103, 104, 105, 470, 106, 471, 472,
	0, 0, 107, 0, 0, 0, 463, 109, 0, 0,
	0, 0, 416, 110, 451, 430, 0, 111, 112, 473,
	113, 0, 0, 0, 0, 323, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	324, 118, 474, 475, 476, 0, 442, 0, 325, 119,
	326, 120, 121, 0, 0, 462, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 406, 133, 431, 458, 134,
	477, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 452, 139, 140, 0, 453, 141, 215,
	0, 142, 143, 144, 478, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 420, 154, 0,
	238, 155, 156, 0, 157, 158, 448, 159, 160, 333,
	161, 479, 162, 0, 163, 164, 166, 219, 165, 454,
	0, 0, 167, 168, 0, 221, 480, 0, 0, 169,
	455, 456, 429, 170, 171, 172, 173, 0, 0, 174,
	175, 449, 0, 176, 177, 178, 225, 481, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 407, 0,
	435, 423, 424, 425, 422, 411, 0, 0, 403, 404,
	401, 0, 87, 88, 405, 89, 0, 412, 0, 0,
	417, 0, 0, 0, 90, 91, 184, 464, 465, 92,
	466, 467, 0, 93, 189, 190, 94, 432, 450, 468,
	469, 193, 0, 460, 0, 443, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 444,
	446, 0, 445, 447, 102, 103, 104, 105, 470, 106,
	471, 472, 0, 0, 107, 0, 0, 0, 463, 109,
	0, 0, 0, 0, 416, 110, 451, 430, 0, 111,
	112, 473, 113, 0, 0, 0, 1037, 323, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 324, 118, 474, 475, 476, 0, 442, 0,
	325, 119, 326, 120, 121, 0, 0, 462, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 406, 133, 431,
	458, 134, 477, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 452, 139, 140, 0, 453,
	141, 215, 0, 142, 143, 144, 478, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 420,
	154, 0, 238, 155, 156, 0, 157, 158, 448, 159,
	160, 333, 161, 479, 162, 0, 163, 164, 166, 219,
	165, 454, 0, 0, 167, 168, 0, 221, 480, 0,
	0, 169, 455, 456, 429, 170, 171, 172, 173, 0,
	0, 174, 175, 449, 0, 176, 177, 178, 225, 481,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 404, 0, 0, 0, 0, 405, 0, 0, 412,
	435, 423, 424, 425, 422, 411, 0, 0, 0, 0,
	0, 0, 87, 88, 686, 89, 0, 0, 0, 0,
	417, 0, 0, 0, 90, 91, 184, 464, 465, 92,
	466, 467, 0, 93, 189, 190, 94, 432, 450, 468,
	469, 193, 0, 460, 0, 443, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 444,
	446, 0, 445, 447, 102, 103, 104, 105, 470, 106,
	471, 472, 0, 0, 107, 0, 0, 0, 463, 109,
	0, 0, 0, 0, 416, 110, 451, 430, 0, 111,
	112, 473, 113, 0, 0, 0, 0, 323, 0, 114,
	461, 0, 202, 0, 115, 116, 457, 459, 0, 0,
	117, 0, 324, 118, 474, 475, 476, 0, 442, 0,
	325, 119, 326, 120, 121, 0, 0, 462, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 406, 133, 431,
	458, 134, 477, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 452, 139, 140, 0, 453,
	141, 215, 0, 142, 143, 144, 478, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 420,
	154, 0, 238, 155, 156, 0, 157, 158, 448, 159,
	160, 333, 161, 479, 162, 0, 163, 164, 166, 219,
	165, 454, 0, 0, 167, 168, 0, 221, 480, 0,
	0, 169, 455, 456, 429, 170, 171, 172, 173, 0,
	0, 174, 175, 449, 0, 176, 177, 178, 225, 481,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	407, 0, 435, 423, 424, 425, 422, 411, 0, 0,
	403, 404, 0, 0, 87, 88, 405, 89, 0, 412,
	0, 0, 417, 0, 0, 0, 90, 91, 184, 464,
	465, 92, 466, 467, 0, 93, 189, 190, 94, 432,
	450, 468, 469, 193, 0, 460, 0, 443, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 322, 100, 1654,
	0, 444, 446, 0, 445, 447, 102, 103, 104, 105,
	470, 106, 471, 472, 0, 0, 107, 0, 0, 0,
	463, 109, 0, 0, 0, 0, 416, 110, 451, 430,
	0, 111, 112, 473, 113, 0, 0, 0, 0, 323,
	0, 114, 461, 0, 202, 0, 115, 116, 457, 459,
	0, 0, 117, 0, 324, 118, 474, 475, 476, 0,
	442, 0, 325, 119, 326, 120, 121, 0, 0, 462,
	327, 122, 328, 0, 123, 0, 0, 124, 0, 125,
	126, 127, 128, 129, 329, 130, 131, 0, 132, 406,
	133, 431, 458, 134, 477, 135, 136, 0, 0, 0,
	0, 0, 137, 212, 330, 138, 331, 452, 139, 140,
	0, 453, 141, 215, 0, 142, 143, 144, 478, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 332, 152,
	153, 420, 154, 0, 238, 155, 156, 0, 157, 158,
	448, 159, 160, 333, 161, 479, 162, 0, 163, 164,
	166, 219, 165, 454, 0, 0, 167, 168, 0, 221,
	480, 0, 0, 169, 455, 456, 429, 170, 171, 1653,
	173, 0, 0, 174, 175, 449, 0, 176, 177, 178,
	225, 481, 0, 179, 0, 0, 0, 0, 180, 181,
	182, 183, 407, 0, 435, 423, 424, 425, 422, 411,
	0, 0, 403, 404, 0, 0, 87, 88, 405, 89,
	0, 412, 0, 0, 417, 0, 0, 0, 90, 91,
	1652, 464, 465, 92, 466, 467, 0, 93, 189, 190,
	94, 432, 450, 468, 469, 193, 0, 460, 0, 443,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 322,
	100, 1654, 0, 444, 446, 0, 445, 447, 102, 103,
	104, 105, 470, 106, 471, 472, 0, 0, 107, 0,
	0, 0, 463, 109, 0, 0, 0, 0, 416, 110,
	451, 430, 0, 111, 112, 473, 113, 0, 0, 0,
	0, 323, 0, 114, 461, 0, 202, 0, 115, 116,
	457, 459, 0, 0, 117, 0, 324, 118, 474, 475,
	476, 0, 442, 0, 325, 119, 326, 120, 121, 0,
	0, 462, 327, 122, 328, 0, 123, 0, 0, 124,
	0, 125, 126, 127, 128, 129, 329, 130, 131, 0,
	132, 406, 133, 431, 458, 134, 477, 135, 136, 0,
	0, 0, 0, 0, 137, 212, 330, 138, 331, 452,
	139, 140, 0, 453, 141, 215, 0, 142, 143, 144,
	478, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	332, 152, 153, 420, 154, 0, 238, 155, 156, 0,
	157, 158, 448, 159, 160, 333, 161, 479, 162, 0,
	163, 164, 166, 219, 165, 454, 0, 0, 167, 168,
	0, 221, 480, 0, 0, 169, 455, 456, 429, 170,
	171, 1653, 173, 0, 0, 174, 175, 449, 0, 176,
	177, 178, 225, 481, 0, 179, 0, 0, 0, 0,
	180, 181, 182, 183, 407, 0, 435, 423, 424, 425,
	422, 411, 0, 0, 403, 404, 0, 0, 87, 88,
	405, 89, 0, 412, 0, 0, 417, 0, 0, 0,
	90, 91, 184, 464, 465, 92, 466, 467, 0, 93,
	189, 190, 94, 432, 450, 468, 469, 193, 0, 460,
	0, 443, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 322, 100, 101, 0, 444, 446, 0, 445, 447,
	102, 103, 104, 105, 470, 106, 471, 472, 0, 0,
	107, 0, 0, 0, 463, 109, 0, 0, 0, 0,
	416, 110, 451, 430, 0, 111, 112, 473, 113, 0,
	0, 0, 0, 323, 0, 114, 461, 0, 202, 0,
	115, 116, 457, 459, 0, 0, 117, 0, 324, 118,
	474, 475, 476, 0, 442, 0, 325, 119, 326, 120,
	121, 0, 0, 462, 327, 122, 328, 0, 123, 0,
	0, 124, 0, 125, 126, 127, 128, 129, 329, 130,
	131, 0, 132, 406, 133, 431, 458, 134, 477, 135,
	136, 0, 0, 0, 0, 0, 137, 212, 330, 138,
	331, 452, 139, 140, 0, 453, 141, 215, 0, 142,
	143, 144, 478, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 332, 152, 153, 420, 154, 0, 238, 155,
	156, 0, 157, 158, 448, 159, 160, 333, 161, 479,
	162, 0, 163, 164, 166, 219, 165, 454, 0, 0,
	167, 168, 0, 221, 480, 0, 0, 169, 455, 456,
	429, 170, 171, 172, 173, 0, 0, 174, 175, 449,
	0, 176, 177, 178, 225, 481, 0, 179, 0, 0,
	0, 0, 180, 181, 182, 183, 407, 0, 435, 423,
	424, 425, 422, 411, 0, 0, 403, 404, 0, 0,
	87, 88, 405, 89, 0, 412, 0, 0, 417, 0,
	0, 0, 90, 91, 184, 464, 465, 92, 466, 467,
	0, 93, 189, 190, 94, 432, 450, 468, 469, 193,
	0, 460, 0, 443, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 444, 446, 0,
	445, 447, 102, 103, 104, 105, 470, 106, 471, 472,
	0, 0, 107, 0, 0, 0, 463, 109, 0, 0,
	0, 0, 416, 110, 451, 430, 0, 111, 112, 473,
	113, 0, 0, 0, 0, 323, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	324, 118, 474, 475, 476, 0, 442, 0, 325, 119,
	326, 120, 121, 0, 0, 462, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 0, 133, 431, 458, 134,
	477, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 452, 139, 140, 0, 453, 141, 215,
	0, 142, 143, 144, 478, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 1027, 154, 0,
	238, 155, 156, 0, 157, 158, 448, 159, 160, 333,
	161, 479, 162, 0, 163, 164, 166, 219, 165, 454,
	0, 0, 167, 168, 0, 221, 480, 0, 0, 169,
	455, 456, 429, 170, 171, 172, 173, 0, 0, 174,
	175, 449, 0, 176, 177, 178, 225, 481, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 435, 423,
	424, 425, 422, 411, 0, 0, 0, 0, 1023, 1024,
	87, 88, 0, 89, 1025, 0, 0, 1026, 417, 0,
	0, 0, 90, 91, 0, 464, 465, 92, 466, 467,
	0, 93, 189, 190, 94, 432, 450, 468, 469, 193,
	0, 460, 0, 443, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 1654, 0, 444, 446, 0,
	445, 447, 102, 103, 104, 105, 470, 106, 471, 472,
	0, 0, 107, 0, 0, 0, 463, 109, 0, 0,
	0, 0, 416, 110, 451, 430, 0, 111, 112, 473,
	113, 0, 0, 0, 0, 323, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	324, 118, 474, 475, 476, 0, 442, 0, 0, 119,
	326, 120, 121, 0, 0, 462, 327, 122, 0, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 406, 133, 431, 458, 134,
	477, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 452, 139, 140, 0, 453, 141, 215,
	0, 142, 143, 144, 478, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 420, 154, 0,
	238, 155, 156, 0, 157, 158, 448, 159, 160, 0,
	161, 479, 162, 0, 163, 164, 166, 219, 165, 454,
	0, 0, 167, 168, 0, 221, 480, 0, 0, 169,
	455, 456, 429, 170, 171, 1653, 173, 0, 0, 174,
	175, 449, 0, 176, 177, 178, 225, 481, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 404,
	87, 88, 0, 89, 405, 0, 0, 412, 0, 0,
	0, 0, 90, 91, 184, 185, 186, 92, 187, 188,
	0, 93, 189, 190, 94, 0, 450, 191, 192, 193,
	0, 460, 0, 443, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 444, 446, 0,
	445, 447, 102, 103, 104, 105, 195, 106, 196, 197,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 198, 110, 451, 0, 0, 111, 112, 200,
	113, 0, 0, 0, 0, 323, 0, 114, 461, 0,
	202, 0, 115, 116, 457, 459, 0, 0, 117, 0,
	324, 118, 205, 206, 207, 0, 208, 0, 325, 119,
	326, 120, 121, 0, 0, 462, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 0, 133, 0, 458, 134,
	211, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 452, 139, 140, 0, 453, 141, 215,
	0, 142, 143, 144, 216, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 217, 154, 0,
	238, 155, 156, 0, 157, 158, 448, 159, 160, 333,
	161, 218, 162, 0, 163, 164, 166, 219, 165, 454,
	0, 0, 167, 168, 0, 221, 222, 0, 0, 169,
	455, 456, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 449, 0, 176, 177, 178, 225, 226, 0, 179,
	0, 0, 0, 0, 180, 181, 182, 183, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 1438, 0, 0,
	0, 0, 90, 91, 184, 185, 186, 92, 187, 188,
	0, 93, 189, 190, 94, 0, 0, 191, 192, 193,
	0, 194, 0, 321, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 322, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 195, 106, 196, 197,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 198, 110, 199, 0, 0, 111, 112, 200,
	113, 0, 0, 0, 0, 323, 0, 114, 201, 0,
	202, 0, 115, 116, 203, 204, 0, 0, 117, 0,
	324, 118, 205, 206, 207, 0, 208, 0, 325, 119,
	326, 120, 121, 0, 0, 209, 327, 122, 328, 0,
	123, 0, 0, 124, 0, 125, 126, 127, 128, 129,
	329, 130, 131, 0, 132, 0, 133, 0, 210, 134,
	211, 135, 136, 0, 0, 0, 0, 0, 137, 212,
	330, 138, 331, 213, 139, 140, 0, 214, 141, 215,
	0, 142, 143, 144, 216, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 332, 152, 153, 217, 154, 0,
	238, 155, 156, 49, 157, 158, 0, 159, 160, 333,
	161, 218, 162, 0, 163, 164, 166, 219, 165, 220,
	0, 51, 167, 168, 0, 221, 222, 0, 0, 169,
	223, 224, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 0, 0, 176, 177, 178, 320, 226, 0, 179,
	0, 0, 0, 47, 180, 181, 182, 183, 0, 48,
	316, 558, 562, 0, 563, 553, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 46, 0, 0,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 321, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 566, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 555, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 323, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 324, 118, 205, 206, 207, 0, 208, 0,
	325, 119, 326, 120, 121, 0, 0, 209, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 556, 0, 0, 0,
	137, 212, 330, 138, 331, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 333, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 554, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	316, 558, 562, 0, 563, 553, 0, 0, 0, 0,
	564, 559, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 321, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 549, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 555, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 323, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 324, 118, 205, 206, 207, 0, 208, 0,
	325, 119, 326, 120, 121, 0, 0, 209, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 556, 0, 0, 0,
	137, 212, 330, 138, 331, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 333, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 554, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	316, 558, 562, 0, 563, 553, 0, 0, 0, 0,
	564, 559, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 321, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 555, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 323, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 324, 118, 205, 206, 207, 0, 208, 0,
	325, 119, 326, 120, 121, 0, 0, 209, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 556, 0, 0, 0,
	137, 212, 330, 138, 331, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 333, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 554, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	84, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	564, 559, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 49, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 51, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 320, 226,
	0, 179, 0, 0, 0, 47, 180, 181, 182, 183,
	84, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 46,
	0, 1133, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	393, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 290, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 894,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 830,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 1346,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 492,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 534, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 533, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 537, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	316, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 537, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 321, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 322, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 323, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 324, 118, 205, 206, 207, 0, 208, 0,
	325, 119, 326, 120, 121, 0, 0, 209, 327, 122,
	328, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 329, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 330, 138, 331, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 332, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 333, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 804, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 802, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 807, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 871,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 806, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	872, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	84, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 804, 194, 0, 0, 799, 95, 96, 97,
	0, 98, 802, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 807, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 798, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 806, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	805, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	84, 179, 0, 0, 0, 0, 180, 181, 182, 183,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 1133, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 290, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 296, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 290, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 1071, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 1069, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 1060, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 678, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 82, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 520, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 0,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 378, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 375, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 339, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 235, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 234, 222, 0,
	0, 230, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 235, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 234, 222, 0,
	0, 230, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 311, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 308, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 306, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 299, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 279, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 228, 0, 0, 124, 0, 125, 126, 127,
	128, 235, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 140, 0, 214,
	141, 215, 0, 142, 143, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	154, 0, 238, 155, 156, 0, 157, 229, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 234, 222, 0,
	0, 230, 223, 224, 0, 170, 171, 172, 173, 0,
	84, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	0, 179, 87, 88, 0, 89, 180, 181, 182, 183,
	0, 0, 0, 0, 90, 91, 184, 185, 186, 92,
	187, 188, 0, 93, 189, 190, 94, 0, 0, 191,
	192, 193, 0, 194, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 195, 106,
	196, 197, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 198, 110, 199, 0, 0, 111,
	112, 200, 113, 0, 0, 0, 0, 0, 0, 114,
	201, 0, 202, 0, 115, 116, 203, 204, 0, 0,
	117, 0, 0, 118, 205, 206, 207, 0, 208, 0,
	0, 119, 0, 120, 121, 0, 0, 209, 0, 122,
	0, 0, 123, 0, 0, 124, 0, 125, 126, 127,
	128, 129, 0, 130, 131, 0, 132, 0, 133, 0,
	210, 134, 211, 135, 136, 0, 0, 0, 0, 0,
	137, 212, 0, 138, 0, 213, 139, 0, 0, 214,
	141, 215, 0, 142, 0, 144, 216, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 217,
	0, 0, 238, 155, 156, 0, 157, 158, 0, 159,
	160, 0, 161, 218, 162, 0, 163, 164, 166, 219,
	165, 220, 0, 0, 167, 168, 0, 221, 222, 0,
	0, 169, 223, 224, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 0, 0, 176, 177, 178, 225, 226,
	702, 179, 720, 721, 722, 0, 180, 181, 182, 183,
	0, 0, 723, 0, 0, 0, 0, 0, 704, 0,
	729, 0, 0, 0, 0, 702, 0, 720, 721, 722,
	0, 0, 0, 0, 0, 0, 0, 723, 703, 0,
	0, 0, 0, 704, 717, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 720, 721, 722, 0,
	0, 0, 0, 703, 0, 0, 723, 0, 0, 717,
	0, 0, 704, 0, 729, 0, 0, 0, 0, 702,
	0, 720, 721, 722, 0, 0, 0, 0, 0, 0,
	0, 723, 703, 0, 0, 0, 0, 704, 717, 729,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 703, 0, 0,
	0, 0, 0, 717, 725, 0, 0, 730, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 725,
	0, 0, 724, 0, 0, 718, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 725, 0,
	0, 730, 0, 0, 718, 719, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 725, 0, 0, 724, 0, 0, 718,
	719, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 726, 0, 714, 715, 716, 727,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 0, 0, 0, 719, 0, 0, 1236, 0, 726,
	0, 714, 715, 716, 727, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 0, 726, 0,
	714, 715, 716, 0, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 0, 0, 0, 0, 0, 1611, 0,
	0, 0, 0, 726, 0, 714, 715, 716, 0, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 702, 0,
	720, 721, 722, 1610, 0, 0, 0, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 704, 702, 729, 720,
	721, 722, 0, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 704, 703, 729, 0, 0,
	0, 0, 717, 0, 702, 0, 720, 721, 722, 0,
	0, 0, 0, 0, 0, 703, 723, 0, 0, 0,
	0, 717, 704, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 725, 0, 0, 0, 0, 0, 718, 0,
	0, 728, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 730, 718, 0, 0,
	724, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 724,
	0, 0, 0, 0, 718, 0, 0, 0, 0, 0,
	0, 0, 0, 719, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 724, 0, 0, 0,
	0, 0, 719, 702, 0, 720, 721, 722, 0, 0,
	0, 0, 727, 0, 0, 723, 0, 0, 0, 0,
	0, 704, 0, 729, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 727,
	0, 703, 726, 0, 714, 715, 716, 717, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 0, 0, 0,
	0, 726, 1593, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 0, 0,
	0, 1572, 0, 0, 0, 0, 0, 0, 726, 0,
	714, 715, 716, 0, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 0, 0, 730, 0, 0, 1567, 0,
	702, 0, 720, 721, 722, 0, 0, 728, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 725, 704, 0,
	729, 0, 0, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 717, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 720, 721, 722, 0,
	0, 0, 0, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 704, 0, 729, 0, 0, 702, 719, 720,
	721, 722, 0, 0, 0, 0, 0, 0, 727, 723,
	0, 0, 703, 0, 0, 704, 0, 729, 717, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 703, 0, 0, 0, 0,
	0, 717, 0, 0, 725, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 726, 0, 714,
	715, 716, 0, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 724, 0, 0, 0, 730, 1563, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 728, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 725, 730,
	0, 0, 0, 0, 718, 719, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 727, 0, 0, 0, 0,
	0, 725, 0, 0, 0, 0, 724, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 726, 0, 714, 715, 716, 727,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 0, 719, 0, 1502, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 702, 0, 720, 721, 722,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 0, 0, 704, 0, 729, 0, 0, 726, 0,
	714, 715, 716, 0, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 703, 0, 0, 0, 0, 1501, 717,
	0, 726, 0, 714, 715, 716, 0, 713, 710, 711,
	712, 705, 706, 707, 708, 709, 0, 0, 0, 0,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 702,
	0, 720, 721, 722, 0, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 0, 0, 0, 704, 0, 729,
	0, 0, 702, 0, 720, 721, 722, 730, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 703, 0, 728,
	704, 0, 729, 717, 0, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	703, 0, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 702, 0, 720, 721,
	722, 730, 0, 0, 0, 0, 0, 0, 723, 0,
	719, 0, 0, 728, 704, 0, 729, 0, 0, 0,
	727, 0, 0, 725, 730, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 703, 0, 728, 0, 0, 0,
	717, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 724, 718, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	0, 714, 715, 716, 724, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 719, 0, 0, 0, 1197, 1349,
	1213, 1214, 1215, 0, 727, 0, 0, 0, 730, 0,
	1470, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	728, 0, 0, 0, 0, 0, 0, 727, 0, 0,
	725, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 714, 715, 716, 724, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	0, 0, 0, 1324, 0, 0, 726, 0, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 719, 0, 0, 0, 702, 975, 720, 721, 722,
	0, 727, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 0, 1216, 704, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1211, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 714, 715, 716, 0, 713, 710, 711, 712,
	705, 706, 707, 708, 709, 0, 0, 0, 1395, 0,
	702, 0, 720, 721, 722, 0, 0, 0, 0, 0,
	0, 1671, 723, 1212, 0, 0, 0, 0, 704, 0,
	729, 0, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 728,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1207, 1208, 1209, 724, 1206, 1203,
	1204, 1205, 1198, 1199, 1200, 1201, 1202, 1227, 0, 1670,
	1226, 702, 0, 720, 721, 722, 0, 0, 0, 0,
	0, 0, 730, 723, 0, 0, 0, 882, 0, 704,
	719, 729, 0, 0, 728, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 725, 0, 0, 0, 0, 703,
	718, 0, 0, 0, 0, 717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 726,
	0, 714, 715, 716, 0, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 0, 719, 0, 0, 0, 0,
	0, 0, 732, 730, 0, 727, 0, 0, 702, 0,
	720, 721, 722, 0, 0, 728, 0, 0, 0, 0,
	723, 0, 0, 731, 0, 725, 704, 0, 729, 0,
	0, 718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 717, 724, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 719, 720, 721, 722,
	0, 0, 0, 0, 0, 0, 727, 723, 0, 0,
	0, 0, 0, 704, 0, 729, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 728, 703, 0, 0, 0, 0, 0, 717,
	0, 0, 725, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 726, 0, 714, 715, 716,
	0, 713, 710, 711, 712, 705, 706, 707, 708, 709,
	724, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 0, 720, 721, 722, 0, 0, 0, 0, 0,
	0, 0, 723, 0, 0, 0, 0, 730, 704, 0,
	729, 0, 0, 719, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 727, 0, 0, 0, 0, 703, 725,
	0, 0, 0, 0, 717, 718, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 724, 274, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 726, 0, 714, 715, 716, 0, 713, 710,
	711, 712, 705, 706, 707, 708, 709, 0, 0, 0,
	719, 0, 730, 0, 0, 0, 0, 0, 0, 702,
	727, 720, 721, 722, 728, 0, 0, 0, 0, 0,
	0, 723, 0, 0, 725, 0, 0, 704, 0, 729,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 0, 0,
	0, 0, 724, 717, 0, 0, 0, 0, 0, 726,
	0, 714, 715, 716, 0, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 719, 702, 0, 720, 721,
	722, 0, 0, 0, 0, 727, 0, 0, 723, 1233,
	0, 1228, 0, 0, 704, 0, 729, 0, 0, 0,
	1343, 730, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 728, 703, 0, 0, 0, 0, 0,
	717, 0, 0, 725, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 726, 0, 714, 715, 716, 0,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	0, 724, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 0, 720, 721, 722, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 0, 730, 0,
	0, 704, 0, 729, 719, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 727, 0, 0, 0, 0, 0,
	725, 703, 0, 0, 0, 0, 718, 717, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 714, 715, 716, 0, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	702, 719, 720, 721, 722, 730, 0, 0, 0, 0,
	0, 727, 723, 0, 0, 1190, 0, 728, 704, 0,
	729, 0, 0, 0, 0, 0, 0, 725, 0, 0,
	0, 0, 0, 718, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	726, 0, 714, 715, 716, 1195, 713, 710, 711, 712,
	705, 706, 707, 708, 709, 702, 0, 720, 721, 722,
	0, 0, 0, 0, 0, 0, 0, 723, 719, 0,
	0, 0, 0, 704, 0, 729, 0, 0, 727, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 728, 0, 0, 0, 0, 717,
	0, 0, 0, 0, 725, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 726, 0, 714,
	715, 716, 724, 713, 710, 711, 712, 705, 706, 707,
	708, 709, 702, 0, 720, 721, 722, 0, 0, 0,
	0, 0, 0, 0, 723, 0, 0, 730, 0, 0,
	704, 0, 729, 0, 0, 719, 0, 0, 0, 728,
	0, 0, 0, 0, 702, 727, 720, 721, 722, 725,
	703, 0, 0, 0, 0, 718, 717, 0, 0, 0,
	0, 0, 704, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 1197, 0, 1213, 1214, 1215, 724, 0, 0,
	0, 0, 703, 0, 1319, 0, 0, 1197, 717, 1213,
	1214, 1215, 0, 0, 726, 0, 714, 715, 716, 1318,
	713, 710, 711, 712, 705, 706, 707, 708, 709, 0,
	719, 0, 0, 0, 730, 0, 1210, 0, 0, 702,
	727, 720, 721, 722, 0, 0, 728, 0, 0, 0,
	0, 1210, 0, 0, 0, 0, 725, 704, 0, 729,
	0, 0, 718, 0, 0, 0, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 703, 728, 0,
	0, 0, 0, 717, 0, 0, 0, 0, 725, 726,
	0, 714, 715, 716, 718, 713, 710, 711, 712, 705,
	706, 707, 708, 709, 0, 0, 1216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 719, 0, 0,
	0, 1216, 1211, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 1197, 0, 1213, 1214, 1215, 727,
	0, 0, 0, 725, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 726, 1212, 714, 715,
	716, 0, 713, 710, 711, 712, 705, 706, 707, 708,
	709, 0, 1212, 0, 0, 0, 0, 0, 1210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 726, 0,
	714, 715, 716, 0, 713, 710, 711, 712, 705, 706,
	707, 708, 709, 0, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 727, 0, 0, 0, 1207, 1208,
	1209, 0, 1206, 1203, 1204, 1205, 1198, 1199, 1200, 1201,
	1202, 0, 0, 1207, 1208, 1209, 1217, 1206, 1203, 1204,
	1205, 1198, 1199, 1200, 1201, 1202, 0, 0, 1216, 911,
	926, 902, 919, 918, 0, 0, 904, 903, 0, 0,
	0, 928, 927, 726, 1211, 714, 715, 716, 0, 713,
	710, 711, 712, 705, 706, 707, 708, 709, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	924, 0, 916, 915, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 907, 908, 909, 0,
	575, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	1207, 1208, 1209, 0, 1206, 1203, 1204, 1205, 1198, 1199,
	1200, 1201, 1202, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 910, 0, 0, 0, 0,
	0, 906, 0, 0, 0, 0, 0, 905, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 929,
}
var sqlPact = [...]int{

	2655, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 729, -1000, -1000, -1000, 459, 590, 34, 1777, 1777,
	14456, -1000, -1000, 16986, 1976, 313, 315, 313, 313, 303,
	14456, 373, 595, 57, -1000, 617, -36, 16756, 13306, 1088,
	-14, 12846, 199, 2655, 13076, 13306, 16526, 938, 863, 12846,
	16296, 16066, 15836, -1000, 8954, -1000, -1000, -1000, -1000, 707,
	-1000, -15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	706, -1000, 13306, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15606, 15376,
	634, -1000, -1000, 436, 243, 1119, -1000, -4, -1000, -1000,
	-1000, 937, -1000, 696, 932, 926, 924, 922, 242, 659,
	-1000, 634, -1000, 634, -1000, -1000, -1000, 360, 14456, -1000,
	12846, -1000, 15146, 880, 14916, -1000, 617, -1000, -1000, -1000,
	698, 1072, 1072, 1072, 1118, 70, 67, 57, -20, 13306,
	-1000, 201, -20, 6674, 6674, -1000, -1000, 199, -1000, 216,
	11196, -7, -1000, 6422, -1000, 512, 988, 518, 516, 987,
	-109, 12846, 13306, 393, 14686, -1000, 986, 83, 982, -1000,
	-33, 980, -1000, -42, -1000, -1000, -1000, -1000, -1000, -1000,
	199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11446, 945, 11446, -1000, -1000, 1152,
	-1000, -1000, -16, -17, 779, 858, 9456, 9206, 1047, 673,
	-1000, -1000, -1000, -6, 3886, 13306, 947, 11446, 13306, 13306,
	13306, -1000, 13306, -1000, 778, -1000, -1000, -18, -19, -1000,
	14456, -1000, 88, -1000, 189, 739, 14226, -1000, 732, -1000,
	698, -1000, 689, 763, 7196, 7952, 57, -1000, -1000, 57,
	57, 7952, -1000, -1000, 13306, -20, 1148, 13306, 68, -1000,
	19008, -1000, -1000, 7952, 7952, 7952, 7952, 7952, 618, -1000,
	-1000, -1000, 4640, -1000, -1000, -7, 178, 202, -1000, -1000,
	173, -7, -1000, -1000, -1000, -1000, 172, 1223, 325, -1000,
	-1000, -1000, 7952, 106, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 944, 170, 159, -1000, -1000, -1000, -1000,
	156, 154, 152, 151, 147, 143, 142, 137, 130, 128,
	126, 125, 124, 599, -1000, 265, -1000, -1000, 265, 265,
	-1000, 105, 105, 108, -1000, -1000, -1000, 105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 120, 68, -1000,
	-1000, -1000, 13306, -7, -1000, -1000, -1000, 7952, 3635, -43,
	-1000, 19615, -1000, -41, 750, -1000, 12376, 1082, 1080, 1071,
	12846, 356, 354, 13306, 13306, 254, 56, 1135, 10696, -1000,
	13306, 13306, -1000, 13306, -1000, -1000, 13306, 13306, 13306, -36,
	11906, 349, -35, 11676, 13306, -1000, -9, -1000, -1000, 921,
	309, 577, 860, 662, -1000, -1000, -1000, -1000, -25, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1201,
	-1000, -1000, -1000, -1000, 1213, -25, -1000, -1000, -1000, -1000,
	-1000, 1219, -1000, -1000, -1000, -1000, 3886, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13306, -1000, -1000, -1000, -1000, -1000, -1000,
	577, 860, -1000, -1000, 12846, 12136, 979, 695, 731, -1000,
	978, -1000, -1000, -1000, -1000, 19615, -1000, 19615, 611, 868,
	-1000, 868, -31, -1000, 18901, -1000, 117, -51, -1000, 254,
	6674, 10446, 20018, 13306, 327, 7952, 7952, 7952, 7952, 7952,
	7952, 7952, 7952, 7952, 7952, 7952, 7952, 7952, 7952, 7952,
	7952, 7952, 7952, 7952, 7952, 7952, 835, 346, 969, 561,
	104, 3886, -1000, 1181, 1181, 1181, 19734, 19734, 150, -21,
	18472, -32, -7, -1000, -1000, 5900, 5648, -7, 4136, -1000,
	709, 1209, 261, 19615, 936, 900, 114, 66, 65, 7952,
	688, 7952, 8204, 7952, 7952, 4892, 7952, 7952, 7952, 7952,
	7952, 7952, -1000, 111, -1000, -1000, -1000, -1000, 1207, -1000,
	-1000, 1206, -1000, 1205, 254, 63, -1000, 2223, -1000, -1000,
	6422, -1000, 644, 13306, 13306, 13306, -1000, -1000, 727, 13996,
	-1000, 20018, 13306, -1000, 110, 109, 851, 793, 13306, 13306,
	13766, 13536, 13306, 499, 13306, 13306, 496, -1000, 452, 7952,
	693, -1000, 9946, 269, 13306, 59, -1000, -1000, -1000, 233,
	13306, -1000, -1000, -1000, 83, -1000, -33, -1000, -1000, 13306,
	11676, -35, -37, -1000, -1000, 13306, 860, -1000, -1000, -1000,
	467, -1000, 569, -1000, 9706, -1000, -1000, -1000, 709, -1000,
	-50, -1000, -1000, -1000, -1000, 61, -38, -1000, -1000, -1000,
	-1000, 13306, 212, 13306, 13306, 975, 13306, -1000, -1000, -1000,
	7952, -1000, -1000, -1000, -36, 13306, -1000, 893, -1000, -39,
	1292, -145, 12616, -1000, 3082, -1000, 1156, -1000, -1000, -1000,
	-1000, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 108, 599, 105, 105, 105, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 265, 265, 265, -1000,
	-1000, 241, 474, 474, 1151, 1151, 1151, 848, 848, 1743,
	469, 174, 174, 174, 1008, 402, 402, 174, 174, 174,
	19734, 19702, 193, 7952, 344, 560, 104, 7952, -1000, 744,
	-1000, -1000, -1000, 915, 103, 8204, 8204, -1000, -1000, -1000,
	4640, -1000, -1000, 102, 7952, -1000, 7952, -47, -48, -1000,
	19615, -1000, -57, -1000, -1000, -34, 7952, 7952, 7952, 60,
	-1000, 341, -1000, 340, 339, 337, -1000, 101, 58, 430,
	-1000, 7952, 629, 99, 98, 7952, -1000, -1000, 19540, 54,
	913, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 53, 19443,
	52, 19924, -1000, 8204, 8204, 8204, 4640, 97, 46, 18810,
	-102, 19356, 6926, 6926, 6926, 44, 19279, 7952, -102, 17475,
	17450, 2570, -59, -63, -65, 1204, -67, 43, 41, 893,
	-1000, -1000, 7952, -1000, -1000, -1000, 336, 334, 970, -1000,
	726, -1000, 651, 7952, 13306, 95, 94, 607, -1000, 966,
	775, 964, 775, -1000, -41, 530, -1000, -1000, 328, -1000,
	6674, 19615, 452, 1073, -69, -1000, -1000, -1000, 254, 10696,
	6422, -77, -1000, -50, -1000, -50, -1000, -1000, -1000, -1000,
	-1000, -1000, 13306, -1000, 12136, 93, 13306, 90, 89, 13306,
	-1000, -1000, 39, -1000, -1000, -1000, -1000, -1000, 889, 1117,
	10446, 854, 844, 10446, 929, 656, 656, 656, -1000, 12616,
	3371, -1000, -1000, 13306, 86, 10196, 38, 1292, 209, 207,
	-1000, 1203, 7952, 193, 7952, 8204, 8204, -1000, 193, -1000,
	-1000, -1000, -1000, 912, 85, 7952, 20018, 19777, 19762, -78,
	5396, -61, 18449, 7952, -1000, -1000, 202, -1000, 36, 6170,
	-1000, 19085, -10, -10, -1000, 737, 666, 507, 403, 1200,
	1218, 998, -1000, 7952, 19170, -1000, 10946, 259, 665, 18375,
	20018, -1000, 7952, -1000, 911, 7952, -1000, 20018, 8204, 8204,
	8204, 8204, 8204, 8204, 8204, 8204, 8204, 8204, 8204, 8204,
	8204, 8204, 8204, 8204, 8204, 8204, 843, 8204, 1180, 1180,
	1180, -76, 5144, -1000, 942, 911, 7952, 7952, 20018, 35,
	32, 28, -1000, 7952, -102, 7952, 7952, 7952, -1000, -1000,
	-1000, 26, -1000, 1199, -1000, -1000, 889, 18546, 13306, 13306,
	13306, 954, 895, -1000, 18177, -79, 13306, 13306, -1000, 749,
	899, 291, 13306, -1000, 13306, -1000, 13306, 13306, 13306, 13306,
	-86, -1000, 141, -36, 13306, 452, -1000, -1000, 231, -1000,
	-1000, 8704, 84, 12136, 8704, 685, -1000, 113, 7952, 7952,
	1292, 10446, 10446, 743, 808, 10446, -1000, -1000, -1000, -1000,
	-1000, -1000, 846, 82, 13306, 12616, 365, 1190, 23, 1141,
	193, 18638, 2729, 7952, 20018, 19809, -85, -1000, 7952, 7952,
	-1000, -87, -1000, 7952, -1000, 19615, -1000, 1217, 7952, 22,
	21, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18,
	-1000, -1000, 19615, 7952, -1000, -1000, 17216, 7952, 17, -1000,
	16, 19615, 942, 19615, -1000, 477, 477, 1180, 1180, 1180,
	379, 379, 421, 836, 390, 390, 390, 1792, 407, 407,
	390, 390, 390, 910, 807, 81, 2808, 7952, -91, -1000,
	-1000, -1000, 19615, 19615, 13, -1000, -1000, -1000, -102, 2402,
	18154, 18100, -1000, 7, 113, -1000, -1000, -1000, -1000, 13306,
	-1000, 13306, -1000, 13306, 721, -1000, -1000, 781, 80, 8204,
	13306, -1000, 625, -92, -101, 720, -1000, 719, 7952, -1000,
	20018, 775, 775, -1000, 326, 320, -1000, 1003, 8704, 1067,
	-1000, -1000, -1000, 79, -107, -1000, 200, 1083, 7952, -1000,
	-1000, 78, 8704, 5, -113, 13306, -1000, 13306, 19615, -102,
	-1000, 743, -1000, 77, 7952, 10446, -1000, -155, -1000, 230,
	-1000, -1000, -1000, 13306, -119, -1000, -1000, 205, 175, -1000,
	7952, 7952, 19809, -123, -1000, 20018, 193, 193, -1000, 17993,
	-1000, 19085, -1000, -1000, -1000, -1000, 19615, 612, -1000, 17834,
	-1000, -1000, -1000, 8204, 907, 76, 20018, 17807, -1000, -1000,
	7952, -1000, -1000, -1000, -1000, -1000, 1351, -1000, -1000, -1000,
	7952, 2808, 69, -1000, 75, -1000, -1000, -1000, 508, -1000,
	-1000, 19615, 1098, -1000, -1000, 13306, 13306, 375, -125, 13306,
	-1000, -1000, 4388, 625, 8704, 1062, -7, 13306, 1062, 17788,
	4136, -127, -1000, 625, 74, -100, -1000, 1134, -1000, 13306,
	19615, -1000, 846, -1000, 3886, -129, -1000, -1000, -1000, 193,
	193, -1000, -1000, -1000, 4, 665, 1110, -1000, 2104, 8204,
	20018, -133, -1000, 17529, -1000, 17504, 751, 13306, 13306, 13306,
	274, 13306, -1000, -1000, 391, -1000, 254, -1000, -1000, -1000,
	-1000, -1000, -1000, 1083, -34, 625, -1000, 8704, 13306, 73,
	-134, -1000, -1000, -1000, -1000, 620, 7952, 2104, -135, -1000,
	-1000, -1000, 672, 492, -139, -140, 69, -1000, 7952, -1000,
	10696, -1000, 1062, 3, -1000, -147, -1000, -1000, -1000, -2,
	7700, 7700, -102, -1000, -1000, 683, 680, 457, -1000, -1000,
	-1000, -1000, -1000, 751, 19615, -121, -1000, -1000, 625, -1000,
	-1000, -1000, 8454, 660, 440, 18735, -1000, -1000, 1027, -1000,
	277, 598, 598, 672, -1000, -1000, 1160, -1000, -1000, -1000,
	-1000, -1000, -1000, 1167, -1000, -1000, 812, -1000, -1000, 7448,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1445, 1442, 1140, 1441, 1440, 1437, 1436, 1434, 78,
	1431, 1428, 96, 1425, 74, 1423, 1422, 1421, 1420, 51,
	1415, 1414, 1411, 1410, 1409, 70, 54, 118, 1924, 113,
	1406, 1405, 1403, 10, 86, 80, 1400, 36, 85, 92,
	1509, 56, 1396, 105, 20, 12, 490, 81, 1395, 115,
	109, 1392, 1390, 1388, 34, 1384, 1380, 1376, 11, 37,
	13, 1375, 14, 77, 1372, 1366, 84, 1364, 73, 91,
	25, 93, 178, 1362, 53, 9, 49, 1360, 27, 1359,
	33, 60, 100, 1357, 35, 282, 48, 29, 44, 1355,
	1350, 1349, 1347, 61, 72, 41, 1341, 1340, 57, 1337,
	99, 103, 1336, 1333, 1331, 1330, 1327, 1326, 541, 1323,
	1317, 493, 3, 16, 45, 28, 94, 90, 30, 1316,
	15, 1315, 0, 499, 1016, 1312, 40, 38, 62, 39,
	43, 17, 1310, 87, 1309, 1307, 1306, 1298, 1297, 59,
	1296, 46, 114, 32, 42, 76, 24, 50, 65, 119,
	120, 89, 1295, 104, 1294, 52, 1293, 1292, 772, 66,
	1291, 1288, 1287, 684, 605, 575, 165, 1285, 1283, 322,
	188, 1282, 1280, 63, 1279, 1277, 117, 1265, 107, 26,
	1264, 101, 1261, 75, 1259, 558, 71, 47, 1258, 110,
	58, 1257, 1256, 1255, 22, 2, 8, 5, 6, 4,
	19, 18, 1254, 1253, 97, 67, 1252, 131, 1251, 1249,
	31, 1248, 1247, 23, 1246, 21, 1245, 7, 1, 1244,
	111, 1242, 69, 1241, 1158, 1240, 116, 1239, 1232, 1162,
	1231, 1230, 64,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 31, 31, 37, 37, 37, 36, 36, 32, 32,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 154, 154, 153, 13, 18, 220, 220, 220,
	224, 224, 225, 225, 226, 226, 226, 226, 226, 226,
	226, 222, 222, 21, 21, 21, 21, 108, 108, 110,
	110, 110, 110, 39, 107, 107, 107, 107, 109, 109,
	109, 109, 178, 176, 176, 183, 183, 183, 51, 51,
	51, 51, 51, 52, 52, 52, 175, 175, 175, 175,
	184, 184, 184, 184, 184, 184, 53, 53, 53, 182,
	182, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 177, 177, 221, 221, 223, 223,
	8, 8, 54, 54, 55, 55, 114, 114, 114, 113,
	192, 192, 193, 193, 193, 194, 194, 194, 194, 194,
	194, 194, 191, 191, 189, 189, 190, 190, 190, 190,
	227, 227, 112, 112, 58, 58, 197, 197, 197, 197,
	195, 195, 195, 195, 195, 198, 196, 199, 199, 199,
	199, 199, 142, 142, 142, 24, 7, 7, 97, 97,
	62, 62, 146, 146, 146, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 98,
	98, 99, 99, 16, 20, 23, 23, 23, 23, 23,
	229, 229, 42, 42, 42, 42, 43, 43, 111, 111,
	111, 111, 111, 38, 6, 6, 14, 48, 48, 104,
	104, 104, 106, 106, 106, 105, 105, 105, 84, 84,
	25, 75, 75, 76, 76, 152, 77, 77, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 205, 205, 205,
	207, 207, 204, 15, 15, 15, 15, 206, 206, 228,
	228, 85, 85, 85, 57, 56, 56, 60, 60, 59,
	61, 61, 145, 82, 82, 82, 82, 100, 101, 101,
	102, 102, 103, 103, 81, 81, 129, 129, 30, 30,
	66, 66, 67, 67, 230, 231, 120, 120, 121, 121,
	119, 119, 119, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 143, 143, 143, 143, 144, 144, 88,
	88, 88, 88, 86, 86, 87, 87, 149, 149, 149,
	149, 83, 83, 150, 150, 150, 115, 115, 155, 155,
	155, 65, 65, 65, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 157, 157, 157, 157, 159,
	159, 159, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 160, 160, 167, 167, 168,
	168, 169, 170, 161, 161, 162, 162, 163, 164, 171,
	171, 171, 173, 173, 165, 165, 166, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 95, 95, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 200, 200, 200, 200, 200, 200,
	200, 202, 202, 203, 203, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	208, 208, 209, 209, 210, 210, 211, 211, 213, 214,
	214, 214, 215, 219, 219, 212, 212, 216, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 133, 133, 133,
	134, 134, 135, 72, 72, 131, 131, 130, 130, 130,
	132, 132, 89, 172, 172, 172, 172, 172, 172, 172,
	90, 90, 96, 91, 91, 92, 92, 92, 92, 92,
	92, 126, 127, 93, 93, 93, 128, 128, 136, 140,
	140, 139, 138, 138, 137, 137, 118, 118, 118, 118,
	117, 116, 78, 78, 232, 232, 141, 141, 79, 79,
	80, 74, 74, 151, 151, 151, 151, 68, 68, 50,
	50, 69, 69, 46, 46, 49, 47, 47, 47, 47,
	63, 63, 64, 64, 44, 44, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 174, 174, 174,
	40, 40, 40, 41, 41, 180, 180, 180, 181, 181,
	181, 181, 179, 179, 179, 179, 179, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 1, 1, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 4, 5, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 1, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 2, 2, 1,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -206, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 229, 58, -205, -29, -27, 273, 249, 255, 199,
	-30, 217, 242, 276, 217, 70, 113, 78, 117, 236,
	70, 113, 217, -12, 273, -19, -14, -25, -9, -224,
	18, -225, -226, 58, 83, 102, 199, 117, 78, 236,
	-224, -43, 196, -40, 4, -185, -187, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 103, 108, 109, 114, 117, 125,
	127, 128, 133, 136, 139, 141, 142, 143, 144, 145,
	147, 148, 150, 152, 155, 157, 158, 164, 167, 170,
	171, 174, 177, 178, 179, 181, 182, 186, 184, 185,
	187, 189, 191, 192, 194, 197, 198, 200, 201, 203,
	204, 206, 208, 210, 211, 214, 212, 218, 219, 225,
	229, 230, 231, 232, 235, 236, 239, 240, 241, 245,
	250, 251, 252, 253, 30, 31, 32, 34, 35, 38,
	39, 43, 44, 45, 47, 72, 74, 75, 88, 90,
	95, 104, 106, 110, 111, 118, 119, 120, 122, 131,
	154, 156, 165, 169, 173, 175, 180, 193, 207, 213,
	215, 221, 222, 226, 227, 242, 243, -108, 136, 201,
	225, -109, -107, -178, 221, 145, -70, -40, 196, 4,
	70, 51, 71, 103, 113, 114, 128, 218, 221, 225,
	18, -229, 225, 225, -229, -229, -42, 225, 223, -43,
	-228, 217, 217, -97, 70, 234, -27, -29, -28, -59,
	-60, 233, 121, 87, 163, -26, -28, -205, -207, 181,
	-204, -40, -207, -56, -57, 18, 80, 277, -149, -46,
	161, -40, -80, 273, -3, -149, 110, -40, -49, 110,
	-46, 100, 123, -150, -149, -40, 110, -50, 110, -49,
	-71, 110, -70, -154, -153, -181, 4, -185, -187, -186,
	242, 49, 59, 101, 116, 124, 126, 132, 134, 146,
	166, 168, 190, 205, 160, 277, 160, -40, -108, 45,
	-108, -110, -38, -39, 125, 177, 223, 258, 100, 253,
	-53, 6, 76, -73, 275, 100, -221, 160, 100, 100,
	100, -177, 100, 253, 125, 177, -111, -38, -39, -111,
	223, -43, -83, -149, -70, 110, 113, -40, 110, -59,
	-60, -82, -100, -101, 135, 159, -85, 18, 80, -85,
	-85, 37, 274, 274, 277, -207, -64, 273, -74, -151,
	-122, 266, -124, 264, 265, 270, 151, 254, -133, -46,
	-125, 9, 273, -136, -202, -28, 88, 24, -134, -135,
	193, -40, 8, 5, 6, 7, -44, -157, -166, 228,
	91, 153, 41, -200, -201, 4, -185, -180, -158, -168,
	-162, -165, 122, 49, 63, 66, 64, 67, 202, 237,
	42, 90, 169, 173, 215, 226, 227, 110, 154, 111,
	47, 104, 131, 82, 31, 32, 34, 35, 43, 44,
	72, 74, 75, 95, 118, 119, 120, 156, 180, 207,
	222, 243, -186, -169, -170, -163, -164, -171, -74, -80,
	266, -46, 273, -78, -118, -117, -116, 271, 275, -79,
	-141, -122, 76, -35, 184, -34, 17, 19, 83, 240,
	88, 184, 184, 88, 278, -150, -48, -46, 203, -40,
	25, 88, -37, 277, 40, 187, 88, 277, 88, 274,
	277, -220, -69, 217, 70, -47, -40, 266, -226, -220,
	25, 277, 277, 133, -52, 139, 150, 108, -176, 76,
	-183, -175, -142, 9, 228, 91, 160, -182, 5, 265,
	-174, -181, 6, 8, 264, -176, 76, 61, -184, 6,
	4, -166, -142, 76, 136, 122, 275, -179, 4, -185,
	-187, -186, -188, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 36, 41, 42, 46, 48, 50, 56, 58,
	62, 63, 64, 65, 66, 67, 76, 77, 79, 80,
	81, 84, 85, 87, 91, 92, 97, 99, 100, 102,
	105, 107, 112, 113, 115, 121, 123, 129, 130, 135,
	137, 138, 151, 153, 159, 160, 161, 162, 163, 172,
	176, 183, 188, 199, 202, 209, 216, 217, 220, 223,
	224, 228, 233, 234, 237, 238, 244, 246, 247, 248,
	249, -178, -223, 97, -220, -178, -178, -178, -178, 133,
	277, 277, -43, -37, 277, 273, 151, -41, 110, -40,
	151, -82, -101, -100, -102, -122, 18, -122, -124, -27,
	-27, -27, -61, -145, -122, -204, 25, -63, -40, -66,
	277, 100, 10, 48, 28, 264, 265, 266, 267, 268,
	261, 262, 263, 260, 256, 257, 258, 54, 140, 195,
	12, 13, 14, 22, 162, 134, 254, 205, 124, 30,
	112, 25, 4, -122, -122, -122, -122, -122, 168, -28,
	-122, -72, -78, -28, -130, 271, 273, -78, 273, 6,
	6, 273, -137, -122, -208, 250, 97, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 175, -173, 245, -173, -173, -159, 273, -159,
	-160, 273, -159, 273, -66, -46, -118, -122, -179, 266,
	277, 274, 277, 223, -98, 56, 50, -113, 110, 50,
	-189, -40, 56, -190, 46, 234, 176, 99, -98, 56,
	-98, 56, 56, -149, 223, 223, -49, -40, -115, 247,
	-104, -19, 273, 76, 25, -75, -76, -152, -77, -46,
	273, -40, -40, -49, -50, -70, -71, -12, -153, 223,
	277, -69, -63, -117, -116, 100, 225, -39, -38, -51,
	179, 208, 185, 200, 277, 5, 8, 8, 6, -179,
	-222, -40, -39, -38, -149, -54, -55, -114, -113, -191,
	-189, 113, 234, 88, 160, 151, 88, -103, 193, 194,
	277, -33, 26, 79, 273, 277, 274, -115, -151, -67,
	-147, -149, -28, -148, 273, -155, -156, -158, -167, -161,
	-165, -166, 33, 39, 38, 219, 213, 118, 119, 120,
	207, 31, 180, 95, 82, 75, 74, 156, 35, 34,
	-169, -170, -163, -164, 72, 222, 32, 44, 43, 243,
	-70, 221, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, 134, 205, 30, 112, 223, 153, 151,
	228, 91, 235, 80, 157, -232, 216, 27, -128, -28,
	273, -179, -133, 193, 273, 274, 277, -72, -132, 272,
	-122, -130, -72, 274, 274, -72, 244, 18, 80, 266,
	-94, 252, 143, 73, 109, 142, -95, 198, 8, -140,
	-139, 246, -209, 93, 105, 273, 274, 274, -122, -89,
	-172, 4, 252, 143, 73, 109, 142, 198, -90, -122,
	-91, -123, -124, 264, 265, 270, 273, 193, -92, -122,
	-72, -122, 36, 130, 224, -93, -122, 100, -72, -122,
	-122, -122, -72, -72, -72, 273, 8, 8, 8, -115,
	274, 272, 281, -141, -34, -46, -40, -40, 151, -113,
	110, -155, -40, 273, 273, 127, 127, -40, -40, 110,
	-40, 110, -40, -40, -35, 184, -40, -40, 184, -84,
	188, -122, -106, 160, -68, -46, 242, -40, -66, 277,
	258, -68, -37, -222, -47, -222, -38, 232, 53, 179,
	-183, -94, 277, 274, 277, -41, 113, -70, -46, 88,
	-40, -145, -15, -19, -14, -25, -9, -40, -81, 105,
	277, 59, -88, 126, 146, 101, 132, 190, 116, -119,
	278, -144, -143, 25, -40, -28, -148, -147, -65, 24,
	-94, 273, 253, -122, 223, -232, 216, -128, -122, 153,
	228, 91, 235, 80, 157, 100, 273, -123, -123, -72,
	273, -72, -122, 277, 272, 272, 277, 274, -60, 277,
	-59, -122, -72, -72, 274, 223, 223, 223, 223, 273,
	274, -138, -139, 84, -122, -214, 167, 273, 273, -122,
	25, 274, 100, 274, -96, 172, 274, 10, 264, 265,
	266, 267, 268, 261, 262, 263, 260, 256, 257, 258,
	54, 140, 195, 12, 13, 14, 124, 112, -123, -123,
	-123, -72, 273, 274, -126, -127, 100, 97, 25, -93,
	-93, -93, 274, 100, -72, 277, 277, 277, 274, 274,
	274, 8, 274, 277, 274, 274, -81, -122, 223, 223,
	88, 151, -192, -190, -122, -63, 273, 273, -31, 83,
	203, -99, 88, -37, 88, -37, 223, -98, 56, 223,
	-74, -84, 55, 274, 277, -115, -76, -141, 274, -40,
	-114, 273, -41, 273, 273, -40, 274, -129, 107, 37,
	-147, 126, 126, -147, -88, 126, -86, 166, -86, -86,
	-144, -179, 279, -40, 273, 274, 271, 271, 8, -122,
	-122, -123, -123, 100, 273, -122, -131, -155, 22, 22,
	274, -72, 274, 277, 274, -122, -130, 274, 244, -60,
	-60, -60, 143, 109, 142, -95, 142, -95, -95, 8,
	6, 85, -122, 220, -215, -40, 273, 247, -59, 274,
	-155, -122, -126, -122, -155, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, 80, 151, 157, -123, 277, -72, 274,
	-127, -126, -122, -122, -155, 274, 274, 274, -72, -122,
	-122, -122, 274, 8, -129, 272, -40, -40, -113, 88,
	-193, 56, -194, 48, 151, 153, 234, 176, 46, 76,
	183, 274, 274, -63, -63, 151, 76, 151, 76, 69,
	230, -40, -40, -46, -40, -40, -40, -105, 273, 160,
	-19, -46, -84, 258, -62, -146, -40, -203, 273, -200,
	-201, -44, 273, -54, -62, 160, -210, 248, -122, -72,
	-147, -147, -87, 238, 160, 126, -147, -121, -120, -230,
	-231, 98, 149, 273, -63, -143, 272, 8, 8, 274,
	22, 22, -122, -131, 274, 277, -122, -122, 274, -122,
	6, -122, 274, 274, 274, 274, -122, -219, -40, -122,
	274, 274, -127, 100, 80, 157, 273, -122, 274, 274,
	277, 274, 274, 274, -210, -113, -40, -70, 153, 127,
	273, -123, -46, -112, -227, 57, 214, 274, 274, 153,
	153, -122, -155, -37, -37, 223, 223, 81, -62, 56,
	-80, -28, 273, 274, 277, -45, -78, 48, -45, -122,
	273, -62, 274, 274, -46, -211, -213, -40, -87, 273,
	-122, -147, 277, 280, 258, -63, 274, 272, 272, -122,
	-122, 274, -155, 274, -60, -212, 171, 274, -123, 100,
	273, -131, 274, -122, -194, -122, -58, 273, 273, 183,
	-36, 48, -40, -40, 236, 152, 274, -40, -112, -146,
	-33, -70, -33, 274, -72, 274, -112, 273, 277, 25,
	-63, -120, -179, 274, 274, -60, 37, -123, -131, 274,
	274, 274, -197, 141, -63, -63, -46, -32, 238, -70,
	203, -115, -45, -60, -112, -62, -213, -215, 274, -216,
	178, 194, -72, 274, -195, -198, -196, 160, 101, 170,
	206, 274, 274, -58, -122, -75, -33, 274, 274, 274,
	-217, -218, 30, 231, 61, -122, -217, -196, 160, -198,
	160, 236, 78, -197, -115, -112, -218, 174, 96, 193,
	174, 96, -199, 148, 187, 40, 203, -199, -195, 22,
	16, 153, 76, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 815, 257, 730, 731, 732, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 93, 783, 819,
	830, 98, 108, 0, 882, -2, 112, 62, 815, 141,
	142, 0, 144, 157, 0, 0, 0, 155, 0, 0,
	153, 262, 250, 262, 247, 248, 249, 252, 0, 243,
	0, 319, 0, 0, 0, 218, -2, 298, 299, -2,
	0, 323, 323, 323, 0, 0, 299, 0, 307, 805,
	310, 713, 308, 0, 0, 325, 324, 0, 303, 387,
	0, 703, 348, 0, 2, 0, 864, 0, 0, 864,
	0, 0, 0, 0, 393, 54, 864, 45, 864, 699,
	58, 864, 60, 0, 72, 74, 738, 739, 740, 741,
	886, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 0, 0, 0, 256, 94, 854,
	96, 97, 99, 100, 0, 0, 0, 0, 0, 0,
	111, 136, 137, 63, 0, 0, 159, 0, 0, 0,
	0, 149, 0, 150, 0, 152, 245, 258, 259, 246,
	0, 254, 45, 391, 0, 864, 734, 264, 864, -2,
	0, 294, 335, 336, 0, 0, 0, 321, 322, 0,
	0, 0, 290, 291, 0, 309, 0, 0, 351, 691,
	695, 696, 473, 0, 0, 0, 0, 0, 0, 552,
	553, 554, 0, 556, 557, 558, 859, 0, 562, 563,
	878, 703, 716, 717, 718, 719, 0, 0, 0, 724,
	725, 726, 675, 601, 572, -2, -2, 714, 415, 416,
	417, 418, -2, 888, 576, 578, 580, 581, 582, 583,
	0, 860, 874, 875, 881, 884, 885, 864, 871, 865,
	855, 862, 870, 768, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 737, 439, 440, 445, 446, 448, 351, 349,
	388, 389, 0, 704, 682, 676, 677, 0, 0, 0,
	688, 686, 687, 22, 240, 24, 0, 240, 240, 0,
	0, 0, 0, 0, 0, 397, 0, 267, 0, 394,
	0, 0, 56, 0, 43, 44, 0, 0, 0, 318,
	0, 0, 77, 0, 764, 701, 706, 709, 83, 0,
	0, 0, 0, 0, 103, 123, 124, 125, 104, 106,
	113, 115, 116, 117, 126, 127, 128, 129, 212, 0,
	214, 139, 140, 727, 0, 105, 107, 109, 110, 130,
	131, 0, 133, 134, 135, 456, 0, 64, 742, 743,
	744, 745, 746, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 143, 145, 0, 156, 146, 147, 148, 154, 151,
	0, 0, 253, 215, 0, 163, 0, 0, 864, 733,
	0, 297, 333, 334, 337, 340, 341, 338, 473, 304,
	305, 306, 329, 330, 229, 311, 0, 0, 710, 397,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 685,
	0, 0, 694, 477, 478, 479, 500, 501, 0, -2,
	633, 0, 559, 560, 561, 0, 0, -2, 0, 721,
	470, 0, 0, 674, 603, 0, 0, 0, 0, 0,
	0, 0, 654, 660, 0, 0, 0, 0, 0, 0,
	0, 0, 429, 442, 452, 450, 449, 431, 0, 430,
	428, 0, 432, 0, 397, 0, 683, 0, 680, 681,
	0, 690, 0, 0, 0, 0, 239, 26, 864, 0,
	36, 0, 0, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 705, 279, 0,
	274, 269, 0, 0, 0, 351, 281, 283, 284, 0,
	0, 395, 55, 700, 45, 61, 59, 67, 73, 0,
	0, 78, 79, 707, 708, 0, 0, 101, 102, 263,
	0, 120, 0, 122, 0, 213, 729, 728, 470, 65,
	158, 91, 260, 261, 392, 0, 162, 164, 166, 167,
	168, 734, 0, 0, 0, 0, 0, 339, 342, 343,
	0, 332, 227, 228, 318, 0, 712, 345, 692, 350,
	352, 362, 378, 365, 0, 474, 403, 404, 405, 406,
	407, 470, 410, 411, 412, 413, 414, 422, 423, 424,
	425, 426, 427, 436, 0, 421, 421, 421, 433, 434,
	437, 438, 443, 444, 454, 455, 453, 453, 453, 451,
	475, 0, 480, 481, 482, 483, 484, 485, 486, 487,
	488, -2, -2, -2, 492, 493, 494, -2, -2, -2,
	498, 499, -2, 0, 0, 685, 0, 0, 506, 0,
	509, 511, 513, 0, 0, 0, 0, 684, 523, 666,
	0, 693, 508, 0, 0, 555, 0, 0, 0, 639,
	633, 640, 0, -2, 564, 328, 0, 0, 0, 0,
	722, 457, 458, 459, 460, 461, 462, 471, 0, 673,
	669, 0, 611, 0, 0, 0, 577, 579, 0, 0,
	0, 643, 644, 645, 646, 647, 648, 649, 0, 0,
	0, 0, 525, 0, 0, 0, 0, 878, 0, 633,
	659, 0, 0, 0, 0, 0, 633, 0, 665, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 345,
	390, 678, 0, 689, 25, 231, 0, 0, 0, 28,
	864, 171, 0, 0, 0, 0, 0, 242, 37, 864,
	45, 864, 45, 38, 23, 240, 230, 233, 0, 53,
	0, 396, 279, 0, 0, 697, 271, 268, 397, 0,
	0, 0, 57, 75, 702, 76, 95, 118, 119, 121,
	114, 132, 0, 160, 0, 0, 734, 0, 0, 0,
	265, 331, 0, 313, 314, 315, 316, 711, 347, 0,
	0, 0, 0, 0, 0, 384, 384, 384, 382, 378,
	0, 364, 377, 0, 376, -2, 365, 0, 398, 400,
	408, 0, 0, -2, 0, 0, 0, 524, -2, 507,
	510, 512, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 637, 638, 0, -2, 0, 0,
	327, 328, 328, 328, 570, 0, 0, 0, 0, 0,
	0, 0, 670, 0, 0, 571, 0, 0, 0, 0,
	0, 585, 0, 586, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 527, 528,
	529, 0, 0, 588, 657, 658, 0, 0, 0, 0,
	0, 0, 593, 0, 664, 0, 0, 0, 597, 598,
	599, 0, 419, 0, 435, 447, 347, 0, 0, 0,
	0, 0, 169, 184, 0, 0, 0, 0, 30, 0,
	0, 0, 0, 34, 0, 40, 0, 0, 0, 0,
	278, 266, 277, 0, 0, 279, 282, 285, 0, 92,
	165, 0, 0, 163, 0, 0, 312, 605, 0, 0,
	353, 0, 0, 0, 0, 0, 379, 383, 380, 381,
	363, 360, 0, 374, 0, 367, 0, 0, 0, 476,
	-2, 0, 0, 0, 0, -2, 0, 635, 0, 0,
	667, 0, 628, 0, -2, 634, 641, 565, 0, 0,
	0, 0, 463, 464, 465, 466, 467, 468, 469, 0,
	723, 668, 672, 0, 609, 610, 614, 0, 0, 575,
	0, 642, 651, 652, 526, 530, 531, 532, 533, 534,
	535, 536, 537, 538, -2, -2, -2, 542, 543, 544,
	-2, -2, -2, 0, 0, 0, 653, 0, 0, 631,
	655, 656, 661, 662, 0, 590, 591, 592, 663, 0,
	0, 0, 441, 0, 605, 679, 235, 237, 27, 0,
	170, 0, 173, 0, 0, 176, 177, 0, 0, 0,
	0, 186, 193, 0, 0, 0, 42, 0, 0, 241,
	0, 45, 45, 232, 0, 0, 234, 0, 0, 0,
	270, 698, 280, 0, 0, 220, 226, 226, 0, 573,
	574, 0, 0, 0, 0, 0, 300, 0, 346, 344,
	368, 0, 370, 0, 0, 0, 372, 0, 358, 0,
	357, 354, 355, 0, 0, 366, 401, 0, 0, 409,
	0, 0, -2, 0, 517, 0, -2, -2, 627, 634,
	720, 328, 566, 568, 569, 472, 671, 616, 613, 0,
	600, 584, 650, 0, 0, 0, 0, 634, 630, 589,
	0, 595, 596, 420, 301, 29, 0, 174, 175, 178,
	0, 180, 195, 187, 0, 190, 191, 188, 0, 31,
	32, 41, 47, 33, 39, 0, 0, 0, 0, 0,
	286, 287, 0, 193, 0, 229, 715, 0, 229, 0,
	0, 0, 161, 193, 0, 604, 606, 0, 369, 0,
	386, 371, 0, 361, 0, 0, 375, 402, 399, -2,
	-2, 518, 636, 629, 0, 328, 0, 602, -2, 0,
	0, 0, 632, 0, 172, 0, 199, 0, 0, 0,
	49, 0, 236, 238, 0, 273, 397, 276, 182, 221,
	222, 225, 223, 226, 328, 193, 216, 0, 0, 0,
	0, 359, 356, 373, 567, 619, 0, -2, 0, 550,
	594, 179, 204, 0, 0, 0, 195, 35, 0, 46,
	0, 275, 229, 0, 183, 0, 607, 608, 385, 0,
	0, 0, 615, 551, 181, 200, 201, 0, 196, 197,
	198, 194, 192, 199, 48, 397, 224, 565, 193, 612,
	617, 620, -2, 833, 761, 0, 618, 202, 0, 203,
	0, 0, 0, 204, 272, 217, 0, 622, 623, 624,
	625, 626, 205, 0, 208, 209, 0, 206, 189, 0,
	207, 210, 211, 621,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 262, 3, 268, 263, 3,
	273, 274, 266, 264, 277, 265, 275, 267, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 281, 276,
	256, 258, 257, 3, 278, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 271, 3, 272, 261, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 279, 260, 280, 270,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 259, 269,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:647
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:653
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:659
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:679
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:689
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:695
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:716
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:721
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:726
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:735
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:737
		{
			unimplemented()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:739
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:752
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:761
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:779
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:780
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:783
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:784
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:788
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[3].union.tableWithIdxList(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = &DropIndex{IndexList: sqlDollar[5].union.tableWithIdxList(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1180
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1369
		{
			unimplemented()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1382
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1439
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1489
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1492
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1578
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1649
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2043
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2044
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2049
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2052
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2069
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2093
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2151
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.str = astFullJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.str = astLeftJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.str = astRightJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.str = astInnerJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2428
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2518
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2519
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2523
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2524
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			unimplemented()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = IntVal{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2713
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2714
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &DateType{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2744
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2777
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3153
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3154
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3195
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3280
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3281
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3284
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3285
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3290
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3302
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3318
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3322
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3331
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3335
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3346
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3865
		{
			unimplemented()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = DBool(true)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = DBool(false)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = DNull
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
