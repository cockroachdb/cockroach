// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VARYING = 57612
const WHEN = 57613
const WHERE = 57614
const WINDOW = 57615
const WITH = 57616
const WITHIN = 57617
const WITHOUT = 57618
const YEAR = 57619
const ZONE = 57620
const NOT_LA = 57621
const WITH_LA = 57622
const AS_LA = 57623
const POSTFIXOP = 57624
const UMINUS = 57625

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4807

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	302, 26,
	-2, 368,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	1, 343,
	176, 343,
	206, 343,
	300, 343,
	302, 343,
	-2, 353,
	-1, 55,
	1, 346,
	176, 346,
	206, 346,
	300, 346,
	302, 346,
	-2, 352,
	-1, 64,
	1, 26,
	302, 26,
	-2, 368,
	-1, 281,
	1, 169,
	302, 169,
	-2, 866,
	-1, 314,
	151, 378,
	175, 378,
	-2, 349,
	-1, 317,
	151, 377,
	175, 377,
	-2, 347,
	-1, 447,
	151, 377,
	175, 377,
	-2, 350,
	-1, 503,
	299, 805,
	-2, 798,
	-1, 504,
	299, 806,
	-2, 799,
	-1, 510,
	5, 513,
	299, 513,
	-2, 956,
	-1, 533,
	5, 479,
	-2, 931,
	-1, 534,
	5, 507,
	299, 507,
	-2, 933,
	-1, 535,
	5, 487,
	-2, 934,
	-1, 536,
	5, 486,
	-2, 935,
	-1, 537,
	5, 507,
	299, 507,
	-2, 938,
	-1, 538,
	5, 507,
	299, 507,
	-2, 939,
	-1, 539,
	5, 508,
	-2, 942,
	-1, 540,
	5, 473,
	-2, 943,
	-1, 541,
	5, 473,
	-2, 944,
	-1, 542,
	5, 489,
	-2, 947,
	-1, 543,
	5, 474,
	-2, 952,
	-1, 544,
	5, 475,
	-2, 953,
	-1, 545,
	5, 476,
	-2, 954,
	-1, 546,
	5, 477,
	-2, 955,
	-1, 547,
	5, 473,
	-2, 959,
	-1, 548,
	5, 480,
	-2, 964,
	-1, 549,
	5, 478,
	-2, 967,
	-1, 550,
	5, 505,
	299, 505,
	-2, 969,
	-1, 551,
	5, 509,
	-2, 972,
	-1, 552,
	5, 511,
	-2, 973,
	-1, 553,
	5, 504,
	299, 504,
	-2, 977,
	-1, 878,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 625,
	-1, 886,
	299, 783,
	-2, 772,
	-1, 1081,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 548,
	-1, 1082,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 549,
	-1, 1083,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 550,
	-1, 1087,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 554,
	-1, 1088,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 555,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 556,
	-1, 1092,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 561,
	-1, 1098,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 563,
	-1, 1101,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 568,
	-1, 1102,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 569,
	-1, 1103,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 570,
	-1, 1128,
	184, 696,
	-2, 699,
	-1, 1296,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 426,
	-1, 1300,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 562,
	-1, 1301,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 564,
	-1, 1306,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 565,
	-1, 1324,
	184, 695,
	-2, 698,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 566,
	-1, 1492,
	140, 0,
	-2, 580,
	-1, 1500,
	184, 697,
	-2, 700,
	-1, 1534,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 606,
	-1, 1535,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 607,
	-1, 1536,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 608,
	-1, 1540,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 612,
	-1, 1541,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 613,
	-1, 1542,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 614,
	-1, 1646,
	140, 0,
	-2, 581,
	-1, 1649,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 584,
	-1, 1650,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 586,
	-1, 1736,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 585,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 587,
	-1, 1744,
	140, 0,
	-2, 615,
	-1, 1789,
	140, 0,
	-2, 616,
	-1, 1842,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 930,
}

const sqlNprod = 1071
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24335

var sqlAct = [...]int{

	504, 1841, 1821, 1689, 1865, 1454, 1795, 1822, 1053, 963,
	1823, 1840, 318, 1511, 971, 1724, 589, 339, 1611, 1712,
	502, 1638, 1632, 1612, 1571, 282, 1625, 1036, 71, 501,
	696, 352, 494, 807, 829, 683, 71, 71, 71, 881,
	1293, 71, 1033, 1380, 71, 1292, 41, 466, 1283, 1379,
	1466, 1327, 71, 810, 1226, 1002, 972, 1061, 18, 71,
	71, 883, 1035, 71, 566, 1062, 71, 71, 71, 569,
	941, 1476, 1277, 932, 1114, 1138, 1111, 1065, 25, 1174,
	325, 54, 986, 825, 995, 760, 72, 435, 744, 554,
	1028, 585, 1063, 243, 571, 697, 14, 7, 476, 1177,
	436, 353, 467, 354, 323, 741, 771, 913, 317, 351,
	371, 366, 917, 248, 9, 54, 8, 6, 4, 241,
	831, 367, 965, 1039, 328, 364, 450, 449, 451, 269,
	55, 247, 249, 279, 758, 56, 260, 762, 676, 740,
	326, 1731, 685, 360, 1732, 54, 964, 999, 454, 250,
	1291, 245, 244, 246, 1872, 336, 1238, 1057, 342, 685,
	685, 1857, 1838, 1829, 1057, 1711, 1057, 1819, 1814, 322,
	992, 1057, 1791, 1785, 322, 992, 1057, 1237, 345, 1775,
	1765, 307, 1711, 1057, 1738, 315, 1735, 992, 1000, 1057,
	314, 251, 1721, 1719, 1710, 1711, 1057, 1711, 1694, 1693,
	330, 1057, 1057, 251, 1671, 833, 581, 1005, 834, 835,
	1651, 1648, 1005, 1005, 992, 496, 1598, 1597, 1583, 1005,
	1005, 1057, 1779, 1496, 1001, 998, 1005, 1440, 1322, 1434,
	960, 837, 960, 1323, 53, 834, 835, 1714, 71, 71,
	71, 71, 60, 374, 1397, 1395, 53, 1398, 1005, 832,
	1394, 1393, 836, 1005, 1005, 1281, 71, 556, 837, 1324,
	33, 1280, 1005, 1547, 1321, 62, 369, 1058, 34, 1005,
	1057, 71, 33, 1014, 71, 71, 1005, 1280, 1004, 836,
	34, 1005, 1003, 991, 959, 851, 992, 960, 929, 323,
	1499, 928, 63, 1326, 691, 1263, 930, 692, 1005, 58,
	1265, 686, 1057, 1007, 1122, 59, 842, 71, 1052, 71,
	1022, 71, 477, 71, 462, 800, 799, 355, 686, 686,
	461, 356, 752, 64, 57, 834, 835, 448, 71, 375,
	361, 751, 376, 842, 400, 335, 442, 355, 356, 71,
	68, 356, 434, 997, 1461, 785, 1237, 555, 837, 372,
	420, 71, 1839, 561, 852, 1836, 1828, 592, 71, 71,
	71, 1786, 71, 1720, 408, 996, 447, 1676, 1672, 836,
	1664, 1663, 1662, 1657, 1656, 337, 1655, 409, 344, 347,
	560, 852, 60, 587, 1609, 60, 1603, 1562, 1557, 1556,
	1555, 1502, 889, 71, 1485, 832, 805, 60, 1465, 689,
	71, 441, 71, 688, 1444, 62, 1402, 1399, 62, 1387,
	1378, 853, 1349, 374, 374, 1346, 684, 803, 1344, 1332,
	62, 592, 71, 842, 71, 71, 71, 71, 71, 71,
	71, 1331, 63, 1264, 71, 63, 439, 786, 853, 71,
	1191, 1267, 58, 593, 1145, 71, 594, 63, 59, 1144,
	361, 461, 1119, 460, 58, 1831, 315, 349, 1513, 968,
	59, 314, 1805, 71, 57, 1778, 71, 57, 463, 457,
	458, 852, 1757, 1755, 1746, 1728, 802, 1350, 1351, 242,
	355, 834, 835, 1717, 356, 693, 1708, 846, 838, 839,
	840, 841, 843, 1686, 863, 1669, 738, 1608, 678, 375,
	375, 675, 376, 376, 837, 1641, 750, 593, 1619, 1602,
	594, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	1491, 863, 1484, 1462, 1607, 836, 1459, 323, 853, 886,
	509, 1457, 1414, 1413, 1377, 1340, 1339, 747, 1350, 1351,
	1120, 748, 1318, 1350, 1351, 1442, 1314, 1116, 775, 1252,
	337, 1218, 347, 782, 1217, 787, 1205, 1204, 791, 792,
	793, 794, 795, 790, 1184, 71, 1143, 798, 801, 1056,
	834, 835, 918, 71, 921, 1356, 813, 71, 815, 814,
	880, 71, 71, 925, 911, 315, 910, 827, 315, 315,
	821, 909, 60, 822, 823, 908, 834, 835, 907, 906,
	935, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	703, 863, 1205, 1460, 836, 62, 905, 558, 904, 837,
	903, 337, 902, 901, 900, 899, 470, 1350, 1351, 898,
	897, 781, 1350, 1351, 896, 887, 1356, 885, 57, 340,
	836, 1356, 63, 350, 437, 915, 916, 946, 948, 58,
	465, 563, 726, 406, 919, 59, 396, 394, 884, 1246,
	922, 1245, 577, 586, 562, 804, 834, 835, 1733, 951,
	337, 677, 677, 1606, 967, 1239, 1047, 1365, 1401, 1400,
	71, 926, 71, 71, 1366, 71, 890, 1299, 71, 1366,
	71, 71, 955, 374, 842, 414, 938, 923, 430, 1350,
	1351, 924, 415, 894, 557, 337, 1626, 964, 1514, 1139,
	914, 1233, 1335, 1408, 1801, 981, 369, 942, 234, 1852,
	272, 1853, 1591, 1013, 562, 1356, 506, 572, 300, 573,
	1356, 306, 1259, 305, 301, 966, 1764, 966, 1702, 1701,
	1428, 1367, 725, 71, 71, 1405, 1367, 1404, 1302, 934,
	243, 1251, 1250, 1249, 987, 1425, 1248, 1352, 1353, 1354,
	1355, 1357, 1099, 235, 1006, 934, 957, 863, 954, 438,
	248, 933, 54, 1366, 989, 1726, 54, 945, 1009, 375,
	1188, 1187, 376, 572, 1070, 573, 592, 433, 247, 249,
	71, 392, 988, 990, 309, 1629, 979, 1356, 574, 372,
	1160, 970, 1027, 984, 71, 71, 250, 1429, 245, 244,
	246, 983, 982, 980, 1361, 1358, 1359, 1360, 1352, 1353,
	1354, 1355, 1357, 1352, 1353, 1354, 1355, 1357, 1763, 412,
	1367, 1113, 1113, 919, 71, 922, 1441, 71, 1222, 583,
	1016, 1059, 916, 915, 1150, 1366, 1803, 1010, 1008, 1011,
	679, 572, 1015, 573, 574, 321, 863, 1691, 1003, 944,
	312, 1416, 1069, 1862, 1043, 1446, 413, 238, 1816, 579,
	1227, 592, 593, 1220, 67, 594, 1432, 927, 840, 841,
	843, 1449, 863, 1235, 1817, 1050, 1051, 1117, 1031, 337,
	1139, 237, 236, 347, 1852, 320, 1032, 578, 1874, 582,
	1030, 1447, 1367, 1361, 1358, 1359, 1360, 1352, 1353, 1354,
	1355, 1357, 1758, 587, 1354, 1355, 1357, 239, 587, 834,
	835, 1153, 574, 943, 66, 702, 1868, 1260, 999, 1258,
	1067, 1068, 71, 71, 71, 1060, 1190, 322, 71, 1003,
	1423, 71, 837, 1231, 834, 835, 1126, 71, 71, 71,
	71, 71, 863, 912, 411, 71, 931, 593, 71, 1003,
	594, 71, 1154, 836, 1216, 1198, 685, 837, 71, 1000,
	71, 575, 410, 1227, 1135, 1825, 1118, 71, 1360, 1352,
	1353, 1354, 1355, 1357, 1123, 1127, 71, 1130, 836, 1311,
	1861, 1417, 975, 1192, 403, 405, 1742, 347, 1155, 1152,
	347, 1709, 1309, 1169, 877, 1001, 998, 71, 71, 1181,
	1182, 1183, 728, 71, 323, 319, 1241, 842, 1242, 1282,
	1229, 1215, 310, 374, 1338, 1193, 411, 575, 1692, 240,
	431, 1477, 570, 1018, 322, 1202, 65, 1304, 1112, 1020,
	313, 71, 842, 71, 1866, 71, 71, 1824, 1826, 71,
	703, 703, 1851, 1849, 1624, 1021, 1156, 1875, 71, 1232,
	1045, 423, 401, 1003, 1019, 71, 1286, 71, 1240, 1307,
	1269, 1096, 1860, 1312, 1266, 399, 1268, 453, 1243, 1470,
	820, 452, 489, 1289, 432, 1867, 1827, 1696, 1244, 1880,
	852, 1109, 726, 726, 1284, 575, 1255, 1254, 1695, 727,
	1287, 1257, 1869, 1256, 1107, 453, 1543, 1667, 1261, 375,
	69, 1262, 376, 323, 1285, 987, 337, 1151, 252, 253,
	254, 699, 1684, 271, 997, 686, 283, 1587, 1634, 1752,
	1407, 1201, 1298, 757, 271, 989, 1274, 54, 1197, 1275,
	1046, 329, 329, 1325, 1297, 69, 337, 853, 69, 69,
	348, 1590, 1308, 988, 990, 703, 812, 806, 1589, 1310,
	1288, 1094, 1097, 323, 1286, 1639, 1445, 755, 261, 1105,
	1796, 1104, 1305, 1303, 1879, 1110, 780, 779, 756, 773,
	768, 1289, 725, 725, 1544, 452, 1093, 797, 753, 266,
	1545, 1668, 1475, 1635, 262, 1685, 1207, 726, 1287, 838,
	839, 840, 841, 843, 1206, 863, 71, 1472, 703, 1471,
	1586, 410, 323, 1334, 359, 1633, 1317, 263, 358, 1640,
	1319, 844, 845, 846, 838, 839, 840, 841, 843, 320,
	863, 444, 1329, 1330, 265, 1455, 1610, 1682, 71, 71,
	1412, 1588, 1467, 1278, 1194, 1142, 1436, 1420, 1745, 1422,
	726, 1384, 1385, 1386, 1106, 1666, 783, 1683, 1288, 1381,
	1095, 1108, 1490, 1403, 71, 1376, 71, 1345, 71, 1313,
	1223, 1012, 71, 1224, 1410, 1431, 1389, 958, 429, 428,
	586, 71, 427, 1435, 426, 71, 425, 725, 424, 586,
	1424, 71, 592, 421, 1437, 71, 1438, 71, 337, 357,
	1382, 1458, 895, 789, 1439, 1448, 1450, 1451, 1481, 1141,
	732, 1820, 1793, 1215, 1568, 1421, 1419, 1426, 1427, 264,
	69, 362, 69, 283, 784, 1406, 1271, 1464, 1456, 1048,
	1044, 985, 690, 687, 1474, 682, 1480, 580, 397, 71,
	725, 1504, 1505, 1506, 576, 1493, 1469, 1508, 811, 1703,
	1473, 1054, 455, 402, 1853, 777, 283, 283, 1270, 1478,
	1479, 333, 267, 934, 417, 702, 702, 934, 1705, 949,
	3, 950, 1714, 947, 1433, 1760, 1788, 1468, 593, 337,
	459, 594, 953, 952, 1780, 1501, 969, 299, 828, 271,
	749, 69, 1515, 283, 695, 445, 994, 1520, 1877, 1878,
	1579, 1350, 1351, 834, 835, 71, 71, 71, 1055, 1563,
	329, 257, 1024, 1023, 71, 71, 1452, 1443, 1497, 456,
	71, 69, 71, 1550, 71, 71, 71, 1396, 334, 71,
	1551, 1247, 1580, 69, 1567, 341, 302, 303, 1517, 1518,
	69, 69, 69, 418, 680, 1189, 1522, 1523, 1584, 1585,
	1186, 268, 728, 728, 1564, 1185, 1136, 1025, 1781, 1653,
	71, 71, 774, 769, 1507, 1272, 1026, 888, 308, 1690,
	702, 259, 71, 71, 788, 69, 71, 1548, 1617, 1554,
	1600, 1623, 745, 1617, 745, 71, 71, 1616, 1558, 422,
	1618, 1605, 1616, 1604, 1620, 1618, 1815, 1659, 1337, 1723,
	1741, 1140, 893, 1621, 283, 32, 745, 283, 283, 283,
	283, 283, 796, 1614, 71, 1575, 283, 1576, 482, 1642,
	1622, 271, 1647, 702, 1569, 1409, 1643, 809, 1038, 1161,
	703, 1037, 595, 778, 767, 505, 761, 1630, 1631, 727,
	727, 1636, 1578, 770, 1149, 329, 559, 507, 830, 1581,
	975, 337, 700, 508, 701, 920, 495, 728, 703, 703,
	698, 699, 699, 370, 1665, 1279, 703, 703, 1628, 71,
	973, 71, 726, 71, 71, 1137, 1333, 891, 481, 487,
	486, 1124, 71, 393, 478, 1637, 258, 1290, 44, 407,
	277, 1677, 278, 337, 1230, 1601, 1678, 337, 1680, 703,
	726, 726, 1049, 71, 816, 1418, 1577, 311, 726, 726,
	728, 1347, 395, 1167, 1159, 1157, 1148, 440, 565, 974,
	419, 1236, 993, 464, 1706, 71, 824, 71, 1699, 1700,
	261, 1830, 332, 331, 1715, 1034, 71, 1704, 1718, 416,
	1617, 726, 71, 754, 727, 1017, 304, 69, 1754, 1616,
	1200, 266, 1618, 1713, 1727, 939, 262, 1873, 1759, 69,
	1415, 1800, 725, 69, 956, 61, 699, 1740, 24, 22,
	21, 20, 19, 17, 16, 15, 1734, 23, 13, 263,
	12, 11, 10, 71, 31, 30, 29, 1698, 28, 5,
	725, 725, 2, 1, 0, 1756, 265, 727, 725, 725,
	1747, 1730, 71, 71, 1750, 0, 71, 703, 0, 0,
	71, 0, 0, 0, 1768, 71, 1751, 0, 0, 699,
	0, 1770, 0, 0, 1772, 1777, 1776, 0, 0, 71,
	0, 725, 1617, 0, 592, 1769, 1594, 0, 1161, 1161,
	1771, 1616, 0, 0, 1618, 587, 0, 0, 0, 726,
	1784, 0, 0, 1783, 1787, 323, 71, 0, 71, 71,
	0, 71, 69, 1782, 977, 978, 1282, 69, 0, 0,
	69, 0, 283, 283, 1806, 1804, 0, 1790, 0, 1809,
	71, 264, 0, 1810, 337, 337, 1802, 1808, 337, 1161,
	1161, 1161, 1798, 1807, 1813, 1812, 0, 1811, 0, 1617,
	0, 0, 0, 0, 71, 0, 71, 703, 1616, 0,
	0, 1618, 0, 1286, 0, 1837, 1835, 1774, 1833, 0,
	593, 71, 0, 594, 267, 745, 830, 0, 0, 1846,
	1289, 1850, 71, 1848, 0, 0, 0, 1854, 0, 725,
	1834, 1284, 1858, 1856, 1859, 702, 0, 1287, 0, 726,
	0, 0, 0, 0, 0, 0, 0, 1871, 1870, 0,
	0, 1285, 0, 0, 1876, 0, 1855, 0, 0, 0,
	0, 0, 1029, 702, 702, 0, 0, 0, 0, 1881,
	0, 702, 702, 0, 0, 703, 69, 939, 1818, 0,
	0, 0, 0, 0, 1688, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1350, 1351, 1288, 1368, 1369,
	1370, 0, 1315, 1316, 702, 0, 69, 0, 0, 283,
	0, 1645, 0, 0, 0, 0, 0, 726, 0, 0,
	1161, 1161, 728, 0, 0, 0, 0, 1722, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 337, 0,
	0, 0, 0, 0, 0, 1365, 0, 0, 0, 0,
	728, 728, 703, 1373, 1374, 1375, 0, 0, 728, 728,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1161,
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 0, 1161,
	0, 728, 0, 1356, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 1195, 1196, 725, 0, 727,
	939, 0, 702, 1203, 0, 0, 0, 0, 0, 1208,
	1209, 1211, 1213, 1214, 0, 1371, 0, 1219, 0, 0,
	1221, 699, 0, 69, 0, 0, 0, 727, 727, 0,
	69, 1366, 1234, 0, 0, 727, 727, 0, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 699,
	699, 1799, 0, 0, 0, 0, 739, 699, 699, 483,
	42, 0, 0, 0, 0, 0, 0, 0, 727, 1029,
	745, 0, 0, 0, 725, 1029, 0, 0, 0, 0,
	0, 0, 0, 0, 1488, 1489, 0, 0, 1367, 728,
	699, 0, 0, 0, 42, 0, 975, 0, 0, 0,
	0, 0, 702, 809, 0, 809, 0, 283, 69, 0,
	0, 1273, 0, 0, 316, 0, 0, 324, 0, 0,
	1276, 0, 0, 0, 42, 0, 0, 1295, 0, 69,
	0, 0, 0, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540,
	1541, 1542, 0, 1546, 0, 0, 0, 1362, 1363, 1364,
	0, 1361, 1358, 1359, 1360, 1352, 1353, 1354, 1355, 1357,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	702, 1350, 1351, 0, 0, 0, 0, 1161, 0, 728,
	0, 0, 0, 1579, 0, 1572, 0, 284, 699, 0,
	0, 0, 0, 1570, 0, 0, 0, 1574, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 834, 835,
	0, 0, 0, 0, 0, 1580, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 1573, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 291, 292, 702, 0, 298,
	0, 0, 836, 0, 0, 0, 0, 728, 830, 0,
	0, 285, 287, 1161, 0, 0, 727, 0, 0, 1356,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 834,
	835, 0, 854, 855, 856, 864, 865, 866, 699, 0,
	69, 69, 324, 0, 0, 857, 0, 0, 1575, 288,
	1576, 0, 837, 0, 868, 0, 842, 0, 0, 0,
	0, 289, 290, 0, 0, 0, 1453, 1366, 939, 0,
	809, 0, 0, 836, 1463, 1578, 0, 293, 0, 851,
	0, 0, 1581, 69, 728, 0, 0, 69, 0, 0,
	0, 0, 1161, 1295, 727, 0, 0, 1483, 0, 1295,
	0, 1687, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 0,
	0, 0, 0, 0, 1367, 316, 0, 842, 468, 468,
	0, 0, 0, 0, 0, 0, 0, 567, 0, 1577,
	0, 1512, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 0, 0, 867,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 727, 0, 0, 294, 852, 0, 295, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 1744, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 858, 1358, 1359,
	1360, 1352, 1353, 1354, 1355, 1357, 0, 1565, 1566, 939,
	0, 0, 0, 0, 0, 0, 830, 830, 0, 0,
	0, 0, 1592, 0, 1593, 0, 69, 1595, 1596, 0,
	0, 1599, 853, 0, 0, 0, 0, 0, 838, 839,
	840, 841, 843, 862, 863, 0, 0, 0, 0, 817,
	819, 0, 0, 0, 316, 0, 826, 316, 316, 0,
	1613, 0, 830, 939, 0, 1613, 1789, 0, 872, 873,
	874, 875, 876, 0, 69, 69, 0, 879, 69, 0,
	878, 0, 0, 0, 882, 0, 0, 830, 1295, 26,
	0, 0, 0, 0, 0, 0, 0, 892, 860, 0,
	46, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 1660, 961, 1350, 1351,
	0, 1368, 1369, 1370, 48, 0, 962, 0, 0, 0,
	27, 0, 53, 0, 1644, 0, 0, 0, 1350, 1351,
	0, 1368, 1369, 1370, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 0, 1495, 0, 0, 0, 33, 0,
	0, 49, 0, 0, 0, 36, 34, 0, 1365, 0,
	0, 939, 0, 1679, 0, 283, 1681, 0, 0, 0,
	0, 38, 0, 0, 69, 0, 0, 0, 1365, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1356, 0, 0, 0,
	0, 0, 1613, 0, 0, 0, 0, 69, 0, 1725,
	0, 0, 0, 0, 0, 0, 1356, 0, 69, 0,
	0, 0, 0, 0, 830, 0, 0, 0, 1371, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 1366, 0, 0, 0, 1371, 0,
	51, 0, 0, 39, 0, 50, 42, 0, 42, 0,
	40, 0, 0, 60, 1366, 809, 0, 0, 43, 45,
	0, 42, 0, 0, 0, 42, 0, 0, 47, 0,
	0, 0, 0, 0, 1761, 1762, 62, 0, 1766, 0,
	0, 0, 1767, 0, 1613, 0, 0, 283, 0, 52,
	0, 1367, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 63, 0, 0, 0, 0, 0, 0,
	58, 1367, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1797, 0,
	830, 69, 0, 283, 0, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1613, 1725, 0, 0, 0, 0, 0, 0, 0,
	1362, 1363, 1364, 0, 1361, 1358, 1359, 1360, 1352, 1353,
	1354, 1355, 1357, 0, 0, 42, 69, 0, 830, 0,
	1362, 1363, 1364, 0, 1361, 1358, 1359, 1360, 1352, 1353,
	1354, 1355, 1357, 1847, 0, 0, 0, 0, 0, 468,
	0, 0, 0, 1064, 830, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 0, 1098, 0,
	1100, 1101, 1102, 1103, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 1146, 1147, 837, 1158, 868,
	1168, 1170, 1175, 1178, 1179, 1180, 0, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 836, 0,
	0, 0, 0, 857, 851, 567, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 851, 0, 1225,
	0, 1228, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	869, 0, 0, 0, 0, 1350, 1351, 0, 1368, 1369,
	1370, 0, 1253, 0, 867, 842, 0, 0, 0, 0,
	0, 1494, 0, 0, 859, 0, 0, 0, 0, 0,
	852, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 858, 0, 0, 1365, 0, 859, 0, 826,
	0, 0, 0, 852, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 853, 0, 834,
	835, 0, 854, 855, 856, 864, 865, 866, 862, 0,
	1300, 1301, 0, 1356, 0, 857, 1306, 1115, 0, 0,
	0, 0, 837, 0, 868, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 878, 0, 0, 1320,
	0, 862, 0, 836, 0, 1371, 0, 0, 1328, 851,
	0, 0, 0, 0, 0, 0, 1336, 0, 0, 0,
	1341, 1366, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 879, 0, 0, 878, 0, 1673, 1175, 1175,
	1175, 0, 0, 0, 0, 0, 860, 842, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 861, 869, 0, 0, 1367, 0,
	1392, 1411, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 468, 852, 0, 0, 0, 0,
	0, 0, 468, 0, 0, 0, 567, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 1363, 1364,
	0, 1361, 1358, 1359, 1360, 1352, 1353, 1354, 1355, 1357,
	1064, 0, 853, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 862, 0, 0, 1486, 0, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1253, 0, 0, 0, 0, 0, 0,
	0, 0, 1509, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1519, 0, 0, 1521, 0, 0, 860, 0,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 0, 0, 0, 0,
	0, 0, 1391, 0, 0, 0, 0, 0, 1552, 1553,
	1350, 1351, 0, 1368, 1369, 1370, 0, 1559, 1560, 1561,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 468,
	1365, 837, 0, 868, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 42, 0, 0, 1627, 0, 0, 0, 0, 0,
	0, 1064, 1064, 0, 0, 1064, 0, 0, 1356, 0,
	0, 0, 0, 0, 0, 0, 0, 1646, 0, 0,
	0, 1649, 1650, 0, 0, 0, 1652, 0, 0, 0,
	1654, 0, 0, 0, 0, 0, 842, 1658, 0, 834,
	835, 1661, 854, 855, 856, 864, 865, 866, 0, 0,
	0, 0, 0, 861, 869, 857, 1366, 0, 0, 0,
	0, 0, 837, 0, 868, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 1670, 0, 0, 0, 859, 0,
	0, 0, 0, 836, 852, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 1351,
	0, 1368, 1369, 1370, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 1367, 0, 0, 1697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1707, 842, 0, 0,
	0, 853, 1716, 0, 0, 0, 0, 0, 1365, 0,
	0, 0, 862, 0, 861, 869, 0, 0, 0, 0,
	0, 1729, 0, 0, 0, 1064, 0, 0, 0, 867,
	0, 1736, 1737, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 1362, 1363, 1364, 852, 1361, 1358, 1359, 1360,
	1352, 1353, 1354, 1355, 1357, 0, 1356, 0, 0, 0,
	1749, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 1753, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 1371, 0,
	0, 1390, 0, 0, 0, 567, 0, 0, 878, 0,
	0, 0, 853, 0, 1366, 0, 0, 0, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1367, 0, 0, 0, 0, 0, 0, 860, 0,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 0, 0, 1832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1845, 1845, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1845,
	1362, 1363, 1364, 0, 1361, 1358, 1359, 1360, 1352, 1353,
	1354, 1355, 1357, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1845, 73, 74, 596, 75, 597,
	598, 599, 600, 185, 601, 602, 603, 604, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 605, 79, 192,
	193, 80, 606, 607, 194, 195, 196, 608, 197, 609,
	378, 610, 81, 82, 83, 0, 84, 611, 85, 86,
	87, 612, 379, 88, 89, 613, 614, 615, 616, 617,
	618, 90, 91, 92, 93, 198, 94, 199, 200, 619,
	95, 620, 96, 621, 622, 623, 97, 98, 624, 99,
	625, 0, 626, 201, 100, 101, 202, 627, 628, 629,
	102, 103, 203, 0, 104, 630, 105, 631, 632, 380,
	633, 106, 204, 634, 205, 635, 107, 108, 206, 207,
	382, 636, 111, 637, 109, 638, 381, 110, 208, 209,
	210, 211, 639, 212, 640, 383, 112, 384, 113, 114,
	641, 642, 213, 385, 115, 386, 643, 116, 644, 645,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 646, 126, 647, 214, 128, 215, 129, 130,
	648, 649, 650, 651, 652, 131, 216, 388, 132, 389,
	217, 133, 134, 135, 653, 218, 136, 219, 137, 654,
	138, 139, 140, 220, 141, 142, 655, 144, 145, 143,
	146, 656, 147, 390, 148, 149, 221, 150, 0, 151,
	152, 153, 657, 222, 154, 155, 658, 156, 157, 391,
	158, 223, 224, 159, 659, 165, 160, 161, 162, 164,
	225, 163, 226, 660, 166, 661, 167, 168, 662, 227,
	228, 229, 663, 664, 169, 230, 231, 665, 170, 171,
	172, 173, 666, 667, 174, 175, 176, 668, 669, 177,
	178, 179, 232, 233, 670, 180, 671, 672, 673, 674,
	181, 182, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1482, 73, 74, 596, 75, 597, 598, 599, 600, 185,
	601, 602, 603, 604, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 605, 79, 192, 193, 80, 606, 607,
	194, 195, 196, 608, 197, 609, 378, 610, 81, 82,
	83, 0, 84, 611, 85, 86, 87, 612, 379, 88,
	89, 613, 614, 615, 616, 617, 618, 90, 91, 92,
	93, 198, 94, 199, 200, 619, 95, 620, 96, 621,
	622, 623, 97, 98, 624, 99, 625, 0, 626, 201,
	100, 101, 202, 627, 628, 629, 102, 103, 203, 0,
	104, 630, 105, 631, 632, 380, 633, 106, 204, 634,
	205, 635, 107, 108, 206, 207, 382, 636, 111, 637,
	109, 638, 381, 110, 208, 209, 210, 211, 639, 212,
	640, 383, 112, 384, 113, 114, 641, 642, 213, 385,
	115, 386, 643, 116, 644, 645, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 646, 126,
	647, 214, 128, 215, 129, 130, 648, 649, 650, 651,
	652, 131, 216, 388, 132, 389, 217, 133, 134, 135,
	653, 218, 136, 219, 137, 654, 138, 139, 140, 220,
	141, 142, 655, 144, 145, 143, 146, 656, 147, 390,
	148, 149, 221, 150, 0, 151, 152, 153, 657, 222,
	154, 155, 658, 156, 157, 391, 158, 223, 224, 159,
	659, 165, 160, 161, 162, 164, 225, 163, 226, 660,
	166, 661, 167, 168, 662, 227, 228, 229, 663, 664,
	169, 230, 231, 665, 170, 171, 172, 173, 666, 667,
	174, 175, 176, 668, 669, 177, 178, 179, 232, 233,
	670, 180, 671, 672, 673, 674, 181, 182, 183, 184,
	591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 590, 0, 0, 73, 74, 596, 75,
	597, 598, 599, 600, 185, 601, 602, 603, 604, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 605, 79,
	192, 193, 80, 606, 607, 194, 195, 196, 608, 197,
	609, 378, 610, 81, 82, 83, 0, 84, 611, 85,
	86, 87, 612, 379, 88, 89, 613, 614, 615, 616,
	617, 618, 90, 91, 92, 93, 198, 94, 199, 200,
	619, 95, 620, 96, 621, 622, 623, 97, 98, 624,
	99, 625, 0, 626, 201, 100, 101, 202, 627, 628,
	629, 102, 103, 203, 0, 104, 630, 105, 631, 632,
	380, 633, 106, 204, 634, 205, 635, 107, 108, 206,
	207, 382, 636, 111, 637, 109, 638, 381, 110, 208,
	209, 210, 211, 639, 212, 640, 383, 112, 384, 113,
	114, 641, 642, 213, 385, 115, 386, 643, 116, 644,
	645, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 646, 126, 647, 214, 128, 215, 129,
	130, 648, 649, 650, 651, 652, 131, 216, 388, 132,
	389, 217, 133, 134, 135, 653, 218, 136, 219, 137,
	654, 138, 139, 140, 220, 141, 142, 655, 144, 145,
	143, 146, 656, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 657, 222, 154, 155, 658, 156, 157,
	391, 158, 223, 224, 159, 659, 165, 160, 161, 162,
	164, 225, 163, 226, 660, 166, 661, 167, 168, 662,
	227, 228, 229, 663, 664, 169, 230, 231, 665, 170,
	171, 172, 173, 666, 667, 174, 175, 176, 668, 669,
	177, 178, 179, 232, 233, 670, 180, 671, 672, 673,
	674, 181, 182, 183, 184, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 1132, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	1133, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	1131, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 472, 1134, 0, 0, 0, 473, 0, 0,
	480, 1129, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 568, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 60, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 62, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 377, 553, 0, 180, 0,
	0, 0, 58, 181, 182, 183, 184, 475, 59, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 60, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 62, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 377, 553, 0, 180, 0, 0, 0, 58,
	181, 182, 183, 184, 475, 59, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 73, 74, 480, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 1171, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 1176, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 1172, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	1173, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 475, 0, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 73,
	74, 480, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 0, 0, 480, 1549,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 0, 0, 480, 1498, 503, 492, 493,
	490, 491, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	0, 0, 480, 1128, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 0, 0, 503, 492, 493, 490, 491, 479,
	471, 472, 0, 0, 0, 0, 473, 884, 1125, 480,
	73, 74, 0, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	471, 472, 469, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 1503, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 73, 74, 480, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 568, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 1176, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 0, 0, 0, 503, 492, 493, 490, 491,
	479, 471, 472, 0, 0, 0, 0, 473, 0, 0,
	480, 73, 74, 818, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 1844, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 0, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 1843, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 553, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 475, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	1842, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 1844, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	1843, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 73, 74, 480, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 475, 0, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 73,
	74, 480, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 0, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	1166, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 1162,
	1163, 0, 0, 0, 0, 1164, 73, 74, 1165, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 0, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 1844, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 0, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 0, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	0, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 1843, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 518, 194, 195, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 520, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 208, 209, 210, 211,
	0, 212, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	0, 126, 0, 527, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 524, 525, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 233, 0, 180, 373, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 1615, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 378, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 382, 0, 111, 0, 109,
	0, 381, 110, 208, 209, 210, 211, 0, 212, 0,
	383, 112, 384, 113, 114, 0, 0, 213, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 221, 150, 0, 151, 152, 153, 60, 222, 154,
	155, 0, 156, 157, 391, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	62, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 377, 233, 0,
	180, 0, 0, 0, 58, 181, 182, 183, 184, 0,
	59, 373, 772, 0, 773, 768, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 57,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 378, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 776, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 765,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 382, 0, 111, 0, 109, 0, 381, 110,
	208, 209, 210, 211, 0, 212, 0, 383, 112, 384,
	113, 114, 0, 0, 213, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 766, 0, 0, 0, 131, 216, 388,
	132, 389, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 391, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 764,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 373, 772, 0, 773,
	768, 763, 0, 0, 0, 0, 0, 774, 769, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 378, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 759, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 765, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 382, 0, 111,
	0, 109, 0, 381, 110, 208, 209, 210, 211, 0,
	212, 0, 383, 112, 384, 113, 114, 0, 0, 213,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 766, 0,
	0, 0, 131, 216, 388, 132, 389, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 391, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 764, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 373, 772, 0, 773, 768, 763, 0, 0, 0,
	0, 0, 774, 769, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 378, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 765,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 382, 0, 111, 0, 109, 0, 381, 110,
	208, 209, 210, 211, 0, 212, 0, 383, 112, 384,
	113, 114, 0, 0, 213, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 766, 0, 0, 0, 131, 216, 388,
	132, 389, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 391, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 764,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 774, 769, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 338, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 60, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 62, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 377, 233, 0, 180, 70, 0, 0,
	58, 181, 182, 183, 184, 0, 59, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 1066, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	60, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 62, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	377, 233, 0, 180, 70, 0, 0, 58, 181, 182,
	183, 184, 0, 59, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	1294, 0, 57, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 0,
	180, 0, 70, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	461, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 338, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 70,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 1066, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 232, 233, 0, 180, 0, 70, 0, 0,
	181, 182, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 584, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 0, 180, 70, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 976, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 0,
	180, 70, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 1513,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 0, 180, 70, 0,
	0, 0, 181, 182, 183, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 564, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 743, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 742, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 746, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 232, 233, 373, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 746, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 378,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 382,
	0, 111, 0, 109, 0, 381, 110, 208, 209, 210,
	211, 0, 212, 0, 383, 112, 384, 113, 114, 0,
	0, 213, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 391, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 942, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 940, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 1042, 0, 102, 103,
	203, 0, 104, 0, 105, 945, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 1040, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 944, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 1041, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 942, 197, 0, 0, 937, 81,
	82, 83, 0, 84, 940, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 945, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 936, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 944, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	943, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 1294, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 338, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 694, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 338, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	398, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	343, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 338, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 256, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 255,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 1212, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 1210, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 1199, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 808, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 270, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 681,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 0, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 446, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	443, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 404, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 281, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	280, 228, 229, 0, 0, 276, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 281, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 280,
	228, 229, 0, 0, 276, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 368, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 365, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 363, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 346, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 327,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 273, 0, 0, 117, 0, 118, 119, 120, 121,
	281, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	275, 150, 0, 151, 152, 153, 0, 222, 154, 274,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 280, 228, 229, 0, 0, 276, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 0, 0, 218, 136,
	219, 137, 0, 138, 0, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	0, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 0, 0, 0, 0, 0, 0, 857,
	0, 836, 0, 0, 0, 0, 837, 851, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 861, 869,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 858, 0, 0, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 862, 0, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 0, 0, 0, 853, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 862, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 851, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 0, 0, 0, 0, 0,
	1343, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 842, 0, 1794, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 861, 869,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	0, 868, 0, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 852,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 858, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 0, 0, 1792, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 853,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	862, 868, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	836, 0, 0, 0, 0, 837, 851, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 842, 0, 1773, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 861, 869, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 858, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 853, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 862, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 0, 0, 1748, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	842, 0, 1743, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 861, 869, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 837, 0,
	868, 0, 867, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 836,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 858, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	0, 0, 1739, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 0, 0, 853, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 837, 862,
	868, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 836,
	0, 0, 0, 0, 837, 851, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 851, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 842, 0, 1675, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 861, 869, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 858, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 862,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 853, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 862, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 851, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 0, 0, 1674, 0, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 842,
	0, 1582, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 861, 869, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 837, 0, 868,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 836, 0,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 862, 0, 0, 0, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 858, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 1516, 0, 0, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 0, 853, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 837, 862, 868,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	0, 0, 0, 0, 0, 0, 857, 0, 836, 0,
	0, 0, 0, 837, 851, 868, 0, 0, 0, 716,
	710, 733, 704, 724, 723, 0, 0, 706, 705, 0,
	0, 0, 735, 734, 836, 0, 0, 0, 0, 0,
	851, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 842, 729, 1500, 721, 720, 0, 0, 0,
	0, 0, 0, 0, 719, 0, 0, 0, 0, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	718, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 861, 869, 0, 0, 0,
	852, 0, 0, 0, 0, 0, 711, 712, 713, 714,
	867, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 858, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 862, 0,
	0, 717, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 0, 853, 0, 0, 0, 0, 857, 0,
	0, 708, 0, 0, 862, 837, 0, 868, 0, 715,
	709, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 707, 836, 0, 730, 731,
	0, 0, 851, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 736, 0, 0, 1121, 0, 0, 0, 0, 860,
	0, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 1430, 0,
	842, 1864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 869, 0,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 867, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 1350,
	1351, 0, 1368, 1369, 1370, 0, 862, 0, 0, 842,
	0, 1382, 0, 0, 1381, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 1365,
	0, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 858,
	0, 0, 0, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 0, 0, 0, 0, 1356, 0, 857,
	0, 0, 0, 0, 1054, 0, 837, 0, 868, 0,
	871, 0, 0, 0, 853, 1372, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 862, 0, 836, 0, 1371,
	0, 0, 857, 851, 0, 0, 870, 0, 0, 837,
	0, 868, 0, 0, 0, 1366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 1055, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 842, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 861, 869,
	0, 0, 1367, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 852,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 1362, 1363, 1364, 0, 1361, 1358, 1359, 1360, 1352,
	1353, 1354, 1355, 1357, 858, 0, 853, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 862, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 842, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 861, 869, 0, 0, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 867, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 859, 0,
	0, 837, 0, 868, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 858, 322, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 862, 0, 0, 0, 842, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 0, 868, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 867, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 1388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 869,
	0, 853, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 862, 867, 0, 0, 0, 0, 857, 0,
	0, 0, 1383, 859, 0, 837, 0, 868, 0, 852,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 858, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 853, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 862, 0, 0,
	842, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 867, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 853, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 862, 867, 0, 0,
	0, 0, 857, 0, 0, 0, 1342, 859, 0, 837,
	0, 868, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 858, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1348, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 0,
	853, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 862, 0, 0, 842, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 0, 868, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 867, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 853,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	862, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 837, 0, 868, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 858,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 853, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 862, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	868, 0, 0, 0, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	867, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 835,
	861, 869, 0, 853, 864, 865, 866, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 853, 0,
	0, 0, 0, 0, 0, 0, 842, 0, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	0, 0, 0, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863,
}
var sqlPact = [...]int{

	2546, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 796, 16195, -1000, -1000,
	-1000, -1000, 631, 789, 180, 16195, 16195, 15936, 1564, 1564,
	17490, -1000, -1000, 20339, -1000, 2213, 479, 485, 479, 479,
	484, 17490, 554, 782, 165, -1000, 758, 25, 20080, 16195,
	1339, 32, 14900, 340, 2546, 15677, 19821, 16195, 344, 40,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1186, 1079, 1075, 14900, 19562, 19303,
	19044, -1000, 10110, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 551, 358, 357, -1000, 15418, -1000, 899, -1000, 31,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 886, -1000,
	16195, -1000, -1000, 18785, 18526, 354, 831, -1000, -1000, 582,
	424, 1359, -1000, 49, -1000, -1000, 1180, -1000, 885, 1175,
	1173, 1171, 1169, 1166, 1165, 420, 889, -1000, 547, 831,
	-1000, 831, -1000, -1000, -1000, 522, 17490, -1000, 14900, -1000,
	18267, 1103, 18008, -1000, 758, -1000, -1000, -1000, 930, 1330,
	1330, 1330, 1337, 153, 151, 165, 11, 16195, -1000, 351,
	11, 7070, 7070, -1000, -1000, 340, -1000, 372, 13067, -1000,
	7624, -1000, 830, 1246, 432, 667, 1239, -98, 697, 606,
	12265, 40, -1000, -1000, -1000, 9012, 4221, 14900, 16195, 16195,
	628, 17749, -1000, 1237, 113, 1235, -1000, 96, 1234, -1000,
	-6, -1000, -1000, -1000, -1000, -1000, -1000, 340, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15159, 1364, 22423, -1000, 9012, -1000, -1000, 13334,
	1102, 13334, -1000, -1000, 1360, -1000, 9012, -1000, 28, 19,
	1039, 1012, 10662, 10387, 1286, 1172, -1000, -1000, -1000, 44,
	4496, 16195, 1193, 13334, 16195, 16195, 16195, 16195, 16195, 16195,
	-1000, 1038, -1000, 16195, -1000, 13, 12, -1000, 17490, -1000,
	114, -1000, 366, 990, 17231, 1254, 989, -1000, 930, -1000,
	902, 1034, 8181, 9012, 165, -1000, -1000, 165, 165, 9012,
	-1000, -1000, 16195, 11, 1358, 16195, 92, -1000, 22936, -1000,
	-1000, 9012, 9012, 9012, 9012, 9012, 820, -1000, -1000, -1000,
	5345, -1000, -1000, 40, 339, 361, -1000, -1000, 338, 40,
	-1000, -1000, -1000, -1000, 336, 1462, 387, -1000, -1000, -1000,
	9012, 428, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1192, 335, 331, -1000, -1000, -1000, -1000, 330, 326,
	325, 324, 323, 321, 319, 317, 300, 299, 296, 292,
	287, 285, 761, -1000, 440, -1000, -1000, 440, 440, -1000,
	273, 273, 275, -1000, -1000, -1000, -1000, 273, -1000, -1000,
	-1000, 421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 284,
	92, -1000, -1000, -1000, 16195, -12, -1000, 23721, -1000, -7,
	709, -1000, 14382, 1311, 1307, 1309, 14900, 1350, 1349, 521,
	16195, 16195, 519, -1000, 1164, -16, -1000, -1000, 2299, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 435, 375, 1356, 375, 12533,
	-1000, 16195, 16195, -1000, 16195, -1000, -1000, 16195, -1000, 16195,
	16195, 168, 13864, 706, 1233, 25, -17, -1000, 1367, -1000,
	-1000, -1000, -1000, 66, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 275, 761,
	273, 273, 273, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	421, -1000, -1000, 440, 440, 440, -1000, -1000, -22, 23721,
	517, 0, 13599, 16195, -1000, 37, -1000, -1000, 1158, 474,
	-27, 759, 1070, 836, -1000, -1000, -1000, -1000, 7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1405,
	-1000, -1000, -1000, -1000, 1450, 7, -1000, -1000, -1000, -1000,
	-1000, 1461, -1000, -1000, -1000, 4496, -1000, -1000, -1000, 16195,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 759,
	1070, -1000, -1000, 14900, 14123, 25, 1232, 884, 973, -1000,
	-1000, 392, 1231, -1000, -1000, -1000, -1000, 23721, -1000, 23721,
	674, 1092, -1000, 1092, 5, -1000, 22903, -1000, 270, -33,
	-1000, 435, 7070, 11998, 22423, 22423, 16195, 540, 9012, 9012,
	9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012,
	9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012, 9012,
	1036, 9012, 515, 9012, 9012, 9012, 9012, 1002, 800, 248,
	4496, -1000, 656, 656, 656, 23840, 23840, 241, 20, 22394,
	1, 40, -1000, -1000, 6790, 6493, 40, 4771, -1000, 847,
	1449, 438, 23721, 1204, 1127, 267, 149, 144, 9012, 9012,
	840, 9012, 9289, 9012, 9012, 5622, 9012, 9012, 9012, 9012,
	9012, 9012, -1000, 265, -1000, -1000, -1000, -1000, 1448, -1000,
	-1000, 1443, -1000, 537, 536, 1438, 435, 140, 7624, -1000,
	706, 16195, 16195, 16195, -1000, -1000, 971, 16972, 964, 22423,
	16195, -1000, 258, 257, 1061, 1053, 16195, 16195, 16713, 16454,
	16195, 762, 255, 252, 16195, 671, -1000, 16195, 605, 1157,
	16195, -1000, 9012, 664, 9012, 767, -1000, 11463, 444, 16195,
	677, 43, -1000, -1000, -1000, 391, 16195, -1000, -1000, -1000,
	113, -1000, 96, -1000, -1000, 14900, -1000, -1000, -1000, -1000,
	-1000, -1000, 22423, 364, 362, -1000, 1424, 509, -1000, 506,
	505, 504, -1000, 250, -1000, 9012, 16195, 13599, 0, -1,
	-1000, -1000, 16195, 1070, -1000, -1000, -1000, -1000, 673, -1000,
	730, -1000, 10937, -1000, -1000, -1000, 847, -1000, -8, -1000,
	-1000, -1000, -1000, 133, -3, -1000, -1000, -1000, -1000, -1000,
	16195, 313, 16195, -1000, 16195, 16195, 1228, 1460, 16195, -1000,
	-1000, -1000, 9012, -1000, -1000, -1000, 25, 16195, -1000, 1125,
	-1000, -26, 1699, -154, 14641, -1000, 11196, -1000, -1000, -1000,
	409, 586, 586, 471, 471, 471, 471, 198, 198, 2228,
	934, 24038, 24038, 24038, 315, 909, 909, 24038, 24038, 24038,
	23840, 3579, 225, 9012, 9012, 501, 799, 248, 225, 9012,
	1393, 225, 225, 225, -1000, 900, -1000, -1000, -1000, 1156,
	247, 9289, 9289, -1000, -1000, -1000, 5345, -1000, -1000, 243,
	9012, -1000, 9012, -34, -70, -1000, -1000, -41, -1000, -1000,
	-10, 9012, 9012, 9012, 131, -1000, 119, 619, -1000, 9012,
	841, 237, 236, 9012, -1000, -1000, 23636, 20867, 118, 1154,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 115, 23517, 112,
	22819, -1000, 9289, 9289, 9289, 5345, 235, 110, 22731, -91,
	23432, 7901, 7901, 7901, 109, 23313, 9012, -91, 3478, 3149,
	2977, -49, -50, -55, 1420, -56, 107, 401, 400, 106,
	1125, -1000, -1000, -1000, -1000, 500, 498, 1227, -1000, 963,
	-1000, 449, -1000, 665, 9012, 16195, 234, 233, 769, -1000,
	1218, 920, 1217, 920, -1000, -7, 693, 9012, 9012, -1000,
	493, -1000, -1000, 574, -1000, 22420, -1000, 7070, 23721, -1000,
	670, 1313, -71, -1000, -1000, 7070, 435, 12533, 11998, 7624,
	-73, -1000, -1000, 706, -1000, 538, 1410, 104, 1007, 743,
	723, 642, 1409, 23721, -8, -1000, -8, -1000, -1000, -1000,
	-1000, -1000, -1000, 16195, 1108, 14123, 232, 16195, 227, 314,
	224, 16195, -1000, 1254, -1000, 98, -1000, 1122, 1334, -1000,
	11998, 906, 1067, 1065, 11998, 1050, 849, 849, 849, -1000,
	14641, 3935, -1000, -1000, 16195, 223, 11730, 94, 1699, 9012,
	225, 225, 9012, 9289, 9289, -1000, 225, -1000, -1000, -1000,
	-1000, 1149, 221, 9012, 22423, 3065, 2608, -77, 6196, -13,
	22204, -1000, -1000, 361, -1000, 91, 7347, -1000, 23108, -5,
	-5, -1000, 1459, 1252, -1000, 9012, 23228, -1000, 12800, 436,
	855, 22101, 22423, 22423, -1000, 9012, -1000, 1146, 9012, -1000,
	22423, 22423, 9289, 9289, 9289, 9289, 9289, 9289, 9289, 9289,
	9289, 9289, 9289, 9289, 9289, 9289, 9289, 9289, 9289, 9289,
	9289, 1017, 9289, 1391, 1391, 1391, -40, 5899, -1000, 1190,
	1146, 9012, 9012, 22423, 90, 89, 88, -1000, 9012, -91,
	9012, 9012, 9012, -1000, -1000, -1000, 87, -1000, 1402, -1000,
	-1000, -1000, -1000, 1122, 16195, 16195, 16195, 1216, -1000, 2161,
	-1000, 21911, -82, 16195, 16195, -1000, 1043, 1074, 468, 16195,
	-1000, 16195, -1000, 16195, 16195, 16195, -83, -84, 16195, -1000,
	-1000, -54, 7070, 210, 25, -54, 664, -1000, -42, -1000,
	389, -1000, 226, 199, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 84, -1000, -1000, 1110, -1000, 9843, 209, 16195,
	14123, 25, 9843, 878, -1000, -1000, 433, 9012, 9012, 1699,
	556, 11998, 11998, 952, 1051, 11998, -1000, -1000, -1000, -1000,
	-1000, -1000, 1054, 206, 16195, 14641, 560, 225, 2588, 1895,
	9012, 22423, 23925, -89, 9012, 9012, -1000, -90, -1000, 9012,
	-1000, -1000, 1454, 9012, 76, 74, 73, -1000, -1000, 23721,
	9012, -1000, -1000, 20598, 9012, 72, -1000, 71, 70, 23721,
	1190, 23721, -1000, -1000, 622, 622, 1391, 1391, 1391, 1391,
	689, 689, 533, 2191, 617, 617, 617, 528, 467, 467,
	617, 617, 617, 1142, 1018, 196, 3638, 9012, -96, -1000,
	-1000, -1000, 23721, 23721, 68, -1000, -1000, -1000, -91, 2944,
	21885, 21695, -1000, 67, 433, -1000, -1000, -1000, 16195, -1000,
	16195, -1000, 16195, 16195, 1134, 953, -1000, -1000, 1052, 194,
	9289, 16195, -1000, 792, -101, -102, 929, -1000, 918, 9012,
	-1000, 22423, 920, 920, -1000, 492, 491, -1000, -1000, -1000,
	-54, 1259, 16195, 1306, -1000, -1000, 187, -1000, -1000, -1000,
	815, -106, -1000, 183, 1318, 9012, -1000, -1000, 184, 9843,
	-107, 63, -1000, -108, 16195, -1000, 16195, 23721, -91, 531,
	-1000, 952, -1000, 176, 9012, 11998, -1000, -162, -1000, 384,
	-1000, 16195, -114, -1000, 9012, 9012, 23925, -116, -1000, 225,
	225, -1000, 21592, -1000, 23108, -1000, -1000, -1000, 23721, 808,
	-1000, 21402, -1000, -1000, -1000, -1000, 9289, 1135, 175, 22423,
	21376, -1000, -1000, 9012, -1000, -1000, -1000, -1000, -1000, 1348,
	-1000, -1000, 16195, 962, -1000, -1000, 9012, 3638, 174, 1108,
	173, -1000, -1000, -1000, 711, -1000, -1000, 23721, 1321, -1000,
	-1000, 16195, 16195, 568, -120, 16195, -1000, -1000, 5068, 16195,
	792, 9843, 1320, 40, 16195, 1320, 21186, 4771, -121, -1000,
	1108, 792, 166, -81, -1000, 1354, 1453, -1000, 16195, 23721,
	-1000, 1054, -1000, 4496, -127, -1000, 225, 225, -1000, -1000,
	61, 855, 1333, -1000, 3450, 9289, 22423, -128, -1000, 21083,
	-1000, -1000, 1214, 20893, 1013, 16195, -1000, 16195, 16195, 451,
	16195, -1000, -1000, 624, -1000, 435, -1000, 163, 1108, -1000,
	-1000, -1000, -1000, 1318, -10, 792, -1000, 1108, 9843, 16195,
	159, -1000, -132, -1000, -1000, -1000, -1000, 672, 9012, 3450,
	-133, -1000, -1000, 1208, -1000, 871, 861, 56, -137, 156,
	-1000, 9012, -1000, 12533, -1000, 16195, -1000, 1320, 55, 1108,
	-1000, -138, -1000, -1000, -1000, 52, 8735, 8735, -91, -1000,
	16195, -1000, 877, 876, 634, -1000, -1000, -1000, -1000, -1000,
	1013, 16195, 23721, -126, -139, -1000, -1000, -1000, 792, -1000,
	-1000, -1000, 9566, 881, 652, 22612, -1000, -1000, -1000, 1267,
	-1000, 459, 880, 880, 871, -146, -1000, 852, 1108, 1372,
	-1000, -1000, -1000, -1000, -1000, -1000, 1379, -1000, -1000, 1005,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 8458, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1693, 1692, 1370, 118, 1689, 117, 1688, 1686, 1685,
	1684, 97, 116, 114, 119, 1682, 82, 1681, 1680, 1678,
	96, 1677, 1675, 1674, 58, 1673, 1672, 1671, 1670, 1669,
	1668, 78, 46, 135, 2079, 130, 1665, 1661, 1660, 8,
	94, 69, 1658, 35, 1657, 1650, 53, 87, 100, 1082,
	33, 1648, 1646, 129, 32, 19, 312, 88, 138, 111,
	125, 1645, 1643, 1639, 42, 1635, 5, 1633, 1632, 1631,
	51, 12, 1626, 18, 34, 1623, 1622, 120, 1621, 57,
	91, 105, 25, 121, 99, 1620, 47, 14, 56, 1619,
	39, 1618, 17, 72, 127, 1617, 54, 148, 71, 22,
	48, 1616, 1615, 1614, 1613, 79, 1612, 84, 55, 1611,
	1607, 73, 1605, 126, 128, 1604, 1602, 122, 1595, 1594,
	1592, 720, 1590, 1589, 342, 1588, 3, 27, 62, 9,
	103, 101, 31, 1587, 21, 1585, 2076, 800, 626, 1584,
	49, 43, 74, 50, 61, 30, 1583, 1581, 98, 1580,
	1579, 1578, 1577, 1576, 75, 1575, 64, 137, 40, 45,
	83, 23, 65, 77, 92, 143, 102, 1570, 1565, 110,
	1563, 95, 1560, 1556, 726, 112, 1555, 1554, 1553, 704,
	617, 530, 215, 1552, 1547, 347, 257, 1546, 1544, 107,
	1543, 1536, 134, 133, 16, 1535, 106, 1534, 85, 1533,
	0, 89, 86, 1532, 123, 70, 1531, 1528, 1525, 1524,
	24, 2, 10, 6, 7, 4, 29, 20, 1518, 1513,
	124, 80, 1505, 140, 1502, 1501, 1500, 26, 1499, 15,
	1498, 13, 1497, 1496, 11, 1, 139, 1489, 90, 1474,
	1411, 1471, 136, 1469, 1468, 1387, 76,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 38, 38, 43, 43,
	43, 45, 45, 42, 42, 37, 37, 5, 5, 5,
	6, 6, 6, 6, 11, 12, 12, 12, 12, 12,
	12, 83, 83, 82, 82, 85, 85, 13, 13, 14,
	14, 14, 14, 14, 14, 14, 14, 170, 170, 169,
	15, 146, 146, 16, 16, 16, 16, 17, 106, 106,
	18, 18, 18, 18, 19, 23, 236, 236, 236, 240,
	240, 241, 241, 242, 242, 242, 242, 242, 242, 242,
	238, 238, 26, 26, 26, 26, 26, 125, 121, 121,
	123, 123, 123, 123, 48, 120, 120, 120, 120, 122,
	122, 122, 122, 193, 192, 192, 198, 198, 198, 61,
	61, 61, 61, 61, 62, 62, 62, 191, 191, 191,
	191, 199, 199, 199, 199, 199, 199, 63, 63, 63,
	197, 197, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 237,
	237, 239, 239, 28, 28, 9, 9, 10, 10, 64,
	64, 65, 65, 128, 128, 128, 128, 66, 66, 44,
	44, 44, 127, 208, 208, 209, 209, 209, 209, 209,
	209, 210, 210, 210, 210, 210, 210, 210, 206, 206,
	207, 204, 204, 205, 205, 205, 205, 243, 243, 126,
	126, 69, 69, 213, 213, 213, 213, 211, 211, 211,
	211, 211, 214, 212, 215, 215, 215, 215, 215, 157,
	157, 157, 30, 8, 8, 110, 110, 73, 73, 161,
	161, 161, 55, 55, 39, 39, 39, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 111, 111, 112, 112,
	21, 25, 29, 29, 29, 29, 29, 245, 245, 52,
	52, 52, 52, 53, 53, 124, 124, 124, 124, 124,
	47, 7, 7, 46, 46, 20, 20, 20, 20, 20,
	58, 58, 117, 117, 117, 119, 119, 118, 118, 118,
	96, 96, 31, 78, 78, 87, 87, 88, 88, 167,
	89, 89, 24, 24, 34, 34, 32, 32, 32, 32,
	32, 32, 33, 33, 35, 35, 35, 35, 35, 35,
	35, 221, 221, 221, 223, 223, 220, 222, 222, 244,
	244, 97, 97, 97, 68, 67, 67, 71, 71, 70,
	72, 72, 160, 94, 94, 94, 94, 113, 114, 114,
	115, 115, 116, 116, 93, 93, 143, 143, 36, 36,
	77, 77, 79, 79, 134, 134, 135, 135, 133, 133,
	133, 162, 162, 162, 162, 163, 163, 163, 163, 163,
	163, 158, 158, 158, 158, 159, 159, 168, 168, 100,
	100, 100, 100, 98, 98, 99, 99, 164, 164, 164,
	164, 95, 95, 165, 165, 165, 129, 129, 171, 171,
	171, 76, 76, 76, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 173, 173, 173,
	173, 175, 175, 175, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 176, 176,
	183, 183, 184, 184, 185, 186, 177, 177, 178, 178,
	179, 180, 187, 187, 187, 187, 189, 189, 181, 181,
	181, 181, 181, 182, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 216, 216, 216, 216, 216, 216, 216, 218, 218,
	219, 219, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 224, 224,
	225, 225, 227, 227, 228, 228, 229, 230, 230, 230,
	231, 232, 232, 226, 226, 233, 233, 233, 234, 234,
	235, 235, 235, 235, 235, 148, 148, 148, 149, 149,
	150, 84, 84, 145, 145, 144, 144, 144, 147, 147,
	101, 188, 188, 188, 188, 188, 188, 188, 102, 102,
	109, 103, 103, 104, 104, 104, 104, 104, 104, 140,
	141, 105, 105, 105, 142, 142, 151, 155, 155, 154,
	153, 153, 152, 152, 132, 132, 132, 132, 131, 130,
	90, 90, 246, 246, 156, 156, 91, 91, 92, 86,
	86, 166, 166, 166, 166, 80, 80, 60, 60, 81,
	81, 56, 56, 59, 57, 57, 57, 57, 74, 74,
	75, 75, 54, 54, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 190, 190, 190, 49, 49,
	49, 50, 50, 51, 51, 195, 195, 195, 196, 196,
	196, 196, 194, 194, 194, 194, 194, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 6, 3, 1, 5, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	4, 4, 4, 2, 3, 4, 3, 2, 4, 2,
	0, 2, 0, 8, 8, 7, 10, 5, 8, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -29, -21, -30, -31, 23, 64, -7, -8,
	-9, -10, -222, 92, 100, 193, 99, 85, 115, 207,
	214, -32, -34, 222, -125, 223, 34, 232, 58, 95,
	209, 204, 253, 66, -221, -35, -33, 299, 274, 280,
	217, -36, 240, 267, 302, 240, 128, 78, -56, -49,
	4, -200, -202, 20, 21, 23, 33, 34, 39, 43,
	46, 57, 58, 59, 61, 63, 64, 65, 68, 69,
	76, 77, 78, 79, 81, 85, 87, 91, 92, 94,
	99, 100, 105, 106, 109, 111, 116, 121, 122, 129,
	132, 127, 141, 143, 144, 149, 152, 155, 157, 158,
	159, 160, 161, 163, 164, 166, 168, 165, 171, 173,
	174, 180, 183, 186, 187, 188, 191, 193, 195, 196,
	197, 199, 200, 204, 202, 203, 205, 207, 209, 210,
	212, 214, 215, 216, 219, 220, 222, 223, 225, 228,
	231, 232, 233, 236, 234, 230, 239, 241, 242, 249,
	253, 254, 255, 256, 259, 260, 261, 264, 265, 266,
	270, 275, 276, 277, 278, 28, 35, 36, 37, 38,
	40, 41, 44, 45, 49, 50, 51, 53, 80, 82,
	83, 98, 101, 107, 117, 119, 123, 124, 133, 134,
	135, 136, 138, 147, 170, 172, 181, 185, 190, 192,
	198, 211, 218, 226, 227, 235, 237, 244, 245, 246,
	250, 251, 267, 268, 87, 132, 261, 260, 78, 128,
	240, -14, 299, -24, -6, -12, -4, -20, -31, -11,
	-13, 23, -49, -49, -49, 193, 22, -240, 22, -241,
	-242, 66, 92, 115, 217, 132, 87, 260, -240, -53,
	214, -49, -121, 152, 220, 211, 249, -122, -120, -193,
	244, 161, -82, -49, 4, 78, 57, 79, 116, 128,
	129, 62, 63, 144, 241, 244, 249, 22, 66, -245,
	249, 249, -245, -245, -52, 249, 247, -53, -244, 240,
	240, -110, 78, 258, -33, -35, -34, -70, -71, 257,
	137, 97, 179, -32, -34, -221, -223, 199, -220, -49,
	-223, -67, -68, 22, 89, 303, -164, -56, 177, -92,
	299, -3, -164, 123, -56, -59, 123, -56, -49, 113,
	299, -90, -132, -131, -130, 297, 301, 113, 139, 139,
	-165, -164, -49, 123, -60, 123, -59, -83, 123, -82,
	-170, -169, -196, 4, -200, -202, -201, 267, 55, 67,
	114, 131, 125, 140, 142, 148, 150, 162, 182, 184,
	208, 224, 240, -146, 299, -106, 299, -49, 22, 176,
	303, 176, -49, -121, 51, -121, 299, -123, -47, -48,
	141, 195, 247, 284, 113, 278, -63, 5, 84, -85,
	301, 113, -237, 176, 113, 113, 113, 113, 113, 113,
	278, 141, 195, 240, -124, -47, -48, -124, 247, -53,
	-95, -164, -82, 123, 128, -49, 123, -70, -71, -94,
	-113, -114, 151, 175, -97, 22, 89, -97, -97, 43,
	300, 300, 303, -223, -75, 299, -86, -166, -136, 292,
	-138, 290, 291, 296, 167, 279, -148, -56, -139, 9,
	299, -151, -218, -34, 98, 29, -149, -150, 211, -49,
	7, 8, 5, 6, -54, -173, -182, 252, 102, 169,
	47, -216, -217, 4, -200, -195, -174, -184, -178, -181,
	138, 55, 71, 74, 72, 75, 221, 262, 48, 28,
	101, 185, 190, 237, 250, 251, 123, 170, 124, 53,
	117, 147, 91, 36, 38, 40, 41, 49, 50, 80,
	82, 83, 107, 133, 134, 135, 136, 172, 198, 226,
	235, 245, 246, 268, -201, -185, -186, -179, -180, -187,
	-86, -92, 292, -56, 299, -91, -156, -136, 84, -41,
	202, -40, 21, 23, 92, 265, 98, 230, 230, 202,
	98, 304, 202, 233, 300, -80, -56, -132, -136, -194,
	292, 4, -200, -202, -201, -203, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 42, 47, 48, 52, 54,
	56, 62, 66, 70, 71, 72, 73, 74, 75, 84,
	86, 88, 89, 90, 93, 95, 97, 102, 103, 104,
	110, 112, 113, 115, 118, 120, 126, 128, 130, 137,
	139, 145, 146, 151, 153, 154, 167, 169, 175, 176,
	177, 178, 179, 189, 194, 201, 206, 217, 221, 229,
	238, 240, 243, 247, 248, 252, 257, 258, 262, 263,
	269, 271, 272, 273, 274, -165, -58, -56, -58, 222,
	-49, 30, 98, -43, 303, 46, 205, 98, -43, 303,
	98, 300, 303, -164, 123, 30, -145, -171, -172, -174,
	-183, -177, -181, -182, 39, 45, 44, 242, 218, 227,
	37, 133, 134, 135, 136, 226, 36, 198, 107, 91,
	83, 82, 172, 41, 40, -185, -186, -179, -180, 80,
	245, 246, 138, 38, 50, 49, 268, 235, -84, -136,
	-236, -81, 240, 78, -57, -49, 292, -242, -236, 30,
	-84, 303, 303, 149, -62, 155, 166, 121, -192, 84,
	-198, -191, -157, 9, 252, 102, 176, -197, 8, 291,
	-190, -196, 5, 7, 290, -192, 84, 69, -199, 5,
	4, -182, -157, 84, 152, 301, -194, -193, -239, 110,
	-236, -193, -193, -193, -193, -193, -49, 149, -193, 303,
	303, -53, -43, 303, 299, 30, 167, -50, 123, -49,
	-46, 94, 167, -94, -114, -113, -115, -136, 22, -136,
	-138, -33, -33, -33, -72, -160, -136, -220, 30, -74,
	-49, -77, 303, 113, 10, 11, 54, 33, 290, 291,
	292, 293, 108, 294, 287, 288, 289, 286, 282, 283,
	284, 60, 156, 213, 13, 14, 15, 26, 178, 150,
	279, 125, 224, 296, 16, 17, 18, 140, 35, 126,
	30, 4, -136, -136, -136, -136, -136, 184, -34, -136,
	-84, -90, -34, -144, 297, 299, -90, 299, 5, 5,
	299, -152, -136, -224, 275, 110, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 192, -189, 270, -189, -189, -175, 299, -175,
	-176, 299, -175, 276, 280, 299, -77, -56, 303, 300,
	303, 247, -111, 62, 56, -127, 123, 56, -204, -49,
	62, -205, 52, 258, 194, 112, -111, 62, -111, 62,
	62, -164, 33, 33, 247, -59, -49, 247, 113, 300,
	303, 298, 307, -129, 272, -117, -24, 299, 84, 30,
	-117, -87, -88, -167, -89, -56, 299, -49, -49, -59,
	-60, -82, -83, -14, -169, 98, -16, -24, -20, -31,
	-11, 300, 303, -76, 29, -107, 299, 277, 159, 81,
	122, 158, -108, 216, 300, 303, 247, 303, -81, -74,
	-131, -130, 113, 249, 300, -48, -47, -61, 197, 228,
	203, 219, 303, 8, 7, 7, 5, -194, -238, -49,
	-48, -47, -164, -64, -65, -128, -127, -206, -207, -204,
	128, 258, 103, -24, 98, 176, 167, 284, 98, -116,
	211, 212, 303, -39, 31, 88, 299, 303, 300, -129,
	-166, -79, -162, -164, -34, -163, 299, -171, -171, -82,
	244, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, 150, 125, 224, 35, 126, -136, 247,
	-136, -136, -136, -136, 169, 167, 252, 102, 259, 89,
	173, -246, 238, 32, -142, -34, 299, -194, -148, 211,
	299, 300, 303, -84, -147, 298, -144, -84, 300, 300,
	-84, 269, 22, 89, 292, -107, 7, -155, -154, 271,
	-225, 105, 118, 299, 300, 300, -136, -136, -101, -188,
	4, 277, 159, 81, 122, 158, 216, -102, -136, -103,
	-137, -138, 290, 291, 296, 299, 211, -104, -136, -84,
	-136, 42, 146, 248, -105, -136, 113, -84, -136, -136,
	-136, -84, -84, -84, 299, 7, 7, 244, 244, 7,
	-129, 300, -156, -40, -56, -49, -49, 167, -127, 123,
	-45, 167, -171, -49, 299, 299, 143, 143, -49, -49,
	123, -49, 123, -49, -49, -41, 202, 299, 299, -49,
	202, -49, 233, 113, -56, -136, -96, 206, -136, -96,
	-119, 176, -80, 267, -49, 206, -78, 303, 113, 284,
	-80, -43, -43, -164, -171, 297, 297, 7, 247, 247,
	247, 247, 299, -136, -238, -57, -238, -47, 256, 59,
	197, -198, -107, 303, 300, 303, -50, 128, -50, -82,
	-56, 98, 5, -49, -160, -16, -49, -93, 118, -168,
	303, 281, 67, -100, 142, 162, 114, 148, 208, 131,
	-133, 304, -159, -158, 30, -49, -34, -163, -162, 278,
	-136, -136, 247, -246, 238, -142, -136, 169, 252, 102,
	259, 89, 173, 113, 299, -137, -137, -84, 299, -84,
	-136, 298, 298, 303, 300, -71, 303, -70, -136, -84,
	-84, 300, 300, -153, -154, 93, -136, -230, 183, 299,
	299, -136, 30, 303, 300, 113, 300, -109, 189, 300,
	10, 11, 290, 291, 292, 293, 108, 294, 287, 288,
	289, 286, 282, 283, 284, 60, 156, 213, 13, 14,
	15, 140, 126, -137, -137, -137, -84, 299, 300, -140,
	-141, 113, 110, 30, -105, -105, -105, 300, 113, -84,
	303, 303, 303, 300, 300, 300, 7, 300, 303, 300,
	278, 278, 300, -93, 247, 247, 98, 167, 264, -208,
	-205, -136, -74, 299, 299, -38, 92, 222, -112, 98,
	-43, 98, -43, 247, -111, 62, -84, -84, 247, 233,
	298, -86, 206, 61, 300, -86, -129, -88, -79, -156,
	300, 298, 7, 7, 300, 159, 122, 158, -108, 158,
	-108, -108, 7, -49, -66, 127, -128, 299, -50, 299,
	299, 30, 299, -49, -46, 300, -143, 120, 43, -162,
	173, 142, 142, -162, -100, 142, -98, 182, -98, -98,
	-159, -194, 305, -49, 299, 300, -136, -136, -137, -137,
	113, 299, -136, -145, 26, 26, 300, -84, 300, 303,
	300, -144, 300, 269, -71, -71, -71, 5, 95, -136,
	243, -231, -49, 299, 272, -70, 300, -171, -171, -136,
	-140, -136, -171, -171, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, 89, 167, 173, -137, 303, -84, 300,
	-141, -140, -136, -136, -171, 300, 300, 300, -84, -136,
	-136, -136, 300, 7, -143, -49, -49, -127, 98, -209,
	62, -210, 54, 103, 66, 167, 169, 258, 194, 52,
	84, 201, 300, 300, -74, -74, 167, 84, 167, 84,
	77, 254, -49, -49, -56, -49, -49, 300, 300, -49,
	-86, -118, 299, 176, -24, -96, 284, 298, 298, 300,
	126, -73, -161, -49, -219, 299, -216, -217, -54, 299,
	-74, -64, -24, -73, 176, -227, 273, -136, -84, 239,
	-162, -162, -99, 263, 176, 142, -162, -135, -134, 111,
	165, 299, -74, -158, 26, 26, -136, -145, 300, -136,
	-136, 300, -136, 5, -136, 300, 300, 300, -136, -232,
	-49, -136, 300, 300, 300, -141, 113, 89, 173, 299,
	-136, 300, 300, 303, 300, 300, 300, -227, -127, -49,
	-82, -49, 103, 123, 169, 143, 299, -137, -56, -126,
	-243, 65, 236, 300, 300, 169, 169, -136, -171, -43,
	-43, 247, 247, 90, -74, 62, -92, -34, 299, 186,
	300, 303, -55, -90, 54, -55, -136, 299, -73, 300,
	300, 300, -56, -228, -229, -49, 244, -99, 299, -136,
	-162, 303, 306, 284, -74, 300, -136, -136, 300, 300,
	-71, -226, 188, 300, -137, 113, 299, -145, 300, -136,
	-210, -50, 167, -136, -51, 299, -66, 299, 201, -42,
	54, -49, -49, 260, 168, 300, -49, -49, -126, -161,
	-39, -82, -39, 300, -84, 300, -66, -126, 299, 303,
	30, 5, -74, -134, -194, 300, 300, -71, 43, -137,
	-145, 300, 300, 98, 300, -213, 157, -49, -74, -56,
	-37, 263, -82, 222, -129, 299, -66, -55, -71, -126,
	-66, -73, -229, -231, 300, -233, 196, 212, -84, 300,
	103, -211, -214, -212, 176, 114, 187, 225, 300, 300,
	-69, 299, -136, -87, -74, -39, 300, -66, 300, 300,
	-234, -235, 35, 255, 69, -136, -234, -49, -212, 176,
	-214, 176, 260, 87, -213, -74, -129, 300, -126, -235,
	191, 109, 211, 191, 109, -215, 164, 205, 46, 222,
	-215, -211, 300, -44, 46, 205, -66, 26, 20, 169,
	84, -235,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 0, 0, 368, 0, 0, 0, 0, 0,
	0, 342, -2, 0, 126, 0, 298, 0, 298, 298,
	302, 0, 370, 266, 367, -2, 378, 0, 0, 0,
	376, 356, 0, 0, -2, 0, 0, 0, 0, 771,
	798, 799, 800, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 79, 80, 81, 82, 83, 84, 85,
	86, 0, 92, 99, 100, 881, 102, 0, 109, 110,
	111, 113, 114, 115, 116, 117, 118, 119, 0, 291,
	895, 304, 122, 860, 899, 965, 913, 129, 139, 0,
	971, -2, 143, 73, 172, 173, 0, 175, 190, 0,
	0, 0, 0, 0, 183, 0, 0, 187, 0, 309,
	297, 309, 294, 295, 296, 299, 0, 290, 0, 369,
	0, 0, 0, 265, -2, 352, 353, -2, 0, 373,
	373, 373, 0, 0, 353, 0, 361, 885, 364, 781,
	362, 0, 0, 375, 374, 0, 357, 437, 0, 398,
	0, 2, 0, 950, 437, 0, 950, 0, 0, 0,
	0, 772, 750, 744, 745, 0, 0, 0, 0, 0,
	0, 443, 65, 950, 50, 950, 767, 50, 950, 71,
	0, 87, 89, 808, 809, 810, 811, 976, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 0, 0, 0, 97, 0, 101, 103, 0,
	0, 0, 303, 123, 940, 125, 0, 128, 130, 131,
	0, 0, 0, 0, 0, 0, 142, 167, 168, 74,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 186, 0, 292, 305, 306, 293, 0, 301,
	50, 441, 0, 950, 802, 314, 950, -2, 0, 348,
	385, 386, 0, 0, 0, 371, 372, 0, 0, 0,
	344, 345, 0, 363, 0, 0, 401, 759, 763, 764,
	530, 0, 0, 0, 0, 0, 0, 619, 620, 621,
	0, 623, 624, 625, 945, 0, 629, 630, 965, 771,
	784, 785, 786, 787, 0, 0, 0, 792, 793, 794,
	743, 669, 639, -2, -2, 782, 467, 468, 469, 470,
	-2, 978, 643, 645, 647, 648, 649, 650, 0, 929,
	946, 961, 962, 970, 974, 975, 950, 958, 951, 941,
	948, 957, 841, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 807, 492, 493, 498, 499, 501,
	401, 399, 438, 439, 0, 0, 756, 754, 755, 27,
	287, 29, 0, 287, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 765, 751, 0, 748,
	749, 812, 813, 814, 815, 816, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 447, 0, 320, 0, 0,
	444, 0, 0, 67, 0, 48, 49, 0, 69, 0,
	0, 368, 0, 0, 950, 368, 0, 703, 453, 454,
	455, 456, 457, 527, 460, 461, 462, 463, 464, 465,
	466, 474, 475, 476, 477, 478, 479, 480, 489, 0,
	473, 473, 473, 486, 487, 490, 491, 496, 497, 508,
	509, 511, 513, 507, 507, 507, 504, 505, 0, 701,
	0, 106, 0, 836, 769, 774, 775, 112, 0, 0,
	0, 0, 0, 0, 134, 154, 155, 156, 135, 137,
	144, 146, 147, 148, 157, 158, 159, 160, 259, 0,
	261, 170, 171, 795, 0, 136, 138, 140, 141, 161,
	162, 0, 164, 165, 166, 0, 75, 174, 176, 0,
	189, 177, 178, 179, 180, 181, 182, 185, 188, 0,
	0, 300, 262, 0, 200, 0, 0, 0, 950, 801,
	311, 0, 0, 351, 383, 384, 387, 390, 391, 388,
	530, 358, 359, 360, 379, 380, 276, 365, 0, 0,
	778, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 762, 535, 536, 537, 559, 560, 0, -2, 701,
	0, 626, 627, 628, 0, 0, -2, 0, 789, 527,
	0, 0, 742, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 495, 506, 503, 502, 484, 0, 483,
	481, 0, 485, 0, 0, 0, 447, 0, 0, 758,
	0, 0, 0, 0, 286, 31, 950, 0, 52, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 746, 0, 331, 0, 331, 322, 0, 0, 0,
	318, 334, 335, 337, 338, 0, 0, 445, 66, 768,
	50, 72, 50, 78, 88, 0, 90, 93, 94, 95,
	96, 91, 0, 448, 450, 458, 0, 514, 515, 516,
	517, 518, 519, 528, 98, 0, 0, 0, 107, 108,
	776, 777, 0, 0, 127, 132, 133, 310, 0, 151,
	0, 153, 0, 260, 797, 796, 527, 76, 191, 120,
	307, 308, 442, 0, 199, 201, 203, 204, 205, 206,
	802, 0, 802, 197, 0, 0, 0, 0, 0, 389,
	392, 393, 0, 382, 274, 275, 368, 0, 780, 395,
	760, 428, 402, 410, 426, 413, 0, 531, 532, 533,
	0, 538, 539, 540, 541, 542, 543, 544, 545, 546,
	547, -2, -2, -2, 551, 552, 553, -2, -2, -2,
	557, 558, -2, 0, 0, 0, 753, 0, -2, 0,
	567, -2, -2, -2, 571, 0, 574, 576, 578, 0,
	0, 0, 0, 752, 588, 734, 0, 761, 573, 0,
	0, 622, 0, 0, 0, 707, 708, 0, -2, 631,
	378, 0, 0, 0, 0, 790, 0, 741, 737, 0,
	679, 0, 0, 0, 644, 646, 0, 0, 0, 0,
	711, 712, 713, 714, 715, 716, 717, 0, 0, 0,
	0, 590, 0, 0, 0, 0, 965, 0, 701, 727,
	0, 0, 0, 0, 0, 701, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	395, 440, 757, 30, 278, 0, 0, 0, 33, 950,
	41, 0, 214, 0, 0, 0, 0, 0, 289, 42,
	950, 50, 950, 50, 43, 28, 287, 0, 0, 280,
	0, 277, 58, 0, 766, 0, 64, 0, 446, 315,
	316, 0, 0, 324, 321, 0, 447, 0, 0, 0,
	0, 68, 70, 0, 704, 0, 0, 0, 0, 0,
	0, 0, 0, 702, 104, 770, 105, 124, 149, 150,
	152, 145, 163, 0, 208, 0, 0, 802, 0, 0,
	0, 0, 313, 314, 381, 0, 779, 397, 0, 400,
	0, 0, 0, 0, 0, 0, 434, 434, 434, 432,
	426, 0, 412, 425, 0, 424, -2, 413, 0, 0,
	-2, -2, 0, 0, 0, 589, -2, 572, 575, 577,
	579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	702, 705, 706, 0, -2, 0, 0, 377, 378, 378,
	378, 637, 0, 0, 738, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 653, 0, 654, 0, 0, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 593, 594, 595, 0, 0, 656, 725,
	726, 0, 0, 0, 0, 0, 0, 661, 0, 732,
	0, 0, 0, 665, 666, 667, 0, 471, 0, 488,
	510, 512, 500, 397, 0, 0, 0, 0, 51, 212,
	231, 0, 0, 0, 0, 35, 0, 0, 0, 0,
	39, 0, 45, 0, 0, 0, 0, 0, 0, 59,
	747, 330, 0, 329, 0, 319, 331, 336, 333, 339,
	0, 451, 0, 0, 459, 520, 521, 522, 523, 524,
	525, 526, 0, 121, 195, 0, 202, 0, 0, 0,
	200, 0, 0, 0, 312, 366, 673, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 429, 433, 430, 431,
	411, 408, 0, 422, 0, 415, 534, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 735, 0, 696, 0,
	-2, 709, 632, 0, 0, 0, 0, 791, 736, 740,
	0, 677, 678, 682, 0, 0, 642, 0, 0, 710,
	719, 720, 591, 592, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, -2, -2, -2, 609, 610, 611,
	-2, -2, -2, 0, 0, 0, 721, 0, 0, 699,
	723, 724, 729, 730, 0, 658, 659, 660, 731, 0,
	0, 0, 494, 0, 673, 282, 284, 32, 0, 213,
	0, 216, 0, 0, 0, 0, 222, 223, 0, 0,
	0, 0, 233, 240, 0, 0, 0, 47, 0, 0,
	288, 0, 50, 50, 279, 0, 0, 193, 194, 281,
	317, 0, 0, 0, 323, 332, 0, 452, 449, 529,
	0, 0, 267, 273, 273, 0, 640, 641, 0, 0,
	0, 0, 198, 0, 0, 354, 0, 396, 394, 0,
	416, 0, 418, 0, 0, 0, 420, 0, 406, 0,
	405, 0, 0, 414, 0, 0, -2, 0, 582, -2,
	-2, 695, 702, 788, 378, 633, 635, 636, 739, 684,
	681, 0, 668, 651, 652, 718, 0, 0, 0, 0,
	702, 698, 657, 0, 663, 664, 472, 355, 34, 0,
	217, 218, 802, 0, 221, 224, 0, 226, 804, 208,
	0, 237, 238, 235, 0, 36, 37, 46, 54, 38,
	44, 0, 0, 0, 0, 0, 340, 341, 0, 0,
	240, 0, 276, 783, 0, 276, 0, 0, 0, 230,
	208, 240, 0, 672, 674, 0, 0, 417, 0, 436,
	419, 0, 409, 0, 0, 423, -2, -2, 583, 697,
	0, 378, 0, 670, -2, 0, 0, 0, 700, 0,
	215, 219, 0, 0, 246, 0, 234, 0, 0, 56,
	0, 283, 285, 0, 326, 447, 328, 0, 208, 268,
	269, 272, 270, 273, 378, 240, 196, 208, 0, 0,
	0, 427, 0, 407, 404, 421, 634, 687, 0, -2,
	0, 617, 662, 0, 225, 251, 0, 0, 0, 242,
	40, 0, 53, 0, 327, 0, 228, 276, 0, 208,
	263, 0, 675, 676, 435, 0, 0, 0, 683, 618,
	0, 227, 247, 248, 0, 243, 244, 245, 803, 239,
	246, 0, 55, 447, 0, 271, 632, 229, 240, 680,
	685, 688, -2, 916, 833, 0, 686, 220, 249, 0,
	250, 0, 0, 0, 251, 0, 325, 211, 208, 0,
	690, 691, 692, 693, 694, 252, 0, 255, 256, 0,
	253, 236, 241, 207, 209, 210, 264, 0, 254, 257,
	258, 689,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 288, 3, 294, 289, 3,
	299, 300, 292, 290, 303, 291, 301, 293, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 307, 302,
	282, 284, 283, 3, 304, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 297, 3, 298, 287, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 305, 286, 306, 296,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 285,
	57625, 295, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:727
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:848
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:860
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:920
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{ /* SKIP DOC */
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{ /* SKIP DOC */
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			unimplemented()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = Low
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = Normal
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = High
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1418
		{
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = DropDefault
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1812
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1820
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1822
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = true
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = false
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			unimplemented()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			unimplemented()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1918
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = Ascending
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = Descending
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1985
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2028
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.str = ""
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.str = ""
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2122
		{
			unimplementedWithIssue(6637)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2129
		{
			unimplementedWithIssue(6637)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2171
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2175
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			unimplementedWithIssue(7841)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2201
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2437
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2445
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = true
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = false
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = false
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = true
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &From{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.str = astFullJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.str = astLeftJoin
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.str = astRightJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.str = astInnerJoin
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2813
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2814
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			unimplementedWithIssue(2115)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2909
		{
			unimplementedWithIssue(2115)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2910
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2918
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2974
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = nil
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3095
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3167
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3211
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3247
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3659
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3791
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3792
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3795
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = Window(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.str = ""
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3889
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4228
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4384
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4420
		{
			unimplemented()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = DNull
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.str = ""
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
