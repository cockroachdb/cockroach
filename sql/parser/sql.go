// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:38

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:270
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FOLLOWING = 57439
const FOR = 57440
const FORCE_INDEX = 57441
const FOREIGN = 57442
const FROM = 57443
const FULL = 57444
const GRANT = 57445
const GRANTS = 57446
const GREATEST = 57447
const GROUP = 57448
const GROUPING = 57449
const HAVING = 57450
const HIGH = 57451
const HOUR = 57452
const IF = 57453
const IFNULL = 57454
const IN = 57455
const INDEX = 57456
const INDEXES = 57457
const INITIALLY = 57458
const INNER = 57459
const INSERT = 57460
const INT = 57461
const INT64 = 57462
const INTEGER = 57463
const INTDIV = 57464
const INTERSECT = 57465
const INTERVAL = 57466
const INTO = 57467
const IS = 57468
const ISOLATION = 57469
const JOIN = 57470
const KEY = 57471
const KEYS = 57472
const LATERAL = 57473
const LEADING = 57474
const LEAST = 57475
const LEFT = 57476
const LEVEL = 57477
const LIKE = 57478
const LIMIT = 57479
const LOCAL = 57480
const LOCALTIME = 57481
const LOCALTIMESTAMP = 57482
const LOW = 57483
const LSHIFT = 57484
const MATCH = 57485
const MINUTE = 57486
const MONTH = 57487
const NAME = 57488
const NAMES = 57489
const NATURAL = 57490
const NEXT = 57491
const NO = 57492
const NO_INDEX_JOIN = 57493
const NORMAL = 57494
const NOT = 57495
const NOTHING = 57496
const NULL = 57497
const NULLIF = 57498
const NULLS = 57499
const NUMERIC = 57500
const OF = 57501
const OFF = 57502
const OFFSET = 57503
const ON = 57504
const ONLY = 57505
const OR = 57506
const ORDER = 57507
const ORDINALITY = 57508
const OUT = 57509
const OUTER = 57510
const OVER = 57511
const OVERLAPS = 57512
const OVERLAY = 57513
const PARTIAL = 57514
const PARTITION = 57515
const PLACING = 57516
const POSITION = 57517
const PRECEDING = 57518
const PRECISION = 57519
const PRIMARY = 57520
const PRIORITY = 57521
const RANGE = 57522
const READ = 57523
const REAL = 57524
const RECURSIVE = 57525
const REF = 57526
const REFERENCES = 57527
const RENAME = 57528
const REPEATABLE = 57529
const RELEASE = 57530
const RESTRICT = 57531
const RETURNING = 57532
const REVOKE = 57533
const RIGHT = 57534
const ROLLBACK = 57535
const ROLLUP = 57536
const ROW = 57537
const ROWS = 57538
const RSHIFT = 57539
const SAVEPOINT = 57540
const SEARCH = 57541
const SECOND = 57542
const SELECT = 57543
const SERIALIZABLE = 57544
const SESSION = 57545
const SESSION_USER = 57546
const SET = 57547
const SHOW = 57548
const SIMILAR = 57549
const SIMPLE = 57550
const SMALLINT = 57551
const SNAPSHOT = 57552
const SOME = 57553
const SQL = 57554
const START = 57555
const STRICT = 57556
const STRING = 57557
const STORING = 57558
const SUBSTRING = 57559
const SYMMETRIC = 57560
const TABLE = 57561
const TABLES = 57562
const TEXT = 57563
const THEN = 57564
const TIME = 57565
const TIMESTAMP = 57566
const TIMESTAMPTZ = 57567
const TO = 57568
const TRAILING = 57569
const TRANSACTION = 57570
const TREAT = 57571
const TRIM = 57572
const TRUE = 57573
const TRUNCATE = 57574
const TYPE = 57575
const UNBOUNDED = 57576
const UNCOMMITTED = 57577
const UNION = 57578
const UNIQUE = 57579
const UNKNOWN = 57580
const UPDATE = 57581
const UPSERT = 57582
const USER = 57583
const USING = 57584
const VALID = 57585
const VALIDATE = 57586
const VALUE = 57587
const VALUES = 57588
const VARCHAR = 57589
const VARIADIC = 57590
const VARYING = 57591
const WHEN = 57592
const WHERE = 57593
const WINDOW = 57594
const WITH = 57595
const WITHIN = 57596
const WITHOUT = 57597
const YEAR = 57598
const ZONE = 57599
const NOT_LA = 57600
const WITH_LA = 57601
const POSTFIXOP = 57602
const UMINUS = 57603

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTDIV",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4385

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	280, 21,
	-2, 322,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 293,
	162, 293,
	190, 293,
	278, 293,
	280, 293,
	-2, 303,
	-1, 44,
	1, 296,
	162, 296,
	190, 296,
	278, 296,
	280, 296,
	-2, 302,
	-1, 53,
	1, 21,
	280, 21,
	-2, 322,
	-1, 241,
	1, 138,
	280, 138,
	-2, 797,
	-1, 273,
	137, 332,
	161, 332,
	-2, 299,
	-1, 276,
	137, 331,
	161, 331,
	-2, 297,
	-1, 388,
	137, 331,
	161, 331,
	-2, 300,
	-1, 444,
	277, 741,
	-2, 736,
	-1, 445,
	277, 742,
	-2, 737,
	-1, 451,
	5, 460,
	277, 460,
	-2, 879,
	-1, 473,
	5, 427,
	-2, 856,
	-1, 474,
	5, 455,
	277, 455,
	-2, 857,
	-1, 475,
	5, 435,
	-2, 858,
	-1, 476,
	5, 434,
	-2, 859,
	-1, 477,
	5, 455,
	277, 455,
	-2, 862,
	-1, 478,
	5, 455,
	277, 455,
	-2, 863,
	-1, 479,
	5, 456,
	-2, 866,
	-1, 480,
	5, 422,
	-2, 867,
	-1, 481,
	5, 422,
	-2, 868,
	-1, 482,
	5, 437,
	-2, 871,
	-1, 483,
	5, 423,
	-2, 876,
	-1, 484,
	5, 424,
	-2, 877,
	-1, 485,
	5, 425,
	-2, 878,
	-1, 486,
	5, 422,
	-2, 882,
	-1, 487,
	5, 428,
	-2, 887,
	-1, 488,
	5, 426,
	-2, 889,
	-1, 489,
	5, 453,
	277, 453,
	-2, 890,
	-1, 490,
	5, 457,
	-2, 893,
	-1, 491,
	5, 458,
	-2, 894,
	-1, 492,
	5, 452,
	277, 452,
	-2, 898,
	-1, 755,
	88, 303,
	123, 303,
	137, 303,
	161, 303,
	165, 303,
	236, 303,
	-2, 564,
	-1, 763,
	277, 721,
	-2, 710,
	-1, 962,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 494,
	-1, 963,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 495,
	-1, 964,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 496,
	-1, 968,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 500,
	-1, 969,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 501,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 502,
	-1, 973,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 507,
	-1, 1004,
	170, 634,
	-2, 637,
	-1, 1159,
	88, 303,
	123, 303,
	137, 303,
	161, 303,
	165, 303,
	236, 303,
	-2, 380,
	-1, 1167,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 508,
	-1, 1172,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 509,
	-1, 1191,
	170, 633,
	-2, 636,
	-1, 1337,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 510,
	-1, 1342,
	126, 0,
	-2, 520,
	-1, 1351,
	170, 635,
	-2, 638,
	-1, 1392,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 545,
	-1, 1393,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 546,
	-1, 1394,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 547,
	-1, 1398,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 551,
	-1, 1399,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 552,
	-1, 1400,
	12, 0,
	13, 0,
	14, 0,
	260, 0,
	261, 0,
	262, 0,
	-2, 553,
	-1, 1498,
	126, 0,
	-2, 521,
	-1, 1502,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 524,
	-1, 1503,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 526,
	-1, 1585,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 525,
	-1, 1586,
	30, 0,
	113, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 527,
	-1, 1594,
	126, 0,
	-2, 554,
	-1, 1633,
	126, 0,
	-2, 555,
	-1, 1678,
	30, 0,
	136, 0,
	207, 0,
	258, 0,
	-2, 855,
}

const sqlNprod = 990
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20723

var sqlAct = [...]int{

	1001, 1677, 1660, 835, 1638, 1698, 1539, 1662, 1661, 1676,
	900, 1602, 1371, 843, 277, 1343, 443, 1486, 442, 1572,
	87, 589, 1480, 1462, 435, 1463, 1474, 505, 242, 534,
	1250, 1430, 31, 1156, 886, 758, 1314, 760, 883, 1249,
	1101, 299, 1561, 1194, 909, 14, 1155, 1323, 1146, 693,
	885, 407, 690, 820, 1142, 1021, 989, 418, 844, 511,
	986, 811, 1056, 793, 1017, 789, 1011, 912, 493, 708,
	376, 1344, 20, 66, 284, 43, 10, 547, 562, 282,
	6, 878, 1106, 714, 514, 516, 326, 417, 408, 276,
	506, 910, 320, 377, 507, 544, 64, 573, 282, 322,
	68, 317, 43, 318, 67, 837, 315, 287, 69, 296,
	888, 391, 296, 392, 307, 82, 390, 44, 296, 239,
	307, 564, 45, 543, 560, 73, 527, 311, 43, 536,
	836, 536, 712, 285, 327, 1578, 1014, 1674, 1579, 1668,
	1560, 1667, 904, 295, 904, 1659, 302, 1154, 1501, 281,
	840, 1654, 312, 525, 904, 716, 266, 281, 305, 1635,
	1112, 274, 1501, 323, 1629, 1621, 273, 904, 1560, 1612,
	716, 1587, 904, 1015, 1501, 1582, 1569, 1559, 904, 1560,
	1560, 1544, 289, 1543, 904, 1524, 904, 1504, 1187, 1500,
	1187, 49, 1501, 1440, 1347, 1304, 904, 1187, 1300, 717,
	1187, 1299, 1624, 411, 1300, 21, 715, 1016, 1013, 51,
	1267, 1265, 395, 1268, 1187, 35, 717, 719, 1264, 1263,
	1191, 1187, 1187, 1187, 905, 1189, 1188, 904, 1405, 1059,
	1190, 1187, 808, 1350, 719, 807, 52, 718, 37, 437,
	1125, 717, 541, 47, 42, 542, 809, 1144, 1127, 48,
	49, 904, 858, 539, 718, 997, 899, 872, 508, 719,
	733, 402, 509, 1018, 509, 1193, 717, 46, 51, 26,
	403, 53, 38, 1187, 684, 49, 27, 1221, 537, 718,
	537, 1563, 683, 554, 719, 553, 343, 294, 389, 28,
	508, 409, 409, 51, 509, 52, 588, 362, 383, 1675,
	1673, 512, 47, 1630, 718, 1568, 1529, 350, 48, 1525,
	1517, 724, 1516, 1511, 1510, 1509, 1508, 388, 1495, 1012,
	52, 1420, 1415, 1457, 1414, 296, 65, 47, 724, 1413,
	351, 734, 766, 48, 504, 1112, 500, 1354, 1332, 1313,
	1165, 1584, 1271, 499, 1269, 49, 1257, 994, 734, 1248,
	715, 839, 1129, 724, 1220, 502, 1217, 1215, 1204, 382,
	1198, 1126, 1072, 51, 1028, 1027, 296, 528, 528, 1603,
	535, 402, 687, 734, 40, 326, 326, 29, 724, 39,
	401, 380, 1373, 592, 30, 1623, 735, 49, 1604, 1226,
	52, 33, 34, 1596, 700, 702, 1575, 1566, 734, 36,
	312, 709, 274, 735, 1558, 51, 1536, 273, 717, 1236,
	1522, 686, 1493, 749, 750, 751, 752, 753, 41, 1489,
	404, 46, 756, 327, 327, 1470, 719, 1341, 735, 995,
	1221, 593, 52, 1331, 1310, 1309, 526, 529, 1456, 47,
	1307, 1283, 769, 1282, 1221, 48, 718, 717, 1247, 1212,
	1211, 1203, 1184, 735, 282, 1180, 728, 720, 721, 722,
	723, 725, 991, 46, 1237, 719, 763, 794, 551, 550,
	729, 726, 727, 728, 720, 721, 722, 723, 725, 584,
	577, 797, 1086, 673, 1085, 718, 677, 678, 679, 676,
	680, 1066, 398, 399, 682, 685, 726, 727, 728, 720,
	721, 722, 723, 725, 698, 697, 696, 1026, 508, 804,
	1583, 710, 509, 274, 903, 1086, 274, 274, 704, 800,
	724, 705, 706, 787, 720, 721, 722, 723, 725, 786,
	592, 805, 803, 761, 1230, 1222, 1223, 1224, 1225, 1227,
	734, 495, 1226, 791, 792, 795, 494, 785, 784, 783,
	798, 782, 814, 781, 780, 779, 1226, 778, 777, 724,
	776, 802, 1236, 326, 1221, 775, 450, 774, 853, 320,
	773, 764, 762, 838, 46, 838, 1236, 688, 593, 296,
	825, 827, 307, 801, 300, 406, 1334, 66, 847, 1333,
	501, 1580, 497, 307, 1461, 735, 307, 583, 703, 1113,
	894, 375, 496, 799, 767, 1270, 1166, 371, 1235, 592,
	877, 327, 357, 830, 68, 771, 43, 1237, 67, 1475,
	836, 1374, 69, 1014, 1207, 866, 833, 356, 817, 1022,
	790, 1237, 1108, 57, 1644, 842, 1687, 851, 855, 861,
	323, 859, 856, 862, 854, 852, 517, 865, 518, 1221,
	1688, 757, 1221, 517, 1448, 518, 233, 593, 1121, 864,
	1015, 1611, 729, 726, 727, 728, 720, 721, 722, 723,
	725, 259, 447, 58, 260, 265, 1226, 264, 1552, 860,
	1551, 1492, 1295, 1275, 1231, 1228, 1229, 1230, 1222, 1223,
	1224, 1225, 1227, 1274, 1016, 1013, 1236, 1202, 271, 1228,
	1229, 1230, 1222, 1223, 1224, 1225, 1227, 722, 723, 725,
	1201, 813, 519, 1200, 1199, 1168, 409, 1294, 906, 519,
	978, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 1221, 1042, 296, 1610, 950, 857, 832,
	1018, 1237, 354, 821, 831, 881, 379, 280, 1032, 1069,
	951, 1226, 988, 517, 1226, 518, 374, 268, 592, 992,
	61, 1646, 1285, 55, 296, 1541, 1029, 880, 1040, 882,
	1050, 1052, 1057, 1060, 1061, 1062, 803, 813, 355, 914,
	1022, 803, 279, 812, 60, 59, 530, 445, 988, 1002,
	1363, 1018, 897, 898, 907, 1071, 1012, 824, 512, 1695,
	1102, 1687, 717, 1100, 62, 1097, 593, 56, 1231, 1228,
	1229, 1230, 1222, 1223, 1224, 1225, 1227, 1035, 86, 519,
	719, 86, 582, 581, 281, 575, 570, 1103, 86, 536,
	1120, 523, 993, 522, 1605, 86, 86, 269, 1122, 86,
	718, 1081, 86, 86, 86, 1226, 1018, 353, 86, 86,
	86, 86, 378, 325, 1036, 272, 352, 1075, 1077, 372,
	1656, 788, 282, 520, 1592, 1236, 1694, 1664, 754, 1210,
	520, 86, 1115, 1110, 1324, 823, 1657, 1292, 281, 984,
	1083, 346, 348, 326, 1286, 1076, 868, 1107, 1037, 1034,
	709, 982, 870, 1360, 585, 278, 1107, 1222, 1223, 1224,
	1225, 1227, 1224, 1225, 1227, 1096, 394, 871, 353, 63,
	1130, 373, 54, 1663, 724, 869, 1686, 1111, 1684, 1436,
	1237, 1114, 515, 1701, 1542, 1119, 1117, 1361, 1473, 1116,
	1105, 327, 1128, 1124, 822, 1118, 282, 1665, 892, 1137,
	1131, 1123, 587, 1170, 1038, 1693, 976, 920, 1161, 1437,
	71, 393, 980, 810, 979, 365, 586, 344, 985, 1135,
	342, 296, 1546, 1708, 1177, 1167, 1139, 1545, 43, 1172,
	1138, 1160, 1043, 1666, 1140, 394, 1175, 1164, 537, 987,
	520, 998, 1003, 1018, 1006, 1534, 1277, 795, 1186, 798,
	74, 1222, 1223, 1224, 1225, 1227, 74, 1080, 1195, 1051,
	1033, 1520, 792, 791, 1401, 1063, 1064, 1065, 893, 695,
	79, 1192, 1444, 1208, 282, 75, 79, 1213, 1447, 689,
	1359, 75, 86, 86, 1171, 1446, 1432, 1169, 1433, 977,
	981, 1639, 1487, 1699, 393, 76, 559, 983, 756, 1173,
	681, 76, 1707, 1178, 1057, 1057, 1057, 555, 920, 1535,
	78, 1435, 974, 86, 1088, 86, 78, 86, 1438, 86,
	720, 721, 722, 723, 725, 1273, 1206, 1483, 557, 1087,
	282, 1319, 1700, 1318, 86, 352, 1280, 1402, 310, 558,
	1521, 309, 279, 1403, 1488, 86, 576, 571, 1702, 1443,
	385, 1315, 1143, 409, 1025, 1595, 86, 86, 86, 1519,
	86, 1251, 1445, 1340, 512, 1301, 1254, 1255, 1256, 1216,
	1434, 1179, 1289, 863, 1291, 1174, 1272, 370, 368, 367,
	366, 363, 1176, 975, 308, 1252, 772, 675, 1279, 1024,
	86, 1427, 86, 77, 1290, 1297, 1288, 1276, 1132, 77,
	895, 891, 325, 325, 1296, 540, 538, 533, 524, 1293,
	591, 86, 521, 86, 86, 86, 86, 1336, 86, 1337,
	847, 1302, 86, 1303, 1368, 592, 1328, 86, 1306, 694,
	1342, 80, 1308, 86, 1312, 1553, 1688, 80, 1352, 1317,
	1043, 1043, 1320, 396, 1352, 292, 579, 1321, 1325, 1326,
	1327, 86, 296, 359, 86, 296, 1555, 901, 1369, 1149,
	1356, 1357, 1358, 829, 1298, 3, 813, 1378, 1625, 1281,
	1380, 1183, 828, 593, 1152, 1185, 813, 1563, 1353, 1145,
	717, 1607, 826, 717, 1632, 1322, 1316, 258, 1196, 1197,
	400, 1150, 841, 70, 711, 1706, 552, 1705, 1043, 1043,
	1043, 719, 1410, 1411, 1163, 397, 1375, 293, 1379, 939,
	902, 1417, 1418, 1419, 938, 1362, 1364, 1365, 718, 301,
	1221, 718, 1149, 81, 360, 261, 262, 1246, 717, 1494,
	1408, 874, 873, 1421, 919, 1366, 1377, 1152, 1259, 1335,
	1409, 1266, 1070, 1381, 1068, 1067, 1019, 875, 1147, 1151,
	1506, 86, 1367, 1133, 1150, 876, 765, 591, 267, 1422,
	941, 1426, 1540, 72, 674, 86, 1476, 364, 1148, 86,
	940, 1513, 86, 86, 1468, 1412, 1467, 1468, 86, 1467,
	86, 86, 1469, 86, 1472, 1469, 86, 86, 86, 1655,
	325, 1498, 1460, 86, 86, 1458, 1502, 1503, 1471, 1209,
	1451, 1505, 1591, 1571, 1023, 770, 1507, 1499, 1459, 25,
	939, 1465, 1151, 1478, 1479, 938, 1491, 1484, 423, 1428,
	1278, 1512, 887, 1043, 1043, 1515, 296, 296, 594, 580,
	296, 569, 446, 369, 563, 919, 591, 572, 1031, 498,
	916, 448, 917, 449, 918, 796, 436, 915, 321, 845,
	1020, 1205, 768, 422, 428, 427, 1523, 999, 419, 1485,
	1518, 941, 1153, 349, 1348, 1441, 1442, 237, 238, 1104,
	920, 940, 1455, 896, 699, 1287, 1043, 1043, 1043, 1043,
	1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
	1043, 1043, 1043, 1043, 1043, 270, 1043, 1547, 1218, 1530,
	1049, 1041, 1039, 1030, 920, 381, 510, 846, 361, 908,
	1533, 920, 1531, 1162, 1490, 405, 707, 1565, 291, 290,
	884, 358, 556, 86, 867, 263, 1606, 1406, 1284, 1549,
	1550, 1643, 50, 1576, 19, 86, 86, 1468, 1416, 1467,
	17, 916, 16, 920, 1567, 1469, 1538, 1585, 1586, 430,
	1562, 15, 1574, 1556, 13, 12, 11, 18, 1564, 1136,
	9, 8, 7, 24, 86, 23, 86, 22, 5, 4,
	1548, 2, 1590, 1, 0, 0, 0, 1599, 1577, 0,
	84, 1570, 0, 243, 0, 0, 0, 1601, 1597, 0,
	84, 296, 0, 0, 0, 591, 1477, 288, 288, 0,
	0, 298, 0, 0, 298, 304, 298, 0, 0, 512,
	298, 313, 298, 243, 1600, 0, 1614, 0, 0, 0,
	0, 0, 1616, 1588, 0, 1618, 1622, 1468, 0, 1467,
	0, 920, 0, 345, 0, 1469, 1615, 0, 0, 1554,
	803, 282, 1617, 0, 0, 0, 1627, 0, 0, 0,
	0, 592, 1628, 0, 0, 0, 1631, 0, 86, 86,
	86, 0, 1634, 0, 86, 0, 1647, 86, 0, 245,
	0, 0, 1581, 86, 86, 86, 86, 86, 1650, 86,
	86, 0, 0, 256, 0, 1649, 1645, 86, 1653, 86,
	1468, 1043, 1467, 0, 1652, 1670, 86, 1651, 1469, 593,
	0, 0, 0, 0, 1669, 86, 86, 1681, 1681, 1672,
	1671, 86, 1648, 1642, 0, 0, 247, 1682, 0, 1683,
	325, 1685, 0, 257, 1689, 1690, 0, 0, 0, 1681,
	1692, 1691, 0, 0, 0, 246, 248, 86, 920, 86,
	86, 0, 1704, 86, 1703, 1145, 0, 0, 0, 0,
	0, 0, 86, 0, 847, 0, 1681, 1709, 1626, 86,
	0, 86, 0, 0, 0, 0, 1436, 0, 1431, 249,
	0, 0, 939, 1043, 0, 0, 1429, 938, 0, 250,
	251, 1181, 1182, 0, 243, 243, 1640, 1641, 1149, 0,
	0, 920, 0, 0, 0, 252, 1437, 919, 0, 0,
	0, 0, 0, 1152, 0, 0, 939, 0, 0, 0,
	0, 938, 920, 939, 1147, 84, 0, 298, 938, 243,
	1150, 386, 0, 941, 0, 0, 0, 0, 0, 0,
	0, 919, 0, 940, 1148, 0, 288, 0, 919, 1243,
	1244, 1245, 0, 0, 0, 939, 1620, 298, 1482, 1043,
	938, 0, 0, 0, 0, 0, 0, 941, 298, 298,
	298, 0, 531, 0, 941, 0, 0, 940, 0, 0,
	919, 0, 0, 1432, 940, 1433, 0, 0, 1151, 0,
	0, 0, 0, 0, 0, 253, 920, 0, 254, 0,
	0, 0, 548, 255, 548, 0, 941, 0, 1435, 0,
	0, 0, 0, 916, 0, 1438, 940, 0, 0, 0,
	0, 0, 1658, 243, 0, 548, 243, 243, 243, 0,
	243, 0, 0, 0, 243, 0, 0, 0, 1481, 84,
	0, 0, 0, 939, 86, 692, 0, 916, 938, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 0, 0, 713, 1434, 919, 0,
	86, 0, 0, 0, 1338, 1339, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 86, 916, 86, 0, 0,
	86, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 940, 86, 0, 0, 0, 0,
	0, 86, 591, 0, 0, 86, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 0, 1404, 0, 0,
	939, 0, 0, 0, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 916, 919, 0, 818, 0, 0,
	0, 298, 0, 0, 298, 834, 0, 0, 0, 0,
	298, 0, 849, 850, 0, 298, 0, 0, 298, 243,
	243, 941, 0, 939, 0, 548, 713, 0, 938, 0,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 0, 919, 938,
	0, 0, 86, 86, 86, 0, 0, 0, 0, 0,
	86, 86, 0, 0, 0, 0, 86, 0, 86, 919,
	86, 86, 86, 86, 941, 0, 0, 0, 86, 0,
	424, 32, 0, 0, 940, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 941, 86, 86, 0, 0,
	86, 916, 0, 0, 0, 940, 0, 0, 32, 86,
	86, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 938, 275, 0, 0, 283, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 919, 0, 0, 283, 0, 0, 0,
	0, 86, 0, 0, 916, 879, 0, 0, 0, 0,
	0, 0, 1537, 0, 0, 0, 0, 298, 818, 941,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 0, 243, 0,
	0, 0, 0, 0, 0, 86, 0, 86, 0, 86,
	717, 0, 736, 737, 738, 0, 86, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 719, 0,
	745, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1594, 0, 0, 0, 718, 916,
	0, 86, 0, 86, 733, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 1078, 1079, 0, 0, 0, 818, 0, 0, 1084,
	0, 0, 0, 0, 0, 1089, 1090, 1092, 1094, 1095,
	0, 1098, 1099, 746, 0, 0, 0, 0, 0, 298,
	1633, 1109, 724, 0, 0, 0, 744, 0, 298, 86,
	86, 0, 0, 86, 0, 0, 741, 879, 548, 0,
	0, 86, 734, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 0, 740, 275, 0, 0, 0, 692,
	0, 243, 298, 0, 0, 1134, 0, 0, 0, 0,
	0, 86, 86, 86, 1141, 86, 0, 0, 0, 0,
	0, 1158, 717, 298, 736, 737, 738, 735, 0, 0,
	0, 0, 86, 0, 739, 0, 0, 743, 0, 0,
	719, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 1221, 0, 1238, 1239, 1240, 0, 0, 0, 0,
	0, 0, 0, 1497, 0, 0, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 720, 721,
	722, 723, 725, 0, 0, 0, 275, 0, 0, 275,
	275, 1526, 0, 0, 0, 1235, 0, 717, 0, 736,
	737, 738, 0, 0, 0, 746, 0, 0, 0, 739,
	0, 0, 755, 0, 724, 719, 759, 745, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 734, 718, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 1226, 0, 0, 0, 1241, 0, 0,
	0, 0, 0, 0, 0, 0, 713, 0, 0, 0,
	0, 0, 0, 1236, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	746, 0, 298, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 744, 0, 1305, 0, 818, 32, 692,
	32, 0, 1311, 741, 0, 0, 0, 0, 0, 734,
	0, 0, 32, 0, 298, 0, 0, 298, 1237, 0,
	0, 0, 0, 1158, 0, 0, 0, 1330, 0, 1158,
	742, 740, 730, 731, 732, 0, 729, 726, 727, 728,
	720, 721, 722, 723, 725, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	1372, 1232, 1233, 1234, 0, 1231, 1228, 1229, 1230, 1222,
	1223, 1224, 1225, 1227, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 720, 721, 722, 723, 725,
	0, 0, 0, 0, 1424, 1425, 818, 0, 1262, 0,
	0, 0, 713, 713, 0, 717, 0, 0, 1449, 0,
	1450, 0, 298, 1452, 1453, 1454, 0, 0, 0, 0,
	298, 0, 0, 719, 0, 745, 0, 1464, 0, 818,
	1464, 0, 0, 0, 0, 0, 0, 911, 298, 298,
	0, 0, 298, 718, 0, 0, 0, 0, 0, 733,
	0, 713, 1158, 0, 0, 0, 0, 0, 0, 717,
	0, 736, 737, 738, 0, 0, 0, 990, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 719, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1514, 0, 0, 0, 718, 1221, 0,
	1238, 1239, 1240, 733, 0, 0, 0, 0, 746, 0,
	1496, 0, 0, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 1235, 0, 0, 0, 0, 818, 0, 1532,
	0, 243, 0, 0, 0, 0, 0, 0, 298, 0,
	283, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 724, 0, 0, 0, 744, 713, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	1464, 734, 735, 298, 0, 1573, 0, 0, 0, 0,
	0, 0, 743, 298, 0, 0, 0, 0, 0, 713,
	1226, 0, 0, 740, 1241, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 0, 0, 0, 0, 0,
	1236, 0, 0, 0, 1159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 743, 0, 0, 729,
	726, 727, 728, 720, 721, 722, 723, 725, 0, 0,
	0, 1608, 1609, 0, 0, 1613, 0, 0, 0, 0,
	1464, 0, 0, 243, 0, 1237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 713, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 730,
	731, 732, 755, 729, 726, 727, 728, 720, 721, 722,
	723, 725, 0, 713, 713, 298, 0, 243, 0, 0,
	1261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 1573, 0, 0, 0, 1232, 1233,
	1234, 0, 1231, 1228, 1229, 1230, 1222, 1223, 1224, 1225,
	1227, 0, 0, 0, 0, 0, 298, 0, 755, 0,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 0,
	0, 0, 0, 88, 89, 1008, 90, 0, 0, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 1009, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 911, 116, 0, 911, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 1007, 184, 0, 0, 0,
	32, 185, 186, 187, 188, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 413, 1010, 0, 911,
	911, 414, 0, 911, 421, 1005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 88, 89,
	595, 90, 596, 597, 598, 599, 600, 601, 602, 603,
	91, 92, 189, 190, 191, 93, 192, 193, 604, 94,
	194, 195, 95, 605, 606, 196, 197, 198, 607, 199,
	608, 329, 609, 96, 97, 98, 0, 99, 610, 100,
	611, 330, 101, 102, 612, 613, 614, 615, 616, 617,
	103, 104, 105, 106, 200, 107, 201, 202, 618, 619,
	108, 620, 621, 622, 109, 110, 623, 111, 624, 755,
	625, 203, 112, 204, 626, 627, 113, 114, 205, 115,
	628, 116, 629, 630, 331, 631, 117, 206, 632, 207,
	633, 118, 119, 208, 209, 634, 635, 120, 636, 332,
	121, 210, 211, 212, 0, 637, 213, 638, 333, 122,
	334, 123, 124, 639, 640, 214, 335, 125, 336, 641,
	126, 642, 643, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 644, 136, 645, 215, 138,
	216, 139, 140, 646, 647, 648, 649, 650, 141, 217,
	338, 142, 339, 218, 143, 144, 651, 219, 145, 220,
	652, 146, 147, 148, 221, 149, 150, 653, 152, 153,
	151, 154, 654, 155, 340, 156, 157, 222, 158, 0,
	244, 159, 160, 655, 161, 162, 656, 163, 164, 341,
	165, 223, 166, 657, 167, 168, 170, 224, 169, 225,
	658, 659, 171, 172, 660, 226, 227, 228, 661, 662,
	173, 229, 230, 663, 174, 175, 176, 177, 664, 665,
	178, 179, 180, 666, 667, 181, 182, 183, 231, 232,
	668, 184, 669, 670, 671, 672, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 590, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 88, 89, 595, 90,
	596, 597, 598, 599, 600, 601, 602, 603, 91, 92,
	189, 190, 191, 93, 192, 193, 604, 94, 194, 195,
	95, 605, 606, 196, 197, 198, 607, 199, 608, 329,
	609, 96, 97, 98, 0, 99, 610, 100, 611, 330,
	101, 102, 612, 613, 614, 615, 616, 617, 103, 104,
	105, 106, 200, 107, 201, 202, 618, 619, 108, 620,
	621, 622, 109, 110, 623, 111, 624, 0, 625, 203,
	112, 204, 626, 627, 113, 114, 205, 115, 628, 116,
	629, 630, 331, 631, 117, 206, 632, 207, 633, 118,
	119, 208, 209, 634, 635, 120, 636, 332, 121, 210,
	211, 212, 0, 637, 213, 638, 333, 122, 334, 123,
	124, 639, 640, 214, 335, 125, 336, 641, 126, 642,
	643, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 644, 136, 645, 215, 138, 216, 139,
	140, 646, 647, 648, 649, 650, 141, 217, 338, 142,
	339, 218, 143, 144, 651, 219, 145, 220, 652, 146,
	147, 148, 221, 149, 150, 653, 152, 153, 151, 154,
	654, 155, 340, 156, 157, 222, 158, 0, 244, 159,
	160, 655, 161, 162, 656, 163, 164, 341, 165, 223,
	166, 657, 167, 168, 170, 224, 169, 225, 658, 659,
	171, 172, 660, 226, 227, 228, 661, 662, 173, 229,
	230, 663, 174, 175, 176, 177, 664, 665, 178, 179,
	180, 666, 667, 181, 182, 183, 231, 232, 668, 184,
	669, 670, 671, 672, 185, 186, 187, 188, 0, 590,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 88, 89, 595, 90, 596, 597, 598, 599, 600,
	601, 602, 603, 91, 92, 189, 190, 191, 93, 192,
	193, 604, 94, 194, 195, 95, 605, 606, 196, 197,
	198, 607, 199, 608, 329, 609, 96, 97, 98, 0,
	99, 610, 100, 611, 330, 101, 102, 612, 613, 614,
	615, 616, 617, 103, 104, 105, 106, 200, 107, 201,
	202, 618, 619, 108, 620, 621, 622, 109, 110, 623,
	111, 624, 0, 625, 203, 112, 204, 626, 627, 113,
	114, 205, 115, 628, 116, 629, 630, 331, 631, 117,
	206, 632, 207, 633, 118, 119, 208, 209, 634, 635,
	120, 636, 332, 121, 210, 211, 212, 0, 637, 213,
	638, 333, 122, 334, 123, 124, 639, 640, 214, 335,
	125, 336, 641, 126, 642, 643, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 644, 136,
	645, 215, 138, 216, 139, 140, 646, 647, 648, 649,
	650, 141, 217, 338, 142, 339, 218, 143, 144, 651,
	219, 145, 220, 652, 146, 147, 148, 221, 149, 150,
	653, 152, 153, 151, 154, 654, 155, 340, 156, 157,
	222, 158, 0, 244, 159, 160, 655, 161, 162, 656,
	163, 164, 341, 165, 223, 166, 657, 167, 168, 170,
	224, 169, 225, 658, 659, 171, 172, 660, 226, 227,
	228, 661, 662, 173, 229, 230, 663, 174, 175, 176,
	177, 664, 665, 178, 179, 180, 666, 667, 181, 182,
	183, 231, 232, 668, 184, 669, 670, 671, 672, 185,
	186, 187, 188, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 513, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	49, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 51, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 328, 492, 0, 184, 0,
	0, 0, 47, 185, 186, 187, 188, 416, 48, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 0, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 49, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 51, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 328, 492, 0, 184, 0, 0, 0, 47, 185,
	186, 187, 188, 416, 48, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 1053, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 1058, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 0, 451, 0, 333, 122, 334,
	123, 124, 0, 1054, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 415, 136, 440, 467, 138, 486,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 487, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 429, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	488, 166, 0, 167, 168, 170, 489, 169, 463, 0,
	0, 171, 172, 0, 226, 490, 491, 0, 1055, 173,
	464, 465, 438, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 492, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 416,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 412,
	413, 0, 0, 88, 89, 414, 90, 0, 421, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 0, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 416, 0, 444, 433, 434,
	431, 432, 420, 0, 0, 412, 413, 0, 0, 88,
	89, 414, 90, 0, 421, 1407, 0, 426, 0, 0,
	0, 91, 92, 189, 473, 474, 93, 475, 476, 0,
	94, 194, 195, 95, 441, 459, 477, 478, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 479, 107, 480, 481, 0,
	0, 108, 0, 0, 0, 472, 110, 0, 111, 0,
	0, 0, 425, 112, 460, 439, 0, 113, 114, 482,
	115, 0, 116, 0, 0, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 483, 484, 485, 0, 0, 451, 0, 333,
	122, 334, 123, 124, 0, 0, 471, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 415, 136, 440, 467,
	138, 486, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 338, 142, 339, 461, 143, 144, 0, 462, 145,
	220, 0, 146, 147, 148, 487, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 429, 158,
	0, 244, 159, 160, 0, 161, 162, 457, 163, 164,
	341, 165, 488, 166, 0, 167, 168, 170, 489, 169,
	463, 0, 0, 171, 172, 0, 226, 490, 491, 0,
	0, 173, 464, 465, 438, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 458, 0, 181, 182, 183, 231,
	492, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 416, 0, 444, 433, 434, 431, 432, 420, 0,
	0, 412, 413, 0, 0, 88, 89, 414, 90, 0,
	421, 1349, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 1004, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 413, 0, 0, 0, 0, 414,
	761, 1000, 421, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 1355, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 0, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 513, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 0, 451, 0, 333, 122, 334,
	123, 124, 0, 0, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 415, 136, 440, 467, 138, 486,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 487, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 429, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	488, 166, 0, 167, 168, 170, 489, 169, 463, 0,
	0, 171, 172, 0, 226, 490, 491, 0, 0, 173,
	464, 465, 438, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 492, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 416,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 412,
	413, 410, 0, 88, 89, 414, 90, 0, 421, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 1058, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 413, 0, 0, 0,
	0, 414, 0, 0, 421, 444, 433, 434, 431, 432,
	420, 0, 0, 0, 0, 0, 0, 88, 89, 701,
	90, 0, 0, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 0, 451, 0, 333, 122, 334,
	123, 124, 0, 0, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 415, 136, 440, 467, 138, 486,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 487, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 429, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	488, 166, 0, 167, 168, 170, 489, 169, 463, 0,
	0, 171, 172, 0, 226, 490, 491, 0, 0, 173,
	464, 465, 438, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 492, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 416,
	0, 444, 433, 434, 431, 432, 420, 0, 0, 412,
	413, 0, 0, 88, 89, 414, 90, 0, 421, 0,
	0, 426, 0, 0, 0, 91, 92, 189, 473, 474,
	93, 475, 476, 0, 94, 194, 195, 95, 441, 459,
	477, 478, 198, 0, 469, 0, 452, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 1680, 0,
	453, 455, 0, 454, 456, 103, 104, 105, 106, 479,
	107, 480, 481, 0, 0, 108, 0, 0, 0, 472,
	110, 0, 111, 0, 0, 0, 425, 112, 460, 439,
	0, 113, 114, 482, 115, 0, 116, 0, 0, 331,
	0, 117, 470, 0, 207, 0, 118, 119, 466, 468,
	0, 0, 120, 0, 332, 121, 483, 484, 485, 0,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 1679, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 416, 0, 444, 433, 434,
	431, 432, 420, 0, 0, 412, 413, 0, 0, 88,
	89, 414, 90, 0, 421, 0, 0, 426, 0, 0,
	0, 91, 92, 1678, 473, 474, 93, 475, 476, 0,
	94, 194, 195, 95, 441, 459, 477, 478, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 1680, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 479, 107, 480, 481, 0,
	0, 108, 0, 0, 0, 472, 110, 0, 111, 0,
	0, 0, 425, 112, 460, 439, 0, 113, 114, 482,
	115, 0, 116, 0, 0, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 483, 484, 485, 0, 0, 451, 0, 333,
	122, 334, 123, 124, 0, 0, 471, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 415, 136, 440, 467,
	138, 486, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 338, 142, 339, 461, 143, 144, 0, 462, 145,
	220, 0, 146, 147, 148, 487, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 429, 158,
	0, 244, 159, 160, 0, 161, 162, 457, 163, 164,
	341, 165, 488, 166, 0, 167, 168, 170, 489, 169,
	463, 0, 0, 171, 172, 0, 226, 490, 491, 0,
	0, 173, 464, 465, 438, 174, 175, 1679, 177, 0,
	0, 178, 179, 180, 458, 0, 181, 182, 183, 231,
	492, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 416, 0, 444, 433, 434, 431, 432, 420, 0,
	0, 412, 413, 0, 0, 88, 89, 414, 90, 0,
	421, 0, 0, 426, 0, 0, 0, 91, 92, 189,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	102, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 0, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 0, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	1048, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 1044, 1045, 88, 89, 0, 90, 1046,
	0, 0, 1047, 426, 0, 0, 0, 91, 92, 0,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	1680, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 0, 451, 0, 0, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 0, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 1679, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 413, 88,
	89, 0, 90, 414, 0, 0, 421, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 459, 196, 197, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 460, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 210, 211, 212, 0, 0, 213, 0, 333,
	122, 334, 123, 124, 0, 0, 471, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 0, 136, 0, 467,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 338, 142, 339, 461, 143, 144, 0, 462, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 457, 163, 164,
	341, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	463, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 464, 465, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 458, 0, 181, 182, 183, 231,
	232, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	1466, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 329, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 331,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 332, 121, 210, 211, 212, 0,
	0, 213, 0, 333, 122, 334, 123, 124, 0, 0,
	214, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 222, 158, 0, 244, 159, 160, 49, 161,
	162, 0, 163, 164, 341, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 51, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 328, 232, 0, 184, 0, 0, 0,
	47, 185, 186, 187, 188, 0, 48, 324, 574, 0,
	575, 570, 565, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 46, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 329, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 578,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 567, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 331, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	332, 121, 210, 211, 212, 0, 0, 213, 0, 333,
	122, 334, 123, 124, 0, 0, 214, 335, 125, 336,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 337, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 568, 0, 0, 0, 141,
	217, 338, 142, 339, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 340, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	341, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 566, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 324, 574, 0, 575, 570, 565, 0, 0, 0,
	0, 576, 571, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 329, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 330, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 561, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 567,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 331,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 332, 121, 210, 211, 212, 0,
	0, 213, 0, 333, 122, 334, 123, 124, 0, 0,
	214, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 568,
	0, 0, 0, 141, 217, 338, 142, 339, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 341, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 566, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 324, 574, 0, 575, 570,
	565, 0, 0, 0, 0, 576, 571, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	329, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 567, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 331, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 332, 121,
	210, 211, 212, 0, 0, 213, 0, 333, 122, 334,
	123, 124, 0, 0, 214, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 568, 0, 0, 0, 141, 217, 338,
	142, 339, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 341, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 566, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 576,
	571, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 297, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 49, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 51, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 328, 232, 0, 184, 0, 0, 0, 47, 185,
	186, 187, 188, 85, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 913, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	49, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 51, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 328, 232, 0, 184, 0,
	0, 0, 47, 185, 186, 187, 188, 85, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 46, 0, 1157, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 402, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	297, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 913, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 848, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 1373, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 503, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 546, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 545, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 549, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 324, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 549, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	329, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 331, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 332, 121,
	210, 211, 212, 0, 0, 213, 0, 333, 122, 334,
	123, 124, 0, 0, 214, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 341, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 821, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 819, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 824, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 889,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 823, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 890, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 821, 199, 0, 0, 816,
	96, 97, 98, 0, 99, 819, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 824,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	815, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 823, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 822, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 1157, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	297, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 303, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 297, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	1093, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 1091, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 1082, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 691, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 83, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 532, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 0, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 387, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 384, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 347, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 241, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 240, 227, 228, 0, 0, 236,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 241, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 240, 227,
	228, 0, 0, 236, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	319, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 316, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 314, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 306, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 286, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 234, 0, 0,
	127, 0, 128, 129, 130, 131, 241, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 235, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 240, 227, 228, 0, 0, 236, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 0, 0, 219, 145,
	220, 0, 146, 0, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 0,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 717, 184, 736, 737, 738, 0, 185, 186, 187,
	188, 0, 0, 739, 0, 0, 0, 0, 0, 719,
	0, 745, 0, 0, 0, 0, 717, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 0, 739, 718,
	0, 0, 0, 0, 719, 733, 745, 717, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 718, 719, 0, 745, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	736, 737, 738, 0, 0, 718, 0, 0, 0, 0,
	739, 733, 0, 0, 0, 0, 719, 0, 745, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 718, 744, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 741, 0, 746,
	0, 0, 0, 734, 0, 0, 0, 0, 724, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 741, 0, 0, 740, 0, 0, 734, 724,
	0, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 734,
	740, 746, 0, 0, 0, 0, 0, 0, 735, 0,
	724, 0, 0, 0, 744, 0, 0, 0, 743, 0,
	0, 740, 0, 0, 741, 0, 0, 0, 0, 0,
	734, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 0, 735, 0, 0, 0, 0,
	0, 0, 1260, 0, 742, 743, 730, 731, 732, 0,
	729, 726, 727, 728, 720, 721, 722, 723, 725, 0,
	0, 0, 0, 0, 1637, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 720, 721, 722, 723, 725,
	0, 0, 0, 0, 0, 1636, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 730, 731,
	732, 0, 729, 726, 727, 728, 720, 721, 722, 723,
	725, 717, 0, 736, 737, 738, 1619, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 719,
	717, 745, 736, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 719, 718,
	745, 0, 0, 0, 0, 733, 0, 717, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 718, 739,
	0, 0, 0, 0, 733, 719, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 717, 0, 736, 737,
	738, 0, 0, 0, 746, 0, 0, 0, 739, 0,
	0, 0, 0, 724, 719, 0, 745, 744, 0, 0,
	0, 0, 0, 746, 0, 0, 0, 741, 0, 0,
	0, 0, 724, 734, 718, 0, 744, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 741, 0, 0, 0,
	746, 0, 734, 0, 0, 740, 0, 0, 0, 724,
	0, 0, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 740, 0, 0, 0, 0, 734,
	0, 0, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 746,
	0, 740, 0, 0, 0, 0, 0, 735, 724, 0,
	0, 0, 744, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 742,
	740, 730, 731, 732, 0, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 0, 0, 0, 0, 742, 1598,
	730, 731, 732, 0, 729, 726, 727, 728, 720, 721,
	722, 723, 725, 735, 0, 0, 0, 0, 1593, 0,
	0, 0, 0, 743, 0, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 720, 721, 722, 723, 725,
	0, 0, 0, 0, 0, 1589, 0, 0, 0, 0,
	0, 717, 0, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 0, 0, 0, 719,
	0, 745, 0, 0, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 720, 721, 722, 723, 725, 718,
	0, 0, 0, 0, 1528, 733, 717, 0, 736, 737,
	738, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 719, 0, 745, 717, 0, 736,
	737, 738, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 718, 719, 0, 745, 0, 0,
	733, 0, 0, 0, 717, 0, 736, 737, 738, 0,
	0, 0, 0, 0, 746, 718, 739, 0, 0, 0,
	0, 733, 719, 724, 745, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 718, 734, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 740, 0, 0, 724, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 741, 0, 0, 0, 0, 0, 734, 724,
	0, 0, 0, 744, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 741, 0, 0, 0, 746, 743, 734,
	740, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 740, 0, 0, 0, 0, 734, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 740, 742,
	0, 730, 731, 732, 735, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 743, 0, 0, 0, 0, 1527,
	0, 0, 717, 0, 736, 737, 738, 0, 0, 0,
	0, 735, 0, 0, 739, 0, 0, 0, 0, 0,
	719, 743, 745, 0, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 720, 721, 722, 723, 725, 0,
	718, 0, 0, 0, 1439, 742, 733, 730, 731, 732,
	0, 729, 726, 727, 728, 720, 721, 722, 723, 725,
	0, 0, 0, 0, 0, 1376, 0, 0, 0, 0,
	0, 0, 742, 0, 730, 731, 732, 0, 729, 726,
	727, 728, 720, 721, 722, 723, 725, 0, 0, 0,
	0, 717, 1351, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 746, 0, 0, 0, 719,
	0, 745, 0, 0, 724, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 718,
	0, 0, 0, 0, 734, 733, 0, 0, 0, 717,
	0, 736, 737, 738, 0, 0, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 740, 719, 0, 745,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 717, 0,
	736, 737, 738, 733, 0, 0, 0, 0, 0, 735,
	739, 0, 0, 0, 746, 0, 719, 0, 745, 743,
	0, 0, 0, 724, 0, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 741, 0, 0,
	0, 0, 733, 734, 0, 0, 1697, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 740, 0, 0, 0, 0,
	742, 724, 730, 731, 732, 744, 729, 726, 727, 728,
	720, 721, 722, 723, 725, 741, 1252, 0, 0, 1251,
	996, 734, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 743, 0,
	724, 0, 0, 740, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 741, 1696, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 743, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 0, 0, 0, 1423, 748, 0,
	0, 0, 0, 0, 717, 735, 736, 737, 738, 0,
	0, 0, 0, 0, 0, 743, 739, 0, 0, 747,
	0, 0, 719, 0, 745, 0, 0, 742, 0, 730,
	731, 732, 0, 729, 726, 727, 728, 720, 721, 722,
	723, 725, 718, 717, 0, 736, 737, 738, 733, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 901,
	0, 719, 0, 745, 0, 0, 742, 0, 730, 731,
	732, 0, 729, 726, 727, 728, 720, 721, 722, 723,
	725, 718, 0, 0, 0, 0, 0, 733, 0, 0,
	717, 0, 736, 737, 738, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 746, 719, 0,
	745, 0, 902, 0, 0, 0, 724, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	741, 0, 0, 0, 733, 0, 734, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 740, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	717, 0, 736, 737, 738, 0, 0, 0, 0, 0,
	0, 735, 739, 746, 0, 0, 0, 740, 719, 0,
	745, 743, 724, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 0, 718, 0,
	0, 0, 734, 0, 733, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 740, 281, 0, 0, 0, 0,
	0, 0, 742, 0, 730, 731, 732, 0, 729, 726,
	727, 728, 720, 721, 722, 723, 725, 0, 0, 0,
	717, 0, 736, 737, 738, 0, 0, 735, 0, 0,
	0, 0, 739, 746, 0, 0, 0, 743, 719, 0,
	745, 742, 724, 730, 731, 732, 744, 729, 726, 727,
	728, 720, 721, 722, 723, 725, 741, 0, 718, 0,
	0, 0, 734, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 720, 721,
	722, 723, 725, 0, 0, 0, 717, 0, 736, 737,
	738, 1258, 0, 0, 0, 0, 0, 735, 739, 0,
	0, 1253, 0, 746, 719, 0, 745, 743, 0, 0,
	0, 717, 724, 736, 737, 738, 744, 0, 0, 0,
	0, 0, 1370, 739, 718, 0, 741, 0, 0, 719,
	733, 745, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 740, 733, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 720, 721,
	722, 723, 725, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 743, 724, 0,
	0, 717, 744, 736, 737, 738, 0, 0, 0, 0,
	0, 0, 741, 739, 746, 0, 1214, 0, 734, 719,
	0, 745, 0, 724, 0, 0, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 0, 718,
	740, 0, 0, 734, 0, 733, 0, 0, 742, 0,
	730, 731, 732, 0, 729, 726, 727, 728, 720, 721,
	722, 723, 725, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 1219, 0, 717, 0, 736,
	737, 738, 0, 743, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 719, 0, 745, 735, 0,
	0, 0, 0, 0, 746, 0, 0, 0, 743, 0,
	0, 0, 0, 724, 0, 718, 0, 744, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 734, 742, 0, 730, 731, 732, 0,
	729, 726, 727, 728, 720, 721, 722, 723, 725, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 717, 0, 736, 737, 738, 0,
	746, 0, 0, 0, 0, 0, 739, 0, 735, 724,
	0, 0, 719, 744, 745, 0, 0, 0, 743, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 734,
	0, 0, 718, 0, 0, 0, 0, 0, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 742,
	0, 730, 731, 732, 0, 729, 726, 727, 728, 720,
	721, 722, 723, 725, 735, 717, 0, 736, 737, 738,
	0, 0, 0, 0, 743, 0, 0, 746, 0, 0,
	0, 0, 0, 719, 0, 745, 724, 0, 0, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 718, 0, 0, 734, 0, 0, 733,
	0, 1221, 0, 1238, 1239, 1240, 0, 0, 0, 0,
	0, 0, 0, 1346, 0, 742, 0, 730, 731, 732,
	0, 729, 726, 727, 728, 720, 721, 722, 723, 725,
	0, 0, 717, 0, 736, 737, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 1235, 0, 0, 0, 0,
	719, 735, 745, 1221, 0, 1238, 1239, 1240, 746, 0,
	0, 743, 0, 0, 0, 1345, 0, 724, 0, 0,
	718, 744, 0, 0, 0, 0, 733, 0, 0, 0,
	0, 741, 0, 0, 0, 0, 1221, 734, 1238, 1239,
	1240, 0, 0, 0, 0, 0, 0, 1235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 742, 1226, 730, 731, 732, 1241, 729, 726,
	727, 728, 720, 721, 722, 723, 725, 0, 0, 0,
	1235, 0, 0, 1236, 1221, 746, 1238, 1239, 1240, 0,
	0, 0, 735, 0, 724, 0, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 734, 1226, 0, 0, 0, 1241,
	0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
	0, 0, 0, 0, 0, 1236, 0, 0, 1237, 1242,
	1221, 0, 1238, 1239, 1240, 0, 0, 0, 1226, 0,
	0, 0, 1241, 742, 0, 730, 731, 732, 0, 729,
	726, 727, 728, 720, 721, 722, 723, 725, 1236, 735,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 1235, 0, 0, 0, 0, 0,
	1237, 0, 0, 0, 0, 0, 1226, 0, 0, 0,
	1241, 1232, 1233, 1234, 0, 1231, 1228, 1229, 1230, 1222,
	1223, 1224, 1225, 1227, 0, 0, 1236, 0, 0, 0,
	0, 0, 0, 1237, 0, 0, 0, 0, 0, 0,
	742, 0, 730, 731, 732, 0, 729, 726, 727, 728,
	720, 721, 722, 723, 725, 0, 0, 0, 0, 0,
	0, 0, 1226, 1232, 1233, 1234, 0, 1231, 1228, 1229,
	1230, 1222, 1223, 1224, 1225, 1227, 929, 945, 921, 937,
	936, 1237, 1236, 923, 922, 0, 0, 0, 947, 946,
	0, 0, 0, 0, 0, 0, 1232, 1233, 1234, 0,
	1231, 1228, 1229, 1230, 1222, 1223, 1224, 1225, 1227, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 934,
	933, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 0, 0,
	0, 931, 0, 0, 1232, 1233, 1234, 0, 1231, 1228,
	1229, 1230, 1222, 1223, 1224, 1225, 1227, 0, 0, 0,
	0, 0, 0, 0, 925, 926, 927, 0, 0, 587,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1232, 1233, 1234, 935, 1231, 1228, 1229, 1230, 1222, 1223,
	1224, 1225, 1227, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 0, 924, 0, 0, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 948,
}
var sqlPact = [...]int{

	186, -1000, -9, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 703, -1000, -1000, -1000, 555, 700, 49, 942, 942,
	14945, -1000, -1000, 17629, 1615, 443, 446, 443, 443, 449,
	14945, 548, 628, 144, -1000, 669, -10, 17385, 13725, 1177,
	6, 13237, 307, 186, 13481, 13725, 17141, 1033, 966, 963,
	13237, 16897, 16653, 16409, -1000, 8987, -1000, -1000, -1000, -1000,
	808, -1000, 5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 805, -1000, 13725, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16165, 15921, 739, -1000, -1000, 526,
	355, 1198, -1000, 18, -1000, -1000, -1000, 1030, -1000, 803,
	1029, 1028, 1027, 1026, 350, 742, -1000, 547, 739, -1000,
	739, -1000, -1000, -1000, 530, 14945, -1000, 13237, -1000, 15677,
	986, 15433, -1000, 669, -1000, -1000, -1000, 824, 1175, 1175,
	1175, 1203, 102, 93, 144, -11, 13725, -1000, 308, -11,
	6671, 6671, -1000, -1000, 307, -1000, 320, 11519, 15, -1000,
	6415, -1000, 746, 1073, 657, 655, 1069, -129, 13237, 13725,
	13725, 591, 15189, -1000, 1068, 89, 1067, -1000, -28, 1066,
	-1000, -36, -1000, -1000, -1000, -1000, -1000, -1000, 307, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11773, 948, 11773, -1000, -1000, 1221, -1000, -1000,
	4, 2, 922, 937, 9497, 9243, 1135, 828, -1000, -1000,
	-1000, 17, 4095, 13725, 1039, 11773, 13725, 13725, 13725, -1000,
	13725, -1000, 915, -1000, 13725, -1000, 1, -7, -1000, 14945,
	-1000, 91, -1000, 300, 876, 14701, 1094, 866, -1000, 824,
	-1000, 755, 907, 7201, 7969, 144, -1000, -1000, 144, 144,
	7969, -1000, -1000, 13725, -11, 1219, 13725, 69, -1000, 19404,
	-1000, -1000, 7969, 7969, 7969, 7969, 7969, 708, -1000, -1000,
	-1000, 4605, -1000, -1000, 15, 297, 258, -1000, -1000, 295,
	15, -1000, -1000, -1000, -1000, 294, 1301, 327, -1000, -1000,
	-1000, 7969, 361, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1038, 293, 290, -1000, -1000, -1000, -1000, 288,
	283, 281, 280, 278, 277, 276, 274, 272, 271, 270,
	252, 246, 694, -1000, 381, -1000, -1000, 381, 381, -1000,
	190, 190, 204, -1000, -1000, -1000, 190, -1000, -1000, -1000,
	344, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 242, 69,
	-1000, -1000, -1000, 13725, 15, -1000, -1000, -1000, 7969, 3840,
	-46, -1000, 19947, -1000, -35, 737, -1000, 12749, 1176, 1166,
	1157, 13237, 528, 523, 13725, 13725, 369, 74, 1217, 74,
	11011, -1000, 13725, 13725, -1000, 13725, -1000, -1000, 13725, 13725,
	13725, -10, 12261, 522, -29, 12017, 13725, -1000, -15, -1000,
	-1000, 1022, 431, 678, 958, 715, -1000, -1000, -1000, -1000,
	-24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1274, -1000, -1000, -1000, -1000, 1290, -24, -1000, -1000,
	-1000, -1000, -1000, 1300, -1000, -1000, -1000, -1000, 4095, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13725, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 678, 958, -1000, -1000, 13237, 12505, 1062,
	786, 865, -1000, -1000, 338, 1061, -1000, -1000, -1000, -1000,
	19947, -1000, 19947, 607, 969, -1000, 969, -25, -1000, 19443,
	-1000, 237, -54, -1000, 369, 6671, 10757, 20475, 13725, 537,
	7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969,
	7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969, 7969,
	7969, 7969, 926, 494, 809, 771, 185, 4095, -1000, 1268,
	1268, 1268, 20135, 20135, 152, -17, 19042, -26, 15, -1000,
	-1000, 5885, 5629, 15, 3147, -1000, 550, 1289, 379, 19947,
	1045, 998, 230, 87, 86, 7969, 754, 7969, 8225, 7969,
	7969, 4861, 7969, 7969, 7969, 7969, 7969, 7969, -1000, 214,
	-1000, -1000, -1000, -1000, 1288, -1000, -1000, 1287, -1000, 536,
	1285, 369, 84, -1000, 2402, -1000, -1000, 6415, -1000, 636,
	13725, 13725, 13725, -1000, -1000, 854, 14457, -1000, 20475, 13725,
	-1000, 207, 205, 950, 935, 13725, 13725, 14213, 13969, 13725,
	629, 13725, 13725, 627, -1000, 620, 7969, 778, -1000, 10249,
	386, 13725, 620, 54, -1000, -1000, -1000, 337, 13725, -1000,
	-1000, -1000, 89, -1000, -28, -1000, -1000, 13725, 12017, -29,
	-30, -1000, -1000, 13725, 958, -1000, -1000, -1000, 605, -1000,
	667, -1000, 9751, -1000, -1000, -1000, 550, -1000, -41, -1000,
	-1000, -1000, -1000, 83, -33, -1000, -1000, -1000, -1000, 13725,
	238, 13725, 13725, 1059, 1298, 13725, -1000, -1000, -1000, 7969,
	-1000, -1000, -1000, -10, 13725, -1000, 996, -1000, -34, 1170,
	-135, 12993, -1000, 9995, -1000, 1230, -1000, -1000, -1000, -1000,
	63, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 204, 694, 190, 190, 190, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 344, -1000, 381, 381, 381, -1000, -1000,
	-1000, 349, 437, 437, 1223, 1223, 1223, 1223, 189, 189,
	256, 231, 2775, 2775, 2775, 398, 802, 802, 2775, 2775,
	2775, 20135, 20044, 206, 7969, 489, 735, 185, 7969, -1000,
	894, -1000, -1000, -1000, 1020, 178, 8225, 8225, -1000, -1000,
	-1000, 4605, -1000, -1000, 175, 7969, -1000, 7969, -50, -51,
	-1000, 19947, -1000, -58, -1000, -1000, -16, 7969, 7969, 7969,
	82, -1000, 488, -1000, 487, 484, 471, -1000, 174, 80,
	540, -1000, 7969, 710, 173, 172, 7969, -1000, -1000, 19871,
	79, 1018, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 78,
	19781, 76, 20266, -1000, 8225, 8225, 8225, 4605, 171, 71,
	19218, -81, 19756, 6927, 6927, 6927, 68, 19670, 7969, -81,
	18111, 2829, 2497, -59, -60, -67, 1284, -68, 66, 348,
	64, 996, -1000, -1000, 7969, -1000, -1000, -1000, 467, 457,
	1058, -1000, 843, -1000, 707, 7969, 13725, 166, 164, 689,
	-1000, 1057, 799, 1055, 799, -1000, -35, 661, -1000, -1000,
	456, -1000, 6671, 19947, 620, 1159, -77, -1000, -1000, -1000,
	-1000, 369, 11011, 6415, -83, -1000, -41, -1000, -41, -1000,
	-1000, -1000, -1000, -1000, -1000, 13725, -1000, 12505, 163, 13725,
	158, 157, 13725, -1000, 1094, -1000, 61, -1000, -1000, -1000,
	-1000, -1000, 993, 1199, 10757, 955, 953, 10757, 1107, 716,
	716, 716, -1000, 12993, 3572, -1000, -1000, 13725, 156, 10503,
	60, 1170, 314, 311, -1000, 1282, 7969, 206, 7969, 8225,
	8225, -1000, 206, -1000, -1000, -1000, -1000, 1012, 150, 7969,
	20475, 20233, 20181, -84, 5373, -48, 18864, 7969, -1000, -1000,
	258, -1000, 59, 6159, -1000, 19490, -8, -8, -1000, 885,
	793, 656, 601, 1278, 1297, 1088, -1000, 7969, 19580, -1000,
	11265, 370, 723, 18837, 20475, -1000, 7969, -1000, 1010, 7969,
	-1000, 20475, 8225, 8225, 8225, 8225, 8225, 8225, 8225, 8225,
	8225, 8225, 8225, 8225, 8225, 8225, 8225, 8225, 8225, 8225,
	8225, 934, 8225, 1260, 1260, 1260, -53, 5117, -1000, 1037,
	1010, 7969, 7969, 20475, 51, 46, 44, -1000, 7969, -81,
	7969, 7969, 7969, -1000, -1000, -1000, 43, -1000, 1276, -1000,
	-1000, -1000, 993, 19131, 13725, 13725, 13725, 1052, 1670, -1000,
	18816, -85, 13725, 13725, -1000, 946, 959, 421, 13725, -1000,
	13725, -1000, 13725, 13725, 13725, 13725, -75, -1000, 161, -10,
	13725, 620, -1000, -1000, 332, -1000, -1000, 8733, 148, 12505,
	8733, 776, -1000, -1000, 367, 7969, 7969, 1170, 10757, 10757,
	1636, 949, 10757, -1000, -1000, -1000, -1000, -1000, -1000, 943,
	142, 13725, 12993, 405, 1272, 40, 1220, 206, 2868, 2451,
	7969, 20475, 20212, -89, -1000, 7969, 7969, -1000, -91, -1000,
	7969, -1000, 19947, -1000, 1295, 7969, 38, 37, 36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 35, -1000, -1000, 19947,
	7969, -1000, -1000, 17873, 7969, 34, -1000, 32, 19947, 1037,
	19947, -1000, 642, 642, 1260, 1260, 1260, 1260, 267, 267,
	733, 434, 554, 554, 554, 420, 639, 639, 554, 554,
	554, 1008, 931, 133, 20314, 7969, -93, -1000, -1000, -1000,
	19947, 19947, 31, -1000, -1000, -1000, -81, 2220, 18771, 18546,
	-1000, 28, 367, -1000, -1000, -1000, -1000, 13725, -1000, 13725,
	-1000, 13725, 840, -1000, -1000, 930, 129, 8225, 13725, -1000,
	718, -95, -97, 822, -1000, 817, 7969, -1000, 20475, 799,
	799, -1000, 454, 452, -1000, 1104, 13725, 1150, -1000, -1000,
	-1000, 127, -101, -1000, 233, 1179, 7969, -1000, -1000, 120,
	8733, 27, -102, 13725, -1000, 13725, 19947, -81, -1000, 1636,
	-1000, 119, 7969, 10757, -1000, -146, -1000, 329, -1000, 13725,
	-103, -1000, -1000, 234, 65, -1000, 7969, 7969, 20212, -107,
	-1000, 20475, 206, 206, -1000, 18497, -1000, 19490, -1000, -1000,
	-1000, -1000, 19947, 701, -1000, 18470, -1000, -1000, -1000, 8225,
	1004, 116, 20475, 18451, -1000, -1000, 7969, -1000, -1000, -1000,
	-1000, -1000, 883, -1000, -1000, -1000, 7969, 20314, 92, -1000,
	111, -1000, -1000, -1000, 659, -1000, -1000, 19947, 1183, -1000,
	-1000, 13725, 13725, 507, -109, 13725, -1000, -1000, 4349, 718,
	8733, 1181, 15, 13725, 1181, 18188, 3147, -113, -1000, 718,
	108, -79, -1000, 1193, -1000, 13725, 19947, -1000, 943, -1000,
	4095, -114, -1000, -1000, -1000, 206, 206, -1000, -1000, -1000,
	25, 723, 1197, -1000, 20370, 8225, 20475, -119, -1000, 18157,
	-1000, 18136, 898, 13725, 13725, 13725, 392, 13725, -1000, -1000,
	566, -1000, 369, -1000, -1000, -1000, -1000, -1000, -1000, 1179,
	-16, 718, -1000, 8733, 13725, 105, -127, -1000, -1000, -1000,
	-1000, 690, 7969, 20370, -133, -1000, -1000, -1000, 761, 775,
	-137, -139, 92, -1000, 7969, -1000, 11011, -1000, 1181, 22,
	-1000, -141, -1000, -1000, -1000, 21, 7713, 7713, -81, -1000,
	-1000, 766, 764, 572, -1000, -1000, -1000, -1000, -1000, 898,
	19947, -121, -1000, -1000, 718, -1000, -1000, -1000, 8479, 779,
	614, 19179, -1000, -1000, 1108, -1000, 397, 893, 893, 761,
	-1000, -1000, 1225, -1000, -1000, -1000, -1000, -1000, -1000, 1229,
	-1000, -1000, 897, -1000, -1000, 7457, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1523, 1521, 1215, 1519, 1518, 1517, 1515, 1513, 80,
	1512, 1511, 96, 1510, 76, 1509, 1507, 1506, 1505, 45,
	1504, 1501, 1492, 1490, 1484, 72, 32, 122, 2100, 117,
	1482, 1481, 1478, 10, 85, 84, 1476, 29, 49, 70,
	93, 1499, 52, 1475, 115, 24, 42, 57, 77, 126,
	101, 106, 1474, 1472, 1471, 38, 1470, 1469, 1468, 11,
	43, 14, 1466, 23, 132, 1465, 1463, 83, 1459, 82,
	95, 28, 103, 229, 1458, 51, 13, 58, 1457, 35,
	1456, 41, 54, 116, 1455, 40, 212, 47, 22, 48,
	1453, 1452, 1451, 1450, 62, 66, 64, 1448, 1445, 61,
	1425, 111, 113, 1424, 1423, 105, 1422, 1419, 1418, 656,
	1417, 1413, 601, 6, 34, 50, 3, 94, 90, 27,
	1412, 17, 1409, 0, 744, 203, 1408, 39, 30, 56,
	36, 37, 15, 1407, 87, 1405, 1404, 1403, 1402, 1401,
	55, 1400, 59, 121, 33, 46, 69, 25, 44, 67,
	91, 127, 88, 1399, 99, 1398, 71, 1397, 1396, 672,
	63, 1395, 1394, 1393, 602, 592, 566, 239, 1392, 1391,
	546, 541, 1389, 1388, 65, 1387, 1384, 124, 1383, 119,
	21, 1382, 97, 1381, 78, 1379, 797, 68, 20, 1378,
	110, 53, 1372, 1370, 1369, 31, 2, 7, 4, 8,
	5, 18, 16, 1368, 1361, 107, 74, 1359, 133, 1355,
	1354, 26, 1353, 1352, 19, 1349, 12, 1339, 9, 1,
	1321, 123, 1317, 81, 1314, 1243, 1313, 125, 1312, 1308,
	1237, 60,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	72, 72, 71, 71, 74, 74, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 40, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 52, 52,
	52, 52, 52, 53, 53, 53, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 54, 54, 54, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 178, 178, 222, 222, 224,
	224, 8, 8, 55, 55, 56, 56, 115, 115, 115,
	114, 193, 193, 194, 194, 194, 195, 195, 195, 195,
	195, 195, 195, 192, 192, 190, 190, 191, 191, 191,
	191, 228, 228, 113, 113, 59, 59, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 199, 197, 200, 200,
	200, 200, 200, 143, 143, 143, 24, 7, 7, 98,
	98, 63, 63, 147, 147, 147, 46, 46, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 100, 100, 16, 20, 23, 23, 23, 23,
	23, 230, 230, 43, 43, 43, 43, 44, 44, 112,
	112, 112, 112, 112, 39, 6, 6, 38, 38, 14,
	14, 49, 49, 105, 105, 105, 107, 107, 107, 106,
	106, 106, 85, 85, 25, 76, 76, 77, 77, 153,
	78, 78, 19, 19, 28, 28, 26, 26, 26, 26,
	26, 26, 27, 27, 29, 29, 29, 29, 29, 29,
	29, 206, 206, 206, 208, 208, 205, 15, 15, 15,
	15, 207, 207, 229, 229, 86, 86, 86, 58, 57,
	57, 61, 61, 60, 62, 62, 146, 83, 83, 83,
	83, 101, 102, 102, 103, 103, 104, 104, 82, 82,
	130, 130, 30, 30, 67, 67, 68, 68, 121, 121,
	122, 122, 120, 120, 120, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 144, 144, 144, 144, 145,
	145, 89, 89, 89, 89, 87, 87, 88, 88, 150,
	150, 150, 150, 84, 84, 151, 151, 151, 116, 116,
	156, 156, 156, 66, 66, 66, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	160, 160, 160, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 161, 161, 168, 168,
	169, 169, 170, 171, 162, 162, 163, 163, 164, 165,
	172, 172, 172, 172, 174, 174, 166, 166, 166, 166,
	167, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	201, 201, 201, 201, 201, 201, 201, 203, 203, 204,
	204, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 209, 209, 210, 210,
	211, 211, 212, 212, 214, 215, 215, 215, 216, 220,
	220, 213, 213, 217, 217, 217, 218, 218, 219, 219,
	219, 219, 219, 134, 134, 134, 135, 135, 136, 73,
	73, 132, 132, 131, 131, 131, 133, 133, 90, 173,
	173, 173, 173, 173, 173, 173, 91, 91, 97, 92,
	92, 93, 93, 93, 93, 93, 93, 127, 128, 94,
	94, 94, 129, 129, 137, 141, 141, 140, 139, 139,
	138, 138, 119, 119, 119, 119, 118, 117, 79, 79,
	231, 231, 142, 142, 80, 80, 81, 75, 75, 152,
	152, 152, 152, 69, 69, 51, 51, 70, 70, 47,
	47, 50, 48, 48, 48, 48, 64, 64, 65, 65,
	45, 45, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 175, 175, 175, 41, 41, 41, 42,
	42, 181, 181, 181, 182, 182, 182, 182, 180, 180,
	180, 180, 180, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 2, 0, 8, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 2, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 90, 103, 191,
	198, -26, -28, 205, 206, 29, 213, 52, 86, 193,
	188, 232, 58, -206, -29, -27, 277, 253, 259, 201,
	-30, 219, 246, 280, 219, 70, 114, 78, 118, 240,
	239, 70, 114, 219, -12, 277, -19, -14, -25, -9,
	-225, 18, -226, -227, 58, 83, 103, 201, 118, 78,
	239, -225, -44, 198, -41, 4, -186, -188, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 97, 99, 104, 109, 110,
	115, 118, 127, 129, 130, 135, 138, 141, 143, 144,
	145, 146, 147, 149, 150, 152, 154, 151, 157, 159,
	160, 166, 169, 172, 173, 176, 179, 180, 181, 183,
	184, 188, 186, 187, 189, 191, 193, 194, 196, 199,
	200, 202, 203, 205, 206, 208, 210, 212, 213, 216,
	214, 220, 221, 228, 232, 233, 234, 235, 238, 239,
	240, 243, 244, 245, 249, 254, 255, 256, 257, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 105, 107, 111, 112,
	119, 120, 121, 124, 133, 156, 158, 167, 171, 175,
	177, 182, 195, 209, 215, 217, 223, 224, 225, 229,
	230, 246, 247, -109, 138, 203, 228, -110, -108, -179,
	223, 147, -71, -41, 198, 4, 70, 51, 71, 104,
	114, 115, 130, 220, 223, 228, 18, 58, -230, 228,
	228, -230, -230, -43, 228, 226, -44, -229, 219, 219,
	-98, 70, 237, -27, -29, -28, -60, -61, 236, 123,
	88, 165, -26, -28, -206, -208, 183, -205, -41, -208,
	-57, -58, 18, 80, 281, -150, -47, 163, -41, -81,
	277, -3, -150, 111, -41, -50, 111, -47, 101, 125,
	125, -151, -150, -41, 111, -51, 111, -50, -72, 111,
	-71, -155, -154, -182, 4, -186, -188, -187, 246, 49,
	59, 102, 117, 126, 128, 134, 136, 148, 168, 170,
	192, 207, 162, 281, 162, -41, -109, 45, -109, -111,
	-39, -40, 127, 179, 226, 262, 101, 257, -54, 5,
	76, -74, 279, 101, -222, 162, 101, 101, 101, -178,
	101, 257, 127, 179, 219, -112, -39, -40, -112, 226,
	-44, -84, -150, -71, 111, 114, -41, 111, -60, -61,
	-83, -101, -102, 137, 161, -86, 18, 80, -86, -86,
	37, 278, 278, 281, -208, -65, 277, -75, -152, -123,
	270, -125, 268, 269, 274, 153, 258, -134, -47, -126,
	9, 277, -137, -203, -28, 89, 24, -135, -136, 195,
	-41, 7, 8, 5, 6, -45, -158, -167, 231, 92,
	155, 41, -201, -202, 4, -186, -181, -159, -169, -163,
	-166, 124, 49, 63, 66, 64, 67, 204, 241, 42,
	91, 171, 175, 217, 229, 230, 111, 156, 112, 47,
	105, 133, 82, 31, 32, 34, 35, 43, 44, 72,
	74, 75, 96, 119, 120, 121, 158, 182, 209, 215,
	224, 225, 247, -187, -170, -171, -164, -165, -172, -75,
	-81, 270, -47, 277, -79, -119, -118, -117, 275, 279,
	-80, -142, -123, 76, -35, 186, -34, 17, 19, 83,
	244, 89, 186, 186, 89, 282, -151, -49, -47, -49,
	205, -41, 25, 89, -37, 281, 40, 189, 89, 281,
	89, 278, 281, -221, -70, 219, 70, -48, -41, 270,
	-227, -221, 25, 281, 281, 135, -53, 141, 152, 109,
	-177, 76, -184, -176, -143, 9, 231, 92, 162, -183,
	8, 269, -175, -182, 5, 7, 268, -177, 76, 61,
	-185, 5, 4, -167, -143, 76, 138, 124, 279, -180,
	4, -186, -188, -187, -189, 18, 20, 21, 22, 23,
	24, 25, 26, 27, 36, 41, 42, 46, 48, 50,
	56, 58, 62, 63, 64, 65, 66, 67, 76, 77,
	79, 80, 81, 84, 86, 88, 92, 93, 98, 100,
	101, 103, 106, 108, 113, 114, 116, 123, 125, 131,
	132, 137, 139, 140, 153, 155, 161, 162, 163, 164,
	165, 174, 178, 185, 190, 201, 204, 211, 218, 219,
	222, 226, 227, 231, 236, 237, 241, 242, 248, 250,
	251, 252, 253, -179, -224, 98, -221, -179, -179, -179,
	-179, 135, -179, 281, 281, -44, -37, 281, 277, 153,
	-42, 111, -41, -38, 85, 153, -83, -102, -101, -103,
	-123, 18, -123, -125, -27, -27, -27, -62, -146, -123,
	-205, 25, -64, -41, -67, 281, 101, 10, 48, 28,
	268, 269, 270, 271, 122, 272, 265, 266, 267, 264,
	260, 261, 262, 54, 142, 197, 12, 13, 14, 22,
	164, 136, 258, 207, 126, 30, 113, 25, 4, -123,
	-123, -123, -123, -123, 170, -28, -123, -73, -79, -28,
	-131, 275, 277, -79, 277, 5, 5, 277, -138, -123,
	-209, 254, 98, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 177, -174,
	249, -174, -174, -160, 277, -160, -161, 277, -160, 259,
	277, -67, -47, -119, -123, -180, 270, 281, 278, 281,
	226, -99, 56, 50, -114, 111, 50, -190, -41, 56,
	-191, 46, 237, 178, 100, -99, 56, -99, 56, 56,
	-150, 226, 226, -50, -41, -116, 251, -105, -19, 277,
	76, 25, -105, -76, -77, -153, -78, -47, 277, -41,
	-41, -50, -51, -71, -72, -12, -154, 226, 281, -70,
	-64, -118, -117, 101, 228, -40, -39, -52, 181, 210,
	187, 202, 281, 8, 7, 7, 5, -180, -223, -41,
	-40, -39, -150, -55, -56, -115, -114, -192, -190, 114,
	237, 89, 162, 153, 262, 89, -104, 195, 196, 281,
	-33, 26, 79, 277, 281, 278, -116, -152, -68, -148,
	-150, -28, -149, 277, -156, -157, -159, -168, -162, -166,
	-167, 33, 39, 38, 221, 119, 120, 121, 209, 31,
	182, 96, 82, 75, 74, 158, 35, 34, -170, -171,
	-164, -165, 72, 224, 225, 32, 44, 43, 247, 215,
	-71, 223, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, 136, 207, 30, 113, 226, 155,
	153, 231, 92, 238, 80, 159, -231, 218, 27, -129,
	-28, 277, -180, -134, 195, 277, 278, 281, -73, -133,
	276, -123, -131, -73, 278, 278, -73, 248, 18, 80,
	270, -95, 256, 145, 73, 110, 144, -96, 200, 7,
	-141, -140, 250, -210, 94, 106, 277, 278, 278, -123,
	-90, -173, 4, 256, 145, 73, 110, 144, 200, -91,
	-123, -92, -124, -125, 268, 269, 274, 277, 195, -93,
	-123, -73, -123, 36, 132, 227, -94, -123, 101, -73,
	-123, -123, -123, -73, -73, -73, 277, 7, 7, 223,
	7, -116, 278, 276, 285, -142, -34, -47, -41, -41,
	153, -114, 111, -156, -41, 277, 277, 129, 129, -41,
	-41, 111, -41, 111, -41, -41, -35, 186, -41, -41,
	186, -85, 190, -123, -107, 162, -69, -47, 246, -41,
	-85, -67, 281, 262, -69, -37, -223, -48, -223, -39,
	235, 53, 181, -184, -95, 281, 278, 281, -42, 114,
	-71, -47, 89, 5, -41, -146, -15, -19, -14, -25,
	-9, -41, -82, 106, 281, 59, -89, 128, 148, 102,
	134, 192, 117, -120, 282, -145, -144, 25, -41, -28,
	-149, -148, -66, 24, -95, 277, 257, -123, 226, -231,
	218, -129, -123, 155, 231, 92, 238, 80, 159, 101,
	277, -124, -124, -73, 277, -73, -123, 281, 276, 276,
	281, 278, -61, 281, -60, -123, -73, -73, 278, 226,
	226, 226, 226, 277, 278, -139, -140, 84, -123, -215,
	169, 277, 277, -123, 25, 278, 101, 278, -97, 174,
	278, 10, 268, 269, 270, 271, 122, 272, 265, 266,
	267, 264, 260, 261, 262, 54, 142, 197, 12, 13,
	14, 126, 113, -124, -124, -124, -73, 277, 278, -127,
	-128, 101, 98, 25, -94, -94, -94, 278, 101, -73,
	281, 281, 281, 278, 278, 278, 7, 278, 281, 278,
	257, 278, -82, -123, 226, 226, 89, 153, -193, -191,
	-123, -64, 277, 277, -32, 83, 205, -100, 89, -37,
	89, -37, 226, -99, 56, 226, -75, -85, 55, 278,
	281, -116, -77, -142, 278, -41, -115, 277, -42, 277,
	277, -41, -38, 278, -130, 108, 37, -148, 128, 128,
	-148, -89, 128, -87, 168, -87, -87, -145, -180, 283,
	-41, 277, 278, 275, 275, 7, -123, -123, -124, -124,
	101, 277, -123, -132, -156, 22, 22, 278, -73, 278,
	281, 278, -123, -131, 278, 248, -61, -61, -61, 145,
	110, 144, -96, 144, -96, -96, 7, 5, 86, -123,
	222, -216, -41, 277, 251, -60, 278, -156, -123, -127,
	-123, -156, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, 80, 153, 159, -124, 281, -73, 278, -128, -127,
	-123, -123, -156, 278, 278, 278, -73, -123, -123, -123,
	278, 7, -130, 276, -41, -41, -114, 89, -194, 56,
	-195, 48, 153, 155, 237, 178, 46, 76, 185, 278,
	278, -64, -64, 153, 76, 153, 76, 69, 233, -41,
	-41, -47, -41, -41, -41, -106, 277, 162, -19, -47,
	-85, 262, -63, -147, -41, -204, 277, -201, -202, -45,
	277, -55, -63, 162, -211, 252, -123, -73, -148, -148,
	-88, 242, 162, 128, -148, -122, -121, 99, 151, 277,
	-64, -144, 276, 7, 7, 278, 22, 22, -123, -132,
	278, 281, -123, -123, 278, -123, 5, -123, 278, 278,
	278, 278, -123, -220, -41, -123, 278, 278, -128, 101,
	80, 159, 277, -123, 278, 278, 281, 278, 278, 278,
	-211, -114, -41, -71, 155, 129, 277, -124, -47, -113,
	-228, 57, 216, 278, 278, 155, 155, -123, -156, -37,
	-37, 226, 226, 81, -64, 56, -81, -28, 277, 278,
	281, -46, -79, 48, -46, -123, 277, -63, 278, 278,
	-47, -212, -214, -41, -88, 277, -123, -148, 281, 284,
	262, -64, 278, 276, 276, -123, -123, 278, -156, 278,
	-61, -213, 173, 278, -124, 101, 277, -132, 278, -123,
	-195, -123, -59, 277, 277, 185, -36, 48, -41, -41,
	239, 154, 278, -41, -113, -147, -33, -71, -33, 278,
	-73, 278, -113, 277, 281, 25, -64, -121, -180, 278,
	278, -61, 37, -124, -132, 278, 278, 278, -198, 143,
	-64, -64, -47, -31, 242, -71, 205, -116, -46, -61,
	-113, -63, -214, -216, 278, -217, 180, 196, -73, 278,
	-196, -199, -197, 162, 102, 172, 208, 278, 278, -59,
	-123, -76, -33, 278, 278, 278, -218, -219, 30, 234,
	61, -123, -218, -197, 162, -199, 162, 239, 78, -198,
	-116, -113, -219, 176, 97, 195, 176, 97, -200, 150,
	189, 40, 205, -200, -196, 22, 16, 155, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 322, 0, 0,
	0, 292, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 324, 220, 321, -2, 332, 0, 0, 0, 330,
	306, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 824, 258, 736, 737, 738, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 825,
	826, 827, 828, 829, 830, 831, 832, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 93, 791, 828, 839, 98, 108, 0,
	892, -2, 112, 62, 824, 141, 142, 0, 144, 158,
	0, 0, 0, 156, 0, 0, 153, 0, 263, 251,
	263, 248, 249, 250, 253, 0, 244, 0, 323, 0,
	0, 0, 219, -2, 302, 303, -2, 0, 327, 327,
	327, 0, 0, 303, 0, 311, 814, 314, 719, 312,
	0, 0, 329, 328, 0, 307, 389, 0, 709, 352,
	0, 2, 0, 874, 0, 0, 874, 0, 0, 0,
	0, 0, 395, 54, 874, 45, 874, 705, 58, 874,
	60, 0, 72, 74, 744, 745, 746, 747, 897, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 0, 0, 0, 257, 94, 864, 96, 97,
	99, 100, 0, 0, 0, 0, 0, 0, 111, 136,
	137, 63, 0, 0, 160, 0, 0, 0, 0, 149,
	0, 150, 0, 152, 0, 246, 259, 260, 247, 0,
	255, 45, 393, 0, 874, 740, 268, 874, -2, 0,
	298, 339, 340, 0, 0, 0, 325, 326, 0, 0,
	0, 294, 295, 0, 313, 0, 0, 355, 697, 701,
	702, 477, 0, 0, 0, 0, 0, 0, 558, 559,
	560, 0, 562, 563, 564, 869, 0, 568, 569, 888,
	709, 722, 723, 724, 725, 0, 0, 0, 730, 731,
	732, 681, 607, 578, -2, -2, 720, 416, 417, 418,
	419, -2, 899, 582, 584, 586, 587, 588, 589, 0,
	870, 884, 885, 891, 895, 896, 874, 881, 875, 865,
	872, 880, 774, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 743, 440, 441, 446, 447, 449, 355,
	353, 390, 391, 0, 710, 688, 682, 683, 0, 0,
	0, 694, 692, 693, 22, 241, 24, 0, 241, 241,
	0, 0, 0, 0, 0, 0, 399, 0, 271, 0,
	0, 396, 0, 0, 56, 0, 43, 44, 0, 0,
	0, 322, 0, 0, 77, 0, 770, 707, 712, 715,
	83, 0, 0, 0, 0, 0, 103, 123, 124, 125,
	104, 106, 113, 115, 116, 117, 126, 127, 128, 129,
	213, 0, 215, 139, 140, 733, 0, 105, 107, 109,
	110, 130, 131, 0, 133, 134, 135, 460, 0, 64,
	748, 749, 750, 751, 752, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 143, 145, 0, 157, 146, 147, 148,
	155, 151, 154, 0, 0, 254, 216, 0, 164, 0,
	0, 874, 739, 265, 0, 0, 301, 337, 338, 341,
	344, 345, 342, 477, 308, 309, 310, 333, 334, 230,
	315, 0, 0, 716, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 0, 700, 481,
	482, 483, 505, 506, 0, -2, 639, 0, 565, 566,
	567, 0, 0, -2, 0, 727, 474, 0, 0, 680,
	609, 0, 0, 0, 0, 0, 0, 0, 660, 666,
	0, 0, 0, 0, 0, 0, 0, 0, 430, 443,
	454, 451, 450, 432, 0, 431, 429, 0, 433, 0,
	0, 399, 0, 689, 0, 686, 687, 0, 696, 0,
	0, 0, 0, 240, 26, 874, 0, 36, 0, 0,
	186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 283, 0, 278, 273, 0,
	0, 0, 283, 355, 285, 287, 288, 0, 0, 397,
	55, 706, 45, 61, 59, 67, 73, 0, 0, 78,
	79, 713, 714, 0, 0, 101, 102, 264, 0, 120,
	0, 122, 0, 214, 735, 734, 474, 65, 159, 91,
	261, 262, 394, 0, 163, 165, 167, 168, 169, 740,
	0, 0, 0, 0, 0, 0, 343, 346, 347, 0,
	336, 228, 229, 322, 0, 718, 349, 698, 354, 356,
	364, 380, 367, 0, 478, 405, 406, 407, 408, 409,
	474, 412, 413, 414, 415, 423, 424, 425, 426, 427,
	428, 437, 0, 422, 422, 422, 434, 435, 438, 439,
	444, 445, 456, 457, 458, 455, 455, 455, 452, 453,
	479, 0, 484, 485, 486, 487, 488, 489, 490, 491,
	492, 493, -2, -2, -2, 497, 498, 499, -2, -2,
	-2, 503, 504, -2, 0, 0, 691, 0, 0, 511,
	0, 514, 516, 518, 0, 0, 0, 0, 690, 528,
	672, 0, 699, 513, 0, 0, 561, 0, 0, 0,
	645, 639, 646, 0, -2, 570, 332, 0, 0, 0,
	0, 728, 461, 462, 463, 464, 465, 466, 475, 0,
	679, 675, 0, 617, 0, 0, 0, 583, 585, 0,
	0, 0, 649, 650, 651, 652, 653, 654, 655, 0,
	0, 0, 0, 530, 0, 0, 0, 0, 888, 0,
	639, 665, 0, 0, 0, 0, 0, 639, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 349, 392, 684, 0, 695, 25, 232, 0, 0,
	0, 28, 874, 172, 0, 0, 0, 0, 0, 243,
	37, 874, 45, 874, 45, 38, 23, 241, 231, 234,
	0, 53, 0, 398, 283, 0, 0, 703, 275, 272,
	270, 399, 0, 0, 0, 57, 75, 708, 76, 95,
	118, 119, 121, 114, 132, 0, 161, 0, 0, 740,
	0, 0, 0, 267, 268, 335, 0, 317, 318, 319,
	320, 717, 351, 0, 0, 0, 0, 0, 0, 386,
	386, 386, 384, 380, 0, 366, 379, 0, 378, -2,
	367, 0, 400, 402, 410, 0, 0, -2, 0, 0,
	0, 529, -2, 512, 515, 517, 519, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 640, 0, 643, 644,
	0, -2, 0, 0, 331, 332, 332, 332, 576, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 0, 577,
	0, 0, 0, 0, 0, 591, 0, 592, 0, 0,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 532, 533, 534, 0, 0, 594, 663,
	664, 0, 0, 0, 0, 0, 0, 599, 0, 670,
	0, 0, 0, 603, 604, 605, 0, 420, 0, 436,
	459, 448, 351, 0, 0, 0, 0, 0, 170, 185,
	0, 0, 0, 0, 30, 0, 0, 0, 0, 34,
	0, 40, 0, 0, 0, 0, 282, 269, 281, 0,
	0, 283, 286, 289, 0, 92, 166, 0, 0, 164,
	0, 0, 266, 316, 611, 0, 0, 357, 0, 0,
	0, 0, 0, 381, 385, 382, 383, 365, 362, 0,
	376, 0, 369, 0, 0, 0, 480, -2, 0, 0,
	0, 0, -2, 0, 641, 0, 0, 673, 0, 634,
	0, -2, 640, 647, 571, 0, 0, 0, 0, 467,
	468, 469, 470, 471, 472, 473, 0, 729, 674, 678,
	0, 615, 616, 620, 0, 0, 581, 0, 648, 657,
	658, 531, 535, 536, 537, 538, 539, 540, 541, 542,
	543, 544, -2, -2, -2, 548, 549, 550, -2, -2,
	-2, 0, 0, 0, 659, 0, 0, 637, 661, 662,
	667, 668, 0, 596, 597, 598, 669, 0, 0, 0,
	442, 0, 611, 685, 236, 238, 27, 0, 171, 0,
	174, 0, 0, 177, 178, 0, 0, 0, 0, 187,
	194, 0, 0, 0, 42, 0, 0, 242, 0, 45,
	45, 233, 0, 0, 235, 0, 0, 0, 274, 704,
	284, 0, 0, 221, 227, 227, 0, 579, 580, 0,
	0, 0, 0, 0, 304, 0, 350, 348, 370, 0,
	372, 0, 0, 0, 374, 0, 360, 0, 359, 0,
	0, 368, 403, 0, 0, 411, 0, 0, -2, 0,
	522, 0, -2, -2, 633, 640, 726, 332, 572, 574,
	575, 476, 677, 622, 619, 0, 606, 590, 656, 0,
	0, 0, 0, 640, 636, 595, 0, 601, 602, 421,
	305, 29, 0, 175, 176, 179, 0, 181, 196, 188,
	0, 191, 192, 189, 0, 31, 32, 41, 47, 33,
	39, 0, 0, 0, 0, 0, 290, 291, 0, 194,
	0, 230, 721, 0, 230, 0, 0, 0, 162, 194,
	0, 610, 612, 0, 371, 0, 388, 373, 0, 363,
	0, 0, 377, 404, 401, -2, -2, 523, 642, 635,
	0, 332, 0, 608, -2, 0, 0, 0, 638, 0,
	173, 0, 200, 0, 0, 0, 49, 0, 237, 239,
	0, 277, 399, 280, 183, 222, 223, 226, 224, 227,
	332, 194, 217, 0, 0, 0, 0, 361, 358, 375,
	573, 625, 0, -2, 0, 556, 600, 180, 205, 0,
	0, 0, 196, 35, 0, 46, 0, 279, 230, 0,
	184, 0, 613, 614, 387, 0, 0, 0, 621, 557,
	182, 201, 202, 0, 197, 198, 199, 195, 193, 200,
	48, 399, 225, 571, 194, 618, 623, 626, -2, 842,
	767, 0, 624, 203, 0, 204, 0, 0, 0, 205,
	276, 218, 0, 628, 629, 630, 631, 632, 206, 0,
	209, 210, 0, 207, 190, 0, 208, 211, 212, 627,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 266, 3, 272, 267, 3,
	277, 278, 270, 268, 281, 269, 279, 271, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 285, 280,
	260, 262, 261, 3, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 275, 3, 276, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 283, 264, 284, 274,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 263, 57603, 273, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:661
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:667
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:673
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:713
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:777
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:835
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:836
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:840
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1507
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1557
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1650
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = (*OnConflict)(nil)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1897
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = nil
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2148
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2156
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2169
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = false
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = false
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2197
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2297
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2395
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.str = astFullJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.str = astLeftJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.str = astRightJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.str = astInnerJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2526
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2551
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2616
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2620
		{
			unimplemented()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			unimplemented()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2622
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2630
		{
			unimplemented()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2665
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2674
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = nil
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2791
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2818
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2888
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2891
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2894
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2930
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2951
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: IntDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: IntDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3313
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3314
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3355
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3396
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3440
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3441
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3444
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3449
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3450
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3461
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3462
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3482
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3496
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3502
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3506
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3833
		{
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4025
		{
			unimplemented()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = DNull
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
