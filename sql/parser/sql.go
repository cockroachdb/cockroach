// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEALLOCATE = 57420
const DEFERRABLE = 57421
const DELETE = 57422
const DESC = 57423
const DISTINCT = 57424
const DO = 57425
const DOUBLE = 57426
const DROP = 57427
const ELSE = 57428
const ENCODING = 57429
const END = 57430
const ESCAPE = 57431
const EXCEPT = 57432
const EXISTS = 57433
const EXECUTE = 57434
const EXPLAIN = 57435
const EXTRACT = 57436
const FALSE = 57437
const FAMILY = 57438
const FETCH = 57439
const FILTER = 57440
const FIRST = 57441
const FLOAT = 57442
const FLOORDIV = 57443
const FOLLOWING = 57444
const FOR = 57445
const FORCE_INDEX = 57446
const FOREIGN = 57447
const FROM = 57448
const FULL = 57449
const GRANT = 57450
const GRANTS = 57451
const GREATEST = 57452
const GROUP = 57453
const GROUPING = 57454
const HAVING = 57455
const HIGH = 57456
const HOUR = 57457
const IF = 57458
const IFNULL = 57459
const IN = 57460
const INDEX = 57461
const INDEXES = 57462
const INITIALLY = 57463
const INNER = 57464
const INSERT = 57465
const INT = 57466
const INT64 = 57467
const INTEGER = 57468
const INTERSECT = 57469
const INTERVAL = 57470
const INTO = 57471
const IS = 57472
const ISOLATION = 57473
const JOIN = 57474
const KEY = 57475
const KEYS = 57476
const LATERAL = 57477
const LEADING = 57478
const LEAST = 57479
const LEFT = 57480
const LEVEL = 57481
const LIKE = 57482
const LIMIT = 57483
const LOCAL = 57484
const LOCALTIME = 57485
const LOCALTIMESTAMP = 57486
const LOW = 57487
const LSHIFT = 57488
const MATCH = 57489
const MINUTE = 57490
const MONTH = 57491
const NAME = 57492
const NAMES = 57493
const NATURAL = 57494
const NEXT = 57495
const NO = 57496
const NO_INDEX_JOIN = 57497
const NORMAL = 57498
const NOT = 57499
const NOTHING = 57500
const NULL = 57501
const NULLIF = 57502
const NULLS = 57503
const NUMERIC = 57504
const OF = 57505
const OFF = 57506
const OFFSET = 57507
const ON = 57508
const ONLY = 57509
const OR = 57510
const ORDER = 57511
const ORDINALITY = 57512
const OUT = 57513
const OUTER = 57514
const OVER = 57515
const OVERLAPS = 57516
const OVERLAY = 57517
const PARTIAL = 57518
const PARTITION = 57519
const PLACING = 57520
const POSITION = 57521
const PRECEDING = 57522
const PRECISION = 57523
const PREPARE = 57524
const PRIMARY = 57525
const PRIORITY = 57526
const RANGE = 57527
const READ = 57528
const REAL = 57529
const RECURSIVE = 57530
const REF = 57531
const REFERENCES = 57532
const RENAME = 57533
const REPEATABLE = 57534
const RELEASE = 57535
const RESTRICT = 57536
const RETURNING = 57537
const REVOKE = 57538
const RIGHT = 57539
const ROLLBACK = 57540
const ROLLUP = 57541
const ROW = 57542
const ROWS = 57543
const RSHIFT = 57544
const SAVEPOINT = 57545
const SEARCH = 57546
const SECOND = 57547
const SELECT = 57548
const SERIAL = 57549
const SERIALIZABLE = 57550
const SESSION = 57551
const SESSION_USER = 57552
const SET = 57553
const SHOW = 57554
const SIMILAR = 57555
const SIMPLE = 57556
const SMALLINT = 57557
const SMALLSERIAL = 57558
const SNAPSHOT = 57559
const SOME = 57560
const SQL = 57561
const START = 57562
const STRICT = 57563
const STRING = 57564
const STORING = 57565
const SUBSTRING = 57566
const SYMMETRIC = 57567
const SYSTEM = 57568
const TABLE = 57569
const TABLES = 57570
const TEXT = 57571
const THEN = 57572
const TIME = 57573
const TIMESTAMP = 57574
const TIMESTAMPTZ = 57575
const TO = 57576
const TRAILING = 57577
const TRANSACTION = 57578
const TREAT = 57579
const TRIM = 57580
const TRUE = 57581
const TRUNCATE = 57582
const TYPE = 57583
const UNBOUNDED = 57584
const UNCOMMITTED = 57585
const UNION = 57586
const UNIQUE = 57587
const UNKNOWN = 57588
const UPDATE = 57589
const UPSERT = 57590
const USER = 57591
const USING = 57592
const VALID = 57593
const VALIDATE = 57594
const VALUE = 57595
const VALUES = 57596
const VARCHAR = 57597
const VARIADIC = 57598
const VARYING = 57599
const WHEN = 57600
const WHERE = 57601
const WINDOW = 57602
const WITH = 57603
const WITHIN = 57604
const WITHOUT = 57605
const YEAR = 57606
const ZONE = 57607
const NOT_LA = 57608
const WITH_LA = 57609
const AS_LA = 57610
const POSTFIXOP = 57611
const UMINUS = 57612

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4559

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	289, 24,
	-2, 346,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 321,
	166, 321,
	195, 321,
	287, 321,
	289, 321,
	-2, 331,
	-1, 50,
	1, 324,
	166, 324,
	195, 324,
	287, 324,
	289, 324,
	-2, 330,
	-1, 59,
	1, 24,
	289, 24,
	-2, 346,
	-1, 265,
	1, 159,
	289, 159,
	-2, 831,
	-1, 296,
	141, 356,
	165, 356,
	-2, 327,
	-1, 299,
	141, 355,
	165, 355,
	-2, 325,
	-1, 418,
	141, 355,
	165, 355,
	-2, 328,
	-1, 474,
	286, 773,
	-2, 766,
	-1, 475,
	286, 774,
	-2, 767,
	-1, 481,
	5, 490,
	286, 490,
	-2, 916,
	-1, 503,
	5, 456,
	-2, 892,
	-1, 504,
	5, 484,
	286, 484,
	-2, 894,
	-1, 505,
	5, 464,
	-2, 895,
	-1, 506,
	5, 463,
	-2, 896,
	-1, 507,
	5, 484,
	286, 484,
	-2, 899,
	-1, 508,
	5, 484,
	286, 484,
	-2, 900,
	-1, 509,
	5, 485,
	-2, 903,
	-1, 510,
	5, 451,
	-2, 904,
	-1, 511,
	5, 451,
	-2, 905,
	-1, 512,
	5, 466,
	-2, 908,
	-1, 513,
	5, 452,
	-2, 913,
	-1, 514,
	5, 453,
	-2, 914,
	-1, 515,
	5, 454,
	-2, 915,
	-1, 516,
	5, 451,
	-2, 919,
	-1, 517,
	5, 457,
	-2, 924,
	-1, 518,
	5, 455,
	-2, 927,
	-1, 519,
	5, 482,
	286, 482,
	-2, 929,
	-1, 520,
	5, 486,
	-2, 932,
	-1, 521,
	5, 488,
	-2, 933,
	-1, 522,
	5, 481,
	286, 481,
	-2, 937,
	-1, 832,
	90, 331,
	127, 331,
	141, 331,
	165, 331,
	169, 331,
	244, 331,
	-2, 594,
	-1, 840,
	286, 751,
	-2, 740,
	-1, 1028,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 524,
	-1, 1029,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 525,
	-1, 1030,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 526,
	-1, 1034,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 530,
	-1, 1035,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 531,
	-1, 1036,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 532,
	-1, 1039,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 537,
	-1, 1069,
	174, 664,
	-2, 667,
	-1, 1228,
	90, 331,
	127, 331,
	141, 331,
	165, 331,
	169, 331,
	244, 331,
	-2, 404,
	-1, 1232,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 538,
	-1, 1237,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 539,
	-1, 1255,
	174, 663,
	-2, 666,
	-1, 1408,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 540,
	-1, 1413,
	130, 0,
	-2, 550,
	-1, 1421,
	174, 665,
	-2, 668,
	-1, 1453,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 575,
	-1, 1454,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 576,
	-1, 1455,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 577,
	-1, 1459,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 581,
	-1, 1460,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 582,
	-1, 1461,
	12, 0,
	13, 0,
	14, 0,
	269, 0,
	270, 0,
	271, 0,
	-2, 583,
	-1, 1564,
	130, 0,
	-2, 551,
	-1, 1567,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 554,
	-1, 1568,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 556,
	-1, 1650,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 555,
	-1, 1651,
	30, 0,
	118, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 557,
	-1, 1658,
	130, 0,
	-2, 584,
	-1, 1699,
	130, 0,
	-2, 585,
	-1, 1747,
	30, 0,
	140, 0,
	213, 0,
	266, 0,
	-2, 891,
}

const sqlNprod = 1030
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21851

var sqlAct = [...]int{

	475, 1746, 1727, 1603, 1768, 1728, 1745, 913, 1729, 1001,
	1527, 1704, 921, 665, 789, 473, 1638, 1432, 472, 1556,
	1537, 266, 1491, 535, 1548, 1625, 1225, 465, 1528, 322,
	300, 835, 83, 83, 83, 985, 577, 83, 564, 1542,
	83, 37, 982, 1388, 17, 1258, 1160, 83, 1224, 1010,
	1308, 1215, 578, 837, 83, 83, 1397, 467, 83, 770,
	1309, 83, 83, 83, 437, 984, 922, 83, 83, 83,
	83, 84, 348, 1211, 1117, 72, 767, 544, 1079, 541,
	1055, 889, 1114, 639, 898, 1052, 1013, 936, 952, 307,
	49, 343, 624, 447, 305, 23, 785, 299, 13, 1166,
	6, 945, 650, 791, 1011, 536, 406, 438, 977, 407,
	621, 546, 345, 305, 8, 537, 7, 5, 523, 341,
	49, 4, 70, 915, 338, 310, 77, 421, 254, 76,
	340, 78, 866, 988, 420, 422, 870, 620, 263, 641,
	245, 557, 637, 349, 334, 79, 914, 74, 73, 49,
	50, 308, 75, 566, 1645, 566, 425, 1646, 1775, 304,
	51, 1005, 318, 1742, 566, 325, 1624, 1735, 1223, 1726,
	1005, 335, 942, 80, 346, 289, 1720, 1172, 949, 1005,
	1701, 1695, 1685, 942, 1005, 1624, 1676, 555, 1652, 1005,
	350, 942, 1649, 328, 1635, 1005, 1632, 1624, 1623, 1633,
	297, 1624, 1608, 304, 1607, 1005, 312, 1005, 1588, 1569,
	296, 955, 955, 48, 1566, 1501, 525, 942, 1005, 950,
	1280, 955, 1297, 1298, 1299, 1417, 1365, 55, 955, 1360,
	1359, 1326, 1563, 1360, 1327, 1324, 793, 1323, 955, 29,
	955, 83, 918, 793, 1253, 1252, 524, 30, 57, 1254,
	955, 1322, 951, 948, 955, 1255, 83, 1689, 955, 83,
	83, 1006, 1627, 954, 1005, 1294, 955, 941, 886, 572,
	942, 885, 573, 792, 1466, 58, 1420, 1197, 887, 1213,
	1257, 1199, 53, 1005, 957, 1063, 1000, 971, 54, 83,
	433, 83, 761, 83, 448, 83, 538, 760, 631, 432,
	539, 630, 55, 373, 317, 59, 567, 52, 567, 953,
	83, 1285, 538, 539, 413, 664, 539, 567, 392, 1744,
	1741, 83, 1734, 57, 955, 1696, 1634, 419, 1593, 1589,
	1581, 1580, 83, 83, 83, 1575, 83, 1574, 1573, 1526,
	1300, 1481, 418, 1519, 480, 1476, 1475, 530, 1474, 1423,
	58, 1406, 319, 534, 1387, 319, 1295, 330, 1369, 1331,
	55, 319, 1328, 330, 1316, 1307, 83, 380, 947, 1279,
	381, 55, 1276, 83, 1274, 83, 1263, 1262, 1198, 529,
	569, 57, 52, 1060, 1131, 348, 348, 1086, 1085, 843,
	946, 1737, 57, 667, 83, 412, 83, 83, 83, 83,
	432, 83, 570, 1201, 565, 83, 431, 1434, 58, 1525,
	83, 1688, 1296, 764, 1668, 53, 83, 410, 1667, 58,
	1172, 54, 1660, 838, 1641, 584, 53, 792, 1630, 1622,
	1600, 1586, 54, 1559, 83, 1535, 335, 83, 1280, 1412,
	52, 1405, 1384, 1383, 618, 660, 1382, 1380, 1367, 1343,
	763, 917, 1342, 1306, 1271, 1270, 349, 349, 297, 428,
	429, 434, 1249, 1518, 668, 1245, 1057, 1186, 296, 1061,
	574, 1145, 1144, 1124, 1084, 559, 556, 1004, 871, 1291,
	1292, 1293, 874, 1290, 1287, 1288, 1289, 1281, 1282, 1283,
	1284, 1286, 840, 305, 878, 864, 1524, 538, 863, 1180,
	862, 539, 861, 350, 350, 527, 794, 860, 859, 858,
	857, 669, 628, 856, 627, 855, 854, 853, 852, 851,
	850, 1280, 841, 839, 796, 52, 834, 661, 654, 1285,
	765, 323, 750, 753, 83, 754, 755, 756, 762, 757,
	667, 436, 369, 759, 367, 795, 1179, 531, 83, 405,
	775, 810, 83, 883, 773, 83, 83, 774, 881, 787,
	794, 83, 1647, 83, 83, 1523, 83, 526, 1173, 83,
	1145, 83, 83, 995, 348, 1554, 297, 876, 796, 297,
	297, 877, 1330, 892, 606, 319, 781, 386, 1329, 782,
	783, 1231, 931, 343, 401, 387, 848, 801, 257, 795,
	1543, 914, 916, 1435, 916, 1080, 867, 1168, 1280, 1266,
	1710, 668, 1285, 1675, 605, 532, 547, 72, 548, 1756,
	1193, 937, 1509, 83, 83, 963, 319, 558, 558, 282,
	903, 905, 283, 879, 1090, 1757, 1616, 63, 959, 477,
	868, 869, 811, 1615, 1355, 349, 1242, 288, 872, 287,
	547, 801, 548, 875, 1335, 1334, 908, 1295, 669, 1240,
	319, 1233, 49, 1280, 1185, 667, 49, 294, 77, 1184,
	844, 76, 939, 78, 1183, 938, 346, 940, 976, 1182,
	64, 895, 303, 920, 549, 911, 934, 79, 460, 74,
	73, 932, 350, 930, 75, 933, 929, 891, 812, 1285,
	1044, 441, 1674, 1354, 1093, 1281, 1282, 1283, 1284, 1286,
	891, 956, 583, 1296, 910, 384, 890, 909, 549, 302,
	81, 238, 239, 1238, 409, 256, 1366, 1243, 267, 1721,
	1128, 960, 1127, 958, 1017, 256, 668, 872, 965, 875,
	964, 961, 311, 311, 1295, 1094, 321, 869, 868, 321,
	327, 321, 385, 83, 1285, 321, 336, 321, 267, 67,
	404, 304, 794, 899, 365, 83, 83, 61, 80, 806,
	803, 804, 805, 797, 798, 799, 800, 802, 1095, 1092,
	796, 1080, 1692, 669, 1290, 1287, 1288, 1289, 1281, 1282,
	1283, 1284, 1286, 547, 83, 548, 83, 291, 1054, 1007,
	1296, 795, 1756, 1239, 66, 65, 1054, 68, 48, 1192,
	1241, 1712, 560, 1605, 1345, 62, 953, 1016, 1765, 1731,
	1161, 902, 566, 292, 1156, 667, 1357, 1374, 880, 799,
	800, 802, 1723, 408, 29, 1096, 301, 1165, 1058, 1159,
	1042, 295, 30, 1100, 998, 999, 319, 1015, 1724, 330,
	967, 550, 584, 801, 553, 925, 969, 376, 378, 881,
	330, 549, 1170, 330, 881, 552, 1161, 1669, 980, 981,
	979, 1194, 970, 608, 1289, 1281, 1282, 1283, 1284, 1286,
	1352, 968, 383, 794, 953, 550, 865, 1130, 1732, 83,
	83, 83, 1067, 888, 1091, 83, 668, 1656, 83, 901,
	1008, 796, 1764, 382, 83, 83, 83, 83, 83, 831,
	83, 83, 1269, 1064, 1068, 69, 1071, 1280, 83, 1398,
	83, 1771, 795, 60, 1730, 1059, 1733, 83, 1043, 370,
	1140, 1109, 1283, 1284, 1286, 607, 83, 1121, 1122, 1123,
	1346, 1755, 304, 669, 375, 1076, 1753, 267, 267, 1142,
	1040, 1541, 1371, 993, 584, 55, 383, 83, 83, 305,
	423, 900, 1163, 83, 402, 1134, 424, 545, 395, 1175,
	374, 1176, 348, 372, 801, 567, 57, 256, 1606, 321,
	1763, 267, 1610, 416, 424, 1372, 1155, 1644, 1584, 1609,
	83, 1779, 83, 83, 83, 1178, 1235, 83, 311, 1135,
	584, 1598, 1337, 58, 1053, 243, 83, 580, 1285, 321,
	53, 606, 1139, 83, 1203, 83, 54, 403, 994, 811,
	321, 321, 321, 1041, 561, 1171, 1174, 1505, 550, 797,
	798, 799, 800, 802, 1769, 71, 1462, 1370, 772, 766,
	1177, 605, 953, 349, 1705, 423, 246, 758, 632, 937,
	1189, 1599, 1147, 1295, 321, 1195, 305, 1557, 1146, 319,
	1551, 625, 1393, 625, 1230, 1188, 1200, 251, 1202, 1585,
	1191, 1190, 247, 1778, 1770, 812, 1392, 1196, 382, 302,
	333, 1218, 267, 1214, 625, 267, 267, 267, 319, 267,
	350, 1772, 1209, 267, 49, 248, 1221, 1208, 256, 305,
	939, 1229, 1256, 938, 769, 940, 1396, 1504, 1558, 1296,
	250, 1463, 1219, 606, 1508, 332, 415, 1464, 1389, 1212,
	1083, 1507, 311, 1659, 1236, 790, 780, 636, 1234, 1311,
	1218, 1583, 1248, 949, 1310, 1411, 1250, 659, 658, 583,
	652, 647, 1275, 605, 1244, 1221, 83, 305, 1260, 1261,
	797, 798, 799, 800, 802, 1216, 962, 1265, 634, 606,
	1341, 1219, 400, 398, 397, 1488, 396, 393, 331, 635,
	849, 1220, 752, 83, 950, 1217, 1082, 1350, 1348, 1362,
	1305, 1336, 1205, 1136, 1281, 1282, 1283, 1284, 1286, 605,
	1349, 1318, 1351, 249, 1313, 1314, 1315, 996, 83, 992,
	83, 1506, 83, 1497, 1332, 1492, 83, 951, 948, 935,
	662, 571, 1167, 1490, 83, 568, 563, 83, 554, 551,
	1220, 1167, 321, 83, 667, 1429, 1356, 83, 1339, 83,
	319, 771, 1617, 1498, 252, 1361, 896, 1402, 1353, 1363,
	321, 583, 1214, 321, 912, 1757, 426, 389, 656, 321,
	1002, 927, 928, 1364, 321, 1155, 3, 321, 315, 267,
	267, 612, 891, 1391, 953, 1379, 1394, 1386, 906, 1395,
	83, 1401, 1373, 1375, 1376, 663, 1399, 1400, 1381, 1358,
	891, 246, 1414, 1619, 907, 1627, 904, 583, 1204, 1218,
	1425, 1426, 1427, 794, 1671, 668, 281, 1698, 619, 1390,
	608, 430, 251, 584, 1221, 1003, 1690, 247, 1422, 319,
	427, 625, 790, 1493, 1216, 1494, 324, 1436, 944, 390,
	1219, 919, 316, 947, 1418, 788, 1438, 242, 1440, 794,
	248, 584, 795, 1442, 1217, 83, 83, 83, 584, 1496,
	284, 285, 669, 83, 83, 250, 1499, 796, 1550, 83,
	629, 83, 576, 83, 83, 83, 83, 1502, 1503, 1776,
	1470, 83, 607, 253, 1777, 1473, 1280, 794, 795, 1469,
	584, 1482, 1487, 973, 972, 1050, 1483, 1377, 1368, 1220,
	1325, 1467, 1181, 83, 83, 1129, 1126, 1125, 1048, 1077,
	974, 1743, 1477, 83, 83, 1540, 1533, 83, 1571, 1532,
	1533, 1495, 608, 1532, 1520, 1428, 83, 83, 1534, 1522,
	653, 648, 1534, 1206, 975, 842, 290, 1604, 244, 751,
	1560, 394, 1516, 1577, 1722, 1268, 1539, 1655, 249, 1637,
	1081, 847, 1549, 1561, 580, 83, 28, 1530, 453, 1489,
	1338, 978, 1546, 1547, 987, 986, 1552, 670, 608, 1565,
	1046, 657, 1045, 321, 896, 646, 1051, 476, 399, 640,
	649, 1089, 606, 528, 607, 1545, 478, 925, 581, 252,
	584, 479, 582, 873, 466, 579, 344, 1553, 923, 1078,
	1264, 845, 321, 452, 267, 458, 457, 1065, 366, 83,
	606, 83, 605, 83, 449, 1555, 1222, 606, 379, 261,
	83, 1582, 262, 1164, 1517, 997, 776, 1347, 319, 293,
	607, 319, 1277, 368, 1597, 1107, 1099, 1097, 1088, 83,
	605, 411, 540, 1594, 1595, 924, 391, 605, 1009, 606,
	943, 435, 1047, 1618, 1536, 784, 580, 1736, 314, 1049,
	313, 983, 83, 388, 83, 633, 1631, 966, 286, 1613,
	1614, 1533, 83, 1620, 1532, 1666, 1628, 1101, 1670, 605,
	83, 1626, 1612, 1534, 1344, 1709, 56, 584, 22, 20,
	19, 18, 1640, 16, 1648, 15, 14, 321, 1137, 1138,
	21, 12, 580, 896, 11, 10, 1143, 9, 27, 26,
	583, 25, 1148, 1149, 1151, 1153, 1154, 2, 1157, 1158,
	1, 1643, 0, 1654, 1280, 0, 321, 0, 1169, 0,
	0, 0, 439, 439, 0, 321, 83, 83, 583, 1664,
	83, 0, 542, 1661, 321, 583, 0, 1678, 83, 606,
	0, 0, 0, 0, 83, 1680, 0, 0, 1682, 1687,
	1533, 0, 83, 1532, 584, 978, 625, 1512, 667, 1681,
	881, 978, 1534, 1679, 1686, 1521, 1691, 583, 0, 605,
	0, 1694, 0, 0, 305, 1693, 0, 0, 83, 83,
	83, 0, 83, 0, 0, 0, 0, 0, 769, 0,
	769, 267, 321, 1707, 1713, 1207, 1697, 319, 319, 1716,
	83, 319, 0, 1711, 1210, 1285, 0, 1700, 0, 1717,
	0, 1227, 1497, 321, 1533, 1684, 1718, 1532, 1719, 1714,
	0, 0, 0, 83, 0, 1715, 1534, 0, 584, 668,
	0, 0, 777, 779, 1740, 1739, 606, 0, 0, 786,
	0, 1751, 1498, 0, 0, 1754, 0, 1752, 83, 0,
	1295, 826, 827, 828, 829, 830, 1761, 1760, 1758, 1762,
	833, 608, 1759, 0, 1101, 1101, 605, 583, 0, 0,
	0, 1774, 1773, 0, 0, 0, 669, 454, 38, 0,
	846, 0, 0, 1725, 0, 0, 0, 0, 1780, 608,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	794, 0, 0, 0, 1602, 0, 1296, 0, 38, 0,
	0, 0, 0, 606, 1101, 1101, 1101, 0, 796, 0,
	0, 0, 1493, 607, 1494, 0, 0, 298, 608, 0,
	306, 0, 0, 0, 0, 0, 0, 38, 0, 795,
	0, 0, 0, 605, 790, 0, 1636, 882, 1496, 306,
	0, 607, 0, 0, 0, 1499, 319, 0, 607, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	0, 321, 0, 0, 0, 0, 0, 0, 1287, 1288,
	1289, 1281, 1282, 1283, 1284, 1286, 0, 606, 0, 0,
	607, 801, 0, 0, 0, 580, 1378, 0, 896, 0,
	769, 0, 0, 0, 1385, 0, 1246, 1247, 0, 0,
	1495, 0, 321, 0, 0, 321, 0, 605, 0, 0,
	0, 1227, 0, 580, 0, 1404, 0, 1227, 608, 0,
	580, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 583, 0, 0, 0, 0, 1101, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 1302, 1303, 1304, 0,
	0, 0, 580, 0, 0, 0, 0, 0, 1433, 0,
	0, 0, 0, 0, 1708, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	607, 0, 812, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
	1101, 1101, 0, 1101, 0, 583, 0, 925, 0, 0,
	0, 0, 0, 0, 0, 608, 0, 0, 0, 0,
	0, 0, 0, 1485, 1486, 896, 0, 0, 0, 0,
	0, 790, 790, 0, 0, 0, 0, 1510, 0, 1511,
	0, 321, 1513, 1514, 1515, 0, 0, 0, 0, 321,
	0, 0, 580, 806, 803, 804, 805, 797, 798, 799,
	800, 802, 0, 0, 0, 0, 0, 0, 0, 1529,
	0, 1538, 896, 1529, 0, 298, 0, 607, 1409, 1410,
	0, 321, 321, 0, 0, 321, 0, 0, 0, 0,
	0, 439, 608, 0, 790, 1227, 1018, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
	1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 0, 0,
	0, 0, 0, 1578, 0, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 0, 1465, 0, 0, 0, 580,
	0, 1087, 0, 1098, 607, 1108, 1110, 1115, 1118, 1119,
	1120, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 1596,
	0, 267, 0, 0, 542, 0, 0, 0, 321, 0,
	0, 0, 0, 298, 0, 0, 298, 298, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 790, 0, 0,
	0, 0, 0, 1162, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 836, 1529, 0, 580, 0, 607, 0,
	321, 0, 1639, 0, 0, 0, 0, 0, 0, 0,
	321, 0, 0, 0, 0, 0, 0, 0, 790, 0,
	0, 0, 0, 0, 1187, 0, 794, 0, 813, 814,
	815, 0, 24, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 41, 0, 796, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 1280, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 795, 43, 0, 0, 786,
	580, 810, 48, 0, 1672, 1673, 0, 0, 1677, 0,
	0, 0, 0, 1529, 0, 794, 267, 0, 0, 0,
	0, 33, 1538, 0, 0, 38, 0, 38, 29, 1294,
	790, 44, 0, 796, 0, 32, 30, 0, 0, 1232,
	38, 0, 1601, 1237, 38, 0, 0, 801, 0, 0,
	0, 34, 0, 0, 795, 0, 1706, 790, 321, 0,
	267, 1101, 1251, 0, 823, 0, 0, 0, 0, 0,
	794, 1259, 813, 814, 815, 1285, 821, 1529, 1639, 1267,
	0, 0, 816, 1272, 0, 0, 818, 0, 796, 0,
	822, 0, 811, 0, 0, 0, 0, 0, 0, 0,
	0, 321, 0, 794, 833, 0, 801, 0, 0, 795,
	1115, 1115, 1115, 0, 817, 810, 0, 0, 0, 0,
	1295, 796, 0, 0, 0, 31, 790, 1658, 0, 0,
	0, 0, 1333, 0, 0, 0, 46, 0, 0, 35,
	0, 45, 795, 1340, 0, 0, 36, 0, 812, 55,
	0, 811, 0, 0, 39, 40, 0, 0, 0, 820,
	439, 801, 0, 42, 0, 0, 0, 0, 0, 439,
	57, 0, 542, 0, 0, 0, 1296, 0, 823, 0,
	0, 0, 0, 47, 0, 0, 0, 0, 0, 0,
	821, 0, 0, 0, 801, 0, 0, 58, 0, 0,
	818, 0, 0, 1699, 53, 0, 811, 812, 0, 0,
	54, 0, 819, 0, 0, 807, 808, 809, 0, 806,
	803, 804, 805, 797, 798, 799, 800, 802, 817, 52,
	1407, 1132, 1408, 0, 0, 0, 0, 0, 0, 811,
	1133, 0, 0, 1413, 0, 0, 0, 1290, 1287, 1288,
	1289, 1281, 1282, 1283, 1284, 1286, 1187, 0, 0, 0,
	0, 1012, 812, 0, 0, 1430, 0, 0, 0, 0,
	0, 0, 0, 820, 1439, 0, 0, 1441, 0, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 0, 0,
	0, 1056, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 1478, 1479,
	1480, 0, 0, 0, 0, 0, 819, 0, 0, 807,
	808, 809, 0, 806, 803, 804, 805, 797, 798, 799,
	800, 802, 1280, 0, 1297, 1298, 1299, 0, 0, 0,
	1590, 0, 0, 0, 1562, 0, 439, 0, 0, 0,
	0, 0, 0, 794, 0, 813, 814, 815, 0, 805,
	797, 798, 799, 800, 802, 816, 0, 0, 0, 0,
	0, 796, 0, 822, 0, 306, 0, 1294, 1544, 0,
	0, 0, 0, 794, 0, 813, 814, 815, 0, 0,
	0, 0, 795, 0, 0, 816, 0, 0, 810, 0,
	1564, 796, 0, 822, 1567, 1568, 0, 0, 0, 1570,
	0, 0, 0, 1572, 0, 0, 0, 0, 0, 0,
	1576, 0, 795, 1285, 1579, 0, 0, 0, 810, 0,
	0, 0, 268, 0, 0, 0, 0, 1280, 0, 1297,
	1298, 1299, 0, 0, 801, 0, 279, 0, 0, 1416,
	0, 0, 1300, 0, 0, 1587, 0, 0, 0, 0,
	0, 823, 38, 0, 0, 0, 0, 0, 1295, 0,
	0, 0, 1228, 821, 801, 0, 0, 0, 0, 0,
	270, 0, 1294, 818, 0, 0, 0, 280, 0, 811,
	0, 823, 0, 0, 0, 0, 1611, 0, 0, 269,
	271, 1056, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 818, 0, 832, 0, 0, 0, 811,
	1629, 0, 0, 0, 1296, 0, 0, 0, 1285, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 0, 1642,
	0, 817, 0, 0, 0, 812, 0, 273, 274, 0,
	0, 1650, 1651, 0, 0, 0, 820, 1300, 0, 0,
	0, 0, 275, 832, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1295, 0, 812, 0, 0, 0, 1663,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 1665,
	0, 1291, 1292, 1293, 0, 1290, 1287, 1288, 1289, 1281,
	1282, 1283, 1284, 1286, 0, 0, 0, 0, 0, 819,
	0, 542, 807, 808, 809, 0, 806, 803, 804, 805,
	797, 798, 799, 800, 802, 0, 0, 0, 0, 1296,
	0, 0, 0, 1321, 0, 0, 0, 0, 0, 819,
	0, 0, 807, 808, 809, 0, 806, 803, 804, 805,
	797, 798, 799, 800, 802, 0, 276, 0, 0, 277,
	0, 0, 0, 1320, 278, 0, 0, 0, 0, 0,
	0, 1012, 0, 0, 1012, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1291, 1292, 1293, 1738,
	1290, 1287, 1288, 1289, 1281, 1282, 1283, 1284, 1286, 0,
	0, 0, 1750, 1750, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 1750, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 1750, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 38, 0, 116,
	209, 0, 210, 0, 117, 118, 211, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	1012, 1012, 125, 0, 1012, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 320, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 55, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 57, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 351, 237, 0, 186, 0, 0,
	0, 53, 187, 188, 189, 190, 0, 54, 0, 0,
	0, 1621, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1014, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 86, 671, 87, 672, 673, 674, 675, 676,
	677, 678, 679, 88, 89, 191, 192, 193, 194, 90,
	195, 196, 680, 91, 197, 198, 92, 681, 682, 199,
	200, 201, 683, 202, 684, 352, 685, 93, 94, 95,
	832, 96, 686, 97, 687, 353, 98, 99, 688, 689,
	690, 691, 692, 693, 100, 101, 102, 103, 203, 104,
	204, 205, 694, 105, 695, 106, 696, 697, 698, 107,
	108, 699, 109, 700, 0, 701, 206, 110, 111, 207,
	702, 703, 704, 112, 113, 208, 0, 114, 705, 115,
	706, 707, 354, 708, 116, 209, 709, 210, 710, 117,
	118, 211, 212, 711, 712, 119, 713, 355, 120, 213,
	214, 215, 714, 216, 715, 356, 121, 357, 122, 123,
	716, 717, 217, 358, 124, 359, 718, 125, 719, 720,
	126, 0, 127, 128, 129, 130, 131, 360, 132, 133,
	136, 134, 721, 135, 722, 218, 137, 219, 138, 139,
	723, 724, 725, 726, 727, 140, 220, 361, 141, 362,
	221, 142, 143, 728, 222, 144, 223, 145, 729, 146,
	147, 148, 224, 149, 150, 730, 152, 153, 151, 154,
	731, 155, 363, 156, 157, 225, 158, 0, 159, 160,
	161, 732, 226, 162, 163, 733, 164, 165, 364, 166,
	227, 228, 167, 734, 168, 169, 171, 229, 170, 230,
	735, 172, 736, 173, 174, 737, 231, 232, 233, 738,
	739, 175, 234, 235, 740, 176, 177, 178, 179, 741,
	742, 180, 181, 182, 743, 744, 183, 184, 185, 236,
	237, 745, 186, 746, 747, 748, 749, 187, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 666, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1403, 85, 86,
	671, 87, 672, 673, 674, 675, 676, 677, 678, 679,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 680,
	91, 197, 198, 92, 681, 682, 199, 200, 201, 683,
	202, 684, 352, 685, 93, 94, 95, 0, 96, 686,
	97, 687, 353, 98, 99, 688, 689, 690, 691, 692,
	693, 100, 101, 102, 103, 203, 104, 204, 205, 694,
	105, 695, 106, 696, 697, 698, 107, 108, 699, 109,
	700, 0, 701, 206, 110, 111, 207, 702, 703, 704,
	112, 113, 208, 0, 114, 705, 115, 706, 707, 354,
	708, 116, 209, 709, 210, 710, 117, 118, 211, 212,
	711, 712, 119, 713, 355, 120, 213, 214, 215, 714,
	216, 715, 356, 121, 357, 122, 123, 716, 717, 217,
	358, 124, 359, 718, 125, 719, 720, 126, 0, 127,
	128, 129, 130, 131, 360, 132, 133, 136, 134, 721,
	135, 722, 218, 137, 219, 138, 139, 723, 724, 725,
	726, 727, 140, 220, 361, 141, 362, 221, 142, 143,
	728, 222, 144, 223, 145, 729, 146, 147, 148, 224,
	149, 150, 730, 152, 153, 151, 154, 731, 155, 363,
	156, 157, 225, 158, 0, 159, 160, 161, 732, 226,
	162, 163, 733, 164, 165, 364, 166, 227, 228, 167,
	734, 168, 169, 171, 229, 170, 230, 735, 172, 736,
	173, 174, 737, 231, 232, 233, 738, 739, 175, 234,
	235, 740, 176, 177, 178, 179, 741, 742, 180, 181,
	182, 743, 744, 183, 184, 185, 236, 237, 745, 186,
	746, 747, 748, 749, 187, 188, 189, 190, 0, 0,
	666, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 85, 86, 671, 87, 672, 673, 674, 675,
	676, 677, 678, 679, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 680, 91, 197, 198, 92, 681, 682,
	199, 200, 201, 683, 202, 684, 352, 685, 93, 94,
	95, 0, 96, 686, 97, 687, 353, 98, 99, 688,
	689, 690, 691, 692, 693, 100, 101, 102, 103, 203,
	104, 204, 205, 694, 105, 695, 106, 696, 697, 698,
	107, 108, 699, 109, 700, 0, 701, 206, 110, 111,
	207, 702, 703, 704, 112, 113, 208, 0, 114, 705,
	115, 706, 707, 354, 708, 116, 209, 709, 210, 710,
	117, 118, 211, 212, 711, 712, 119, 713, 355, 120,
	213, 214, 215, 714, 216, 715, 356, 121, 357, 122,
	123, 716, 717, 217, 358, 124, 359, 718, 125, 719,
	720, 126, 0, 127, 128, 129, 130, 131, 360, 132,
	133, 136, 134, 721, 135, 722, 218, 137, 219, 138,
	139, 723, 724, 725, 726, 727, 140, 220, 361, 141,
	362, 221, 142, 143, 728, 222, 144, 223, 145, 729,
	146, 147, 148, 224, 149, 150, 730, 152, 153, 151,
	154, 731, 155, 363, 156, 157, 225, 158, 0, 159,
	160, 161, 732, 226, 162, 163, 733, 164, 165, 364,
	166, 227, 228, 167, 734, 168, 169, 171, 229, 170,
	230, 735, 172, 736, 173, 174, 737, 231, 232, 233,
	738, 739, 175, 234, 235, 740, 176, 177, 178, 179,
	741, 742, 180, 181, 182, 743, 744, 183, 184, 185,
	236, 237, 745, 186, 746, 747, 748, 749, 187, 188,
	189, 190, 474, 463, 464, 461, 462, 450, 0, 0,
	0, 0, 0, 0, 85, 86, 1073, 87, 0, 0,
	0, 0, 456, 0, 0, 0, 88, 89, 191, 503,
	193, 504, 90, 505, 506, 0, 91, 197, 198, 92,
	471, 489, 507, 508, 201, 0, 499, 0, 482, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 353, 98,
	99, 0, 483, 485, 0, 484, 486, 100, 101, 102,
	103, 509, 104, 510, 511, 0, 105, 0, 106, 0,
	1074, 0, 502, 108, 0, 109, 0, 0, 0, 455,
	110, 111, 490, 469, 0, 0, 112, 113, 512, 0,
	114, 0, 115, 0, 0, 354, 0, 116, 500, 0,
	210, 0, 117, 118, 496, 498, 0, 0, 119, 0,
	355, 120, 513, 514, 515, 0, 481, 0, 356, 121,
	357, 122, 123, 0, 0, 501, 358, 124, 359, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	360, 132, 133, 136, 134, 445, 135, 470, 497, 137,
	516, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	361, 141, 362, 491, 142, 143, 0, 492, 144, 223,
	145, 0, 146, 147, 148, 517, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 363, 156, 157, 459, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 487, 164,
	165, 364, 166, 518, 228, 167, 0, 168, 169, 171,
	519, 170, 493, 0, 172, 0, 173, 174, 0, 231,
	520, 521, 0, 0, 175, 494, 495, 468, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 488, 0, 183,
	184, 185, 236, 522, 1072, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 446, 0, 0, 474, 463, 464,
	461, 462, 450, 0, 0, 442, 443, 1075, 0, 85,
	86, 444, 87, 0, 451, 1070, 0, 456, 0, 0,
	0, 88, 89, 191, 503, 193, 504, 90, 505, 506,
	0, 91, 197, 198, 92, 471, 489, 507, 508, 201,
	0, 499, 0, 482, 0, 93, 94, 95, 0, 96,
	0, 97, 0, 353, 98, 99, 0, 483, 485, 0,
	484, 486, 100, 101, 102, 103, 509, 104, 510, 511,
	543, 105, 0, 106, 0, 0, 0, 502, 108, 0,
	109, 0, 0, 0, 455, 110, 111, 490, 469, 0,
	0, 112, 113, 512, 0, 114, 0, 115, 0, 0,
	354, 0, 116, 500, 0, 210, 0, 117, 118, 496,
	498, 0, 0, 119, 0, 355, 120, 513, 514, 515,
	0, 481, 0, 356, 121, 357, 122, 123, 0, 0,
	501, 358, 124, 359, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 360, 132, 133, 136, 134,
	445, 135, 470, 497, 137, 516, 138, 139, 0, 0,
	0, 0, 0, 140, 220, 361, 141, 362, 491, 142,
	143, 0, 492, 144, 223, 145, 0, 146, 147, 148,
	517, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	363, 156, 157, 459, 158, 0, 159, 160, 161, 55,
	226, 162, 163, 487, 164, 165, 364, 166, 518, 228,
	167, 0, 168, 169, 171, 519, 170, 493, 0, 172,
	57, 173, 174, 0, 231, 520, 521, 0, 0, 175,
	494, 495, 468, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 488, 0, 183, 184, 185, 351, 522, 0,
	186, 0, 0, 0, 53, 187, 188, 189, 190, 446,
	54, 0, 474, 463, 464, 461, 462, 450, 0, 0,
	442, 443, 0, 0, 85, 86, 444, 87, 0, 451,
	0, 0, 456, 0, 0, 0, 88, 89, 191, 503,
	193, 504, 90, 505, 506, 0, 91, 197, 198, 92,
	471, 489, 507, 508, 201, 0, 499, 0, 482, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 353, 98,
	99, 0, 483, 485, 0, 484, 486, 100, 101, 102,
	103, 509, 104, 510, 511, 0, 105, 0, 106, 0,
	0, 0, 502, 108, 0, 109, 0, 0, 0, 455,
	110, 111, 490, 469, 0, 0, 112, 113, 512, 0,
	114, 0, 115, 0, 0, 354, 0, 116, 500, 0,
	210, 0, 117, 118, 496, 498, 0, 0, 119, 0,
	355, 120, 513, 514, 515, 0, 481, 0, 356, 121,
	357, 122, 123, 0, 0, 501, 358, 124, 359, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	360, 132, 133, 136, 134, 445, 135, 470, 497, 137,
	516, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	361, 141, 362, 491, 142, 143, 0, 492, 144, 223,
	145, 0, 146, 147, 148, 517, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 363, 156, 157, 459, 158,
	0, 159, 160, 161, 55, 226, 162, 163, 487, 164,
	165, 364, 166, 518, 228, 167, 0, 168, 169, 171,
	519, 170, 493, 0, 172, 57, 173, 174, 0, 231,
	520, 521, 0, 0, 175, 494, 495, 468, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 488, 0, 183,
	184, 185, 351, 522, 0, 186, 0, 0, 0, 53,
	187, 188, 189, 190, 446, 54, 0, 474, 463, 464,
	461, 462, 450, 0, 0, 442, 443, 0, 0, 85,
	86, 444, 87, 0, 451, 0, 0, 456, 0, 0,
	0, 88, 89, 191, 503, 193, 504, 90, 505, 506,
	1111, 91, 197, 198, 92, 471, 489, 507, 508, 201,
	0, 499, 0, 482, 0, 93, 94, 95, 0, 96,
	0, 97, 0, 353, 98, 99, 0, 483, 485, 0,
	484, 486, 100, 101, 102, 103, 509, 104, 510, 511,
	0, 105, 0, 106, 0, 0, 0, 502, 108, 0,
	109, 0, 0, 0, 455, 110, 111, 490, 469, 0,
	0, 112, 113, 512, 0, 114, 0, 115, 0, 1116,
	354, 0, 116, 500, 0, 210, 0, 117, 118, 496,
	498, 0, 0, 119, 0, 355, 120, 513, 514, 515,
	0, 481, 0, 356, 121, 357, 122, 123, 0, 1112,
	501, 358, 124, 359, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 360, 132, 133, 136, 134,
	445, 135, 470, 497, 137, 516, 138, 139, 0, 0,
	0, 0, 0, 140, 220, 361, 141, 362, 491, 142,
	143, 0, 492, 144, 223, 145, 0, 146, 147, 148,
	517, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	363, 156, 157, 459, 158, 0, 159, 160, 161, 0,
	226, 162, 163, 487, 164, 165, 364, 166, 518, 228,
	167, 0, 168, 169, 171, 519, 170, 493, 0, 172,
	0, 173, 174, 0, 231, 520, 521, 0, 1113, 175,
	494, 495, 468, 176, 177, 178, 179, 0, 0, 180,
	181, 182, 488, 0, 183, 184, 185, 236, 522, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 446,
	474, 463, 464, 461, 462, 450, 0, 0, 0, 0,
	442, 443, 85, 86, 0, 87, 444, 0, 0, 451,
	456, 0, 0, 0, 88, 89, 191, 503, 193, 504,
	90, 505, 506, 0, 91, 197, 198, 92, 471, 489,
	507, 508, 201, 0, 499, 0, 482, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 353, 98, 99, 0,
	483, 485, 0, 484, 486, 100, 101, 102, 103, 509,
	104, 510, 511, 0, 105, 0, 106, 0, 0, 0,
	502, 108, 0, 109, 0, 0, 0, 455, 110, 111,
	490, 469, 0, 0, 112, 113, 512, 0, 114, 0,
	115, 0, 0, 354, 0, 116, 500, 0, 210, 0,
	117, 118, 496, 498, 0, 0, 119, 0, 355, 120,
	513, 514, 515, 0, 481, 0, 356, 121, 357, 122,
	123, 0, 0, 501, 358, 124, 359, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 360, 132,
	133, 136, 134, 445, 135, 470, 497, 137, 516, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 361, 141,
	362, 491, 142, 143, 0, 492, 144, 223, 145, 0,
	146, 147, 148, 517, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 363, 156, 157, 459, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 487, 164, 165, 364,
	166, 518, 228, 167, 0, 168, 169, 171, 519, 170,
	493, 0, 172, 0, 173, 174, 0, 231, 520, 521,
	0, 0, 175, 494, 495, 468, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 488, 0, 183, 184, 185,
	236, 522, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 446, 0, 0, 474, 463, 464, 461, 462,
	450, 0, 0, 442, 443, 0, 0, 85, 86, 444,
	87, 0, 451, 1468, 0, 456, 0, 0, 0, 88,
	89, 191, 503, 193, 504, 90, 505, 506, 0, 91,
	197, 198, 92, 471, 489, 507, 508, 201, 0, 499,
	0, 482, 0, 93, 94, 95, 0, 96, 0, 97,
	0, 353, 98, 99, 0, 483, 485, 0, 484, 486,
	100, 101, 102, 103, 509, 104, 510, 511, 0, 105,
	0, 106, 0, 0, 0, 502, 108, 0, 109, 0,
	0, 0, 455, 110, 111, 490, 469, 0, 0, 112,
	113, 512, 0, 114, 0, 115, 0, 0, 354, 0,
	116, 500, 0, 210, 0, 117, 118, 496, 498, 0,
	0, 119, 0, 355, 120, 513, 514, 515, 0, 481,
	0, 356, 121, 357, 122, 123, 0, 0, 501, 358,
	124, 359, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 360, 132, 133, 136, 134, 445, 135,
	470, 497, 137, 516, 138, 139, 0, 0, 0, 0,
	0, 140, 220, 361, 141, 362, 491, 142, 143, 0,
	492, 144, 223, 145, 0, 146, 147, 148, 517, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 363, 156,
	157, 459, 158, 0, 159, 160, 161, 0, 226, 162,
	163, 487, 164, 165, 364, 166, 518, 228, 167, 0,
	168, 169, 171, 519, 170, 493, 0, 172, 0, 173,
	174, 0, 231, 520, 521, 0, 0, 175, 494, 495,
	468, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	488, 0, 183, 184, 185, 236, 522, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 446, 0, 0,
	474, 463, 464, 461, 462, 450, 0, 0, 442, 443,
	0, 0, 85, 86, 444, 87, 0, 451, 1419, 0,
	456, 0, 0, 0, 88, 89, 191, 503, 193, 504,
	90, 505, 506, 0, 91, 197, 198, 92, 471, 489,
	507, 508, 201, 0, 499, 0, 482, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 353, 98, 99, 0,
	483, 485, 0, 484, 486, 100, 101, 102, 103, 509,
	104, 510, 511, 0, 105, 0, 106, 0, 0, 0,
	502, 108, 0, 109, 0, 0, 0, 455, 110, 111,
	490, 469, 0, 0, 112, 113, 512, 0, 114, 0,
	115, 0, 0, 354, 0, 116, 500, 0, 210, 0,
	117, 118, 496, 498, 0, 0, 119, 0, 355, 120,
	513, 514, 515, 0, 481, 0, 356, 121, 357, 122,
	123, 0, 0, 501, 358, 124, 359, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 360, 132,
	133, 136, 134, 445, 135, 470, 497, 137, 516, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 361, 141,
	362, 491, 142, 143, 0, 492, 144, 223, 145, 0,
	146, 147, 148, 517, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 363, 156, 157, 459, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 487, 164, 165, 364,
	166, 518, 228, 167, 0, 168, 169, 171, 519, 170,
	493, 0, 172, 0, 173, 174, 0, 231, 520, 521,
	0, 0, 175, 494, 495, 468, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 488, 0, 183, 184, 185,
	236, 522, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 446, 0, 0, 474, 463, 464, 461, 462,
	450, 0, 0, 442, 443, 0, 0, 85, 86, 444,
	87, 0, 451, 1069, 0, 456, 0, 0, 0, 88,
	89, 191, 503, 193, 504, 90, 505, 506, 0, 91,
	197, 198, 92, 471, 489, 507, 508, 201, 0, 499,
	0, 482, 0, 93, 94, 95, 0, 96, 0, 97,
	0, 353, 98, 99, 0, 483, 485, 0, 484, 486,
	100, 101, 102, 103, 509, 104, 510, 511, 0, 105,
	0, 106, 0, 0, 0, 502, 108, 0, 109, 0,
	0, 0, 455, 110, 111, 490, 469, 0, 0, 112,
	113, 512, 0, 114, 0, 115, 0, 0, 354, 0,
	116, 500, 0, 210, 0, 117, 118, 496, 498, 0,
	0, 119, 0, 355, 120, 513, 514, 515, 0, 481,
	0, 356, 121, 357, 122, 123, 0, 0, 501, 358,
	124, 359, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 360, 132, 133, 136, 134, 445, 135,
	470, 497, 137, 516, 138, 139, 0, 0, 0, 0,
	0, 140, 220, 361, 141, 362, 491, 142, 143, 0,
	492, 144, 223, 145, 0, 146, 147, 148, 517, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 363, 156,
	157, 459, 158, 0, 159, 160, 161, 0, 226, 162,
	163, 487, 164, 165, 364, 166, 518, 228, 167, 0,
	168, 169, 171, 519, 170, 493, 0, 172, 0, 173,
	174, 0, 231, 520, 521, 0, 0, 175, 494, 495,
	468, 176, 177, 178, 179, 0, 0, 180, 181, 182,
	488, 0, 183, 184, 185, 236, 522, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 446, 474, 463,
	464, 461, 462, 450, 0, 0, 0, 0, 442, 443,
	85, 86, 0, 87, 444, 838, 1066, 451, 456, 0,
	0, 0, 88, 89, 191, 503, 193, 504, 90, 505,
	506, 0, 91, 197, 198, 92, 471, 489, 507, 508,
	201, 0, 499, 0, 482, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 353, 98, 99, 0, 483, 485,
	0, 484, 486, 100, 101, 102, 103, 509, 104, 510,
	511, 0, 105, 0, 106, 0, 0, 0, 502, 108,
	0, 109, 0, 0, 0, 455, 110, 111, 490, 469,
	0, 0, 112, 113, 512, 0, 114, 0, 115, 0,
	0, 354, 0, 116, 500, 0, 210, 0, 117, 118,
	496, 498, 0, 0, 119, 0, 355, 120, 513, 514,
	515, 0, 481, 0, 356, 121, 357, 122, 123, 0,
	0, 501, 358, 124, 359, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 360, 132, 133, 136,
	134, 445, 135, 470, 497, 137, 516, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 361, 141, 362, 491,
	142, 143, 0, 492, 144, 223, 145, 0, 146, 147,
	148, 517, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 363, 156, 157, 459, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 487, 164, 165, 364, 166, 518,
	228, 167, 0, 168, 169, 171, 519, 170, 493, 0,
	172, 0, 173, 174, 0, 231, 520, 521, 0, 0,
	175, 494, 495, 468, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 488, 0, 183, 184, 185, 236, 522,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	446, 0, 0, 474, 463, 464, 461, 462, 450, 0,
	0, 442, 443, 440, 0, 85, 86, 444, 87, 0,
	451, 0, 0, 456, 0, 0, 0, 88, 89, 191,
	503, 193, 504, 90, 505, 506, 0, 91, 197, 198,
	92, 471, 489, 507, 508, 201, 0, 499, 0, 482,
	0, 93, 94, 95, 0, 96, 0, 97, 0, 353,
	98, 99, 0, 483, 485, 0, 484, 486, 100, 101,
	102, 103, 509, 104, 510, 511, 0, 105, 0, 106,
	0, 0, 0, 502, 108, 0, 109, 0, 0, 0,
	455, 110, 111, 490, 469, 0, 0, 112, 113, 512,
	0, 114, 0, 115, 0, 0, 354, 0, 116, 500,
	0, 210, 0, 117, 118, 496, 498, 0, 0, 119,
	0, 355, 120, 513, 514, 515, 0, 481, 0, 356,
	121, 357, 122, 123, 0, 0, 501, 358, 124, 359,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 360, 132, 133, 136, 134, 445, 135, 470, 497,
	137, 516, 138, 139, 0, 0, 0, 0, 0, 140,
	220, 361, 141, 362, 491, 142, 143, 0, 492, 144,
	223, 145, 0, 146, 147, 148, 517, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 363, 156, 157, 459,
	158, 0, 159, 160, 161, 0, 226, 162, 163, 487,
	164, 165, 364, 166, 518, 228, 167, 0, 168, 169,
	171, 519, 170, 493, 0, 172, 0, 173, 174, 0,
	231, 520, 521, 0, 0, 175, 494, 495, 468, 176,
	177, 178, 179, 0, 0, 180, 181, 182, 488, 0,
	183, 184, 185, 236, 522, 1424, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 446, 474, 463, 464, 461,
	462, 450, 0, 0, 0, 0, 442, 443, 85, 86,
	0, 87, 444, 0, 0, 451, 456, 0, 0, 0,
	88, 89, 191, 503, 193, 504, 90, 505, 506, 0,
	91, 197, 198, 92, 471, 489, 507, 508, 201, 0,
	499, 0, 482, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 353, 98, 99, 0, 483, 485, 0, 484,
	486, 100, 101, 102, 103, 509, 104, 510, 511, 543,
	105, 0, 106, 0, 0, 0, 502, 108, 0, 109,
	0, 0, 0, 455, 110, 111, 490, 469, 0, 0,
	112, 113, 512, 0, 114, 0, 115, 0, 0, 354,
	0, 116, 500, 0, 210, 0, 117, 118, 496, 498,
	0, 0, 119, 0, 355, 120, 513, 514, 515, 0,
	481, 0, 356, 121, 357, 122, 123, 0, 0, 501,
	358, 124, 359, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 360, 132, 133, 136, 134, 445,
	135, 470, 497, 137, 516, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 361, 141, 362, 491, 142, 143,
	0, 492, 144, 223, 145, 0, 146, 147, 148, 517,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 363,
	156, 157, 459, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 487, 164, 165, 364, 166, 518, 228, 167,
	0, 168, 169, 171, 519, 170, 493, 0, 172, 0,
	173, 174, 0, 231, 520, 521, 0, 0, 175, 494,
	495, 468, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 488, 0, 183, 184, 185, 236, 522, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 446, 474,
	463, 464, 461, 462, 450, 0, 0, 0, 0, 442,
	443, 85, 86, 0, 87, 444, 0, 0, 451, 456,
	0, 0, 0, 88, 89, 191, 503, 193, 504, 90,
	505, 506, 0, 91, 197, 198, 92, 471, 489, 507,
	508, 201, 0, 499, 0, 482, 0, 93, 94, 95,
	0, 96, 0, 97, 0, 353, 98, 99, 0, 483,
	485, 0, 484, 486, 100, 101, 102, 103, 509, 104,
	510, 511, 0, 105, 0, 106, 0, 0, 0, 502,
	108, 0, 109, 0, 0, 0, 455, 110, 111, 490,
	469, 0, 0, 112, 113, 512, 0, 114, 0, 115,
	0, 1116, 354, 0, 116, 500, 0, 210, 0, 117,
	118, 496, 498, 0, 0, 119, 0, 355, 120, 513,
	514, 515, 0, 481, 0, 356, 121, 357, 122, 123,
	0, 0, 501, 358, 124, 359, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 360, 132, 133,
	136, 134, 445, 135, 470, 497, 137, 516, 138, 139,
	0, 0, 0, 0, 0, 140, 220, 361, 141, 362,
	491, 142, 143, 0, 492, 144, 223, 145, 0, 146,
	147, 148, 517, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 363, 156, 157, 459, 158, 0, 159, 160,
	161, 0, 226, 162, 163, 487, 164, 165, 364, 166,
	518, 228, 167, 0, 168, 169, 171, 519, 170, 493,
	0, 172, 0, 173, 174, 0, 231, 520, 521, 0,
	0, 175, 494, 495, 468, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 488, 0, 183, 184, 185, 236,
	522, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 446, 474, 463, 464, 461, 462, 450, 0, 0,
	0, 0, 442, 443, 85, 86, 778, 87, 444, 0,
	0, 451, 456, 0, 0, 0, 88, 89, 191, 503,
	193, 504, 90, 505, 506, 0, 91, 197, 198, 92,
	471, 489, 507, 508, 201, 0, 499, 0, 482, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 353, 98,
	99, 0, 483, 485, 0, 484, 486, 100, 101, 102,
	103, 509, 104, 510, 511, 0, 105, 0, 106, 0,
	0, 0, 502, 108, 0, 109, 0, 0, 0, 455,
	110, 111, 490, 469, 0, 0, 112, 113, 512, 0,
	114, 0, 115, 0, 0, 354, 0, 116, 500, 0,
	210, 0, 117, 118, 496, 498, 0, 0, 119, 0,
	355, 120, 513, 514, 515, 0, 481, 0, 356, 121,
	357, 122, 123, 0, 0, 501, 358, 124, 359, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	360, 132, 133, 136, 134, 445, 135, 470, 497, 137,
	516, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	361, 141, 362, 491, 142, 143, 0, 492, 144, 223,
	145, 0, 146, 147, 148, 517, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 363, 156, 157, 459, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 487, 164,
	165, 364, 166, 518, 228, 167, 0, 168, 169, 171,
	519, 170, 493, 0, 172, 0, 173, 174, 0, 231,
	520, 521, 0, 0, 175, 494, 495, 468, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 488, 0, 183,
	184, 185, 236, 522, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 446, 474, 463, 464, 461, 462,
	450, 0, 0, 0, 0, 442, 443, 85, 86, 0,
	87, 444, 0, 0, 451, 456, 0, 0, 0, 88,
	89, 191, 503, 193, 504, 90, 505, 506, 0, 91,
	197, 198, 92, 471, 489, 507, 508, 201, 0, 499,
	0, 482, 0, 93, 94, 95, 0, 96, 0, 97,
	0, 353, 98, 1749, 0, 483, 485, 0, 484, 486,
	100, 101, 102, 103, 509, 104, 510, 511, 0, 105,
	0, 106, 0, 0, 0, 502, 108, 0, 109, 0,
	0, 0, 455, 110, 111, 490, 469, 0, 0, 112,
	113, 512, 0, 114, 0, 115, 0, 0, 354, 0,
	116, 500, 0, 210, 0, 117, 118, 496, 498, 0,
	0, 119, 0, 355, 120, 513, 514, 515, 0, 481,
	0, 356, 121, 357, 122, 123, 0, 0, 501, 358,
	124, 359, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 360, 132, 133, 136, 134, 445, 135,
	470, 497, 137, 516, 138, 139, 0, 0, 0, 0,
	0, 140, 220, 361, 141, 362, 491, 142, 143, 0,
	492, 144, 223, 145, 0, 146, 147, 148, 517, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 363, 156,
	157, 459, 158, 0, 159, 160, 161, 0, 226, 162,
	163, 487, 164, 165, 364, 166, 518, 228, 167, 0,
	168, 169, 171, 519, 170, 493, 0, 172, 0, 173,
	174, 0, 231, 520, 521, 0, 0, 175, 494, 495,
	468, 176, 177, 1748, 179, 0, 0, 180, 181, 182,
	488, 0, 183, 184, 185, 236, 522, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 446, 474, 463,
	464, 461, 462, 450, 0, 0, 0, 0, 442, 443,
	85, 86, 0, 87, 444, 0, 0, 451, 456, 0,
	0, 0, 88, 89, 1747, 503, 193, 504, 90, 505,
	506, 0, 91, 197, 198, 92, 471, 489, 507, 508,
	201, 0, 499, 0, 482, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 353, 98, 1749, 0, 483, 485,
	0, 484, 486, 100, 101, 102, 103, 509, 104, 510,
	511, 0, 105, 0, 106, 0, 0, 0, 502, 108,
	0, 109, 0, 0, 0, 455, 110, 111, 490, 469,
	0, 0, 112, 113, 512, 0, 114, 0, 115, 0,
	0, 354, 0, 116, 500, 0, 210, 0, 117, 118,
	496, 498, 0, 0, 119, 0, 355, 120, 513, 514,
	515, 0, 481, 0, 356, 121, 357, 122, 123, 0,
	0, 501, 358, 124, 359, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 360, 132, 133, 136,
	134, 445, 135, 470, 497, 137, 516, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 361, 141, 362, 491,
	142, 143, 0, 492, 144, 223, 145, 0, 146, 147,
	148, 517, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 363, 156, 157, 459, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 487, 164, 165, 364, 166, 518,
	228, 167, 0, 168, 169, 171, 519, 170, 493, 0,
	172, 0, 173, 174, 0, 231, 520, 521, 0, 0,
	175, 494, 495, 468, 176, 177, 1748, 179, 0, 0,
	180, 181, 182, 488, 0, 183, 184, 185, 236, 522,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	446, 474, 463, 464, 461, 462, 450, 0, 0, 0,
	0, 442, 443, 85, 86, 0, 87, 444, 0, 0,
	451, 456, 0, 0, 0, 88, 89, 191, 503, 193,
	504, 90, 505, 506, 0, 91, 197, 198, 92, 471,
	489, 507, 508, 201, 0, 499, 0, 482, 0, 93,
	94, 95, 0, 96, 0, 97, 0, 353, 98, 99,
	0, 483, 485, 0, 484, 486, 100, 101, 102, 103,
	509, 104, 510, 511, 0, 105, 0, 106, 0, 0,
	0, 502, 108, 0, 109, 0, 0, 0, 455, 110,
	111, 490, 469, 0, 0, 112, 113, 512, 0, 114,
	0, 115, 0, 0, 354, 0, 116, 500, 0, 210,
	0, 117, 118, 496, 498, 0, 0, 119, 0, 355,
	120, 513, 514, 515, 0, 481, 0, 356, 121, 357,
	122, 123, 0, 0, 501, 358, 124, 359, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 360,
	132, 133, 136, 134, 445, 135, 470, 497, 137, 516,
	138, 139, 0, 0, 0, 0, 0, 140, 220, 361,
	141, 362, 491, 142, 143, 0, 492, 144, 223, 145,
	0, 146, 147, 148, 517, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 363, 156, 157, 459, 158, 0,
	159, 160, 161, 0, 226, 162, 163, 487, 164, 165,
	364, 166, 518, 228, 167, 0, 168, 169, 171, 519,
	170, 493, 0, 172, 0, 173, 174, 0, 231, 520,
	521, 0, 0, 175, 494, 495, 468, 176, 177, 178,
	179, 0, 0, 180, 181, 182, 488, 0, 183, 184,
	185, 236, 522, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 446, 474, 463, 464, 461, 462, 450,
	0, 0, 0, 0, 442, 443, 85, 86, 0, 87,
	444, 0, 0, 451, 456, 0, 0, 0, 88, 89,
	191, 503, 193, 504, 90, 505, 506, 0, 91, 197,
	198, 92, 471, 489, 507, 508, 201, 0, 499, 0,
	482, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	353, 98, 99, 0, 483, 485, 0, 484, 486, 100,
	101, 102, 103, 509, 104, 510, 511, 0, 105, 0,
	106, 0, 0, 0, 502, 108, 0, 109, 0, 0,
	0, 455, 110, 111, 490, 469, 0, 0, 112, 113,
	512, 0, 114, 0, 115, 0, 0, 354, 0, 116,
	500, 0, 210, 0, 117, 118, 496, 498, 0, 0,
	119, 0, 355, 120, 513, 514, 515, 0, 481, 0,
	356, 121, 357, 122, 123, 0, 0, 501, 358, 124,
	359, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 360, 132, 133, 136, 134, 0, 135, 470,
	497, 137, 516, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 361, 141, 362, 491, 142, 143, 0, 492,
	144, 223, 145, 0, 146, 147, 148, 517, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 363, 156, 157,
	1106, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	487, 164, 165, 364, 166, 518, 228, 167, 0, 168,
	169, 171, 519, 170, 493, 0, 172, 0, 173, 174,
	0, 231, 520, 521, 0, 0, 175, 494, 495, 468,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 488,
	0, 183, 184, 185, 236, 522, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 474, 463, 464,
	461, 462, 450, 0, 0, 0, 0, 1102, 1103, 85,
	86, 0, 87, 1104, 0, 0, 1105, 456, 0, 0,
	0, 88, 89, 0, 503, 193, 504, 90, 505, 506,
	0, 91, 197, 198, 92, 471, 489, 507, 508, 201,
	0, 499, 0, 482, 0, 93, 94, 95, 0, 96,
	0, 97, 0, 353, 98, 1749, 0, 483, 485, 0,
	484, 486, 100, 101, 102, 103, 509, 104, 510, 511,
	0, 105, 0, 106, 0, 0, 0, 502, 108, 0,
	109, 0, 0, 0, 455, 110, 111, 490, 469, 0,
	0, 112, 113, 512, 0, 114, 0, 115, 0, 0,
	354, 0, 116, 500, 0, 210, 0, 117, 118, 496,
	498, 0, 0, 119, 0, 355, 120, 513, 514, 515,
	0, 481, 0, 0, 121, 357, 122, 123, 0, 0,
	501, 358, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 360, 132, 133, 136, 134,
	445, 135, 470, 497, 137, 516, 138, 139, 0, 0,
	0, 0, 0, 140, 220, 361, 141, 362, 491, 142,
	143, 0, 492, 144, 223, 145, 0, 146, 147, 148,
	517, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	363, 156, 157, 459, 158, 0, 159, 160, 161, 0,
	226, 162, 163, 487, 164, 165, 0, 166, 518, 228,
	167, 0, 168, 169, 171, 519, 170, 493, 0, 172,
	0, 173, 174, 0, 231, 520, 521, 0, 0, 175,
	494, 495, 468, 176, 177, 1748, 179, 0, 0, 180,
	181, 182, 488, 0, 183, 184, 185, 236, 522, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 443, 85, 86, 0, 87, 444, 0, 0, 451,
	0, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 489,
	199, 200, 201, 0, 499, 0, 482, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 353, 98, 99, 0,
	483, 485, 0, 484, 486, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	490, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 354, 0, 116, 500, 0, 210, 0,
	117, 118, 496, 498, 0, 0, 119, 0, 355, 120,
	213, 214, 215, 0, 216, 0, 356, 121, 357, 122,
	123, 0, 0, 501, 358, 124, 359, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 360, 132,
	133, 136, 134, 0, 135, 0, 497, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 361, 141,
	362, 491, 142, 143, 0, 492, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 363, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 487, 164, 165, 364,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	493, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 494, 495, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 488, 0, 183, 184, 185,
	236, 237, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 1531, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 352, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 353, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 354, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 0, 119, 0,
	355, 120, 213, 214, 215, 0, 216, 0, 356, 121,
	357, 122, 123, 0, 0, 217, 358, 124, 359, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	360, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	361, 141, 362, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 363, 156, 157, 225, 158,
	0, 159, 160, 161, 55, 226, 162, 163, 0, 164,
	165, 364, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 57, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 351, 237, 0, 186, 0, 0, 0, 53,
	187, 188, 189, 190, 0, 54, 347, 651, 0, 652,
	647, 642, 0, 0, 0, 0, 0, 0, 85, 86,
	0, 87, 0, 0, 52, 0, 0, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 352, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 353, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 655,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 644, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 354,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 355, 120, 213, 214, 215, 0,
	216, 0, 356, 121, 357, 122, 123, 0, 0, 217,
	358, 124, 359, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 360, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 645, 0,
	0, 0, 140, 220, 361, 141, 362, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 363,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 364, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 643, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 347,
	651, 0, 652, 647, 642, 0, 0, 0, 0, 653,
	648, 85, 86, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 191, 192, 193, 194, 90,
	195, 196, 0, 91, 197, 198, 92, 0, 0, 199,
	200, 201, 0, 202, 0, 352, 0, 93, 94, 95,
	0, 96, 0, 97, 0, 353, 98, 99, 0, 0,
	0, 0, 0, 0, 100, 101, 102, 103, 203, 104,
	204, 205, 638, 105, 0, 106, 0, 0, 0, 107,
	108, 0, 109, 0, 0, 0, 206, 110, 111, 207,
	644, 0, 0, 112, 113, 208, 0, 114, 0, 115,
	0, 0, 354, 0, 116, 209, 0, 210, 0, 117,
	118, 211, 212, 0, 0, 119, 0, 355, 120, 213,
	214, 215, 0, 216, 0, 356, 121, 357, 122, 123,
	0, 0, 217, 358, 124, 359, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 360, 132, 133,
	136, 134, 0, 135, 0, 218, 137, 219, 138, 139,
	0, 645, 0, 0, 0, 140, 220, 361, 141, 362,
	221, 142, 143, 0, 222, 144, 223, 145, 0, 146,
	147, 148, 224, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 363, 156, 157, 225, 158, 0, 159, 160,
	161, 0, 226, 162, 163, 0, 164, 165, 364, 166,
	227, 228, 167, 0, 168, 169, 171, 229, 170, 230,
	0, 172, 0, 173, 174, 0, 231, 232, 233, 0,
	0, 175, 234, 235, 643, 176, 177, 178, 179, 0,
	0, 180, 181, 182, 0, 0, 183, 184, 185, 236,
	237, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 347, 651, 0, 652, 647, 642, 0, 0,
	0, 0, 653, 648, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 352, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 353, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 644, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 354, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 0, 119, 0,
	355, 120, 213, 214, 215, 0, 216, 0, 356, 121,
	357, 122, 123, 0, 0, 217, 358, 124, 359, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	360, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 645, 0, 0, 0, 140, 220,
	361, 141, 362, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 363, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 364, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 643, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 653, 648, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 211, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 55, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 57, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 351, 237, 0, 186, 0, 0,
	0, 53, 187, 188, 189, 190, 82, 54, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 52, 1226, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 432,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 320, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	1014, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 211, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 926, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 1434, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 211, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 533, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 623, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 622,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 626, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	347, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 626, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 352, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 353, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 354, 0, 116, 209, 0, 210, 0,
	117, 118, 211, 212, 0, 0, 119, 0, 355, 120,
	213, 214, 215, 0, 216, 0, 356, 121, 357, 122,
	123, 0, 0, 217, 358, 124, 359, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 360, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 361, 141,
	362, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 363, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 364,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 899, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 897, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 991, 0, 112, 113, 208, 0,
	114, 0, 115, 902, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 989, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 901, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 990, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 899, 202, 0,
	0, 894, 93, 94, 95, 0, 96, 897, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 902, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 893, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 901, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 900, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 82, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 0, 1226, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 320, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	82, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 575, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 320, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 371, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 326, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 320, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 82, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 85, 86,
	241, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 240, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	82, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 1152, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 1150, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 1141, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 82, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 768, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 255, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	82, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 562, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 211, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 0, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 417, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 414, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 82, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 377, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 211, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 265, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 264, 232, 233, 0, 0, 260, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 265, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 264, 232, 233, 0, 0,
	260, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	82, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 342, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 125, 0,
	0, 126, 0, 127, 128, 129, 130, 131, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 163, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 231, 232, 233,
	0, 0, 175, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 339, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 143, 0, 222, 144, 223,
	145, 0, 146, 147, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 158,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 82, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 0, 0, 85, 86, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	191, 192, 193, 194, 90, 195, 196, 0, 91, 197,
	198, 92, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 93, 94, 95, 0, 96, 0, 97, 0,
	0, 98, 99, 0, 0, 0, 0, 0, 0, 100,
	101, 102, 103, 203, 104, 204, 205, 0, 105, 0,
	106, 0, 0, 0, 107, 108, 0, 109, 0, 0,
	0, 206, 110, 111, 207, 0, 0, 0, 112, 113,
	208, 0, 114, 0, 115, 0, 0, 0, 0, 116,
	209, 0, 210, 0, 117, 118, 337, 212, 0, 0,
	119, 0, 0, 120, 213, 214, 215, 0, 216, 0,
	0, 121, 0, 122, 123, 0, 0, 217, 0, 124,
	0, 0, 125, 0, 0, 126, 0, 127, 128, 129,
	130, 131, 0, 132, 133, 136, 134, 0, 135, 0,
	218, 137, 219, 138, 139, 0, 0, 0, 0, 0,
	140, 220, 0, 141, 0, 221, 142, 143, 0, 222,
	144, 223, 145, 0, 146, 147, 148, 224, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	225, 158, 0, 159, 160, 161, 0, 226, 162, 163,
	0, 164, 165, 0, 166, 227, 228, 167, 0, 168,
	169, 171, 229, 170, 230, 0, 172, 0, 173, 174,
	0, 231, 232, 233, 0, 0, 175, 234, 235, 0,
	176, 177, 178, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 184, 185, 236, 237, 82, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 85, 86,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 191, 192, 193, 194, 90, 195, 196, 0,
	91, 197, 198, 92, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 93, 94, 95, 0, 96, 0,
	97, 0, 0, 98, 99, 0, 0, 0, 0, 0,
	0, 100, 101, 102, 103, 203, 104, 204, 205, 0,
	105, 0, 106, 0, 0, 0, 107, 108, 0, 109,
	0, 0, 0, 206, 110, 111, 207, 0, 0, 0,
	112, 113, 208, 0, 114, 0, 115, 0, 0, 0,
	0, 116, 209, 0, 210, 0, 117, 118, 329, 212,
	0, 0, 119, 0, 0, 120, 213, 214, 215, 0,
	216, 0, 0, 121, 0, 122, 123, 0, 0, 217,
	0, 124, 0, 0, 125, 0, 0, 126, 0, 127,
	128, 129, 130, 131, 0, 132, 133, 136, 134, 0,
	135, 0, 218, 137, 219, 138, 139, 0, 0, 0,
	0, 0, 140, 220, 0, 141, 0, 221, 142, 143,
	0, 222, 144, 223, 145, 0, 146, 147, 148, 224,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 225, 158, 0, 159, 160, 161, 0, 226,
	162, 163, 0, 164, 165, 0, 166, 227, 228, 167,
	0, 168, 169, 171, 229, 170, 230, 0, 172, 0,
	173, 174, 0, 231, 232, 233, 0, 0, 175, 234,
	235, 0, 176, 177, 178, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 184, 185, 236, 237, 82, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 0, 0,
	85, 86, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 89, 191, 192, 193, 194, 90, 195,
	196, 0, 91, 197, 198, 92, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 93, 94, 95, 0,
	96, 0, 97, 0, 0, 98, 99, 0, 0, 0,
	0, 0, 0, 100, 101, 102, 103, 203, 104, 204,
	205, 0, 105, 0, 106, 0, 0, 0, 107, 108,
	0, 109, 0, 0, 0, 206, 110, 111, 207, 0,
	0, 0, 112, 113, 208, 0, 114, 0, 115, 0,
	0, 0, 0, 116, 209, 0, 210, 0, 117, 118,
	211, 212, 0, 0, 119, 0, 0, 120, 213, 214,
	215, 0, 216, 0, 0, 121, 0, 122, 123, 0,
	0, 217, 0, 124, 0, 0, 125, 0, 0, 126,
	0, 127, 128, 129, 130, 131, 0, 132, 133, 136,
	134, 0, 135, 0, 218, 137, 219, 138, 139, 0,
	0, 0, 0, 0, 140, 220, 0, 141, 0, 221,
	142, 143, 0, 222, 144, 223, 145, 0, 146, 147,
	148, 224, 309, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 225, 158, 0, 159, 160, 161,
	0, 226, 162, 163, 0, 164, 165, 0, 166, 227,
	228, 167, 0, 168, 169, 171, 229, 170, 230, 0,
	172, 0, 173, 174, 0, 231, 232, 233, 0, 0,
	175, 234, 235, 0, 176, 177, 178, 179, 0, 0,
	180, 181, 182, 0, 0, 183, 184, 185, 236, 237,
	82, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	0, 0, 85, 86, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 191, 192, 193, 194,
	90, 195, 196, 0, 91, 197, 198, 92, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 93, 94,
	95, 0, 96, 0, 97, 0, 0, 98, 99, 0,
	0, 0, 0, 0, 0, 100, 101, 102, 103, 203,
	104, 204, 205, 0, 105, 0, 106, 0, 0, 0,
	107, 108, 0, 109, 0, 0, 0, 206, 110, 111,
	207, 0, 0, 0, 112, 113, 208, 0, 114, 0,
	115, 0, 0, 0, 0, 116, 209, 0, 210, 0,
	117, 118, 211, 212, 0, 0, 119, 0, 0, 120,
	213, 214, 215, 0, 216, 0, 0, 121, 0, 122,
	123, 0, 0, 217, 0, 124, 0, 0, 258, 0,
	0, 126, 0, 127, 128, 129, 130, 265, 0, 132,
	133, 136, 134, 0, 135, 0, 218, 137, 219, 138,
	139, 0, 0, 0, 0, 0, 140, 220, 0, 141,
	0, 221, 142, 143, 0, 222, 144, 223, 145, 0,
	146, 147, 148, 224, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 225, 158, 0, 159,
	160, 161, 0, 226, 162, 259, 0, 164, 165, 0,
	166, 227, 228, 167, 0, 168, 169, 171, 229, 170,
	230, 0, 172, 0, 173, 174, 0, 264, 232, 233,
	0, 0, 260, 234, 235, 0, 176, 177, 178, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 184, 185,
	236, 237, 82, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 85, 86, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 191, 192,
	193, 194, 90, 195, 196, 0, 91, 197, 198, 92,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	93, 94, 95, 0, 96, 0, 97, 0, 0, 98,
	99, 0, 0, 0, 0, 0, 0, 100, 101, 102,
	103, 203, 104, 204, 205, 0, 105, 0, 106, 0,
	0, 0, 107, 108, 0, 109, 0, 0, 0, 206,
	110, 111, 207, 0, 0, 0, 112, 113, 208, 0,
	114, 0, 115, 0, 0, 0, 0, 116, 209, 0,
	210, 0, 117, 118, 211, 212, 0, 0, 119, 0,
	0, 120, 213, 214, 215, 0, 216, 0, 0, 121,
	0, 122, 123, 0, 0, 217, 0, 124, 0, 0,
	125, 0, 0, 126, 0, 127, 128, 129, 130, 131,
	0, 132, 133, 136, 134, 0, 135, 0, 218, 137,
	219, 138, 139, 0, 0, 0, 0, 0, 140, 220,
	0, 141, 0, 221, 142, 0, 0, 222, 144, 223,
	145, 0, 146, 0, 148, 224, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 225, 0,
	0, 159, 160, 161, 0, 226, 162, 163, 0, 164,
	165, 0, 166, 227, 228, 167, 0, 168, 169, 171,
	229, 170, 230, 0, 172, 0, 173, 174, 0, 231,
	232, 233, 0, 0, 175, 234, 235, 0, 176, 177,
	178, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	184, 185, 236, 237, 794, 186, 813, 814, 815, 0,
	187, 188, 189, 190, 0, 0, 816, 0, 0, 0,
	0, 0, 796, 0, 822, 0, 0, 794, 0, 813,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 795, 0, 796, 0, 822, 0, 810,
	0, 794, 0, 813, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 795, 0, 0, 796,
	0, 822, 810, 0, 794, 0, 813, 814, 815, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	795, 0, 796, 0, 822, 801, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 823, 795, 0, 0, 0, 0, 801, 810,
	0, 0, 0, 0, 821, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818, 823, 0, 0, 0, 0,
	811, 0, 801, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 0, 823,
	0, 0, 817, 811, 0, 801, 0, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 823, 0, 0, 817, 0, 811, 0, 0,
	0, 0, 0, 0, 821, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 818, 0, 0, 820, 0, 817,
	811, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 820, 0, 0, 0, 0, 0,
	819, 0, 0, 807, 808, 809, 812, 806, 803, 804,
	805, 797, 798, 799, 800, 802, 0, 820, 0, 0,
	0, 0, 0, 819, 1319, 0, 807, 808, 809, 0,
	806, 803, 804, 805, 797, 798, 799, 800, 802, 0,
	0, 0, 0, 0, 1703, 0, 0, 819, 0, 0,
	807, 808, 809, 0, 806, 803, 804, 805, 797, 798,
	799, 800, 802, 0, 0, 0, 0, 0, 1702, 0,
	819, 0, 0, 807, 808, 809, 0, 806, 803, 804,
	805, 797, 798, 799, 800, 802, 794, 0, 813, 814,
	815, 1683, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 796, 0, 822, 0, 0, 794,
	0, 813, 814, 815, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 795, 0, 796, 0, 822,
	0, 810, 0, 794, 0, 813, 814, 815, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 795, 0,
	0, 796, 0, 822, 810, 0, 794, 0, 813, 814,
	815, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 795, 0, 796, 0, 822, 801, 810, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 823, 795, 0, 0, 0, 0,
	801, 810, 0, 0, 0, 0, 821, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 818, 823, 0, 0,
	0, 0, 811, 0, 801, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 823, 0, 0, 817, 811, 0, 801, 0, 0,
	0, 0, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 818, 823, 0, 0, 817, 0, 811,
	0, 0, 0, 0, 0, 0, 821, 0, 812, 0,
	0, 0, 0, 0, 0, 0, 818, 0, 0, 820,
	0, 817, 811, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 817, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 0, 0,
	0, 0, 819, 0, 0, 807, 808, 809, 812, 806,
	803, 804, 805, 797, 798, 799, 800, 802, 0, 820,
	0, 0, 0, 1662, 0, 819, 0, 0, 807, 808,
	809, 0, 806, 803, 804, 805, 797, 798, 799, 800,
	802, 0, 0, 0, 0, 0, 1657, 0, 0, 819,
	0, 0, 807, 808, 809, 0, 806, 803, 804, 805,
	797, 798, 799, 800, 802, 0, 0, 0, 0, 0,
	1653, 0, 819, 0, 0, 807, 808, 809, 0, 806,
	803, 804, 805, 797, 798, 799, 800, 802, 794, 0,
	813, 814, 815, 1592, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 0, 0, 796, 0, 822, 0,
	0, 794, 0, 813, 814, 815, 0, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 795, 0, 796,
	0, 822, 0, 810, 0, 794, 0, 813, 814, 815,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	795, 0, 0, 796, 0, 822, 810, 0, 794, 0,
	813, 814, 815, 0, 0, 0, 0, 0, 0, 0,
	816, 0, 0, 0, 795, 0, 796, 0, 822, 801,
	810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 823, 795, 0, 0,
	0, 0, 801, 810, 0, 0, 0, 0, 821, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 818, 823,
	0, 0, 0, 0, 811, 0, 801, 0, 0, 0,
	0, 821, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 818, 0, 823, 0, 0, 817, 811, 0, 801,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 818, 823, 0, 0, 817,
	0, 811, 0, 0, 0, 0, 0, 0, 821, 0,
	812, 0, 0, 0, 0, 0, 0, 0, 818, 0,
	0, 820, 0, 817, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 820, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	0, 0, 0, 0, 819, 0, 0, 807, 808, 809,
	812, 806, 803, 804, 805, 797, 798, 799, 800, 802,
	0, 820, 0, 0, 0, 1591, 0, 819, 0, 0,
	807, 808, 809, 0, 806, 803, 804, 805, 797, 798,
	799, 800, 802, 0, 0, 0, 0, 0, 1500, 0,
	0, 819, 0, 0, 807, 808, 809, 0, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 0, 0,
	0, 0, 1437, 0, 819, 0, 0, 807, 808, 809,
	0, 806, 803, 804, 805, 797, 798, 799, 800, 802,
	794, 0, 813, 814, 815, 1421, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 796, 0,
	822, 0, 0, 794, 0, 813, 814, 815, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 795,
	0, 796, 0, 822, 0, 810, 0, 794, 0, 813,
	814, 815, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 795, 0, 0, 796, 0, 822, 810, 0,
	794, 0, 813, 814, 815, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 795, 0, 796, 0,
	822, 801, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 823, 795,
	0, 0, 0, 0, 801, 810, 0, 0, 0, 0,
	821, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	818, 823, 0, 0, 0, 0, 811, 0, 801, 1767,
	0, 0, 0, 821, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 823, 0, 0, 817, 811,
	0, 801, 0, 1311, 0, 0, 1310, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 818, 823, 0,
	0, 817, 0, 811, 0, 0, 0, 0, 0, 0,
	821, 0, 812, 0, 0, 0, 0, 0, 0, 0,
	818, 0, 0, 820, 0, 817, 811, 0, 0, 0,
	0, 0, 0, 0, 0, 812, 0, 1766, 0, 0,
	0, 0, 0, 0, 0, 0, 820, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 812,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	820, 0, 0, 0, 0, 0, 819, 0, 0, 807,
	808, 809, 812, 806, 803, 804, 805, 797, 798, 799,
	800, 802, 0, 820, 0, 0, 0, 1062, 0, 819,
	0, 0, 807, 808, 809, 0, 806, 803, 804, 805,
	797, 798, 799, 800, 802, 0, 0, 0, 1484, 0,
	0, 0, 0, 819, 0, 0, 807, 808, 809, 0,
	806, 803, 804, 805, 797, 798, 799, 800, 802, 0,
	0, 0, 0, 0, 0, 0, 819, 0, 0, 807,
	808, 809, 0, 806, 803, 804, 805, 797, 798, 799,
	800, 802, 794, 0, 813, 814, 815, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 1002, 825,
	796, 0, 822, 0, 0, 794, 0, 813, 814, 815,
	0, 0, 0, 0, 0, 0, 0, 816, 0, 0,
	824, 795, 0, 796, 0, 822, 0, 810, 0, 794,
	0, 813, 814, 815, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 795, 0, 0, 796, 0, 822,
	810, 0, 0, 1003, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 795, 0,
	0, 0, 0, 801, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1280,
	823, 1297, 1298, 1299, 0, 0, 801, 0, 0, 0,
	0, 1415, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 818, 823, 0, 0, 0, 0, 811, 0,
	801, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 818, 0, 823, 0, 0,
	817, 811, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 818,
	0, 0, 0, 817, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 812, 0, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 820, 0, 817, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 820, 1300,
	0, 0, 0, 0, 0, 794, 0, 813, 814, 815,
	0, 812, 0, 0, 0, 1295, 0, 816, 0, 0,
	0, 0, 820, 796, 0, 822, 0, 0, 819, 0,
	0, 807, 808, 809, 0, 806, 803, 804, 805, 797,
	798, 799, 800, 802, 795, 0, 0, 0, 0, 0,
	810, 819, 0, 0, 807, 808, 809, 0, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 0, 0,
	0, 1296, 0, 0, 0, 819, 0, 0, 807, 808,
	809, 0, 806, 803, 804, 805, 797, 798, 799, 800,
	802, 794, 0, 813, 814, 815, 801, 0, 0, 0,
	0, 0, 0, 816, 0, 0, 0, 0, 0, 796,
	0, 822, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 821, 0, 0, 0, 0,
	795, 0, 0, 0, 0, 818, 810, 0, 1291, 1292,
	1293, 811, 1290, 1287, 1288, 1289, 1281, 1282, 1283, 1284,
	1286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 794, 0, 813, 814, 815, 0, 0, 0, 0,
	0, 0, 801, 816, 0, 0, 1312, 1317, 0, 796,
	0, 822, 0, 0, 0, 0, 0, 812, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 820, 0,
	795, 821, 0, 0, 0, 0, 810, 0, 0, 0,
	0, 818, 0, 0, 0, 1431, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 801, 0, 807, 808, 809, 0, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 0, 823,
	0, 0, 0, 812, 0, 794, 0, 813, 814, 815,
	0, 821, 0, 0, 820, 0, 0, 816, 0, 0,
	0, 818, 0, 796, 0, 822, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 794, 0, 0, 0, 817,
	810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 796, 0, 822, 0, 819, 0, 0,
	807, 808, 809, 0, 806, 803, 804, 805, 797, 798,
	799, 800, 802, 812, 795, 794, 0, 813, 814, 815,
	810, 0, 0, 0, 820, 0, 801, 816, 0, 0,
	1273, 0, 0, 796, 0, 822, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 821, 0, 0, 0, 0,
	810, 0, 0, 0, 0, 818, 801, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 0, 819, 0, 0,
	807, 808, 809, 823, 806, 803, 804, 805, 797, 798,
	799, 800, 802, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1278, 0, 818, 801, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 823, 0, 0, 0, 812, 0, 794,
	0, 813, 814, 815, 0, 821, 0, 0, 820, 0,
	0, 816, 0, 0, 0, 818, 0, 796, 0, 822,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 812, 795, 0,
	0, 0, 0, 817, 810, 0, 0, 0, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 819, 0, 0, 807, 808, 809, 0, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 812, 0, 794,
	0, 813, 814, 815, 0, 0, 0, 0, 820, 0,
	801, 816, 0, 0, 0, 0, 0, 796, 0, 822,
	0, 819, 0, 0, 0, 0, 0, 823, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 795, 821,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 818,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 819, 0, 0, 807, 808, 809, 0, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 817, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 813, 814, 815,
	801, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 796, 0, 822, 1280, 823, 1297, 1298,
	1299, 812, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 820, 0, 795, 0, 0, 0, 0, 818,
	810, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1294, 0, 0, 0, 1280, 0, 1297, 1298, 1299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 819, 801, 0, 807, 808,
	809, 0, 806, 803, 804, 805, 797, 798, 799, 800,
	802, 812, 794, 823, 813, 814, 815, 1285, 0, 0,
	1294, 0, 820, 0, 0, 821, 0, 0, 0, 0,
	796, 0, 822, 0, 1301, 818, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 1300, 0, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 0, 1295, 0, 0, 1280, 1285, 1297, 1298, 1299,
	0, 0, 0, 0, 0, 819, 0, 0, 807, 808,
	809, 0, 806, 803, 804, 805, 797, 798, 799, 800,
	802, 0, 0, 0, 0, 1300, 0, 812, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 0, 820, 0,
	1294, 1295, 0, 0, 0, 0, 0, 0, 1296, 0,
	823, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 818, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 0,
	0, 819, 0, 0, 807, 808, 809, 1296, 806, 803,
	804, 805, 797, 798, 799, 800, 802, 0, 0, 0,
	0, 0, 0, 0, 0, 1291, 1292, 1293, 0, 1290,
	1287, 1288, 1289, 1281, 1282, 1283, 1284, 1286, 0, 0,
	0, 1295, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 820, 596, 591, 613, 585,
	604, 603, 0, 0, 587, 586, 0, 0, 0, 615,
	614, 0, 0, 0, 1291, 1292, 1293, 0, 1290, 1287,
	1288, 1289, 1281, 1282, 1283, 1284, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1296, 609, 0,
	601, 600, 0, 0, 0, 0, 0, 0, 819, 599,
	0, 807, 808, 809, 0, 806, 803, 804, 805, 797,
	798, 799, 800, 802, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 592,
	593, 594, 0, 612, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1291, 1292, 1293, 0, 1290, 1287,
	1288, 1289, 1281, 1282, 1283, 1284, 1286, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	595, 590, 0, 0, 0, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 588, 0, 0, 610, 611, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616,
}
var sqlPact = [...]int{

	2243, -1000, 16, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 696, -1000, -1000, -1000, 557, 688,
	749, 14534, 14534, 14282, 987, 987, 15794, -1000, -1000, 18566,
	2738, 393, 396, 393, 393, 413, 15794, 570, 596, 96,
	-1000, 592, 21, 18314, 14534, 1240, 14, 13274, 245, 2243,
	14030, 14534, 18062, 1062, 986, 951, 13274, 17810, 17558, 17306,
	-1000, 9148, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	537, 258, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 256, -1000,
	13778, -1000, 807, -1000, 13, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 804, -1000, 14534, -1000, -1000, 17054, 16802,
	772, -1000, -1000, 481, 330, 1242, -1000, 30, -1000, -1000,
	1061, -1000, 802, 1060, 1058, 1057, 1056, 329, 833, -1000,
	533, 772, -1000, 772, -1000, -1000, -1000, 490, 15794, -1000,
	13274, -1000, 16550, 997, 16298, -1000, 592, -1000, -1000, -1000,
	819, 1228, 1228, 1228, 1263, 119, 113, 96, 0, 14534,
	-1000, 255, 0, 6254, 6254, -1000, -1000, 245, -1000, 268,
	11500, 28, -1000, 6782, -1000, 776, 1128, 674, 663, 1127,
	-104, 13274, 14534, 14534, 601, 16046, -1000, 1125, 114, 1124,
	-1000, 112, 1120, -1000, -18, -1000, -1000, -1000, -1000, -1000,
	-1000, 245, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13526, 1327, 21595, -1000, 8097,
	-1000, -1000, 11762, 1222, 11762, -1000, -1000, 1325, -1000, -1000,
	11, 8, 909, 1013, 9675, 9412, 1186, 1133, -1000, -1000,
	-1000, 27, 3876, 14534, 1069, 11762, 14534, 14534, 14534, -1000,
	14534, -1000, 908, -1000, 14534, -1000, 7, 2, -1000, 15794,
	-1000, 123, -1000, 244, 882, 15542, 1144, 881, -1000, 819,
	-1000, 801, 904, 7308, 8097, 96, -1000, -1000, 96, 96,
	8097, -1000, -1000, 14534, 0, 1300, 14534, 137, -1000, 20455,
	-1000, -1000, 8097, 8097, 8097, 8097, 8097, 735, -1000, -1000,
	-1000, 4668, -1000, -1000, 28, 239, 139, -1000, -1000, 237,
	28, -1000, -1000, -1000, -1000, 236, 1410, 384, -1000, -1000,
	-1000, 8097, 334, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1067, 234, 233, -1000, -1000, -1000, -1000, 232,
	231, 230, 229, 227, 224, 223, 222, 221, 216, 214,
	212, 209, 705, -1000, 349, -1000, -1000, 349, 349, -1000,
	192, 192, 196, -1000, -1000, -1000, 192, -1000, -1000, -1000,
	314, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 208, 137,
	-1000, -1000, -1000, 14534, 28, -1000, -1000, -1000, 8097, 3612,
	-19, -1000, 21139, -1000, -12, 659, -1000, 12770, 1229, 1211,
	1227, 13274, 483, 480, 14534, 14534, 342, 165, 1296, 165,
	10976, -1000, 14534, 14534, -1000, 14534, -1000, -1000, 14534, -1000,
	14534, 14534, 154, 12266, 599, 1118, 21, -20, -1000, 1294,
	-1000, -1000, -1000, -1000, 104, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 196, 705,
	192, 192, 192, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	314, -1000, -1000, 349, 349, 349, -1000, -1000, -24, 21139,
	477, -6, 12014, 14534, -1000, 25, -1000, -1000, 1050, 389,
	698, 947, 664, -1000, -1000, -1000, -1000, -3, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1366, -1000,
	-1000, -1000, -1000, 1383, -3, -1000, -1000, -1000, -1000, -1000,
	1409, -1000, -1000, -1000, 3876, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14534, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	698, 947, -1000, -1000, 13274, 12518, 1108, 787, 861, -1000,
	-1000, 302, 1106, -1000, -1000, -1000, -1000, 21139, -1000, 21139,
	644, 952, -1000, 952, -4, -1000, 20432, -1000, 191, -26,
	-1000, 342, 6254, 10714, 21595, 14534, 503, 8097, 8097, 8097,
	8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097,
	8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 8097, 810,
	466, 1293, 779, 180, 3876, -1000, 1357, 1357, 1357, 21305,
	21305, 183, 12, 20090, -5, 28, -1000, -1000, 5991, 5726,
	28, 4138, -1000, 1059, 1382, 347, 21139, 1078, 1009, 188,
	101, 100, 8097, 630, 8097, 8360, 8097, 8097, 4933, 8097,
	8097, 8097, 8097, 8097, 8097, -1000, 187, -1000, -1000, -1000,
	-1000, 1380, -1000, -1000, 1379, -1000, 501, 499, 1378, 342,
	97, -1000, 2246, -1000, -1000, 6782, -1000, 599, 14534, 14534,
	14534, -1000, -1000, 855, 15290, -1000, 21595, 14534, -1000, 186,
	185, 925, 919, 14534, 14534, 15038, 14786, 14534, 633, 14534,
	14534, 648, -1000, 625, 8097, 671, -1000, 10190, 353, 14534,
	667, 130, -1000, -1000, -1000, 297, 14534, -1000, -1000, -1000,
	114, -1000, 112, -1000, -1000, 13274, -1000, -1000, -1000, -1000,
	-1000, -1000, 21595, 262, 215, -1000, 1375, 445, -1000, 440,
	435, 430, -1000, 181, -1000, 8097, 14534, 12014, -6, -7,
	-1000, -1000, 14534, 947, -1000, -1000, -1000, 566, -1000, 685,
	-1000, 9938, -1000, -1000, -1000, 1059, -1000, -13, -1000, -1000,
	-1000, -1000, 91, -9, -1000, -1000, -1000, -1000, -1000, 14534,
	284, 14534, 14534, 14534, 1091, 1408, 14534, -1000, -1000, -1000,
	8097, -1000, -1000, -1000, 21, 14534, -1000, 1008, -1000, -11,
	1023, -123, 13022, -1000, 3020, -1000, -1000, 326, 550, 550,
	1319, 1319, 1319, 1319, 2393, 2393, 873, 2305, 20985, 20985,
	20985, 1780, 752, 752, 20985, 20985, 20985, 21305, 21219, 496,
	8097, 427, 771, 180, 8097, -1000, 564, -1000, -1000, -1000,
	1038, 179, 8360, 8360, -1000, -1000, -1000, 4668, -1000, -1000,
	176, 8097, -1000, 8097, -40, -41, -1000, -1000, -32, -1000,
	-1000, -10, 8097, 8097, 8097, 90, -1000, 89, 523, -1000,
	8097, 739, 169, 168, 8097, -1000, -1000, 21025, 87, 1036,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 85, 20945, 82,
	21326, -1000, 8360, 8360, 8360, 4668, 167, 78, 20160, -69,
	20831, 7045, 7045, 7045, 77, 20751, 8097, -69, 19064, 2683,
	2653, -36, -50, -52, 1373, -56, 75, 323, 317, 72,
	1008, -1000, -1000, 8097, -1000, -1000, -1000, 421, 420, 1090,
	-1000, 845, -1000, 716, 8097, 14534, 166, 163, 729, -1000,
	1087, 781, 1086, 781, -1000, -12, 646, -1000, -1000, 410,
	-1000, 6254, 21139, -1000, 631, 1223, -57, -1000, -1000, -1000,
	6254, 342, 10976, 6782, -61, -1000, -1000, 599, -1000, 441,
	1371, 71, 888, 837, 679, 611, 1370, 21139, -13, -1000,
	-13, -1000, -1000, -1000, -1000, -1000, -1000, 14534, -1000, 12518,
	161, 14534, 160, 157, 156, 14534, -1000, 1144, -1000, 67,
	-1000, 1005, 1261, 10714, 944, 930, 10714, 974, 747, 747,
	747, -1000, 13022, 3335, -1000, -1000, 14534, 155, 10452, 64,
	1023, 8097, 496, 8097, 8360, 8360, -1000, 496, -1000, -1000,
	-1000, -1000, 1029, 153, 8097, 21595, 20539, 2737, -62, 5461,
	-14, 19818, -1000, -1000, 139, -1000, 62, 6519, -1000, 20479,
	34, 34, -1000, 1400, 1137, -1000, 8097, 20665, -1000, 11238,
	344, 773, 19795, 21595, -1000, 8097, -1000, 1028, 8097, -1000,
	21595, 8360, 8360, 8360, 8360, 8360, 8360, 8360, 8360, 8360,
	8360, 8360, 8360, 8360, 8360, 8360, 8360, 8360, 8360, 8360,
	954, 8360, 1356, 1356, 1356, -16, 5196, -1000, 1026, 1028,
	8097, 8097, 21595, 61, 59, 58, -1000, 8097, -69, 8097,
	8097, 8097, -1000, -1000, -1000, 54, -1000, 1364, -1000, -1000,
	-1000, -1000, 1005, 20113, 14534, 14534, 14534, 1074, 1156, -1000,
	19771, -72, 14534, 14534, -1000, 950, 1044, 381, 14534, -1000,
	14534, -1000, 14534, 14534, 14534, 14534, -17, 6254, 177, 21,
	14534, -17, 625, -1000, -1000, 294, -1000, 211, 124, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 52, -1000, -1000,
	8886, 149, 14534, 12518, 8886, 785, -1000, -1000, 340, 8097,
	8097, 1023, 10714, 10714, 1182, 928, 10714, -1000, -1000, -1000,
	-1000, 307, -1000, 953, 147, 14534, 13022, 1283, 496, 2632,
	210, 8097, 21595, 21412, -73, 8097, 8097, -1000, -78, -1000,
	8097, -1000, -1000, 1393, 8097, 51, 50, 48, -1000, -1000,
	21139, 8097, -1000, -1000, 18818, 8097, 44, -1000, 43, 21139,
	1026, 21139, -1000, 653, 653, 1356, 1356, 1356, 1356, 598,
	598, 907, 1594, 2274, 2274, 2274, 511, 428, 428, 2274,
	2274, 2274, 1025, 906, 145, 21375, 8097, -79, -1000, -1000,
	-1000, 21139, 21139, 42, -1000, -1000, -1000, -69, 2360, 19748,
	19476, -1000, 41, 340, -1000, -1000, -1000, -1000, 14534, -1000,
	14534, -1000, 14534, 842, -1000, -1000, 918, 144, 8360, 14534,
	-1000, 755, -83, -85, 830, -1000, 823, 8097, -1000, 21595,
	781, 781, -1000, 409, 402, -1000, -17, 1149, 14534, 1226,
	-1000, -1000, -1000, 143, -1000, -1000, -1000, -89, -1000, 213,
	1236, 8097, -1000, -1000, 142, 8886, -91, -1000, -1000, 39,
	-93, 14534, -1000, 14534, 21139, -69, -1000, 1182, -1000, 138,
	8097, 10714, -1000, -1000, 824, -136, -1000, 291, -1000, 14534,
	-95, -1000, 8097, 8097, 21412, -99, -1000, 496, 496, -1000,
	19453, -1000, 20479, -1000, -1000, -1000, 21139, 720, -1000, 19429,
	-1000, -1000, -1000, 8360, 1017, 136, 21595, 19406, -1000, -1000,
	8097, -1000, -1000, -1000, -1000, -1000, 1655, -1000, -1000, -1000,
	8097, 21375, 132, -1000, 128, -1000, -1000, -1000, 677, -1000,
	-1000, 21139, 1245, -1000, -1000, 14534, 14534, 455, -101, 14534,
	-1000, -1000, 4403, 755, 8886, 1224, 28, 14534, 1224, 19134,
	4138, -105, -1000, 14534, -1000, 755, 125, -33, -1000, 1281,
	-1000, 14534, 21139, -1000, 556, 953, -1000, 3876, -106, -1000,
	496, 496, -1000, -1000, 38, 773, 1259, -1000, 21465, 8360,
	21595, -107, -1000, 19111, -1000, 19087, 897, 14534, 14534, 14534,
	360, 14534, -1000, -1000, 600, -1000, 342, -1000, -1000, -1000,
	-1000, -1000, -1000, 1236, -10, 755, -1000, -1000, 8886, 14534,
	121, -111, 498, -1000, -1000, -1000, -1000, 647, 8097, 21465,
	-118, -1000, -1000, -1000, 758, 712, 35, -120, 105, -1000,
	8097, -1000, 10976, -1000, 1224, 33, -1000, -124, -1000, -1000,
	-1000, 1386, 32, 7834, 7834, -69, -1000, -1000, 780, 775,
	555, -1000, -1000, -1000, -1000, -1000, 897, 14534, 21139, -113,
	-1000, -1000, 755, -1000, -1000, -1000, -1000, 8623, 800, 618,
	20137, -1000, -1000, 1165, -1000, 372, 880, 880, 758, -129,
	-1000, -1000, 1337, -1000, -1000, -1000, -1000, -1000, -1000, 1348,
	-1000, -1000, 914, -1000, -1000, -1000, 7571, -1000, -1000, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 1600, 1597, 1256, 121, 117, 1591, 1589, 1588, 100,
	116, 114, 122, 1587, 87, 1585, 1584, 1581, 98, 1580,
	1576, 1575, 44, 1573, 1571, 1570, 1569, 1568, 95, 41,
	160, 1767, 150, 1566, 1565, 1564, 9, 111, 77, 1558,
	38, 59, 106, 109, 688, 76, 1555, 1548, 128, 27,
	25, 294, 92, 141, 130, 124, 1547, 1545, 1543, 42,
	1541, 1540, 1538, 1537, 45, 30, 1535, 10, 1534, 14,
	1531, 1530, 103, 1528, 99, 110, 21, 119, 74, 1526,
	64, 12, 66, 1525, 31, 1522, 29, 73, 134, 1521,
	46, 156, 56, 24, 51, 1518, 1517, 1516, 1515, 82,
	1513, 101, 88, 1512, 1509, 81, 1507, 127, 135, 1506,
	1505, 123, 1504, 1503, 1502, 598, 1499, 1498, 549, 3,
	35, 65, 7, 115, 105, 23, 1496, 19, 1495, 1298,
	843, 701, 1494, 50, 60, 80, 43, 53, 36, 1488,
	1487, 93, 1486, 1485, 1483, 1481, 1480, 78, 1479, 79,
	139, 26, 48, 96, 28, 20, 49, 86, 104, 144,
	107, 1478, 1477, 112, 1476, 52, 1475, 1474, 639, 136,
	1473, 1472, 1471, 567, 505, 344, 57, 1468, 1466, 246,
	216, 1463, 1461, 132, 1460, 1459, 142, 1458, 138, 13,
	1457, 102, 1455, 83, 1451, 0, 118, 71, 1447, 133,
	84, 1445, 1444, 1440, 1439, 22, 2, 8, 11, 5,
	4, 18, 15, 1438, 1437, 125, 89, 1436, 151, 1431,
	1430, 39, 1429, 1427, 16, 1425, 17, 1424, 6, 1,
	1423, 137, 1421, 108, 1419, 1327, 1418, 140, 1417, 1416,
	1296, 85,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 164,
	164, 163, 13, 139, 139, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 231, 231,
	231, 235, 235, 236, 236, 237, 237, 237, 237, 237,
	237, 237, 233, 233, 24, 24, 24, 24, 115, 115,
	117, 117, 117, 117, 43, 114, 114, 114, 114, 116,
	116, 116, 116, 188, 186, 186, 193, 193, 193, 56,
	56, 56, 56, 56, 57, 57, 57, 185, 185, 185,
	185, 194, 194, 194, 194, 194, 194, 58, 58, 58,
	192, 192, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 187, 187, 232, 232,
	234, 234, 8, 8, 59, 59, 60, 60, 121, 121,
	121, 121, 120, 203, 203, 204, 204, 204, 205, 205,
	205, 205, 205, 205, 205, 201, 201, 202, 199, 199,
	200, 200, 200, 200, 238, 238, 119, 119, 63, 63,
	208, 208, 208, 208, 206, 206, 206, 206, 206, 209,
	207, 210, 210, 210, 210, 210, 150, 150, 150, 27,
	7, 7, 104, 104, 67, 67, 154, 154, 154, 68,
	68, 155, 50, 50, 36, 36, 36, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 105, 105, 106, 106,
	19, 23, 26, 26, 26, 26, 26, 240, 240, 47,
	47, 47, 47, 48, 48, 118, 118, 118, 118, 118,
	42, 6, 6, 41, 41, 18, 18, 18, 18, 18,
	53, 53, 111, 111, 111, 113, 113, 112, 112, 112,
	90, 90, 28, 81, 81, 82, 82, 161, 83, 83,
	22, 22, 31, 31, 29, 29, 29, 29, 29, 29,
	30, 30, 32, 32, 32, 32, 32, 32, 32, 216,
	216, 216, 218, 218, 215, 217, 217, 239, 239, 91,
	91, 91, 62, 61, 61, 65, 65, 64, 66, 66,
	153, 88, 88, 88, 88, 107, 108, 108, 109, 109,
	110, 110, 87, 87, 136, 136, 33, 33, 72, 72,
	73, 73, 127, 127, 128, 128, 126, 126, 126, 156,
	156, 156, 156, 157, 157, 157, 157, 157, 157, 151,
	151, 151, 151, 152, 152, 162, 162, 94, 94, 94,
	94, 92, 92, 93, 93, 158, 158, 158, 158, 89,
	89, 159, 159, 159, 122, 122, 165, 165, 165, 71,
	71, 71, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 167, 167, 167, 167, 169,
	169, 169, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 170, 170, 177, 177, 178,
	178, 179, 180, 171, 171, 172, 172, 173, 174, 181,
	181, 181, 181, 183, 183, 175, 175, 175, 175, 175,
	176, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 102, 102, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	211, 211, 211, 211, 211, 211, 211, 213, 213, 214,
	214, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 219, 219, 220, 220,
	221, 221, 222, 222, 224, 225, 225, 225, 226, 230,
	230, 223, 223, 227, 227, 227, 228, 228, 229, 229,
	229, 229, 229, 141, 141, 141, 142, 142, 143, 78,
	78, 138, 138, 137, 137, 137, 140, 140, 95, 182,
	182, 182, 182, 182, 182, 182, 96, 96, 103, 97,
	97, 98, 98, 98, 98, 98, 98, 133, 134, 99,
	99, 99, 135, 135, 144, 148, 148, 147, 146, 146,
	145, 145, 125, 125, 125, 125, 124, 123, 84, 84,
	241, 241, 149, 149, 85, 85, 86, 80, 80, 160,
	160, 160, 160, 74, 74, 55, 55, 75, 75, 51,
	51, 54, 52, 52, 52, 52, 69, 69, 70, 70,
	49, 49, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 184, 184, 184, 44, 44, 44, 45,
	45, 46, 46, 190, 190, 190, 191, 191, 191, 191,
	189, 189, 189, 189, 189, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 2, 2, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 3, 2, 0,
	1, 3, 3, 1, 1, 3, 2, 4, 0, 4,
	2, 1, 4, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -217, 85,
	93, 182, 92, 78, 108, 196, 203, -29, -31, 211,
	212, 29, 220, 53, 88, 198, 193, 240, 59, -216,
	-32, -30, 286, 261, 267, 206, -33, 227, 254, 289,
	227, 71, 119, 80, 123, 248, 247, 71, 119, 227,
	-12, 286, -22, -5, -10, -4, -18, -28, -9, -11,
	19, -44, 4, -195, -197, 16, 17, 19, 28, 29,
	34, 38, 41, 52, 53, 54, 56, 58, 61, 62,
	69, 70, 71, 72, 74, 78, 80, 84, 85, 87,
	92, 93, 98, 99, 102, 104, 109, 114, 115, 120,
	123, 131, 133, 134, 139, 142, 145, 147, 148, 149,
	150, 151, 153, 154, 156, 158, 155, 161, 163, 164,
	170, 173, 176, 177, 180, 182, 184, 185, 186, 188,
	189, 193, 191, 192, 194, 196, 198, 199, 201, 203,
	204, 205, 208, 209, 211, 212, 214, 217, 219, 220,
	223, 221, 226, 228, 229, 236, 240, 241, 242, 243,
	246, 247, 248, 251, 252, 253, 257, 262, 263, 264,
	265, 30, 31, 32, 33, 35, 36, 39, 40, 44,
	45, 46, 48, 73, 75, 76, 91, 94, 100, 110,
	112, 116, 117, 124, 125, 126, 128, 137, 160, 162,
	171, 175, 179, 181, 187, 200, 207, 215, 216, 222,
	224, 231, 232, 233, 237, 238, 254, 255, -44, -44,
	182, 18, -235, 18, -236, -237, 59, 85, 108, 206,
	123, 80, 247, -235, -48, 203, -44, -115, 142, 209,
	236, -116, -114, -188, 231, 151, -76, -44, 4, 71,
	52, 72, 109, 119, 120, 134, 228, 231, 236, 18,
	59, -240, 236, 236, -240, -240, -47, 236, 234, -48,
	-239, 227, 227, -104, 71, 245, -30, -32, -31, -64,
	-65, 244, 127, 90, 169, -29, -31, -216, -218, 188,
	-215, -44, -218, -61, -62, 18, 82, 290, -158, -51,
	167, -44, -86, 286, -3, -158, 116, -44, -54, 116,
	-51, 106, 129, 129, -159, -158, -44, 116, -55, 116,
	-54, -77, 116, -76, -164, -163, -191, 4, -195, -197,
	-196, 254, 50, 60, 107, 122, 130, 132, 138, 140,
	152, 172, 174, 197, 213, 227, -139, 286, -100, 286,
	-44, 18, 166, 290, 166, -44, -115, 46, -115, -117,
	-42, -43, 131, 184, 234, 271, 106, 265, -58, 5,
	77, -79, 288, 106, -232, 166, 106, 106, 106, -187,
	106, 265, 131, 184, 227, -118, -42, -43, -118, 234,
	-48, -89, -158, -76, 116, 119, -44, 116, -64, -65,
	-88, -107, -108, 141, 165, -91, 18, 82, -91, -91,
	38, 287, 287, 290, -218, -70, 286, -80, -160, -129,
	279, -131, 277, 278, 283, 157, 266, -141, -51, -132,
	9, 286, -144, -213, -31, 91, 24, -142, -143, 200,
	-44, 7, 8, 5, 6, -49, -167, -176, 239, 95,
	159, 42, -211, -212, 4, -195, -190, -168, -178, -172,
	-175, 128, 50, 64, 67, 65, 68, 210, 249, 43,
	94, 175, 179, 224, 237, 238, 116, 160, 117, 48,
	110, 137, 84, 31, 33, 35, 36, 44, 45, 73,
	75, 76, 100, 124, 125, 126, 162, 187, 215, 222,
	232, 233, 255, -196, -179, -180, -173, -174, -181, -80,
	-86, 279, -51, 286, -84, -125, -124, -123, 284, 288,
	-85, -149, -129, 77, -38, 191, -37, 17, 19, 85,
	252, 91, 191, 191, 91, 291, -159, -53, -51, -53,
	211, -44, 25, 91, -40, 290, 41, 194, 91, -40,
	290, 91, 287, 290, -158, 116, 25, -138, -165, -166,
	-168, -177, -171, -175, -176, 34, 40, 39, 229, 207,
	216, 32, 124, 125, 126, 215, 31, 187, 100, 84,
	76, 75, 162, 36, 35, -179, -180, -173, -174, 73,
	232, 233, 128, 33, 45, 44, 255, 222, -78, -129,
	-231, -75, 227, 71, -52, -44, 279, -237, -231, 25,
	290, 290, 139, -57, 145, 156, 114, -186, 77, -193,
	-185, -150, 9, 239, 95, 166, -192, 8, 278, -184,
	-191, 5, 7, 277, -186, 77, 62, -194, 5, 4,
	-176, -150, 77, 142, 288, -189, 4, -195, -197, -196,
	-198, 18, 20, 21, 22, 23, 24, 25, 26, 27,
	37, 42, 43, 47, 49, 51, 57, 59, 63, 64,
	65, 66, 67, 68, 77, 79, 81, 82, 83, 86,
	88, 90, 95, 96, 97, 103, 105, 106, 108, 111,
	113, 118, 119, 121, 127, 129, 135, 136, 141, 143,
	144, 157, 159, 165, 166, 167, 168, 169, 178, 183,
	190, 195, 206, 210, 218, 225, 227, 230, 234, 235,
	239, 244, 245, 249, 250, 256, 258, 259, 260, 261,
	-188, -234, 103, -231, -188, -188, -188, -188, 139, -188,
	290, 290, -48, -40, 290, 286, 157, -45, 116, -44,
	-41, 87, 157, -88, -108, -107, -109, -129, 18, -129,
	-131, -30, -30, -30, -66, -153, -129, -215, 25, -69,
	-44, -72, 290, 106, 10, 49, 28, 277, 278, 279,
	280, 101, 281, 274, 275, 276, 273, 269, 270, 271,
	55, 146, 202, 12, 13, 14, 22, 168, 140, 266,
	213, 130, 30, 118, 25, 4, -129, -129, -129, -129,
	-129, 174, -31, -129, -78, -84, -31, -137, 284, 286,
	-84, 286, 5, 5, 286, -145, -129, -219, 262, 103,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 286, 181, -183, 257, -183, -183,
	-169, 286, -169, -170, 286, -169, 263, 267, 286, -72,
	-51, -125, -129, -189, 279, 290, 287, 290, 234, -105,
	57, 51, -120, 116, 51, -199, -44, 57, -200, 47,
	245, 183, 105, -105, 57, -105, 57, 57, -158, 234,
	234, -54, -44, -122, 259, -111, -22, 286, 77, 25,
	-111, -81, -82, -161, -83, -51, 286, -44, -44, -54,
	-55, -76, -77, -12, -163, 91, -14, -22, -18, -28,
	-9, 287, 290, -71, 24, -101, 286, 264, 149, 74,
	115, 148, -102, 205, 287, 290, 234, 290, -75, -69,
	-124, -123, 106, 236, -43, -42, -56, 186, 217, 192,
	208, 290, 8, 7, 7, 5, -189, -233, -44, -43,
	-42, -158, -59, -60, -121, -120, -201, -202, -199, 119,
	245, 96, 91, 166, 157, 271, 91, -110, 200, 201,
	290, -36, 26, 81, 286, 290, 287, -122, -160, -73,
	-156, -158, -31, -157, 286, -165, -76, 231, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	-129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
	140, 213, 30, 118, 234, 159, 157, 239, 95, 246,
	82, 163, -241, 225, 27, -135, -31, 286, -189, -141,
	200, 286, 287, 290, -78, -140, 285, -137, -78, 287,
	287, -78, 256, 18, 82, 279, -101, 7, -148, -147,
	258, -220, 98, 111, 286, 287, 287, -129, -95, -182,
	4, 264, 149, 74, 115, 148, 205, -96, -129, -97,
	-130, -131, 277, 278, 283, 286, 200, -98, -129, -78,
	-129, 37, 136, 235, -99, -129, 106, -78, -129, -129,
	-129, -78, -78, -78, 286, 7, 7, 231, 231, 7,
	-122, 287, 285, 294, -149, -37, -51, -44, -44, 157,
	-120, 116, -165, -44, 286, 286, 133, 133, -44, -44,
	116, -44, 116, -44, -44, -38, 191, -44, -44, 191,
	-90, 195, -129, -90, -113, 166, -74, -51, 254, -44,
	195, -72, 290, 271, -74, -40, -40, -158, -165, 284,
	284, 7, 234, 234, 234, 234, 286, -129, -233, -52,
	-233, -42, 243, 54, 186, -193, -101, 290, 287, 290,
	-45, 119, -45, -76, -51, 91, 5, -44, -153, -14,
	-44, -87, 111, 290, 60, -94, 132, 152, 107, 138,
	197, 122, -126, 291, -152, -151, 25, -44, -31, -157,
	-156, 265, -129, 234, -241, 225, -135, -129, 159, 239,
	95, 246, 82, 163, 106, 286, -130, -130, -78, 286,
	-78, -129, 285, 285, 290, 287, -65, 290, -64, -129,
	-78, -78, 287, 287, -146, -147, 86, -129, -225, 173,
	286, 286, -129, 25, 287, 106, 287, -103, 178, 287,
	10, 277, 278, 279, 280, 101, 281, 274, 275, 276,
	273, 269, 270, 271, 55, 146, 202, 12, 13, 14,
	130, 118, -130, -130, -130, -78, 286, 287, -133, -134,
	106, 103, 25, -99, -99, -99, 287, 106, -78, 290,
	290, 290, 287, 287, 287, 7, 287, 290, 287, 265,
	265, 287, -87, -129, 234, 234, 91, 157, -203, -200,
	-129, -69, 286, 286, -35, 85, 211, -106, 91, -40,
	91, -40, 234, -105, 57, 234, -80, 195, 56, 287,
	290, -80, -122, -82, -149, 287, 285, 7, 7, 287,
	149, 115, 148, -102, 148, -102, -102, 7, -44, -121,
	286, -45, 286, 286, 286, -44, -41, 287, -136, 113,
	38, -156, 132, 132, -156, -94, 132, -92, 172, -92,
	-92, -152, -189, 292, -44, 286, 287, -129, -129, -130,
	-130, 106, 286, -129, -138, 22, 22, 287, -78, 287,
	290, 287, -137, 287, 256, -65, -65, -65, 5, 88,
	-129, 230, -226, -44, 286, 259, -64, 287, -165, -129,
	-133, -129, -165, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, 82, 157, 163, -130, 290, -78, 287, -134,
	-133, -129, -129, -165, 287, 287, 287, -78, -129, -129,
	-129, 287, 7, -136, 285, -44, -44, -120, 91, -204,
	57, -205, 49, 157, 159, 245, 183, 47, 77, 190,
	287, 287, -69, -69, 157, 77, 157, 77, 70, 241,
	-44, -44, -51, -44, -44, -44, -80, -112, 286, 166,
	-22, -51, -90, 271, 285, 285, 287, -67, -154, -44,
	-214, 286, -211, -212, -49, 286, -68, -155, -44, -59,
	-67, 166, -221, 260, -129, -78, -156, -156, -93, 250,
	166, 132, -156, -162, 268, -128, -127, 104, 155, 286,
	-69, -151, 22, 22, -129, -138, 287, -129, -129, 287,
	-129, 5, -129, 287, 287, 287, -129, -230, -44, -129,
	287, 287, -134, 106, 82, 163, 286, -129, 287, 287,
	290, 287, 287, 287, -221, -120, -44, -76, 159, 133,
	286, -130, -51, -119, -238, 58, 223, 287, 287, 159,
	159, -129, -165, -40, -40, 234, 234, 83, -69, 57,
	-86, -31, 286, 287, 290, -50, -84, 49, -50, -129,
	286, -67, 287, 290, 287, 287, -51, -222, -224, -44,
	-93, 286, -129, -156, 163, 290, 293, 271, -69, 287,
	-129, -129, 287, 287, -65, -223, 177, 287, -130, 106,
	286, -138, 287, -129, -205, -129, -46, 286, 286, 190,
	-39, 49, -44, -44, 247, 158, 287, -44, -119, -154,
	-36, -76, -36, 287, -78, 287, -155, -119, 286, 290,
	25, -69, 226, -127, -189, 287, 287, -65, 38, -130,
	-138, 287, 287, 287, -208, 147, -44, -69, -51, -34,
	250, -76, 211, -122, -50, -65, -119, -67, -224, -226,
	287, 231, -227, 185, 201, -78, 287, -206, -209, -207,
	166, 107, 176, 214, 287, 287, -63, 286, -129, -81,
	-36, 287, 287, 5, 287, -228, -229, 30, 242, 62,
	-129, -228, -207, 166, -209, 166, 247, 80, -208, -69,
	-122, -119, -229, 180, 102, 200, 180, 102, -210, 154,
	194, 41, 211, -210, -206, 287, 22, 16, 159, 77,
	-229,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	346, 0, 0, 0, 0, 0, 0, 320, -2, 0,
	0, 278, 0, 278, 278, 282, 0, 348, 243, 345,
	-2, 356, 0, 0, 0, 354, 334, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	69, 0, 71, 72, 73, 74, 75, 76, 77, 78,
	0, 84, 766, 767, 768, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 91, 92,
	845, 94, 0, 101, 102, 103, 105, 106, 107, 108,
	109, 110, 111, 0, 271, 859, 284, 114, 825, 863,
	875, 119, 129, 0, 931, -2, 133, 65, 162, 163,
	0, 165, 179, 0, 0, 0, 177, 0, 0, 174,
	0, 289, 277, 289, 274, 275, 276, 279, 0, 270,
	0, 347, 0, 0, 0, 242, -2, 330, 331, -2,
	0, 351, 351, 351, 0, 0, 331, 0, 339, 849,
	342, 749, 340, 0, 0, 353, 352, 0, 335, 415,
	0, 739, 376, 0, 2, 0, 911, 0, 0, 911,
	0, 0, 0, 0, 0, 421, 57, 911, 48, 911,
	735, 48, 911, 63, 0, 79, 81, 776, 777, 778,
	779, 936, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 0, 0, 0, 89, 0,
	93, 95, 0, 0, 0, 283, 115, 901, 117, 118,
	120, 121, 0, 0, 0, 0, 0, 0, 132, 157,
	158, 66, 0, 0, 181, 0, 0, 0, 0, 170,
	0, 171, 0, 173, 0, 272, 285, 286, 273, 0,
	281, 48, 419, 0, 911, 770, 294, 911, -2, 0,
	326, 363, 364, 0, 0, 0, 349, 350, 0, 0,
	0, 322, 323, 0, 341, 0, 0, 379, 727, 731,
	732, 507, 0, 0, 0, 0, 0, 0, 588, 589,
	590, 0, 592, 593, 594, 906, 0, 598, 599, 925,
	739, 752, 753, 754, 755, 0, 0, 0, 760, 761,
	762, 711, 637, 608, -2, -2, 750, 445, 446, 447,
	448, -2, 938, 612, 614, 616, 617, 618, 619, 0,
	907, 921, 922, 930, 934, 935, 911, 918, 912, 902,
	909, 917, 807, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 775, 469, 470, 475, 476, 478, 379,
	377, 416, 417, 0, 740, 718, 712, 713, 0, 0,
	0, 724, 722, 723, 25, 267, 27, 0, 267, 267,
	0, 0, 0, 0, 0, 0, 425, 0, 300, 0,
	0, 422, 0, 0, 59, 0, 46, 47, 0, 61,
	0, 0, 346, 0, 0, 911, 346, 0, 671, 431,
	432, 433, 434, 435, 504, 438, 439, 440, 441, 442,
	443, 444, 452, 453, 454, 455, 456, 457, 466, 0,
	451, 451, 451, 463, 464, 467, 468, 473, 474, 485,
	486, 488, 490, 484, 484, 484, 481, 482, 0, 669,
	0, 98, 0, 802, 737, 742, 745, 104, 0, 0,
	0, 0, 0, 124, 144, 145, 146, 125, 127, 134,
	136, 137, 138, 147, 148, 149, 150, 236, 0, 238,
	160, 161, 763, 0, 126, 128, 130, 131, 151, 152,
	0, 154, 155, 156, 0, 67, 780, 781, 782, 783,
	784, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 975, 976, 977, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	164, 166, 0, 178, 167, 168, 169, 176, 172, 175,
	0, 0, 280, 239, 0, 185, 0, 0, 911, 769,
	291, 0, 0, 329, 361, 362, 365, 368, 369, 366,
	507, 336, 337, 338, 357, 358, 256, 343, 0, 0,
	746, 425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 730, 511, 512, 513, 535,
	536, 0, -2, 669, 0, 595, 596, 597, 0, 0,
	-2, 0, 757, 504, 0, 0, 710, 639, 0, 0,
	0, 0, 0, 0, 0, 690, 696, 0, 0, 0,
	0, 0, 0, 0, 0, 459, 472, 483, 480, 479,
	461, 0, 460, 458, 0, 462, 0, 0, 0, 425,
	0, 719, 0, 716, 717, 0, 726, 0, 0, 0,
	0, 266, 29, 911, 0, 39, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 311, 0, 311, 302, 0, 0, 0,
	298, 379, 313, 315, 316, 0, 0, 423, 58, 736,
	48, 64, 48, 70, 80, 0, 82, 85, 86, 87,
	88, 83, 0, 426, 428, 436, 0, 491, 492, 493,
	494, 495, 496, 505, 90, 0, 0, 0, 99, 100,
	743, 744, 0, 0, 122, 123, 290, 0, 141, 0,
	143, 0, 237, 765, 764, 504, 68, 180, 112, 287,
	288, 420, 0, 184, 186, 188, 189, 190, 191, 770,
	0, 770, 0, 0, 0, 0, 0, 367, 370, 371,
	0, 360, 254, 255, 346, 0, 748, 373, 728, 378,
	380, 388, 404, 391, 0, 508, 509, 0, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, -2, -2,
	-2, 527, 528, 529, -2, -2, -2, 533, 534, -2,
	0, 0, 721, 0, 0, 541, 0, 544, 546, 548,
	0, 0, 0, 0, 720, 558, 702, 0, 729, 543,
	0, 0, 591, 0, 0, 0, 675, 676, 0, -2,
	600, 356, 0, 0, 0, 0, 758, 0, 709, 705,
	0, 647, 0, 0, 0, 613, 615, 0, 0, 0,
	679, 680, 681, 682, 683, 684, 685, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 925, 0, 669, 695,
	0, 0, 0, 0, 0, 669, 0, 701, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	373, 418, 714, 0, 725, 28, 258, 0, 0, 0,
	31, 911, 194, 0, 0, 0, 0, 0, 269, 40,
	911, 48, 911, 48, 41, 26, 267, 257, 260, 0,
	56, 0, 424, 295, 296, 0, 0, 733, 304, 301,
	0, 425, 0, 0, 0, 60, 62, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 670, 96, 738,
	97, 116, 139, 140, 142, 135, 153, 0, 182, 0,
	0, 770, 0, 0, 0, 0, 293, 294, 359, 0,
	747, 375, 0, 0, 0, 0, 0, 0, 412, 412,
	412, 410, 404, 0, 390, 403, 0, 402, -2, 391,
	0, 0, -2, 0, 0, 0, 559, -2, 542, 545,
	547, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 673, 674, 0, -2, 0, 0, 355, 356,
	356, 356, 606, 0, 0, 706, 0, 0, 607, 0,
	0, 0, 0, 0, 621, 0, 622, 0, 0, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 564, 0, 0, 624, 693, 694,
	0, 0, 0, 0, 0, 0, 629, 0, 700, 0,
	0, 0, 633, 634, 635, 0, 449, 0, 465, 487,
	489, 477, 375, 0, 0, 0, 0, 0, 192, 208,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 37,
	0, 43, 0, 0, 0, 0, 310, 0, 309, 0,
	0, 299, 311, 314, 317, 0, 429, 0, 0, 437,
	497, 498, 499, 500, 501, 502, 503, 0, 113, 187,
	0, 0, 0, 185, 0, 0, 292, 344, 641, 0,
	0, 381, 0, 0, 0, 0, 0, 407, 411, 408,
	409, 406, 386, 0, 400, 0, 393, 510, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 703, 0, 664,
	0, -2, 677, 601, 0, 0, 0, 0, 759, 704,
	708, 0, 645, 646, 650, 0, 0, 611, 0, 678,
	687, 688, 561, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, -2, -2, -2, 578, 579, 580, -2,
	-2, -2, 0, 0, 0, 689, 0, 0, 667, 691,
	692, 697, 698, 0, 626, 627, 628, 699, 0, 0,
	0, 471, 0, 641, 715, 262, 264, 30, 0, 193,
	0, 196, 0, 0, 199, 200, 0, 0, 0, 0,
	210, 217, 0, 0, 0, 45, 0, 0, 268, 0,
	48, 48, 259, 0, 0, 261, 297, 0, 0, 0,
	303, 734, 312, 0, 430, 427, 506, 0, 244, 253,
	253, 0, 609, 610, 0, 0, 0, 249, 251, 0,
	0, 0, 332, 0, 374, 372, 394, 0, 396, 0,
	0, 0, 398, 389, 0, 0, 384, 0, 383, 0,
	0, 392, 0, 0, -2, 0, 552, -2, -2, 663,
	670, 756, 356, 602, 604, 605, 707, 652, 649, 0,
	636, 620, 686, 0, 0, 0, 0, 670, 666, 625,
	0, 631, 632, 450, 333, 32, 0, 197, 198, 201,
	0, 203, 772, 211, 0, 214, 215, 212, 0, 34,
	35, 44, 50, 36, 42, 0, 0, 0, 0, 0,
	318, 319, 0, 217, 0, 256, 751, 0, 256, 0,
	0, 0, 207, 0, 183, 217, 0, 640, 642, 0,
	395, 0, 414, 397, 0, 0, 387, 0, 0, 401,
	-2, -2, 553, 665, 0, 356, 0, 638, -2, 0,
	0, 0, 668, 0, 195, 0, 223, 0, 0, 0,
	52, 0, 263, 265, 0, 306, 425, 308, 205, 245,
	246, 252, 247, 253, 356, 217, 250, 240, 0, 0,
	0, 0, 0, 385, 382, 399, 603, 655, 0, -2,
	0, 586, 630, 202, 228, 0, 0, 0, 219, 38,
	0, 49, 0, 307, 256, 0, 206, 0, 643, 644,
	413, 0, 0, 0, 0, 651, 587, 204, 224, 225,
	0, 220, 221, 222, 771, 216, 223, 0, 51, 425,
	248, 601, 217, 405, 648, 653, 656, -2, 878, 799,
	0, 654, 226, 0, 227, 0, 0, 0, 228, 0,
	305, 241, 0, 658, 659, 660, 661, 662, 229, 0,
	232, 233, 0, 230, 213, 218, 0, 231, 234, 235,
	657,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 275, 3, 281, 276, 3,
	286, 287, 279, 277, 290, 278, 288, 280, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 294, 289,
	269, 271, 270, 3, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 284, 3, 285, 274, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 292, 273, 293, 283,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 272, 57612, 282, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:690
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:696
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:702
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:741
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:791
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:809
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:818
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:863
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:864
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:868
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1095
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			unimplemented()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = Low
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = Normal
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = High
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			unimplemented()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			unimplemented()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = []string(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{ /* unimplemented */
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1624
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = []string(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = []string(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			unimplemented()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1663
		{
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1674
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = true
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = false
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1762
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1763
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = Ascending
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = Descending
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = true
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = false
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1883
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.str = ""
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.str = ""
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			unimplementedWithIssue(6637)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1994
		{
			unimplementedWithIssue(6637)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2036
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = []string(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			unimplemented()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			unimplemented()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			unimplemented()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			unimplemented()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			unimplemented()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2295
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2302
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2303
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = true
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = false
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = false
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = true
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2365
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{ /* SKIP DOC */
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2568
		{
			unimplemented()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.str = astFullJoin
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.str = astLeftJoin
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.str = astRightJoin
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.str = astInnerJoin
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2665
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2666
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2756
		{
			unimplementedWithIssue(2115)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			unimplementedWithIssue(2115)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			unimplementedWithIssue(2115)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2761
		{
			unimplementedWithIssue(2115)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2770
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2817
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2826
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = nil
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2943
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2970
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			unimplemented()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3044
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3046
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3054
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3058
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3086
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3511
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3530
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3531
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3552
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3597
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3600
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3601
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3618
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3634
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3638
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3648
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3652
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3659
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3660
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3662
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3936
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4145
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4181
		{
			unimplemented()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = DNull
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.str = ""
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
