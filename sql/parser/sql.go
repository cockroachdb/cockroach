// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:30

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// Alternatives to manually creating this union type were to build "unionizing"
// functionality into yacc preprocessing, yacc post-processing, or the yacc
// compiler itself. This would allow access to some of the type checking that
// the parser had before, but was decided against because:
// - The processing step would have to be maintained.
// - It would increase the amount of "magic" involved when converting from
//   syntax to Go Code.
// - It still wouldn't provide full access to type checking in some of the
//   arbitrary Go code within rules, which is provided by the Go compiler.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}

//line sql.y:247
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHECK = 57387
const COALESCE = 57388
const COLLATE = 57389
const COLLATION = 57390
const COLUMN = 57391
const COLUMNS = 57392
const COMMIT = 57393
const COMMITTED = 57394
const CONCAT = 57395
const CONFLICT = 57396
const CONSTRAINT = 57397
const COVERING = 57398
const CREATE = 57399
const CROSS = 57400
const CUBE = 57401
const CURRENT = 57402
const CURRENT_CATALOG = 57403
const CURRENT_DATE = 57404
const CURRENT_ROLE = 57405
const CURRENT_TIME = 57406
const CURRENT_TIMESTAMP = 57407
const CURRENT_USER = 57408
const CYCLE = 57409
const DATA = 57410
const DATABASE = 57411
const DATABASES = 57412
const DATE = 57413
const DAY = 57414
const DEC = 57415
const DECIMAL = 57416
const DEFAULT = 57417
const DEFERRABLE = 57418
const DELETE = 57419
const DESC = 57420
const DISTINCT = 57421
const DO = 57422
const DOUBLE = 57423
const DROP = 57424
const ELSE = 57425
const END = 57426
const ESCAPE = 57427
const EXCEPT = 57428
const EXISTS = 57429
const EXPLAIN = 57430
const EXTRACT = 57431
const FALSE = 57432
const FETCH = 57433
const FILTER = 57434
const FIRST = 57435
const FLOAT = 57436
const FOLLOWING = 57437
const FOR = 57438
const FOREIGN = 57439
const FROM = 57440
const FULL = 57441
const GRANT = 57442
const GRANTS = 57443
const GREATEST = 57444
const GROUP = 57445
const GROUPING = 57446
const HAVING = 57447
const HIGH = 57448
const HOUR = 57449
const IF = 57450
const IFNULL = 57451
const IN = 57452
const INDEX = 57453
const INITIALLY = 57454
const INNER = 57455
const INSERT = 57456
const INT = 57457
const INT64 = 57458
const INTEGER = 57459
const INTERSECT = 57460
const INTERVAL = 57461
const INTO = 57462
const IS = 57463
const ISOLATION = 57464
const JOIN = 57465
const KEY = 57466
const LATERAL = 57467
const LEADING = 57468
const LEAST = 57469
const LEFT = 57470
const LEVEL = 57471
const LIKE = 57472
const LIMIT = 57473
const LOCAL = 57474
const LOCALTIME = 57475
const LOCALTIMESTAMP = 57476
const LOW = 57477
const LSHIFT = 57478
const MATCH = 57479
const MINUTE = 57480
const MONTH = 57481
const NAME = 57482
const NAMES = 57483
const NATURAL = 57484
const NEXT = 57485
const NO = 57486
const NORMAL = 57487
const NOT = 57488
const NOTHING = 57489
const NULL = 57490
const NULLIF = 57491
const NULLS = 57492
const NUMERIC = 57493
const OF = 57494
const OFF = 57495
const OFFSET = 57496
const ON = 57497
const ONLY = 57498
const OR = 57499
const ORDER = 57500
const ORDINALITY = 57501
const OUT = 57502
const OUTER = 57503
const OVER = 57504
const OVERLAPS = 57505
const OVERLAY = 57506
const PARTIAL = 57507
const PARTITION = 57508
const PLACING = 57509
const POSITION = 57510
const PRECEDING = 57511
const PRECISION = 57512
const PRIMARY = 57513
const PRIORITY = 57514
const RANGE = 57515
const READ = 57516
const REAL = 57517
const RECURSIVE = 57518
const REF = 57519
const REFERENCES = 57520
const RENAME = 57521
const REPEATABLE = 57522
const RESTRICT = 57523
const RETURNING = 57524
const REVOKE = 57525
const RIGHT = 57526
const ROLLBACK = 57527
const ROLLUP = 57528
const ROW = 57529
const ROWS = 57530
const RSHIFT = 57531
const SEARCH = 57532
const SECOND = 57533
const SELECT = 57534
const SERIALIZABLE = 57535
const SESSION = 57536
const SESSION_USER = 57537
const SET = 57538
const SHOW = 57539
const SIMILAR = 57540
const SIMPLE = 57541
const SMALLINT = 57542
const SNAPSHOT = 57543
const SOME = 57544
const SQL = 57545
const START = 57546
const STRICT = 57547
const STRING = 57548
const STORING = 57549
const SUBSTRING = 57550
const SYMMETRIC = 57551
const TABLE = 57552
const TABLES = 57553
const TEXT = 57554
const THEN = 57555
const TIME = 57556
const TIMESTAMP = 57557
const TO = 57558
const TRAILING = 57559
const TRANSACTION = 57560
const TREAT = 57561
const TRIM = 57562
const TRUE = 57563
const TRUNCATE = 57564
const TYPE = 57565
const UNBOUNDED = 57566
const UNCOMMITTED = 57567
const UNION = 57568
const UNIQUE = 57569
const UNKNOWN = 57570
const UPDATE = 57571
const USER = 57572
const USING = 57573
const VALID = 57574
const VALIDATE = 57575
const VALUE = 57576
const VALUES = 57577
const VARCHAR = 57578
const VARIADIC = 57579
const VARYING = 57580
const WHEN = 57581
const WHERE = 57582
const WINDOW = 57583
const WITH = 57584
const WITHIN = 57585
const WITHOUT = 57586
const YEAR = 57587
const ZONE = 57588
const NOT_LA = 57589
const WITH_LA = 57590
const POSTFIXOP = 57591
const UMINUS = 57592

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4082

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	269, 19,
	-2, 305,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 276,
	155, 276,
	182, 276,
	267, 276,
	269, 276,
	-2, 286,
	-1, 40,
	1, 279,
	155, 279,
	182, 279,
	267, 279,
	269, 279,
	-2, 285,
	-1, 49,
	1, 19,
	269, 19,
	-2, 305,
	-1, 85,
	1, 135,
	269, 135,
	-2, 765,
	-1, 244,
	131, 315,
	154, 315,
	-2, 282,
	-1, 247,
	131, 314,
	154, 314,
	-2, 280,
	-1, 355,
	131, 314,
	154, 314,
	-2, 283,
	-1, 412,
	266, 713,
	-2, 708,
	-1, 413,
	266, 714,
	-2, 709,
	-1, 419,
	6, 434,
	266, 434,
	-2, 842,
	-1, 441,
	6, 404,
	-2, 820,
	-1, 442,
	6, 431,
	266, 431,
	-2, 821,
	-1, 443,
	6, 412,
	-2, 822,
	-1, 444,
	6, 411,
	-2, 823,
	-1, 445,
	6, 431,
	266, 431,
	-2, 826,
	-1, 446,
	6, 431,
	266, 431,
	-2, 827,
	-1, 447,
	6, 432,
	-2, 829,
	-1, 448,
	6, 399,
	-2, 830,
	-1, 449,
	6, 399,
	-2, 831,
	-1, 450,
	6, 414,
	-2, 834,
	-1, 451,
	6, 400,
	-2, 839,
	-1, 452,
	6, 401,
	-2, 840,
	-1, 453,
	6, 402,
	-2, 841,
	-1, 454,
	6, 399,
	-2, 845,
	-1, 455,
	6, 405,
	-2, 850,
	-1, 456,
	6, 403,
	-2, 852,
	-1, 457,
	6, 433,
	-2, 856,
	-1, 458,
	6, 429,
	266, 429,
	-2, 860,
	-1, 712,
	86, 286,
	118, 286,
	131, 286,
	154, 286,
	158, 286,
	226, 286,
	-2, 536,
	-1, 720,
	266, 693,
	-2, 683,
	-1, 913,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 467,
	-1, 914,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 468,
	-1, 915,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 469,
	-1, 919,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 473,
	-1, 920,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 474,
	-1, 921,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 475,
	-1, 924,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 480,
	-1, 955,
	163, 606,
	-2, 609,
	-1, 1104,
	86, 286,
	118, 286,
	131, 286,
	154, 286,
	158, 286,
	226, 286,
	-2, 356,
	-1, 1112,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 481,
	-1, 1117,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 482,
	-1, 1136,
	163, 605,
	-2, 608,
	-1, 1275,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 483,
	-1, 1280,
	121, 0,
	-2, 493,
	-1, 1289,
	163, 607,
	-2, 610,
	-1, 1329,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 517,
	-1, 1330,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 518,
	-1, 1331,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 519,
	-1, 1335,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 523,
	-1, 1336,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 524,
	-1, 1337,
	12, 0,
	13, 0,
	14, 0,
	249, 0,
	250, 0,
	251, 0,
	-2, 525,
	-1, 1430,
	121, 0,
	-2, 494,
	-1, 1434,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 497,
	-1, 1435,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 499,
	-1, 1514,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 498,
	-1, 1515,
	30, 0,
	110, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 500,
	-1, 1523,
	121, 0,
	-2, 526,
	-1, 1560,
	121, 0,
	-2, 527,
	-1, 1605,
	30, 0,
	130, 0,
	198, 0,
	247, 0,
	-2, 819,
}

const sqlNprod = 952
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19028

var sqlAct = [...]int{

	952, 1604, 1587, 791, 1565, 1625, 1588, 1603, 1471, 1589,
	853, 1531, 1309, 798, 1504, 1399, 411, 1367, 1281, 275,
	1194, 715, 1416, 1410, 1493, 1100, 1051, 410, 86, 1010,
	840, 471, 1092, 13, 837, 1255, 1139, 1398, 253, 28,
	499, 650, 403, 717, 1193, 670, 1264, 839, 478, 1282,
	799, 375, 968, 777, 1088, 972, 940, 768, 937, 61,
	1007, 864, 746, 750, 28, 666, 1103, 526, 962, 386,
	832, 289, 512, 481, 483, 18, 248, 10, 247, 255,
	39, 672, 376, 385, 345, 553, 346, 294, 28, 6,
	509, 472, 473, 59, 90, 258, 862, 358, 861, 537,
	296, 63, 40, 62, 292, 39, 842, 357, 359, 83,
	528, 41, 68, 508, 524, 64, 285, 272, 501, 475,
	272, 1495, 281, 476, 965, 272, 474, 291, 475, 39,
	501, 369, 476, 792, 1601, 474, 1595, 1492, 796, 857,
	1594, 252, 245, 857, 271, 1586, 1581, 278, 1433, 857,
	1562, 244, 286, 1433, 413, 300, 673, 405, 675, 966,
	297, 1556, 252, 1060, 857, 322, 1550, 323, 1541, 1492,
	1516, 1492, 1511, 1433, 1501, 857, 677, 1492, 1491, 1476,
	1475, 1492, 857, 857, 1456, 89, 1436, 1132, 1132, 1132,
	967, 964, 673, 1432, 1377, 676, 1433, 857, 89, 89,
	1285, 690, 89, 1132, 45, 89, 89, 89, 1553, 674,
	89, 89, 89, 89, 1246, 299, 1242, 500, 1211, 500,
	1209, 1212, 47, 1132, 1208, 1207, 1136, 1132, 1132, 1132,
	1134, 1133, 45, 89, 89, 1135, 1132, 858, 765, 506,
	857, 764, 507, 969, 1342, 1288, 1072, 48, 766, 1090,
	47, 1074, 459, 1138, 43, 45, 857, 813, 504, 502,
	44, 948, 852, 826, 370, 645, 644, 377, 377, 350,
	518, 502, 517, 47, 1132, 48, 317, 479, 42, 270,
	49, 355, 43, 45, 691, 476, 552, 334, 44, 1602,
	466, 1600, 1557, 1500, 1461, 1457, 470, 963, 48, 1449,
	1448, 47, 1443, 1442, 1441, 43, 60, 1394, 272, 1440,
	1427, 44, 1357, 301, 1352, 1351, 1350, 1292, 1110, 465,
	1270, 356, 1254, 1214, 1213, 1532, 48, 1201, 1060, 795,
	1076, 1192, 1165, 1162, 1160, 349, 1149, 692, 475, 1143,
	1073, 1311, 476, 468, 1022, 474, 979, 978, 500, 723,
	369, 368, 945, 272, 494, 1552, 718, 42, 245, 1533,
	647, 658, 660, 1525, 674, 1507, 1498, 244, 667, 1490,
	1468, 1454, 1166, 1425, 1182, 1183, 1184, 1421, 1406, 1279,
	286, 706, 707, 708, 709, 710, 1269, 1252, 1251, 646,
	713, 1249, 1226, 89, 1225, 89, 1191, 89, 1157, 1156,
	492, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	726, 1148, 89, 1129, 1513, 1179, 1125, 942, 1393, 714,
	720, 300, 300, 1166, 751, 754, 1036, 1035, 89, 556,
	515, 946, 516, 1017, 977, 856, 756, 744, 89, 89,
	548, 89, 541, 743, 742, 637, 741, 740, 641, 739,
	642, 640, 738, 737, 736, 735, 734, 656, 733, 732,
	731, 730, 675, 721, 654, 245, 668, 655, 245, 245,
	719, 89, 1186, 89, 662, 42, 761, 663, 664, 648,
	677, 299, 299, 1185, 276, 1036, 373, 547, 1512, 555,
	89, 1272, 89, 89, 1271, 89, 467, 1397, 1180, 676,
	1061, 256, 759, 1111, 675, 341, 329, 89, 748, 749,
	728, 1411, 362, 752, 328, 771, 792, 1312, 755, 1166,
	973, 1152, 677, 747, 1057, 89, 1571, 794, 89, 484,
	1614, 485, 28, 808, 294, 675, 344, 1385, 233, 758,
	61, 676, 379, 782, 784, 28, 265, 757, 1615, 1068,
	234, 1181, 53, 677, 1484, 1540, 1483, 815, 272, 903,
	760, 790, 762, 251, 993, 802, 1238, 1218, 1217, 556,
	806, 556, 676, 291, 242, 807, 778, 1147, 239, 301,
	301, 1573, 63, 1146, 62, 787, 39, 557, 691, 54,
	1145, 774, 1144, 1113, 486, 250, 64, 929, 812, 789,
	810, 814, 300, 820, 819, 816, 817, 297, 811, 724,
	809, 1176, 1177, 1178, 788, 1175, 1172, 1173, 1174, 1167,
	1168, 1169, 1170, 1171, 89, 939, 461, 495, 781, 555,
	1424, 555, 326, 969, 770, 252, 460, 1539, 831, 89,
	1237, 692, 770, 89, 418, 939, 89, 556, 769, 1583,
	89, 1622, 89, 89, 1052, 89, 463, 1473, 89, 89,
	89, 691, 299, 1166, 1584, 89, 89, 327, 850, 851,
	1167, 1168, 1169, 1170, 1171, 377, 859, 973, 501, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	1614, 1050, 780, 249, 55, 902, 1179, 555, 685, 678,
	679, 680, 681, 682, 692, 240, 927, 272, 1228, 490,
	462, 1591, 1067, 415, 1301, 867, 489, 557, 1534, 557,
	835, 834, 243, 980, 1069, 991, 1628, 1001, 1003, 1008,
	1011, 1012, 1013, 272, 836, 487, 1166, 759, 949, 954,
	56, 957, 759, 680, 681, 682, 51, 866, 779, 371,
	301, 1021, 953, 365, 366, 479, 1002, 983, 1169, 1170,
	1171, 347, 1014, 1015, 1016, 325, 324, 969, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 1592, 1621, 1180,
	943, 745, 57, 1053, 89, 944, 928, 675, 52, 556,
	342, 1235, 89, 89, 1031, 557, 1521, 1115, 1474, 767,
	711, 822, 1298, 1025, 1155, 677, 925, 824, 1265, 502,
	252, 1593, 484, 1590, 485, 1033, 325, 938, 89, 1613,
	825, 89, 1229, 873, 676, 986, 361, 1027, 823, 1611,
	1626, 1026, 1181, 1299, 1409, 675, 1055, 846, 1063, 337,
	343, 675, 318, 667, 484, 360, 485, 316, 1478, 555,
	1477, 1046, 1620, 677, 1466, 291, 1220, 1056, 1030, 677,
	987, 847, 1180, 291, 1077, 1062, 1381, 1627, 361, 653,
	1059, 649, 676, 1064, 926, 1075, 1065, 486, 676, 1066,
	1083, 58, 1629, 1338, 1070, 28, 969, 50, 1297, 1071,
	360, 988, 985, 1566, 661, 643, 1175, 1172, 1173, 1174,
	1167, 1168, 1169, 1170, 1171, 1452, 1078, 519, 1081, 486,
	1467, 300, 89, 89, 89, 1181, 1112, 1105, 89, 1099,
	1117, 89, 1085, 873, 1084, 272, 39, 89, 89, 89,
	89, 89, 1109, 89, 89, 1038, 1086, 1380, 1635, 1131,
	89, 752, 89, 755, 989, 1037, 965, 557, 89, 1140,
	1339, 1419, 749, 748, 1106, 1260, 1340, 89, 89, 1259,
	324, 691, 1128, 89, 1153, 284, 1130, 691, 1158, 250,
	352, 299, 1256, 1089, 1047, 1116, 1114, 1524, 1453, 1141,
	1142, 966, 1174, 1167, 1168, 1169, 1170, 1171, 89, 713,
	89, 89, 1384, 89, 523, 1008, 1008, 1008, 984, 1383,
	976, 1451, 89, 1195, 1166, 69, 482, 89, 89, 1278,
	89, 1634, 967, 964, 692, 1216, 1161, 1151, 1190, 1124,
	692, 818, 1196, 521, 1137, 74, 1223, 673, 487, 1203,
	70, 340, 338, 522, 678, 679, 680, 681, 682, 335,
	283, 729, 639, 377, 975, 1364, 1233, 1231, 71, 1219,
	1079, 848, 479, 1243, 845, 1198, 1199, 1200, 505, 503,
	487, 498, 73, 491, 488, 969, 1215, 1306, 1485, 301,
	1382, 1240, 1224, 1232, 363, 1234, 268, 1091, 1222, 683,
	684, 685, 678, 679, 680, 681, 682, 854, 678, 679,
	680, 681, 682, 1615, 1239, 1236, 543, 770, 1487, 331,
	1245, 1244, 1274, 785, 1275, 546, 534, 545, 1250, 539,
	786, 1241, 1248, 3, 398, 1280, 770, 1262, 1095, 963,
	802, 77, 783, 1290, 1495, 1536, 1559, 1095, 1257, 1290,
	1180, 367, 1098, 1266, 1267, 364, 65, 269, 675, 855,
	72, 1098, 1093, 1307, 1554, 87, 797, 1096, 669, 1286,
	272, 1263, 1316, 272, 1108, 1318, 1096, 1632, 259, 259,
	1633, 1094, 274, 277, 76, 274, 280, 274, 332, 1291,
	274, 287, 274, 87, 1418, 676, 549, 75, 232, 1258,
	1166, 89, 1261, 1181, 1313, 675, 1347, 1348, 1300, 1302,
	1303, 1426, 1358, 87, 87, 1354, 1355, 1356, 1317, 1315,
	319, 320, 1304, 1097, 1345, 89, 1319, 1294, 1295, 1296,
	1273, 1343, 1097, 235, 236, 237, 238, 89, 1210, 89,
	551, 89, 1353, 1020, 89, 827, 675, 1019, 828, 1346,
	1018, 970, 829, 550, 1438, 89, 1305, 1349, 89, 830,
	1363, 1359, 722, 1472, 677, 67, 89, 1412, 638, 89,
	1417, 1167, 1168, 1169, 1170, 1171, 1404, 336, 1445, 1404,
	1396, 1378, 1379, 676, 1582, 1154, 1395, 1403, 994, 1430,
	1403, 28, 66, 873, 1434, 1435, 1407, 1413, 1520, 1437,
	1408, 1503, 1405, 974, 1439, 1405, 1423, 1122, 1431, 727,
	23, 1401, 893, 391, 1365, 1388, 1221, 841, 1120, 1444,
	89, 558, 892, 1447, 544, 1422, 533, 873, 414, 339,
	872, 69, 527, 536, 873, 982, 464, 416, 870, 272,
	272, 417, 895, 272, 871, 753, 404, 868, 1450, 295,
	800, 74, 971, 1455, 1150, 725, 70, 390, 396, 395,
	950, 387, 321, 81, 82, 873, 1054, 1392, 1414, 1415,
	793, 849, 1420, 274, 71, 87, 1118, 353, 540, 535,
	1123, 657, 89, 89, 89, 1230, 241, 1163, 73, 1000,
	89, 89, 259, 1462, 1479, 992, 89, 990, 89, 981,
	89, 89, 89, 89, 348, 1463, 894, 1465, 274, 869,
	477, 801, 893, 1497, 374, 935, 89, 333, 274, 274,
	1404, 496, 892, 860, 89, 89, 933, 1488, 89, 1508,
	872, 1403, 1494, 1404, 89, 89, 1496, 1481, 1482, 1514,
	1515, 1486, 895, 1107, 1403, 1480, 1405, 873, 1506, 1119,
	372, 513, 665, 513, 1499, 1470, 1121, 267, 266, 1405,
	838, 330, 520, 821, 493, 1535, 72, 1570, 1227, 1528,
	87, 46, 513, 87, 17, 87, 89, 1510, 16, 1530,
	15, 14, 931, 1526, 930, 12, 11, 652, 936, 1502,
	994, 994, 1529, 1517, 1082, 9, 8, 7, 22, 272,
	21, 479, 20, 75, 5, 259, 894, 4, 671, 869,
	1543, 2, 1126, 1127, 1545, 1, 0, 1547, 1544, 1404,
	1551, 0, 0, 0, 0, 0, 1519, 0, 1509, 89,
	1403, 89, 0, 89, 1546, 0, 759, 0, 1549, 0,
	89, 0, 0, 0, 0, 1405, 0, 0, 994, 994,
	994, 0, 0, 873, 1561, 1574, 0, 932, 0, 0,
	0, 0, 0, 1555, 934, 0, 0, 0, 0, 1577,
	1187, 1188, 1189, 0, 89, 1572, 89, 1580, 1579, 1404,
	0, 0, 1597, 1575, 89, 0, 89, 0, 1567, 1568,
	1403, 1596, 0, 0, 1608, 1608, 1599, 1598, 0, 1585,
	1578, 873, 1609, 0, 274, 1405, 1612, 1558, 1610, 0,
	0, 1616, 1617, 0, 1569, 0, 1608, 1619, 0, 775,
	1618, 0, 873, 274, 0, 0, 274, 0, 0, 1631,
	274, 1630, 804, 805, 0, 274, 1576, 1166, 274, 87,
	87, 0, 0, 1608, 1636, 513, 671, 0, 89, 89,
	0, 0, 89, 802, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 994, 994, 0,
	0, 0, 89, 0, 0, 0, 1373, 0, 1368, 0,
	0, 0, 0, 0, 0, 0, 1366, 0, 0, 1276,
	1277, 0, 0, 873, 0, 0, 0, 89, 89, 89,
	0, 89, 0, 0, 0, 0, 1374, 0, 0, 0,
	1166, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	994, 994, 994, 994, 994, 994, 994, 994, 994, 994,
	994, 994, 994, 994, 994, 994, 994, 994, 89, 994,
	1373, 0, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	0, 1341, 893, 1180, 0, 0, 0, 392, 29, 0,
	1374, 0, 892, 0, 833, 0, 0, 1369, 0, 1370,
	872, 0, 274, 775, 1091, 0, 0, 0, 0, 0,
	0, 0, 895, 29, 0, 0, 893, 0, 0, 0,
	0, 0, 1372, 893, 0, 0, 892, 246, 274, 1375,
	254, 87, 0, 892, 872, 0, 1181, 29, 0, 0,
	0, 872, 0, 0, 0, 1095, 895, 0, 254, 0,
	0, 0, 0, 895, 893, 0, 1180, 0, 0, 1098,
	0, 1369, 0, 1370, 892, 0, 0, 0, 0, 1093,
	0, 0, 872, 0, 1096, 0, 894, 0, 1371, 869,
	0, 0, 0, 0, 895, 0, 1372, 0, 1094, 0,
	0, 0, 0, 1375, 0, 0, 0, 0, 0, 0,
	1175, 1172, 1173, 1174, 1167, 1168, 1169, 1170, 1171, 1181,
	894, 0, 0, 869, 0, 0, 0, 894, 222, 0,
	869, 0, 274, 1028, 1029, 0, 0, 0, 775, 0,
	1097, 1034, 231, 0, 0, 0, 893, 1039, 1040, 1042,
	1044, 1045, 1371, 1048, 1049, 0, 892, 994, 894, 0,
	274, 869, 1058, 0, 872, 0, 0, 0, 274, 0,
	0, 0, 0, 0, 224, 0, 895, 833, 513, 1469,
	0, 0, 0, 833, 1172, 1173, 1174, 1167, 1168, 1169,
	1170, 1171, 0, 223, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 0,
	87, 274, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 0, 0, 226, 0, 1102, 1102, 0,
	274, 0, 0, 0, 994, 227, 0, 0, 0, 0,
	894, 0, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 246, 0, 0, 1523, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 675, 0, 693, 694, 695,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	893, 0, 0, 677, 0, 702, 0, 994, 0, 0,
	892, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 893, 676, 0, 0, 0, 0, 0, 690, 1560,
	895, 892, 0, 0, 0, 228, 0, 0, 229, 872,
	0, 0, 230, 0, 0, 0, 894, 0, 0, 869,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 246, 246, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 712, 0, 0,
	0, 716, 893, 0, 894, 0, 701, 869, 0, 0,
	0, 671, 892, 0, 0, 698, 0, 0, 0, 0,
	872, 691, 0, 0, 0, 894, 0, 0, 869, 0,
	0, 0, 895, 0, 0, 274, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 0, 0, 1247, 0, 775,
	0, 652, 0, 0, 1253, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 274, 0, 0, 274, 675,
	0, 693, 694, 695, 692, 0, 1268, 0, 0, 1102,
	0, 696, 0, 700, 0, 0, 0, 677, 0, 702,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 869,
	0, 29, 0, 0, 0, 0, 676, 0, 0, 0,
	0, 0, 690, 0, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1310, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 0, 1024, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 703,
	0, 0, 1166, 0, 1182, 1183, 1184, 0, 0, 0,
	701, 0, 0, 0, 1429, 0, 0, 0, 0, 698,
	0, 0, 1361, 1362, 775, 691, 0, 0, 0, 0,
	671, 671, 0, 0, 0, 0, 1386, 0, 1387, 0,
	274, 1389, 1390, 1391, 0, 1179, 697, 0, 0, 0,
	0, 0, 0, 0, 1400, 0, 775, 1400, 0, 0,
	0, 0, 0, 0, 274, 274, 0, 0, 274, 0,
	0, 0, 0, 0, 671, 1102, 0, 0, 692, 0,
	0, 0, 675, 0, 693, 694, 695, 700, 0, 0,
	0, 0, 0, 0, 696, 0, 0, 0, 0, 0,
	677, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 1185, 0, 0, 1446, 0, 0, 676,
	0, 0, 0, 0, 0, 690, 0, 0, 1180, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 687, 688,
	689, 941, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 1458,
	0, 1166, 0, 1182, 1183, 1184, 0, 0, 0, 775,
	0, 1464, 0, 87, 0, 0, 0, 0, 0, 0,
	274, 1181, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 1400, 0,
	0, 0, 698, 0, 1179, 0, 0, 0, 691, 0,
	0, 1400, 0, 0, 274, 0, 1505, 0, 0, 0,
	0, 0, 0, 0, 274, 0, 671, 0, 0, 697,
	0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
	0, 1176, 1177, 1178, 0, 1175, 1172, 1173, 1174, 1167,
	1168, 1169, 1170, 1171, 0, 0, 0, 0, 0, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	700, 0, 1185, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1180, 1537, 1538,
	0, 0, 1542, 0, 29, 0, 0, 1400, 0, 0,
	87, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 0, 671, 671, 274,
	1181, 87, 1206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1400, 1505, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 274, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1176, 1177, 1178, 0, 1175, 1172, 1173, 1174, 1167, 1168,
	1169, 1170, 1171, 0, 412, 400, 401, 402, 399, 388,
	0, 0, 0, 0, 0, 0, 91, 92, 0, 93,
	0, 0, 0, 0, 394, 0, 712, 0, 94, 95,
	0, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	1607, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 863, 419,
	0, 863, 122, 308, 123, 0, 0, 439, 309, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 0, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 1606, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 382, 0, 0, 389, 0, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 863, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 91,
	92, 559, 93, 560, 561, 562, 563, 564, 565, 566,
	567, 94, 95, 181, 182, 183, 96, 184, 185, 568,
	97, 186, 187, 98, 569, 570, 188, 189, 571, 190,
	572, 303, 573, 99, 100, 101, 0, 102, 574, 103,
	575, 304, 104, 105, 576, 577, 578, 579, 580, 581,
	106, 107, 108, 109, 191, 110, 192, 193, 582, 583,
	111, 584, 585, 586, 112, 113, 587, 588, 712, 589,
	194, 114, 195, 590, 591, 115, 116, 196, 117, 592,
	593, 594, 305, 595, 118, 197, 596, 198, 597, 119,
	120, 199, 200, 598, 599, 600, 306, 121, 201, 202,
	203, 601, 204, 602, 307, 122, 308, 123, 603, 604,
	205, 309, 124, 310, 605, 260, 606, 607, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 608,
	133, 609, 206, 134, 207, 135, 136, 610, 611, 612,
	613, 614, 137, 208, 312, 138, 313, 209, 139, 140,
	615, 210, 141, 211, 616, 142, 143, 144, 212, 145,
	146, 617, 147, 148, 149, 618, 150, 314, 151, 152,
	213, 153, 0, 154, 155, 619, 156, 262, 620, 157,
	158, 315, 159, 214, 160, 621, 161, 162, 164, 215,
	163, 216, 622, 623, 165, 166, 624, 264, 217, 625,
	626, 263, 218, 219, 627, 167, 168, 169, 170, 628,
	629, 171, 172, 630, 631, 173, 174, 175, 220, 221,
	632, 176, 633, 634, 635, 636, 177, 178, 179, 180,
	0, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 91, 92, 559, 93, 560, 561, 562,
	563, 564, 565, 566, 567, 94, 95, 181, 182, 183,
	96, 184, 185, 568, 97, 186, 187, 98, 569, 570,
	188, 189, 571, 190, 572, 303, 573, 99, 100, 101,
	0, 102, 574, 103, 575, 304, 104, 105, 576, 577,
	578, 579, 580, 581, 106, 107, 108, 109, 191, 110,
	192, 193, 582, 583, 111, 584, 585, 586, 112, 113,
	587, 588, 0, 589, 194, 114, 195, 590, 591, 115,
	116, 196, 117, 592, 593, 594, 305, 595, 118, 197,
	596, 198, 597, 119, 120, 199, 200, 598, 599, 600,
	306, 121, 201, 202, 203, 601, 204, 602, 307, 122,
	308, 123, 603, 604, 205, 309, 124, 310, 605, 260,
	606, 607, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 608, 133, 609, 206, 134, 207, 135,
	136, 610, 611, 612, 613, 614, 137, 208, 312, 138,
	313, 209, 139, 140, 615, 210, 141, 211, 616, 142,
	143, 144, 212, 145, 146, 617, 147, 148, 149, 618,
	150, 314, 151, 152, 213, 153, 0, 154, 155, 619,
	156, 262, 620, 157, 158, 315, 159, 214, 160, 621,
	161, 162, 164, 215, 163, 216, 622, 623, 165, 166,
	624, 264, 217, 625, 626, 263, 218, 219, 627, 167,
	168, 169, 170, 628, 629, 171, 172, 630, 631, 173,
	174, 175, 220, 221, 632, 176, 633, 634, 635, 636,
	177, 178, 179, 180, 412, 400, 401, 402, 399, 388,
	0, 0, 0, 0, 0, 0, 91, 92, 959, 93,
	0, 0, 0, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 960,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 958, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 384, 0, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 961,
	0, 91, 92, 382, 93, 0, 389, 956, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	480, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 45, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 47, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	302, 458, 0, 176, 0, 0, 0, 43, 177, 178,
	179, 180, 384, 44, 412, 400, 401, 402, 399, 388,
	0, 0, 380, 381, 0, 0, 91, 92, 382, 93,
	0, 389, 0, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 45, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	47, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 302, 458, 0, 176, 0,
	0, 0, 43, 177, 178, 179, 180, 384, 44, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 0,
	0, 91, 92, 382, 93, 0, 389, 0, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 1004, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 1009, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 1005, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 1006, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 384, 0, 412, 400, 401, 402, 399, 388,
	0, 0, 380, 381, 0, 0, 91, 92, 382, 93,
	0, 389, 0, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 384, 0, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 0,
	0, 91, 92, 382, 93, 0, 389, 1344, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 384, 0, 412, 400, 401, 402, 399, 388,
	0, 0, 380, 381, 0, 0, 91, 92, 382, 93,
	0, 389, 1287, 0, 394, 0, 0, 0, 94, 95,
	181, 441, 442, 96, 443, 444, 0, 97, 186, 187,
	98, 409, 427, 445, 446, 0, 437, 0, 420, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 421, 423, 0, 422, 424, 106, 107, 108,
	109, 447, 110, 448, 449, 0, 0, 111, 0, 0,
	0, 440, 113, 0, 0, 0, 0, 393, 114, 428,
	407, 0, 115, 116, 450, 117, 0, 0, 0, 305,
	0, 118, 438, 0, 198, 0, 119, 120, 434, 436,
	0, 0, 0, 306, 121, 451, 452, 453, 0, 419,
	0, 307, 122, 308, 123, 0, 0, 439, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 383, 133, 408, 435,
	134, 454, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 312, 138, 313, 429, 139, 140, 0, 430, 141,
	211, 0, 142, 143, 144, 455, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 397, 153, 0,
	154, 155, 0, 156, 262, 425, 157, 158, 315, 159,
	456, 160, 0, 161, 162, 164, 215, 163, 431, 0,
	0, 165, 166, 0, 264, 457, 0, 0, 263, 432,
	433, 406, 167, 168, 169, 170, 0, 0, 171, 172,
	426, 0, 173, 174, 175, 220, 458, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 384, 0, 412,
	400, 401, 402, 399, 388, 0, 0, 380, 381, 0,
	0, 91, 92, 382, 93, 0, 389, 955, 0, 394,
	0, 0, 0, 94, 95, 181, 441, 442, 96, 443,
	444, 0, 97, 186, 187, 98, 409, 427, 445, 446,
	0, 437, 0, 420, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 304, 104, 105, 0, 421, 423, 0,
	422, 424, 106, 107, 108, 109, 447, 110, 448, 449,
	0, 0, 111, 0, 0, 0, 440, 113, 0, 0,
	0, 0, 393, 114, 428, 407, 0, 115, 116, 450,
	117, 0, 0, 0, 305, 0, 118, 438, 0, 198,
	0, 119, 120, 434, 436, 0, 0, 0, 306, 121,
	451, 452, 453, 0, 419, 0, 307, 122, 308, 123,
	0, 0, 439, 309, 124, 310, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 311, 130, 131,
	132, 383, 133, 408, 435, 134, 454, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 312, 138, 313, 429,
	139, 140, 0, 430, 141, 211, 0, 142, 143, 144,
	455, 145, 146, 0, 147, 148, 149, 0, 150, 314,
	151, 152, 397, 153, 0, 154, 155, 0, 156, 262,
	425, 157, 158, 315, 159, 456, 160, 0, 161, 162,
	164, 215, 163, 431, 0, 0, 165, 166, 0, 264,
	457, 0, 0, 263, 432, 433, 406, 167, 168, 169,
	170, 0, 0, 171, 172, 426, 0, 173, 174, 175,
	220, 458, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 381, 0, 0, 0, 0, 382, 718,
	951, 389, 412, 400, 401, 402, 399, 388, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 1293, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 384, 0, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 0, 0, 91,
	92, 382, 93, 0, 389, 0, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 0,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 480, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 0, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 0,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 0, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 0, 165, 166, 0, 264, 457, 0,
	0, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 220, 458,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	384, 0, 412, 400, 401, 402, 399, 388, 0, 0,
	380, 381, 0, 0, 91, 92, 382, 93, 0, 389,
	0, 0, 394, 0, 0, 0, 94, 95, 181, 441,
	442, 96, 443, 444, 0, 97, 186, 187, 98, 409,
	427, 445, 446, 0, 437, 0, 420, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 304, 104, 105, 0,
	421, 423, 0, 422, 424, 106, 107, 108, 109, 447,
	110, 448, 449, 0, 0, 111, 0, 0, 0, 440,
	113, 0, 0, 0, 0, 393, 114, 428, 407, 0,
	115, 116, 450, 117, 0, 0, 0, 305, 0, 118,
	438, 0, 198, 0, 119, 120, 434, 436, 0, 0,
	0, 306, 121, 451, 452, 453, 0, 419, 0, 307,
	122, 308, 123, 0, 0, 439, 309, 124, 310, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	311, 130, 131, 132, 383, 133, 408, 435, 134, 454,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 312,
	138, 313, 429, 139, 140, 0, 430, 141, 211, 0,
	142, 143, 144, 455, 145, 146, 0, 147, 148, 149,
	0, 150, 314, 151, 152, 397, 153, 0, 154, 155,
	0, 156, 262, 425, 157, 158, 315, 159, 456, 160,
	0, 161, 162, 164, 215, 163, 431, 0, 0, 165,
	166, 0, 264, 457, 0, 0, 263, 432, 433, 406,
	167, 168, 169, 170, 0, 0, 171, 172, 426, 0,
	173, 174, 175, 220, 458, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 384, 0, 412, 400, 401,
	402, 399, 388, 0, 0, 380, 381, 378, 0, 91,
	92, 382, 93, 0, 389, 0, 0, 394, 0, 0,
	0, 94, 95, 181, 441, 442, 96, 443, 444, 0,
	97, 186, 187, 98, 409, 427, 445, 446, 0, 437,
	0, 420, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 421, 423, 0, 422, 424,
	106, 107, 108, 109, 447, 110, 448, 449, 0, 0,
	111, 0, 0, 0, 440, 113, 0, 0, 0, 0,
	393, 114, 428, 407, 0, 115, 116, 450, 117, 0,
	0, 1009, 305, 0, 118, 438, 0, 198, 0, 119,
	120, 434, 436, 0, 0, 0, 306, 121, 451, 452,
	453, 0, 419, 0, 307, 122, 308, 123, 0, 0,
	439, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 383,
	133, 408, 435, 134, 454, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 429, 139, 140,
	0, 430, 141, 211, 0, 142, 143, 144, 455, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	397, 153, 0, 154, 155, 0, 156, 262, 425, 157,
	158, 315, 159, 456, 160, 0, 161, 162, 164, 215,
	163, 431, 0, 0, 165, 166, 0, 264, 457, 0,
	0, 263, 432, 433, 406, 167, 168, 169, 170, 0,
	0, 171, 172, 426, 0, 173, 174, 175, 220, 458,
	0, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	384, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 382, 0, 0, 389,
	412, 400, 401, 402, 399, 388, 0, 0, 0, 0,
	0, 0, 91, 92, 659, 93, 0, 0, 0, 0,
	394, 0, 0, 0, 94, 95, 181, 441, 442, 96,
	443, 444, 0, 97, 186, 187, 98, 409, 427, 445,
	446, 0, 437, 0, 420, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 304, 104, 105, 0, 421, 423,
	0, 422, 424, 106, 107, 108, 109, 447, 110, 448,
	449, 0, 0, 111, 0, 0, 0, 440, 113, 0,
	0, 0, 0, 393, 114, 428, 407, 0, 115, 116,
	450, 117, 0, 0, 0, 305, 0, 118, 438, 0,
	198, 0, 119, 120, 434, 436, 0, 0, 0, 306,
	121, 451, 452, 453, 0, 419, 0, 307, 122, 308,
	123, 0, 0, 439, 309, 124, 310, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 311, 130,
	131, 132, 383, 133, 408, 435, 134, 454, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 312, 138, 313,
	429, 139, 140, 0, 430, 141, 211, 0, 142, 143,
	144, 455, 145, 146, 0, 147, 148, 149, 0, 150,
	314, 151, 152, 397, 153, 0, 154, 155, 0, 156,
	262, 425, 157, 158, 315, 159, 456, 160, 0, 161,
	162, 164, 215, 163, 431, 0, 0, 165, 166, 0,
	264, 457, 0, 0, 263, 432, 433, 406, 167, 168,
	169, 170, 0, 0, 171, 172, 426, 0, 173, 174,
	175, 220, 458, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 384, 0, 412, 400, 401, 402, 399,
	388, 0, 0, 380, 381, 0, 0, 91, 92, 382,
	93, 0, 389, 0, 0, 394, 0, 0, 0, 94,
	95, 181, 441, 442, 96, 443, 444, 0, 97, 186,
	187, 98, 409, 427, 445, 446, 0, 437, 0, 420,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 1607, 0, 421, 423, 0, 422, 424, 106, 107,
	108, 109, 447, 110, 448, 449, 0, 0, 111, 0,
	0, 0, 440, 113, 0, 0, 0, 0, 393, 114,
	428, 407, 0, 115, 116, 450, 117, 0, 0, 0,
	305, 0, 118, 438, 0, 198, 0, 119, 120, 434,
	436, 0, 0, 0, 306, 121, 451, 452, 453, 0,
	419, 0, 307, 122, 308, 123, 0, 0, 439, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 383, 133, 408,
	435, 134, 454, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 312, 138, 313, 429, 139, 140, 0, 430,
	141, 211, 0, 142, 143, 144, 455, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 397, 153,
	0, 154, 155, 0, 156, 262, 425, 157, 158, 315,
	159, 456, 160, 0, 161, 162, 164, 215, 163, 431,
	0, 0, 165, 166, 0, 264, 457, 0, 0, 263,
	432, 433, 406, 167, 168, 1606, 170, 0, 0, 171,
	172, 426, 0, 173, 174, 175, 220, 458, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 384, 0,
	412, 400, 401, 402, 399, 388, 0, 0, 380, 381,
	0, 0, 91, 92, 382, 93, 0, 389, 0, 0,
	394, 0, 0, 0, 94, 95, 1605, 441, 442, 96,
	443, 444, 0, 97, 186, 187, 98, 409, 427, 445,
	446, 0, 437, 0, 420, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 304, 104, 1607, 0, 421, 423,
	0, 422, 424, 106, 107, 108, 109, 447, 110, 448,
	449, 0, 0, 111, 0, 0, 0, 440, 113, 0,
	0, 0, 0, 393, 114, 428, 407, 0, 115, 116,
	450, 117, 0, 0, 0, 305, 0, 118, 438, 0,
	198, 0, 119, 120, 434, 436, 0, 0, 0, 306,
	121, 451, 452, 453, 0, 419, 0, 307, 122, 308,
	123, 0, 0, 439, 309, 124, 310, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 311, 130,
	131, 132, 383, 133, 408, 435, 134, 454, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 312, 138, 313,
	429, 139, 140, 0, 430, 141, 211, 0, 142, 143,
	144, 455, 145, 146, 0, 147, 148, 149, 0, 150,
	314, 151, 152, 397, 153, 0, 154, 155, 0, 156,
	262, 425, 157, 158, 315, 159, 456, 160, 0, 161,
	162, 164, 215, 163, 431, 0, 0, 165, 166, 0,
	264, 457, 0, 0, 263, 432, 433, 406, 167, 168,
	1606, 170, 0, 0, 171, 172, 426, 0, 173, 174,
	175, 220, 458, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 384, 0, 412, 400, 401, 402, 399,
	388, 0, 0, 380, 381, 0, 0, 91, 92, 382,
	93, 0, 389, 0, 0, 394, 0, 0, 0, 94,
	95, 181, 441, 442, 96, 443, 444, 0, 97, 186,
	187, 98, 409, 427, 445, 446, 0, 437, 0, 420,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 304,
	104, 105, 0, 421, 423, 0, 422, 424, 106, 107,
	108, 109, 447, 110, 448, 449, 0, 0, 111, 0,
	0, 0, 440, 113, 0, 0, 0, 0, 393, 114,
	428, 407, 0, 115, 116, 450, 117, 0, 0, 0,
	305, 0, 118, 438, 0, 198, 0, 119, 120, 434,
	436, 0, 0, 0, 306, 121, 451, 452, 453, 0,
	419, 0, 307, 122, 308, 123, 0, 0, 439, 309,
	124, 310, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 311, 130, 131, 132, 383, 133, 408,
	435, 134, 454, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 312, 138, 313, 429, 139, 140, 0, 430,
	141, 211, 0, 142, 143, 144, 455, 145, 146, 0,
	147, 148, 149, 0, 150, 314, 151, 152, 397, 153,
	0, 154, 155, 0, 156, 262, 425, 157, 158, 315,
	159, 456, 160, 0, 161, 162, 164, 215, 163, 431,
	0, 0, 165, 166, 0, 264, 457, 0, 0, 263,
	432, 433, 406, 167, 168, 169, 170, 0, 0, 171,
	172, 426, 0, 173, 174, 175, 220, 458, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 384, 0,
	412, 400, 401, 402, 399, 388, 0, 0, 380, 381,
	0, 0, 91, 92, 382, 93, 0, 389, 0, 0,
	394, 0, 0, 0, 94, 95, 181, 441, 442, 96,
	443, 444, 0, 97, 186, 187, 98, 409, 427, 445,
	446, 0, 437, 0, 420, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 304, 104, 105, 0, 421, 423,
	0, 422, 424, 106, 107, 108, 109, 447, 110, 448,
	449, 0, 0, 111, 0, 0, 0, 440, 113, 0,
	0, 0, 0, 393, 114, 428, 407, 0, 115, 116,
	450, 117, 0, 0, 0, 305, 0, 118, 438, 0,
	198, 0, 119, 120, 434, 436, 0, 0, 0, 306,
	121, 451, 452, 453, 0, 419, 0, 307, 122, 308,
	123, 0, 0, 439, 309, 124, 310, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 311, 130,
	131, 132, 0, 133, 408, 435, 134, 454, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 312, 138, 313,
	429, 139, 140, 0, 430, 141, 211, 0, 142, 143,
	144, 455, 145, 146, 0, 147, 148, 149, 0, 150,
	314, 151, 152, 999, 153, 0, 154, 155, 0, 156,
	262, 425, 157, 158, 315, 159, 456, 160, 0, 161,
	162, 164, 215, 163, 431, 0, 0, 165, 166, 0,
	264, 457, 0, 0, 263, 432, 433, 406, 167, 168,
	169, 170, 0, 0, 171, 172, 426, 0, 173, 174,
	175, 220, 458, 0, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 995, 996, 91, 92, 0, 93, 997,
	0, 0, 998, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 427, 188, 189, 0, 437, 0, 420, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 304, 104, 105,
	0, 421, 423, 0, 422, 424, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 428, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 305, 0,
	118, 438, 0, 198, 0, 119, 120, 434, 436, 0,
	0, 0, 306, 121, 201, 202, 203, 0, 204, 0,
	307, 122, 308, 123, 0, 0, 439, 309, 124, 310,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 311, 130, 131, 132, 0, 133, 0, 435, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	312, 138, 313, 429, 139, 140, 0, 430, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 314, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 425, 157, 158, 315, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 431, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 432, 433,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 426,
	0, 173, 174, 175, 220, 221, 0, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 1402, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	303, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	304, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 305, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 306, 121, 201, 202, 203,
	0, 204, 0, 307, 122, 308, 123, 0, 0, 205,
	309, 124, 310, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 311, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 312, 138, 313, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 314, 151, 152, 213,
	153, 0, 154, 155, 45, 156, 262, 0, 157, 158,
	315, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 47, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 302, 221, 0,
	176, 0, 0, 0, 43, 177, 178, 179, 180, 0,
	44, 298, 534, 538, 0, 539, 529, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 42, 0,
	0, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 303, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 304, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 542, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 531, 0, 115,
	116, 196, 117, 0, 0, 0, 305, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	306, 121, 201, 202, 203, 0, 204, 0, 307, 122,
	308, 123, 0, 0, 205, 309, 124, 310, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 311,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 532, 0, 0, 0, 137, 208, 312, 138,
	313, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 314, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 315, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 530, 167,
	168, 169, 170, 0, 0, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 0, 0, 0, 0,
	177, 178, 179, 180, 298, 534, 538, 0, 539, 529,
	0, 0, 0, 0, 540, 535, 91, 92, 0, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 303, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 304, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 525, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	531, 0, 115, 116, 196, 117, 0, 0, 0, 305,
	0, 118, 197, 0, 198, 0, 119, 120, 199, 200,
	0, 0, 0, 306, 121, 201, 202, 203, 0, 204,
	0, 307, 122, 308, 123, 0, 0, 205, 309, 124,
	310, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 311, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 532, 0, 0, 0, 137,
	208, 312, 138, 313, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 314, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 315, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 530, 167, 168, 169, 170, 0, 0, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 0,
	0, 0, 0, 177, 178, 179, 180, 298, 534, 538,
	0, 539, 529, 0, 0, 0, 0, 540, 535, 91,
	92, 0, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 303, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 531, 0, 115, 116, 196, 117, 0,
	0, 0, 305, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 306, 121, 201, 202,
	203, 0, 204, 0, 307, 122, 308, 123, 0, 0,
	205, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 532, 0,
	0, 0, 137, 208, 312, 138, 313, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 315, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 530, 167, 168, 169, 170, 0,
	0, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	88, 176, 0, 0, 0, 0, 177, 178, 179, 180,
	0, 0, 91, 92, 0, 93, 0, 0, 0, 0,
	540, 535, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 273, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 45, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 47, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 302, 221, 0, 176, 0, 0, 0, 43, 177,
	178, 179, 180, 88, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 865, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 199, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 45, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 47,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 0, 171, 172, 0,
	0, 173, 174, 175, 302, 221, 0, 176, 0, 0,
	0, 43, 177, 178, 179, 180, 88, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 42, 0, 1101, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 0,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 0, 0, 0, 0, 177, 178, 179, 180, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 0, 93, 0, 0, 0, 0, 369,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 273, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 0, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 0, 0, 0, 0, 177, 178,
	179, 180, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 0, 93, 0, 0,
	0, 865, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 199, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 0, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 0, 0, 0,
	0, 177, 178, 179, 180, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 0,
	93, 0, 0, 0, 803, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 0, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	0, 0, 0, 0, 177, 178, 179, 180, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 0, 93, 0, 0, 0, 1311, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 199, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 0, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 0, 0, 0, 0, 177, 178, 179,
	180, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 0, 93, 0, 0, 0,
	469, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 511, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 199, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 510, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 514, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 199, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 298, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 514,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 303, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 304, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 305, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 306, 121, 201, 202,
	203, 0, 204, 0, 307, 122, 308, 123, 0, 0,
	205, 309, 124, 310, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 311, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 312, 138, 313, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 314, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 315, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 778, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 776, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 781, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 843, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 780, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 844, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 88, 176, 0, 0, 0, 0, 177,
	178, 179, 180, 0, 0, 91, 92, 0, 93, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 778, 190, 0, 0, 773, 99,
	100, 101, 0, 102, 776, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 781, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 772, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	780, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 779, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 88, 176, 0, 0,
	0, 0, 177, 178, 179, 180, 0, 0, 91, 92,
	0, 93, 0, 0, 0, 0, 0, 1101, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	199, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 261, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 273, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 264,
	217, 0, 0, 263, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 279, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 273, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 199,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 1043, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 1041, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 1032, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 145, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 651, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 260, 0, 0, 125, 0,
	126, 127, 128, 129, 261, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 262, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 264, 217, 0,
	0, 263, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 497, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 140, 0, 210, 141, 211, 0, 142, 143,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 153, 0, 154, 155, 0, 156,
	262, 0, 0, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 88, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 0, 176, 91, 92, 0, 93, 177,
	178, 179, 180, 0, 0, 0, 0, 94, 95, 181,
	182, 183, 96, 184, 185, 0, 97, 186, 187, 98,
	0, 0, 188, 189, 0, 190, 0, 0, 0, 99,
	100, 101, 0, 102, 0, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 108, 109,
	191, 110, 192, 193, 0, 0, 111, 0, 0, 0,
	112, 113, 0, 0, 0, 0, 194, 114, 195, 0,
	0, 115, 116, 196, 117, 0, 0, 0, 0, 0,
	118, 197, 0, 198, 0, 119, 120, 354, 200, 0,
	0, 0, 0, 121, 201, 202, 203, 0, 204, 0,
	0, 122, 0, 123, 0, 0, 205, 0, 124, 0,
	0, 260, 0, 0, 125, 0, 126, 127, 128, 129,
	261, 0, 130, 131, 132, 0, 133, 0, 206, 134,
	207, 135, 136, 0, 0, 0, 0, 0, 137, 208,
	0, 138, 0, 209, 139, 140, 0, 210, 141, 211,
	0, 142, 143, 144, 212, 145, 146, 0, 147, 148,
	149, 0, 150, 0, 151, 152, 213, 153, 0, 154,
	155, 0, 156, 262, 0, 157, 158, 0, 159, 214,
	160, 0, 161, 162, 164, 215, 163, 216, 0, 0,
	165, 166, 0, 264, 217, 0, 0, 263, 218, 219,
	0, 167, 168, 169, 170, 0, 88, 171, 172, 0,
	0, 173, 174, 175, 220, 221, 0, 176, 91, 92,
	0, 93, 177, 178, 179, 180, 0, 0, 0, 0,
	94, 95, 181, 182, 183, 96, 184, 185, 0, 97,
	186, 187, 98, 0, 0, 188, 189, 0, 190, 0,
	0, 0, 99, 100, 101, 0, 102, 0, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 191, 110, 192, 193, 0, 0, 111,
	0, 0, 0, 112, 113, 0, 0, 0, 0, 194,
	114, 195, 0, 0, 115, 116, 196, 117, 0, 0,
	0, 0, 0, 118, 197, 0, 198, 0, 119, 120,
	351, 200, 0, 0, 0, 0, 121, 201, 202, 203,
	0, 204, 0, 0, 122, 0, 123, 0, 0, 205,
	0, 124, 0, 0, 260, 0, 0, 125, 0, 126,
	127, 128, 129, 261, 0, 130, 131, 132, 0, 133,
	0, 206, 134, 207, 135, 136, 0, 0, 0, 0,
	0, 137, 208, 0, 138, 0, 209, 139, 140, 0,
	210, 141, 211, 0, 142, 143, 144, 212, 145, 146,
	0, 147, 148, 149, 0, 150, 0, 151, 152, 213,
	153, 0, 154, 155, 0, 156, 262, 0, 157, 158,
	0, 159, 214, 160, 0, 161, 162, 164, 215, 163,
	216, 0, 0, 165, 166, 0, 264, 217, 0, 0,
	263, 218, 219, 0, 167, 168, 169, 170, 0, 88,
	171, 172, 0, 0, 173, 174, 175, 220, 221, 0,
	176, 91, 92, 0, 93, 177, 178, 179, 180, 0,
	0, 0, 0, 94, 95, 181, 182, 183, 96, 184,
	185, 0, 97, 186, 187, 98, 0, 0, 188, 189,
	0, 190, 0, 0, 0, 99, 100, 101, 0, 102,
	0, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 191, 110, 192, 193,
	0, 0, 111, 0, 0, 0, 112, 113, 0, 0,
	0, 0, 194, 114, 195, 0, 0, 115, 116, 196,
	117, 0, 0, 0, 0, 0, 118, 197, 0, 198,
	0, 119, 120, 199, 200, 0, 0, 0, 0, 121,
	201, 202, 203, 0, 204, 0, 0, 122, 0, 123,
	0, 0, 205, 0, 124, 0, 0, 260, 0, 0,
	125, 0, 126, 127, 128, 129, 85, 0, 130, 131,
	132, 0, 133, 0, 206, 134, 207, 135, 136, 0,
	0, 0, 0, 0, 137, 208, 0, 138, 0, 209,
	139, 140, 0, 210, 141, 211, 0, 142, 143, 144,
	212, 145, 146, 0, 147, 148, 149, 0, 150, 0,
	151, 152, 213, 153, 0, 154, 155, 0, 156, 262,
	0, 157, 158, 0, 159, 214, 160, 0, 161, 162,
	164, 215, 163, 216, 0, 0, 165, 166, 0, 84,
	217, 0, 0, 80, 218, 219, 0, 167, 168, 169,
	170, 0, 88, 171, 172, 0, 0, 173, 174, 175,
	220, 221, 0, 176, 91, 92, 0, 93, 177, 178,
	179, 180, 0, 0, 0, 0, 94, 95, 181, 182,
	183, 96, 184, 185, 0, 97, 186, 187, 98, 0,
	0, 188, 189, 0, 190, 0, 0, 0, 99, 100,
	101, 0, 102, 0, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 108, 109, 191,
	110, 192, 193, 0, 0, 111, 0, 0, 0, 112,
	113, 0, 0, 0, 0, 194, 114, 195, 0, 0,
	115, 116, 196, 117, 0, 0, 0, 0, 0, 118,
	197, 0, 198, 0, 119, 120, 293, 200, 0, 0,
	0, 0, 121, 201, 202, 203, 0, 204, 0, 0,
	122, 0, 123, 0, 0, 205, 0, 124, 0, 0,
	260, 0, 0, 125, 0, 126, 127, 128, 129, 261,
	0, 130, 131, 132, 0, 133, 0, 206, 134, 207,
	135, 136, 0, 0, 0, 0, 0, 137, 208, 0,
	138, 0, 209, 139, 140, 0, 210, 141, 211, 0,
	142, 143, 144, 212, 145, 146, 0, 147, 148, 149,
	0, 150, 0, 151, 152, 213, 153, 0, 154, 155,
	0, 156, 262, 0, 157, 158, 0, 159, 214, 160,
	0, 161, 162, 164, 215, 163, 216, 0, 0, 165,
	166, 0, 264, 217, 0, 0, 263, 218, 219, 0,
	167, 168, 169, 170, 0, 88, 171, 172, 0, 0,
	173, 174, 175, 220, 221, 0, 176, 91, 92, 0,
	93, 177, 178, 179, 180, 0, 0, 0, 0, 94,
	95, 181, 182, 183, 96, 184, 185, 0, 97, 186,
	187, 98, 0, 0, 188, 189, 0, 190, 0, 0,
	0, 99, 100, 101, 0, 102, 0, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 191, 110, 192, 193, 0, 0, 111, 0,
	0, 0, 112, 113, 0, 0, 0, 0, 194, 114,
	195, 0, 0, 115, 116, 196, 117, 0, 0, 0,
	0, 0, 118, 197, 0, 198, 0, 119, 120, 290,
	200, 0, 0, 0, 0, 121, 201, 202, 203, 0,
	204, 0, 0, 122, 0, 123, 0, 0, 205, 0,
	124, 0, 0, 260, 0, 0, 125, 0, 126, 127,
	128, 129, 261, 0, 130, 131, 132, 0, 133, 0,
	206, 134, 207, 135, 136, 0, 0, 0, 0, 0,
	137, 208, 0, 138, 0, 209, 139, 140, 0, 210,
	141, 211, 0, 142, 143, 144, 212, 145, 146, 0,
	147, 148, 149, 0, 150, 0, 151, 152, 213, 153,
	0, 154, 155, 0, 156, 262, 0, 157, 158, 0,
	159, 214, 160, 0, 161, 162, 164, 215, 163, 216,
	0, 0, 165, 166, 0, 264, 217, 0, 0, 263,
	218, 219, 0, 167, 168, 169, 170, 0, 88, 171,
	172, 0, 0, 173, 174, 175, 220, 221, 0, 176,
	91, 92, 0, 93, 177, 178, 179, 180, 0, 0,
	0, 0, 94, 95, 181, 182, 183, 96, 184, 185,
	0, 97, 186, 187, 98, 0, 0, 188, 189, 0,
	190, 0, 0, 0, 99, 100, 101, 0, 102, 0,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 108, 109, 191, 110, 192, 193, 0,
	0, 111, 0, 0, 0, 112, 113, 0, 0, 0,
	0, 194, 114, 195, 0, 0, 115, 116, 196, 117,
	0, 0, 0, 0, 0, 118, 197, 0, 198, 0,
	119, 120, 288, 200, 0, 0, 0, 0, 121, 201,
	202, 203, 0, 204, 0, 0, 122, 0, 123, 0,
	0, 205, 0, 124, 0, 0, 260, 0, 0, 125,
	0, 126, 127, 128, 129, 261, 0, 130, 131, 132,
	0, 133, 0, 206, 134, 207, 135, 136, 0, 0,
	0, 0, 0, 137, 208, 0, 138, 0, 209, 139,
	140, 0, 210, 141, 211, 0, 142, 143, 144, 212,
	145, 146, 0, 147, 148, 149, 0, 150, 0, 151,
	152, 213, 153, 0, 154, 155, 0, 156, 262, 0,
	157, 158, 0, 159, 214, 160, 0, 161, 162, 164,
	215, 163, 216, 0, 0, 165, 166, 0, 264, 217,
	0, 0, 263, 218, 219, 0, 167, 168, 169, 170,
	0, 88, 171, 172, 0, 0, 173, 174, 175, 220,
	221, 0, 176, 91, 92, 0, 93, 177, 178, 179,
	180, 0, 0, 0, 0, 94, 95, 181, 182, 183,
	96, 184, 185, 0, 97, 186, 187, 98, 0, 0,
	188, 189, 0, 190, 0, 0, 0, 99, 100, 101,
	0, 102, 0, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 191, 110,
	192, 193, 0, 0, 111, 0, 0, 0, 112, 113,
	0, 0, 0, 0, 194, 114, 195, 0, 0, 115,
	116, 196, 117, 0, 0, 0, 0, 0, 118, 197,
	0, 198, 0, 119, 120, 282, 200, 0, 0, 0,
	0, 121, 201, 202, 203, 0, 204, 0, 0, 122,
	0, 123, 0, 0, 205, 0, 124, 0, 0, 260,
	0, 0, 125, 0, 126, 127, 128, 129, 261, 0,
	130, 131, 132, 0, 133, 0, 206, 134, 207, 135,
	136, 0, 0, 0, 0, 0, 137, 208, 0, 138,
	0, 209, 139, 140, 0, 210, 141, 211, 0, 142,
	143, 144, 212, 145, 146, 0, 147, 148, 149, 0,
	150, 0, 151, 152, 213, 153, 0, 154, 155, 0,
	156, 262, 0, 157, 158, 0, 159, 214, 160, 0,
	161, 162, 164, 215, 163, 216, 0, 0, 165, 166,
	0, 264, 217, 0, 0, 263, 218, 219, 0, 167,
	168, 169, 170, 0, 88, 171, 172, 0, 0, 173,
	174, 175, 220, 221, 0, 176, 91, 92, 0, 93,
	177, 178, 179, 180, 0, 0, 0, 0, 94, 95,
	181, 182, 183, 96, 184, 185, 0, 97, 186, 187,
	98, 0, 0, 188, 189, 0, 190, 0, 0, 0,
	99, 100, 101, 0, 102, 0, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 108,
	109, 191, 110, 192, 193, 0, 0, 111, 0, 0,
	0, 112, 113, 0, 0, 0, 0, 194, 114, 195,
	0, 0, 115, 116, 196, 117, 0, 0, 0, 0,
	0, 118, 197, 0, 198, 0, 119, 120, 199, 200,
	0, 0, 0, 0, 121, 201, 202, 203, 0, 204,
	0, 0, 122, 0, 123, 0, 0, 205, 0, 124,
	0, 0, 260, 0, 0, 125, 0, 126, 127, 128,
	129, 261, 0, 130, 131, 132, 0, 133, 0, 206,
	134, 207, 135, 136, 0, 0, 0, 0, 0, 137,
	208, 0, 138, 0, 209, 139, 140, 0, 210, 141,
	211, 0, 142, 143, 144, 212, 257, 146, 0, 147,
	148, 149, 0, 150, 0, 151, 152, 213, 153, 0,
	154, 155, 0, 156, 262, 0, 157, 158, 0, 159,
	214, 160, 0, 161, 162, 164, 215, 163, 216, 0,
	0, 165, 166, 0, 264, 217, 0, 0, 263, 218,
	219, 0, 167, 168, 169, 170, 0, 88, 171, 172,
	0, 0, 173, 174, 175, 220, 221, 0, 176, 91,
	92, 0, 93, 177, 178, 179, 180, 0, 0, 0,
	0, 94, 95, 181, 182, 183, 96, 184, 185, 0,
	97, 186, 187, 98, 0, 0, 188, 189, 0, 190,
	0, 0, 0, 99, 100, 101, 0, 102, 0, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 191, 110, 192, 193, 0, 0,
	111, 0, 0, 0, 112, 113, 0, 0, 0, 0,
	194, 114, 195, 0, 0, 115, 116, 196, 117, 0,
	0, 0, 0, 0, 118, 197, 0, 198, 0, 119,
	120, 199, 200, 0, 0, 0, 0, 121, 201, 202,
	203, 0, 204, 0, 0, 122, 0, 123, 0, 0,
	205, 0, 124, 0, 0, 78, 0, 0, 125, 0,
	126, 127, 128, 129, 85, 0, 130, 131, 132, 0,
	133, 0, 206, 134, 207, 135, 136, 0, 0, 0,
	0, 0, 137, 208, 0, 138, 0, 209, 139, 140,
	0, 210, 141, 211, 0, 142, 143, 144, 212, 145,
	146, 0, 147, 148, 149, 0, 150, 0, 151, 152,
	213, 153, 0, 154, 155, 0, 156, 79, 0, 157,
	158, 0, 159, 214, 160, 0, 161, 162, 164, 215,
	163, 216, 0, 0, 165, 166, 0, 84, 217, 0,
	0, 80, 218, 219, 0, 167, 168, 169, 170, 0,
	88, 171, 172, 0, 0, 173, 174, 175, 220, 221,
	0, 176, 91, 92, 0, 93, 177, 178, 179, 180,
	0, 0, 0, 0, 94, 95, 181, 182, 183, 96,
	184, 185, 0, 97, 186, 187, 98, 0, 0, 188,
	189, 0, 190, 0, 0, 0, 99, 100, 101, 0,
	102, 0, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 108, 109, 191, 110, 192,
	193, 0, 0, 111, 0, 0, 0, 112, 113, 0,
	0, 0, 0, 194, 114, 195, 0, 0, 115, 116,
	196, 117, 0, 0, 0, 0, 0, 118, 197, 0,
	198, 0, 119, 120, 199, 200, 0, 0, 0, 0,
	121, 201, 202, 203, 0, 204, 0, 0, 122, 0,
	123, 0, 0, 205, 0, 124, 0, 0, 260, 0,
	0, 125, 0, 126, 127, 128, 129, 261, 0, 130,
	131, 132, 0, 133, 0, 206, 134, 207, 135, 136,
	0, 0, 0, 0, 0, 137, 208, 0, 138, 0,
	209, 139, 0, 0, 210, 141, 211, 0, 142, 0,
	144, 212, 145, 146, 0, 147, 148, 149, 0, 150,
	0, 151, 152, 213, 0, 0, 154, 155, 0, 156,
	262, 0, 157, 158, 0, 159, 214, 160, 0, 161,
	162, 164, 215, 163, 216, 0, 0, 165, 166, 0,
	264, 217, 0, 0, 263, 218, 219, 0, 167, 168,
	169, 170, 0, 0, 171, 172, 0, 0, 173, 174,
	175, 220, 221, 675, 176, 693, 694, 695, 0, 177,
	178, 179, 180, 0, 0, 696, 0, 0, 0, 0,
	0, 677, 0, 702, 0, 675, 0, 693, 694, 695,
	0, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	676, 0, 0, 677, 0, 702, 690, 675, 0, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 676, 0, 0, 677, 0, 702, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 676, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 703, 0, 0, 0, 691,
	0, 1166, 0, 1182, 1183, 1184, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 703, 0, 0,
	697, 691, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 697, 691, 1179, 0, 0, 0, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 697, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 0, 0, 0, 0, 675, 0,
	693, 694, 695, 0, 0, 0, 692, 0, 0, 0,
	696, 0, 0, 0, 0, 700, 677, 0, 702, 0,
	699, 0, 687, 688, 689, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 676, 0, 1180, 0, 0,
	0, 690, 699, 1205, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 0,
	0, 0, 0, 0, 699, 1204, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 675,
	0, 693, 694, 695, 1564, 0, 0, 0, 0, 0,
	1181, 696, 0, 0, 0, 0, 0, 677, 703, 702,
	0, 0, 0, 675, 0, 693, 694, 695, 0, 701,
	0, 0, 0, 0, 0, 696, 676, 0, 698, 0,
	0, 677, 690, 702, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 697, 690, 0, 0, 0,
	1176, 1177, 1178, 0, 1175, 1172, 1173, 1174, 1167, 1168,
	1169, 1170, 1171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 692, 0, 703,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 0, 0, 703, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 697, 0, 0, 691,
	0, 0, 0, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	697, 0, 0, 0, 0, 1563, 0, 675, 692, 693,
	694, 695, 0, 0, 0, 0, 0, 700, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 676, 675, 0, 693, 694, 695,
	690, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	0, 0, 0, 677, 0, 702, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 676, 0, 0, 0, 1548, 0, 690, 0,
	699, 0, 687, 688, 689, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 0, 703, 0, 0,
	1527, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 697, 0, 0, 700, 0, 675, 0, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 0, 0, 692, 675, 0, 693, 694, 695,
	0, 0, 0, 700, 676, 0, 0, 696, 0, 0,
	690, 0, 0, 677, 699, 702, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 676, 0, 1522, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 703, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 701, 675,
	0, 693, 694, 695, 0, 0, 0, 698, 0, 0,
	0, 696, 0, 691, 0, 703, 0, 677, 0, 702,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 697, 698, 676, 0, 0, 0,
	0, 691, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	675, 0, 693, 694, 695, 0, 0, 0, 0, 0,
	0, 0, 696, 0, 692, 0, 0, 0, 677, 703,
	702, 0, 0, 700, 0, 0, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 0, 0, 676, 0, 698,
	0, 0, 0, 690, 699, 691, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 0, 0, 1460, 0, 697, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 0, 0, 0,
	0, 0, 1459, 0, 0, 0, 0, 0, 692, 0,
	703, 0, 0, 0, 0, 0, 0, 700, 0, 0,
	0, 701, 675, 0, 693, 694, 695, 0, 0, 0,
	698, 0, 0, 0, 696, 0, 691, 0, 0, 0,
	677, 0, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 697, 0, 676,
	0, 0, 0, 0, 0, 690, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 0, 0, 0, 1376, 0, 0, 692,
	0, 0, 0, 0, 0, 0, 0, 675, 700, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 676, 0, 0, 0, 0, 0,
	690, 0, 698, 0, 0, 0, 0, 699, 691, 687,
	688, 689, 0, 686, 683, 684, 685, 678, 679, 680,
	681, 682, 0, 0, 0, 0, 0, 1314, 0, 697,
	0, 0, 0, 0, 0, 0, 0, 0, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 677, 703, 702, 0,
	0, 692, 675, 0, 693, 694, 695, 0, 701, 0,
	700, 0, 0, 0, 696, 676, 0, 698, 0, 0,
	677, 690, 702, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 676,
	0, 0, 0, 0, 697, 690, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 0, 0, 692, 0, 703, 1289,
	0, 0, 0, 0, 0, 700, 0, 1624, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 703, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 697, 0, 0, 691, 0,
	0, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 697,
	0, 0, 0, 0, 947, 0, 0, 692, 0, 0,
	0, 1623, 0, 0, 0, 0, 700, 0, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 692, 0, 0, 0, 0, 677, 0, 702, 0,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 676, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 0, 1360, 0, 0, 0, 0, 0, 699,
	0, 687, 688, 689, 0, 686, 683, 684, 685, 678,
	679, 680, 681, 682, 1196, 675, 1195, 693, 694, 695,
	0, 0, 0, 0, 0, 0, 0, 696, 703, 0,
	0, 854, 0, 677, 0, 702, 0, 0, 0, 701,
	0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
	0, 0, 676, 0, 691, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 697, 0, 0, 0, 0,
	0, 0, 705, 855, 0, 0, 0, 0, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 0, 0,
	696, 0, 0, 704, 0, 0, 677, 692, 702, 0,
	0, 0, 0, 0, 0, 703, 700, 0, 0, 0,
	0, 0, 0, 0, 0, 676, 701, 0, 0, 0,
	0, 690, 0, 0, 0, 698, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 697, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 675, 692, 693, 694, 695, 0, 701,
	0, 0, 0, 700, 0, 696, 0, 0, 698, 0,
	0, 677, 0, 702, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 697, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 692, 675, 0,
	693, 694, 695, 0, 0, 0, 700, 0, 0, 0,
	696, 0, 0, 0, 0, 0, 677, 0, 702, 0,
	0, 0, 0, 703, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 676, 0, 0, 0, 0,
	0, 690, 0, 698, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	697, 252, 0, 0, 0, 0, 0, 0, 0, 675,
	0, 693, 694, 695, 0, 0, 0, 0, 0, 0,
	0, 696, 0, 0, 1197, 0, 0, 677, 703, 702,
	0, 0, 692, 675, 0, 693, 694, 695, 0, 701,
	0, 700, 0, 0, 0, 696, 676, 0, 698, 0,
	0, 677, 690, 702, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 697, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	699, 0, 687, 688, 689, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 0, 692, 0, 703,
	0, 0, 0, 0, 0, 0, 700, 0, 0, 0,
	701, 1202, 0, 0, 0, 0, 0, 0, 0, 698,
	0, 1308, 0, 703, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 697, 0, 0, 691,
	0, 0, 0, 0, 0, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	697, 0, 0, 0, 0, 0, 0, 675, 692, 693,
	694, 695, 0, 0, 0, 0, 0, 700, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 0, 0, 676, 675, 0, 693, 694, 695,
	690, 0, 0, 0, 0, 0, 0, 696, 0, 0,
	1159, 0, 0, 677, 0, 702, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 676, 0, 0, 0, 0, 0, 690, 0,
	699, 0, 687, 688, 689, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 0, 0, 703, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 703, 0, 0, 0, 0,
	0, 0, 0, 0, 697, 0, 701, 0, 0, 0,
	0, 0, 0, 0, 1164, 698, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 697, 0, 0, 700, 0, 675, 0, 693,
	694, 695, 0, 0, 0, 0, 0, 0, 0, 696,
	0, 0, 0, 0, 0, 677, 0, 702, 0, 0,
	0, 0, 0, 0, 692, 675, 0, 693, 694, 695,
	0, 0, 0, 700, 676, 0, 0, 696, 0, 0,
	690, 0, 0, 677, 699, 702, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 0,
	0, 0, 676, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 703, 675, 0,
	693, 694, 695, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 0, 0, 0, 0, 677, 698, 702, 0,
	0, 0, 0, 691, 0, 703, 0, 0, 0, 675,
	0, 693, 694, 695, 0, 676, 701, 0, 0, 0,
	0, 690, 0, 0, 697, 698, 0, 677, 0, 702,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 676, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 692, 0, 0, 0,
	0, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 0, 0, 692, 0, 0, 0, 0, 701,
	0, 0, 0, 700, 0, 0, 0, 0, 698, 0,
	19, 0, 0, 0, 691, 0, 0, 0, 0, 703,
	32, 0, 0, 0, 699, 0, 687, 688, 689, 0,
	686, 683, 684, 685, 678, 679, 680, 681, 682, 698,
	0, 0, 34, 0, 0, 691, 0, 0, 38, 0,
	0, 0, 699, 0, 687, 688, 689, 0, 686, 683,
	684, 685, 678, 679, 680, 681, 682, 692, 1166, 0,
	1182, 1183, 1184, 24, 0, 35, 700, 0, 0, 25,
	1428, 1166, 0, 1182, 1183, 1184, 0, 0, 0, 0,
	0, 26, 0, 1284, 0, 0, 0, 1166, 692, 1182,
	1183, 1184, 0, 0, 0, 0, 0, 700, 0, 1283,
	0, 1179, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1179, 699, 0, 687, 688, 689,
	0, 686, 683, 684, 685, 678, 679, 680, 681, 682,
	1179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 687, 688,
	689, 0, 686, 683, 684, 685, 678, 679, 680, 681,
	682, 0, 0, 675, 27, 0, 36, 0, 0, 1185,
	0, 0, 0, 45, 0, 0, 0, 30, 31, 0,
	0, 677, 1185, 702, 1180, 33, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 1180, 1185, 0,
	676, 0, 0, 37, 0, 0, 690, 0, 0, 0,
	0, 0, 0, 1180, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 0,
	1181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 703, 0, 0, 1181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 0, 0, 0, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 1176, 1177, 1178,
	0, 1175, 1172, 1173, 1174, 1167, 1168, 1169, 1170, 1171,
	1176, 1177, 1178, 0, 1175, 1172, 1173, 1174, 1167, 1168,
	1169, 1170, 1171, 0, 0, 0, 1176, 1177, 1178, 0,
	1175, 1172, 1173, 1174, 1167, 1168, 1169, 1170, 1171, 0,
	0, 0, 692, 0, 0, 0, 0, 0, 0, 0,
	0, 700, 883, 898, 874, 891, 890, 0, 0, 876,
	875, 0, 0, 0, 900, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 896, 0, 888, 887, 0, 0, 0, 0,
	699, 0, 886, 0, 0, 0, 686, 683, 684, 685,
	678, 679, 680, 681, 682, 885, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 879, 880, 881, 0,
	551, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 877, 0, 0, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901,
}
var sqlPact = [...]int{

	18451, -1000, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 687,
	-1000, -1000, -1000, 475, 681, 40, 1264, 1264, -1000, -1000,
	15683, 1884, 320, 332, 320, 320, 320, 368, 505, 91,
	-1000, 477, 12, 15460, 12561, 1068, 9, 12115, 218, 18451,
	12338, 12561, 15237, 952, 855, 12115, 15014, 14791, 14568, -1000,
	8092, -1000, -1000, -1000, -1000, 702, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 697, -1000, 14345, 14345,
	654, -1000, -1000, 416, 260, 1103, -1000, 19, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 951, -1000, 694, 944, 943, 259,
	678, -1000, 654, -1000, 654, -1000, -1000, -1000, 12115, -1000,
	14122, 869, 13899, -1000, 477, -1000, -1000, -1000, 724, 1066,
	1066, 1066, 1104, 84, 83, 91, -6, 12561, -1000, 220,
	-1000, -1000, -1000, -1000, -1000, -6, 6118, 6118, -1000, -1000,
	218, -1000, 237, 10514, -145, -1000, 5873, -1000, 837, 987,
	547, 540, 986, 12115, 12561, 431, 13676, -1000, 984, 78,
	982, -1000, -12, 981, -1000, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, 218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10757, 958, 10757, -1000,
	-1000, -1000, 2, 0, 788, 898, 8580, 8337, 1046, 1111,
	-1000, -1000, -1000, 18, 3407, 12561, 956, 10757, 12561, -1000,
	12561, -1000, 776, -1000, -1000, -4, -5, -1000, 90, -1000,
	213, 735, 13453, -1000, 733, -1000, 724, -1000, 682, 769,
	6626, 7361, 91, -1000, -1000, 91, 91, 7361, -1000, -1000,
	12561, -6, 1133, 12561, 939, -61, -1000, 17608, -1000, -1000,
	7361, 7361, 7361, 7361, 7361, 647, -1000, -1000, -1000, 4140,
	-1000, -1000, -145, 209, 92, -1000, -1000, 204, -145, -1000,
	-1000, -1000, -1000, 197, 1246, 343, -1000, -1000, -1000, 7361,
	267, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	955, 195, 194, -1000, -1000, -1000, -1000, 193, 192, 190,
	189, 188, 187, 186, 183, 181, 180, 178, 177, 171,
	621, -1000, 285, -1000, -1000, 285, 285, -1000, 158, 158,
	159, -1000, -1000, -1000, 158, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 170, 94, -1000, -1000, -1000, 12561,
	-145, -1000, -1000, -1000, 3407, 7361, 3163, -29, -1000, 18237,
	-1000, -22, 593, -1000, 11659, 1077, 1058, 1065, 12115, 398,
	383, 12561, 276, 63, 1131, 10028, -1000, 12561, 12561, -1000,
	12561, -1000, -1000, 12561, 12561, 12561, 12, 11203, 382, -13,
	10980, 12561, -1000, 17, -1000, -1000, 933, 603, 848, 637,
	-1000, -1000, -1000, -1000, -7, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1230, -1000, -1000, -1000, -1000,
	1234, -7, -1000, -1000, -1000, -1000, -1000, 1243, -1000, -1000,
	-1000, -1000, 3407, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12561,
	-1000, -1000, -1000, -1000, 603, 848, -1000, 12115, 11426, 977,
	692, 725, -1000, 974, -1000, -1000, -1000, -1000, 18237, -1000,
	18237, 481, 861, -1000, 861, -8, -1000, 17535, -1000, 169,
	-30, -1000, 276, 9785, 6118, 18791, 12561, 345, 7361, 7361,
	7361, 7361, 7361, 7361, 7361, 7361, 7361, 7361, 7361, 7361,
	7361, 7361, 7361, 7361, 7361, 7361, 7361, 7361, 7361, 686,
	381, 1326, 618, 151, 3407, -1000, 1185, 1185, 1185, 18338,
	18338, 165, -136, 17177, -9, -145, -1000, -1000, 5365, 5120,
	-145, 3650, -1000, 884, 1233, 281, 18237, 962, 907, 168,
	80, 79, 7361, 763, 7361, 7606, 7361, 7361, 4385, 7361,
	7361, 7361, 7361, 7361, 7361, -1000, 167, -1000, -1000, -1000,
	-1000, 1232, -1000, -1000, 1229, -1000, 1225, 276, 77, -1000,
	-1000, 2035, -1000, -1000, 5873, -1000, 512, 12561, 12561, 12561,
	-1000, -1000, 722, 13230, -1000, 18791, 12561, -1000, 161, 160,
	831, 821, 12561, 12561, 13007, 12784, 12561, 805, 12561, 12561,
	522, 472, 7361, 691, -1000, 9299, 289, 12561, 58, -1000,
	-1000, -1000, 249, 12561, -1000, -1000, -1000, 78, -1000, -12,
	-1000, -1000, 12561, 10980, -13, -14, -1000, -1000, 12561, -1000,
	-1000, -1000, 497, -1000, 560, -1000, 8823, -1000, -1000, -1000,
	884, -1000, -24, -1000, -1000, -1000, -1000, 73, -19, -1000,
	-1000, -1000, -1000, 12561, 219, 12561, 12561, 973, 12561, -1000,
	-1000, -1000, 7361, -1000, -1000, -1000, 12, 12561, -1000, 880,
	-21, 1716, 11892, 11892, -1000, 9056, -1000, -1000, 1140, -1000,
	-1000, -1000, -1000, 52, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 159, 621, 158, 158, 158,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 285, 285,
	285, -1000, -1000, 257, 494, 494, 1226, 1226, 1226, 452,
	452, 841, 835, 18623, 18623, 18623, 525, 787, 787, 18623,
	18623, 18623, 18338, 18265, 148, 7361, 377, 598, 151, 7361,
	-1000, 1218, -1000, -1000, -1000, 931, 150, 7606, 7606, -1000,
	-1000, -1000, 4140, -1000, -1000, 147, 7361, -1000, 7361, -34,
	-35, -1000, 18237, -1000, -41, -1000, -1000, -17, 7361, 7361,
	7361, 72, -1000, 376, -1000, 374, 367, 361, -1000, 145,
	69, 438, -1000, 7361, 652, 133, 132, 7361, -1000, -1000,
	18085, 67, 928, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	66, 18047, 65, 362, -1000, 7606, 7606, 7606, 4140, 130,
	64, 17448, -82, 17869, 6363, 6363, 6363, 60, 17893, 7361,
	-82, 16155, 16133, 2392, -42, -43, -47, 1220, -49, 57,
	56, 880, -1000, -1000, 7361, -1000, -1000, -1000, 352, 351,
	972, -1000, 720, -1000, 531, 7361, 12561, 128, 126, 636,
	-1000, 970, 638, 969, 638, -1000, -22, 585, -1000, -1000,
	350, -1000, 6118, 18237, 472, 1067, -51, -1000, -1000, 276,
	10028, 5873, -53, -1000, -24, -1000, -24, -1000, -1000, -1000,
	-1000, -1000, 12561, -1000, 11426, 125, 12561, 122, 121, 12561,
	-1000, -1000, 55, -1000, -1000, -1000, -1000, -1000, 877, 1101,
	9785, 846, 842, 9785, 1038, 657, 657, 657, -1000, -1000,
	-1000, 12561, 120, -1000, 9542, 53, 1716, 230, 227, -1000,
	1212, 7361, 148, 7361, 7606, 7606, -1000, 148, -1000, -1000,
	-1000, -1000, 921, 113, 7361, 18791, 18547, 18531, -67, 4875,
	-25, 17102, 7361, -1000, -1000, 92, -1000, 50, 5628, -1000,
	17713, 4, 4, -1000, 759, 705, 586, 442, 1204, 1240,
	993, -1000, 7361, 17788, -1000, 10271, 277, 662, 16990, 18791,
	-1000, 7361, -1000, 915, 7361, -1000, 18791, 7606, 7606, 7606,
	7606, 7606, 7606, 7606, 7606, 7606, 7606, 7606, 7606, 7606,
	7606, 7606, 7606, 7606, 7606, 814, 7606, 1180, 1180, 1180,
	-26, 4630, -1000, 936, 915, 7361, 7361, 18791, 49, 48,
	47, -1000, 7361, -82, 7361, 7361, 7361, -1000, -1000, -1000,
	45, -1000, 1194, -1000, -1000, 877, 17258, 12561, 12561, 12561,
	968, 1621, -1000, 16909, -73, 12561, 12561, -1000, 801, 934,
	314, 12561, -1000, 12561, -1000, 12561, 12561, 12561, 12561, -61,
	-1000, 152, 12, 472, -1000, -1000, 246, -1000, -1000, 7849,
	112, 11426, 7849, 689, -1000, 270, 7361, 7361, 1716, 9785,
	9785, 1029, 838, 9785, -1000, -1000, -1000, -1000, 111, 12561,
	11892, 365, 1193, 43, 1138, 148, 18518, 2312, 7361, 18791,
	18369, -74, -1000, 7361, 7361, -1000, -81, -1000, 7361, -1000,
	18237, -1000, 1238, 7361, 42, 37, 36, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35, -1000, -1000, 18237, 7361, -1000,
	-1000, 15906, 7361, 33, -1000, 32, 18237, 936, 18237, -1000,
	509, 509, 1180, 1180, 1180, 736, 736, 1004, 1690, 653,
	653, 653, 1617, 413, 413, 653, 653, 653, 913, 836,
	105, 2471, 7361, -83, -1000, -1000, -1000, 18237, 18237, 28,
	-1000, -1000, -1000, -82, 2209, 16825, 16797, -1000, 27, 270,
	-1000, -1000, -1000, -1000, 12561, -1000, 12561, -1000, 12561, 716,
	-1000, -1000, 796, 104, 7606, 12561, -1000, 601, -87, -88,
	712, -1000, 710, 7361, -1000, 18791, 638, 638, -1000, 340,
	338, -1000, 998, 7849, 1053, -1000, -1000, 103, -89, -1000,
	74, 1087, 7361, -1000, -1000, 100, 7849, 26, -93, 12561,
	-1000, 12561, 18237, -82, -1000, 1029, -1000, 99, 7361, 9785,
	-1000, 12561, -95, -1000, -1000, 223, 149, -1000, 7361, 7361,
	18369, -97, -1000, 18791, 148, 148, -1000, 16645, -1000, 17713,
	-1000, -1000, -1000, -1000, 18237, 640, -1000, 16607, -1000, -1000,
	-1000, 7606, 889, 97, 18791, 16453, -1000, -1000, 7361, -1000,
	-1000, -1000, -1000, -1000, 1685, -1000, -1000, -1000, 7361, 2471,
	59, -1000, 93, -1000, -1000, -1000, 550, -1000, -1000, 18237,
	1088, -1000, -1000, 12561, 12561, 408, -99, 12561, -1000, -1000,
	3895, 601, 7849, 1071, -145, 12561, 1071, 16429, 3650, -101,
	-1000, 601, 89, -62, -1000, 1129, -1000, 12561, 18237, -1000,
	-106, -1000, -1000, -1000, 148, 148, -1000, -1000, -1000, 25,
	662, 1099, -1000, 16261, 7606, 18791, -117, -1000, 16348, -1000,
	16177, 766, 12561, 12561, 12561, 295, 12561, -1000, -1000, 385,
	-1000, 276, -1000, -1000, -1000, -1000, -1000, -1000, 1087, -17,
	601, -1000, 7849, 12561, 75, -121, -1000, -1000, 476, 7361,
	16261, -122, -1000, -1000, -1000, 668, 622, -127, -131, 59,
	-1000, 7361, -1000, 10028, -1000, 1071, 24, -1000, -133, -1000,
	-1000, -1000, 22, 7116, 7116, -82, -1000, -1000, 684, 674,
	471, -1000, -1000, -1000, -1000, -1000, 766, 18237, -107, -1000,
	-1000, 601, -1000, -1000, -1000, 2730, 693, 464, 17282, -1000,
	-1000, 1026, -1000, 301, 696, 696, 668, -1000, -1000, 1145,
	-1000, -1000, -1000, -1000, -1000, -1000, 1154, -1000, -1000, 873,
	-1000, -1000, 6871, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1505, 1501, 1123, 1497, 1494, 1492, 1490, 1488, 89,
	1487, 1486, 93, 1485, 77, 1484, 1476, 1475, 33, 1471,
	1470, 1468, 1464, 75, 38, 1757, 111, 102, 1461, 1458,
	1457, 10, 74, 73, 1455, 40, 84, 86, 1124, 41,
	42, 24, 69, 72, 1454, 1453, 1452, 1451, 34, 1450,
	1448, 1447, 11, 36, 76, 1442, 37, 45, 1440, 1433,
	81, 1413, 71, 90, 28, 104, 29, 1407, 51, 1404,
	13, 50, 1401, 21, 1400, 19, 54, 107, 1394, 26,
	512, 46, 22, 32, 1389, 1387, 1385, 1379, 60, 68,
	52, 1377, 1376, 57, 1375, 97, 108, 1371, 1361, 1360,
	1357, 1356, 1354, 1131, 1353, 1352, 536, 8, 30, 47,
	3, 92, 91, 31, 0, 564, 542, 1351, 44, 20,
	56, 35, 43, 18, 1350, 83, 1349, 1348, 1347, 1345,
	1344, 55, 1342, 48, 110, 25, 66, 65, 15, 98,
	61, 96, 116, 82, 1340, 100, 1339, 49, 1337, 1336,
	723, 63, 1335, 1334, 1331, 720, 656, 644, 157, 1328,
	1327, 636, 626, 1326, 1325, 62, 1323, 1322, 114, 1319,
	109, 85, 1318, 99, 1316, 67, 1314, 154, 252, 94,
	1311, 106, 53, 1307, 1306, 1304, 17, 2, 9, 4,
	6, 5, 27, 16, 1303, 1301, 95, 79, 1300, 501,
	1299, 1293, 23, 1291, 1288, 14, 1275, 12, 1274, 7,
	1, 1268, 113, 1267, 70, 1258, 1146, 1255, 112, 1253,
	1226, 1188, 58,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 65, 65,
	64, 64, 67, 67, 11, 11, 12, 12, 12, 12,
	146, 146, 145, 13, 17, 212, 212, 212, 216, 216,
	217, 217, 218, 218, 218, 218, 218, 218, 218, 214,
	214, 19, 19, 19, 103, 103, 105, 105, 105, 105,
	37, 102, 102, 102, 102, 104, 104, 104, 104, 170,
	168, 168, 175, 175, 175, 45, 45, 45, 45, 45,
	46, 46, 46, 167, 167, 167, 167, 176, 176, 176,
	176, 176, 176, 47, 47, 47, 174, 174, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 169,
	169, 213, 213, 215, 215, 8, 8, 48, 48, 49,
	49, 109, 109, 109, 108, 184, 184, 185, 185, 185,
	186, 186, 186, 186, 186, 186, 186, 183, 183, 181,
	181, 182, 182, 182, 182, 219, 219, 107, 107, 52,
	52, 189, 189, 189, 189, 187, 187, 187, 187, 187,
	190, 188, 191, 191, 191, 191, 191, 134, 134, 134,
	22, 7, 7, 92, 92, 56, 56, 138, 138, 138,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 93, 93, 94, 94, 21, 21,
	21, 21, 21, 221, 221, 106, 106, 106, 106, 106,
	36, 6, 6, 14, 44, 44, 99, 99, 99, 101,
	101, 101, 100, 100, 100, 79, 79, 23, 70, 70,
	71, 71, 144, 72, 72, 18, 18, 25, 25, 24,
	24, 24, 24, 24, 24, 26, 26, 27, 27, 27,
	27, 27, 27, 27, 197, 197, 197, 199, 199, 196,
	15, 15, 15, 15, 198, 198, 220, 220, 80, 80,
	80, 51, 50, 50, 54, 54, 53, 55, 55, 137,
	77, 77, 77, 77, 95, 96, 96, 97, 97, 98,
	98, 76, 76, 121, 121, 28, 28, 60, 60, 61,
	61, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 135, 135, 135, 135, 136, 136, 83, 83, 83,
	83, 81, 81, 82, 82, 141, 141, 141, 141, 78,
	78, 142, 142, 142, 110, 110, 147, 147, 147, 59,
	59, 59, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 149, 149, 149, 149, 151, 151, 151,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 152, 152, 159, 159, 160, 160, 161,
	162, 153, 153, 154, 154, 155, 156, 163, 163, 163,
	165, 165, 157, 157, 158, 89, 89, 89, 89, 89,
	89, 89, 89, 89, 89, 89, 89, 89, 89, 90,
	90, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	116, 116, 192, 192, 192, 192, 192, 192, 192, 194,
	194, 195, 195, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 200, 200,
	201, 201, 202, 202, 203, 203, 205, 206, 206, 206,
	207, 211, 211, 204, 204, 208, 208, 208, 209, 209,
	210, 210, 210, 210, 210, 125, 125, 125, 126, 126,
	127, 66, 66, 123, 123, 122, 122, 122, 124, 124,
	84, 164, 164, 164, 164, 164, 164, 164, 85, 85,
	91, 86, 86, 87, 87, 87, 87, 87, 87, 118,
	119, 88, 88, 88, 120, 120, 128, 132, 132, 131,
	130, 130, 129, 129, 113, 113, 113, 113, 113, 112,
	111, 73, 73, 222, 222, 133, 133, 74, 74, 75,
	69, 69, 68, 68, 143, 143, 143, 143, 62, 62,
	63, 63, 42, 42, 43, 43, 43, 43, 57, 57,
	58, 58, 40, 40, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 166, 166, 166, 38, 38,
	38, 39, 39, 172, 172, 172, 173, 173, 173, 173,
	171, 171, 171, 171, 171, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 177,
	177, 177, 177, 177, 177, 177, 177, 177, 177, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	179, 178, 178, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
	180, 180,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 6, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 3,
	2, 2, 2, 1, 0, 1, 1, 3, 3, 0,
	3, 3, 6, 7, 1, 3, 1, 4, 2, 8,
	5, 0, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 2, 0, 1,
	3, 2, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 4, 5, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 2, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 0, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 2, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -198, 82, 88, 100, 183, -24, -25,
	196, 197, 29, 204, 51, 84, 185, 222, 57, -197,
	-27, -26, 266, 242, 248, 192, -28, 210, 235, 269,
	210, 69, 111, 77, 114, 229, 69, 111, 210, -12,
	266, -18, -14, -23, -9, -216, 18, -217, -218, 57,
	82, 100, 192, 114, 77, 229, -216, -103, 132, 194,
	218, -104, -102, -170, 214, 141, -64, -38, 4, -177,
	-179, 16, 17, 19, 28, 29, 33, 37, 40, 50,
	51, 52, 54, 56, 59, 60, 67, 68, 69, 70,
	72, 77, 81, 82, 88, 92, 93, 95, 101, 106,
	107, 114, 122, 124, 129, 135, 137, 138, 139, 140,
	143, 144, 145, 147, 150, 152, 153, 159, 162, 165,
	166, 169, 172, 173, 174, 176, 177, 179, 180, 181,
	183, 185, 186, 188, 190, 191, 193, 196, 197, 199,
	201, 203, 204, 207, 205, 211, 212, 222, 223, 224,
	225, 228, 229, 232, 233, 234, 238, 243, 244, 245,
	246, 30, 31, 32, 34, 35, 38, 39, 43, 44,
	46, 71, 73, 74, 87, 89, 94, 102, 104, 108,
	109, 115, 116, 117, 119, 127, 149, 151, 160, 164,
	168, 170, 175, 187, 200, 206, 208, 215, 219, 220,
	235, 236, 4, 69, 50, 70, 101, 111, 211, 214,
	218, 18, -221, 218, 218, -221, -221, -221, -220, 210,
	210, -92, 69, 227, -26, -27, -25, -53, -54, 226,
	118, 86, 158, -24, -25, -197, -199, 176, -196, -38,
	132, 141, 194, 218, 214, -199, -50, -51, 18, 79,
	270, -141, -42, 156, -38, -75, 266, -3, -141, 108,
	-38, -42, 108, 98, 120, -142, -141, -38, 108, -62,
	108, -42, -65, 108, -64, -146, -145, -173, 4, -177,
	-179, -178, 235, 48, 58, 99, 113, 121, 123, 128,
	130, 142, 161, 163, 184, 198, 155, 270, 155, -103,
	-103, -105, -36, -37, 122, 172, 216, 251, 98, 246,
	-47, 6, 75, -67, 268, 98, -213, 155, 98, -169,
	98, 246, 122, 172, -106, -36, -37, -106, -78, -141,
	-64, 108, 111, -38, 108, -53, -54, -77, -95, -96,
	131, 154, -80, 18, 79, -80, -80, 37, 267, 267,
	270, -199, -58, 266, -69, -68, -143, -114, 259, -116,
	257, 258, 263, 146, 247, -125, -42, -117, 9, 266,
	-128, -194, -25, 87, 24, -126, -127, 187, -38, 8,
	5, 6, 7, -40, -149, -158, 221, 90, 148, 41,
	-192, -193, 4, -177, -172, -150, -160, -154, -157, 119,
	48, 62, 65, 63, 66, 195, 230, 42, 89, 164,
	168, 208, 219, 220, 108, 149, 109, 46, 102, 127,
	81, 31, 32, 34, 35, 43, 44, 71, 73, 74,
	94, 115, 116, 117, 151, 175, 200, 215, 236, -178,
	-161, -162, -155, -156, -163, -68, -75, 259, -42, 266,
	-73, -113, -112, -111, 271, 264, 268, -74, -133, -114,
	75, -33, 179, -32, 17, 19, 82, 233, 87, 179,
	179, 87, -142, -44, -42, 196, -38, 25, 87, -35,
	270, 40, 181, 87, 270, 87, 267, 270, -212, -63,
	210, 69, -43, -38, 259, -218, -212, 270, 270, 129,
	-46, 135, 145, 106, -168, 75, -175, -167, -134, 9,
	221, 90, 155, -174, 5, 258, -166, -173, 6, 8,
	257, -168, 75, 60, -176, 6, 4, -158, -134, 75,
	132, 119, 268, -171, 4, -177, -179, -178, -180, 18,
	20, 21, 22, 23, 24, 25, 26, 27, 36, 41,
	42, 45, 47, 49, 55, 57, 61, 62, 63, 64,
	65, 66, 75, 76, 78, 79, 80, 83, 84, 86,
	90, 91, 96, 97, 98, 100, 103, 105, 110, 111,
	112, 118, 120, 125, 126, 131, 133, 134, 146, 148,
	154, 155, 156, 157, 158, 167, 171, 178, 182, 192,
	195, 202, 209, 210, 213, 216, 217, 221, 226, 227,
	230, 231, 237, 239, 240, 241, 242, -170, -215, 96,
	-212, -170, -170, 129, 270, 270, -35, 270, 266, 146,
	-39, 108, -38, 146, -77, -96, -95, -97, -114, 18,
	-114, -116, -26, -26, -26, -55, -137, -114, -196, 25,
	-57, -38, -60, 98, 270, 10, 47, 28, 257, 258,
	259, 260, 261, 254, 255, 256, 253, 249, 250, 251,
	53, 136, 189, 12, 13, 14, 22, 157, 130, 247,
	198, 121, 30, 110, 25, 4, -114, -114, -114, -114,
	-114, 163, -25, -114, -66, -73, -25, -122, 264, 266,
	-73, 266, 6, 6, 266, -129, -114, -200, 243, 96,
	266, 266, 266, 266, 266, 266, 266, 266, 266, 266,
	266, 266, 266, 266, 266, 170, -165, 238, -165, -165,
	-151, 266, -151, -152, 266, -151, 266, -60, -42, -113,
	-171, -114, -171, 259, 270, 267, 270, 216, -93, 55,
	49, -108, 108, 49, -181, -38, 55, -182, 45, 227,
	171, 97, -93, 55, -93, 55, 55, -141, 216, 216,
	-42, -110, 240, -99, -18, 266, 75, 25, -70, -71,
	-144, -72, -42, 266, -38, -38, -42, -62, -64, -65,
	-12, -145, 216, 270, -63, -57, -112, -111, 98, -37,
	-36, -45, 174, 201, 180, 193, 270, 5, 8, 8,
	6, -171, -214, -38, -37, -36, -141, -48, -49, -109,
	-108, -183, -181, 111, 227, 87, 155, 146, 87, -98,
	187, 188, 270, -31, 26, 78, 266, 270, 267, -110,
	-61, -139, -141, -25, -140, 266, -143, -147, -148, -150,
	-159, -153, -157, -158, 33, 39, 38, 212, 206, 115,
	116, 117, 200, 31, 175, 94, 81, 74, 73, 151,
	35, 34, -161, -162, -155, -156, 71, 215, 32, 44,
	43, 236, -64, 214, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, -114, -114, -114, -114, -114,
	-114, -114, -114, -114, -114, 130, 198, 30, 110, 216,
	148, 146, 221, 90, 228, 79, 152, -222, 209, 27,
	-120, -25, 266, -171, -125, 187, 266, 267, 270, -66,
	-124, 265, -114, -122, -66, 267, 267, -66, 237, 18,
	79, 259, -89, 245, 139, 72, 107, 138, -90, 191,
	8, -132, -131, 239, -201, 92, 103, 266, 267, 267,
	-114, -84, -164, 4, 245, 139, 72, 107, 138, 191,
	-85, -114, -86, -115, -116, 257, 258, 263, 266, 187,
	-87, -114, -66, -114, 36, 126, 217, -88, -114, 98,
	-66, -114, -114, -114, -66, -66, -66, 266, 8, 8,
	8, -110, 267, 265, 272, -133, -32, -42, -38, -38,
	146, -108, 108, -147, -38, 266, 266, 124, 124, -38,
	-38, 108, -38, 108, -38, -38, -33, 179, -38, -38,
	179, -79, 182, -114, -101, 155, -62, 235, -38, -60,
	270, 251, -62, -35, -214, -43, -214, 225, 52, 174,
	-175, -89, 270, 267, 270, -39, 111, -64, -42, 87,
	-38, -137, -15, -18, -14, -23, -9, -38, -76, 103,
	270, 58, -83, 123, 142, 99, 128, 184, 113, -136,
	-135, 25, -38, -136, -25, -140, -139, -59, 24, -89,
	266, 246, -114, 216, -222, 209, -120, -114, 148, 221,
	90, 228, 79, 152, 98, 266, -115, -115, -66, 266,
	-66, -114, 270, 265, 265, 270, 267, -54, 270, -53,
	-114, -66, -66, 267, 216, 216, 216, 216, 266, 267,
	-130, -131, 83, -114, -206, 162, 266, 266, -114, 25,
	267, 98, 267, -91, 167, 267, 10, 257, 258, 259,
	260, 261, 254, 255, 256, 253, 249, 250, 251, 53,
	136, 189, 12, 13, 14, 121, 110, -115, -115, -115,
	-66, 266, 267, -118, -119, 98, 96, 25, -88, -88,
	-88, 267, 98, -66, 270, 270, 270, 267, 267, 267,
	8, 267, 270, 267, 267, -76, -114, 216, 216, 87,
	146, -184, -182, -114, -57, 266, 266, -29, 82, 196,
	-94, 87, -35, 87, -35, 216, -93, 55, 216, -68,
	-79, 54, 267, -110, -71, -133, 267, -38, -109, 266,
	-39, 266, 266, -38, 267, -121, 105, 37, -139, 123,
	123, -139, -83, 123, -81, 161, -81, -81, -38, 266,
	267, 264, 264, 8, -114, -114, -115, -115, 98, 266,
	-114, -123, -147, 22, 22, 267, -66, 267, 270, 267,
	-114, -122, 267, 237, -54, -54, -54, 139, 107, 138,
	-90, 138, -90, -90, 8, 6, 84, -114, 213, -207,
	-38, 266, 240, -53, 267, -147, -114, -118, -114, -147,
	-115, -115, -115, -115, -115, -115, -115, -115, -115, -115,
	-115, -115, -115, -115, -115, -115, -115, -115, 79, 146,
	152, -115, 270, -66, 267, -119, -118, -114, -114, -147,
	267, 267, 267, -66, -114, -114, -114, 267, 8, -121,
	265, -38, -38, -108, 87, -185, 55, -186, 47, 146,
	148, 227, 171, 45, 75, 178, 267, 267, -57, -57,
	146, 75, 146, 75, 68, 223, -38, -38, -42, -38,
	-38, -38, -100, 266, 155, -18, -79, 251, -56, -138,
	-38, -195, 266, -192, -193, -40, 266, -48, -56, 155,
	-202, 241, -114, -66, -139, -139, -82, 231, 155, 123,
	-139, 266, -57, -135, 265, 8, 8, 267, 22, 22,
	-114, -123, 267, 270, -114, -114, 267, -114, 6, -114,
	267, 267, 267, 267, -114, -211, -38, -114, 267, 267,
	-119, 98, 79, 152, 266, -114, 267, 267, 270, 267,
	267, 267, -202, -108, -38, -64, 148, 124, 266, -115,
	-42, -107, -219, 56, 207, 267, 267, 148, 148, -114,
	-147, -35, -35, 216, 216, 80, -56, 55, -75, -25,
	266, 267, 270, -41, -73, 47, -41, -114, 266, -56,
	267, 267, -42, -203, -205, -38, -82, 266, -114, -139,
	-57, 267, 265, 265, -114, -114, 267, -147, 267, -54,
	-204, 166, 267, -115, 98, 266, -123, 267, -114, -186,
	-114, -52, 266, 266, 178, -34, 47, -38, -38, 229,
	147, 267, -38, -107, -138, -31, -64, -31, 267, -66,
	267, -107, 266, 270, 25, -57, 267, 267, -54, 37,
	-115, -123, 267, 267, 267, -189, 137, -57, -57, -42,
	-30, 231, -64, 196, -110, -41, -54, -107, -56, -205,
	-207, 267, -208, 173, 188, -66, 267, -187, -190, -188,
	155, 99, 165, 199, 267, 267, -52, -114, -70, -31,
	267, 267, 267, -209, -210, 30, 224, 60, -114, -209,
	-188, 155, -190, 155, 229, 77, -189, -110, -107, -210,
	169, 95, 187, 169, 95, -191, 144, 181, 40, 196,
	-191, -187, 22, 16, 148, 75, -210,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 305, 0, 0, 275, -2,
	0, 0, 244, 0, 244, 244, 244, 307, 214, 304,
	-2, 315, 0, 0, 0, 313, 289, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 66, 67, 68, 69, 0, 78, 79, 80, 82,
	83, 84, 85, 86, 87, 88, 0, 91, 759, 793,
	804, 95, 105, 0, 855, -2, 109, 60, 708, 709,
	710, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 760, 761, 762, 763, 764,
	766, 767, 768, 769, 770, 771, 772, 773, 774, 775,
	776, 777, 778, 779, 780, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 790, 791, 792, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 856, 857, 858,
	859, 860, 138, 139, 0, 141, 152, 0, 150, 0,
	0, 148, 249, 243, 249, 240, 241, 242, 0, 306,
	0, 0, 0, 213, -2, 285, 286, -2, 0, 310,
	310, 310, 0, 0, 286, 0, 294, 781, 297, 691,
	759, 765, 793, 804, 855, 295, 671, 0, 312, 311,
	0, 290, 365, 0, 682, 335, 0, 2, 0, 837,
	0, 0, 837, 0, 0, 0, 371, 52, 837, 43,
	837, 678, 56, 837, 58, 0, 70, 72, 716, 717,
	718, 719, 859, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 0, 0, 0, 92,
	93, 94, 96, 97, 0, 0, 0, 0, 0, 0,
	108, 133, 134, 61, 0, 0, 154, 0, 0, 144,
	0, 145, 0, 147, 238, 245, 246, 239, 43, 369,
	0, 837, 712, 251, 837, -2, 0, 281, 322, 323,
	0, 0, 0, 308, 309, 0, 0, 0, 277, 278,
	0, 296, 0, 0, 338, 670, 672, 676, 677, 451,
	0, 0, 0, 0, 0, 0, 530, 531, 532, 0,
	534, 535, 536, 832, 0, 540, 541, 851, 682, 694,
	695, 696, 697, 0, 0, 0, 702, 703, 704, 653,
	579, 550, -2, -2, 692, 393, 394, 395, 396, -2,
	861, 554, 556, 558, 559, 560, 561, 0, 833, 847,
	848, 854, 857, 858, 837, 844, 838, 828, 835, 843,
	746, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 715,
	417, 418, 423, 424, 426, 338, 336, 366, 367, 0,
	683, 661, 654, 655, 0, 0, 0, 0, 667, 665,
	666, 20, 235, 22, 0, 235, 235, 0, 0, 0,
	0, 0, 375, 0, 254, 0, 372, 0, 0, 54,
	0, 41, 42, 0, 0, 0, 305, 0, 0, 75,
	0, 742, 680, 684, 687, 81, 0, 0, 0, 0,
	100, 120, 121, 122, 101, 103, 110, 112, 113, 114,
	123, 124, 125, 126, 207, 0, 209, 136, 137, 705,
	0, 102, 104, 106, 107, 127, 128, 0, 130, 131,
	132, 434, 0, 62, 720, 721, 722, 723, 724, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 140, 142, 0,
	151, 143, 149, 146, 0, 0, 210, 0, 158, 0,
	0, 837, 711, 0, 284, 320, 321, 324, 327, 328,
	325, 451, 291, 292, 293, 316, 317, 224, 298, 0,
	0, 688, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 675, 455, 456, 457, 478,
	479, 0, -2, 611, 0, 537, 538, 539, 0, 0,
	-2, 0, 699, 448, 0, 0, 652, 581, 0, 0,
	0, 0, 0, 0, 0, 632, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 407, 420, 430, 428, 427,
	409, 0, 408, 406, 0, 410, 0, 375, 0, 662,
	656, 0, 659, 660, 0, 669, 0, 0, 0, 0,
	234, 24, 837, 0, 34, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 266, 0, 261, 256, 0, 0, 0, 338, 268,
	270, 271, 0, 0, 373, 53, 679, 43, 59, 57,
	65, 71, 0, 0, 76, 77, 685, 686, 0, 98,
	99, 250, 0, 117, 0, 119, 0, 208, 707, 706,
	448, 63, 153, 89, 247, 248, 370, 0, 157, 159,
	161, 162, 163, 712, 0, 0, 0, 0, 0, 326,
	329, 330, 0, 319, 222, 223, 305, 0, 690, 332,
	337, 339, 356, 356, 343, 0, 673, 452, 381, 382,
	383, 384, 385, 448, 388, 389, 390, 391, 392, 400,
	401, 402, 403, 404, 405, 414, 0, 399, 399, 399,
	411, 412, 415, 416, 421, 422, 432, 433, 431, 431,
	431, 429, 453, 0, 458, 459, 460, 461, 462, 463,
	464, 465, 466, -2, -2, -2, 470, 471, 472, -2,
	-2, -2, 476, 477, -2, 0, 0, 664, 0, 0,
	484, 0, 487, 489, 491, 0, 0, 0, 0, 663,
	501, 644, 0, 674, 486, 0, 0, 533, 0, 0,
	0, 617, 611, 618, 0, -2, 542, 315, 0, 0,
	0, 0, 700, 435, 436, 437, 438, 439, 440, 449,
	0, 651, 647, 0, 589, 0, 0, 0, 555, 557,
	0, 0, 0, 621, 622, 623, 624, 625, 626, 627,
	0, 0, 0, 0, 503, 0, 0, 0, 0, 851,
	0, 611, 637, 0, 0, 0, 0, 0, 611, 0,
	643, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 332, 368, 657, 0, 668, 23, 226, 0, 0,
	0, 26, 837, 166, 0, 0, 0, 0, 0, 237,
	35, 837, 43, 837, 43, 36, 21, 235, 225, 228,
	0, 51, 0, 374, 266, 0, 0, 258, 255, 375,
	0, 0, 0, 55, 73, 681, 74, 115, 116, 118,
	111, 129, 0, 155, 0, 0, 712, 0, 0, 0,
	252, 318, 0, 300, 301, 302, 303, 689, 334, 0,
	0, 0, 0, 0, 0, 362, 362, 362, 360, 341,
	355, 0, 354, 342, -2, 343, 0, 376, 378, 386,
	0, 0, -2, 0, 0, 0, 502, -2, 485, 488,
	490, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 612, 0, 615, 616, 0, -2, 0, 0, 314,
	315, 315, 315, 548, 0, 0, 0, 0, 0, 0,
	0, 648, 0, 0, 549, 0, 0, 0, 0, 0,
	563, 0, 564, 0, 0, 565, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 505, 506, 507,
	0, 0, 566, 635, 636, 0, 0, 0, 0, 0,
	0, 571, 0, 642, 0, 0, 0, 575, 576, 577,
	0, 397, 0, 413, 425, 334, 0, 0, 0, 0,
	0, 164, 179, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 32, 0, 38, 0, 0, 0, 0, 265,
	253, 264, 0, 266, 269, 272, 0, 90, 160, 0,
	0, 158, 0, 0, 299, 583, 0, 0, 340, 0,
	0, 0, 0, 0, 357, 361, 358, 359, 352, 0,
	345, 0, 0, 0, 454, -2, 0, 0, 0, 0,
	-2, 0, 613, 0, 0, 645, 0, 606, 0, -2,
	612, 619, 543, 0, 0, 0, 0, 441, 442, 443,
	444, 445, 446, 447, 0, 701, 646, 650, 0, 587,
	588, 592, 0, 0, 553, 0, 620, 629, 630, 504,
	508, 509, 510, 511, 512, 513, 514, 515, 516, -2,
	-2, -2, 520, 521, 522, -2, -2, -2, 0, 0,
	0, 631, 0, 0, 609, 633, 634, 639, 640, 0,
	568, 569, 570, 641, 0, 0, 0, 419, 0, 583,
	658, 230, 232, 25, 0, 165, 0, 168, 0, 0,
	171, 172, 0, 0, 0, 0, 181, 188, 0, 0,
	0, 40, 0, 0, 236, 0, 43, 43, 227, 0,
	0, 229, 0, 0, 0, 257, 267, 0, 0, 215,
	221, 221, 0, 551, 552, 0, 0, 0, 0, 0,
	287, 0, 333, 331, 346, 0, 348, 0, 0, 0,
	350, 0, 0, 344, 379, 0, 0, 387, 0, 0,
	-2, 0, 495, 0, -2, -2, 605, 612, 698, 315,
	544, 546, 547, 450, 649, 594, 591, 0, 578, 562,
	628, 0, 0, 0, 0, 612, 608, 567, 0, 573,
	574, 398, 288, 27, 0, 169, 170, 173, 0, 175,
	190, 182, 0, 185, 186, 183, 0, 29, 30, 39,
	45, 31, 37, 0, 0, 0, 0, 0, 273, 274,
	0, 188, 0, 224, 693, 0, 224, 0, 0, 0,
	156, 188, 0, 582, 584, 0, 347, 0, 364, 349,
	0, 353, 380, 377, -2, -2, 496, 614, 607, 0,
	315, 0, 580, -2, 0, 0, 0, 610, 0, 167,
	0, 194, 0, 0, 0, 47, 0, 231, 233, 0,
	260, 375, 263, 177, 216, 217, 220, 218, 221, 315,
	188, 211, 0, 0, 0, 0, 351, 545, 597, 0,
	-2, 0, 528, 572, 174, 199, 0, 0, 0, 190,
	33, 0, 44, 0, 262, 224, 0, 178, 0, 585,
	586, 363, 0, 0, 0, 593, 529, 176, 195, 196,
	0, 191, 192, 193, 189, 187, 194, 46, 375, 219,
	543, 188, 590, 595, 598, -2, 807, 739, 0, 596,
	197, 0, 198, 0, 0, 0, 199, 259, 212, 0,
	600, 601, 602, 603, 604, 200, 0, 203, 204, 0,
	201, 184, 0, 202, 205, 206, 599,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 255, 3, 261, 256, 3,
	266, 267, 259, 257, 270, 258, 268, 260, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 272, 269,
	249, 251, 250, 3, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 264, 3, 265, 254, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 253, 3, 263,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 252, 262,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:626
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:632
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:638
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:657
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:666
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:672
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:676
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:682
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:712
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:714
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:716
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:729
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:732
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:736
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:738
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:741
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:746
		{
			sqlVAL.union.val = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:751
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:752
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:757
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:760
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:761
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:764
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:765
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = &DropIndex{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1151
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1153
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = []string(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1334
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1347
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1384
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1404
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = []string(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = []string(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1450
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1454
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1457
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1465
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1542
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1543
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1547
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[3].union.qname(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &RenameIndex{Name: sqlDollar[5].union.qname(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &RollbackTransaction{}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1641
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.selectStmt()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.selectStmt()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Insert{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1720
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1722
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: Tuple(sqlDollar[5].union.exprs())}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.selectStmt()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[2].union.orderBy()
				s.Limit = sqlDollar[3].union.limit()
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = sqlDollar[2].union.selectStmt()
			if s, ok := sqlVAL.union.val.(*Select); ok {
				s.OrderBy = sqlDollar[3].union.orderBy()
				s.Limit = sqlDollar[4].union.limit()
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &Select{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &Select{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1936
		{
			sqlVAL.union.val = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].union.selectStmt(),
				Right: sqlDollar[4].union.selectStmt(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1974
		{
			unimplemented()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			unimplemented()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			unimplemented()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1981
		{
			unimplemented()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStmt()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			unimplemented()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1994
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1998
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = true
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = false
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = true
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = Values{Tuple(sqlDollar[2].union.exprs())}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selectStmt().(Values), Tuple(sqlDollar[3].union.exprs()))
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: sqlDollar[2].union.aliasClause()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.str = astFullJoin
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.str = astLeftJoin
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.str = astRightJoin
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.str = astInnerJoin
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2298
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2299
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2389
		{
			unimplemented()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			unimplemented()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			unimplemented()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2394
		{
			unimplemented()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			unimplemented()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = IntVal{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2585
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &DateType{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2609
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2611
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			unimplemented()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2613
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			unimplemented()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2615
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2616
		{
			unimplemented()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2617
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			unimplemented()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			unimplemented()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2649
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2781
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3024
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3025
		{
			unimplemented()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			unimplemented()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3066
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			unimplemented()
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3086
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3151
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3152
		{
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3155
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3156
		{
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3173
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3189
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3193
		{
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = Row(sqlDollar[3].union.exprs())
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = Row(nil)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = Tuple(append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr()))
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = Row(sqlDollar[3].union.exprs())
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = Row(nil)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = Tuple(append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr()))
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = Array(sqlDollar[2].union.exprs())
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = Array(sqlDollar[2].union.exprs())
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = Array(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = Tuple(sqlDollar[2].union.exprs())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = IndexIndirection(sqlDollar[2].str)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3547
		{
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3696
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3732
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = DBool(true)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = DBool(false)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = DNull
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3765
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
