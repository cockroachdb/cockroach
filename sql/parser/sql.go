// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SMALLSERIAL = 57555
const SNAPSHOT = 57556
const SOME = 57557
const SQL = 57558
const START = 57559
const STRICT = 57560
const STRING = 57561
const STORING = 57562
const SUBSTRING = 57563
const SYMMETRIC = 57564
const SYSTEM = 57565
const TABLE = 57566
const TABLES = 57567
const TEXT = 57568
const THEN = 57569
const TIME = 57570
const TIMESTAMP = 57571
const TIMESTAMPTZ = 57572
const TO = 57573
const TRAILING = 57574
const TRANSACTION = 57575
const TREAT = 57576
const TRIM = 57577
const TRUE = 57578
const TRUNCATE = 57579
const TYPE = 57580
const UNBOUNDED = 57581
const UNCOMMITTED = 57582
const UNION = 57583
const UNIQUE = 57584
const UNKNOWN = 57585
const UPDATE = 57586
const UPSERT = 57587
const USER = 57588
const USING = 57589
const VALID = 57590
const VALIDATE = 57591
const VALUE = 57592
const VALUES = 57593
const VARCHAR = 57594
const VARIADIC = 57595
const VARYING = 57596
const WHEN = 57597
const WHERE = 57598
const WINDOW = 57599
const WITH = 57600
const WITHIN = 57601
const WITHOUT = 57602
const YEAR = 57603
const ZONE = 57604
const NOT_LA = 57605
const WITH_LA = 57606
const AS_LA = 57607
const POSTFIXOP = 57608
const UMINUS = 57609

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4498

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	286, 21,
	-2, 335,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 306,
	164, 306,
	192, 306,
	284, 306,
	286, 306,
	-2, 316,
	-1, 45,
	1, 309,
	164, 309,
	192, 309,
	284, 309,
	286, 309,
	-2, 315,
	-1, 54,
	1, 21,
	286, 21,
	-2, 335,
	-1, 252,
	1, 144,
	286, 144,
	-2, 818,
	-1, 284,
	139, 345,
	163, 345,
	-2, 312,
	-1, 287,
	139, 344,
	163, 344,
	-2, 310,
	-1, 401,
	139, 344,
	163, 344,
	-2, 313,
	-1, 457,
	283, 762,
	-2, 755,
	-1, 458,
	283, 763,
	-2, 756,
	-1, 464,
	5, 479,
	283, 479,
	-2, 902,
	-1, 486,
	5, 445,
	-2, 878,
	-1, 487,
	5, 473,
	283, 473,
	-2, 880,
	-1, 488,
	5, 453,
	-2, 881,
	-1, 489,
	5, 452,
	-2, 882,
	-1, 490,
	5, 473,
	283, 473,
	-2, 885,
	-1, 491,
	5, 473,
	283, 473,
	-2, 886,
	-1, 492,
	5, 474,
	-2, 889,
	-1, 493,
	5, 440,
	-2, 890,
	-1, 494,
	5, 440,
	-2, 891,
	-1, 495,
	5, 455,
	-2, 894,
	-1, 496,
	5, 441,
	-2, 899,
	-1, 497,
	5, 442,
	-2, 900,
	-1, 498,
	5, 443,
	-2, 901,
	-1, 499,
	5, 440,
	-2, 905,
	-1, 500,
	5, 446,
	-2, 910,
	-1, 501,
	5, 444,
	-2, 913,
	-1, 502,
	5, 471,
	283, 471,
	-2, 915,
	-1, 503,
	5, 475,
	-2, 918,
	-1, 504,
	5, 477,
	-2, 919,
	-1, 505,
	5, 470,
	283, 470,
	-2, 923,
	-1, 774,
	89, 316,
	125, 316,
	139, 316,
	163, 316,
	167, 316,
	241, 316,
	-2, 583,
	-1, 782,
	283, 740,
	-2, 729,
	-1, 990,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 513,
	-1, 991,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 514,
	-1, 992,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 515,
	-1, 996,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 519,
	-1, 997,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 520,
	-1, 998,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 521,
	-1, 1001,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 526,
	-1, 1031,
	172, 653,
	-2, 656,
	-1, 1192,
	89, 316,
	125, 316,
	139, 316,
	163, 316,
	167, 316,
	241, 316,
	-2, 393,
	-1, 1200,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 527,
	-1, 1205,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 528,
	-1, 1223,
	172, 652,
	-2, 655,
	-1, 1372,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 529,
	-1, 1377,
	128, 0,
	-2, 539,
	-1, 1386,
	172, 654,
	-2, 657,
	-1, 1426,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 564,
	-1, 1427,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 565,
	-1, 1428,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 566,
	-1, 1432,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 570,
	-1, 1433,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 571,
	-1, 1434,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 572,
	-1, 1538,
	128, 0,
	-2, 540,
	-1, 1542,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 543,
	-1, 1543,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 545,
	-1, 1628,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 544,
	-1, 1629,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 546,
	-1, 1637,
	128, 0,
	-2, 573,
	-1, 1678,
	128, 0,
	-2, 574,
	-1, 1726,
	30, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 877,
}

const sqlNprod = 1016
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 21007

var sqlAct = [...]int{

	458, 1706, 1579, 1725, 1747, 1683, 1707, 855, 1708, 1724,
	925, 863, 1086, 1497, 1405, 456, 1614, 1601, 1526, 253,
	455, 1498, 1512, 1507, 1464, 1518, 310, 448, 1281, 906,
	607, 92, 777, 288, 92, 1349, 909, 93, 1358, 1282,
	547, 1226, 92, 31, 1189, 420, 1378, 506, 1129, 92,
	92, 1188, 14, 92, 731, 1044, 92, 92, 92, 1179,
	712, 779, 92, 92, 92, 92, 1379, 336, 527, 908,
	524, 840, 864, 518, 709, 1175, 1048, 831, 1017, 1038,
	67, 1014, 727, 812, 331, 808, 389, 937, 287, 1083,
	92, 293, 901, 295, 44, 20, 563, 580, 1135, 10,
	733, 529, 6, 430, 337, 390, 935, 519, 421, 520,
	293, 560, 8, 591, 338, 7, 912, 934, 333, 857,
	65, 44, 5, 72, 329, 4, 298, 71, 326, 405,
	73, 404, 250, 403, 424, 88, 559, 582, 578, 79,
	74, 540, 322, 69, 328, 296, 408, 856, 44, 549,
	68, 1621, 431, 70, 1622, 549, 45, 1041, 549, 306,
	1754, 1721, 313, 929, 1600, 860, 1714, 1705, 323, 929,
	1541, 887, 46, 1699, 1069, 292, 929, 277, 1141, 1680,
	334, 1674, 1541, 1664, 929, 1655, 1600, 1630, 929, 1625,
	1541, 1611, 929, 292, 1600, 300, 1042, 1608, 1187, 538,
	1609, 285, 316, 1599, 1584, 307, 1600, 929, 307, 1583,
	318, 735, 929, 735, 307, 1564, 318, 284, 887, 1668,
	1544, 1540, 736, 887, 1541, 1474, 734, 50, 929, 1043,
	1040, 1382, 1338, 1332, 887, 1333, 1333, 1439, 1299, 1385,
	738, 1300, 764, 1157, 1297, 92, 92, 887, 52, 450,
	1296, 829, 1177, 887, 508, 507, 1295, 1223, 1221, 887,
	887, 737, 930, 1222, 1220, 929, 75, 752, 886, 887,
	828, 887, 1159, 827, 929, 53, 879, 92, 1025, 92,
	924, 92, 48, 92, 555, 1045, 1603, 556, 49, 895,
	521, 50, 416, 415, 522, 1225, 522, 703, 92, 550,
	396, 702, 572, 571, 355, 550, 43, 47, 550, 92,
	305, 743, 52, 887, 54, 521, 606, 375, 402, 522,
	92, 92, 92, 1723, 92, 1720, 401, 1713, 765, 1675,
	50, 26, 513, 1610, 363, 1569, 1565, 1557, 27, 53,
	1556, 463, 517, 1551, 1039, 1550, 48, 1549, 512, 1548,
	760, 52, 49, 364, 92, 92, 753, 92, 1535, 1454,
	1492, 1449, 1448, 1447, 1388, 1367, 1198, 75, 336, 336,
	552, 859, 1022, 1348, 569, 1304, 609, 92, 53, 92,
	92, 92, 92, 1301, 92, 395, 1289, 1280, 92, 1252,
	1249, 780, 1161, 92, 1141, 553, 734, 1247, 1716, 92,
	1236, 548, 1230, 1158, 706, 337, 337, 43, 1100, 1055,
	47, 754, 393, 610, 1054, 338, 338, 92, 415, 785,
	92, 414, 762, 611, 1407, 1667, 323, 1647, 1646, 1639,
	1617, 307, 26, 1606, 1598, 705, 1576, 411, 412, 27,
	1562, 1529, 510, 417, 1533, 1505, 1376, 776, 1366, 1345,
	50, 1344, 285, 1343, 1341, 1316, 1315, 1279, 1023, 1253,
	557, 515, 539, 542, 1244, 1243, 1235, 1217, 284, 1213,
	1019, 52, 307, 541, 541, 761, 782, 813, 293, 1491,
	816, 1114, 748, 745, 746, 747, 739, 740, 741, 742,
	744, 1113, 1093, 567, 1053, 566, 509, 460, 53, 928,
	820, 806, 805, 804, 803, 48, 307, 595, 602, 692,
	802, 49, 696, 697, 698, 695, 699, 92, 521, 801,
	701, 800, 522, 609, 799, 798, 797, 796, 704, 795,
	47, 92, 736, 794, 716, 92, 715, 717, 92, 92,
	793, 792, 722, 729, 92, 783, 92, 92, 1258, 92,
	738, 50, 92, 825, 92, 92, 781, 336, 1114, 47,
	610, 707, 92, 92, 311, 285, 419, 834, 285, 285,
	611, 737, 52, 873, 331, 361, 810, 811, 814, 1627,
	1626, 723, 1369, 817, 724, 725, 1368, 514, 369, 388,
	1623, 823, 1496, 858, 337, 858, 1142, 919, 1524, 53,
	736, 818, 1303, 790, 338, 819, 48, 609, 67, 845,
	847, 1302, 49, 821, 1199, 384, 370, 881, 738, 1513,
	601, 743, 856, 1408, 1049, 809, 1137, 736, 1689, 243,
	1654, 66, 1735, 1253, 1482, 1239, 1736, 900, 530, 737,
	531, 850, 1153, 885, 610, 738, 276, 837, 275, 44,
	530, 72, 531, 282, 611, 71, 270, 271, 73, 889,
	1592, 1591, 862, 1328, 1308, 1307, 737, 1041, 74, 822,
	334, 69, 882, 880, 883, 876, 875, 888, 68, 874,
	872, 70, 853, 1234, 1233, 1232, 1231, 307, 1201, 743,
	318, 1006, 736, 871, 878, 92, 867, 786, 852, 600,
	599, 318, 593, 588, 318, 532, 1042, 92, 92, 851,
	738, 392, 387, 1700, 1097, 367, 743, 532, 1653, 1532,
	443, 58, 1258, 1254, 1255, 1256, 1257, 1259, 1096, 979,
	353, 737, 279, 1671, 753, 1581, 92, 752, 92, 1043,
	1040, 931, 833, 1691, 891, 543, 1016, 1210, 1327, 1253,
	893, 90, 368, 530, 254, 531, 291, 978, 1045, 1208,
	1318, 753, 90, 59, 922, 923, 894, 609, 1016, 299,
	299, 1702, 603, 309, 1397, 892, 309, 315, 309, 1134,
	1744, 743, 309, 324, 309, 254, 1130, 1703, 1330, 754,
	904, 1139, 290, 1026, 1030, 1045, 1033, 1020, 741, 742,
	744, 1735, 1059, 939, 610, 1049, 280, 1130, 903, 1125,
	357, 1078, 549, 905, 611, 1128, 754, 1090, 1091, 1092,
	532, 605, 536, 1206, 283, 535, 753, 1211, 1152, 1099,
	1045, 92, 92, 92, 292, 604, 1648, 92, 1258, 833,
	92, 1154, 1029, 932, 366, 832, 92, 92, 92, 92,
	92, 823, 92, 92, 1039, 1635, 823, 1394, 62, 307,
	92, 391, 92, 747, 739, 740, 741, 742, 744, 92,
	533, 365, 1062, 1109, 358, 360, 807, 1021, 92, 92,
	92, 754, 533, 1268, 1319, 92, 61, 60, 307, 736,
	1395, 739, 740, 741, 742, 744, 336, 1582, 1103, 1256,
	1257, 1259, 1207, 293, 63, 1111, 1132, 738, 289, 1209,
	773, 1063, 292, 1144, 92, 1145, 92, 92, 92, 1124,
	1743, 92, 1325, 366, 528, 1242, 1359, 1709, 737, 56,
	92, 1104, 1070, 337, 1253, 385, 1163, 92, 1269, 92,
	841, 1203, 1734, 338, 1064, 1061, 1045, 1004, 80, 1732,
	1511, 1710, 748, 745, 746, 747, 739, 740, 741, 742,
	744, 917, 550, 1015, 1140, 254, 254, 1143, 85, 594,
	589, 1147, 1150, 81, 378, 57, 1148, 1149, 743, 1156,
	406, 1170, 293, 1105, 1146, 533, 945, 386, 1160, 356,
	1162, 967, 966, 1155, 354, 82, 844, 90, 1742, 309,
	1065, 254, 407, 399, 407, 1620, 1586, 1168, 1585, 1435,
	84, 64, 1136, 1254, 1255, 1256, 1257, 1259, 299, 830,
	1711, 1136, 44, 1258, 1172, 1197, 1193, 1560, 1171, 309,
	307, 1173, 1216, 1005, 1758, 1574, 1218, 1310, 1478, 1108,
	309, 309, 309, 918, 544, 814, 1481, 817, 1228, 1229,
	714, 708, 1527, 1480, 1012, 1002, 1194, 1712, 1393, 1060,
	811, 810, 406, 293, 1684, 1521, 1010, 1224, 1268, 700,
	1164, 573, 1575, 843, 309, 564, 1116, 564, 944, 1115,
	77, 1354, 55, 1436, 1204, 1353, 1202, 1278, 945, 1437,
	321, 307, 83, 967, 966, 365, 320, 254, 1291, 564,
	254, 254, 254, 1528, 254, 577, 1750, 1561, 254, 290,
	1350, 398, 1176, 90, 1757, 92, 1477, 1052, 293, 711,
	1638, 80, 1559, 1269, 1238, 1283, 1375, 1003, 1008, 1248,
	1007, 1479, 1212, 86, 1013, 842, 575, 299, 884, 383,
	732, 85, 92, 381, 380, 379, 81, 576, 1335, 1070,
	1070, 376, 319, 739, 740, 741, 742, 744, 92, 1284,
	92, 1322, 92, 1324, 791, 694, 92, 1051, 82, 1314,
	1286, 1287, 1288, 1461, 1323, 1305, 1329, 1321, 92, 969,
	944, 92, 1309, 84, 1312, 1334, 1165, 92, 609, 1214,
	1215, 92, 920, 92, 1263, 1260, 1261, 1262, 1254, 1255,
	1256, 1257, 1259, 1326, 916, 877, 1070, 1070, 1070, 1009,
	554, 551, 546, 1337, 1336, 1124, 1011, 1748, 1363, 537,
	534, 1402, 1360, 1361, 713, 610, 1593, 1736, 1347, 1340,
	1383, 926, 372, 968, 941, 611, 1342, 309, 1362, 409,
	597, 1356, 303, 92, 833, 1595, 1275, 1276, 1277, 849,
	848, 838, 1331, 1603, 833, 309, 1749, 3, 309, 854,
	846, 1390, 1391, 1392, 309, 83, 869, 870, 1650, 309,
	1677, 1351, 309, 1751, 254, 254, 1182, 413, 1669, 1413,
	736, 969, 564, 732, 1387, 927, 1409, 861, 1396, 1398,
	1399, 1185, 1440, 76, 867, 1352, 730, 568, 1355, 1196,
	736, 1357, 410, 1450, 373, 304, 86, 1183, 92, 92,
	92, 1443, 312, 1411, 1755, 1756, 92, 92, 738, 737,
	1415, 1442, 92, 87, 92, 1253, 92, 92, 92, 92,
	307, 736, 1534, 307, 92, 968, 941, 1070, 1070, 737,
	1455, 1456, 269, 1400, 92, 92, 1460, 897, 896, 1470,
	570, 1370, 1446, 1298, 92, 92, 1098, 1503, 92, 1510,
	1095, 1503, 1502, 1094, 1515, 1184, 1502, 92, 92, 1504,
	1475, 1476, 1046, 1504, 1509, 898, 1489, 1373, 1374, 1471,
	1722, 272, 273, 1546, 1495, 1493, 1401, 1166, 899, 1070,
	1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
	1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 92, 1070,
	784, 278, 1531, 1580, 78, 902, 693, 377, 1553, 1701,
	1241, 1530, 1634, 1539, 1613, 1050, 789, 309, 838, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 25, 1438,
	1500, 436, 1462, 1558, 1311, 911, 309, 1466, 254, 1467,
	910, 612, 92, 945, 92, 598, 92, 587, 967, 966,
	459, 1516, 1517, 92, 382, 1522, 581, 590, 1485, 1570,
	1058, 511, 1469, 461, 942, 1573, 1494, 462, 943, 1472,
	815, 449, 92, 940, 332, 1523, 945, 865, 1571, 1047,
	1237, 967, 966, 945, 787, 435, 307, 307, 967, 966,
	307, 441, 92, 440, 92, 1027, 432, 1525, 1604, 1607,
	1186, 1503, 92, 1596, 1589, 1590, 1502, 34, 362, 248,
	92, 249, 1602, 1504, 1133, 945, 1490, 921, 718, 1320,
	967, 966, 281, 1616, 1468, 1250, 1594, 1076, 1068, 1588,
	1066, 309, 1106, 1107, 1057, 944, 394, 838, 523, 866,
	1112, 374, 933, 1195, 418, 1506, 1117, 1118, 1120, 1122,
	1123, 726, 1126, 1127, 1715, 302, 301, 907, 371, 574,
	309, 1633, 1138, 890, 1624, 274, 1253, 1645, 944, 309,
	1649, 1317, 92, 92, 1688, 944, 92, 1643, 309, 902,
	564, 51, 1657, 19, 92, 902, 1070, 17, 1631, 1640,
	92, 16, 1659, 15, 1666, 1661, 1503, 13, 92, 1663,
	12, 1502, 1658, 1660, 609, 1578, 945, 944, 1504, 11,
	18, 967, 966, 1665, 711, 1169, 711, 254, 309, 1619,
	1672, 1167, 293, 9, 24, 23, 1577, 92, 92, 92,
	1174, 92, 422, 422, 1673, 22, 969, 1191, 2, 309,
	1, 610, 525, 1692, 1612, 0, 0, 1695, 1676, 92,
	1690, 611, 1670, 0, 307, 1258, 823, 1253, 0, 0,
	1693, 1696, 0, 1503, 1698, 1697, 1679, 0, 1502, 969,
	1704, 0, 92, 0, 1070, 1504, 969, 1694, 0, 0,
	0, 0, 1686, 1718, 1719, 0, 0, 0, 0, 0,
	968, 941, 0, 1730, 0, 1733, 1731, 92, 944, 0,
	1268, 1737, 1267, 1470, 1740, 1465, 1739, 0, 969, 0,
	1741, 736, 945, 1463, 1637, 0, 0, 967, 966, 1753,
	0, 1752, 0, 968, 941, 736, 0, 0, 0, 738,
	968, 941, 0, 1471, 0, 0, 0, 719, 721, 1759,
	0, 437, 32, 738, 728, 0, 1258, 0, 0, 1178,
	737, 1738, 0, 1070, 0, 1269, 768, 769, 770, 771,
	772, 0, 968, 941, 737, 775, 0, 0, 0, 32,
	0, 945, 0, 0, 0, 0, 967, 966, 0, 0,
	0, 1687, 0, 0, 0, 788, 286, 0, 0, 294,
	0, 1268, 945, 1678, 1182, 1178, 32, 967, 966, 969,
	743, 0, 0, 0, 944, 0, 0, 0, 294, 1185,
	0, 1466, 0, 1467, 743, 732, 0, 0, 0, 1180,
	0, 0, 0, 0, 867, 1183, 0, 1260, 1261, 1262,
	1254, 1255, 1256, 1257, 1259, 0, 1469, 0, 0, 1181,
	1182, 0, 309, 1472, 0, 753, 1269, 1253, 0, 0,
	0, 0, 824, 968, 941, 1185, 0, 0, 1339, 753,
	838, 0, 711, 944, 0, 1180, 1346, 0, 0, 945,
	0, 1183, 0, 0, 967, 966, 0, 0, 309, 0,
	0, 309, 0, 1184, 944, 1181, 0, 1191, 0, 0,
	0, 1365, 0, 1191, 0, 0, 0, 0, 1468, 1520,
	754, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 1263, 1260, 1261,
	1262, 1254, 1255, 1256, 1257, 1259, 0, 0, 0, 1184,
	0, 0, 0, 0, 0, 0, 1258, 0, 0, 0,
	0, 0, 0, 1406, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 968,
	941, 944, 0, 0, 969, 0, 0, 0, 0, 0,
	0, 748, 745, 746, 747, 739, 740, 741, 742, 744,
	0, 1268, 1519, 0, 0, 969, 745, 746, 747, 739,
	740, 741, 742, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1458, 1459,
	838, 1253, 0, 1270, 1271, 1272, 732, 732, 968, 941,
	0, 0, 1483, 0, 1484, 0, 309, 1486, 1487, 1488,
	0, 0, 0, 0, 309, 0, 1269, 286, 0, 968,
	941, 0, 1499, 0, 1508, 838, 1499, 0, 0, 0,
	0, 0, 0, 0, 309, 309, 1267, 0, 309, 0,
	0, 0, 969, 0, 0, 422, 0, 732, 1191, 0,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	1258, 0, 0, 0, 0, 0, 0, 0, 1554, 0,
	1262, 1254, 1255, 1256, 1257, 1259, 968, 941, 0, 0,
	0, 0, 0, 0, 0, 1056, 0, 1067, 0, 1077,
	1079, 1084, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1268, 0, 0, 0, 0,
	286, 0, 0, 286, 286, 0, 0, 0, 525, 0,
	0, 0, 838, 0, 1572, 0, 254, 0, 0, 0,
	0, 0, 0, 309, 0, 0, 774, 0, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 1131, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	1269, 0, 0, 0, 0, 0, 1499, 0, 0, 0,
	0, 0, 309, 0, 1615, 0, 0, 0, 1151, 0,
	0, 0, 309, 0, 0, 736, 0, 755, 756, 757,
	732, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 0, 738, 0, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 1264, 1265, 1266,
	752, 1263, 1260, 1261, 1262, 1254, 1255, 1256, 1257, 1259,
	0, 0, 32, 0, 32, 0, 0, 0, 0, 0,
	0, 0, 1651, 1652, 0, 0, 1656, 32, 0, 0,
	0, 1499, 0, 0, 254, 0, 0, 0, 0, 0,
	1508, 0, 0, 0, 743, 0, 0, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 1200, 0, 0, 0, 1205, 0, 0,
	0, 0, 0, 763, 0, 0, 0, 1685, 732, 309,
	0, 254, 0, 760, 0, 0, 1219, 0, 0, 753,
	0, 0, 0, 21, 0, 1227, 0, 0, 1499, 1615,
	0, 0, 0, 36, 0, 0, 0, 0, 0, 0,
	1240, 759, 0, 0, 1245, 0, 0, 0, 0, 0,
	0, 0, 309, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 43, 0, 775, 0, 0, 0, 0,
	0, 1084, 1084, 1084, 754, 0, 0, 732, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 26, 0,
	0, 39, 0, 1306, 0, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 1313, 0, 0, 0, 0, 0,
	28, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 422, 0, 0, 0, 0, 0, 0, 0, 0,
	422, 0, 0, 525, 0, 0, 0, 936, 761, 0,
	0, 749, 750, 751, 0, 748, 745, 746, 747, 739,
	740, 741, 742, 744, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 1018, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 755, 756, 757,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	1371, 0, 1372, 738, 41, 764, 0, 29, 0, 40,
	0, 0, 0, 1377, 30, 0, 0, 50, 0, 0,
	0, 0, 33, 35, 737, 0, 1151, 0, 0, 0,
	752, 37, 0, 0, 0, 0, 0, 0, 52, 0,
	1403, 0, 0, 0, 256, 0, 0, 0, 0, 1412,
	0, 42, 1414, 0, 0, 0, 0, 0, 267, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 294, 48, 0, 743, 0, 0, 0, 49, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 765, 258, 1451, 1452, 1453, 0, 47, 736, 268,
	755, 756, 757, 763, 0, 0, 0, 0, 0, 0,
	758, 257, 259, 760, 0, 0, 738, 0, 764, 753,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 422, 0, 0, 0, 0, 0, 737, 0, 0,
	32, 759, 0, 752, 0, 0, 0, 260, 0, 0,
	1192, 1514, 0, 0, 0, 0, 0, 261, 262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 754, 0, 1538, 0, 0, 0,
	0, 1542, 1543, 0, 0, 762, 1545, 743, 0, 0,
	1547, 0, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 765, 1552, 758, 0, 0, 1555,
	0, 0, 738, 0, 764, 0, 763, 1018, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	0, 774, 753, 737, 0, 0, 0, 0, 761, 752,
	1563, 749, 750, 751, 0, 748, 745, 746, 747, 739,
	740, 741, 742, 744, 759, 0, 0, 0, 0, 0,
	0, 0, 1566, 0, 0, 264, 0, 0, 265, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 1587, 0, 743, 0, 0, 774, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	765, 0, 1605, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 1618, 760, 0, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 1628, 1629, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 761, 0, 0, 749, 750, 751, 0, 748, 745,
	746, 747, 739, 740, 741, 742, 744, 1642, 0, 0,
	0, 0, 0, 0, 0, 1294, 0, 1644, 736, 0,
	755, 756, 757, 754, 0, 0, 0, 0, 0, 936,
	758, 0, 936, 0, 762, 0, 738, 0, 764, 525,
	0, 0, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 737, 0, 0,
	0, 0, 738, 752, 764, 1253, 0, 1270, 1271, 1272,
	0, 0, 0, 0, 0, 0, 0, 1537, 0, 0,
	0, 0, 0, 737, 0, 0, 0, 761, 0, 752,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 0, 0, 0, 743, 0, 0,
	1267, 1293, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 765, 0, 0, 0, 0, 0,
	1717, 0, 0, 743, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 1729, 1729, 0, 760, 0, 0, 0,
	765, 0, 753, 0, 1258, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 1729, 0, 0,
	0, 0, 760, 0, 759, 0, 0, 0, 753, 0,
	0, 0, 0, 1273, 32, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1729, 0, 0, 1268,
	759, 0, 0, 0, 0, 936, 936, 754, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 749, 750, 751, 0, 748, 745,
	746, 747, 739, 740, 741, 742, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 1292, 0, 761, 0, 0,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 0, 0, 0, 0, 1682, 0,
	0, 1264, 1265, 1266, 0, 1263, 1260, 1261, 1262, 1254,
	1255, 1256, 1257, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 94, 95,
	613, 96, 614, 615, 616, 617, 618, 619, 620, 621,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 622,
	100, 202, 203, 101, 623, 624, 204, 205, 206, 625,
	207, 626, 340, 627, 102, 103, 104, 0, 105, 628,
	106, 629, 341, 107, 108, 630, 631, 632, 633, 634,
	635, 109, 110, 111, 112, 208, 113, 209, 210, 636,
	637, 114, 638, 639, 640, 115, 116, 641, 117, 642,
	774, 643, 211, 118, 212, 644, 645, 646, 119, 120,
	213, 0, 121, 647, 122, 648, 649, 342, 650, 123,
	214, 651, 215, 652, 124, 125, 216, 217, 653, 654,
	126, 655, 343, 127, 218, 219, 220, 656, 221, 657,
	344, 128, 345, 129, 130, 658, 659, 222, 346, 131,
	347, 660, 132, 661, 662, 133, 0, 134, 135, 136,
	137, 138, 348, 139, 140, 143, 141, 663, 142, 664,
	223, 144, 224, 145, 146, 665, 666, 667, 668, 669,
	147, 225, 349, 148, 350, 226, 149, 150, 670, 227,
	151, 228, 671, 152, 153, 154, 229, 155, 156, 672,
	158, 159, 157, 160, 673, 161, 351, 162, 163, 230,
	164, 0, 255, 165, 166, 674, 231, 167, 168, 675,
	169, 170, 352, 171, 232, 233, 172, 676, 173, 174,
	176, 234, 175, 235, 677, 177, 678, 178, 179, 679,
	236, 237, 238, 680, 681, 180, 239, 240, 682, 181,
	182, 183, 184, 683, 684, 185, 186, 187, 685, 686,
	188, 189, 190, 241, 242, 687, 191, 688, 689, 690,
	691, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1364, 94, 95, 613, 96, 614, 615, 616, 617,
	618, 619, 620, 621, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 622, 100, 202, 203, 101, 623, 624,
	204, 205, 206, 625, 207, 626, 340, 627, 102, 103,
	104, 0, 105, 628, 106, 629, 341, 107, 108, 630,
	631, 632, 633, 634, 635, 109, 110, 111, 112, 208,
	113, 209, 210, 636, 637, 114, 638, 639, 640, 115,
	116, 641, 117, 642, 0, 643, 211, 118, 212, 644,
	645, 646, 119, 120, 213, 0, 121, 647, 122, 648,
	649, 342, 650, 123, 214, 651, 215, 652, 124, 125,
	216, 217, 653, 654, 126, 655, 343, 127, 218, 219,
	220, 656, 221, 657, 344, 128, 345, 129, 130, 658,
	659, 222, 346, 131, 347, 660, 132, 661, 662, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 663, 142, 664, 223, 144, 224, 145, 146, 665,
	666, 667, 668, 669, 147, 225, 349, 148, 350, 226,
	149, 150, 670, 227, 151, 228, 671, 152, 153, 154,
	229, 155, 156, 672, 158, 159, 157, 160, 673, 161,
	351, 162, 163, 230, 164, 0, 255, 165, 166, 674,
	231, 167, 168, 675, 169, 170, 352, 171, 232, 233,
	172, 676, 173, 174, 176, 234, 175, 235, 677, 177,
	678, 178, 179, 679, 236, 237, 238, 680, 681, 180,
	239, 240, 682, 181, 182, 183, 184, 683, 684, 185,
	186, 187, 685, 686, 188, 189, 190, 241, 242, 687,
	191, 688, 689, 690, 691, 192, 193, 194, 195, 0,
	0, 608, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 94, 95, 613, 96, 614, 615, 616,
	617, 618, 619, 620, 621, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 622, 100, 202, 203, 101, 623,
	624, 204, 205, 206, 625, 207, 626, 340, 627, 102,
	103, 104, 0, 105, 628, 106, 629, 341, 107, 108,
	630, 631, 632, 633, 634, 635, 109, 110, 111, 112,
	208, 113, 209, 210, 636, 637, 114, 638, 639, 640,
	115, 116, 641, 117, 642, 0, 643, 211, 118, 212,
	644, 645, 646, 119, 120, 213, 0, 121, 647, 122,
	648, 649, 342, 650, 123, 214, 651, 215, 652, 124,
	125, 216, 217, 653, 654, 126, 655, 343, 127, 218,
	219, 220, 656, 221, 657, 344, 128, 345, 129, 130,
	658, 659, 222, 346, 131, 347, 660, 132, 661, 662,
	133, 0, 134, 135, 136, 137, 138, 348, 139, 140,
	143, 141, 663, 142, 664, 223, 144, 224, 145, 146,
	665, 666, 667, 668, 669, 147, 225, 349, 148, 350,
	226, 149, 150, 670, 227, 151, 228, 671, 152, 153,
	154, 229, 155, 156, 672, 158, 159, 157, 160, 673,
	161, 351, 162, 163, 230, 164, 0, 255, 165, 166,
	674, 231, 167, 168, 675, 169, 170, 352, 171, 232,
	233, 172, 676, 173, 174, 176, 234, 175, 235, 677,
	177, 678, 178, 179, 679, 236, 237, 238, 680, 681,
	180, 239, 240, 682, 181, 182, 183, 184, 683, 684,
	185, 186, 187, 685, 686, 188, 189, 190, 241, 242,
	687, 191, 688, 689, 690, 691, 192, 193, 194, 195,
	457, 446, 447, 444, 445, 433, 0, 0, 0, 0,
	0, 0, 94, 95, 1035, 96, 0, 0, 0, 0,
	439, 0, 0, 0, 97, 98, 196, 486, 198, 487,
	99, 488, 489, 0, 100, 202, 203, 101, 454, 472,
	490, 491, 206, 0, 482, 0, 465, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 341, 107, 108, 0,
	466, 468, 0, 467, 469, 109, 110, 111, 112, 492,
	113, 493, 494, 0, 0, 114, 0, 1036, 0, 485,
	116, 0, 117, 0, 0, 0, 438, 118, 473, 452,
	0, 0, 119, 120, 495, 0, 121, 0, 122, 0,
	0, 342, 0, 123, 483, 0, 215, 0, 124, 125,
	479, 481, 0, 0, 126, 0, 343, 127, 496, 497,
	498, 0, 464, 0, 344, 128, 345, 129, 130, 0,
	0, 484, 346, 131, 347, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 428, 142, 453, 480, 144, 499, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 349, 148, 350, 474,
	149, 150, 0, 475, 151, 228, 0, 152, 153, 154,
	500, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	351, 162, 163, 442, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 470, 169, 170, 352, 171, 501, 233,
	172, 0, 173, 174, 176, 502, 175, 476, 0, 177,
	0, 178, 179, 0, 236, 503, 504, 0, 0, 180,
	477, 478, 451, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 471, 0, 188, 189, 190, 241, 505, 1034,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 429,
	0, 0, 457, 446, 447, 444, 445, 433, 0, 0,
	425, 426, 1037, 0, 94, 95, 427, 96, 0, 434,
	1032, 0, 439, 0, 0, 0, 97, 98, 196, 486,
	198, 487, 99, 488, 489, 0, 100, 202, 203, 101,
	454, 472, 490, 491, 206, 0, 482, 0, 465, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 466, 468, 0, 467, 469, 109, 110, 111,
	112, 492, 113, 493, 494, 526, 0, 114, 0, 0,
	0, 485, 116, 0, 117, 0, 0, 0, 438, 118,
	473, 452, 0, 0, 119, 120, 495, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 483, 0, 215, 0,
	124, 125, 479, 481, 0, 0, 126, 0, 343, 127,
	496, 497, 498, 0, 464, 0, 344, 128, 345, 129,
	130, 0, 0, 484, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 428, 142, 453, 480, 144, 499, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 474, 149, 150, 0, 475, 151, 228, 0, 152,
	153, 154, 500, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 442, 164, 0, 255, 165,
	166, 50, 231, 167, 168, 470, 169, 170, 352, 171,
	501, 233, 172, 0, 173, 174, 176, 502, 175, 476,
	0, 177, 52, 178, 179, 0, 236, 503, 504, 0,
	0, 180, 477, 478, 451, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 471, 0, 188, 189, 190, 339,
	505, 0, 191, 0, 0, 0, 48, 192, 193, 194,
	195, 429, 49, 0, 457, 446, 447, 444, 445, 433,
	0, 0, 425, 426, 0, 0, 94, 95, 427, 96,
	0, 434, 0, 0, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 50, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 52, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 339, 505, 0, 191, 0, 0, 0, 48, 192,
	193, 194, 195, 429, 49, 0, 457, 446, 447, 444,
	445, 433, 0, 0, 425, 426, 0, 0, 94, 95,
	427, 96, 0, 434, 0, 0, 439, 0, 0, 0,
	97, 98, 196, 486, 198, 487, 99, 488, 489, 1080,
	100, 202, 203, 101, 454, 472, 490, 491, 206, 0,
	482, 0, 465, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 341, 107, 108, 0, 466, 468, 0, 467,
	469, 109, 110, 111, 112, 492, 113, 493, 494, 0,
	0, 114, 0, 0, 0, 485, 116, 0, 117, 0,
	0, 0, 438, 118, 473, 452, 0, 0, 119, 120,
	495, 0, 121, 0, 122, 0, 1085, 342, 0, 123,
	483, 0, 215, 0, 124, 125, 479, 481, 0, 0,
	126, 0, 343, 127, 496, 497, 498, 0, 464, 0,
	344, 128, 345, 129, 130, 0, 1081, 484, 346, 131,
	347, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 348, 139, 140, 143, 141, 428, 142, 453,
	480, 144, 499, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 349, 148, 350, 474, 149, 150, 0, 475,
	151, 228, 0, 152, 153, 154, 500, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 351, 162, 163, 442,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 470,
	169, 170, 352, 171, 501, 233, 172, 0, 173, 174,
	176, 502, 175, 476, 0, 177, 0, 178, 179, 0,
	236, 503, 504, 0, 1082, 180, 477, 478, 451, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 471, 0,
	188, 189, 190, 241, 505, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 429, 457, 446, 447, 444,
	445, 433, 0, 0, 0, 0, 425, 426, 94, 95,
	0, 96, 427, 0, 0, 434, 439, 0, 0, 0,
	97, 98, 196, 486, 198, 487, 99, 488, 489, 0,
	100, 202, 203, 101, 454, 472, 490, 491, 206, 0,
	482, 0, 465, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 341, 107, 108, 0, 466, 468, 0, 467,
	469, 109, 110, 111, 112, 492, 113, 493, 494, 0,
	0, 114, 0, 0, 0, 485, 116, 0, 117, 0,
	0, 0, 438, 118, 473, 452, 0, 0, 119, 120,
	495, 0, 121, 0, 122, 0, 0, 342, 0, 123,
	483, 0, 215, 0, 124, 125, 479, 481, 0, 0,
	126, 0, 343, 127, 496, 497, 498, 0, 464, 0,
	344, 128, 345, 129, 130, 0, 0, 484, 346, 131,
	347, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 348, 139, 140, 143, 141, 428, 142, 453,
	480, 144, 499, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 349, 148, 350, 474, 149, 150, 0, 475,
	151, 228, 0, 152, 153, 154, 500, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 351, 162, 163, 442,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 470,
	169, 170, 352, 171, 501, 233, 172, 0, 173, 174,
	176, 502, 175, 476, 0, 177, 0, 178, 179, 0,
	236, 503, 504, 0, 0, 180, 477, 478, 451, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 471, 0,
	188, 189, 190, 241, 505, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 429, 0, 0, 457, 446,
	447, 444, 445, 433, 0, 0, 425, 426, 0, 0,
	94, 95, 427, 96, 0, 434, 1441, 0, 439, 0,
	0, 0, 97, 98, 196, 486, 198, 487, 99, 488,
	489, 0, 100, 202, 203, 101, 454, 472, 490, 491,
	206, 0, 482, 0, 465, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 341, 107, 108, 0, 466, 468,
	0, 467, 469, 109, 110, 111, 112, 492, 113, 493,
	494, 0, 0, 114, 0, 0, 0, 485, 116, 0,
	117, 0, 0, 0, 438, 118, 473, 452, 0, 0,
	119, 120, 495, 0, 121, 0, 122, 0, 0, 342,
	0, 123, 483, 0, 215, 0, 124, 125, 479, 481,
	0, 0, 126, 0, 343, 127, 496, 497, 498, 0,
	464, 0, 344, 128, 345, 129, 130, 0, 0, 484,
	346, 131, 347, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 348, 139, 140, 143, 141, 428,
	142, 453, 480, 144, 499, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 349, 148, 350, 474, 149, 150,
	0, 475, 151, 228, 0, 152, 153, 154, 500, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 351, 162,
	163, 442, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 470, 169, 170, 352, 171, 501, 233, 172, 0,
	173, 174, 176, 502, 175, 476, 0, 177, 0, 178,
	179, 0, 236, 503, 504, 0, 0, 180, 477, 478,
	451, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	471, 0, 188, 189, 190, 241, 505, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 429, 0, 0,
	457, 446, 447, 444, 445, 433, 0, 0, 425, 426,
	0, 0, 94, 95, 427, 96, 0, 434, 1384, 0,
	439, 0, 0, 0, 97, 98, 196, 486, 198, 487,
	99, 488, 489, 0, 100, 202, 203, 101, 454, 472,
	490, 491, 206, 0, 482, 0, 465, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 341, 107, 108, 0,
	466, 468, 0, 467, 469, 109, 110, 111, 112, 492,
	113, 493, 494, 0, 0, 114, 0, 0, 0, 485,
	116, 0, 117, 0, 0, 0, 438, 118, 473, 452,
	0, 0, 119, 120, 495, 0, 121, 0, 122, 0,
	0, 342, 0, 123, 483, 0, 215, 0, 124, 125,
	479, 481, 0, 0, 126, 0, 343, 127, 496, 497,
	498, 0, 464, 0, 344, 128, 345, 129, 130, 0,
	0, 484, 346, 131, 347, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 428, 142, 453, 480, 144, 499, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 349, 148, 350, 474,
	149, 150, 0, 475, 151, 228, 0, 152, 153, 154,
	500, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	351, 162, 163, 442, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 470, 169, 170, 352, 171, 501, 233,
	172, 0, 173, 174, 176, 502, 175, 476, 0, 177,
	0, 178, 179, 0, 236, 503, 504, 0, 0, 180,
	477, 478, 451, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 471, 0, 188, 189, 190, 241, 505, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 429,
	0, 0, 457, 446, 447, 444, 445, 433, 0, 0,
	425, 426, 0, 0, 94, 95, 427, 96, 0, 434,
	1031, 0, 439, 0, 0, 0, 97, 98, 196, 486,
	198, 487, 99, 488, 489, 0, 100, 202, 203, 101,
	454, 472, 490, 491, 206, 0, 482, 0, 465, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 466, 468, 0, 467, 469, 109, 110, 111,
	112, 492, 113, 493, 494, 0, 0, 114, 0, 0,
	0, 485, 116, 0, 117, 0, 0, 0, 438, 118,
	473, 452, 0, 0, 119, 120, 495, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 483, 0, 215, 0,
	124, 125, 479, 481, 0, 0, 126, 0, 343, 127,
	496, 497, 498, 0, 464, 0, 344, 128, 345, 129,
	130, 0, 0, 484, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 428, 142, 453, 480, 144, 499, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 474, 149, 150, 0, 475, 151, 228, 0, 152,
	153, 154, 500, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 442, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 470, 169, 170, 352, 171,
	501, 233, 172, 0, 173, 174, 176, 502, 175, 476,
	0, 177, 0, 178, 179, 0, 236, 503, 504, 0,
	0, 180, 477, 478, 451, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 471, 0, 188, 189, 190, 241,
	505, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 429, 457, 446, 447, 444, 445, 433, 0, 0,
	0, 0, 425, 426, 94, 95, 0, 96, 427, 780,
	1028, 434, 439, 0, 0, 0, 97, 98, 196, 486,
	198, 487, 99, 488, 489, 0, 100, 202, 203, 101,
	454, 472, 490, 491, 206, 0, 482, 0, 465, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 466, 468, 0, 467, 469, 109, 110, 111,
	112, 492, 113, 493, 494, 0, 0, 114, 0, 0,
	0, 485, 116, 0, 117, 0, 0, 0, 438, 118,
	473, 452, 0, 0, 119, 120, 495, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 483, 0, 215, 0,
	124, 125, 479, 481, 0, 0, 126, 0, 343, 127,
	496, 497, 498, 0, 464, 0, 344, 128, 345, 129,
	130, 0, 0, 484, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 428, 142, 453, 480, 144, 499, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 474, 149, 150, 0, 475, 151, 228, 0, 152,
	153, 154, 500, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 442, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 470, 169, 170, 352, 171,
	501, 233, 172, 0, 173, 174, 176, 502, 175, 476,
	0, 177, 0, 178, 179, 0, 236, 503, 504, 0,
	0, 180, 477, 478, 451, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 471, 0, 188, 189, 190, 241,
	505, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 429, 0, 0, 457, 446, 447, 444, 445, 433,
	0, 0, 425, 426, 423, 0, 94, 95, 427, 96,
	0, 434, 0, 0, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 1389, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 526, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 1085, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 720, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 1728, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 1727,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	1726, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 1728, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 1727,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 429, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 439, 0, 0, 0, 97, 98,
	196, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 1075, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 457, 446, 447, 444, 445, 433,
	0, 0, 0, 0, 1071, 1072, 94, 95, 0, 96,
	1073, 0, 0, 1074, 439, 0, 0, 0, 97, 98,
	0, 486, 198, 487, 99, 488, 489, 0, 100, 202,
	203, 101, 454, 472, 490, 491, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 1728, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 492, 113, 493, 494, 0, 0, 114,
	0, 0, 0, 485, 116, 0, 117, 0, 0, 0,
	438, 118, 473, 452, 0, 0, 119, 120, 495, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 496, 497, 498, 0, 464, 0, 0, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 428, 142, 453, 480, 144,
	499, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 500, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 442, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	0, 171, 501, 233, 172, 0, 173, 174, 176, 502,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 503,
	504, 0, 0, 180, 477, 478, 451, 181, 182, 1727,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 505, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 425, 426, 94, 95, 0, 96,
	427, 0, 0, 434, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 472, 204, 205, 206, 0, 482, 0,
	465, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 466, 468, 0, 467, 469, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 473, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 483, 0,
	215, 0, 124, 125, 479, 481, 0, 0, 126, 0,
	343, 127, 218, 219, 220, 0, 221, 0, 344, 128,
	345, 129, 130, 0, 0, 484, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 0, 480, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 474, 149, 150, 0, 475, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 470, 169, 170,
	352, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 476, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 477, 478, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 471, 0, 188, 189,
	190, 241, 242, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 1501, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 340,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 341,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 342, 0, 123, 214, 0, 215,
	0, 124, 125, 216, 217, 0, 0, 126, 0, 343,
	127, 218, 219, 220, 0, 221, 0, 344, 128, 345,
	129, 130, 0, 0, 222, 346, 131, 347, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 348,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 349,
	148, 350, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 351, 162, 163, 230, 164, 0, 255,
	165, 166, 50, 231, 167, 168, 0, 169, 170, 352,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 52, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	339, 242, 0, 191, 0, 0, 0, 48, 192, 193,
	194, 195, 0, 49, 335, 592, 0, 593, 588, 583,
	0, 0, 0, 0, 0, 0, 94, 95, 0, 96,
	0, 0, 47, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	340, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 596, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 585, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 214, 0,
	215, 0, 124, 125, 216, 217, 0, 0, 126, 0,
	343, 127, 218, 219, 220, 0, 221, 0, 344, 128,
	345, 129, 130, 0, 0, 222, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 586, 0, 0, 0, 147, 225,
	349, 148, 350, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	352, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 584, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 335, 592, 0, 593, 588, 583,
	0, 0, 0, 0, 594, 589, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	340, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 579, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 585, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 214, 0,
	215, 0, 124, 125, 216, 217, 0, 0, 126, 0,
	343, 127, 218, 219, 220, 0, 221, 0, 344, 128,
	345, 129, 130, 0, 0, 222, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 586, 0, 0, 0, 147, 225,
	349, 148, 350, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	352, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 584, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 335, 592, 0, 593, 588, 583,
	0, 0, 0, 0, 594, 589, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	340, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 585, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 214, 0,
	215, 0, 124, 125, 216, 217, 0, 0, 126, 0,
	343, 127, 218, 219, 220, 0, 221, 0, 344, 128,
	345, 129, 130, 0, 0, 222, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 586, 0, 0, 0, 147, 225,
	349, 148, 350, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	352, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 584, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 594, 589, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 216, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 308, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 50, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 52, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	339, 242, 0, 191, 0, 0, 0, 48, 192, 193,
	194, 195, 91, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 938, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 255, 165,
	166, 50, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 52, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 339,
	242, 0, 191, 0, 0, 0, 48, 192, 193, 194,
	195, 91, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 47, 1190, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 415, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 308, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 938,
	0, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 216,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 868, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 216, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 1407, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 216, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 138, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 0, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 236, 237, 238, 0, 0, 180, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 516, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 562, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 216, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 561, 178, 179, 0,
	236, 237, 238, 0, 0, 180, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 91, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 565, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 216, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	138, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 236,
	237, 238, 0, 0, 180, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 335, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 565, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	340, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 214, 0,
	215, 0, 124, 125, 216, 217, 0, 0, 126, 0,
	343, 127, 218, 219, 220, 0, 221, 0, 344, 128,
	345, 129, 130, 0, 0, 222, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	352, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 841, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 839, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 915, 0, 119, 120, 213, 0, 121,
	0, 122, 844, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 216, 217, 0, 913, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 843,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 914, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 91, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 841, 207, 0, 0, 836,
	102, 103, 104, 0, 105, 839, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 844, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 835, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 843, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	842, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 1190, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 308, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 91,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 558,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	308, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 91, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 314, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 308,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 91, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 216, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 138, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 0, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 236, 237, 238, 0, 0, 180, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 91, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 111, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 1121, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 0, 178, 179, 0,
	236, 237, 238, 0, 0, 180, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 91, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 1119, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	138, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 236,
	237, 238, 0, 0, 180, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 91, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 214, 0,
	215, 0, 124, 125, 1110, 217, 0, 0, 126, 0,
	0, 127, 218, 219, 220, 0, 221, 0, 0, 128,
	0, 129, 130, 0, 0, 222, 0, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	0, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	0, 148, 0, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	0, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 710, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 91, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 89, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 545, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 0, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	400, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 91,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 397,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 91, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	359, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 216, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 252, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 251, 237, 238, 0, 0, 247, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 91, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 216, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 252, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 0, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 251, 237, 238, 0, 0, 247, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 91, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 111, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 330, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 0, 178, 179, 0,
	236, 237, 238, 0, 0, 180, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 91, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 327, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	138, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 236,
	237, 238, 0, 0, 180, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 91, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 214, 0,
	215, 0, 124, 125, 325, 217, 0, 0, 126, 0,
	0, 127, 218, 219, 220, 0, 221, 0, 0, 128,
	0, 129, 130, 0, 0, 222, 0, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	0, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	0, 148, 0, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	0, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 317, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 91, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 297, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 244, 0, 0,
	133, 0, 134, 135, 136, 137, 252, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 246, 164, 0, 255, 165, 166,
	0, 231, 167, 245, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 251, 237, 238, 0, 0,
	247, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 0, 0, 227, 151, 228, 0, 152, 0, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 0, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 736,
	191, 755, 756, 757, 0, 192, 193, 194, 195, 0,
	0, 758, 0, 0, 0, 0, 0, 738, 0, 764,
	0, 0, 736, 0, 755, 756, 757, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 0, 0, 737, 0,
	738, 0, 764, 0, 752, 736, 0, 755, 756, 757,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 737, 0, 738, 0, 764, 0, 752, 0, 736,
	0, 755, 756, 757, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 737, 0, 0, 738, 743, 764,
	752, 0, 736, 0, 755, 756, 757, 0, 0, 0,
	0, 0, 0, 0, 758, 765, 0, 0, 737, 0,
	738, 743, 764, 0, 752, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 765, 0,
	0, 737, 0, 753, 743, 0, 0, 752, 0, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 765, 0, 0, 0, 759, 753, 0, 743, 0,
	0, 0, 0, 763, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 765, 0, 0, 759, 753,
	0, 743, 0, 0, 0, 0, 0, 763, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 765, 762,
	0, 759, 0, 753, 0, 0, 0, 0, 0, 0,
	763, 754, 0, 0, 0, 0, 0, 0, 0, 0,
	760, 0, 762, 0, 0, 759, 753, 0, 0, 0,
	0, 0, 0, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 759, 0,
	0, 0, 761, 0, 0, 749, 750, 751, 754, 748,
	745, 746, 747, 739, 740, 741, 742, 744, 0, 762,
	0, 0, 0, 1681, 0, 761, 0, 0, 749, 750,
	751, 754, 748, 745, 746, 747, 739, 740, 741, 742,
	744, 0, 762, 0, 0, 0, 1662, 0, 761, 0,
	0, 749, 750, 751, 0, 748, 745, 746, 747, 739,
	740, 741, 742, 744, 0, 0, 0, 0, 0, 1641,
	0, 0, 761, 0, 0, 749, 750, 751, 0, 748,
	745, 746, 747, 739, 740, 741, 742, 744, 0, 0,
	0, 0, 0, 1636, 0, 761, 0, 0, 749, 750,
	751, 0, 748, 745, 746, 747, 739, 740, 741, 742,
	744, 736, 0, 755, 756, 757, 1632, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 0, 0, 0, 738,
	0, 764, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	737, 0, 738, 0, 764, 0, 752, 736, 0, 755,
	756, 757, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 737, 0, 738, 0, 764, 0, 752,
	0, 736, 0, 755, 756, 757, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 737, 0, 0, 738,
	743, 764, 752, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 765, 0, 0,
	737, 0, 738, 743, 764, 0, 752, 0, 0, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	765, 0, 0, 737, 0, 753, 743, 0, 0, 752,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 765, 0, 0, 0, 759, 753, 0,
	743, 0, 0, 0, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 760, 0, 765, 0, 0,
	759, 753, 0, 743, 0, 0, 0, 0, 0, 763,
	754, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	765, 762, 0, 759, 0, 753, 0, 0, 0, 0,
	0, 0, 763, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 762, 0, 0, 759, 753, 0,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	759, 0, 0, 0, 761, 0, 0, 749, 750, 751,
	754, 748, 745, 746, 747, 739, 740, 741, 742, 744,
	0, 762, 0, 0, 0, 1568, 0, 761, 0, 0,
	749, 750, 751, 754, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 762, 0, 0, 0, 1567, 0,
	761, 0, 0, 749, 750, 751, 0, 748, 745, 746,
	747, 739, 740, 741, 742, 744, 0, 0, 0, 0,
	0, 1473, 0, 0, 761, 0, 0, 749, 750, 751,
	0, 748, 745, 746, 747, 739, 740, 741, 742, 744,
	0, 0, 0, 0, 0, 1410, 0, 761, 0, 0,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 736, 0, 755, 756, 757, 1386, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 0, 0,
	0, 738, 0, 764, 0, 0, 736, 0, 755, 756,
	757, 0, 0, 0, 0, 0, 0, 0, 758, 0,
	0, 0, 737, 0, 738, 0, 764, 0, 752, 736,
	0, 755, 756, 757, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 737, 0, 738, 0, 764,
	0, 752, 0, 736, 0, 755, 756, 757, 0, 0,
	0, 0, 0, 0, 0, 758, 0, 0, 737, 926,
	0, 738, 743, 764, 752, 0, 736, 0, 755, 756,
	757, 0, 0, 0, 0, 0, 0, 0, 758, 765,
	0, 0, 737, 0, 738, 743, 764, 0, 752, 0,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 765, 0, 0, 737, 0, 753, 743, 1746,
	0, 752, 0, 927, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 760, 765, 0, 0, 0, 759,
	753, 0, 743, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 765,
	0, 0, 759, 753, 0, 743, 0, 1284, 0, 0,
	1283, 763, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 760, 765, 762, 0, 759, 0, 753, 0, 0,
	0, 0, 0, 0, 763, 754, 0, 1745, 0, 0,
	0, 0, 0, 0, 760, 0, 762, 0, 0, 759,
	753, 0, 0, 0, 0, 0, 0, 0, 754, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	0, 0, 759, 0, 0, 0, 761, 0, 0, 749,
	750, 751, 754, 748, 745, 746, 747, 739, 740, 741,
	742, 744, 0, 762, 0, 0, 0, 1024, 0, 761,
	0, 0, 749, 750, 751, 754, 748, 745, 746, 747,
	739, 740, 741, 742, 744, 0, 762, 0, 1457, 0,
	0, 0, 761, 0, 0, 749, 750, 751, 0, 748,
	745, 746, 747, 739, 740, 741, 742, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 761, 0, 0, 749,
	750, 751, 0, 748, 745, 746, 747, 739, 740, 741,
	742, 744, 0, 0, 0, 0, 0, 0, 0, 761,
	0, 0, 749, 750, 751, 0, 748, 745, 746, 747,
	739, 740, 741, 742, 744, 767, 0, 0, 0, 0,
	0, 736, 0, 755, 756, 757, 0, 0, 0, 0,
	0, 0, 0, 758, 0, 0, 766, 0, 0, 738,
	0, 764, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	737, 0, 738, 0, 764, 0, 752, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 0, 755, 756, 757,
	0, 0, 0, 737, 0, 0, 0, 758, 0, 752,
	0, 0, 0, 738, 0, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 765, 0, 0,
	0, 0, 0, 743, 736, 0, 755, 756, 757, 763,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 760,
	765, 0, 738, 0, 764, 753, 0, 0, 0, 0,
	0, 0, 763, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 760, 737, 0, 0, 0, 759, 753, 752,
	1253, 765, 1270, 1271, 1272, 0, 0, 0, 0, 0,
	0, 0, 1536, 763, 0, 0, 0, 0, 0, 0,
	759, 292, 0, 760, 0, 0, 0, 0, 0, 753,
	754, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 0, 743, 0, 1267, 0, 0, 1290, 0,
	0, 759, 0, 754, 0, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 754, 0, 0, 0, 753, 1258,
	0, 0, 0, 0, 761, 762, 0, 749, 750, 751,
	0, 748, 745, 746, 747, 739, 740, 741, 742, 744,
	759, 0, 1404, 0, 0, 0, 0, 761, 1273, 0,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 1268, 0, 0, 0, 0, 0,
	0, 0, 0, 754, 0, 0, 0, 0, 761, 0,
	0, 749, 750, 751, 762, 748, 745, 746, 747, 739,
	740, 741, 742, 744, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 1285,
	0, 0, 738, 0, 764, 0, 0, 0, 736, 1269,
	755, 756, 757, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 0, 737, 0, 0, 738, 761, 764, 752,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 0, 0, 0, 737, 0, 0,
	0, 0, 0, 752, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 1246,
	0, 0, 738, 743, 764, 0, 1264, 1265, 1266, 0,
	1263, 1260, 1261, 1262, 1254, 1255, 1256, 1257, 1259, 0,
	765, 0, 0, 737, 0, 0, 0, 743, 0, 752,
	0, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 765, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 760, 0, 0, 0,
	759, 0, 753, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	765, 0, 0, 0, 759, 0, 0, 0, 0, 0,
	0, 0, 763, 754, 1251, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 762, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 762, 0,
	759, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 0,
	749, 750, 751, 754, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 762, 0, 0, 0, 0, 0,
	0, 761, 0, 0, 749, 750, 751, 0, 748, 745,
	746, 747, 739, 740, 741, 742, 744, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 738, 0, 764, 0, 0, 761, 0, 0,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 737, 736, 0, 755, 756, 757, 752,
	0, 0, 0, 0, 0, 0, 758, 0, 0, 0,
	0, 0, 738, 0, 764, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 0, 755, 756, 757, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 752,
	0, 0, 738, 743, 764, 1253, 0, 1270, 1271, 1272,
	0, 0, 0, 0, 0, 0, 0, 1381, 0, 0,
	765, 0, 0, 737, 0, 0, 0, 0, 0, 752,
	0, 0, 763, 0, 0, 736, 0, 755, 756, 757,
	0, 0, 760, 743, 0, 0, 0, 0, 753, 0,
	1267, 0, 0, 738, 0, 764, 0, 0, 0, 0,
	765, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	759, 0, 763, 743, 737, 1253, 0, 1270, 1271, 1272,
	752, 0, 760, 0, 0, 0, 0, 1380, 753, 0,
	765, 0, 0, 0, 1258, 0, 0, 0, 0, 0,
	0, 0, 763, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 0, 762, 0, 0, 0, 753, 0,
	1267, 0, 0, 1273, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	0, 765, 0, 754, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 0, 0,
	0, 0, 0, 760, 1258, 0, 0, 761, 0, 753,
	749, 750, 751, 754, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 762, 0, 0, 0, 1253, 0,
	1270, 1271, 1272, 1273, 1269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 761, 0, 1268,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 754, 0, 0, 0, 0, 0,
	0, 0, 0, 1267, 0, 762, 0, 761, 0, 0,
	749, 750, 751, 0, 748, 745, 746, 747, 739, 740,
	741, 742, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 1265, 1266, 1269, 1263, 1260, 1261, 1262, 1254,
	1255, 1256, 1257, 1259, 0, 0, 1253, 1258, 1270, 1271,
	1272, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 749, 750, 751, 1274, 748, 745, 746, 747, 739,
	740, 741, 742, 744, 0, 0, 1273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1267, 1268, 0, 0, 0, 0, 0, 0, 0,
	0, 1264, 1265, 1266, 0, 1263, 1260, 1261, 1262, 1254,
	1255, 1256, 1257, 1259, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1273, 957, 952, 973, 946, 965,
	964, 0, 0, 948, 947, 0, 0, 0, 975, 974,
	1268, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 962,
	961, 0, 0, 0, 1264, 1265, 1266, 960, 1263, 1260,
	1261, 1262, 1254, 1255, 1256, 1257, 1259, 0, 0, 0,
	0, 0, 959, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 953, 954, 955, 0,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 1264, 1265, 1266, 0, 1263, 1260, 1261, 1262,
	1254, 1255, 1256, 1257, 1259, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 950, 0,
	0, 0, 0, 0, 0, 0, 956, 951, 0, 0,
	0, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	949, 0, 0, 971, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 976,
}
var sqlPact = [...]int{

	2364, -1000, 28, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 858, -1000, -1000, -1000, 642, 787, 348, 1062, 1062,
	15348, -1000, -1000, 18087, -1000, 2590, 423, 424, 423, 423,
	415, 15348, 508, 582, 127, -1000, 667, 24, 17838, 14103,
	1224, 23, 13356, 281, 2364, 13854, 14103, 17589, 1048, 969,
	963, 13356, 17340, 17091, 16842, -1000, 9019, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 506, 830, -1000, 17, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 825, -1000, 14103,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16593, 16344, 292, 742, -1000, -1000,
	484, 354, 1227, -1000, 32, -1000, -1000, -1000, 1047, -1000,
	810, 1041, 1040, 1039, 1035, 353, 806, -1000, 488, 742,
	-1000, 742, -1000, -1000, -1000, 480, 15348, -1000, 13356, -1000,
	16095, 994, 15846, -1000, 667, -1000, -1000, -1000, 841, 1221,
	1221, 1221, 1239, 137, 134, 127, 5, 14103, -1000, 283,
	5, 6158, 6158, -1000, -1000, 281, -1000, 311, 11603, 34,
	-1000, 6680, -1000, 736, 1130, 637, 634, 1129, -89, 13356,
	14103, 14103, 537, 15597, -1000, 1122, 114, 1121, -1000, 108,
	1120, -1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13605, 11862, 889, 11862, -1000, -1000, 1272,
	-1000, 7980, -1000, 16, 15, 934, 993, 9540, 9280, 1178,
	695, -1000, -1000, -1000, 31, 3807, 14103, 1064, 11862, 14103,
	14103, 14103, -1000, 14103, -1000, 932, -1000, 14103, -1000, 14,
	10, -1000, 15348, -1000, 117, -1000, 278, 896, 15099, 1138,
	895, -1000, 841, -1000, 839, 923, 7200, 7980, 127, -1000,
	-1000, 127, 127, 7980, -1000, -1000, 14103, 5, 1271, 14103,
	109, -1000, 19671, -1000, -1000, 7980, 7980, 7980, 7980, 7980,
	738, -1000, -1000, -1000, 4590, -1000, -1000, 34, 276, 110,
	-1000, -1000, 273, 34, -1000, -1000, -1000, -1000, 262, 1405,
	414, -1000, -1000, -1000, 7980, 344, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1063, 258, 257, -1000, -1000,
	-1000, -1000, 250, 246, 244, 243, 242, 241, 238, 236,
	227, 221, 220, 219, 218, 697, -1000, 371, -1000, -1000,
	371, 371, -1000, 194, 194, 197, -1000, -1000, -1000, 194,
	-1000, -1000, -1000, 341, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 217, 109, -1000, -1000, -1000, 14103, 34, -1000, -1000,
	-1000, 7980, 3546, -14, -1000, 20294, -1000, -36, 788, -1000,
	12858, 1203, 1193, 1192, 13356, 478, 467, 14103, 14103, 366,
	88, 1262, 88, 11085, -1000, 14103, 14103, -1000, 14103, -1000,
	-1000, 14103, -1000, 14103, 14103, 247, 12360, 633, 1115, 463,
	-11, 12111, 14103, -1000, 11, -1000, -1000, 1034, 410, -16,
	20294, 663, 966, 561, -1000, -1000, -1000, -1000, 2, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1340,
	-1000, -1000, -1000, -1000, 1368, 2, -1000, -1000, -1000, -1000,
	-1000, 1383, -1000, -1000, -1000, -1000, 3807, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14103, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 663, 966, -1000, -1000, 13356, 12609, 1114, 797,
	888, -1000, -1000, 329, 1102, -1000, -1000, -1000, -1000, 20294,
	-1000, 20294, 567, 984, -1000, 984, -7, -1000, 19373, -1000,
	216, -22, -1000, 366, 6158, 10826, 20754, 14103, 501, 7980,
	7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980,
	7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980, 7980,
	7980, 917, 460, 973, 741, 187, 3807, -1000, 1321, 1321,
	1321, 20364, 20364, 175, 9, 19303, -9, 34, -1000, -1000,
	5898, 5636, 34, 4066, -1000, 593, 1365, 369, 20294, 1071,
	1008, 211, 130, 125, 7980, 798, 7980, 8240, 7980, 7980,
	4852, 7980, 7980, 7980, 7980, 7980, 7980, -1000, 209, -1000,
	-1000, -1000, -1000, 1356, -1000, -1000, 1353, -1000, 500, 486,
	1349, 366, 124, -1000, 2235, -1000, -1000, 6680, -1000, 633,
	14103, 14103, 14103, -1000, -1000, 884, 14850, -1000, 20754, 14103,
	-1000, 208, 198, 948, 945, 14103, 14103, 14601, 14352, 14103,
	621, 14103, 14103, 627, -1000, 594, 7980, 615, -1000, 10308,
	375, 14103, 599, 107, -1000, -1000, -1000, 328, 14103, -1000,
	-1000, -1000, 114, -1000, 108, -1000, -1000, 13356, 14103, 12111,
	-11, -13, -1000, -1000, 14103, 966, -1000, 7980, -1000, -1000,
	-1000, 588, -1000, 658, -1000, 9800, -1000, -1000, -1000, 593,
	-1000, -44, -1000, -1000, -1000, -1000, 119, -15, -1000, -1000,
	-1000, -1000, -1000, 14103, 275, 14103, 14103, 14103, 1096, 1382,
	14103, -1000, -1000, -1000, 7980, -1000, -1000, -1000, 24, 14103,
	-1000, 1003, -1000, -35, 1709, -90, 13107, -1000, 10049, -1000,
	1275, -1000, -1000, -1000, -1000, 83, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 197,
	697, 194, 194, 194, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 341, -1000, 371, 371, 371, -1000, -1000, -1000, 352,
	522, 522, 1290, 1290, 1290, 1290, 590, 590, 617, 1735,
	212, 212, 212, 1721, 879, 879, 212, 212, 212, 20364,
	20334, 682, 7980, 457, 719, 187, 7980, -1000, 666, -1000,
	-1000, -1000, 1028, 186, 8240, 8240, -1000, -1000, -1000, 4590,
	-1000, -1000, 184, 7980, -1000, 7980, -18, -24, -1000, -1000,
	-27, -1000, -1000, 8, 7980, 7980, 7980, 118, -1000, 455,
	-1000, 454, 453, 452, -1000, 183, 116, 550, -1000, 7980,
	754, 182, 181, 7980, -1000, -1000, 20064, 113, 1025, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 106, 20018, 105, 20568,
	-1000, 8240, 8240, 8240, 4590, 174, 103, 19396, -116, 19994,
	6940, 6940, 6940, 102, 19784, 7980, -116, 2918, 2734, 2638,
	-28, -34, -40, 1346, -46, 99, 349, 340, 91, 1003,
	-1000, -1000, 7980, -1000, -1000, -1000, 434, 433, 1092, -1000,
	882, -1000, 893, 7980, 14103, 173, 172, 676, -1000, 1087,
	771, 1084, 771, -1000, -36, 691, -1000, -1000, 432, -1000,
	6158, 20294, -1000, 596, 1196, -51, -1000, -1000, -1000, 6158,
	366, 11085, 6680, -52, -1000, -1000, 633, -44, -1000, -44,
	-1000, 20294, -1000, -1000, -1000, -1000, -1000, 14103, -1000, 12609,
	171, 14103, 170, 168, 166, 14103, -1000, 1138, -1000, 89,
	-1000, -1000, -1000, -1000, -1000, 999, 1233, 10826, 955, 951,
	10826, 1171, 756, 756, 756, -1000, 13107, 3272, -1000, -1000,
	14103, 165, 10567, 81, 1709, 305, 301, -1000, 1344, 7980,
	682, 7980, 8240, 8240, -1000, 682, -1000, -1000, -1000, -1000,
	1022, 163, 7980, 20754, 20455, 20385, -53, 5374, -48, 19034,
	-1000, -1000, 110, -1000, 80, 6420, -1000, 19694, 26, 26,
	-1000, 911, 744, 628, 556, 1336, 1381, 1134, -1000, 7980,
	19725, -1000, 11344, 367, 745, 19011, 20754, -1000, 7980, -1000,
	1021, 7980, -1000, 20754, 8240, 8240, 8240, 8240, 8240, 8240,
	8240, 8240, 8240, 8240, 8240, 8240, 8240, 8240, 8240, 8240,
	8240, 8240, 8240, 928, 8240, 1315, 1315, 1315, -50, 5112,
	-1000, 1058, 1021, 7980, 7980, 20754, 79, 78, 77, -1000,
	7980, -116, 7980, 7980, 7980, -1000, -1000, -1000, 75, -1000,
	1333, -1000, -1000, -1000, -1000, 999, 19326, 14103, 14103, 14103,
	1083, 1676, -1000, 18987, -59, 14103, 14103, -1000, 961, 976,
	396, 14103, -1000, 14103, -1000, 14103, 14103, 14103, 14103, -61,
	6158, 196, 24, 14103, -61, 594, -1000, -1000, 324, -1000,
	-1000, 8760, 162, 14103, 12609, 8760, 786, -1000, -1000, 362,
	7980, 7980, 1709, 10826, 10826, 1755, 935, 10826, -1000, -1000,
	-1000, -1000, 333, -1000, 950, 158, 14103, 13107, 437, 1325,
	74, 1270, 682, 19830, 2965, 7980, 20754, 20415, -63, -1000,
	7980, 7980, -1000, -64, -1000, 7980, -1000, -1000, 1378, 7980,
	65, 63, 61, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	59, -1000, -1000, 20294, 7980, -1000, -1000, 18336, 7980, 56,
	-1000, 53, 20294, 1058, 20294, -1000, 623, 623, 1315, 1315,
	1315, 1315, 1857, 1857, 739, 1576, 1667, 1667, 1667, 924,
	449, 449, 1667, 1667, 1667, 1018, 946, 157, 20656, 7980,
	-69, -1000, -1000, -1000, 20294, 20294, 52, -1000, -1000, -1000,
	-116, 2525, 18964, 18941, -1000, 51, 362, -1000, -1000, -1000,
	-1000, 14103, -1000, 14103, -1000, 14103, 878, -1000, -1000, 941,
	153, 8240, 14103, -1000, 677, -75, -80, 851, -1000, 849,
	7980, -1000, 20754, 771, 771, -1000, 430, 429, -1000, -61,
	1144, 14103, 1188, -1000, -1000, -1000, 151, -81, -1000, 237,
	1204, 7980, -1000, -1000, 150, 8760, -87, -1000, -1000, 49,
	-93, 14103, -1000, 14103, 20294, -116, -1000, 1755, -1000, 147,
	7980, 10826, -1000, -1000, 844, -136, -1000, 322, -1000, 14103,
	-95, -1000, -1000, 298, 297, -1000, 7980, 7980, 20415, -97,
	-1000, 20754, 682, 682, -1000, 18672, -1000, 19694, -1000, -1000,
	-1000, -1000, 20294, 680, -1000, 18649, -1000, -1000, -1000, 8240,
	1016, 146, 20754, 18625, -1000, -1000, 7980, -1000, -1000, -1000,
	-1000, -1000, 1302, -1000, -1000, -1000, 7980, 20656, 145, -1000,
	144, -1000, -1000, -1000, 649, -1000, -1000, 20294, 1219, -1000,
	-1000, 14103, 14103, 474, -99, 14103, -1000, -1000, 4328, 677,
	8760, 1205, 34, 14103, 1205, 18602, 4066, -101, -1000, 14103,
	-1000, 677, 142, -68, -1000, 1253, -1000, 14103, 20294, -1000,
	510, 950, -1000, 3807, -103, -1000, -1000, -1000, 682, 682,
	-1000, -1000, -1000, 45, 745, 1232, -1000, 2021, 8240, 20754,
	-105, -1000, 18579, -1000, 2944, 919, 14103, 14103, 14103, 381,
	14103, -1000, -1000, 535, -1000, 366, -1000, -1000, -1000, -1000,
	-1000, -1000, 1204, 8, 677, -1000, -1000, 8760, 14103, 141,
	-111, 485, -1000, -1000, -1000, -1000, 589, 7980, 2021, -117,
	-1000, -1000, -1000, 763, 846, 43, -118, 115, -1000, 7980,
	-1000, 11085, -1000, 1205, 41, -1000, -123, -1000, -1000, -1000,
	1375, 39, 7720, 7720, -116, -1000, -1000, 785, 778, 557,
	-1000, -1000, -1000, -1000, -1000, 919, 14103, 20294, -109, -1000,
	-1000, 677, -1000, -1000, -1000, -1000, 8500, 820, 583, 19349,
	-1000, -1000, 1148, -1000, 388, 1065, 1065, 763, -124, -1000,
	-1000, 1292, -1000, -1000, -1000, -1000, -1000, -1000, 1299, -1000,
	-1000, 957, -1000, -1000, -1000, 7460, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1660, 1658, 1257, 125, 122, 1655, 1645, 1644, 102,
	115, 112, 120, 1643, 99, 1635, 1630, 1629, 1620, 52,
	1617, 1613, 1611, 1607, 1603, 95, 43, 172, 1761, 156,
	1601, 1594, 1591, 10, 101, 68, 1590, 40, 60, 86,
	105, 720, 74, 1587, 1585, 135, 27, 17, 152, 96,
	141, 144, 128, 1583, 1579, 1578, 29, 1577, 1576, 1575,
	1574, 41, 33, 1571, 13, 1565, 54, 1564, 1563, 100,
	1562, 98, 111, 19, 124, 12, 1561, 45, 11, 72,
	1559, 32, 1558, 26, 75, 133, 1556, 48, 146, 38,
	25, 59, 1554, 1550, 1548, 1547, 89, 79, 55, 1545,
	1542, 77, 1539, 131, 129, 1538, 1537, 119, 1536, 1534,
	1531, 629, 1529, 1528, 589, 1527, 2, 36, 69, 7,
	109, 107, 73, 1520, 18, 1517, 1350, 174, 134, 1516,
	28, 39, 78, 35, 61, 46, 1515, 103, 1513, 1511,
	1505, 1504, 1500, 76, 1499, 70, 137, 44, 51, 82,
	21, 23, 117, 87, 106, 142, 108, 1497, 1495, 118,
	1494, 66, 1493, 1491, 497, 83, 1490, 1488, 1487, 496,
	442, 341, 249, 1484, 1483, 255, 254, 1481, 1480, 85,
	1477, 1476, 138, 1474, 132, 30, 1470, 113, 1467, 97,
	1465, 0, 47, 37, 1461, 116, 71, 1460, 1455, 1454,
	1452, 24, 1, 8, 5, 6, 4, 20, 15, 1451,
	1450, 126, 93, 1448, 145, 1426, 1425, 22, 1424, 1422,
	16, 1420, 14, 1419, 9, 3, 1418, 136, 1417, 92,
	1416, 1293, 1414, 139, 1413, 1411, 1342, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 12, 12, 12, 160, 160, 159, 13,
	18, 227, 227, 227, 231, 231, 232, 232, 233, 233,
	233, 233, 233, 233, 233, 229, 229, 21, 21, 21,
	21, 21, 115, 111, 111, 113, 113, 113, 113, 40,
	110, 110, 110, 110, 112, 112, 112, 112, 184, 182,
	182, 189, 189, 189, 53, 53, 53, 53, 53, 54,
	54, 54, 181, 181, 181, 181, 190, 190, 190, 190,
	190, 190, 55, 55, 55, 188, 188, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 183, 183, 228, 228, 230, 230, 8, 8, 56,
	56, 57, 57, 118, 118, 118, 118, 117, 199, 199,
	200, 200, 200, 201, 201, 201, 201, 201, 201, 201,
	197, 197, 198, 195, 195, 196, 196, 196, 196, 234,
	234, 116, 116, 60, 60, 204, 204, 204, 204, 202,
	202, 202, 202, 202, 205, 203, 206, 206, 206, 206,
	206, 146, 146, 146, 24, 7, 7, 100, 100, 64,
	64, 150, 150, 150, 65, 65, 151, 47, 47, 33,
	33, 33, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 101, 101, 102, 102, 16, 20, 23, 23, 23,
	23, 23, 236, 236, 44, 44, 44, 44, 45, 45,
	114, 114, 114, 114, 114, 39, 6, 6, 38, 38,
	14, 14, 14, 14, 14, 50, 50, 107, 107, 107,
	109, 109, 108, 108, 108, 87, 87, 25, 78, 78,
	79, 79, 157, 80, 80, 19, 19, 28, 28, 26,
	26, 26, 26, 26, 26, 27, 27, 29, 29, 29,
	29, 29, 29, 29, 212, 212, 212, 214, 214, 211,
	15, 15, 15, 15, 213, 213, 235, 235, 88, 88,
	88, 59, 58, 58, 62, 62, 61, 63, 63, 149,
	85, 85, 85, 85, 103, 104, 104, 105, 105, 106,
	106, 84, 84, 133, 133, 30, 30, 69, 69, 70,
	70, 124, 124, 125, 125, 123, 123, 123, 152, 152,
	152, 152, 153, 153, 153, 153, 153, 153, 147, 147,
	147, 147, 148, 148, 158, 158, 91, 91, 91, 91,
	89, 89, 90, 90, 154, 154, 154, 154, 86, 86,
	155, 155, 155, 119, 119, 161, 161, 161, 68, 68,
	68, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 163, 163, 163, 163, 165, 165,
	165, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 166, 166, 173, 173, 174, 174,
	175, 176, 167, 167, 168, 168, 169, 170, 177, 177,
	177, 177, 179, 179, 171, 171, 171, 171, 171, 172,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 98, 98, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 207,
	207, 207, 207, 207, 207, 207, 209, 209, 210, 210,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 215, 215, 216, 216, 217,
	217, 218, 218, 220, 221, 221, 221, 222, 226, 226,
	219, 219, 223, 223, 223, 224, 224, 225, 225, 225,
	225, 225, 137, 137, 137, 138, 138, 139, 75, 75,
	135, 135, 134, 134, 134, 136, 136, 92, 178, 178,
	178, 178, 178, 178, 178, 93, 93, 99, 94, 94,
	95, 95, 95, 95, 95, 95, 130, 131, 96, 96,
	96, 132, 132, 140, 144, 144, 143, 142, 142, 141,
	141, 122, 122, 122, 122, 121, 120, 81, 81, 237,
	237, 145, 145, 82, 82, 83, 77, 77, 156, 156,
	156, 156, 71, 71, 52, 52, 72, 72, 48, 48,
	51, 49, 49, 49, 49, 66, 66, 67, 67, 46,
	46, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 180, 180, 180, 41, 41, 41, 42, 42,
	43, 43, 186, 186, 186, 187, 187, 187, 187, 185,
	185, 185, 185, 185, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 6,
	3, 1, 5, 2, 1, 1, 1, 3, 3, 2,
	3, 3, 3, 3, 1, 3, 3, 2, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 2, 4,
	2, 4, 4, 4, 4, 3, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 2, 0,
	3, 1, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 2, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 4, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -213, 84, 91, 106, 193,
	200, -26, -28, 208, -115, 209, 29, 217, 53, 87,
	195, 190, 237, 59, -212, -29, -27, 283, 258, 264,
	203, -30, 224, 251, 286, 224, 71, 117, 79, 121,
	245, 244, 71, 117, 224, -12, 283, -19, -5, -10,
	-4, -14, -25, -9, -11, 19, -231, 18, -232, -233,
	59, 84, 106, 203, 121, 79, 244, -231, -45, 200,
	-41, 4, -191, -193, 16, 17, 19, 28, 29, 34,
	38, 41, 52, 53, 54, 56, 58, 61, 62, 69,
	70, 71, 72, 74, 79, 83, 84, 86, 91, 96,
	97, 100, 102, 107, 112, 113, 118, 121, 129, 131,
	132, 137, 140, 143, 145, 146, 147, 148, 149, 151,
	152, 154, 156, 153, 159, 161, 162, 168, 171, 174,
	175, 178, 181, 182, 183, 185, 186, 190, 188, 189,
	191, 193, 195, 196, 198, 201, 202, 205, 206, 208,
	209, 211, 214, 216, 217, 220, 218, 223, 225, 226,
	233, 237, 238, 239, 240, 243, 244, 245, 248, 249,
	250, 254, 259, 260, 261, 262, 30, 31, 32, 33,
	35, 36, 39, 40, 44, 45, 46, 48, 73, 75,
	76, 90, 92, 98, 108, 110, 114, 115, 122, 123,
	124, 126, 135, 158, 160, 169, 173, 177, 179, 184,
	197, 204, 212, 213, 219, 221, 228, 229, 230, 234,
	235, 251, 252, -111, 140, 206, 197, 233, -112, -110,
	-184, 228, 149, -73, -41, 200, 4, 71, 52, 72,
	107, 117, 118, 132, 225, 228, 233, 18, 59, -236,
	233, 233, -236, -236, -44, 233, 231, -45, -235, 224,
	224, -100, 71, 242, -27, -29, -28, -61, -62, 241,
	125, 89, 167, -26, -28, -212, -214, 185, -211, -41,
	-214, -58, -59, 18, 81, 287, -154, -48, 165, -41,
	-83, 283, -3, -154, 114, -41, -51, 114, -48, 104,
	127, 127, -155, -154, -41, 114, -52, 114, -51, -74,
	114, -73, -160, -159, -187, 4, -191, -193, -192, 251,
	50, 60, 105, 120, 128, 130, 136, 138, 150, 170,
	172, 194, 210, 224, 164, 287, 164, -41, -111, 46,
	-111, 283, -113, -39, -40, 129, 181, 231, 268, 104,
	262, -55, 5, 77, -76, 285, 104, -228, 164, 104,
	104, 104, -183, 104, 262, 129, 181, 224, -114, -39,
	-40, -114, 231, -45, -86, -154, -73, 114, 117, -41,
	114, -61, -62, -85, -103, -104, 139, 163, -88, 18,
	81, -88, -88, 38, 284, 284, 287, -214, -67, 283,
	-77, -156, -126, 276, -128, 274, 275, 280, 155, 263,
	-137, -48, -129, 9, 283, -140, -209, -28, 90, 24,
	-138, -139, 197, -41, 7, 8, 5, 6, -46, -163,
	-172, 236, 93, 157, 42, -207, -208, 4, -191, -186,
	-164, -174, -168, -171, 126, 50, 64, 67, 65, 68,
	207, 246, 43, 92, 173, 177, 221, 234, 235, 114,
	158, 115, 48, 108, 135, 83, 31, 33, 35, 36,
	44, 45, 73, 75, 76, 98, 122, 123, 124, 160,
	184, 212, 219, 229, 230, 252, -192, -175, -176, -169,
	-170, -177, -77, -83, 276, -48, 283, -81, -122, -121,
	-120, 281, 285, -82, -145, -126, 77, -35, 188, -34,
	17, 19, 84, 249, 90, 188, 188, 90, 288, -155,
	-50, -48, -50, 208, -41, 25, 90, -37, 287, 41,
	191, 90, -37, 287, 90, 284, 287, -154, 114, -227,
	-72, 224, 71, -49, -41, 276, -233, -227, 25, -75,
	-126, 287, 287, 137, -54, 143, 154, 112, -182, 77,
	-189, -181, -146, 9, 236, 93, 164, -188, 8, 275,
	-180, -187, 5, 7, 274, -182, 77, 62, -190, 5,
	4, -172, -146, 77, 140, 126, 285, -185, 4, -191,
	-193, -192, -194, 18, 20, 21, 22, 23, 24, 25,
	26, 27, 37, 42, 43, 47, 49, 51, 57, 59,
	63, 64, 65, 66, 67, 68, 77, 78, 80, 81,
	82, 85, 87, 89, 93, 94, 95, 101, 103, 104,
	106, 109, 111, 116, 117, 119, 125, 127, 133, 134,
	139, 141, 142, 155, 157, 163, 164, 165, 166, 167,
	176, 180, 187, 192, 203, 207, 215, 222, 224, 227,
	231, 232, 236, 241, 242, 246, 247, 253, 255, 256,
	257, 258, -184, -230, 101, -227, -184, -184, -184, -184,
	137, -184, 287, 287, -45, -37, 287, 283, 155, -42,
	114, -41, -38, 86, 155, -85, -104, -103, -105, -126,
	18, -126, -128, -27, -27, -27, -63, -149, -126, -211,
	25, -66, -41, -69, 287, 104, 10, 49, 28, 274,
	275, 276, 277, 99, 278, 271, 272, 273, 270, 266,
	267, 268, 55, 144, 199, 12, 13, 14, 22, 166,
	138, 263, 210, 128, 30, 116, 25, 4, -126, -126,
	-126, -126, -126, 172, -28, -126, -75, -81, -28, -134,
	281, 283, -81, 283, 5, 5, 283, -141, -126, -215,
	259, 101, 283, 283, 283, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 179, -179, 254,
	-179, -179, -165, 283, -165, -166, 283, -165, 260, 264,
	283, -69, -48, -122, -126, -185, 276, 287, 284, 287,
	231, -101, 57, 51, -117, 114, 51, -195, -41, 57,
	-196, 47, 242, 180, 103, -101, 57, -101, 57, 57,
	-154, 231, 231, -51, -41, -119, 256, -107, -19, 283,
	77, 25, -107, -78, -79, -157, -80, -48, 283, -41,
	-41, -51, -52, -73, -74, -12, -159, 90, 231, 287,
	-72, -66, -121, -120, 104, 233, 284, 287, -40, -39,
	-53, 183, 214, 189, 205, 287, 8, 7, 7, 5,
	-185, -229, -41, -40, -39, -154, -56, -57, -118, -117,
	-197, -198, -195, 117, 242, 94, 90, 164, 155, 268,
	90, -106, 197, 198, 287, -33, 26, 80, 283, 287,
	284, -119, -156, -70, -152, -154, -28, -153, 283, -161,
	-162, -164, -173, -167, -171, -172, 34, 40, 39, 226,
	204, 213, 32, 122, 123, 124, 212, 31, 184, 98,
	83, 76, 75, 160, 36, 35, -175, -176, -169, -170,
	73, 229, 230, 33, 45, 44, 252, 219, -73, 228,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, 138, 210, 30, 116, 231, 157, 155, 236,
	93, 243, 81, 161, -237, 222, 27, -132, -28, 283,
	-185, -137, 197, 283, 284, 287, -75, -136, 282, -134,
	-75, 284, 284, -75, 253, 18, 81, 276, -97, 261,
	147, 74, 113, 146, -98, 202, 7, -144, -143, 255,
	-216, 96, 109, 283, 284, 284, -126, -92, -178, 4,
	261, 147, 74, 113, 146, 202, -93, -126, -94, -127,
	-128, 274, 275, 280, 283, 197, -95, -126, -75, -126,
	37, 134, 232, -96, -126, 104, -75, -126, -126, -126,
	-75, -75, -75, 283, 7, 7, 228, 228, 7, -119,
	284, 282, 291, -145, -34, -48, -41, -41, 155, -117,
	114, -161, -41, 283, 283, 131, 131, -41, -41, 114,
	-41, 114, -41, -41, -35, 188, -41, -41, 188, -87,
	192, -126, -87, -109, 164, -71, -48, 251, -41, 192,
	-69, 287, 268, -71, -37, -37, -154, -229, -49, -229,
	-39, -126, 240, 54, 183, -189, -97, 287, 284, 287,
	-42, 117, -42, -73, -48, 90, 5, -41, -149, -15,
	-19, -14, -25, -9, -41, -84, 109, 287, 60, -91,
	130, 150, 105, 136, 194, 120, -123, 288, -148, -147,
	25, -41, -28, -153, -152, -68, 24, -97, 283, 262,
	-126, 231, -237, 222, -132, -126, 157, 236, 93, 243,
	81, 161, 104, 283, -127, -127, -75, 283, -75, -126,
	282, 282, 287, 284, -62, 287, -61, -126, -75, -75,
	284, 231, 231, 231, 231, 283, 284, -142, -143, 85,
	-126, -221, 171, 283, 283, -126, 25, 284, 104, 284,
	-99, 176, 284, 10, 274, 275, 276, 277, 99, 278,
	271, 272, 273, 270, 266, 267, 268, 55, 144, 199,
	12, 13, 14, 128, 116, -127, -127, -127, -75, 283,
	284, -130, -131, 104, 101, 25, -96, -96, -96, 284,
	104, -75, 287, 287, 287, 284, 284, 284, 7, 284,
	287, 284, 262, 262, 284, -84, -126, 231, 231, 90,
	155, -199, -196, -126, -66, 283, 283, -32, 84, 208,
	-102, 90, -37, 90, -37, 231, -101, 57, 231, -77,
	192, 56, 284, 287, -77, -119, -79, -145, 284, -41,
	-118, 283, -42, 283, 283, 283, -41, -38, 284, -133,
	111, 38, -152, 130, 130, -152, -91, 130, -89, 170,
	-89, -89, -148, -185, 289, -41, 283, 284, 281, 281,
	7, -126, -126, -127, -127, 104, 283, -126, -135, -161,
	22, 22, 284, -75, 284, 287, 284, -134, 284, 253,
	-62, -62, -62, 147, 113, 146, -98, 146, -98, -98,
	7, 5, 87, -126, 227, -222, -41, 283, 256, -61,
	284, -161, -126, -130, -126, -161, -127, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
	-127, -127, -127, -127, -127, 81, 155, 161, -127, 287,
	-75, 284, -131, -130, -126, -126, -161, 284, 284, 284,
	-75, -126, -126, -126, 284, 7, -133, 282, -41, -41,
	-117, 90, -200, 57, -201, 49, 155, 157, 242, 180,
	47, 77, 187, 284, 284, -66, -66, 155, 77, 155,
	77, 70, 238, -41, -41, -48, -41, -41, -41, -77,
	-108, 283, 164, -19, -48, -87, 268, -64, -150, -41,
	-210, 283, -207, -208, -46, 283, -65, -151, -41, -56,
	-64, 164, -217, 257, -126, -75, -152, -152, -90, 247,
	164, 130, -152, -158, 265, -125, -124, 102, 153, 283,
	-66, -147, 282, 7, 7, 284, 22, 22, -126, -135,
	284, 287, -126, -126, 284, -126, 5, -126, 284, 284,
	284, 284, -126, -226, -41, -126, 284, 284, -131, 104,
	81, 161, 283, -126, 284, 284, 287, 284, 284, 284,
	-217, -117, -41, -73, 157, 131, 283, -127, -48, -116,
	-234, 58, 220, 284, 284, 157, 157, -126, -161, -37,
	-37, 231, 231, 82, -66, 57, -83, -28, 283, 284,
	287, -47, -81, 49, -47, -126, 283, -64, 284, 287,
	284, 284, -48, -218, -220, -41, -90, 283, -126, -152,
	161, 287, 290, 268, -66, 284, 282, 282, -126, -126,
	284, -161, 284, -62, -219, 175, 284, -127, 104, 283,
	-135, 284, -126, -201, -126, -43, 283, 283, 187, -36,
	49, -41, -41, 244, 156, 284, -41, -116, -150, -33,
	-73, -33, 284, -75, 284, -151, -116, 283, 287, 25,
	-66, 223, -124, -185, 284, 284, -62, 38, -127, -135,
	284, 284, 284, -204, 145, -41, -66, -48, -31, 247,
	-73, 208, -119, -47, -62, -116, -64, -220, -222, 284,
	228, -223, 182, 198, -75, 284, -202, -205, -203, 164,
	105, 174, 211, 284, 284, -60, 283, -126, -78, -33,
	284, 284, 5, 284, -224, -225, 30, 239, 62, -126,
	-224, -203, 164, -205, 164, 244, 79, -204, -66, -119,
	-116, -225, 178, 100, 197, 178, 100, -206, 152, 191,
	41, 208, -206, -202, 284, 22, 16, 157, 77, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 335, 0, 0,
	0, 305, -2, 0, 101, 0, 263, 0, 263, 263,
	267, 0, 337, 228, 334, -2, 345, 0, 0, 0,
	343, 319, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 68, 69, 70,
	71, 72, 73, 74, 75, 0, 0, 84, 85, 86,
	88, 89, 90, 91, 92, 93, 94, 0, 256, 845,
	269, 755, 756, 757, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 97, 812, 849, 911, 861, 104, 114,
	0, 917, -2, 118, 62, 845, 147, 148, 0, 150,
	164, 0, 0, 0, 162, 0, 0, 159, 0, 274,
	262, 274, 259, 260, 261, 264, 0, 255, 0, 336,
	0, 0, 0, 227, -2, 315, 316, -2, 0, 340,
	340, 340, 0, 0, 316, 0, 324, 835, 327, 738,
	325, 0, 0, 342, 341, 0, 320, 404, 0, 728,
	365, 0, 2, 0, 897, 0, 0, 897, 0, 0,
	0, 0, 0, 410, 54, 897, 45, 897, 724, 45,
	897, 60, 0, 76, 78, 765, 766, 767, 768, 922,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 0, 0, 0, 0, 268, 98, 887,
	100, 0, 103, 105, 106, 0, 0, 0, 0, 0,
	0, 117, 142, 143, 63, 0, 0, 166, 0, 0,
	0, 0, 155, 0, 156, 0, 158, 0, 257, 270,
	271, 258, 0, 266, 45, 408, 0, 897, 759, 279,
	897, -2, 0, 311, 352, 353, 0, 0, 0, 338,
	339, 0, 0, 0, 307, 308, 0, 326, 0, 0,
	368, 716, 720, 721, 496, 0, 0, 0, 0, 0,
	0, 577, 578, 579, 0, 581, 582, 583, 892, 0,
	587, 588, 911, 728, 741, 742, 743, 744, 0, 0,
	0, 749, 750, 751, 700, 626, 597, -2, -2, 739,
	434, 435, 436, 437, -2, 924, 601, 603, 605, 606,
	607, 608, 0, 893, 907, 908, 916, 920, 921, 897,
	904, 898, 888, 895, 903, 795, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 764, 458, 459, 464,
	465, 467, 368, 366, 405, 406, 0, 729, 707, 701,
	702, 0, 0, 0, 713, 711, 712, 22, 252, 24,
	0, 252, 252, 0, 0, 0, 0, 0, 0, 414,
	0, 285, 0, 0, 411, 0, 0, 56, 0, 43,
	44, 0, 58, 0, 0, 335, 0, 0, 897, 0,
	81, 0, 791, 726, 731, 734, 87, 0, 0, 0,
	658, 0, 0, 0, 109, 129, 130, 131, 110, 112,
	119, 121, 122, 123, 132, 133, 134, 135, 221, 0,
	223, 145, 146, 752, 0, 111, 113, 115, 116, 136,
	137, 0, 139, 140, 141, 479, 0, 64, 769, 770,
	771, 772, 773, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 987, 988, 989, 990, 991, 992, 993,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 149, 151, 0, 163, 152, 153, 154, 161,
	157, 160, 0, 0, 265, 224, 0, 170, 0, 0,
	897, 758, 276, 0, 0, 314, 350, 351, 354, 357,
	358, 355, 496, 321, 322, 323, 346, 347, 241, 328,
	0, 0, 735, 414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 710, 0, 0, 719, 500, 501,
	502, 524, 525, 0, -2, 658, 0, 584, 585, 586,
	0, 0, -2, 0, 746, 493, 0, 0, 699, 628,
	0, 0, 0, 0, 0, 0, 0, 679, 685, 0,
	0, 0, 0, 0, 0, 0, 0, 448, 461, 472,
	469, 468, 450, 0, 449, 447, 0, 451, 0, 0,
	0, 414, 0, 708, 0, 705, 706, 0, 715, 0,
	0, 0, 0, 251, 26, 897, 0, 36, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 296, 0, 296, 287, 0,
	0, 0, 283, 368, 298, 300, 301, 0, 0, 412,
	55, 725, 45, 61, 45, 67, 77, 0, 0, 0,
	82, 83, 732, 733, 0, 0, 102, 0, 107, 108,
	275, 0, 126, 0, 128, 0, 222, 754, 753, 493,
	65, 165, 95, 272, 273, 409, 0, 169, 171, 173,
	174, 175, 176, 759, 0, 759, 0, 0, 0, 0,
	0, 356, 359, 360, 0, 349, 239, 240, 335, 0,
	737, 362, 717, 367, 369, 377, 393, 380, 0, 497,
	420, 421, 422, 423, 424, 493, 427, 428, 429, 430,
	431, 432, 433, 441, 442, 443, 444, 445, 446, 455,
	0, 440, 440, 440, 452, 453, 456, 457, 462, 463,
	474, 475, 477, 473, 473, 473, 470, 471, 498, 0,
	503, 504, 505, 506, 507, 508, 509, 510, 511, 512,
	-2, -2, -2, 516, 517, 518, -2, -2, -2, 522,
	523, -2, 0, 0, 710, 0, 0, 530, 0, 533,
	535, 537, 0, 0, 0, 0, 709, 547, 691, 0,
	718, 532, 0, 0, 580, 0, 0, 0, 664, 665,
	0, -2, 589, 345, 0, 0, 0, 0, 747, 480,
	481, 482, 483, 484, 485, 494, 0, 698, 694, 0,
	636, 0, 0, 0, 602, 604, 0, 0, 0, 668,
	669, 670, 671, 672, 673, 674, 0, 0, 0, 0,
	549, 0, 0, 0, 0, 911, 0, 658, 684, 0,
	0, 0, 0, 0, 658, 0, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 362,
	407, 703, 0, 714, 25, 243, 0, 0, 0, 28,
	897, 179, 0, 0, 0, 0, 0, 254, 37, 897,
	45, 897, 45, 38, 23, 252, 242, 245, 0, 53,
	0, 413, 280, 281, 0, 0, 722, 289, 286, 0,
	414, 0, 0, 0, 57, 59, 0, 79, 727, 80,
	99, 659, 124, 125, 127, 120, 138, 0, 167, 0,
	0, 759, 0, 0, 0, 0, 278, 279, 348, 0,
	330, 331, 332, 333, 736, 364, 0, 0, 0, 0,
	0, 0, 401, 401, 401, 399, 393, 0, 379, 392,
	0, 391, -2, 380, 0, 415, 417, 425, 0, 0,
	-2, 0, 0, 0, 548, -2, 531, 534, 536, 538,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	662, 663, 0, -2, 0, 0, 344, 345, 345, 345,
	595, 0, 0, 0, 0, 0, 0, 0, 695, 0,
	0, 596, 0, 0, 0, 0, 0, 610, 0, 611,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 552, 553, 0, 0,
	613, 682, 683, 0, 0, 0, 0, 0, 0, 618,
	0, 689, 0, 0, 0, 622, 623, 624, 0, 438,
	0, 454, 476, 478, 466, 364, 0, 0, 0, 0,
	0, 177, 193, 0, 0, 0, 0, 30, 0, 0,
	0, 0, 34, 0, 40, 0, 0, 0, 0, 295,
	0, 294, 0, 0, 284, 296, 299, 302, 0, 96,
	172, 0, 0, 0, 170, 0, 0, 277, 329, 630,
	0, 0, 370, 0, 0, 0, 0, 0, 396, 400,
	397, 398, 395, 375, 0, 389, 0, 382, 0, 0,
	0, 499, -2, 0, 0, 0, 0, -2, 0, 660,
	0, 0, 692, 0, 653, 0, -2, 666, 590, 0,
	0, 0, 0, 486, 487, 488, 489, 490, 491, 492,
	0, 748, 693, 697, 0, 634, 635, 639, 0, 0,
	600, 0, 667, 676, 677, 550, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, -2, -2, -2, 567,
	568, 569, -2, -2, -2, 0, 0, 0, 678, 0,
	0, 656, 680, 681, 686, 687, 0, 615, 616, 617,
	688, 0, 0, 0, 460, 0, 630, 704, 247, 249,
	27, 0, 178, 0, 181, 0, 0, 184, 185, 0,
	0, 0, 0, 195, 202, 0, 0, 0, 42, 0,
	0, 253, 0, 45, 45, 244, 0, 0, 246, 282,
	0, 0, 0, 288, 723, 297, 0, 0, 229, 238,
	238, 0, 598, 599, 0, 0, 0, 234, 236, 0,
	0, 0, 317, 0, 363, 361, 383, 0, 385, 0,
	0, 0, 387, 378, 0, 0, 373, 0, 372, 0,
	0, 381, 418, 0, 0, 426, 0, 0, -2, 0,
	541, 0, -2, -2, 652, 659, 745, 345, 591, 593,
	594, 495, 696, 641, 638, 0, 625, 609, 675, 0,
	0, 0, 0, 659, 655, 614, 0, 620, 621, 439,
	318, 29, 0, 182, 183, 186, 0, 188, 761, 196,
	0, 199, 200, 197, 0, 31, 32, 41, 47, 33,
	39, 0, 0, 0, 0, 0, 303, 304, 0, 202,
	0, 241, 740, 0, 241, 0, 0, 0, 192, 0,
	168, 202, 0, 629, 631, 0, 384, 0, 403, 386,
	0, 0, 376, 0, 0, 390, 419, 416, -2, -2,
	542, 661, 654, 0, 345, 0, 627, -2, 0, 0,
	0, 657, 0, 180, 0, 208, 0, 0, 0, 49,
	0, 248, 250, 0, 291, 414, 293, 190, 230, 231,
	237, 232, 238, 345, 202, 235, 225, 0, 0, 0,
	0, 0, 374, 371, 388, 592, 644, 0, -2, 0,
	575, 619, 187, 213, 0, 0, 0, 204, 35, 0,
	46, 0, 292, 241, 0, 191, 0, 632, 633, 402,
	0, 0, 0, 0, 640, 576, 189, 209, 210, 0,
	205, 206, 207, 760, 201, 208, 0, 48, 414, 233,
	590, 202, 394, 637, 642, 645, -2, 864, 788, 0,
	643, 211, 0, 212, 0, 0, 0, 213, 0, 290,
	226, 0, 647, 648, 649, 650, 651, 214, 0, 217,
	218, 0, 215, 198, 203, 0, 216, 219, 220, 646,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 272, 3, 278, 273, 3,
	283, 284, 276, 274, 287, 275, 285, 277, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 291, 286,
	266, 268, 267, 3, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 281, 3, 282, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 289, 270, 290, 280,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 269, 57609, 279,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:686
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:692
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:802
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:857
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{ /* SKIP DOC */
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{ /* SKIP DOC */
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			unimplemented()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			unimplemented()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = Low
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = Normal
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = High
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1267
		{
			unimplemented()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1268
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1269
		{
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = []string(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{ /* unimplemented */
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = []string(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = []string(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1590
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1601
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1604
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1612
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1613
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = true
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = false
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1689
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1690
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = Ascending
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = Descending
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = true
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = false
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1777
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.str = ""
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.str = ""
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1914
		{
			unimplementedWithIssue(6637)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1921
		{
			unimplementedWithIssue(6637)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1963
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1967
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = []string(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			unimplemented()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			unimplemented()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			unimplemented()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2222
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2235
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = true
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = false
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = false
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = true
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2263
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2461
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.str = astFullJoin
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.str = astLeftJoin
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.str = astRightJoin
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.str = astInnerJoin
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2608
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2698
		{
			unimplementedWithIssue(2115)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			unimplementedWithIssue(2115)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2702
		{
			unimplementedWithIssue(2115)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2703
		{
			unimplementedWithIssue(2115)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2704
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2768
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = nil
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2885
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2912
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2952
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2988
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2989
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2993
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2995
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2996
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3000
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3028
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3411
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3412
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3453
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3494
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3538
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3543
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3547
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3560
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3564
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3576
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3580
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3588
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3590
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3600
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3603
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3604
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3931
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4087
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4123
		{
			unimplemented()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = DNull
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
