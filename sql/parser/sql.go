// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HELP = 57463
const HIGH = 57464
const HOUR = 57465
const IF = 57466
const IFNULL = 57467
const ILIKE = 57468
const IN = 57469
const INTERLEAVE = 57470
const INDEX = 57471
const INDEXES = 57472
const INITIALLY = 57473
const INNER = 57474
const INSERT = 57475
const INT = 57476
const INT8 = 57477
const INT64 = 57478
const INTEGER = 57479
const INTERSECT = 57480
const INTERVAL = 57481
const INTO = 57482
const IS = 57483
const ISOLATION = 57484
const JOIN = 57485
const KEY = 57486
const KEYS = 57487
const LATERAL = 57488
const LEADING = 57489
const LEAST = 57490
const LEFT = 57491
const LEVEL = 57492
const LIKE = 57493
const LIMIT = 57494
const LOCAL = 57495
const LOCALTIME = 57496
const LOCALTIMESTAMP = 57497
const LOW = 57498
const LSHIFT = 57499
const MATCH = 57500
const MINUTE = 57501
const MONTH = 57502
const NAME = 57503
const NAMES = 57504
const NATURAL = 57505
const NEXT = 57506
const NO = 57507
const NO_INDEX_JOIN = 57508
const NORMAL = 57509
const NOT = 57510
const NOTHING = 57511
const NULL = 57512
const NULLIF = 57513
const NULLS = 57514
const NUMERIC = 57515
const OF = 57516
const OFF = 57517
const OFFSET = 57518
const ON = 57519
const ONLY = 57520
const OR = 57521
const ORDER = 57522
const ORDINALITY = 57523
const OUT = 57524
const OUTER = 57525
const OVER = 57526
const OVERLAPS = 57527
const OVERLAY = 57528
const PARENT = 57529
const PARTIAL = 57530
const PARTITION = 57531
const PLACING = 57532
const POSITION = 57533
const PRECEDING = 57534
const PRECISION = 57535
const PREPARE = 57536
const PRIMARY = 57537
const PRIORITY = 57538
const RANGE = 57539
const READ = 57540
const REAL = 57541
const RECURSIVE = 57542
const REF = 57543
const REFERENCES = 57544
const RENAME = 57545
const REPEATABLE = 57546
const RELEASE = 57547
const RESTRICT = 57548
const RETURNING = 57549
const REVOKE = 57550
const RIGHT = 57551
const ROLLBACK = 57552
const ROLLUP = 57553
const ROW = 57554
const ROWS = 57555
const RSHIFT = 57556
const SAVEPOINT = 57557
const SEARCH = 57558
const SECOND = 57559
const SELECT = 57560
const SERIAL = 57561
const SERIALIZABLE = 57562
const SESSION = 57563
const SESSION_USER = 57564
const SET = 57565
const SHOW = 57566
const SIMILAR = 57567
const SIMPLE = 57568
const SMALLINT = 57569
const SMALLSERIAL = 57570
const SNAPSHOT = 57571
const SOME = 57572
const SPLIT = 57573
const SQL = 57574
const START = 57575
const STDIN = 57576
const STRICT = 57577
const STRING = 57578
const STORING = 57579
const SUBSTRING = 57580
const SYMMETRIC = 57581
const SYSTEM = 57582
const TABLE = 57583
const TABLES = 57584
const TEXT = 57585
const THEN = 57586
const TIME = 57587
const TIMESTAMP = 57588
const TIMESTAMPTZ = 57589
const TO = 57590
const TRAILING = 57591
const TRANSACTION = 57592
const TREAT = 57593
const TRIM = 57594
const TRUE = 57595
const TRUNCATE = 57596
const TYPE = 57597
const UNBOUNDED = 57598
const UNCOMMITTED = 57599
const UNION = 57600
const UNIQUE = 57601
const UNKNOWN = 57602
const UPDATE = 57603
const UPSERT = 57604
const USER = 57605
const USING = 57606
const VALID = 57607
const VALIDATE = 57608
const VALUE = 57609
const VALUES = 57610
const VARCHAR = 57611
const VARIADIC = 57612
const VIEW = 57613
const VARYING = 57614
const WHEN = 57615
const WHERE = 57616
const WINDOW = 57617
const WITH = 57618
const WITHIN = 57619
const WITHOUT = 57620
const YEAR = 57621
const ZONE = 57622
const NOT_LA = 57623
const WITH_LA = 57624
const AS_LA = 57625
const POSTFIXOP = 57626
const UMINUS = 57627

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4849

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	304, 27,
	-2, 374,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 349,
	177, 349,
	207, 349,
	302, 349,
	304, 349,
	-2, 359,
	-1, 58,
	1, 352,
	177, 352,
	207, 352,
	302, 352,
	304, 352,
	-2, 358,
	-1, 67,
	1, 27,
	304, 27,
	-2, 374,
	-1, 386,
	1, 173,
	304, 173,
	-2, 874,
	-1, 420,
	152, 384,
	176, 384,
	-2, 355,
	-1, 423,
	152, 383,
	176, 383,
	-2, 353,
	-1, 542,
	152, 383,
	176, 383,
	-2, 356,
	-1, 598,
	301, 812,
	-2, 805,
	-1, 599,
	301, 813,
	-2, 806,
	-1, 605,
	5, 519,
	301, 519,
	-2, 964,
	-1, 628,
	5, 485,
	-2, 939,
	-1, 629,
	5, 513,
	301, 513,
	-2, 941,
	-1, 630,
	5, 493,
	-2, 942,
	-1, 631,
	5, 492,
	-2, 943,
	-1, 632,
	5, 513,
	301, 513,
	-2, 946,
	-1, 633,
	5, 513,
	301, 513,
	-2, 947,
	-1, 634,
	5, 514,
	-2, 950,
	-1, 635,
	5, 479,
	-2, 951,
	-1, 636,
	5, 479,
	-2, 952,
	-1, 637,
	5, 495,
	-2, 955,
	-1, 638,
	5, 480,
	-2, 960,
	-1, 639,
	5, 481,
	-2, 961,
	-1, 640,
	5, 482,
	-2, 962,
	-1, 641,
	5, 483,
	-2, 963,
	-1, 642,
	5, 479,
	-2, 967,
	-1, 643,
	5, 486,
	-2, 972,
	-1, 644,
	5, 484,
	-2, 975,
	-1, 645,
	5, 511,
	301, 511,
	-2, 977,
	-1, 646,
	5, 515,
	-2, 980,
	-1, 647,
	5, 517,
	-2, 981,
	-1, 648,
	5, 510,
	301, 510,
	-2, 985,
	-1, 893,
	97, 359,
	138, 359,
	152, 359,
	176, 359,
	180, 359,
	258, 359,
	-2, 631,
	-1, 901,
	301, 790,
	-2, 779,
	-1, 1100,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 554,
	-1, 1101,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 555,
	-1, 1102,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 556,
	-1, 1106,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 560,
	-1, 1107,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 561,
	-1, 1108,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 562,
	-1, 1111,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 567,
	-1, 1117,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 569,
	-1, 1120,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 574,
	-1, 1121,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 575,
	-1, 1122,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 576,
	-1, 1147,
	185, 703,
	-2, 706,
	-1, 1170,
	113, 718,
	301, 812,
	-2, 805,
	-1, 1171,
	113, 719,
	-2, 935,
	-1, 1172,
	113, 720,
	-2, 872,
	-1, 1173,
	113, 721,
	-2, 845,
	-1, 1174,
	113, 722,
	-2, 860,
	-1, 1175,
	113, 723,
	-2, 871,
	-1, 1176,
	113, 724,
	-2, 905,
	-1, 1320,
	97, 359,
	138, 359,
	152, 359,
	176, 359,
	180, 359,
	258, 359,
	-2, 432,
	-1, 1324,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 568,
	-1, 1325,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 570,
	-1, 1330,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 571,
	-1, 1348,
	185, 702,
	-2, 705,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 572,
	-1, 1517,
	141, 0,
	-2, 586,
	-1, 1525,
	185, 704,
	-2, 707,
	-1, 1560,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 612,
	-1, 1561,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 613,
	-1, 1562,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 614,
	-1, 1566,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 618,
	-1, 1567,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 619,
	-1, 1568,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 620,
	-1, 1672,
	141, 0,
	-2, 587,
	-1, 1675,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 590,
	-1, 1676,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 592,
	-1, 1764,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 591,
	-1, 1765,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	126, 0,
	127, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 593,
	-1, 1772,
	141, 0,
	-2, 621,
	-1, 1817,
	141, 0,
	-2, 622,
	-1, 1869,
	35, 0,
	126, 0,
	151, 0,
	225, 0,
	281, 0,
	-2, 938,
}

const sqlNprod = 1080
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25433

var sqlAct = [...]int{

	599, 1891, 1868, 1479, 1849, 1823, 1850, 1867, 1716, 1072,
	1851, 986, 978, 1536, 818, 1739, 591, 597, 1050, 1752,
	424, 596, 1664, 1317, 589, 458, 709, 445, 44, 74,
	822, 1638, 387, 1637, 257, 75, 1597, 649, 259, 74,
	74, 74, 1658, 1081, 74, 1054, 1651, 74, 1501, 896,
	1049, 1405, 1491, 1246, 19, 74, 1404, 1351, 898, 1307,
	825, 1316, 74, 74, 664, 661, 74, 1018, 1053, 74,
	74, 74, 1080, 260, 956, 261, 1301, 947, 1157, 1133,
	1084, 1130, 1194, 987, 840, 1011, 431, 57, 561, 429,
	1044, 248, 529, 710, 773, 26, 15, 7, 694, 1002,
	757, 666, 571, 562, 530, 459, 460, 680, 784, 479,
	470, 9, 754, 1057, 8, 6, 472, 423, 980, 473,
	4, 1082, 457, 57, 246, 58, 846, 932, 928, 434,
	544, 59, 253, 252, 254, 545, 374, 775, 771, 753,
	546, 365, 384, 687, 432, 696, 466, 528, 255, 549,
	377, 250, 249, 1759, 57, 1883, 1760, 251, 1076, 696,
	1315, 696, 1015, 979, 1865, 1857, 1847, 1738, 1076, 1008,
	983, 1842, 428, 1819, 1076, 1813, 1008, 428, 1076, 1258,
	256, 848, 1197, 421, 572, 1803, 451, 442, 1738, 420,
	448, 412, 1793, 256, 1257, 1076, 1766, 1763, 1749, 1008,
	1076, 1738, 1021, 1746, 1016, 63, 1076, 436, 1737, 1721,
	676, 1738, 1076, 71, 1720, 1698, 1677, 1076, 1021, 1021,
	1807, 1674, 1624, 56, 1008, 1021, 1623, 1609, 65, 1021,
	1076, 1521, 1465, 1346, 1021, 975, 56, 847, 1347, 1741,
	1017, 1014, 74, 74, 74, 74, 74, 1345, 482, 35,
	443, 1305, 1021, 450, 453, 66, 1459, 36, 1422, 975,
	1304, 1423, 35, 61, 1420, 1419, 1573, 1021, 1021, 62,
	36, 1418, 1348, 1304, 1021, 1021, 429, 475, 475, 1286,
	849, 850, 1076, 483, 1077, 484, 1030, 1076, 60, 1021,
	1020, 1007, 974, 1021, 1008, 975, 944, 1350, 1019, 943,
	1524, 1284, 1021, 852, 63, 697, 945, 1287, 704, 849,
	850, 705, 1076, 1023, 1141, 1071, 1038, 557, 813, 697,
	812, 697, 461, 765, 851, 556, 462, 65, 821, 764,
	494, 441, 852, 461, 67, 462, 798, 462, 514, 1866,
	1863, 63, 1375, 1376, 1856, 1393, 1394, 1395, 1814, 1747,
	1703, 1699, 1690, 851, 66, 1689, 480, 1688, 651, 866,
	1013, 74, 61, 467, 65, 476, 1683, 1682, 62, 1375,
	1376, 1257, 1681, 847, 1635, 63, 74, 1629, 857, 74,
	74, 1588, 1012, 1289, 1583, 1582, 1581, 982, 63, 1527,
	1510, 66, 1390, 1490, 1469, 1427, 1424, 1412, 65, 1403,
	1374, 1138, 1371, 1368, 700, 1356, 1355, 857, 1285, 1211,
	1164, 65, 74, 1163, 74, 904, 74, 74, 695, 74,
	816, 556, 555, 455, 60, 66, 443, 1538, 453, 1833,
	1806, 1785, 1783, 61, 74, 1774, 1375, 1376, 66, 62,
	1381, 543, 1756, 1744, 1735, 74, 61, 1713, 536, 538,
	1696, 1667, 62, 1375, 1376, 1645, 867, 74, 60, 1397,
	1516, 1509, 1487, 259, 74, 74, 74, 1381, 74, 656,
	1485, 247, 1484, 1396, 502, 1482, 1439, 1438, 542, 1467,
	1402, 849, 850, 682, 461, 1364, 503, 74, 462, 1391,
	1139, 1363, 849, 850, 74, 1342, 74, 684, 260, 1338,
	261, 1628, 1135, 1273, 852, 716, 1238, 482, 482, 1237,
	1225, 1224, 1204, 868, 1162, 259, 74, 1075, 74, 74,
	74, 74, 74, 74, 74, 851, 794, 655, 74, 497,
	499, 933, 936, 74, 1381, 535, 851, 940, 926, 650,
	74, 925, 483, 483, 484, 484, 1392, 924, 533, 799,
	260, 1381, 261, 820, 531, 1225, 923, 421, 74, 922,
	921, 74, 920, 420, 855, 856, 858, 919, 878, 918,
	917, 1634, 699, 916, 915, 702, 552, 553, 558, 844,
	914, 913, 912, 1391, 911, 467, 902, 862, 859, 860,
	861, 853, 854, 855, 856, 858, 900, 878, 443, 60,
	508, 817, 446, 560, 429, 500, 490, 488, 706, 689,
	686, 456, 1633, 849, 850, 899, 1387, 1388, 1389, 1267,
	1386, 1383, 1384, 1385, 1377, 1378, 1379, 1380, 1382, 658,
	1266, 657, 672, 815, 901, 761, 760, 1761, 1632, 1259,
	1392, 681, 1066, 1426, 1425, 1323, 788, 795, 443, 688,
	688, 1377, 1378, 1379, 1380, 1382, 524, 803, 800, 509,
	74, 804, 805, 806, 807, 808, 909, 1652, 74, 814,
	811, 443, 74, 751, 828, 421, 74, 74, 421, 421,
	979, 836, 830, 763, 837, 838, 829, 842, 1539, 1158,
	1359, 74, 418, 74, 74, 657, 74, 752, 1253, 74,
	929, 74, 74, 1433, 74, 938, 482, 1015, 1829, 939,
	1879, 905, 1617, 950, 1386, 1383, 1384, 1385, 1377, 1378,
	1379, 1380, 1382, 1029, 1880, 242, 405, 667, 1280, 668,
	849, 850, 1792, 996, 475, 506, 475, 1379, 1380, 1382,
	406, 483, 981, 484, 981, 949, 961, 963, 1729, 1016,
	238, 1450, 411, 852, 410, 1728, 74, 74, 895, 248,
	949, 930, 931, 1003, 934, 1335, 948, 957, 1453, 878,
	937, 1430, 1466, 507, 851, 1025, 243, 667, 1333, 668,
	878, 953, 941, 1429, 1326, 1017, 1014, 1272, 1271, 427,
	1270, 57, 970, 966, 1269, 57, 239, 1118, 669, 259,
	253, 252, 254, 74, 1005, 1004, 1006, 1022, 985, 995,
	972, 667, 994, 668, 480, 1000, 255, 74, 74, 250,
	249, 997, 74, 998, 1791, 251, 969, 960, 857, 999,
	426, 532, 1754, 1043, 260, 1208, 261, 1207, 1089, 527,
	70, 486, 414, 1019, 942, 1655, 1331, 739, 669, 74,
	1336, 1132, 74, 1454, 1242, 415, 443, 1132, 1032, 1078,
	453, 934, 678, 937, 1026, 1027, 716, 716, 1024, 1031,
	1158, 674, 428, 419, 1831, 990, 931, 930, 1718, 1441,
	453, 690, 669, 453, 1088, 416, 259, 1474, 244, 1019,
	1888, 69, 1247, 1853, 1471, 1457, 849, 850, 1879, 673,
	1844, 878, 1069, 1070, 1255, 1013, 1047, 1786, 1375, 1376,
	959, 793, 792, 1240, 786, 781, 1845, 1046, 245, 852,
	1136, 260, 682, 261, 241, 240, 1279, 682, 677, 1332,
	1472, 1281, 505, 1894, 849, 850, 1334, 1448, 1048, 927,
	851, 1770, 504, 1086, 1087, 1019, 1899, 74, 74, 74,
	425, 1079, 946, 74, 1210, 1034, 74, 852, 1145, 1236,
	1736, 1036, 74, 74, 74, 74, 74, 1854, 1887, 1251,
	74, 716, 670, 74, 958, 1362, 74, 1037, 851, 696,
	892, 525, 1502, 74, 428, 74, 1035, 1852, 1019, 1878,
	1154, 796, 74, 665, 857, 1137, 505, 1876, 1218, 1247,
	366, 443, 74, 68, 1650, 1855, 1381, 1064, 517, 1212,
	1442, 429, 853, 854, 855, 856, 858, 547, 878, 495,
	493, 371, 670, 74, 74, 716, 367, 548, 738, 74,
	1495, 1235, 857, 443, 1249, 526, 1569, 1723, 1722, 482,
	1694, 548, 1711, 867, 1780, 1432, 745, 1213, 1222, 368,
	1719, 1886, 1892, 1613, 1905, 1391, 670, 1221, 1328, 74,
	797, 74, 1217, 74, 1131, 74, 1128, 370, 74, 716,
	1065, 827, 819, 565, 483, 1470, 484, 74, 1824, 1126,
	547, 867, 1142, 1146, 74, 1149, 74, 810, 1605, 1288,
	1252, 1290, 766, 1893, 1261, 1292, 1262, 1263, 770, 1260,
	868, 1189, 1265, 1180, 1712, 1227, 1900, 1201, 1202, 1203,
	1895, 1115, 1392, 1275, 429, 1570, 1291, 1226, 1293, 1277,
	1606, 1571, 1278, 1264, 1276, 1695, 1661, 1497, 1283, 1322,
	1003, 1214, 768, 1282, 1616, 563, 563, 1612, 868, 697,
	1904, 1615, 1496, 769, 662, 1124, 1222, 1123, 504, 465,
	464, 1129, 369, 426, 539, 1665, 1298, 1480, 1636, 683,
	1244, 604, 57, 1492, 429, 1302, 1321, 681, 653, 1161,
	1349, 1005, 1004, 1006, 1773, 1299, 681, 861, 853, 854,
	855, 856, 858, 1693, 878, 1406, 443, 1383, 1384, 1385,
	1377, 1378, 1379, 1380, 1382, 372, 1329, 1327, 1515, 787,
	782, 1370, 1113, 1116, 1601, 1310, 1602, 1306, 739, 739,
	1666, 1709, 1337, 1243, 429, 1306, 853, 854, 855, 856,
	858, 1848, 878, 1313, 1028, 1614, 74, 1112, 973, 523,
	1125, 1604, 1710, 522, 1500, 1358, 521, 1127, 1607, 520,
	1311, 519, 518, 515, 1437, 832, 834, 463, 1407, 1294,
	1160, 910, 841, 802, 1310, 1821, 1594, 1446, 74, 74,
	1444, 1431, 1310, 1295, 887, 888, 889, 890, 891, 1461,
	443, 1067, 1313, 894, 1409, 1410, 1411, 1062, 1001, 703,
	1313, 701, 698, 1308, 693, 74, 675, 1428, 74, 1311,
	74, 1308, 671, 907, 1533, 1603, 74, 1311, 1435, 826,
	1312, 1114, 1730, 1309, 550, 74, 1880, 1486, 511, 74,
	439, 1309, 790, 739, 1449, 74, 259, 1660, 1341, 74,
	1483, 74, 1343, 1073, 652, 1464, 3, 949, 1732, 1235,
	1445, 1463, 1447, 964, 1353, 1354, 1456, 601, 1473, 1475,
	1476, 1462, 363, 965, 1460, 1458, 404, 1741, 1494, 1312,
	1506, 260, 1498, 261, 1788, 716, 1481, 1312, 1489, 1816,
	1503, 1504, 1493, 74, 949, 1518, 554, 739, 1401, 1499,
	962, 551, 362, 1529, 1530, 1531, 1505, 440, 968, 1414,
	1074, 967, 1808, 716, 716, 1648, 366, 512, 1063, 738,
	738, 1061, 716, 716, 447, 984, 843, 762, 407, 408,
	708, 1010, 1902, 1903, 1659, 1809, 1526, 371, 1375, 1376,
	1679, 739, 367, 849, 850, 373, 1040, 1039, 1589, 1477,
	1451, 1452, 1540, 1468, 1421, 716, 1268, 1209, 1206, 1546,
	74, 74, 74, 1205, 1155, 368, 1041, 1532, 1296, 74,
	74, 1042, 990, 443, 903, 74, 413, 74, 1717, 74,
	74, 74, 364, 370, 74, 801, 1576, 1610, 1611, 516,
	1542, 1543, 1577, 1843, 1685, 1361, 1751, 1769, 1159, 1548,
	1549, 908, 34, 1640, 577, 1595, 1434, 1593, 1056, 1055,
	262, 1590, 791, 780, 600, 74, 74, 774, 783, 443,
	1169, 654, 602, 443, 738, 1375, 1376, 74, 74, 713,
	1643, 74, 1580, 1646, 1642, 1643, 603, 1644, 714, 1642,
	74, 74, 1644, 935, 1630, 1631, 590, 711, 478, 1303,
	988, 1649, 1156, 1357, 906, 1522, 576, 582, 1668, 581,
	1143, 487, 573, 716, 1669, 1663, 1647, 1314, 369, 74,
	1656, 1657, 47, 1673, 1662, 563, 1626, 501, 738, 382,
	383, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1250, 1117, 1627, 1119, 1120, 1121, 1122,
	1068, 372, 831, 1443, 417, 1574, 1372, 489, 1187, 1179,
	1177, 1167, 738, 1381, 534, 74, 1584, 74, 1692, 74,
	74, 660, 989, 513, 1256, 1009, 559, 839, 74, 438,
	437, 1165, 1166, 1168, 1178, 1051, 1188, 1190, 1195, 1198,
	1199, 1200, 835, 510, 767, 584, 1375, 1376, 1033, 74,
	409, 1707, 1782, 1620, 716, 1220, 1898, 1704, 1787, 1440,
	1705, 662, 1391, 1828, 64, 25, 23, 1731, 22, 21,
	715, 74, 20, 74, 72, 18, 1742, 741, 17, 16,
	1733, 24, 74, 1643, 357, 358, 359, 1642, 74, 376,
	1644, 14, 388, 13, 12, 1245, 1654, 1248, 11, 1745,
	376, 443, 443, 10, 33, 443, 1762, 435, 435, 1740,
	32, 72, 31, 30, 72, 72, 454, 739, 29, 1392,
	1755, 1768, 5, 1748, 2, 1758, 1, 0, 0, 0,
	74, 1725, 0, 716, 0, 0, 0, 1726, 1727, 1274,
	1784, 0, 0, 1775, 1381, 739, 739, 0, 0, 74,
	74, 0, 0, 74, 739, 739, 0, 74, 0, 0,
	1779, 0, 74, 1778, 0, 0, 1796, 0, 0, 1798,
	0, 1804, 1800, 0, 0, 0, 1643, 74, 1805, 0,
	1642, 0, 259, 1644, 429, 0, 682, 739, 0, 841,
	1797, 0, 0, 1391, 1799, 1810, 1385, 1377, 1378, 1379,
	1380, 1382, 1811, 0, 74, 0, 74, 74, 0, 74,
	1815, 716, 1715, 0, 1375, 1376, 1812, 260, 0, 261,
	1834, 1818, 0, 0, 1826, 0, 1832, 0, 74, 1838,
	1324, 1325, 1837, 740, 0, 0, 1330, 1835, 0, 0,
	0, 1830, 1841, 1836, 1643, 0, 712, 1840, 1642, 0,
	1392, 1644, 74, 0, 74, 1750, 0, 0, 0, 1344,
	1839, 1864, 1858, 1860, 1390, 1862, 443, 0, 1352, 74,
	0, 0, 1861, 1873, 0, 0, 1360, 0, 1877, 0,
	1365, 1875, 0, 0, 1881, 0, 0, 72, 468, 72,
	388, 388, 1885, 1882, 1884, 739, 0, 0, 738, 0,
	0, 0, 1896, 894, 389, 0, 1897, 0, 1901, 1195,
	1195, 1195, 1381, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 402, 0, 0, 1906, 738, 738, 1377, 1378,
	1379, 1380, 1382, 0, 0, 738, 738, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 1802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 391, 0, 0,
	0, 1391, 396, 397, 0, 563, 403, 0, 738, 0,
	0, 0, 0, 563, 0, 0, 0, 662, 390, 392,
	0, 0, 0, 0, 1375, 1376, 0, 1393, 1394, 1395,
	0, 1827, 0, 0, 0, 0, 739, 0, 0, 0,
	1671, 0, 0, 0, 0, 0, 491, 0, 0, 0,
	0, 1181, 0, 0, 0, 0, 393, 0, 1392, 1846,
	0, 496, 0, 0, 388, 388, 0, 0, 0, 394,
	395, 715, 715, 1605, 1390, 1598, 990, 0, 741, 741,
	0, 1511, 0, 1596, 1512, 398, 0, 1600, 0, 0,
	0, 0, 0, 0, 0, 1517, 0, 376, 0, 72,
	0, 388, 388, 0, 540, 1606, 0, 0, 1274, 0,
	0, 0, 0, 0, 0, 739, 738, 1534, 0, 435,
	0, 0, 1381, 0, 1599, 0, 0, 1544, 1545, 0,
	72, 1547, 1386, 1383, 1384, 1385, 1377, 1378, 1379, 1380,
	1382, 0, 72, 0, 0, 0, 0, 0, 0, 72,
	72, 72, 0, 691, 0, 1396, 0, 0, 0, 0,
	0, 0, 0, 0, 1578, 1579, 0, 0, 0, 0,
	0, 1391, 72, 1585, 1586, 1587, 715, 0, 0, 758,
	0, 758, 399, 741, 0, 400, 0, 0, 0, 1601,
	401, 1602, 0, 739, 1375, 1376, 0, 1393, 1394, 1395,
	0, 388, 0, 758, 388, 388, 388, 388, 388, 809,
	1670, 0, 0, 388, 0, 563, 1604, 738, 376, 0,
	0, 0, 0, 1607, 0, 824, 0, 0, 1392, 0,
	715, 0, 0, 0, 740, 740, 0, 741, 0, 0,
	0, 0, 0, 435, 1390, 0, 845, 712, 712, 0,
	1653, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1181, 1181, 0, 0, 0, 0,
	0, 0, 0, 1672, 715, 0, 0, 1675, 1676, 0,
	1603, 741, 1678, 0, 0, 0, 1680, 0, 0, 0,
	0, 0, 1381, 1684, 1339, 1340, 738, 1687, 1387, 1388,
	1389, 0, 1386, 1383, 1384, 1385, 1377, 1378, 1379, 1380,
	1382, 0, 0, 0, 0, 0, 1181, 1181, 1181, 0,
	0, 0, 0, 0, 0, 1396, 0, 0, 0, 0,
	0, 1697, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 1391, 0, 0, 0, 72, 1398, 1399, 1400, 0,
	0, 0, 712, 954, 0, 0, 0, 72, 0, 578,
	45, 72, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1724, 738, 0, 72, 0, 992, 993,
	0, 72, 0, 0, 72, 0, 388, 388, 0, 388,
	0, 0, 0, 740, 0, 0, 45, 0, 1392, 1743,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 422, 1757, 0,
	430, 0, 0, 0, 0, 0, 0, 45, 1764, 1765,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 758, 845, 0, 0, 0, 0, 0, 0, 0,
	712, 0, 0, 0, 0, 0, 0, 0, 1777, 0,
	0, 1181, 1181, 0, 0, 0, 0, 0, 1387, 1388,
	1389, 1781, 1386, 1383, 1384, 1385, 1377, 1378, 1379, 1380,
	1382, 0, 0, 0, 0, 0, 0, 0, 1045, 0,
	0, 1513, 1514, 662, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 1052, 0, 0, 0, 845, 0, 0,
	0, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
	1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
	0, 1181, 0, 0, 72, 0, 0, 388, 0, 0,
	0, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	715, 1572, 0, 0, 0, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1859, 715, 715,
	0, 0, 0, 0, 0, 741, 741, 715, 715, 0,
	0, 0, 1872, 1872, 741, 741, 0, 430, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1872, 0, 0,
	715, 0, 72, 1215, 1216, 0, 0, 741, 954, 0,
	0, 1223, 0, 0, 0, 0, 0, 1228, 1229, 1231,
	1233, 1234, 0, 0, 0, 1239, 0, 0, 1241, 0,
	1872, 72, 0, 0, 0, 0, 0, 0, 72, 0,
	1254, 0, 0, 0, 0, 0, 0, 72, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 72, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 0, 0,
	0, 852, 0, 883, 0, 0, 0, 0, 1045, 758,
	0, 0, 0, 0, 1045, 0, 0, 0, 0, 0,
	0, 0, 851, 740, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 715, 0,
	1181, 0, 0, 0, 824, 741, 824, 0, 388, 0,
	72, 740, 740, 1297, 0, 0, 0, 0, 0, 0,
	740, 740, 1300, 0, 712, 712, 0, 0, 0, 1319,
	1714, 72, 0, 712, 712, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 422, 0, 740, 876, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 0, 0, 0, 0, 867, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 0, 741, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1772, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1375,
	1376, 0, 1393, 1394, 1395, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 1181, 0, 422,
	0, 845, 422, 422, 712, 0, 0, 0, 715, 1390,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 1817, 0, 897,
	0, 0, 0, 72, 72, 0, 0, 0, 0, 875,
	0, 0, 863, 864, 865, 0, 862, 859, 860, 861,
	853, 854, 855, 856, 858, 0, 878, 1381, 976, 0,
	1478, 0, 0, 954, 0, 824, 0, 977, 0, 0,
	0, 1488, 0, 0, 0, 0, 0, 0, 0, 0,
	72, 0, 0, 0, 72, 0, 715, 0, 0, 0,
	1319, 0, 740, 741, 1508, 0, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 712, 1391, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 1537, 45,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 0, 0, 0, 45, 0,
	0, 0, 0, 1392, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 712, 0, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 1591, 1592, 954, 0, 852,
	0, 883, 0, 0, 845, 845, 0, 0, 0, 0,
	1618, 0, 1619, 0, 72, 1621, 1622, 0, 0, 1625,
	851, 0, 0, 1387, 1388, 1389, 866, 1386, 1383, 1384,
	1385, 1377, 1378, 1379, 1380, 1382, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 1639, 0,
	845, 1052, 712, 1639, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 72, 0, 0, 72, 0, 0, 0,
	0, 0, 0, 0, 857, 845, 1319, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1686, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 0,
	0, 0, 0, 867, 1134, 0, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	852, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	954, 0, 1706, 0, 388, 1708, 0, 0, 0, 0,
	0, 851, 0, 72, 0, 0, 0, 866, 0, 0,
	868, 0, 1375, 1376, 0, 1393, 1394, 1395, 0, 0,
	0, 877, 0, 0, 845, 0, 0, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1639, 0, 0, 0, 0, 72, 0, 1753, 0,
	0, 0, 430, 0, 0, 857, 0, 72, 0, 0,
	0, 0, 1390, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 884, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 874, 0,
	0, 1700, 0, 0, 867, 824, 0, 0, 0, 0,
	1381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1789, 1790, 0, 0, 1794, 0,
	0, 45, 1795, 45, 1639, 0, 0, 388, 0, 0,
	0, 0, 0, 1396, 0, 45, 0, 0, 0, 0,
	0, 0, 845, 0, 0, 1320, 0, 0, 0, 1391,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 1825,
	0, 845, 72, 0, 388, 0, 1134, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1639, 1753, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1392, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 875, 845,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 1874, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 1387, 1388, 1389, 0,
	1386, 1383, 1384, 1385, 1377, 1378, 1379, 1380, 1382, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 614,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 1083, 613,
	198, 199, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 1083, 102, 0, 0, 1083, 205,
	103, 104, 615, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 212, 213, 214, 215, 0,
	216, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 0,
	130, 0, 622, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 611, 160, 161, 276, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 618,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 45,
	0, 173, 619, 620, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 236,
	237, 0, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 1083, 1083, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1641, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 258,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 277, 78, 278,
	279, 280, 281, 189, 282, 283, 284, 285, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 286, 82, 196,
	197, 83, 287, 288, 198, 199, 200, 289, 201, 290,
	263, 291, 84, 85, 86, 893, 87, 292, 88, 89,
	90, 293, 264, 91, 92, 294, 295, 296, 297, 298,
	299, 93, 94, 95, 96, 202, 97, 203, 204, 300,
	98, 301, 99, 302, 303, 304, 100, 101, 305, 102,
	306, 0, 307, 205, 103, 104, 206, 308, 309, 310,
	105, 106, 207, 0, 107, 311, 108, 312, 313, 265,
	314, 109, 208, 315, 209, 316, 110, 111, 112, 210,
	211, 267, 317, 115, 318, 113, 319, 266, 114, 212,
	213, 214, 215, 320, 216, 321, 268, 116, 269, 117,
	118, 322, 323, 217, 270, 119, 271, 324, 120, 325,
	326, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 327, 130, 328, 218, 132, 219, 133,
	134, 329, 330, 331, 332, 333, 135, 220, 273, 136,
	274, 221, 137, 138, 139, 334, 222, 140, 223, 141,
	335, 142, 143, 144, 224, 145, 146, 336, 148, 149,
	147, 150, 337, 151, 275, 152, 153, 225, 154, 0,
	155, 156, 157, 338, 226, 158, 159, 339, 160, 161,
	276, 162, 227, 228, 163, 340, 169, 164, 165, 166,
	168, 229, 167, 230, 341, 170, 342, 171, 172, 343,
	231, 232, 233, 344, 345, 173, 234, 235, 346, 174,
	175, 176, 177, 347, 348, 178, 179, 180, 349, 350,
	181, 182, 183, 236, 237, 351, 352, 184, 353, 354,
	355, 356, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 258, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 76, 77, 277, 78, 278, 279, 280,
	281, 189, 282, 283, 284, 285, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 286, 82, 196, 197, 83,
	287, 288, 198, 199, 200, 289, 201, 290, 263, 291,
	84, 85, 86, 0, 87, 292, 88, 89, 90, 293,
	264, 91, 92, 294, 295, 296, 297, 298, 299, 93,
	94, 95, 96, 202, 97, 203, 204, 300, 98, 301,
	99, 302, 303, 304, 100, 101, 305, 102, 306, 0,
	307, 205, 103, 104, 206, 308, 309, 310, 105, 106,
	207, 0, 107, 311, 108, 312, 313, 265, 314, 109,
	208, 315, 209, 316, 110, 111, 112, 210, 211, 267,
	317, 115, 318, 113, 319, 266, 114, 212, 213, 214,
	215, 320, 216, 321, 268, 116, 269, 117, 118, 322,
	323, 217, 270, 119, 271, 324, 120, 325, 326, 121,
	0, 122, 123, 124, 125, 126, 272, 127, 128, 131,
	129, 327, 130, 328, 218, 132, 219, 133, 134, 329,
	330, 331, 332, 333, 135, 220, 273, 136, 274, 221,
	137, 138, 139, 334, 222, 140, 223, 141, 335, 142,
	143, 144, 224, 145, 146, 336, 148, 149, 147, 150,
	337, 151, 275, 152, 153, 225, 154, 0, 155, 156,
	157, 338, 226, 158, 159, 339, 160, 161, 276, 162,
	227, 228, 163, 340, 169, 164, 165, 166, 168, 229,
	167, 230, 341, 170, 342, 171, 172, 343, 231, 232,
	233, 344, 345, 173, 234, 235, 346, 174, 175, 176,
	177, 347, 348, 178, 179, 180, 349, 350, 181, 182,
	183, 236, 237, 351, 352, 184, 353, 354, 355, 356,
	185, 186, 187, 188, 258, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 0,
	76, 77, 277, 78, 278, 279, 280, 281, 189, 282,
	283, 284, 285, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 286, 82, 196, 197, 83, 287, 288, 198,
	199, 200, 289, 201, 290, 263, 291, 84, 85, 86,
	0, 87, 292, 88, 89, 90, 293, 264, 91, 92,
	294, 295, 296, 297, 298, 299, 93, 94, 95, 96,
	202, 97, 203, 204, 300, 98, 301, 99, 302, 303,
	304, 100, 101, 305, 102, 306, 0, 307, 205, 103,
	104, 206, 308, 309, 310, 105, 106, 207, 0, 107,
	311, 108, 312, 313, 265, 314, 109, 208, 315, 209,
	316, 110, 111, 112, 210, 211, 267, 317, 115, 318,
	113, 319, 266, 114, 212, 213, 214, 215, 320, 216,
	321, 268, 116, 269, 117, 118, 322, 323, 217, 270,
	119, 271, 324, 120, 325, 326, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 327, 130,
	328, 218, 132, 219, 133, 134, 329, 330, 331, 332,
	333, 135, 220, 273, 136, 274, 221, 137, 138, 139,
	334, 222, 140, 223, 141, 335, 142, 143, 144, 224,
	145, 146, 336, 148, 149, 147, 150, 337, 151, 275,
	152, 153, 225, 154, 0, 155, 156, 157, 338, 226,
	158, 159, 339, 160, 161, 276, 162, 227, 228, 163,
	340, 169, 164, 165, 166, 168, 229, 167, 230, 341,
	170, 342, 171, 172, 343, 231, 232, 233, 344, 345,
	173, 234, 235, 346, 174, 175, 176, 177, 347, 348,
	178, 179, 180, 349, 350, 181, 182, 183, 236, 237,
	351, 352, 184, 353, 354, 355, 356, 185, 186, 187,
	188, 598, 587, 588, 585, 586, 574, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 1151,
	78, 0, 0, 0, 0, 614, 580, 0, 0, 0,
	79, 80, 190, 628, 192, 629, 81, 630, 631, 0,
	82, 196, 197, 83, 595, 613, 632, 633, 200, 0,
	624, 0, 606, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 264, 91, 92, 0, 607, 609,
	0, 608, 610, 93, 94, 95, 96, 634, 97, 635,
	636, 0, 98, 0, 99, 0, 1152, 0, 627, 101,
	0, 102, 0, 0, 0, 579, 103, 104, 615, 593,
	0, 0, 105, 106, 637, 0, 107, 0, 108, 0,
	0, 265, 0, 109, 625, 0, 209, 0, 110, 111,
	112, 621, 623, 267, 0, 115, 0, 113, 0, 266,
	114, 638, 639, 640, 641, 0, 605, 0, 268, 116,
	269, 117, 118, 0, 0, 626, 270, 119, 271, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	272, 127, 128, 131, 129, 569, 130, 594, 622, 132,
	642, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	273, 136, 274, 616, 137, 138, 139, 0, 617, 140,
	223, 141, 0, 142, 143, 144, 643, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 275, 152, 153, 583,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 611,
	160, 161, 276, 162, 644, 228, 163, 0, 169, 164,
	165, 166, 168, 645, 167, 618, 0, 170, 0, 171,
	172, 0, 231, 646, 647, 0, 0, 173, 619, 620,
	592, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	612, 0, 181, 182, 183, 236, 648, 1150, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 566,
	567, 1153, 0, 0, 0, 568, 0, 0, 575, 1148,
	598, 587, 588, 585, 586, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 614, 580, 0, 0, 0, 79,
	80, 190, 628, 192, 629, 81, 630, 631, 0, 82,
	196, 197, 83, 595, 613, 632, 633, 200, 0, 624,
	0, 606, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 264, 91, 92, 0, 607, 609, 0,
	608, 610, 93, 94, 95, 96, 634, 97, 635, 636,
	663, 98, 0, 99, 0, 0, 0, 627, 101, 0,
	102, 0, 0, 0, 579, 103, 104, 615, 593, 0,
	0, 105, 106, 637, 0, 107, 0, 108, 0, 0,
	265, 0, 109, 625, 0, 209, 0, 110, 111, 112,
	621, 623, 267, 0, 115, 0, 113, 0, 266, 114,
	638, 639, 640, 641, 0, 605, 0, 268, 116, 269,
	117, 118, 0, 0, 626, 270, 119, 271, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 569, 130, 594, 622, 132, 642,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 273,
	136, 274, 616, 137, 138, 139, 0, 617, 140, 223,
	141, 0, 142, 143, 144, 643, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 275, 152, 153, 583, 154,
	0, 155, 156, 157, 63, 226, 158, 159, 611, 160,
	161, 276, 162, 644, 228, 163, 0, 169, 164, 165,
	166, 168, 645, 167, 618, 0, 170, 65, 171, 172,
	0, 231, 646, 647, 0, 0, 173, 619, 620, 592,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 612,
	0, 181, 182, 183, 485, 648, 0, 0, 184, 0,
	0, 0, 61, 185, 186, 187, 188, 570, 62, 598,
	587, 588, 585, 586, 574, 0, 0, 0, 566, 567,
	0, 0, 0, 0, 568, 76, 77, 575, 78, 0,
	0, 0, 0, 614, 580, 0, 0, 0, 79, 80,
	190, 628, 192, 629, 81, 630, 631, 0, 82, 196,
	197, 83, 595, 613, 632, 633, 200, 0, 624, 0,
	606, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 92, 0, 607, 609, 0, 608,
	610, 93, 94, 95, 96, 634, 97, 635, 636, 0,
	98, 0, 99, 0, 0, 0, 627, 101, 0, 102,
	0, 0, 0, 579, 103, 104, 615, 593, 0, 0,
	105, 106, 637, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 625, 0, 209, 0, 110, 111, 112, 621,
	623, 267, 0, 115, 0, 113, 0, 266, 114, 638,
	639, 640, 641, 0, 605, 0, 268, 116, 269, 117,
	118, 0, 0, 626, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 569, 130, 594, 622, 132, 642, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 273, 136,
	274, 616, 137, 138, 139, 0, 617, 140, 223, 141,
	0, 142, 143, 144, 643, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 583, 154, 0,
	155, 156, 157, 63, 226, 158, 159, 611, 160, 161,
	276, 162, 644, 228, 163, 0, 169, 164, 165, 166,
	168, 645, 167, 618, 0, 170, 65, 171, 172, 0,
	231, 646, 647, 0, 0, 173, 619, 620, 592, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 612, 0,
	181, 182, 183, 485, 648, 0, 0, 184, 0, 0,
	0, 61, 185, 186, 187, 188, 570, 62, 598, 587,
	588, 585, 586, 574, 0, 0, 0, 566, 567, 0,
	0, 0, 0, 568, 76, 77, 575, 78, 0, 0,
	0, 0, 614, 580, 0, 0, 0, 79, 80, 190,
	628, 192, 629, 81, 630, 631, 1191, 82, 196, 197,
	83, 595, 613, 632, 633, 200, 0, 624, 0, 606,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 264, 91, 92, 0, 607, 609, 0, 608, 610,
	93, 94, 95, 96, 634, 97, 635, 636, 0, 98,
	0, 99, 0, 0, 0, 627, 101, 0, 102, 0,
	0, 0, 579, 103, 104, 615, 593, 0, 0, 105,
	106, 637, 0, 107, 0, 108, 0, 1196, 265, 0,
	109, 625, 0, 209, 0, 110, 111, 112, 621, 623,
	267, 0, 115, 0, 113, 0, 266, 114, 638, 639,
	640, 641, 0, 605, 0, 268, 116, 269, 117, 118,
	0, 1192, 626, 270, 119, 271, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 272, 127, 128,
	131, 129, 569, 130, 594, 622, 132, 642, 133, 134,
	0, 0, 0, 0, 0, 135, 220, 273, 136, 274,
	616, 137, 138, 139, 0, 617, 140, 223, 141, 0,
	142, 143, 144, 643, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 275, 152, 153, 583, 154, 0, 155,
	156, 157, 0, 226, 158, 159, 611, 160, 161, 276,
	162, 644, 228, 163, 0, 169, 164, 165, 166, 168,
	645, 167, 618, 0, 170, 0, 171, 172, 0, 231,
	646, 647, 0, 1193, 173, 619, 620, 592, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 612, 0, 181,
	182, 183, 236, 648, 0, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 570, 0, 598, 587, 588,
	585, 586, 574, 0, 0, 0, 566, 567, 0, 0,
	0, 0, 568, 76, 77, 575, 78, 0, 0, 0,
	0, 614, 580, 0, 0, 0, 79, 80, 190, 628,
	192, 629, 81, 630, 631, 0, 82, 196, 197, 83,
	595, 613, 632, 633, 200, 0, 624, 0, 606, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	264, 91, 92, 0, 607, 609, 0, 608, 610, 93,
	94, 95, 96, 634, 97, 635, 636, 0, 98, 0,
	99, 0, 0, 0, 627, 101, 0, 102, 0, 0,
	0, 579, 103, 104, 615, 593, 0, 0, 105, 106,
	637, 0, 107, 0, 108, 0, 0, 265, 0, 109,
	625, 0, 209, 0, 110, 111, 112, 621, 623, 267,
	0, 115, 0, 113, 0, 266, 114, 638, 639, 640,
	641, 0, 605, 0, 268, 116, 269, 117, 118, 0,
	0, 626, 270, 119, 271, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 272, 127, 128, 131,
	129, 569, 130, 594, 622, 132, 642, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 273, 136, 274, 616,
	137, 138, 139, 0, 617, 140, 223, 141, 0, 142,
	143, 144, 643, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 275, 152, 153, 583, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 611, 160, 161, 276, 162,
	644, 228, 163, 0, 169, 164, 165, 166, 168, 645,
	167, 618, 0, 170, 0, 171, 172, 0, 231, 646,
	647, 0, 0, 173, 619, 620, 592, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 612, 0, 181, 182,
	183, 236, 648, 0, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 567, 0, 0, 0,
	0, 568, 0, 0, 575, 1575, 598, 587, 588, 585,
	586, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 0,
	614, 580, 0, 0, 0, 79, 80, 190, 628, 192,
	629, 81, 630, 631, 0, 82, 196, 197, 83, 595,
	613, 632, 633, 200, 0, 624, 0, 606, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 264,
	91, 92, 0, 607, 609, 0, 608, 610, 93, 94,
	95, 96, 634, 97, 635, 636, 0, 98, 0, 99,
	0, 0, 0, 627, 101, 0, 102, 0, 0, 0,
	579, 103, 104, 615, 593, 0, 0, 105, 106, 637,
	0, 107, 0, 108, 0, 0, 265, 0, 109, 625,
	0, 209, 0, 110, 111, 112, 621, 623, 267, 0,
	115, 0, 113, 0, 266, 114, 638, 639, 640, 641,
	0, 605, 0, 268, 116, 269, 117, 118, 0, 0,
	626, 270, 119, 271, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 272, 127, 128, 131, 129,
	569, 130, 594, 622, 132, 642, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 273, 136, 274, 616, 137,
	138, 139, 0, 617, 140, 223, 141, 0, 142, 143,
	144, 643, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 275, 152, 153, 583, 154, 0, 155, 156, 157,
	0, 226, 158, 159, 611, 160, 161, 276, 162, 644,
	228, 163, 0, 169, 164, 165, 166, 168, 645, 167,
	618, 0, 170, 0, 171, 172, 0, 231, 646, 647,
	0, 0, 173, 619, 620, 592, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 612, 0, 181, 182, 183,
	236, 648, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 566, 567, 0, 0, 0, 0,
	568, 0, 0, 575, 1523, 598, 587, 588, 585, 586,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 614,
	580, 0, 0, 0, 79, 80, 190, 628, 192, 629,
	81, 630, 631, 0, 82, 196, 197, 83, 595, 613,
	632, 633, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 634, 97, 635, 636, 0, 98, 0, 99, 0,
	0, 0, 627, 101, 0, 102, 0, 0, 0, 579,
	103, 104, 615, 593, 0, 0, 105, 106, 637, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 638, 639, 640, 641, 0,
	605, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 569,
	130, 594, 622, 132, 642, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	643, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 583, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 611, 160, 161, 276, 162, 644, 228,
	163, 0, 169, 164, 165, 166, 168, 645, 167, 618,
	0, 170, 0, 171, 172, 0, 231, 646, 647, 0,
	0, 173, 619, 620, 592, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 236,
	648, 0, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 566, 567, 0, 0, 0, 0, 568,
	0, 0, 575, 1147, 598, 587, 588, 585, 586, 574,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 614, 580,
	0, 0, 0, 79, 80, 190, 628, 192, 629, 81,
	630, 631, 0, 82, 196, 197, 83, 595, 613, 632,
	633, 200, 0, 624, 0, 606, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 264, 91, 92,
	0, 607, 609, 0, 608, 610, 93, 94, 95, 96,
	634, 97, 635, 636, 0, 98, 0, 99, 0, 0,
	0, 627, 101, 0, 102, 0, 0, 0, 579, 103,
	104, 615, 593, 0, 0, 105, 106, 637, 0, 107,
	0, 108, 0, 0, 265, 0, 109, 625, 0, 209,
	0, 110, 111, 112, 621, 623, 267, 0, 115, 0,
	113, 0, 266, 114, 638, 639, 640, 641, 0, 605,
	0, 268, 116, 269, 117, 118, 0, 0, 626, 270,
	119, 271, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 569, 130,
	594, 622, 132, 642, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 273, 136, 274, 616, 137, 138, 139,
	0, 617, 140, 223, 141, 0, 142, 143, 144, 643,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 275,
	152, 153, 583, 154, 0, 155, 156, 157, 0, 226,
	158, 159, 611, 160, 161, 276, 162, 644, 228, 163,
	0, 169, 164, 165, 166, 168, 645, 167, 618, 0,
	170, 0, 171, 172, 0, 231, 646, 647, 0, 0,
	173, 619, 620, 592, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 612, 0, 181, 182, 183, 236, 648,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 570, 0, 0, 0, 0, 598, 587, 588, 585,
	586, 574, 566, 567, 0, 0, 0, 0, 568, 899,
	1144, 575, 76, 77, 0, 78, 0, 0, 0, 0,
	614, 580, 0, 0, 0, 79, 80, 190, 628, 192,
	629, 81, 630, 631, 0, 82, 196, 197, 83, 595,
	613, 632, 633, 200, 0, 624, 0, 606, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 264,
	91, 92, 0, 607, 609, 0, 608, 610, 93, 94,
	95, 96, 634, 97, 635, 636, 0, 98, 0, 99,
	0, 0, 0, 627, 101, 0, 102, 0, 0, 0,
	579, 103, 104, 615, 593, 0, 0, 105, 106, 637,
	0, 107, 0, 108, 0, 0, 265, 0, 109, 625,
	0, 209, 0, 110, 111, 112, 621, 623, 267, 0,
	115, 0, 113, 0, 266, 114, 638, 639, 640, 641,
	0, 605, 0, 268, 116, 269, 117, 118, 0, 0,
	626, 270, 119, 271, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 272, 127, 128, 131, 129,
	569, 130, 594, 622, 132, 642, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 273, 136, 274, 616, 137,
	138, 139, 0, 617, 140, 223, 141, 0, 142, 143,
	144, 643, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 275, 152, 153, 583, 154, 0, 155, 156, 157,
	0, 226, 158, 159, 611, 160, 161, 276, 162, 644,
	228, 163, 0, 169, 164, 165, 166, 168, 645, 167,
	618, 0, 170, 0, 171, 172, 0, 231, 646, 647,
	0, 0, 173, 619, 620, 592, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 612, 0, 181, 182, 183,
	236, 648, 0, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 570, 0, 598, 587, 588, 585, 586,
	574, 0, 0, 0, 566, 567, 564, 0, 0, 0,
	568, 76, 77, 575, 78, 0, 0, 0, 0, 614,
	580, 0, 0, 0, 79, 80, 190, 628, 192, 629,
	81, 630, 631, 0, 82, 196, 197, 83, 595, 613,
	632, 633, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 634, 97, 635, 636, 0, 98, 0, 99, 0,
	0, 0, 627, 101, 0, 102, 0, 0, 0, 579,
	103, 104, 615, 593, 0, 0, 105, 106, 637, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 638, 639, 640, 641, 0,
	605, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 569,
	130, 594, 622, 132, 642, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	643, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 583, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 611, 160, 161, 276, 162, 644, 228,
	163, 0, 169, 164, 165, 166, 168, 645, 167, 618,
	0, 170, 0, 171, 172, 0, 231, 646, 647, 0,
	0, 173, 619, 620, 592, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 236,
	648, 1528, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 570, 0, 598, 587, 588, 585, 586, 574,
	0, 0, 0, 566, 567, 0, 0, 0, 0, 568,
	76, 77, 575, 78, 0, 0, 0, 0, 614, 580,
	0, 0, 0, 79, 80, 190, 628, 192, 629, 81,
	630, 631, 0, 82, 196, 197, 83, 595, 613, 632,
	633, 200, 0, 624, 0, 606, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 264, 91, 92,
	0, 607, 609, 0, 608, 610, 93, 94, 95, 96,
	634, 97, 635, 636, 663, 98, 0, 99, 0, 0,
	0, 627, 101, 0, 102, 0, 0, 0, 579, 103,
	104, 615, 593, 0, 0, 105, 106, 637, 0, 107,
	0, 108, 0, 0, 265, 0, 109, 625, 0, 209,
	0, 110, 111, 112, 621, 623, 267, 0, 115, 0,
	113, 0, 266, 114, 638, 639, 640, 641, 0, 605,
	0, 268, 116, 269, 117, 118, 0, 0, 626, 270,
	119, 271, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 569, 130,
	594, 622, 132, 642, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 273, 136, 274, 616, 137, 138, 139,
	0, 617, 140, 223, 141, 0, 142, 143, 144, 643,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 275,
	152, 153, 583, 154, 0, 155, 156, 157, 0, 226,
	158, 159, 611, 160, 161, 276, 162, 644, 228, 163,
	0, 169, 164, 165, 166, 168, 645, 167, 618, 0,
	170, 0, 171, 172, 0, 231, 646, 647, 0, 0,
	173, 619, 620, 592, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 612, 0, 181, 182, 183, 236, 648,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 570, 0, 598, 587, 588, 585, 586, 574, 0,
	0, 0, 566, 567, 0, 0, 0, 0, 568, 76,
	77, 575, 78, 0, 0, 0, 0, 614, 580, 0,
	0, 0, 79, 80, 190, 628, 192, 629, 81, 630,
	631, 0, 82, 196, 197, 83, 595, 613, 632, 633,
	200, 0, 624, 0, 606, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 92, 0,
	607, 609, 0, 608, 610, 93, 94, 95, 96, 634,
	97, 635, 636, 0, 98, 0, 99, 0, 0, 0,
	627, 101, 0, 102, 0, 0, 0, 579, 103, 104,
	615, 593, 0, 0, 105, 106, 637, 0, 107, 0,
	108, 0, 1196, 265, 0, 109, 625, 0, 209, 0,
	110, 111, 112, 621, 623, 267, 0, 115, 0, 113,
	0, 266, 114, 638, 639, 640, 641, 0, 605, 0,
	268, 116, 269, 117, 118, 0, 0, 626, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 569, 130, 594,
	622, 132, 642, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 273, 136, 274, 616, 137, 138, 139, 0,
	617, 140, 223, 141, 0, 142, 143, 144, 643, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 583, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 611, 160, 161, 276, 162, 644, 228, 163, 0,
	169, 164, 165, 166, 168, 645, 167, 618, 0, 170,
	0, 171, 172, 0, 231, 646, 647, 0, 0, 173,
	619, 620, 592, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 612, 0, 181, 182, 183, 236, 648, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	570, 0, 0, 0, 0, 598, 587, 588, 585, 586,
	574, 566, 567, 0, 0, 0, 0, 568, 0, 0,
	575, 76, 77, 833, 78, 0, 0, 0, 0, 614,
	580, 0, 0, 0, 79, 80, 190, 628, 192, 629,
	81, 630, 631, 0, 82, 196, 197, 83, 595, 613,
	632, 633, 200, 0, 624, 0, 606, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 264, 91,
	92, 0, 607, 609, 0, 608, 610, 93, 94, 95,
	96, 634, 97, 635, 636, 0, 98, 0, 99, 0,
	0, 0, 627, 101, 0, 102, 0, 0, 0, 579,
	103, 104, 615, 593, 0, 0, 105, 106, 637, 0,
	107, 0, 108, 0, 0, 265, 0, 109, 625, 0,
	209, 0, 110, 111, 112, 621, 623, 267, 0, 115,
	0, 113, 0, 266, 114, 638, 639, 640, 641, 0,
	605, 0, 268, 116, 269, 117, 118, 0, 0, 626,
	270, 119, 271, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 272, 127, 128, 131, 129, 569,
	130, 594, 622, 132, 642, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 273, 136, 274, 616, 137, 138,
	139, 0, 617, 140, 223, 141, 0, 142, 143, 144,
	643, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	275, 152, 153, 583, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 611, 160, 161, 276, 162, 644, 228,
	163, 0, 169, 164, 165, 166, 168, 645, 167, 618,
	0, 170, 0, 171, 172, 0, 231, 646, 647, 0,
	0, 173, 619, 620, 592, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 612, 0, 181, 182, 183, 236,
	648, 0, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 570, 0, 598, 587, 588, 585, 586, 574,
	0, 0, 0, 566, 567, 0, 0, 0, 0, 568,
	76, 77, 575, 78, 0, 0, 0, 0, 614, 580,
	0, 0, 0, 79, 80, 190, 628, 192, 629, 81,
	630, 631, 0, 82, 196, 197, 83, 595, 613, 632,
	633, 200, 0, 624, 0, 606, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 264, 91, 1871,
	0, 607, 609, 0, 608, 610, 93, 94, 95, 96,
	634, 97, 635, 636, 0, 98, 0, 99, 0, 0,
	0, 627, 101, 0, 102, 0, 0, 0, 579, 103,
	104, 615, 593, 0, 0, 105, 106, 637, 0, 107,
	0, 108, 0, 0, 265, 0, 109, 625, 0, 209,
	0, 110, 111, 112, 621, 623, 267, 0, 115, 0,
	113, 0, 266, 114, 638, 639, 640, 641, 0, 605,
	0, 268, 116, 269, 117, 118, 0, 0, 626, 270,
	119, 271, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 272, 127, 128, 131, 129, 569, 130,
	594, 622, 132, 642, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 273, 136, 274, 616, 137, 138, 139,
	0, 617, 140, 223, 141, 0, 142, 143, 144, 643,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 275,
	152, 153, 583, 154, 0, 155, 156, 157, 0, 226,
	158, 159, 611, 160, 161, 276, 162, 644, 228, 163,
	0, 169, 164, 165, 166, 168, 645, 167, 618, 0,
	170, 0, 171, 172, 0, 231, 646, 647, 0, 0,
	173, 619, 620, 592, 174, 175, 1870, 177, 0, 0,
	178, 179, 180, 612, 0, 181, 182, 183, 236, 648,
	0, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 570, 0, 598, 587, 588, 585, 586, 574, 0,
	0, 0, 566, 567, 0, 0, 0, 0, 568, 76,
	77, 575, 78, 0, 0, 0, 0, 614, 580, 0,
	0, 0, 79, 80, 1869, 628, 192, 629, 81, 630,
	631, 0, 82, 196, 197, 83, 595, 613, 632, 633,
	200, 0, 624, 0, 606, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 1871, 0,
	607, 609, 0, 608, 610, 93, 94, 95, 96, 634,
	97, 635, 636, 0, 98, 0, 99, 0, 0, 0,
	627, 101, 0, 102, 0, 0, 0, 579, 103, 104,
	615, 593, 0, 0, 105, 106, 637, 0, 107, 0,
	108, 0, 0, 265, 0, 109, 625, 0, 209, 0,
	110, 111, 112, 621, 623, 267, 0, 115, 0, 113,
	0, 266, 114, 638, 639, 640, 641, 0, 605, 0,
	268, 116, 269, 117, 118, 0, 0, 626, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 569, 130, 594,
	622, 132, 642, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 273, 136, 274, 616, 137, 138, 139, 0,
	617, 140, 223, 141, 0, 142, 143, 144, 643, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 583, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 611, 160, 161, 276, 162, 644, 228, 163, 0,
	169, 164, 165, 166, 168, 645, 167, 618, 0, 170,
	0, 171, 172, 0, 231, 646, 647, 0, 0, 173,
	619, 620, 592, 174, 175, 1870, 177, 0, 0, 178,
	179, 180, 612, 0, 181, 182, 183, 236, 648, 0,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	570, 0, 598, 587, 588, 585, 586, 574, 0, 0,
	0, 566, 567, 0, 0, 0, 0, 568, 76, 77,
	575, 78, 0, 0, 0, 0, 614, 580, 0, 0,
	0, 79, 80, 190, 628, 192, 629, 81, 630, 631,
	0, 82, 196, 197, 83, 595, 613, 632, 633, 200,
	0, 624, 0, 606, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 264, 91, 92, 0, 607,
	609, 0, 608, 610, 93, 94, 95, 96, 634, 97,
	635, 636, 0, 98, 0, 99, 0, 0, 0, 627,
	101, 0, 102, 0, 0, 0, 579, 103, 104, 615,
	593, 0, 0, 105, 106, 637, 0, 107, 0, 108,
	0, 0, 265, 0, 109, 625, 0, 209, 0, 110,
	111, 112, 621, 623, 267, 0, 115, 0, 113, 0,
	266, 114, 638, 639, 640, 641, 0, 605, 0, 268,
	116, 269, 117, 118, 0, 0, 626, 270, 119, 271,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 272, 127, 128, 131, 129, 569, 130, 594, 622,
	132, 642, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 273, 136, 274, 616, 137, 138, 139, 0, 617,
	140, 223, 141, 0, 142, 143, 144, 643, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 275, 152, 153,
	583, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	611, 160, 161, 276, 162, 644, 228, 163, 0, 169,
	164, 165, 166, 168, 645, 167, 618, 0, 170, 0,
	171, 172, 0, 231, 646, 647, 0, 0, 173, 619,
	620, 592, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 612, 0, 181, 182, 183, 236, 648, 0, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 570,
	0, 1170, 587, 588, 585, 586, 574, 0, 0, 0,
	566, 567, 0, 0, 0, 0, 568, 76, 77, 575,
	78, 0, 0, 0, 0, 614, 580, 0, 0, 0,
	79, 80, 190, 628, 192, 629, 81, 630, 631, 0,
	82, 196, 197, 83, 595, 613, 632, 633, 200, 0,
	624, 0, 606, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 264, 91, 92, 0, 607, 609,
	0, 608, 610, 93, 94, 95, 96, 634, 1173, 635,
	636, 0, 98, 0, 99, 0, 0, 0, 627, 101,
	0, 102, 0, 0, 0, 579, 103, 104, 615, 593,
	0, 0, 105, 106, 637, 0, 107, 0, 108, 0,
	0, 265, 0, 109, 625, 0, 209, 0, 110, 111,
	1174, 621, 623, 267, 0, 115, 0, 113, 0, 266,
	114, 638, 639, 640, 641, 0, 605, 0, 268, 116,
	269, 117, 118, 0, 0, 626, 270, 119, 271, 0,
	120, 0, 0, 121, 0, 122, 1175, 1172, 125, 126,
	272, 127, 128, 131, 129, 569, 130, 594, 622, 132,
	642, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	273, 136, 274, 616, 137, 138, 139, 0, 617, 140,
	223, 141, 0, 142, 143, 144, 643, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 275, 152, 153, 583,
	154, 0, 155, 156, 1176, 0, 226, 158, 159, 611,
	160, 161, 276, 162, 644, 228, 163, 0, 169, 164,
	165, 166, 168, 645, 167, 618, 0, 170, 0, 171,
	172, 0, 231, 646, 647, 0, 0, 173, 619, 620,
	592, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	612, 0, 181, 182, 183, 236, 648, 0, 0, 184,
	0, 0, 0, 0, 185, 186, 1171, 188, 570, 0,
	598, 587, 588, 585, 586, 574, 0, 0, 0, 566,
	567, 0, 0, 0, 0, 568, 76, 77, 575, 78,
	0, 0, 0, 0, 614, 580, 0, 0, 0, 79,
	80, 190, 628, 192, 629, 81, 630, 631, 0, 82,
	196, 197, 83, 595, 613, 632, 633, 200, 0, 624,
	0, 606, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 264, 91, 92, 0, 607, 609, 0,
	608, 610, 93, 94, 95, 96, 634, 97, 635, 636,
	0, 98, 0, 99, 0, 0, 0, 627, 101, 0,
	102, 0, 0, 0, 579, 103, 104, 615, 593, 0,
	0, 105, 106, 637, 0, 107, 0, 108, 0, 0,
	265, 0, 109, 625, 0, 209, 0, 110, 111, 112,
	621, 623, 267, 0, 115, 0, 113, 0, 266, 114,
	638, 639, 640, 641, 0, 605, 0, 268, 116, 269,
	117, 118, 0, 0, 626, 270, 119, 271, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 272,
	127, 128, 131, 129, 0, 130, 594, 622, 132, 642,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 273,
	136, 274, 616, 137, 138, 139, 0, 617, 140, 223,
	141, 0, 142, 143, 144, 643, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 275, 152, 153, 1186, 154,
	0, 155, 156, 157, 0, 226, 158, 159, 611, 160,
	161, 276, 162, 644, 228, 163, 0, 169, 164, 165,
	166, 168, 645, 167, 618, 0, 170, 0, 171, 172,
	0, 231, 646, 647, 0, 0, 173, 619, 620, 592,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 612,
	0, 181, 182, 183, 236, 648, 0, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 598,
	587, 588, 585, 586, 574, 0, 0, 0, 1182, 1183,
	0, 0, 0, 0, 1184, 76, 77, 1185, 78, 0,
	0, 0, 0, 614, 580, 0, 0, 0, 79, 80,
	0, 628, 192, 629, 81, 630, 631, 0, 82, 196,
	197, 83, 595, 613, 632, 633, 200, 0, 624, 0,
	606, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 1871, 0, 607, 609, 0, 608,
	610, 93, 94, 95, 96, 634, 97, 635, 636, 0,
	98, 0, 99, 0, 0, 0, 627, 101, 0, 102,
	0, 0, 0, 579, 103, 104, 615, 593, 0, 0,
	105, 106, 637, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 625, 0, 209, 0, 110, 111, 112, 621,
	623, 0, 0, 115, 0, 113, 0, 266, 114, 638,
	639, 640, 641, 0, 605, 0, 0, 116, 269, 117,
	118, 0, 0, 626, 270, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 569, 130, 594, 622, 132, 642, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 273, 136,
	274, 616, 137, 138, 139, 0, 617, 140, 223, 141,
	0, 142, 143, 144, 643, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 583, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 611, 160, 161,
	0, 162, 644, 228, 163, 0, 169, 164, 165, 166,
	168, 645, 167, 618, 0, 170, 0, 171, 172, 0,
	231, 646, 647, 0, 0, 173, 619, 620, 592, 174,
	175, 1870, 177, 0, 0, 178, 179, 180, 612, 0,
	181, 182, 183, 236, 648, 0, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 481, 0,
	0, 0, 0, 0, 0, 0, 0, 566, 567, 0,
	0, 0, 0, 568, 76, 77, 575, 78, 0, 0,
	0, 0, 189, 0, 0, 0, 0, 79, 80, 190,
	191, 192, 193, 81, 194, 195, 0, 82, 196, 197,
	83, 0, 0, 198, 199, 200, 0, 201, 0, 263,
	0, 84, 85, 86, 0, 87, 0, 88, 89, 90,
	0, 264, 91, 92, 0, 0, 0, 0, 0, 0,
	93, 94, 95, 96, 202, 97, 203, 204, 0, 98,
	0, 99, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 205, 103, 104, 206, 0, 0, 0, 105,
	106, 207, 0, 107, 0, 108, 0, 0, 265, 0,
	109, 208, 0, 209, 0, 110, 111, 112, 210, 211,
	267, 0, 115, 0, 113, 0, 266, 114, 212, 213,
	214, 215, 0, 216, 0, 268, 116, 269, 117, 118,
	0, 0, 217, 270, 119, 271, 0, 120, 0, 0,
	121, 0, 122, 123, 124, 125, 126, 272, 127, 128,
	131, 129, 0, 130, 0, 218, 132, 219, 133, 134,
	0, 0, 0, 0, 0, 135, 220, 273, 136, 274,
	221, 137, 138, 139, 0, 222, 140, 223, 141, 0,
	142, 143, 144, 224, 145, 146, 0, 148, 149, 147,
	150, 0, 151, 275, 152, 153, 225, 154, 0, 155,
	156, 157, 63, 226, 158, 159, 0, 160, 161, 276,
	162, 227, 228, 163, 0, 169, 164, 165, 166, 168,
	229, 167, 230, 0, 170, 65, 171, 172, 0, 231,
	232, 233, 0, 0, 173, 234, 235, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 485, 237, 0, 0, 184, 0, 0, 0,
	61, 185, 186, 187, 188, 0, 62, 481, 785, 0,
	786, 781, 776, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 77, 60, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 263, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	264, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 789, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 778, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 265, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 267,
	0, 115, 0, 113, 0, 266, 114, 212, 213, 214,
	215, 0, 216, 0, 268, 116, 269, 117, 118, 0,
	0, 217, 270, 119, 271, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 272, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	779, 0, 0, 0, 135, 220, 273, 136, 274, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 275, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 276, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 777, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 481, 785, 184, 786, 781, 776, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 787, 782, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 263, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 772, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 778, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 265, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 267, 0, 115, 0, 113,
	0, 266, 114, 212, 213, 214, 215, 0, 216, 0,
	268, 116, 269, 117, 118, 0, 0, 217, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 779, 0, 0, 0,
	135, 220, 273, 136, 274, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 276, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 777, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 481,
	785, 184, 786, 781, 776, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 787, 782, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	263, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 264, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 778, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 265,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 267, 0, 115, 0, 113, 0, 266, 114, 212,
	213, 214, 215, 0, 216, 0, 268, 116, 269, 117,
	118, 0, 0, 217, 270, 119, 271, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 272, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 779, 0, 0, 0, 135, 220, 273, 136,
	274, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 275, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	276, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 777, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 787, 782, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 444,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 63,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 65, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 485,
	237, 0, 0, 184, 73, 0, 0, 61, 185, 186,
	187, 188, 0, 62, 0, 0, 0, 0, 0, 0,
	76, 77, 0, 78, 0, 0, 0, 0, 189, 0,
	0, 0, 1085, 79, 80, 190, 191, 192, 193, 81,
	194, 195, 0, 82, 196, 197, 83, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 84, 85, 86,
	0, 87, 0, 88, 89, 90, 0, 0, 91, 92,
	0, 0, 0, 0, 0, 0, 93, 94, 95, 96,
	202, 97, 203, 204, 0, 98, 0, 99, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 205, 103,
	104, 206, 0, 0, 0, 105, 106, 207, 0, 107,
	0, 108, 0, 0, 0, 0, 109, 208, 0, 209,
	0, 110, 111, 112, 210, 211, 0, 0, 115, 0,
	113, 0, 0, 114, 212, 213, 214, 215, 0, 216,
	0, 0, 116, 0, 117, 118, 0, 0, 217, 0,
	119, 0, 0, 120, 0, 0, 121, 0, 122, 123,
	124, 125, 126, 0, 127, 128, 131, 129, 0, 130,
	0, 218, 132, 219, 133, 134, 0, 0, 0, 0,
	0, 135, 220, 0, 136, 0, 221, 137, 138, 139,
	0, 222, 140, 223, 141, 0, 142, 143, 144, 224,
	145, 146, 0, 148, 149, 147, 150, 0, 151, 0,
	152, 153, 225, 154, 0, 155, 156, 157, 63, 226,
	158, 159, 0, 160, 161, 0, 162, 227, 228, 163,
	0, 169, 164, 165, 166, 168, 229, 167, 230, 0,
	170, 65, 171, 172, 0, 231, 232, 233, 0, 0,
	173, 234, 235, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 485, 237,
	0, 0, 184, 73, 0, 0, 61, 185, 186, 187,
	188, 0, 62, 0, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 1318,
	0, 60, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 0,
	0, 184, 0, 73, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 556, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 444, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 0,
	0, 184, 73, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	1085, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	0, 0, 0, 105, 106, 207, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 208, 0, 209, 0, 110,
	111, 112, 210, 211, 0, 0, 115, 0, 113, 0,
	0, 114, 212, 213, 214, 215, 0, 216, 0, 0,
	116, 0, 117, 118, 0, 0, 217, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 218,
	132, 219, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 0, 136, 0, 221, 137, 138, 139, 0, 222,
	140, 223, 141, 0, 142, 143, 144, 224, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	225, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	0, 160, 161, 0, 162, 227, 228, 163, 0, 169,
	164, 165, 166, 168, 229, 167, 230, 0, 170, 0,
	171, 172, 0, 231, 232, 233, 0, 0, 173, 234,
	235, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 236, 237, 0, 0,
	184, 0, 73, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 77,
	0, 78, 0, 0, 0, 0, 189, 0, 0, 0,
	679, 79, 80, 190, 191, 192, 193, 81, 194, 195,
	0, 82, 196, 197, 83, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 84, 85, 86, 0, 87,
	0, 88, 89, 90, 0, 0, 91, 92, 0, 0,
	0, 0, 0, 0, 93, 94, 95, 96, 202, 97,
	203, 204, 0, 98, 0, 99, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 205, 103, 104, 206,
	0, 0, 0, 105, 106, 207, 0, 107, 0, 108,
	0, 0, 0, 0, 109, 208, 0, 209, 0, 110,
	111, 112, 210, 211, 0, 0, 115, 0, 113, 0,
	0, 114, 212, 213, 214, 215, 0, 216, 0, 0,
	116, 0, 117, 118, 0, 0, 217, 0, 119, 0,
	0, 120, 0, 0, 121, 0, 122, 123, 124, 125,
	126, 0, 127, 128, 131, 129, 0, 130, 0, 218,
	132, 219, 133, 134, 0, 0, 0, 0, 0, 135,
	220, 0, 136, 0, 221, 137, 138, 139, 0, 222,
	140, 223, 141, 0, 142, 143, 144, 224, 145, 146,
	0, 148, 149, 147, 150, 0, 151, 0, 152, 153,
	225, 154, 0, 155, 156, 157, 0, 226, 158, 159,
	0, 160, 161, 0, 162, 227, 228, 163, 0, 169,
	164, 165, 166, 168, 229, 167, 230, 0, 170, 0,
	171, 172, 0, 231, 232, 233, 0, 0, 173, 234,
	235, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 236, 237, 0, 0,
	184, 73, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 991,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 0, 0, 184,
	73, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 77, 0, 78,
	0, 0, 0, 0, 189, 0, 0, 0, 1538, 79,
	80, 190, 191, 192, 193, 81, 194, 195, 0, 82,
	196, 197, 83, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 84, 85, 86, 0, 87, 0, 88,
	89, 90, 0, 0, 91, 92, 0, 0, 0, 0,
	0, 0, 93, 94, 95, 96, 202, 97, 203, 204,
	0, 98, 0, 99, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 205, 103, 104, 206, 0, 0,
	0, 105, 106, 207, 0, 107, 0, 108, 0, 0,
	0, 0, 109, 208, 0, 209, 0, 110, 111, 112,
	210, 211, 0, 0, 115, 0, 113, 0, 0, 114,
	212, 213, 214, 215, 0, 216, 0, 0, 116, 0,
	117, 118, 0, 0, 217, 0, 119, 0, 0, 120,
	0, 0, 121, 0, 122, 123, 124, 125, 126, 0,
	127, 128, 131, 129, 0, 130, 0, 218, 132, 219,
	133, 134, 0, 0, 0, 0, 0, 135, 220, 0,
	136, 0, 221, 137, 138, 139, 0, 222, 140, 223,
	141, 0, 142, 143, 144, 224, 145, 146, 0, 148,
	149, 147, 150, 0, 151, 0, 152, 153, 225, 154,
	0, 155, 156, 157, 0, 226, 158, 159, 0, 160,
	161, 0, 162, 227, 228, 163, 0, 169, 164, 165,
	166, 168, 229, 167, 230, 0, 170, 0, 171, 172,
	0, 231, 232, 233, 0, 0, 173, 234, 235, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 236, 237, 0, 0, 184, 73,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 659, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 756, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 755, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 0, 73, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 0, 76, 77, 0, 78, 0, 0, 0, 759,
	189, 0, 0, 0, 0, 79, 80, 190, 191, 192,
	193, 81, 194, 195, 0, 82, 196, 197, 83, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 84,
	85, 86, 0, 87, 0, 88, 89, 90, 0, 0,
	91, 92, 0, 0, 0, 0, 0, 0, 93, 94,
	95, 96, 202, 97, 203, 204, 0, 98, 0, 99,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	205, 103, 104, 206, 0, 0, 0, 105, 106, 207,
	0, 107, 0, 108, 0, 0, 0, 0, 109, 208,
	0, 209, 0, 110, 111, 112, 210, 211, 0, 0,
	115, 0, 113, 0, 0, 114, 212, 213, 214, 215,
	0, 216, 0, 0, 116, 0, 117, 118, 0, 0,
	217, 0, 119, 0, 0, 120, 0, 0, 121, 0,
	122, 123, 124, 125, 126, 0, 127, 128, 131, 129,
	0, 130, 0, 218, 132, 219, 133, 134, 0, 0,
	0, 0, 0, 135, 220, 0, 136, 0, 221, 137,
	138, 139, 0, 222, 140, 223, 141, 0, 142, 143,
	144, 224, 145, 146, 0, 148, 149, 147, 150, 0,
	151, 0, 152, 153, 225, 154, 0, 155, 156, 157,
	0, 226, 158, 159, 0, 160, 161, 0, 162, 227,
	228, 163, 0, 169, 164, 165, 166, 168, 229, 167,
	230, 0, 170, 0, 171, 172, 0, 231, 232, 233,
	0, 0, 173, 234, 235, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	236, 237, 0, 481, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 759, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 263, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 264, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 265, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 267, 0, 115, 0, 113,
	0, 266, 114, 212, 213, 214, 215, 0, 216, 0,
	268, 116, 269, 117, 118, 0, 0, 217, 270, 119,
	271, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 272, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 273, 136, 274, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 275, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 276, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 957, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 955, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 1060, 0,
	105, 106, 207, 0, 107, 0, 108, 960, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 1058, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	959, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 1059, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 957, 201, 0, 0, 952, 84, 85,
	86, 0, 87, 955, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 960, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 951, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 959, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	958, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 1318, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 444, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 707, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 444, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 492, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 449, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 444,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 361,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 360, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 1232, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 1230,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 1219, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 823, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 375, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 692,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 0, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 541,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 537, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 498, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 210, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 386,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 385, 232, 233, 0, 0, 381, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 210, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 386, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 385, 232,
	233, 0, 0, 381, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 477, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 145,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 474,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 120, 0,
	0, 121, 0, 122, 123, 124, 125, 126, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 225, 154, 0,
	155, 156, 157, 0, 226, 158, 159, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	231, 232, 233, 0, 0, 173, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 471, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	139, 0, 222, 140, 223, 141, 0, 142, 143, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 154, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 73, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 0, 0, 0, 0, 189, 0, 0, 0, 0,
	79, 80, 190, 191, 192, 193, 81, 194, 195, 0,
	82, 196, 197, 83, 0, 0, 198, 199, 200, 0,
	201, 0, 0, 0, 84, 85, 86, 0, 87, 0,
	88, 89, 90, 0, 0, 91, 92, 0, 0, 0,
	0, 0, 0, 93, 94, 95, 96, 202, 97, 203,
	204, 0, 98, 0, 99, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 205, 103, 104, 206, 0,
	0, 0, 105, 106, 207, 0, 107, 0, 108, 0,
	0, 0, 0, 109, 208, 0, 209, 0, 110, 111,
	112, 469, 211, 0, 0, 115, 0, 113, 0, 0,
	114, 212, 213, 214, 215, 0, 216, 0, 0, 116,
	0, 117, 118, 0, 0, 217, 0, 119, 0, 0,
	120, 0, 0, 121, 0, 122, 123, 124, 125, 126,
	0, 127, 128, 131, 129, 0, 130, 0, 218, 132,
	219, 133, 134, 0, 0, 0, 0, 0, 135, 220,
	0, 136, 0, 221, 137, 138, 139, 0, 222, 140,
	223, 141, 0, 142, 143, 144, 224, 145, 146, 0,
	148, 149, 147, 150, 0, 151, 0, 152, 153, 225,
	154, 0, 155, 156, 157, 0, 226, 158, 159, 0,
	160, 161, 0, 162, 227, 228, 163, 0, 169, 164,
	165, 166, 168, 229, 167, 230, 0, 170, 0, 171,
	172, 0, 231, 232, 233, 0, 0, 173, 234, 235,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 236, 237, 73, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	0, 0, 0, 76, 77, 0, 78, 0, 0, 0,
	0, 189, 0, 0, 0, 0, 79, 80, 190, 191,
	192, 193, 81, 194, 195, 0, 82, 196, 197, 83,
	0, 0, 198, 199, 200, 0, 201, 0, 0, 0,
	84, 85, 86, 0, 87, 0, 88, 89, 90, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 0, 93,
	94, 95, 96, 202, 97, 203, 204, 0, 98, 0,
	99, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 205, 103, 104, 206, 0, 0, 0, 105, 106,
	207, 0, 107, 0, 108, 0, 0, 0, 0, 109,
	208, 0, 209, 0, 110, 111, 112, 452, 211, 0,
	0, 115, 0, 113, 0, 0, 114, 212, 213, 214,
	215, 0, 216, 0, 0, 116, 0, 117, 118, 0,
	0, 217, 0, 119, 0, 0, 120, 0, 0, 121,
	0, 122, 123, 124, 125, 126, 0, 127, 128, 131,
	129, 0, 130, 0, 218, 132, 219, 133, 134, 0,
	0, 0, 0, 0, 135, 220, 0, 136, 0, 221,
	137, 138, 139, 0, 222, 140, 223, 141, 0, 142,
	143, 144, 224, 145, 146, 0, 148, 149, 147, 150,
	0, 151, 0, 152, 153, 225, 154, 0, 155, 156,
	157, 0, 226, 158, 159, 0, 160, 161, 0, 162,
	227, 228, 163, 0, 169, 164, 165, 166, 168, 229,
	167, 230, 0, 170, 0, 171, 172, 0, 231, 232,
	233, 0, 0, 173, 234, 235, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 236, 237, 73, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 0, 0, 0, 76,
	77, 0, 78, 0, 0, 0, 0, 189, 0, 0,
	0, 0, 79, 80, 190, 191, 192, 193, 81, 194,
	195, 0, 82, 196, 197, 83, 0, 0, 198, 199,
	200, 0, 201, 0, 0, 0, 84, 85, 86, 0,
	87, 0, 88, 89, 90, 0, 0, 91, 92, 0,
	0, 0, 0, 0, 0, 93, 94, 95, 96, 202,
	97, 203, 204, 0, 98, 0, 99, 0, 0, 0,
	100, 101, 0, 102, 0, 0, 0, 205, 103, 104,
	206, 0, 0, 0, 105, 106, 207, 0, 107, 0,
	108, 0, 0, 0, 0, 109, 208, 0, 209, 0,
	110, 111, 112, 210, 211, 0, 0, 115, 0, 113,
	0, 0, 114, 212, 213, 214, 215, 0, 216, 0,
	0, 116, 0, 117, 118, 0, 0, 217, 0, 119,
	0, 0, 120, 0, 0, 121, 0, 122, 123, 124,
	125, 126, 0, 127, 128, 131, 129, 0, 130, 0,
	218, 132, 219, 133, 134, 0, 0, 0, 0, 0,
	135, 220, 0, 136, 0, 221, 137, 138, 139, 0,
	222, 140, 223, 141, 0, 142, 143, 144, 224, 433,
	146, 0, 148, 149, 147, 150, 0, 151, 0, 152,
	153, 225, 154, 0, 155, 156, 157, 0, 226, 158,
	159, 0, 160, 161, 0, 162, 227, 228, 163, 0,
	169, 164, 165, 166, 168, 229, 167, 230, 0, 170,
	0, 171, 172, 0, 231, 232, 233, 0, 0, 173,
	234, 235, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 236, 237, 73,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 0, 0, 0, 76, 77, 0, 78, 0,
	0, 0, 0, 189, 0, 0, 0, 0, 79, 80,
	190, 191, 192, 193, 81, 194, 195, 0, 82, 196,
	197, 83, 0, 0, 198, 199, 200, 0, 201, 0,
	0, 0, 84, 85, 86, 0, 87, 0, 88, 89,
	90, 0, 0, 91, 92, 0, 0, 0, 0, 0,
	0, 93, 94, 95, 96, 202, 97, 203, 204, 0,
	98, 0, 99, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 205, 103, 104, 206, 0, 0, 0,
	105, 106, 207, 0, 107, 0, 108, 0, 0, 0,
	0, 109, 208, 0, 209, 0, 110, 111, 112, 210,
	211, 0, 0, 115, 0, 113, 0, 0, 114, 212,
	213, 214, 215, 0, 216, 0, 0, 116, 0, 117,
	118, 0, 0, 217, 0, 119, 0, 0, 378, 0,
	0, 121, 0, 122, 123, 124, 125, 386, 0, 127,
	128, 131, 129, 0, 130, 0, 218, 132, 219, 133,
	134, 0, 0, 0, 0, 0, 135, 220, 0, 136,
	0, 221, 137, 138, 139, 0, 222, 140, 223, 141,
	0, 142, 143, 144, 224, 145, 146, 0, 148, 149,
	147, 150, 0, 151, 0, 152, 153, 380, 154, 0,
	155, 156, 157, 0, 226, 158, 379, 0, 160, 161,
	0, 162, 227, 228, 163, 0, 169, 164, 165, 166,
	168, 229, 167, 230, 0, 170, 0, 171, 172, 0,
	385, 232, 233, 0, 0, 381, 234, 235, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 236, 237, 73, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 0, 0,
	0, 76, 77, 0, 78, 0, 0, 0, 0, 189,
	0, 0, 0, 0, 79, 80, 190, 191, 192, 193,
	81, 194, 195, 0, 82, 196, 197, 83, 0, 0,
	198, 199, 200, 0, 201, 0, 0, 0, 84, 85,
	86, 0, 87, 0, 88, 89, 90, 0, 0, 91,
	92, 0, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 202, 97, 203, 204, 0, 98, 0, 99, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 205,
	103, 104, 206, 0, 0, 0, 105, 106, 207, 0,
	107, 0, 108, 0, 0, 0, 0, 109, 208, 0,
	209, 0, 110, 111, 112, 210, 211, 0, 0, 115,
	0, 113, 0, 0, 114, 212, 213, 214, 215, 0,
	216, 0, 0, 116, 0, 117, 118, 0, 0, 217,
	0, 119, 0, 0, 120, 0, 0, 121, 0, 122,
	123, 124, 125, 126, 0, 127, 128, 131, 129, 0,
	130, 0, 218, 132, 219, 133, 134, 0, 0, 0,
	0, 0, 135, 220, 0, 136, 0, 221, 137, 138,
	0, 0, 222, 140, 223, 141, 0, 142, 0, 144,
	224, 145, 146, 0, 148, 149, 147, 150, 0, 151,
	0, 152, 153, 225, 0, 0, 155, 156, 157, 0,
	226, 158, 159, 0, 160, 161, 0, 162, 227, 228,
	163, 0, 169, 164, 165, 166, 168, 229, 167, 230,
	0, 170, 0, 171, 172, 0, 231, 232, 233, 0,
	0, 173, 234, 235, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 236,
	237, 0, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	0, 0, 0, 0, 0, 852, 0, 883, 849, 850,
	0, 869, 870, 871, 879, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 851, 0, 0, 0,
	0, 852, 866, 883, 0, 0, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 0,
	0, 0, 851, 872, 0, 0, 0, 0, 866, 0,
	852, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 851, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 876, 884,
	0, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 876, 884, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 857, 0, 0, 0, 882,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 874,
	0, 873, 0, 876, 884, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 874, 0,
	0, 0, 0, 0, 867, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 875, 0, 0, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 0, 0, 0, 0, 0, 0, 1417, 0, 875,
	0, 0, 863, 864, 865, 0, 862, 859, 860, 861,
	853, 854, 855, 856, 858, 0, 878, 0, 0, 0,
	0, 1375, 1376, 1416, 1393, 1394, 1395, 0, 875, 0,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 0, 0, 0, 0,
	849, 850, 1415, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 1390, 0, 852, 0, 883, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 0, 0, 0, 852,
	866, 883, 0, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 1381,
	851, 872, 0, 0, 0, 0, 866, 0, 852, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 0, 1396, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 1391, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 884, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 873,
	0, 876, 884, 867, 0, 1392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 874, 0, 0, 0,
	0, 0, 867, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 1387, 1388, 1389, 0, 1386,
	1383, 1384, 1385, 1377, 1378, 1379, 1380, 1382, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 0, 0, 0, 1369, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 0, 0,
	0, 1367, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 849, 850, 1822, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 852, 0,
	883, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 851,
	0, 0, 0, 0, 852, 866, 883, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 851, 872, 0, 0, 0,
	0, 866, 0, 852, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 876, 884, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 873, 0, 876, 884, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 874, 0, 0, 0, 0, 0, 867, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 1820, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 1375, 1376, 1801, 1393, 1394, 1395, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 1519, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	849, 850, 1776, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 1390, 0, 852, 0, 883, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 0, 0, 0, 852,
	866, 883, 0, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 1381,
	851, 872, 0, 0, 0, 0, 866, 0, 852, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 0, 1396, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 1391, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 884, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 873,
	0, 876, 884, 867, 0, 1392, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 874, 0, 0, 0,
	0, 0, 867, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 1387, 1388, 1389, 0, 1386,
	1383, 1384, 1385, 1377, 1378, 1379, 1380, 1382, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 1771, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 1767, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 849, 850, 1702, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 852, 0,
	883, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 851,
	0, 0, 0, 0, 852, 866, 883, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 851, 872, 0, 0, 0,
	0, 866, 0, 852, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 876, 884, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 873, 0, 876, 884, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 874, 0, 0, 0, 0, 0, 867, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 1701, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 1691, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	849, 850, 1608, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 852, 0, 883, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 0, 0, 0, 852,
	866, 883, 0, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	851, 872, 0, 0, 0, 0, 866, 0, 852, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 884, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 873,
	0, 876, 884, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 874, 0, 0, 0,
	0, 0, 867, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 1541, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 1525, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 849, 850, 1140, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 0, 0, 0, 0, 0, 852, 0,
	883, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 872, 0, 851,
	0, 0, 0, 0, 852, 866, 883, 0, 0, 0,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 851, 872, 0, 0, 0,
	0, 866, 0, 852, 0, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 851, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 0, 0, 0, 0, 857,
	1890, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 876, 884, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 857, 0,
	1407, 0, 882, 1406, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 873, 0, 876, 884, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 874, 0, 0, 0, 0, 0, 867, 0, 868,
	0, 0, 0, 1889, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 1455, 0, 0, 0, 0,
	0, 0, 875, 849, 850, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 0, 878,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 851, 878, 849,
	850, 0, 869, 870, 871, 879, 880, 881, 0, 0,
	0, 0, 0, 0, 0, 872, 0, 0, 0, 886,
	1073, 0, 852, 0, 883, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 872, 0, 851, 0, 885, 0, 0, 852, 866,
	883, 857, 0, 0, 0, 0, 0, 849, 850, 0,
	869, 870, 871, 879, 880, 881, 0, 0, 0, 851,
	0, 0, 0, 872, 0, 866, 0, 1074, 0, 0,
	852, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	867, 851, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 0, 876, 884, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	874, 876, 884, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 857, 882, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 874, 0, 873, 0,
	0, 0, 867, 876, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 874, 0,
	0, 0, 0, 868, 867, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 428, 0, 868,
	0, 862, 859, 860, 861, 853, 854, 855, 856, 858,
	877, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 877, 863, 864, 865, 0, 862, 859, 860,
	861, 853, 854, 855, 856, 858, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 863, 864, 865, 0, 862, 859, 860, 861, 853,
	854, 855, 856, 858, 0, 878, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 0, 0, 0, 0, 0, 852,
	0, 883, 849, 850, 0, 869, 870, 871, 879, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 872, 0,
	851, 0, 0, 0, 0, 852, 866, 883, 0, 0,
	0, 849, 850, 0, 869, 870, 871, 879, 880, 881,
	0, 0, 0, 0, 0, 0, 851, 872, 0, 0,
	0, 1408, 866, 0, 852, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 851, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 876, 884, 0, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 1413, 0, 882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 876, 884,
	0, 0, 0, 867, 0, 0, 0, 0, 0, 857,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 874, 0, 873, 0, 876, 884, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 874, 0, 0, 0, 0, 0, 867, 0,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	1535, 0, 0, 0, 0, 0, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 849, 850, 863, 864, 865, 0,
	862, 859, 860, 861, 853, 854, 855, 856, 858, 0,
	878, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 0, 875, 0, 0, 863, 864, 865, 0, 862,
	859, 860, 861, 853, 854, 855, 856, 858, 851, 878,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 872, 0, 0, 0,
	0, 0, 0, 852, 0, 883, 849, 850, 0, 869,
	870, 871, 879, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 872, 0, 851, 0, 1366, 0, 0, 852,
	866, 883, 857, 0, 0, 849, 850, 0, 869, 870,
	871, 879, 880, 881, 0, 0, 0, 0, 0, 0,
	851, 872, 0, 0, 0, 0, 866, 0, 852, 0,
	883, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 851,
	0, 867, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 876, 884, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 874, 876, 884, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 882, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 874, 0, 873,
	0, 876, 884, 867, 0, 0, 0, 0, 0, 0,
	1373, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 874, 0, 0, 0,
	0, 0, 867, 0, 868, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	868, 0, 0, 859, 860, 861, 853, 854, 855, 856,
	858, 877, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	863, 864, 865, 0, 862, 859, 860, 861, 853, 854,
	855, 856, 858, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 863,
	864, 865, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 849, 850, 0, 869, 870, 871,
	879, 880, 881, 0, 0, 27, 0, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 49, 852, 0, 883,
	849, 850, 0, 869, 870, 871, 879, 880, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 851, 0,
	51, 0, 0, 852, 866, 883, 28, 0, 56, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 851, 0, 0, 40, 0, 0,
	866, 0, 0, 0, 35, 0, 0, 52, 0, 0,
	0, 39, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 37, 0, 0, 0, 0, 0, 0,
	876, 884, 0, 0, 0, 849, 850, 0, 857, 0,
	0, 879, 880, 881, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 874, 876, 884, 852, 0,
	883, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 0, 0, 0, 0, 851,
	0, 874, 0, 0, 0, 866, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	42, 0, 53, 0, 0, 0, 0, 43, 868, 0,
	63, 0, 0, 0, 0, 46, 48, 0, 0, 877,
	0, 0, 0, 857, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 65, 868, 0, 0, 0, 0, 0,
	0, 876, 884, 0, 0, 877, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 0, 0, 0, 874, 0, 61, 0,
	0, 0, 867, 0, 62, 875, 0, 0, 863, 864,
	865, 0, 862, 859, 860, 861, 853, 854, 855, 856,
	858, 0, 878, 60, 0, 0, 0, 0, 0, 0,
	0, 875, 0, 0, 863, 864, 865, 0, 862, 859,
	860, 861, 853, 854, 855, 856, 858, 0, 878, 729,
	723, 746, 717, 737, 736, 0, 0, 719, 718, 868,
	0, 0, 748, 747, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 734, 733, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	0, 0, 0, 862, 859, 860, 861, 853, 854, 855,
	856, 858, 0, 878, 0, 0, 0, 724, 725, 726,
	727, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 721, 0, 0, 0, 0, 0, 0, 0,
	728, 722, 0, 0, 0, 0, 0, 0, 0, 750,
	0, 0, 0, 0, 0, 0, 720, 0, 0, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749,
}
var sqlPact = [...]int{

	24872, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 762, 16363, -1000,
	-1000, -1000, -1000, -1000, 663, 647, 170, 4540, 16363, 16363,
	16097, 1320, 1320, 17693, -1000, -1000, 20885, -1000, 1880, 476,
	490, 476, 476, 504, 17693, 601, 614, 123, -1000, 692,
	-13, 20619, 16363, 1288, 26, 15033, 301, 24872, 15831, 20353,
	16363, 310, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1134, 1010,
	1009, 15033, 20087, 19821, 19555, 19289, -1000, 10204, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 600, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 306, 305, -1000,
	15565, -1000, 843, -1000, 25, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 842, -1000, 16363, -1000, -1000, 19023, 18757,
	304, 800, -1000, -1000, 487, 379, 1303, -1000, 35, -1000,
	-1000, 1130, -1000, 831, 1129, 1128, 1126, 1123, 1120, 1116,
	376, 839, -1000, 598, 800, -1000, 800, -1000, -1000, -1000,
	583, 17693, -1000, 15033, -1000, 18491, 16363, 1025, 18225, -1000,
	692, -1000, -1000, -1000, 865, 1282, 1282, 1282, 1323, 120,
	119, 123, 12, 16363, -1000, 302, 12, 7132, 7132, -1000,
	-1000, 301, -1000, 337, 13166, -1000, 7690, -1000, 790, 1194,
	401, 668, 1188, -96, 725, 628, 12358, 34, -1000, -1000,
	-1000, 9088, 4263, 15033, 16363, 16363, 658, 17959, -1000, 1186,
	113, 1184, -1000, 99, 1183, -1000, 99, 1181, 6, -1000,
	-1000, -1000, -1000, -1000, -1000, 301, 15299, 1370, 25163, -1000,
	9088, -1000, -1000, 13435, 934, 13435, -1000, -1000, 1367, -1000,
	9088, -1000, 24, 18, 942, 976, 10749, 10483, 1243, 907,
	-1000, -1000, -1000, 33, 4540, 16363, 1143, 13435, 16363, 16363,
	16363, 16363, 16363, 16363, -1000, 937, -1000, 16363, -1000, 15,
	13, -1000, 17693, -1000, 115, -1000, 300, 904, 27, 17427,
	1205, 903, -1000, 865, -1000, 851, 928, 8251, 9088, 123,
	-1000, -1000, 123, 123, 9088, -1000, -1000, 16363, 12, 1366,
	16363, 68, -1000, 23865, -1000, -1000, 9088, 9088, 9088, 9088,
	9088, 795, -1000, -1000, -1000, 5395, -1000, -1000, 34, 298,
	316, -1000, -1000, 295, 34, -1000, -1000, -1000, -1000, 285,
	1439, 410, -1000, -1000, -1000, 9088, 389, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1141, 283, 281, -1000,
	-1000, -1000, -1000, 280, 279, 273, 272, 269, 268, 266,
	261, 259, 258, 255, 246, 240, 237, 746, -1000, 428,
	-1000, -1000, 428, 428, -1000, 230, 230, 231, -1000, -1000,
	-1000, -1000, 230, -1000, -1000, -1000, 427, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 236, 68, -1000, -1000, -1000, 16363,
	-6, -1000, 24585, -1000, 1, 704, -1000, 14501, 1308, 1271,
	1281, 15033, 1348, 1345, 578, 16363, 16363, 562, -1000, 1115,
	-10, -1000, -1000, 2608, -1000, -1000, 406, 86, 1365, 86,
	12628, -1000, 16363, 16363, -1000, 16363, -1000, -1000, 16363, -1000,
	16363, 16363, -1000, 16363, 157, 13969, 706, 1180, -13, -11,
	-1000, 1372, -1000, -1000, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 231, 746, 230, 230, 230, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 427, -1000, -1000, 428, 428, 428, -1000,
	-1000, -12, 24585, 559, 8, 13702, 16363, -1000, 32, -1000,
	-1000, 1111, 473, -16, 736, 1006, 757, -1000, -1000, -1000,
	-1000, 11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1409, -1000, -1000, -1000, -1000, 1429, 11, -1000,
	-1000, -1000, -1000, -1000, 1436, -1000, -1000, -1000, 4540, -1000,
	-1000, -1000, 16363, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 736, 1006, -1000, -1000, 15033, 14235, 1361, 1179,
	1358, 16363, 830, 902, -1000, -1000, 356, 1173, -1000, -1000,
	-1000, -1000, 24585, -1000, 24585, 690, 1015, -1000, 1015, 10,
	-1000, 23839, -1000, 216, -18, -1000, 406, 7132, 12089, 25163,
	25163, 16363, 593, 9088, 9088, 9088, 9088, 9088, 9088, 9088,
	9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088, 9088,
	9088, 9088, 9088, 9088, 9088, 1076, 9088, 549, 9088, 9088,
	9088, 9088, 977, 825, 201, 4540, -1000, 603, 603, 603,
	24900, 24900, 189, 23, 23205, 9, 34, -1000, -1000, 6850,
	6551, 34, 4817, -1000, 626, 1427, 416, 24585, 1145, 1051,
	213, 111, 108, 9088, 9088, 9367, 9088, 9646, 9088, 9088,
	5674, 9088, 9088, 9088, 9088, 9088, 9088, -1000, 211, -1000,
	-1000, -1000, -1000, 1426, -1000, -1000, 1421, -1000, 592, 590,
	1420, 406, 107, 7690, -1000, 706, 16363, 16363, 16363, -1000,
	-1000, 894, 17161, 889, 25163, 16363, -1000, 210, 209, 973,
	961, 16363, 16363, 16895, 16629, 16363, 756, 208, 205, 16363,
	710, -1000, 16363, 620, 1100, 16363, -1000, 9088, 685, 9088,
	792, -1000, 11550, 430, 16363, 697, 66, -1000, -1000, -1000,
	353, 16363, -1000, -1000, -1000, 113, -1000, 99, 99, -1000,
	-1000, 15033, -1000, -1000, -1000, -1000, -1000, -1000, 25163, 331,
	320, -1000, 1419, 546, -1000, 542, 540, 539, -1000, 202,
	-1000, 9088, 16363, 13702, 8, 7, -1000, -1000, 16363, 1006,
	-1000, -1000, -1000, -1000, 669, -1000, 733, -1000, 11015, -1000,
	-1000, -1000, 626, -1000, -4, -1000, -1000, -1000, -1000, 106,
	-23, 2, 25163, -1000, -1000, -1000, -1000, -1000, 16363, 254,
	16363, -13, 16363, -13, 16363, 1165, 1433, 16363, -1000, -1000,
	-1000, 9088, -1000, -1000, -1000, -13, 16363, -1000, 1047, -1000,
	-32, 1148, -146, 14767, -1000, 11281, -1000, -1000, -1000, 365,
	270, 270, 471, 471, 471, 471, 886, 886, 924, 24484,
	24995, 24995, 24995, 23793, 720, 720, 24995, 24995, 24995, 24900,
	24874, 299, 9088, 9088, 536, 819, 201, 299, 9088, 1403,
	299, 299, 299, -1000, 676, -1000, -1000, -1000, 1099, 198,
	9646, 9646, -1000, -1000, -1000, 5395, -1000, -1000, 194, 9088,
	-1000, 9088, -53, -67, -1000, -1000, -30, -1000, -1000, -8,
	9088, 9088, 9088, 104, -1000, 103, 597, -1000, 9088, 791,
	190, 184, 9088, -1000, -1000, 24556, 21796, 101, 21770, 1088,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 100, 24530, 98,
	332, -1000, 9646, 9646, 9646, 5395, 179, 97, 23550, -103,
	24241, 7969, 7969, 7969, 95, 24212, 9088, -103, 21477, 21448,
	21422, -31, -37, -38, 1417, -44, 94, 364, 363, 93,
	1047, -1000, -1000, -1000, -1000, 535, 523, 1163, -1000, 877,
	-1000, 438, -1000, 715, 9088, 16363, 176, 175, 787, -1000,
	1162, 933, 1159, 933, -1000, 1, 689, 9088, 9088, -1000,
	520, -1000, -1000, 619, -1000, 23495, -1000, 7132, 24585, -1000,
	688, 1284, -46, -1000, -1000, 7132, 406, 12628, 12089, 7690,
	-70, -1000, -1000, -1000, 706, -1000, 472, 1416, 92, 915,
	771, 728, 672, 1412, 24585, -4, -1000, -4, -1000, -1000,
	-1000, -1000, -1000, -1000, 16363, 1029, -1000, 14235, 174, 16363,
	171, -1000, 169, -1000, 161, 16363, -1000, 1205, -1000, 91,
	-1000, 1043, 1319, -1000, 12089, 856, 999, 984, 12089, 1091,
	799, 799, 799, -1000, 14767, 3975, -1000, -1000, 16363, 160,
	11819, 88, 1148, 9088, 299, 299, 9088, 9646, 9646, -1000,
	299, -1000, -1000, -1000, -1000, 1085, 159, 9088, 25163, 22431,
	3232, -71, 6252, -5, 23176, -1000, -1000, 316, -1000, 87,
	7411, -1000, 23897, -3, -3, -1000, 1432, 1199, -1000, 9088,
	24186, -1000, 12897, 414, 804, 23150, 25163, 25163, -1000, 9088,
	9088, -1000, 1072, 9088, -1000, 25163, 25163, 9646, 9646, 9646,
	9646, 9646, 9646, 9646, 9646, 9646, 9646, 9646, 9646, 9646,
	9646, 9646, 9646, 9646, 9646, 9646, 947, 9646, 1398, 1398,
	1398, -39, 5953, -1000, 1138, 1072, 9088, 9088, 25163, 84,
	83, 82, -1000, 9088, -103, 9088, 9088, 9088, -1000, -1000,
	-1000, 79, -1000, 1411, -1000, -1000, -1000, -1000, 1043, 16363,
	16363, 16363, 1158, -1000, 1961, -1000, 22860, -75, 16363, 16363,
	-1000, 969, 1057, 457, 16363, -1000, 16363, -1000, 16363, 16363,
	16363, -76, -80, 16363, -1000, -1000, -68, 7132, 200, -13,
	-68, 685, -1000, -45, -1000, 352, -1000, 312, 271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 72, -1000, -1000,
	1031, -1000, 3511, 154, 16363, 14235, 1355, 3511, 827, -1000,
	-1000, 392, 9088, 9088, 1148, 605, 12089, 12089, 1140, 983,
	12089, -1000, -1000, -1000, -1000, -1000, -1000, 1044, 150, 16363,
	14767, 482, 299, 2124, 1954, 9088, 25163, 3177, -81, 9088,
	9088, -1000, -86, -1000, 9088, -1000, -1000, 1405, 9088, 70,
	65, 64, -1000, -1000, 24585, 9088, -1000, -1000, 21151, 9088,
	55, -1000, 53, 50, 22831, 24585, 1138, 24585, -1000, -1000,
	443, 443, 1398, 1398, 1398, 1398, 1485, 1485, 1616, 898,
	1784, 1784, 1784, 426, 359, 359, 1784, 1784, 1784, 1070,
	951, 149, 21741, 9088, -87, -1000, -1000, -1000, 24585, 24585,
	49, -1000, -1000, -1000, -103, 3026, 22805, 22515, -1000, 48,
	392, -1000, -1000, -1000, 16363, -1000, 16363, -1000, 16363, 16363,
	1108, 872, -1000, -1000, 960, 146, 9646, 16363, -1000, 813,
	-88, -93, 868, -1000, 867, 9088, -1000, 25163, 933, 933,
	-1000, 507, 500, -1000, -1000, -1000, -68, 1212, 16363, 1266,
	-1000, -1000, 143, -1000, -1000, -1000, 773, -94, -1000, 185,
	1293, 9088, -1000, -1000, 142, 3511, -99, 47, -13, -104,
	16363, -1000, 16363, 24585, -103, 587, -1000, 1140, -1000, 141,
	9088, 12089, -1000, -152, -1000, 351, -1000, 16363, -105, -1000,
	9088, 9088, 3177, -106, -1000, 299, 299, -1000, 22486, -1000,
	23897, -1000, -1000, -1000, 24585, 752, -1000, 22460, -1000, -1000,
	-1000, -1000, -1000, 9646, 1061, 134, 25163, 22170, -1000, -1000,
	9088, -1000, -1000, -1000, -1000, -1000, 1036, -1000, -1000, 16363,
	876, -1000, -1000, 9088, 21741, 131, 1029, 130, -1000, -1000,
	-1000, 705, -1000, -1000, 24585, 1300, -1000, -1000, 16363, 16363,
	563, -110, 16363, -1000, -1000, 5116, 16363, 813, 3511, 1292,
	34, 16363, 1292, 22141, 4817, -117, -1000, 1029, -1000, 813,
	129, -85, -1000, 1352, 1400, -1000, 16363, 24585, -1000, 1044,
	-1000, 4540, -127, -1000, 299, 299, -1000, -1000, 46, 804,
	1316, -1000, 2799, 9646, 25163, -129, -1000, 22115, -1000, -1000,
	1157, 21825, 920, 16363, -1000, 16363, 16363, 444, 16363, -1000,
	-1000, 651, -1000, 406, -1000, 128, 1029, -1000, -1000, -1000,
	-1000, 1293, -8, 813, -1000, 1029, 3511, 16363, 126, -1000,
	-131, -1000, -1000, -1000, -1000, 703, 9088, 2799, -136, -1000,
	-1000, 1118, -1000, 810, 779, 42, -137, 27, -1000, 9088,
	-1000, 12628, -1000, 16363, -1000, 1292, 38, 1029, -1000, -138,
	-1000, -1000, -1000, 37, 8809, 8809, -103, -1000, 16363, -1000,
	820, 812, 637, -1000, -1000, -1000, -1000, -1000, 920, 24585,
	-111, -147, -1000, -1000, -1000, 813, -1000, -1000, -1000, 9925,
	859, 678, 23521, -1000, -1000, -1000, 1219, -1000, 449, 887,
	887, 810, -1000, 900, 1029, 1376, -1000, -1000, -1000, -1000,
	-1000, -1000, 1383, -1000, -1000, 970, -1000, -1000, -1000, -1000,
	-1000, -1000, 8530, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1706, 1704, 1326, 120, 1702, 115, 1698, 1693, 1692,
	1690, 1684, 97, 114, 111, 124, 1683, 1678, 99, 1674,
	1673, 1671, 96, 1661, 1659, 1658, 54, 1655, 1652, 1649,
	1648, 1646, 1645, 95, 28, 131, 2299, 125, 1644, 1643,
	1639, 9, 101, 64, 1638, 98, 1636, 1635, 60, 92,
	104, 1625, 30, 1632, 1630, 136, 24, 15, 184, 100,
	143, 116, 110, 1628, 1624, 1623, 50, 1615, 3, 1610,
	1609, 14, 57, 20, 1607, 33, 18, 1606, 1605, 126,
	1604, 72, 107, 112, 32, 119, 182, 1603, 88, 11,
	83, 1602, 49, 1601, 27, 76, 130, 1594, 53, 149,
	48, 42, 59, 1591, 1590, 1589, 1588, 82, 1587, 85,
	67, 1586, 1584, 77, 1583, 135, 140, 1582, 1580, 118,
	1575, 1573, 1550, 150, 1549, 1547, 147, 1542, 8, 45,
	68, 12, 106, 105, 25, 1537, 22, 1535, 697, 1103,
	1073, 1532, 56, 51, 79, 52, 58, 26, 1531, 1530,
	102, 1529, 1527, 1526, 1524, 1523, 78, 1522, 65, 137,
	23, 61, 84, 31, 43, 80, 121, 146, 103, 1520,
	1519, 109, 1518, 93, 1517, 1516, 1337, 127, 1513, 1508,
	1506, 1324, 1168, 1161, 16, 1499, 1492, 539, 358, 1491,
	1490, 128, 1488, 1487, 138, 142, 34, 1484, 108, 1483,
	94, 1482, 0, 37, 35, 1480, 113, 74, 1479, 1478,
	1476, 1475, 36, 4, 10, 5, 6, 1, 21, 17,
	1474, 1473, 129, 86, 1472, 144, 1471, 1468, 1467, 46,
	1466, 19, 1465, 13, 1464, 1463, 7, 2, 139, 1459,
	90, 1455, 1372, 1452, 141, 1448, 1446, 1346, 81,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 172, 172, 171, 17, 148, 148, 18, 18, 18,
	18, 19, 108, 108, 20, 20, 20, 20, 21, 25,
	238, 238, 238, 242, 242, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 240, 240, 28, 28, 28, 28,
	28, 127, 123, 123, 125, 125, 125, 125, 50, 122,
	122, 122, 122, 124, 124, 124, 124, 195, 194, 194,
	200, 200, 200, 63, 63, 63, 63, 63, 64, 64,
	64, 193, 193, 193, 193, 201, 201, 201, 201, 201,
	201, 65, 65, 65, 199, 199, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 16, 239, 239, 241, 241, 30, 30,
	9, 9, 10, 10, 66, 66, 67, 67, 130, 130,
	130, 130, 68, 68, 46, 46, 46, 129, 210, 210,
	211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
	212, 212, 212, 208, 208, 209, 206, 206, 207, 207,
	207, 207, 245, 245, 128, 128, 71, 71, 215, 215,
	215, 215, 213, 213, 213, 213, 213, 216, 214, 217,
	217, 217, 217, 217, 159, 159, 159, 32, 11, 8,
	8, 112, 112, 75, 75, 163, 163, 163, 57, 57,
	41, 41, 41, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 113, 113, 114, 114, 23, 27, 31, 31,
	31, 31, 31, 247, 247, 54, 54, 54, 54, 55,
	55, 126, 126, 126, 126, 126, 49, 7, 7, 48,
	48, 22, 22, 22, 22, 22, 60, 60, 119, 119,
	119, 121, 121, 120, 120, 120, 98, 98, 33, 80,
	80, 89, 89, 90, 90, 169, 91, 91, 26, 26,
	36, 36, 34, 34, 34, 34, 34, 34, 35, 35,
	37, 37, 37, 37, 37, 37, 37, 223, 223, 223,
	225, 225, 222, 224, 224, 246, 246, 99, 99, 99,
	70, 69, 69, 73, 73, 72, 74, 74, 162, 96,
	96, 96, 96, 115, 116, 116, 117, 117, 118, 118,
	95, 95, 145, 145, 38, 38, 79, 79, 81, 81,
	136, 136, 137, 137, 135, 135, 135, 164, 164, 164,
	164, 165, 165, 165, 165, 165, 165, 160, 160, 160,
	160, 161, 161, 170, 170, 102, 102, 102, 102, 100,
	100, 101, 101, 166, 166, 166, 166, 97, 97, 167,
	167, 167, 131, 131, 173, 173, 173, 78, 78, 78,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 175, 175, 175, 175, 177, 177, 177,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 178, 178, 185, 185, 186, 186,
	187, 188, 179, 179, 180, 180, 181, 182, 189, 189,
	189, 189, 191, 191, 183, 183, 183, 183, 183, 184,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 110, 110, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 218, 218, 218,
	218, 218, 218, 218, 220, 220, 221, 221, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 226, 226, 227, 227, 229,
	229, 230, 230, 231, 232, 232, 232, 233, 234, 234,
	228, 228, 235, 235, 235, 236, 236, 237, 237, 237,
	237, 237, 150, 150, 150, 151, 151, 152, 86, 86,
	147, 147, 146, 146, 146, 149, 149, 103, 190, 190,
	190, 190, 190, 190, 190, 104, 104, 111, 105, 105,
	106, 106, 106, 106, 106, 106, 142, 143, 107, 107,
	107, 144, 144, 153, 157, 157, 156, 155, 155, 154,
	154, 134, 134, 134, 134, 133, 132, 92, 92, 248,
	248, 158, 158, 93, 93, 94, 88, 88, 168, 168,
	168, 168, 82, 82, 62, 62, 83, 83, 58, 58,
	61, 59, 59, 59, 59, 76, 76, 77, 77, 56,
	56, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 192, 192, 192, 51, 51, 51, 52, 52,
	53, 53, 197, 197, 197, 198, 198, 198, 198, 196,
	196, 196, 196, 196, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 2, 2, 0, 2, 0, 8, 8,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 6, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 4, 7, 3,
	0, 6, 6, 8, 5, 7, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 0, 8, 2,
	0, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	3, 0, 2, 0, 2, 3, 3, 0, 1, 3,
	3, 1, 1, 3, 2, 4, 0, 3, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	6, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 121, 194, 99,
	85, 115, 208, 215, -34, -36, 223, -127, 224, 34,
	233, 58, 95, 210, 205, 254, 66, -223, -37, -35,
	301, 276, 282, 218, -38, 241, 268, 304, 241, 129,
	78, -58, -51, 4, -202, -204, 20, 21, 23, 33,
	34, 39, 43, 46, 57, 58, 59, 61, 63, 64,
	65, 68, 69, 76, 77, 78, 79, 81, 85, 87,
	91, 92, 94, 99, 100, 105, 106, 109, 111, 116,
	121, 122, 123, 130, 133, 128, 142, 144, 145, 150,
	153, 156, 158, 159, 160, 161, 162, 164, 165, 167,
	169, 166, 172, 174, 175, 181, 184, 187, 188, 189,
	192, 194, 196, 197, 198, 200, 201, 205, 203, 204,
	206, 208, 210, 211, 213, 215, 216, 217, 220, 221,
	223, 224, 226, 229, 232, 233, 234, 237, 235, 231,
	240, 242, 243, 250, 254, 255, 256, 257, 260, 261,
	262, 265, 266, 267, 272, 277, 278, 279, 280, 28,
	35, 36, 37, 38, 40, 41, 44, 45, 49, 50,
	51, 53, 80, 82, 83, 98, 101, 107, 117, 119,
	124, 125, 134, 135, 136, 137, 139, 148, 171, 173,
	182, 186, 191, 193, 199, 212, 219, 227, 228, 236,
	238, 245, 246, 247, 251, 252, 268, 269, 87, 133,
	262, 261, 78, 129, 241, 271, -15, 301, -26, -6,
	-13, -4, -22, -33, -12, -14, 23, -196, 4, -202,
	-204, -203, -205, 55, 67, 114, 132, 126, 141, 143,
	149, 151, 163, 183, 185, 209, 225, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 42, 47, 48, 52,
	54, 56, 62, 66, 70, 71, 72, 73, 74, 75,
	84, 86, 88, 89, 90, 93, 95, 97, 102, 103,
	104, 110, 112, 113, 115, 118, 120, 127, 129, 131,
	138, 140, 146, 147, 152, 154, 155, 168, 170, 176,
	177, 178, 179, 180, 190, 195, 202, 207, 218, 222,
	230, 239, 241, 244, 248, 249, 253, 258, 259, 263,
	264, 270, 271, 273, 274, 275, 276, -51, -51, -51,
	194, 22, -242, 22, -243, -244, 66, 92, 115, 218,
	133, 87, 261, -242, -55, 215, -51, -123, 153, 221,
	212, 250, -124, -122, -195, 245, 162, -84, -51, 4,
	78, 57, 79, 116, 129, 130, 62, 63, 145, 242,
	245, 250, 22, 66, -247, 250, 250, -247, -247, -54,
	250, 248, -55, -246, 241, 241, 271, -112, 78, 259,
	-35, -37, -36, -72, -73, 258, 138, 97, 180, -34,
	-36, -223, -225, 200, -222, -51, -225, -69, -70, 22,
	89, 305, -166, -58, 178, -94, 301, -3, -166, 124,
	-58, -61, 124, -58, -51, 113, 301, -92, -134, -133,
	-132, 299, 303, 113, 140, 140, -167, -166, -51, 124,
	-62, 124, -61, -85, 124, -84, -85, 124, -172, -171,
	-198, 4, -202, -204, -203, 268, 241, -148, 301, -108,
	301, -51, 22, 177, 305, 177, -51, -123, 51, -123,
	301, -125, -49, -50, 142, 196, 248, 286, 113, 280,
	-65, 5, 84, -87, 303, 113, -239, 177, 113, 113,
	113, 113, 113, 113, 280, 142, 196, 241, -126, -49,
	-50, -126, 248, -55, -97, -166, -84, 124, -84, 129,
	-51, 124, -72, -73, -96, -115, -116, 152, 176, -99,
	22, 89, -99, -99, 43, 302, 302, 305, -225, -77,
	301, -88, -168, -138, 294, -140, 292, 293, 298, 168,
	281, -150, -58, -141, 9, 301, -153, -220, -36, 98,
	29, -151, -152, 212, -51, 7, 8, 5, 6, -56,
	-175, -184, 253, 102, 170, 47, -218, -219, 4, -202,
	-197, -176, -186, -180, -183, 139, 55, 71, 74, 72,
	75, 222, 263, 48, 28, 101, 186, 191, 238, 251,
	252, 124, 171, 125, 53, 117, 148, 91, 36, 38,
	40, 41, 49, 50, 80, 82, 83, 107, 134, 135,
	136, 137, 173, 199, 227, 236, 246, 247, 269, -203,
	-187, -188, -181, -182, -189, -88, -94, 294, -58, 301,
	-93, -158, -138, 84, -43, 203, -42, 21, 23, 92,
	266, 98, 231, 231, 203, 98, 306, 203, 234, 302,
	-82, -58, -134, -138, -196, 294, -167, -60, -58, -60,
	223, -51, 30, 98, -45, 305, 46, 206, 98, -45,
	305, 98, -45, 98, 302, 305, -166, 124, 30, -147,
	-173, -174, -176, -185, -179, -183, -184, 39, 45, 44,
	243, 219, 228, 37, 134, 135, 136, 137, 227, 36,
	199, 107, 91, 83, 82, 173, 41, 40, -187, -188,
	-181, -182, 80, 246, 247, 139, 38, 50, 49, 269,
	236, -86, -138, -238, -83, 241, 78, -59, -51, 294,
	-244, -238, 30, -86, 305, 305, 150, -64, 156, 167,
	122, -194, 84, -200, -193, -159, 9, 253, 102, 177,
	-199, 8, 293, -192, -198, 5, 7, 292, -194, 84,
	69, -201, 5, 4, -184, -159, 84, 153, 303, -196,
	-195, -241, 110, -238, -195, -195, -195, -195, -195, -51,
	150, -195, 305, 305, -55, -45, 305, 301, -71, 168,
	-71, 301, -52, 124, -51, -48, 94, 168, -96, -116,
	-115, -117, -138, 22, -138, -140, -35, -35, -35, -74,
	-162, -138, -222, 30, -76, -51, -79, 305, 113, 10,
	11, 54, 33, 292, 293, 294, 295, 108, 296, 289,
	290, 291, 288, 284, 285, 286, 60, 157, 214, 13,
	14, 15, 26, 179, 151, 281, 126, 225, 298, 16,
	17, 18, 141, 35, 127, 30, 4, -138, -138, -138,
	-138, -138, 185, -36, -138, -86, -92, -36, -146, 299,
	301, -92, 301, 5, 5, 301, -154, -138, -226, 277,
	110, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 193, -191, 272,
	-191, -191, -177, 301, -177, -178, 301, -177, 278, 282,
	301, -79, -58, 305, 302, 305, 248, -113, 62, 56,
	-129, 124, 56, -206, -51, 62, -207, 52, 259, 195,
	112, -113, 62, -113, 62, 62, -166, 33, 33, 248,
	-61, -51, 248, 113, 302, 305, 300, 309, -131, 274,
	-119, -26, 301, 84, 30, -119, -89, -90, -169, -91,
	-58, 301, -51, -51, -61, -62, -84, -85, -85, -15,
	-171, 98, -18, -26, -22, -33, -12, 302, 305, -78,
	29, -109, 301, 279, 160, 81, 123, 159, -110, 217,
	302, 305, 248, 305, -83, -76, -133, -132, 113, 250,
	302, -50, -49, -63, 198, 229, 204, 220, 305, 8,
	7, 7, 5, -196, -240, -51, -50, -49, -166, -66,
	-76, -67, -51, -130, -129, -208, -209, -206, 129, 259,
	103, 30, 98, 30, 177, 168, 286, 98, -118, 212,
	213, 305, -41, 31, 88, 301, 305, 302, -131, -168,
	-81, -164, -166, -36, -165, 301, -173, -173, -84, 245,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, 151, 126, 225, 35, 127, -138, 248, -138,
	-138, -138, -138, 170, 168, 253, 102, 260, 89, 174,
	-248, 239, 32, -144, -36, 301, -196, -150, 212, 301,
	302, 305, -86, -149, 300, -146, -86, 302, 302, -86,
	270, 22, 89, 294, -109, 7, -157, -156, 273, -227,
	105, 118, 301, 302, 302, -138, -138, -103, -138, -190,
	4, 279, 160, 81, 123, 159, 217, -104, -138, -105,
	-139, -140, 292, 293, 298, 301, 212, -106, -138, -86,
	-138, 42, 147, 249, -107, -138, 113, -86, -138, -138,
	-138, -86, -86, -86, 301, 7, 7, 245, 245, 7,
	-131, 302, -158, -42, -58, -51, -51, 168, -129, 124,
	-47, 168, -173, -51, 301, 301, 144, 144, -51, -51,
	124, -51, 124, -51, -51, -43, 203, 301, 301, -51,
	203, -51, 234, 113, -58, -138, -98, 207, -138, -98,
	-121, 177, -82, 268, -51, 207, -80, 305, 113, 286,
	-82, -45, -45, -45, -166, -173, 299, 299, 7, 248,
	248, 248, 248, 301, -138, -240, -59, -240, -49, 257,
	59, 198, -200, -109, 305, 302, 302, 305, -52, 129,
	-52, -26, -84, -26, -58, 98, 5, -51, -162, -18,
	-51, -95, 118, -170, 305, 283, 67, -102, 143, 163,
	114, 149, 209, 132, -135, 306, -161, -160, 30, -51,
	-36, -165, -164, 280, -138, -138, 248, -248, 239, -144,
	-138, 170, 253, 102, 260, 89, 174, 113, 301, -139,
	-139, -86, 301, -86, -138, 300, 300, 305, 302, -73,
	305, -72, -138, -86, -86, 302, 302, -155, -156, 93,
	-138, -232, 184, 301, 301, -138, 30, 305, 302, 305,
	113, 302, -111, 190, 302, 10, 11, 292, 293, 294,
	295, 108, 296, 289, 290, 291, 288, 284, 285, 286,
	60, 157, 214, 13, 14, 15, 141, 127, -139, -139,
	-139, -86, 301, 302, -142, -143, 113, 110, 30, -107,
	-107, -107, 302, 113, -86, 305, 305, 305, 302, 302,
	302, 7, 302, 305, 302, 280, 280, 302, -95, 248,
	248, 98, 168, 265, -210, -207, -138, -76, 301, 301,
	-40, 92, 223, -114, 98, -45, 98, -45, 248, -113,
	62, -86, -86, 248, 234, 300, -88, 207, 61, 302,
	-88, -131, -90, -81, -158, 302, 300, 7, 7, 302,
	160, 123, 159, -110, 159, -110, -110, 7, -51, -68,
	128, -130, 301, -52, 301, 301, -71, 301, -51, -48,
	302, -145, 120, 43, -164, 174, 143, 143, -164, -102,
	143, -100, 183, -100, -100, -161, -196, 307, -51, 301,
	302, -138, -138, -139, -139, 113, 301, -138, -147, 26,
	26, 302, -86, 302, 305, 302, -146, 302, 270, -73,
	-73, -73, 5, 95, -138, 244, -233, -51, 301, 274,
	-72, 302, -173, -173, -138, -138, -142, -138, -173, -173,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, 89,
	168, 174, -139, 305, -86, 302, -143, -142, -138, -138,
	-173, 302, 302, 302, -86, -138, -138, -138, 302, 7,
	-145, -51, -51, -129, 98, -211, 62, -212, 54, 103,
	66, 168, 170, 259, 195, 52, 84, 202, 302, 302,
	-76, -76, 168, 84, 168, 84, 77, 255, -51, -51,
	-58, -51, -51, 302, 302, -51, -88, -120, 301, 177,
	-26, -98, 286, 300, 300, 302, 127, -75, -163, -51,
	-221, 301, -218, -219, -56, 301, -76, -66, 30, -75,
	177, -229, 275, -138, -86, 240, -164, -164, -101, 264,
	177, 143, -164, -137, -136, 111, 166, 301, -76, -160,
	26, 26, -138, -147, 302, -138, -138, 302, -138, 5,
	-138, 302, 302, 302, -138, -234, -51, -138, 302, 302,
	302, 302, -143, 113, 89, 174, 301, -138, 302, 302,
	305, 302, 302, 302, -229, -129, -51, -84, -51, 103,
	124, 170, 144, 301, -139, -58, -128, -245, 65, 237,
	302, 302, 170, 170, -138, -173, -45, -45, 248, 248,
	90, -76, 62, -94, -36, 301, 187, 302, 305, -57,
	-92, 54, -57, -138, 301, -75, 302, 302, -26, 302,
	-58, -230, -231, -51, 245, -101, 301, -138, -164, 305,
	308, 286, -76, 302, -138, -138, 302, 302, -73, -228,
	189, 302, -139, 113, 301, -147, 302, -138, -212, -52,
	168, -138, -53, 301, -68, 301, 202, -44, 54, -51,
	-51, 261, 169, 302, -51, -51, -128, -163, -41, -84,
	-41, 302, -86, 302, -68, -128, 301, 305, 30, 5,
	-76, -136, -196, 302, 302, -73, 43, -139, -147, 302,
	302, 98, 302, -215, 158, -51, -76, -58, -39, 264,
	-84, 223, -131, 301, -68, -57, -73, -128, -68, -75,
	-231, -233, 302, -235, 197, 213, -86, 302, 103, -213,
	-216, -214, 177, 114, 188, 226, 302, 302, -71, -138,
	-89, -76, -41, 302, -68, 302, 302, -236, -237, 35,
	256, 69, -138, -236, -51, -214, 177, -216, 177, 261,
	87, -215, -131, 302, -128, -237, 192, 109, 212, 192,
	109, -217, 165, 206, 46, 223, -217, -213, -46, 46,
	206, -68, 26, 20, 170, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 374, 0, 0, 0,
	0, 0, 0, 0, 348, -2, 0, 130, 0, 304,
	0, 304, 304, 308, 0, 376, 272, 373, -2, 384,
	0, 0, 0, 382, 362, 0, 0, -2, 0, 0,
	0, 0, 778, 805, 806, 807, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 83, 84,
	85, 86, 87, 88, 89, 90, 0, 193, 819, 820,
	821, 822, 823, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
	1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
	1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 96, 103, 104,
	889, 106, 0, 113, 114, 115, 117, 118, 119, 120,
	121, 122, 123, 0, 297, 903, 310, 126, 868, 907,
	973, 921, 133, 143, 0, 979, -2, 147, 77, 176,
	177, 0, 179, 195, 0, 0, 0, 0, 0, 187,
	0, 0, 191, 0, 315, 303, 315, 300, 301, 302,
	305, 0, 296, 0, 375, 0, 0, 0, 0, 271,
	-2, 358, 359, -2, 0, 379, 379, 379, 0, 0,
	359, 0, 367, 893, 370, 788, 368, 0, 0, 381,
	380, 0, 363, 443, 0, 404, 0, 2, 0, 958,
	443, 0, 958, 0, 0, 0, 0, 779, 757, 751,
	752, 0, 0, 0, 0, 0, 0, 449, 67, 958,
	51, 958, 774, 51, 958, 75, 51, 958, 0, 91,
	93, 815, 816, 817, 818, 984, 0, 0, 0, 101,
	0, 105, 107, 0, 0, 0, 309, 127, 948, 129,
	0, 132, 134, 135, 0, 0, 0, 0, 0, 0,
	146, 171, 172, 78, 0, 0, 197, 0, 0, 0,
	0, 0, 0, 0, 188, 0, 190, 0, 298, 311,
	312, 299, 0, 307, 51, 447, 247, 958, 247, 809,
	320, 958, -2, 0, 354, 391, 392, 0, 0, 0,
	377, 378, 0, 0, 0, 350, 351, 0, 369, 0,
	0, 407, 766, 770, 771, 536, 0, 0, 0, 0,
	0, 0, 625, 626, 627, 0, 629, 630, 631, 953,
	0, 635, 636, 973, 778, 791, 792, 793, 794, 0,
	0, 0, 799, 800, 801, 750, 676, 645, -2, -2,
	789, 473, 474, 475, 476, -2, 986, 649, 651, 653,
	654, 655, 656, 0, 937, 954, 969, 970, 978, 982,
	983, 958, 966, 959, 949, 956, 965, 848, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 814,
	498, 499, 504, 505, 507, 407, 405, 444, 445, 0,
	0, 763, 761, 762, 28, 293, 30, 0, 293, 293,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	0, 772, 758, 0, 755, 756, 453, 0, 326, 0,
	0, 450, 0, 0, 69, 0, 49, 50, 0, 71,
	0, 0, 73, 0, 374, 0, 0, 958, 374, 0,
	710, 459, 460, 461, 462, 463, 533, 466, 467, 468,
	469, 470, 471, 472, 480, 481, 482, 483, 484, 485,
	486, 495, 0, 479, 479, 479, 492, 493, 496, 497,
	502, 503, 514, 515, 517, 519, 513, 513, 513, 510,
	511, 0, 708, 0, 110, 0, 843, 776, 781, 782,
	116, 0, 0, 0, 0, 0, 0, 138, 158, 159,
	160, 139, 141, 148, 150, 151, 152, 161, 162, 163,
	164, 264, 0, 266, 174, 175, 802, 0, 140, 142,
	144, 145, 165, 166, 0, 168, 169, 170, 0, 79,
	178, 180, 0, 194, 181, 182, 183, 184, 185, 186,
	189, 192, 0, 0, 306, 267, 0, 205, 0, 0,
	0, 0, 0, 958, 808, 317, 0, 0, 357, 389,
	390, 393, 396, 397, 394, 536, 364, 365, 366, 385,
	386, 282, 371, 0, 0, 785, 453, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 760, 0, 0, 769, 541, 542, 543,
	565, 566, 0, -2, 708, 0, 632, 633, 634, 0,
	0, -2, 0, 796, 533, 0, 0, 749, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 501, 512,
	509, 508, 490, 0, 489, 487, 0, 491, 0, 0,
	0, 453, 0, 0, 765, 0, 0, 0, 0, 292,
	32, 958, 0, 53, 0, 0, 237, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 780, 0, 0, 0, 0, 753, 0, 337, 0,
	337, 328, 0, 0, 0, 324, 340, 341, 343, 344,
	0, 0, 451, 68, 775, 51, 76, 51, 51, 82,
	92, 0, 94, 97, 98, 99, 100, 95, 0, 454,
	456, 464, 0, 520, 521, 522, 523, 524, 525, 534,
	102, 0, 0, 0, 111, 112, 783, 784, 0, 0,
	131, 136, 137, 316, 0, 155, 0, 157, 0, 265,
	804, 803, 533, 80, 196, 124, 313, 314, 448, 0,
	0, 204, 785, 206, 208, 209, 210, 211, 809, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 395, 398,
	399, 0, 388, 280, 281, 374, 0, 787, 401, 767,
	434, 408, 416, 432, 419, 0, 537, 538, 539, 0,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	-2, -2, -2, 557, 558, 559, -2, -2, -2, 563,
	564, -2, 0, 0, 0, 760, 0, -2, 0, 573,
	-2, -2, -2, 577, 0, 580, 582, 584, 0, 0,
	0, 0, 759, 594, 741, 0, 768, 579, 0, 0,
	628, 0, 0, 0, 714, 715, 0, -2, 637, 384,
	0, 0, 0, 0, 797, 0, 748, 744, 0, 686,
	0, 0, 0, 650, 652, 0, 0, 0, 0, 0,
	-2, -2, -2, -2, -2, -2, -2, 0, 0, 0,
	0, 596, 0, 0, 0, 0, 973, 0, 708, 734,
	0, 0, 0, 0, 0, 708, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	401, 446, 764, 31, 284, 0, 0, 0, 34, 958,
	42, 0, 219, 0, 0, 0, 0, 0, 295, 43,
	958, 51, 958, 51, 44, 29, 293, 0, 0, 286,
	0, 283, 59, 0, 773, 0, 66, 0, 452, 321,
	322, 0, 0, 330, 327, 0, 453, 0, 0, 0,
	0, 70, 72, 74, 0, 711, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 108, 777, 109, 128, 153,
	154, 156, 149, 167, 0, 213, 246, 0, 0, 809,
	0, 202, 247, 268, 0, 0, 319, 320, 387, 0,
	786, 403, 0, 406, 0, 0, 0, 0, 0, 0,
	440, 440, 440, 438, 432, 0, 418, 431, 0, 430,
	-2, 419, 0, 0, -2, -2, 0, 0, 0, 595,
	-2, 578, 581, 583, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 709, 712, 713, 0, -2, 0,
	0, 383, 384, 384, 384, 643, 0, 0, 745, 0,
	0, 644, 0, 0, 0, 0, 0, 0, 659, 0,
	0, 661, 0, 0, 662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 599, 600,
	601, 0, 0, 663, 732, 733, 0, 0, 0, 0,
	0, 0, 668, 0, 739, 0, 0, 0, 672, 673,
	674, 0, 477, 0, 494, 516, 518, 506, 403, 0,
	0, 0, 0, 52, 217, 236, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 40, 0, 46, 0, 0,
	0, 0, 0, 0, 60, 754, 336, 0, 335, 0,
	325, 337, 342, 339, 345, 0, 457, 0, 0, 465,
	526, 527, 528, 529, 530, 531, 532, 0, 125, 200,
	0, 207, 0, 0, 0, 205, 0, 0, 0, 318,
	372, 680, 0, 0, 409, 0, 0, 0, 0, 0,
	0, 435, 439, 436, 437, 417, 414, 0, 428, 0,
	421, 540, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 742, 0, 703, 0, -2, 716, 638, 0, 0,
	0, 0, 798, 743, 747, 0, 684, 685, 689, 0,
	0, 648, 0, 0, 0, 717, 726, 727, 597, 598,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	-2, -2, -2, 615, 616, 617, -2, -2, -2, 0,
	0, 0, 728, 0, 0, 706, 730, 731, 736, 737,
	0, 665, 666, 667, 738, 0, 0, 0, 500, 0,
	680, 288, 290, 33, 0, 218, 0, 221, 0, 0,
	0, 0, 227, 228, 0, 0, 0, 0, 238, 245,
	0, 0, 0, 48, 0, 0, 294, 0, 51, 51,
	285, 0, 0, 198, 199, 287, 323, 0, 0, 0,
	329, 338, 0, 458, 455, 535, 0, 0, 273, 279,
	279, 0, 646, 647, 0, 0, 0, 0, 0, 0,
	0, 360, 0, 402, 400, 0, 422, 0, 424, 0,
	0, 0, 426, 0, 412, 0, 411, 0, 0, 420,
	0, 0, -2, 0, 588, -2, -2, 702, 709, 795,
	384, 639, 641, 642, 746, 691, 688, 0, 675, 657,
	658, 660, 725, 0, 0, 0, 0, 709, 705, 664,
	0, 670, 671, 478, 361, 35, 0, 222, 223, 809,
	0, 226, 229, 0, 231, 811, 213, 0, 242, 243,
	240, 0, 37, 38, 47, 55, 39, 45, 0, 0,
	0, 0, 0, 346, 347, 0, 0, 245, 0, 282,
	790, 0, 282, 0, 0, 0, 235, 213, 203, 245,
	0, 679, 681, 0, 0, 423, 0, 442, 425, 0,
	415, 0, 0, 429, -2, -2, 589, 704, 0, 384,
	0, 677, -2, 0, 0, 0, 707, 0, 220, 224,
	0, 0, 251, 0, 239, 0, 0, 57, 0, 289,
	291, 0, 332, 453, 334, 0, 213, 274, 275, 278,
	276, 279, 384, 245, 201, 213, 0, 0, 0, 433,
	0, 413, 410, 427, 640, 694, 0, -2, 0, 623,
	669, 0, 230, 256, 0, 0, 0, 247, 41, 0,
	54, 0, 333, 0, 233, 282, 0, 213, 269, 0,
	682, 683, 441, 0, 0, 0, 690, 624, 0, 232,
	252, 253, 0, 248, 249, 250, 810, 244, 251, 56,
	453, 0, 277, 638, 234, 245, 687, 692, 695, -2,
	924, 840, 0, 693, 225, 254, 0, 255, 0, 0,
	0, 256, 331, 216, 213, 0, 697, 698, 699, 700,
	701, 257, 0, 260, 261, 0, 258, 241, 212, 214,
	215, 270, 0, 259, 262, 263, 696,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 290, 3, 296, 291, 3,
	301, 302, 294, 292, 305, 293, 303, 295, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 309, 304,
	284, 286, 285, 3, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 299, 3, 300, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 307, 288, 308, 298,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 287, 57627, 297, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:741
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:777
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:851
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			unimplementedWithIssue(2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:924
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			unimplemented()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:928
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{ /* SKIP DOC */
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1316
		{
			unimplemented()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			unimplemented()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = Low
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = Normal
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = High
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1434
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1435
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = DropDefault
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1835
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1842
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1845
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1846
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1852
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			unimplemented()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			unimplemented()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1950
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = Ascending
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = Descending
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = true
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = false
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = ""
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = ""
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2158
		{
			unimplementedWithIssue(6637)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2165
		{
			unimplementedWithIssue(6637)
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			unimplementedWithIssue(7841)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2473
		{
			unimplemented()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = true
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = false
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = true
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astFullJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astLeftJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astRightJoin
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astInnerJoin
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			unimplementedWithIssue(2115)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			unimplementedWithIssue(2115)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = nil
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = Window(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.str = ""
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3924
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			unimplemented()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			unimplemented()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			unimplemented()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4424
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4460
		{
			unimplemented()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = DNull
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.str = ""
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
