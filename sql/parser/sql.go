// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VARYING = 57612
const WHEN = 57613
const WHERE = 57614
const WINDOW = 57615
const WITH = 57616
const WITHIN = 57617
const WITHOUT = 57618
const YEAR = 57619
const ZONE = 57620
const NOT_LA = 57621
const WITH_LA = 57622
const AS_LA = 57623
const POSTFIXOP = 57624
const UMINUS = 57625

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4812

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	302, 26,
	-2, 368,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	1, 343,
	176, 343,
	206, 343,
	300, 343,
	302, 343,
	-2, 353,
	-1, 55,
	1, 346,
	176, 346,
	206, 346,
	300, 346,
	302, 346,
	-2, 352,
	-1, 64,
	1, 26,
	302, 26,
	-2, 368,
	-1, 281,
	1, 169,
	302, 169,
	-2, 866,
	-1, 314,
	151, 378,
	175, 378,
	-2, 349,
	-1, 317,
	151, 377,
	175, 377,
	-2, 347,
	-1, 447,
	151, 377,
	175, 377,
	-2, 350,
	-1, 503,
	299, 805,
	-2, 798,
	-1, 504,
	299, 806,
	-2, 799,
	-1, 510,
	5, 513,
	299, 513,
	-2, 956,
	-1, 533,
	5, 479,
	-2, 931,
	-1, 534,
	5, 507,
	299, 507,
	-2, 933,
	-1, 535,
	5, 487,
	-2, 934,
	-1, 536,
	5, 486,
	-2, 935,
	-1, 537,
	5, 507,
	299, 507,
	-2, 938,
	-1, 538,
	5, 507,
	299, 507,
	-2, 939,
	-1, 539,
	5, 508,
	-2, 942,
	-1, 540,
	5, 473,
	-2, 943,
	-1, 541,
	5, 473,
	-2, 944,
	-1, 542,
	5, 489,
	-2, 947,
	-1, 543,
	5, 474,
	-2, 952,
	-1, 544,
	5, 475,
	-2, 953,
	-1, 545,
	5, 476,
	-2, 954,
	-1, 546,
	5, 477,
	-2, 955,
	-1, 547,
	5, 473,
	-2, 959,
	-1, 548,
	5, 480,
	-2, 964,
	-1, 549,
	5, 478,
	-2, 967,
	-1, 550,
	5, 505,
	299, 505,
	-2, 969,
	-1, 551,
	5, 509,
	-2, 972,
	-1, 552,
	5, 511,
	-2, 973,
	-1, 553,
	5, 504,
	299, 504,
	-2, 977,
	-1, 878,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 625,
	-1, 886,
	299, 783,
	-2, 772,
	-1, 1083,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 548,
	-1, 1084,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 549,
	-1, 1085,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 550,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 554,
	-1, 1090,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 555,
	-1, 1091,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 556,
	-1, 1094,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 561,
	-1, 1100,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 563,
	-1, 1103,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 568,
	-1, 1104,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 569,
	-1, 1105,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 570,
	-1, 1130,
	184, 696,
	-2, 699,
	-1, 1300,
	97, 353,
	137, 353,
	151, 353,
	175, 353,
	179, 353,
	257, 353,
	-2, 426,
	-1, 1304,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 562,
	-1, 1305,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 564,
	-1, 1310,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 565,
	-1, 1328,
	184, 695,
	-2, 698,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 566,
	-1, 1496,
	140, 0,
	-2, 580,
	-1, 1504,
	184, 697,
	-2, 700,
	-1, 1538,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 606,
	-1, 1539,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 607,
	-1, 1540,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 608,
	-1, 1544,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 612,
	-1, 1545,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 613,
	-1, 1546,
	13, 0,
	14, 0,
	15, 0,
	282, 0,
	283, 0,
	284, 0,
	-2, 614,
	-1, 1650,
	140, 0,
	-2, 581,
	-1, 1653,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 584,
	-1, 1654,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 586,
	-1, 1741,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 585,
	-1, 1742,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 587,
	-1, 1749,
	140, 0,
	-2, 615,
	-1, 1794,
	140, 0,
	-2, 616,
	-1, 1847,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	279, 0,
	-2, 930,
}

const sqlNprod = 1071
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24450

var sqlAct = [...]int{

	504, 1846, 1826, 963, 1458, 1869, 1827, 1800, 1828, 1693,
	1845, 1055, 971, 805, 41, 881, 1515, 502, 1716, 501,
	318, 494, 1729, 696, 1615, 282, 1064, 1616, 71, 1636,
	1629, 807, 1642, 1575, 18, 1038, 71, 71, 71, 1470,
	589, 71, 339, 1034, 71, 1297, 1228, 1033, 466, 1383,
	1331, 1384, 71, 352, 1296, 1287, 810, 883, 1037, 71,
	71, 566, 569, 71, 1480, 1002, 71, 71, 71, 243,
	972, 1063, 323, 932, 683, 72, 941, 1179, 1140, 1113,
	1281, 1116, 1067, 1176, 697, 351, 325, 54, 25, 986,
	995, 825, 760, 14, 1028, 435, 7, 571, 744, 436,
	554, 476, 585, 353, 467, 913, 771, 317, 354, 371,
	1065, 9, 741, 364, 8, 917, 241, 6, 4, 965,
	367, 54, 366, 248, 1041, 831, 450, 328, 247, 55,
	449, 249, 451, 269, 279, 762, 56, 260, 758, 676,
	740, 326, 360, 454, 1736, 999, 250, 1737, 964, 245,
	1295, 54, 244, 246, 1861, 685, 1843, 1059, 685, 1715,
	685, 1834, 1824, 1819, 1059, 992, 1059, 1005, 322, 1796,
	834, 835, 992, 336, 1790, 1780, 342, 1059, 1715, 1239,
	1770, 322, 581, 1059, 315, 307, 1000, 1743, 1784, 345,
	992, 314, 1740, 837, 1726, 1059, 60, 1715, 1240, 1723,
	1714, 330, 1059, 1715, 1698, 1697, 1675, 1059, 1059, 1005,
	1655, 1326, 1652, 1005, 836, 992, 1327, 833, 1602, 62,
	851, 1005, 1001, 998, 1601, 1587, 1500, 1005, 1059, 1005,
	1444, 1438, 1401, 960, 960, 1402, 832, 1284, 71, 71,
	71, 71, 1399, 374, 1718, 1005, 63, 834, 835, 1398,
	1285, 1397, 1005, 58, 1005, 1328, 71, 323, 1005, 59,
	1325, 1267, 1551, 1503, 1059, 1005, 369, 1265, 842, 556,
	837, 71, 1284, 1060, 71, 71, 1059, 930, 57, 1268,
	1003, 1014, 1004, 991, 1005, 1005, 992, 968, 1059, 1007,
	959, 836, 1330, 960, 929, 691, 1124, 928, 692, 1054,
	355, 1022, 462, 461, 356, 1005, 64, 71, 800, 71,
	799, 71, 752, 71, 686, 751, 852, 686, 375, 686,
	400, 335, 355, 434, 60, 356, 356, 785, 71, 420,
	1844, 1841, 1833, 834, 835, 448, 442, 1791, 1724, 71,
	1680, 997, 1676, 376, 496, 842, 1668, 62, 361, 372,
	1667, 71, 1666, 1661, 1660, 1659, 837, 592, 71, 71,
	71, 1613, 71, 996, 1270, 447, 1566, 1607, 1561, 1354,
	1355, 1560, 408, 853, 63, 1559, 409, 836, 561, 1506,
	1489, 560, 1469, 1448, 1406, 1121, 1403, 1391, 1239, 1382,
	1353, 1350, 1348, 71, 1354, 1355, 1336, 1372, 1373, 1374,
	71, 1335, 71, 1266, 889, 587, 57, 832, 1193, 1836,
	1649, 1147, 689, 374, 374, 684, 1146, 803, 461, 441,
	60, 592, 71, 460, 71, 71, 71, 71, 71, 71,
	71, 842, 593, 1517, 71, 349, 834, 835, 1810, 71,
	439, 1783, 688, 62, 1369, 71, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 315, 863, 594, 1762, 837,
	1760, 786, 314, 71, 457, 458, 71, 1360, 361, 463,
	63, 1751, 1733, 1122, 738, 1721, 1712, 58, 1690, 852,
	836, 1673, 1645, 59, 750, 1623, 1495, 355, 375, 375,
	1606, 356, 1360, 834, 835, 323, 593, 1488, 1466, 678,
	675, 1464, 967, 693, 1463, 886, 1461, 1418, 1417, 829,
	1381, 1344, 1343, 376, 376, 802, 1322, 1318, 1118, 1254,
	1220, 594, 1446, 1219, 1375, 1207, 1206, 838, 839, 840,
	841, 843, 1186, 863, 1145, 1207, 853, 836, 747, 1058,
	1370, 918, 748, 477, 921, 925, 911, 910, 909, 908,
	907, 782, 775, 906, 905, 904, 787, 903, 880, 791,
	792, 793, 794, 795, 790, 71, 902, 901, 798, 900,
	899, 68, 801, 71, 898, 897, 896, 71, 815, 813,
	887, 71, 71, 814, 315, 885, 57, 315, 315, 1162,
	827, 821, 804, 340, 822, 823, 465, 1371, 406, 396,
	394, 1354, 1355, 1612, 1611, 884, 337, 1248, 935, 344,
	347, 1247, 846, 838, 839, 840, 841, 843, 562, 863,
	414, 350, 834, 835, 1738, 437, 1610, 470, 1241, 780,
	779, 1049, 773, 768, 577, 1405, 923, 894, 272, 1404,
	924, 1303, 430, 915, 916, 415, 1630, 946, 948, 1356,
	1357, 1358, 1359, 1361, 964, 1518, 1141, 919, 914, 1235,
	999, 1339, 258, 922, 726, 1412, 1366, 1367, 1368, 234,
	1365, 1362, 1363, 1364, 1356, 1357, 1358, 1359, 1361, 1806,
	71, 1769, 71, 71, 1857, 71, 926, 951, 71, 1595,
	71, 71, 1858, 374, 1261, 1013, 562, 938, 890, 1360,
	572, 1000, 573, 955, 300, 306, 261, 305, 301, 783,
	312, 966, 1706, 966, 235, 981, 369, 1705, 321, 1432,
	1354, 1355, 863, 1372, 1373, 1374, 243, 266, 1409, 1408,
	987, 1306, 262, 555, 934, 1315, 1648, 1001, 998, 703,
	1429, 1253, 1252, 71, 71, 1251, 1250, 1101, 1313, 1006,
	957, 572, 1152, 573, 412, 263, 954, 438, 320, 433,
	781, 934, 572, 732, 573, 1731, 1190, 933, 375, 1189,
	1369, 574, 265, 1768, 1072, 392, 309, 784, 54, 863,
	248, 337, 54, 347, 989, 247, 592, 1009, 249, 988,
	71, 413, 990, 376, 1633, 1003, 1695, 238, 970, 372,
	322, 980, 984, 250, 71, 71, 245, 979, 983, 244,
	246, 982, 1115, 1445, 67, 1311, 1115, 1433, 1360, 1316,
	509, 1224, 574, 583, 1808, 679, 1027, 1003, 1866, 1155,
	834, 835, 558, 574, 71, 1061, 919, 71, 922, 1141,
	916, 915, 237, 236, 1420, 579, 1453, 239, 1016, 1010,
	1375, 1015, 337, 837, 1011, 1008, 997, 264, 557, 1354,
	1355, 593, 1071, 1233, 66, 1857, 1370, 1052, 1053, 1229,
	1156, 592, 310, 578, 836, 1877, 1111, 506, 319, 942,
	1830, 1218, 563, 1358, 1359, 1361, 594, 834, 835, 1109,
	313, 1260, 1436, 1229, 586, 1237, 1031, 1872, 1312, 1030,
	267, 337, 677, 677, 1003, 1314, 1157, 1154, 863, 1369,
	837, 1119, 403, 405, 1032, 774, 769, 1222, 582, 1069,
	1070, 1763, 1262, 1371, 410, 1427, 912, 411, 842, 1098,
	1192, 836, 71, 71, 71, 587, 337, 1062, 71, 945,
	587, 71, 1128, 570, 575, 1747, 593, 71, 71, 71,
	71, 71, 931, 1831, 1107, 71, 1106, 1360, 71, 240,
	1112, 71, 1125, 1129, 1158, 1132, 685, 1696, 71, 877,
	71, 594, 431, 1200, 1421, 1713, 65, 71, 411, 1120,
	1137, 1171, 323, 1342, 1865, 842, 71, 1183, 1184, 1185,
	1194, 1832, 1366, 1367, 1368, 575, 1365, 1362, 1363, 1364,
	1356, 1357, 1358, 1359, 1361, 1370, 575, 71, 71, 261,
	1018, 1821, 1231, 71, 1217, 1870, 1020, 1481, 1308, 1096,
	1099, 944, 1114, 374, 1204, 1153, 432, 1822, 1195, 322,
	266, 1829, 1021, 852, 1878, 262, 1856, 1290, 1854, 1108,
	1628, 1019, 1047, 71, 1095, 71, 1110, 71, 71, 423,
	1450, 71, 401, 453, 1293, 1243, 1871, 1244, 263, 399,
	71, 1474, 1371, 452, 1883, 1479, 1864, 71, 1583, 71,
	1234, 1291, 1273, 1873, 1269, 265, 1271, 1246, 1547, 1242,
	1272, 820, 1700, 323, 1699, 943, 1451, 453, 1671, 452,
	853, 1688, 1757, 987, 1591, 1302, 1245, 1411, 375, 1203,
	1584, 1256, 1199, 1594, 726, 726, 1257, 1258, 927, 1259,
	1593, 1286, 840, 841, 843, 1263, 863, 1264, 1097, 1048,
	337, 1204, 812, 376, 347, 686, 806, 1449, 725, 1801,
	797, 1292, 753, 323, 1643, 1365, 1362, 1363, 1364, 1356,
	1357, 1358, 1359, 1361, 1003, 54, 1278, 989, 1279, 1882,
	757, 1301, 988, 1329, 1689, 990, 1548, 1209, 1290, 1639,
	264, 1208, 1549, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 1672, 863, 1476, 1293, 1475, 1590, 1307, 703,
	703, 1309, 323, 1579, 755, 1580, 1288, 410, 1644, 359,
	358, 320, 1291, 1592, 444, 756, 1321, 1459, 1614, 1686,
	1323, 1471, 1282, 267, 1144, 1750, 1289, 1670, 71, 726,
	1582, 1385, 1333, 1334, 1494, 702, 1349, 1585, 1338, 1687,
	1638, 1317, 1225, 975, 1012, 958, 429, 728, 347, 428,
	427, 347, 426, 1354, 1355, 425, 424, 421, 357, 1386,
	71, 71, 1440, 895, 789, 1380, 1143, 1825, 1798, 1572,
	1425, 1416, 1292, 727, 1423, 1410, 1393, 1388, 1389, 1390,
	834, 835, 726, 1275, 1050, 1046, 71, 985, 690, 71,
	687, 71, 699, 1407, 1581, 682, 71, 580, 1435, 576,
	1512, 811, 1414, 837, 703, 71, 1439, 1465, 1424, 71,
	1426, 1707, 1428, 1056, 1858, 71, 592, 1430, 1431, 71,
	777, 71, 1462, 1443, 836, 455, 726, 1637, 1217, 333,
	1441, 1473, 1442, 417, 934, 1477, 1709, 1452, 1454, 1455,
	949, 950, 3, 489, 1437, 1718, 934, 1460, 1765, 1793,
	251, 1360, 947, 1472, 1468, 459, 1485, 703, 257, 953,
	1785, 1626, 1497, 71, 299, 1478, 952, 337, 1045, 1484,
	1057, 69, 969, 1508, 1509, 1510, 1482, 1483, 842, 252,
	253, 254, 828, 749, 271, 695, 994, 283, 1880, 1881,
	1567, 593, 456, 53, 1456, 271, 334, 337, 268, 1370,
	1447, 703, 329, 329, 1400, 1505, 69, 341, 1249, 69,
	69, 348, 418, 302, 303, 1519, 594, 1354, 1355, 33,
	1501, 1524, 834, 835, 1024, 1023, 852, 34, 1191, 71,
	71, 71, 1188, 1187, 1138, 1025, 1786, 1657, 71, 71,
	1511, 1276, 1026, 888, 71, 308, 71, 1694, 71, 71,
	71, 1521, 1522, 71, 1555, 1554, 1371, 259, 788, 1526,
	1527, 422, 1820, 1663, 1341, 1728, 1571, 1568, 1746, 1142,
	893, 32, 1618, 482, 1573, 1413, 1040, 1039, 595, 1552,
	778, 1588, 1589, 853, 71, 71, 767, 505, 761, 770,
	1562, 1151, 1558, 1608, 559, 1196, 71, 71, 507, 1621,
	71, 1620, 700, 1622, 1621, 1604, 1620, 1609, 1622, 71,
	71, 1627, 508, 701, 920, 495, 698, 370, 1283, 973,
	1139, 1337, 1634, 1635, 1226, 891, 1640, 1624, 1286, 481,
	487, 586, 1625, 1356, 1357, 1358, 1359, 1361, 71, 1651,
	586, 486, 1126, 393, 60, 478, 1641, 1294, 44, 337,
	1163, 407, 1646, 277, 278, 1647, 1232, 844, 845, 846,
	838, 839, 840, 841, 843, 1605, 863, 62, 1051, 816,
	1632, 1422, 311, 1351, 395, 1290, 1169, 1161, 1159, 1150,
	440, 69, 362, 69, 283, 565, 974, 419, 725, 725,
	1238, 993, 1293, 71, 63, 71, 1669, 71, 71, 397,
	464, 58, 824, 1288, 332, 331, 71, 59, 726, 1291,
	1035, 1274, 416, 754, 402, 1017, 304, 283, 283, 1681,
	1759, 1202, 1684, 1289, 1876, 1764, 57, 71, 1682, 1419,
	1805, 61, 337, 24, 22, 21, 726, 726, 20, 19,
	17, 16, 15, 23, 726, 726, 13, 12, 11, 71,
	271, 71, 69, 1717, 283, 10, 445, 1719, 31, 30,
	71, 1621, 29, 1620, 28, 1622, 71, 5, 1722, 1292,
	1708, 329, 2, 1710, 1, 702, 702, 726, 0, 0,
	0, 1725, 69, 703, 0, 1732, 1735, 728, 728, 0,
	0, 1703, 1704, 725, 69, 0, 0, 0, 0, 1745,
	1702, 69, 69, 69, 0, 680, 0, 71, 0, 1739,
	0, 703, 703, 727, 727, 0, 0, 1752, 1761, 703,
	703, 0, 0, 1319, 1320, 0, 71, 71, 0, 0,
	71, 0, 699, 699, 71, 0, 69, 1755, 1756, 71,
	0, 0, 0, 745, 1773, 745, 725, 323, 1775, 1781,
	0, 1777, 703, 1621, 71, 1620, 1782, 1622, 0, 592,
	0, 1163, 1163, 1774, 1776, 283, 0, 745, 283, 283,
	283, 283, 283, 796, 1377, 1378, 1379, 283, 0, 0,
	702, 71, 271, 71, 71, 726, 71, 1792, 809, 1788,
	725, 587, 728, 0, 1809, 1795, 0, 1787, 1811, 1789,
	1354, 1355, 0, 975, 337, 71, 329, 1815, 0, 830,
	1814, 1807, 1163, 1163, 1163, 0, 0, 1812, 727, 1779,
	1813, 1621, 1818, 1620, 0, 1622, 1803, 1817, 1816, 71,
	0, 71, 0, 702, 593, 0, 0, 699, 1835, 1842,
	0, 1838, 834, 835, 1840, 728, 71, 0, 337, 0,
	0, 0, 337, 1851, 251, 1855, 1853, 71, 0, 594,
	703, 0, 1860, 1859, 0, 837, 0, 0, 0, 1863,
	0, 727, 0, 1862, 1839, 0, 0, 702, 0, 0,
	0, 0, 1875, 0, 1874, 726, 836, 1879, 0, 728,
	699, 1823, 0, 0, 0, 0, 0, 53, 1360, 0,
	0, 0, 1884, 0, 0, 0, 0, 0, 69, 0,
	0, 0, 0, 0, 0, 727, 939, 1492, 1493, 0,
	69, 0, 0, 33, 69, 956, 0, 0, 0, 0,
	0, 34, 0, 0, 699, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 1370, 0, 0, 0,
	0, 0, 0, 0, 0, 1163, 1163, 0, 0, 0,
	703, 0, 0, 726, 0, 0, 1528, 1529, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 0, 1550, 0, 852, 0,
	0, 1598, 0, 0, 0, 483, 42, 0, 0, 0,
	0, 0, 0, 1371, 1163, 1163, 1163, 1163, 1163, 1163,
	1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
	1163, 1163, 1163, 69, 1163, 977, 978, 0, 69, 0,
	42, 69, 0, 283, 283, 0, 739, 0, 703, 337,
	337, 726, 0, 337, 0, 853, 0, 0, 60, 0,
	316, 0, 0, 324, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 62, 725, 0, 0, 0, 1365, 1362, 1363, 1364,
	1356, 1357, 1358, 1359, 1361, 0, 745, 830, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	725, 725, 0, 0, 0, 58, 0, 0, 725, 725,
	0, 59, 0, 0, 0, 0, 703, 0, 0, 0,
	0, 0, 838, 839, 840, 841, 843, 0, 863, 0,
	242, 0, 0, 1029, 0, 0, 0, 1354, 1355, 0,
	1583, 725, 1576, 0, 0, 0, 0, 69, 1036, 1692,
	1574, 0, 0, 0, 1578, 0, 0, 0, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 728, 1584, 0, 0, 0, 0, 69, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 702, 702, 0,
	0, 1577, 1727, 0, 1691, 702, 702, 727, 0, 728,
	728, 0, 0, 337, 0, 0, 0, 728, 728, 0,
	0, 0, 0, 0, 0, 0, 699, 0, 0, 1354,
	1355, 0, 0, 0, 0, 727, 727, 0, 702, 0,
	0, 0, 1163, 727, 727, 1360, 0, 0, 324, 0,
	728, 0, 0, 0, 699, 699, 0, 0, 0, 725,
	0, 0, 699, 699, 0, 1579, 0, 1580, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 1197, 1198, 0, 0,
	1749, 939, 1582, 1370, 1205, 699, 0, 0, 0, 1585,
	1210, 1211, 1213, 1215, 1216, 0, 0, 0, 1221, 0,
	0, 1223, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 69, 0, 1236, 0, 0, 0, 1360, 1163, 0,
	69, 316, 0, 0, 0, 0, 0, 1804, 0, 69,
	0, 0, 0, 0, 0, 0, 702, 0, 0, 0,
	1371, 0, 0, 0, 0, 0, 1581, 0, 728, 725,
	1029, 745, 0, 0, 0, 0, 1029, 0, 0, 0,
	1794, 0, 0, 0, 0, 1370, 0, 0, 468, 468,
	0, 0, 975, 0, 727, 0, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 809, 0,
	283, 69, 588, 699, 1277, 0, 0, 0, 1163, 0,
	0, 0, 0, 1280, 0, 0, 0, 0, 0, 0,
	1299, 0, 69, 0, 1362, 1363, 1364, 1356, 1357, 1358,
	1359, 1361, 1371, 0, 0, 0, 0, 725, 0, 0,
	0, 0, 0, 0, 834, 835, 702, 854, 855, 856,
	864, 865, 866, 0, 0, 0, 0, 0, 728, 0,
	316, 0, 0, 316, 316, 0, 0, 837, 0, 868,
	0, 0, 0, 0, 0, 1354, 1355, 0, 1372, 1373,
	1374, 0, 0, 0, 727, 0, 878, 0, 836, 0,
	882, 1499, 0, 0, 851, 0, 0, 0, 0, 817,
	819, 0, 0, 699, 0, 0, 826, 0, 1364, 1356,
	1357, 1358, 1359, 1361, 0, 725, 0, 0, 872, 873,
	874, 875, 876, 0, 702, 1369, 0, 879, 0, 0,
	1354, 1355, 0, 1372, 1373, 1374, 728, 0, 0, 0,
	0, 0, 842, 0, 0, 0, 1498, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 861,
	869, 830, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1360, 867, 0, 0, 0, 0, 0,
	1369, 699, 0, 0, 859, 0, 0, 0, 0, 0,
	852, 0, 0, 69, 69, 0, 0, 0, 0, 0,
	0, 0, 702, 0, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 0, 0, 1457,
	0, 1370, 939, 0, 809, 0, 0, 0, 1360, 1467,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 0,
	727, 0, 69, 0, 0, 0, 0, 853, 1299, 0,
	0, 0, 1487, 0, 1299, 0, 0, 0, 862, 699,
	1375, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1370, 0, 1371, 0,
	0, 0, 42, 0, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1516, 42, 0, 0,
	0, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 0, 1371, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1366, 1367, 1368,
	0, 1365, 1362, 1363, 1364, 1356, 1357, 1358, 1359, 1361,
	0, 0, 1569, 1570, 939, 0, 0, 0, 0, 0,
	0, 830, 830, 0, 0, 0, 0, 1596, 0, 1597,
	0, 69, 1599, 1600, 0, 0, 1603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1366, 1367, 1368, 0, 1365, 1362, 1363, 1364,
	1356, 1357, 1358, 1359, 1361, 1617, 0, 830, 1036, 0,
	1617, 0, 0, 0, 0, 0, 0, 0, 0, 69,
	69, 0, 0, 69, 0, 0, 0, 0, 0, 1066,
	0, 0, 830, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 284, 0, 0, 0, 0, 0, 0, 0,
	0, 1664, 0, 0, 0, 1117, 0, 0, 0, 468,
	297, 0, 0, 0, 0, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 0, 1100, 0,
	1102, 1103, 1104, 1105, 0, 286, 0, 0, 0, 0,
	291, 292, 0, 0, 298, 0, 939, 0, 1683, 0,
	283, 1685, 0, 0, 0, 0, 285, 287, 0, 69,
	0, 0, 0, 0, 0, 1148, 1149, 0, 1160, 0,
	1170, 1172, 1177, 1180, 1181, 1182, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 324, 288, 567, 0, 1617, 0, 0,
	0, 0, 69, 0, 1730, 0, 289, 290, 0, 0,
	0, 0, 0, 69, 0, 0, 0, 0, 0, 830,
	0, 0, 293, 0, 0, 0, 0, 0, 0, 1227,
	0, 1230, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1354,
	1355, 0, 1372, 1373, 1374, 0, 0, 0, 0, 0,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 42, 1255, 0, 0, 0, 0, 0, 0, 1766,
	1767, 0, 0, 1771, 42, 0, 0, 1772, 0, 1617,
	0, 0, 283, 0, 1300, 0, 0, 0, 0, 1369,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 1354,
	1355, 0, 1372, 1373, 1374, 0, 0, 0, 0, 294,
	0, 826, 295, 0, 0, 1117, 0, 296, 0, 0,
	0, 0, 0, 0, 1802, 0, 830, 69, 0, 283,
	0, 0, 0, 0, 878, 0, 0, 1360, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 1617, 1730, 1369,
	0, 0, 1304, 1305, 857, 1376, 0, 0, 1310, 0,
	0, 837, 0, 868, 0, 0, 0, 0, 0, 1375,
	0, 0, 69, 0, 830, 0, 0, 0, 0, 0,
	0, 1324, 836, 878, 0, 1370, 0, 0, 851, 1852,
	1332, 0, 0, 0, 0, 0, 0, 1360, 1340, 0,
	830, 0, 1345, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 1375,
	1177, 1177, 1177, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 1371, 0, 0, 1370, 0, 0, 0, 0,
	0, 0, 0, 861, 869, 0, 1066, 0, 0, 0,
	0, 0, 0, 1415, 0, 0, 0, 0, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 468, 0, 0, 0,
	0, 0, 0, 0, 468, 0, 0, 0, 567, 0,
	1066, 0, 1371, 0, 1066, 0, 858, 0, 0, 0,
	0, 1366, 1367, 1368, 0, 1365, 1362, 1363, 1364, 1356,
	1357, 1358, 1359, 1361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 1366, 1367, 1368, 1496, 1365, 1362, 1363, 1364, 1356,
	1357, 1358, 1359, 1361, 0, 0, 0, 1255, 26, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 0, 46,
	0, 0, 0, 0, 0, 0, 1523, 860, 0, 1525,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 48, 863, 0, 961, 0, 0, 27,
	0, 53, 0, 0, 0, 962, 0, 0, 834, 835,
	0, 0, 1556, 1557, 864, 865, 866, 0, 0, 0,
	37, 1563, 1564, 1565, 42, 0, 0, 33, 0, 0,
	49, 837, 0, 868, 36, 34, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	38, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 1066, 1066, 468, 0, 1066, 0, 0, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 1354, 1355, 1631, 1372,
	1373, 1374, 0, 0, 0, 0, 842, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 1650, 0, 861, 869, 1653, 1654, 0, 35, 0,
	1656, 0, 0, 0, 1658, 0, 0, 0, 0, 51,
	0, 1662, 39, 0, 50, 1665, 1369, 0, 859, 40,
	0, 0, 60, 0, 852, 0, 0, 43, 45, 0,
	0, 0, 0, 0, 0, 0, 842, 47, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 1674, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 52, 0,
	0, 0, 0, 0, 1360, 0, 1711, 0, 867, 0,
	0, 0, 63, 0, 0, 0, 0, 0, 859, 58,
	0, 853, 42, 0, 852, 59, 0, 0, 0, 0,
	1701, 0, 862, 0, 0, 1066, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 858, 0, 0, 0,
	0, 0, 1370, 0, 0, 0, 1720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1734, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 1741, 1742, 860, 0, 0,
	0, 0, 862, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 878, 1371,
	0, 0, 0, 0, 1754, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1758, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 567,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 0, 0, 0, 0,
	0, 1677, 0, 0, 0, 0, 0, 0, 1366, 1367,
	1368, 0, 1365, 1362, 1363, 1364, 1356, 1357, 1358, 1359,
	1361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1850, 1850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1850, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1850, 73, 74,
	596, 75, 597, 598, 599, 600, 185, 601, 602, 603,
	604, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	605, 79, 192, 193, 80, 606, 607, 194, 195, 196,
	608, 197, 609, 378, 610, 81, 82, 83, 0, 84,
	611, 85, 86, 87, 612, 379, 88, 89, 613, 614,
	615, 616, 617, 618, 90, 91, 92, 93, 198, 94,
	199, 200, 619, 95, 620, 96, 621, 622, 623, 97,
	98, 624, 99, 625, 0, 626, 201, 100, 101, 202,
	627, 628, 629, 102, 103, 203, 0, 104, 630, 105,
	631, 632, 380, 633, 106, 204, 634, 205, 635, 107,
	108, 206, 207, 382, 636, 111, 637, 109, 638, 381,
	110, 208, 209, 210, 211, 639, 212, 640, 383, 112,
	384, 113, 114, 641, 642, 213, 385, 115, 386, 643,
	116, 644, 645, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 646, 126, 647, 214, 128,
	215, 129, 130, 648, 649, 650, 651, 652, 131, 216,
	388, 132, 389, 217, 133, 134, 135, 653, 218, 136,
	219, 137, 654, 138, 139, 140, 220, 141, 142, 655,
	144, 145, 143, 146, 656, 147, 390, 148, 149, 221,
	150, 0, 151, 152, 153, 657, 222, 154, 155, 658,
	156, 157, 391, 158, 223, 224, 159, 659, 165, 160,
	161, 162, 164, 225, 163, 226, 660, 166, 661, 167,
	168, 662, 227, 228, 229, 663, 664, 169, 230, 231,
	665, 170, 171, 172, 173, 666, 667, 174, 175, 176,
	668, 669, 177, 178, 179, 232, 233, 670, 180, 671,
	672, 673, 674, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1486, 73, 74, 596, 75, 597, 598,
	599, 600, 185, 601, 602, 603, 604, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 605, 79, 192, 193,
	80, 606, 607, 194, 195, 196, 608, 197, 609, 378,
	610, 81, 82, 83, 0, 84, 611, 85, 86, 87,
	612, 379, 88, 89, 613, 614, 615, 616, 617, 618,
	90, 91, 92, 93, 198, 94, 199, 200, 619, 95,
	620, 96, 621, 622, 623, 97, 98, 624, 99, 625,
	0, 626, 201, 100, 101, 202, 627, 628, 629, 102,
	103, 203, 0, 104, 630, 105, 631, 632, 380, 633,
	106, 204, 634, 205, 635, 107, 108, 206, 207, 382,
	636, 111, 637, 109, 638, 381, 110, 208, 209, 210,
	211, 639, 212, 640, 383, 112, 384, 113, 114, 641,
	642, 213, 385, 115, 386, 643, 116, 644, 645, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 646, 126, 647, 214, 128, 215, 129, 130, 648,
	649, 650, 651, 652, 131, 216, 388, 132, 389, 217,
	133, 134, 135, 653, 218, 136, 219, 137, 654, 138,
	139, 140, 220, 141, 142, 655, 144, 145, 143, 146,
	656, 147, 390, 148, 149, 221, 150, 0, 151, 152,
	153, 657, 222, 154, 155, 658, 156, 157, 391, 158,
	223, 224, 159, 659, 165, 160, 161, 162, 164, 225,
	163, 226, 660, 166, 661, 167, 168, 662, 227, 228,
	229, 663, 664, 169, 230, 231, 665, 170, 171, 172,
	173, 666, 667, 174, 175, 176, 668, 669, 177, 178,
	179, 232, 233, 670, 180, 671, 672, 673, 674, 181,
	182, 183, 184, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 73,
	74, 596, 75, 597, 598, 599, 600, 185, 601, 602,
	603, 604, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 605, 79, 192, 193, 80, 606, 607, 194, 195,
	196, 608, 197, 609, 378, 610, 81, 82, 83, 0,
	84, 611, 85, 86, 87, 612, 379, 88, 89, 613,
	614, 615, 616, 617, 618, 90, 91, 92, 93, 198,
	94, 199, 200, 619, 95, 620, 96, 621, 622, 623,
	97, 98, 624, 99, 625, 0, 626, 201, 100, 101,
	202, 627, 628, 629, 102, 103, 203, 0, 104, 630,
	105, 631, 632, 380, 633, 106, 204, 634, 205, 635,
	107, 108, 206, 207, 382, 636, 111, 637, 109, 638,
	381, 110, 208, 209, 210, 211, 639, 212, 640, 383,
	112, 384, 113, 114, 641, 642, 213, 385, 115, 386,
	643, 116, 644, 645, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 646, 126, 647, 214,
	128, 215, 129, 130, 648, 649, 650, 651, 652, 131,
	216, 388, 132, 389, 217, 133, 134, 135, 653, 218,
	136, 219, 137, 654, 138, 139, 140, 220, 141, 142,
	655, 144, 145, 143, 146, 656, 147, 390, 148, 149,
	221, 150, 0, 151, 152, 153, 657, 222, 154, 155,
	658, 156, 157, 391, 158, 223, 224, 159, 659, 165,
	160, 161, 162, 164, 225, 163, 226, 660, 166, 661,
	167, 168, 662, 227, 228, 229, 663, 664, 169, 230,
	231, 665, 170, 171, 172, 173, 666, 667, 174, 175,
	176, 668, 669, 177, 178, 179, 232, 233, 670, 180,
	671, 672, 673, 674, 181, 182, 183, 184, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 1134, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 1135, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 1133, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 471, 472, 1136, 0, 0, 0,
	473, 0, 0, 480, 1131, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 568, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 60, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 62, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 377, 553,
	0, 180, 0, 0, 0, 58, 181, 182, 183, 184,
	475, 59, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 186, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 0, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 60, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 62, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 377, 553, 0, 180, 0,
	0, 0, 58, 181, 182, 183, 184, 475, 59, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 1173, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 1178, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 1174, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 1175, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 73, 74, 480, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 474,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 488, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 471, 472, 0, 0, 0, 0, 473, 0,
	0, 480, 1553, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 0, 0, 480, 1502,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 0, 0, 480, 1130, 503, 492, 493,
	490, 491, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 0, 0, 0, 503, 492, 493,
	490, 491, 479, 471, 472, 0, 0, 0, 0, 473,
	884, 1127, 480, 73, 74, 0, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 471, 472, 469, 0, 0, 0, 473,
	73, 74, 480, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 1507,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 568, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 73, 74, 480, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 1178, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 0, 0, 0, 503, 492,
	493, 490, 491, 479, 471, 472, 0, 0, 0, 0,
	473, 0, 0, 480, 73, 74, 818, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	1849, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 0, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 1848, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 73, 74,
	480, 75, 0, 0, 0, 0, 519, 485, 0, 0,
	0, 76, 77, 1847, 533, 188, 534, 78, 535, 536,
	0, 79, 192, 193, 80, 500, 518, 537, 538, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 1849, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 539, 94,
	540, 541, 0, 95, 0, 96, 0, 0, 0, 532,
	98, 0, 99, 0, 0, 0, 484, 100, 101, 520,
	498, 0, 0, 102, 103, 542, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 543, 544, 545, 546, 0, 510, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 474, 126, 499, 527, 128,
	547, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 548, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 488,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 549, 224, 159, 0, 165, 160,
	161, 162, 164, 550, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 551, 552, 0, 0, 169, 524, 525,
	497, 170, 171, 1848, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 553, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 475, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 0, 471, 472,
	0, 0, 0, 0, 473, 73, 74, 480, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 503, 492, 493, 490,
	491, 479, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 73, 74, 480, 75, 0, 0, 0, 0,
	519, 485, 0, 0, 0, 76, 77, 186, 533, 188,
	534, 78, 535, 536, 0, 79, 192, 193, 80, 500,
	518, 537, 538, 196, 0, 529, 0, 511, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 512, 514, 0, 513, 515, 90, 91,
	92, 93, 539, 94, 540, 541, 0, 95, 0, 96,
	0, 0, 0, 532, 98, 0, 99, 0, 0, 0,
	484, 100, 101, 520, 498, 0, 0, 102, 103, 542,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 530,
	0, 205, 0, 107, 108, 526, 528, 382, 0, 111,
	0, 109, 0, 381, 110, 543, 544, 545, 546, 0,
	510, 0, 383, 112, 384, 113, 114, 0, 0, 531,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 0,
	126, 499, 527, 128, 547, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 388, 132, 389, 521, 133, 134,
	135, 0, 522, 136, 219, 137, 0, 138, 139, 140,
	548, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 1168, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 516, 156, 157, 391, 158, 549, 224,
	159, 0, 165, 160, 161, 162, 164, 550, 163, 523,
	0, 166, 0, 167, 168, 0, 227, 551, 552, 0,
	0, 169, 524, 525, 497, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 517, 0, 177, 178, 179, 232,
	553, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 503, 492, 493, 490, 491, 479, 0,
	0, 0, 1164, 1165, 0, 0, 0, 0, 1166, 73,
	74, 1167, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 0, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 1849, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 0, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 0,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 0, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 1848, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 0, 0,
	503, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 73, 74, 480, 75,
	0, 0, 0, 0, 519, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 518, 194, 195, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 520, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 208,
	209, 210, 211, 0, 212, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 0, 126, 0, 527, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 524, 525, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 233, 0, 180, 373, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 1619, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 378, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 382, 0,
	111, 0, 109, 0, 381, 110, 208, 209, 210, 211,
	0, 212, 0, 383, 112, 384, 113, 114, 0, 0,
	213, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 221, 150, 0, 151, 152, 153,
	60, 222, 154, 155, 0, 156, 157, 391, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 62, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	377, 233, 0, 180, 0, 0, 0, 58, 181, 182,
	183, 184, 0, 59, 373, 772, 0, 773, 768, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 57, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 378, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 776, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 765, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 382, 0, 111, 0, 109,
	0, 381, 110, 208, 209, 210, 211, 0, 212, 0,
	383, 112, 384, 113, 114, 0, 0, 213, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 766, 0, 0, 0,
	131, 216, 388, 132, 389, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 391, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 764, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 373,
	772, 0, 773, 768, 763, 0, 0, 0, 0, 0,
	774, 769, 0, 0, 0, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	378, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 759,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 765, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	382, 0, 111, 0, 109, 0, 381, 110, 208, 209,
	210, 211, 0, 212, 0, 383, 112, 384, 113, 114,
	0, 0, 213, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 766, 0, 0, 0, 131, 216, 388, 132, 389,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 391,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 764, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 373, 772, 0, 773, 768, 763,
	0, 0, 0, 0, 0, 774, 769, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 378, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 765, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 382, 0, 111, 0, 109,
	0, 381, 110, 208, 209, 210, 211, 0, 212, 0,
	383, 112, 384, 113, 114, 0, 0, 213, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 766, 0, 0, 0,
	131, 216, 388, 132, 389, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 391, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 764, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	774, 769, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 338, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 60, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 62,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 0, 177, 178, 179, 377, 233, 0, 180,
	70, 0, 0, 58, 181, 182, 183, 184, 0, 59,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 1068, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 60, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 62, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 377, 233, 0, 180, 70, 0, 0,
	58, 181, 182, 183, 184, 0, 59, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 1298, 0, 57, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 0, 180, 0, 70, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 461, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 338, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 70, 0, 0, 0, 181, 182, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	1068, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	70, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 584, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 70, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 976, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 0, 180, 70, 0, 0, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 1517, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 0,
	180, 70, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 564,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 743, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 742, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	0, 177, 178, 179, 232, 233, 70, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 746,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 373, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 73, 74, 0,
	75, 0, 0, 0, 746, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 378, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 204, 0, 205, 0, 107, 108,
	206, 207, 382, 0, 111, 0, 109, 0, 381, 110,
	208, 209, 210, 211, 0, 212, 0, 383, 112, 384,
	113, 114, 0, 0, 213, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 391, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 942, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 940, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 1044,
	0, 102, 103, 203, 0, 104, 0, 105, 945, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 1042, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	944, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 1043, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 942, 197, 0,
	0, 937, 81, 82, 83, 0, 84, 940, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 945, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 936, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 944,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 943, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 1298, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	338, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 694, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 338,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 398, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 343, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 338, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 256, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	196, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 255, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 227, 228, 229, 0, 0, 169, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	1214, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 1212,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 1201, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 808, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 270, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 681, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 0, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 446, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 70, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 443, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 70, 177, 178, 179, 232, 233, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 73,
	74, 0, 75, 0, 0, 0, 0, 185, 0, 0,
	0, 0, 76, 77, 186, 187, 188, 189, 78, 190,
	191, 0, 79, 192, 193, 80, 0, 0, 194, 195,
	404, 0, 197, 0, 0, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 0, 88, 89, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 198,
	94, 199, 200, 0, 95, 0, 96, 0, 0, 0,
	97, 98, 0, 99, 0, 0, 0, 201, 100, 101,
	202, 0, 0, 0, 102, 103, 203, 0, 104, 0,
	105, 0, 0, 0, 0, 106, 204, 0, 205, 0,
	107, 108, 206, 207, 0, 0, 111, 0, 109, 0,
	0, 110, 208, 209, 210, 211, 0, 212, 0, 0,
	112, 0, 113, 114, 0, 0, 213, 0, 115, 0,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	281, 0, 123, 124, 127, 125, 0, 126, 0, 214,
	128, 215, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 0, 132, 0, 217, 133, 134, 135, 0, 218,
	136, 219, 137, 0, 138, 139, 140, 220, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 0, 148, 149,
	221, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	0, 156, 157, 0, 158, 223, 224, 159, 0, 165,
	160, 161, 162, 164, 225, 163, 226, 0, 166, 0,
	167, 168, 0, 280, 228, 229, 0, 0, 276, 230,
	231, 0, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 0, 70, 177, 178, 179, 232, 233, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 281,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 280, 228, 229, 0, 0, 276, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 70, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 73, 74, 0,
	75, 0, 0, 0, 0, 185, 0, 0, 0, 0,
	76, 77, 186, 187, 188, 189, 78, 190, 191, 0,
	79, 192, 193, 80, 0, 0, 194, 195, 196, 0,
	197, 0, 0, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 0, 88, 89, 0, 0, 0,
	0, 0, 0, 90, 91, 92, 93, 198, 94, 199,
	200, 0, 95, 0, 96, 0, 0, 0, 97, 98,
	0, 99, 0, 0, 0, 201, 100, 101, 202, 0,
	0, 0, 102, 103, 203, 0, 104, 0, 105, 0,
	0, 0, 0, 106, 204, 0, 205, 0, 107, 108,
	368, 207, 0, 0, 111, 0, 109, 0, 0, 110,
	208, 209, 210, 211, 0, 212, 0, 0, 112, 0,
	113, 114, 0, 0, 213, 0, 115, 0, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 0,
	123, 124, 127, 125, 0, 126, 0, 214, 128, 215,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 0,
	132, 0, 217, 133, 134, 135, 0, 218, 136, 219,
	137, 0, 138, 139, 140, 220, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 0, 148, 149, 221, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 0, 156,
	157, 0, 158, 223, 224, 159, 0, 165, 160, 161,
	162, 164, 225, 163, 226, 0, 166, 0, 167, 168,
	0, 227, 228, 229, 0, 0, 169, 230, 231, 0,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 0,
	70, 177, 178, 179, 232, 233, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 365,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 70,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 0, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 363, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 70, 177,
	178, 179, 232, 233, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 346, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 70, 177, 178,
	179, 232, 233, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 0, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 327, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 70, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 273, 0, 0, 117, 0, 118,
	119, 120, 121, 281, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 275, 150, 0, 151, 152, 153, 0,
	222, 154, 274, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 280, 228, 229, 0,
	0, 276, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 70, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 0, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 0,
	0, 218, 136, 219, 137, 0, 138, 0, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 0, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	0, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 837, 0, 868, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 836, 0, 0, 0, 0, 837,
	851, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 861, 869, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 858, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 853,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	862, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 860,
	0, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 0, 0,
	0, 0, 0, 1396, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 842, 0, 0, 0, 0, 1395,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 0, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 0, 867, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 859, 0, 837, 0,
	868, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 858, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 853,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	862, 0, 0, 842, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 837, 0, 868, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 867, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 858, 0, 0, 0, 0, 0, 1394,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 869, 0, 853, 834,
	835, 0, 854, 855, 856, 864, 865, 866, 0, 862,
	867, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	859, 0, 837, 0, 868, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 858, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 0, 853, 0, 0, 0, 0, 1347, 0,
	0, 0, 0, 0, 862, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 860,
	0, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 858, 0, 0,
	1799, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 0, 868, 0, 0, 0,
	834, 835, 853, 854, 855, 856, 864, 865, 866, 0,
	0, 0, 0, 862, 0, 836, 857, 0, 0, 0,
	0, 851, 0, 837, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 860, 842,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 861, 869, 0, 1797,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 861, 869, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	859, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 834, 835, 853, 854, 855, 856, 864, 865,
	866, 0, 0, 0, 0, 862, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 0, 868, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 862, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 1778, 0, 0, 0, 0, 0, 0, 0, 860,
	842, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 861, 869, 0,
	1753, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 867, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 862, 0, 0, 842,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 837,
	0, 868, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 867, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 858,
	0, 0, 1748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 869, 0, 853, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 862, 867, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 859, 0, 837, 0,
	868, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 858, 851, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 853,
	0, 1744, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 852, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 858, 0, 0, 1679, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	837, 0, 868, 0, 0, 0, 834, 835, 853, 854,
	855, 856, 864, 865, 866, 0, 0, 0, 0, 862,
	0, 836, 857, 0, 0, 0, 0, 851, 0, 837,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 860, 842, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 861, 869, 0, 1678, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 861, 869, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 834, 835,
	853, 854, 855, 856, 864, 865, 866, 0, 0, 0,
	0, 862, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 837, 0, 868, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	862, 0, 836, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 0, 0, 1586, 0, 0,
	0, 0, 0, 0, 0, 860, 842, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 861, 869, 0, 1520, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 867, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 859, 0,
	837, 0, 868, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 858, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 862, 0, 0, 842, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 837, 0, 868, 0, 0,
	0, 0, 861, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 867, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 858, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 869, 0,
	853, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 862, 867, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 859, 0, 837, 0, 868, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	858, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 853, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 842,
	1868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 858,
	1434, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1867, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 0, 0, 0, 853, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 862, 868, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 836, 0, 0, 1056, 0,
	837, 851, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 851, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 842,
	0, 1386, 0, 0, 1385, 1057, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 0,
	0, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 861, 869, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 858,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 871, 0, 0, 0, 862, 0, 834, 835, 0,
	854, 855, 856, 864, 865, 866, 0, 0, 0, 0,
	853, 0, 0, 857, 0, 0, 0, 870, 0, 0,
	837, 862, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 851, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 869, 0, 0, 834, 835, 0, 854,
	855, 856, 864, 865, 866, 0, 0, 867, 0, 0,
	0, 0, 857, 0, 0, 0, 0, 859, 0, 837,
	0, 868, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 858, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 834, 835, 0, 854, 855, 856, 864, 865, 866,
	0, 862, 0, 0, 842, 0, 0, 857, 0, 0,
	0, 0, 0, 0, 837, 0, 868, 0, 0, 0,
	0, 861, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 867, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 852, 0, 0, 0, 860, 0, 0, 848,
	849, 850, 0, 847, 844, 845, 846, 838, 839, 840,
	841, 843, 0, 863, 858, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 869, 0, 853,
	834, 835, 0, 854, 855, 856, 864, 865, 866, 0,
	862, 867, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 859, 0, 837, 0, 868, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 858,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 0, 0, 848, 849,
	850, 0, 847, 844, 845, 846, 838, 839, 840, 841,
	843, 0, 863, 0, 853, 834, 835, 0, 854, 855,
	856, 864, 865, 866, 0, 862, 0, 0, 842, 0,
	0, 857, 0, 1392, 0, 1387, 0, 0, 837, 0,
	868, 0, 0, 0, 1514, 861, 869, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	867, 0, 0, 0, 0, 851, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	860, 0, 0, 848, 849, 850, 0, 847, 844, 845,
	846, 838, 839, 840, 841, 843, 0, 863, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 869, 0, 853, 834, 835, 0, 854, 855, 856,
	864, 865, 866, 0, 862, 867, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 859, 0, 837, 0, 868,
	0, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 0, 858, 851, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 848, 849, 850, 0, 847, 844, 845, 846,
	838, 839, 840, 841, 843, 0, 863, 0, 853, 834,
	835, 0, 854, 855, 856, 864, 865, 866, 0, 862,
	0, 0, 842, 0, 0, 857, 0, 0, 0, 1346,
	0, 0, 837, 0, 868, 0, 0, 0, 0, 861,
	869, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 867, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 860, 0, 0, 848, 849, 850,
	0, 847, 844, 845, 846, 838, 839, 840, 841, 843,
	0, 863, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1352, 0, 0, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 869, 0, 853, 834, 835,
	0, 854, 855, 856, 864, 865, 866, 0, 862, 867,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 859,
	0, 837, 0, 868, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 0, 0, 0, 0, 858, 851, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 0, 0, 848, 849, 850, 0,
	847, 844, 845, 846, 838, 839, 840, 841, 843, 0,
	863, 0, 853, 834, 835, 0, 854, 855, 856, 864,
	865, 866, 0, 862, 0, 0, 842, 0, 0, 857,
	0, 0, 0, 0, 0, 0, 837, 0, 868, 0,
	0, 0, 0, 861, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 867, 0,
	0, 0, 0, 851, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 852, 0, 0, 0, 860, 0,
	0, 848, 849, 850, 0, 847, 844, 845, 846, 838,
	839, 840, 841, 843, 0, 863, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 869,
	0, 853, 834, 835, 0, 854, 855, 856, 864, 865,
	866, 0, 862, 867, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 837, 0, 868, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 0, 0,
	848, 849, 850, 0, 847, 844, 845, 846, 838, 839,
	840, 841, 843, 0, 863, 0, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 862, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 710, 733,
	704, 724, 723, 0, 0, 706, 705, 0, 0, 0,
	735, 734, 859, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 860, 0, 0, 848, 849, 850, 0, 847,
	844, 845, 846, 838, 839, 840, 841, 843, 0, 863,
	0, 729, 0, 721, 720, 0, 0, 0, 0, 0,
	0, 0, 719, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 718, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 711, 712, 713, 714, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 848, 849, 850, 0, 847, 844,
	845, 846, 838, 839, 840, 841, 843, 0, 863, 717,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 0, 0, 0, 0, 715, 709, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 0, 0, 707, 0, 0, 730, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
}
var sqlPact = [...]int{

	3325, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 736, 16138, -1000, -1000,
	-1000, -1000, 582, 719, 1811, 16138, 16138, 15879, 640, 640,
	17433, -1000, -1000, 20282, -1000, 2828, 455, 459, 455, 455,
	458, 17433, 536, 632, 107, -1000, 621, -21, 20023, 16138,
	1287, 18, 14843, 294, 3325, 15620, 19764, 16138, 322, 25,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1125, 1051, 1050, 14843, 19505, 19246,
	18987, -1000, 10053, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 535, 301, 300, -1000, 15361, -1000, 883, -1000, 17,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 876, -1000,
	16138, -1000, -1000, 18728, 18469, 299, 783, -1000, -1000, 507,
	367, 1308, -1000, 28, -1000, -1000, 1124, -1000, 873, 1123,
	1122, 1119, 1117, 1116, 1113, 364, 831, -1000, 519, 783,
	-1000, 783, -1000, -1000, -1000, 510, 17433, -1000, 14843, -1000,
	18210, 1066, 17951, -1000, 621, -1000, -1000, -1000, 912, 1283,
	1283, 1283, 1292, 123, 118, 107, -1, 16138, -1000, 297,
	-1, 7013, 7013, -1000, -1000, 294, -1000, 326, 13010, -1000,
	7567, -1000, 741, 1181, 404, 643, 1179, -122, 716, 590,
	12208, 25, -1000, -1000, -1000, 8955, 4164, 14843, 16138, 16138,
	603, 17692, -1000, 1177, 112, 1172, -1000, 109, 1170, -1000,
	-5, -1000, -1000, -1000, -1000, -1000, -1000, 294, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 15102, 1335, 24181, -1000, 8955, -1000, -1000, 13277,
	943, 13277, -1000, -1000, 1333, -1000, 8955, -1000, 12, 9,
	983, 1029, 10605, 10330, 1231, 625, -1000, -1000, -1000, 26,
	4439, 16138, 1134, 13277, 16138, 16138, 16138, 16138, 16138, 16138,
	-1000, 981, -1000, 16138, -1000, 7, 5, -1000, 17433, -1000,
	114, -1000, 293, 959, 17174, 1187, 955, -1000, 912, -1000,
	878, 938, 8124, 8955, 107, -1000, -1000, 107, 107, 8955,
	-1000, -1000, 16138, -1, 1332, 16138, 104, -1000, 23147, -1000,
	-1000, 8955, 8955, 8955, 8955, 8955, 785, -1000, -1000, -1000,
	5288, -1000, -1000, 25, 287, 308, -1000, -1000, 286, 25,
	-1000, -1000, -1000, -1000, 281, 1418, 399, -1000, -1000, -1000,
	8955, 362, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1133, 277, 276, -1000, -1000, -1000, -1000, 275, 271,
	270, 268, 267, 258, 256, 255, 254, 251, 250, 249,
	248, 247, 734, -1000, 388, -1000, -1000, 388, 388, -1000,
	242, 242, 245, -1000, -1000, -1000, -1000, 242, -1000, -1000,
	-1000, 360, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 246,
	104, -1000, -1000, -1000, 16138, -6, -1000, 23878, -1000, -26,
	705, -1000, 14325, 1270, 1258, 1259, 14843, 1313, 1306, 509,
	16138, 16138, 503, -1000, 1112, -10, -1000, -1000, 3088, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 382, 203, 1322, 203, 12476,
	-1000, 16138, 16138, -1000, 16138, -1000, -1000, 16138, -1000, 16138,
	16138, 1307, 13807, 730, 1169, -21, -17, -1000, 1337, -1000,
	-1000, -1000, -1000, 64, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 245, 734,
	242, 242, 242, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	360, -1000, -1000, 388, 388, 388, -1000, -1000, -18, 23878,
	502, -14, 13542, 16138, -1000, 24, -1000, -1000, 1111, 446,
	-19, 732, 1046, 813, -1000, -1000, -1000, -1000, -2, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1397,
	-1000, -1000, -1000, -1000, 1408, -2, -1000, -1000, -1000, -1000,
	-1000, 1417, -1000, -1000, -1000, 4439, -1000, -1000, -1000, 16138,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 732,
	1046, -1000, -1000, 14843, 14066, 1318, 1167, 866, 952, -1000,
	-1000, 347, 1166, -1000, -1000, -1000, -1000, 23878, -1000, 23878,
	656, 1054, -1000, 1054, -4, -1000, 22957, -1000, 240, -27,
	-1000, 382, 7013, 11941, 24181, 24181, 16138, 530, 8955, 8955,
	8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955,
	8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955, 8955,
	894, 8955, 500, 8955, 8955, 8955, 8955, 787, 784, 219,
	4439, -1000, 612, 612, 612, 2404, 2404, 174, 3, 22537,
	-7, 25, -1000, -1000, 6733, 6436, 25, 4714, -1000, 579,
	1407, 385, 23878, 1141, 1086, 235, 116, 111, 8955, 8955,
	748, 8955, 9232, 8955, 8955, 5565, 8955, 8955, 8955, 8955,
	8955, 8955, -1000, 233, -1000, -1000, -1000, -1000, 1406, -1000,
	-1000, 1405, -1000, 525, 522, 1401, 382, 108, 7567, -1000,
	730, 16138, 16138, 16138, -1000, -1000, 935, 16915, 932, 24181,
	16138, -1000, 227, 226, 1018, 1014, 16138, 16138, 16656, 16397,
	16138, 679, 224, 221, 16138, 715, -1000, 16138, 588, 1109,
	16138, -1000, 8955, 663, 8955, 687, -1000, 11406, 392, 16138,
	689, 85, -1000, -1000, -1000, 344, 16138, -1000, -1000, -1000,
	112, -1000, 109, -1000, -1000, 14843, -1000, -1000, -1000, -1000,
	-1000, -1000, 24181, 314, 310, -1000, 1381, 499, -1000, 498,
	495, 494, -1000, 220, -1000, 8955, 16138, 13542, -14, -15,
	-1000, -1000, 16138, 1046, -1000, -1000, -1000, -1000, 635, -1000,
	725, -1000, 10880, -1000, -1000, -1000, 579, -1000, -36, -1000,
	-1000, -1000, -1000, 103, -39, -24, 24181, -1000, -1000, -1000,
	-1000, -1000, 16138, 236, 16138, -21, 16138, 16138, 1165, 1416,
	16138, -1000, -1000, -1000, 8955, -1000, -1000, -1000, -21, 16138,
	-1000, 1084, -1000, -31, 1441, -154, 14584, -1000, 11139, -1000,
	-1000, -1000, 363, 820, 820, 426, 426, 426, 426, 323,
	323, 1812, 1250, 3388, 3388, 3388, 877, 237, 237, 3388,
	3388, 3388, 2404, 23963, 160, 8955, 8955, 484, 780, 219,
	160, 8955, 1392, 160, 160, 160, -1000, 646, -1000, -1000,
	-1000, 1108, 218, 9232, 9232, -1000, -1000, -1000, 5288, -1000,
	-1000, 217, 8955, -1000, 8955, -38, -87, -1000, -1000, -45,
	-1000, -1000, -11, 8955, 8955, 8955, 101, -1000, 96, 568,
	-1000, 8955, 800, 213, 212, 8955, -1000, -1000, 23759, 21145,
	92, 1103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 91,
	23674, 90, 2989, -1000, 9232, 9232, 9232, 5288, 211, 89,
	22931, -136, 23555, 7844, 7844, 7844, 87, 23470, 8955, -136,
	21026, 20836, 20810, -49, -51, -58, 1377, -68, 86, 361,
	357, 84, 1084, -1000, -1000, -1000, -1000, 482, 481, 1157,
	-1000, 930, -1000, 401, -1000, 827, 8955, 16138, 209, 208,
	752, -1000, 1156, 920, 1152, 920, -1000, -26, 678, 8955,
	8955, -1000, 472, -1000, -1000, 584, -1000, 22622, -1000, 7013,
	23878, -1000, 686, 1263, -69, -1000, -1000, 7013, 382, 12476,
	11941, 7567, -70, -1000, -1000, 730, -1000, 515, 1373, 83,
	968, 928, 688, 611, 1367, 23878, -36, -1000, -36, -1000,
	-1000, -1000, -1000, -1000, -1000, 16138, 1070, -1000, 14066, 207,
	16138, 205, -1000, 202, 199, 16138, -1000, 1187, -1000, 82,
	-1000, 1081, 1290, -1000, 11941, 888, 1034, 1032, 11941, 923,
	835, 835, 835, -1000, 14584, 3878, -1000, -1000, 16138, 198,
	11673, 80, 1441, 8955, 160, 160, 8955, 9232, 9232, -1000,
	160, -1000, -1000, -1000, -1000, 1101, 187, 8955, 24181, 2490,
	2435, -74, 6139, -40, 22418, -1000, -1000, 308, -1000, 79,
	7290, -1000, 23266, 2, 2, -1000, 1415, 1185, -1000, 8955,
	23351, -1000, 12743, 383, 850, 22246, 24181, 24181, -1000, 8955,
	-1000, 1098, 8955, -1000, 24181, 24181, 9232, 9232, 9232, 9232,
	9232, 9232, 9232, 9232, 9232, 9232, 9232, 9232, 9232, 9232,
	9232, 9232, 9232, 9232, 9232, 989, 9232, 1387, 1387, 1387,
	-41, 5842, -1000, 1129, 1098, 8955, 8955, 24181, 75, 71,
	68, -1000, 8955, -136, 8955, 8955, 8955, -1000, -1000, -1000,
	66, -1000, 1363, -1000, -1000, -1000, -1000, 1081, 16138, 16138,
	16138, 1151, -1000, 2068, -1000, 22217, -75, 16138, 16138, -1000,
	1010, 1026, 435, 16138, -1000, 16138, -1000, 16138, 16138, 16138,
	-76, -82, 16138, -1000, -1000, -67, 7013, 191, -21, -67,
	663, -1000, -66, -1000, 342, -1000, 306, 305, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 61, -1000, -1000, 1072,
	-1000, 9786, 186, 16138, 14066, 1311, 9786, 864, -1000, -1000,
	373, 8955, 8955, 1441, 555, 11941, 11941, 1044, 1017, 11941,
	-1000, -1000, -1000, -1000, -1000, -1000, 1023, 183, 16138, 14584,
	483, 160, 710, 384, 8955, 24181, 24082, -88, 8955, 8955,
	-1000, -90, -1000, 8955, -1000, -1000, 1412, 8955, 55, 54,
	53, -1000, -1000, 23878, 8955, -1000, -1000, 20541, 8955, 52,
	-1000, 50, 46, 23878, 1129, 23878, -1000, -1000, 591, 591,
	1387, 1387, 1387, 1387, 2189, 2189, 1223, 2107, 849, 849,
	849, 1770, 359, 359, 849, 849, 849, 1094, 999, 182,
	3049, 8955, -94, -1000, -1000, -1000, 23878, 23878, 42, -1000,
	-1000, -1000, -136, 3448, 22045, 21926, -1000, 40, 373, -1000,
	-1000, -1000, 16138, -1000, 16138, -1000, 16138, 16138, 1096, 922,
	-1000, -1000, 1011, 179, 9232, 16138, -1000, 731, -95, -96,
	915, -1000, 913, 8955, -1000, 24181, 920, 920, -1000, 470,
	465, -1000, -1000, -1000, -67, 1201, 16138, 1254, -1000, -1000,
	177, -1000, -1000, -1000, 789, -100, -1000, 190, 1271, 8955,
	-1000, -1000, 176, 9786, -101, 38, -21, -106, 16138, -1000,
	16138, 23878, -136, 521, -1000, 1044, -1000, 173, 8955, 11941,
	-1000, -159, -1000, 340, -1000, 16138, -108, -1000, 8955, 8955,
	24082, -113, -1000, 160, 160, -1000, 21841, -1000, 23266, -1000,
	-1000, -1000, 23878, 757, -1000, 21722, -1000, -1000, -1000, -1000,
	9232, 1092, 172, 24181, 21550, -1000, -1000, 8955, -1000, -1000,
	-1000, -1000, -1000, 1016, -1000, -1000, 16138, 925, -1000, -1000,
	8955, 3049, 161, 1070, 159, -1000, -1000, -1000, 720, -1000,
	-1000, 23878, 1274, -1000, -1000, 16138, 16138, 513, -120, 16138,
	-1000, -1000, 5011, 16138, 731, 9786, 1262, 25, 16138, 1262,
	21521, 4714, -125, -1000, 1070, -1000, 731, 142, -115, -1000,
	1310, 1411, -1000, 16138, 23878, -1000, 1023, -1000, 4439, -126,
	-1000, 160, 160, -1000, -1000, 37, 850, 1286, -1000, 3476,
	9232, 24181, -131, -1000, 21349, -1000, -1000, 1150, 21230, 972,
	16138, -1000, 16138, 16138, 416, 16138, -1000, -1000, 602, -1000,
	382, -1000, 139, 1070, -1000, -1000, -1000, -1000, 1271, -11,
	731, -1000, 1070, 9786, 16138, 134, -1000, -137, -1000, -1000,
	-1000, -1000, 815, 8955, 3476, -138, -1000, -1000, 1144, -1000,
	855, 766, 32, -139, 110, -1000, 8955, -1000, 12476, -1000,
	16138, -1000, 1262, 31, 1070, -1000, -144, -1000, -1000, -1000,
	30, 8678, 8678, -136, -1000, 16138, -1000, 862, 860, 605,
	-1000, -1000, -1000, -1000, -1000, 972, 16138, 23878, -124, -146,
	-1000, -1000, -1000, 731, -1000, -1000, -1000, 9509, 875, 617,
	22741, -1000, -1000, -1000, 1207, -1000, 424, 851, 851, 855,
	-1000, 829, 1070, 1342, -1000, -1000, -1000, -1000, -1000, -1000,
	1349, -1000, -1000, 980, -1000, -1000, -1000, -1000, -1000, -1000,
	8401, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1654, 1652, 1322, 118, 1647, 117, 1644, 1642, 1639,
	1638, 96, 114, 111, 116, 1635, 89, 1628, 1627, 1626,
	93, 1623, 1622, 1621, 34, 1620, 1619, 1618, 1615, 1614,
	1613, 88, 14, 136, 1975, 129, 1611, 1610, 1609, 11,
	97, 62, 1605, 74, 1604, 1601, 56, 95, 99, 1323,
	31, 1600, 1596, 133, 21, 18, 543, 98, 139, 122,
	113, 1595, 1593, 1592, 47, 1590, 4, 1585, 1584, 13,
	50, 20, 1582, 24, 43, 1580, 1571, 125, 1570, 71,
	102, 112, 25, 120, 77, 1567, 48, 12, 70, 1566,
	15, 1565, 42, 80, 130, 1560, 46, 143, 64, 29,
	55, 1559, 1558, 1557, 1556, 83, 1554, 90, 65, 1553,
	1552, 73, 1551, 126, 132, 1549, 1548, 119, 1545, 1536,
	1534, 638, 1533, 1531, 323, 1528, 9, 35, 58, 3,
	108, 103, 53, 1527, 32, 1526, 2016, 589, 627, 1525,
	49, 51, 81, 39, 57, 23, 1523, 1522, 101, 1521,
	1510, 1509, 1505, 1501, 78, 1500, 61, 135, 45, 54,
	91, 27, 26, 82, 110, 142, 104, 1499, 1498, 109,
	1497, 84, 1496, 1495, 877, 115, 1494, 1493, 1492, 858,
	832, 820, 344, 1482, 1478, 733, 269, 1474, 1471, 105,
	1469, 1468, 138, 134, 40, 1467, 106, 1466, 92, 1460,
	0, 100, 75, 1458, 124, 76, 1457, 1456, 1455, 1454,
	33, 2, 8, 7, 6, 5, 19, 17, 1453, 1452,
	127, 86, 1451, 141, 1450, 1449, 1448, 30, 1445, 22,
	1444, 16, 1443, 1442, 10, 1, 140, 1441, 94, 1438,
	1338, 1437, 137, 1427, 1425, 1344, 79,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 38, 38, 43, 43,
	43, 45, 45, 42, 42, 37, 37, 5, 5, 5,
	6, 6, 6, 6, 11, 12, 12, 12, 12, 12,
	12, 83, 83, 82, 82, 85, 85, 13, 13, 14,
	14, 14, 14, 14, 14, 14, 14, 170, 170, 169,
	15, 146, 146, 16, 16, 16, 16, 17, 106, 106,
	18, 18, 18, 18, 19, 23, 236, 236, 236, 240,
	240, 241, 241, 242, 242, 242, 242, 242, 242, 242,
	238, 238, 26, 26, 26, 26, 26, 125, 121, 121,
	123, 123, 123, 123, 48, 120, 120, 120, 120, 122,
	122, 122, 122, 193, 192, 192, 198, 198, 198, 61,
	61, 61, 61, 61, 62, 62, 62, 191, 191, 191,
	191, 199, 199, 199, 199, 199, 199, 63, 63, 63,
	197, 197, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 237,
	237, 239, 239, 28, 28, 9, 9, 10, 10, 64,
	64, 65, 65, 128, 128, 128, 128, 66, 66, 44,
	44, 44, 127, 208, 208, 209, 209, 209, 209, 209,
	209, 210, 210, 210, 210, 210, 210, 210, 206, 206,
	207, 204, 204, 205, 205, 205, 205, 243, 243, 126,
	126, 69, 69, 213, 213, 213, 213, 211, 211, 211,
	211, 211, 214, 212, 215, 215, 215, 215, 215, 157,
	157, 157, 30, 8, 8, 110, 110, 73, 73, 161,
	161, 161, 55, 55, 39, 39, 39, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 111, 111, 112, 112,
	21, 25, 29, 29, 29, 29, 29, 245, 245, 52,
	52, 52, 52, 53, 53, 124, 124, 124, 124, 124,
	47, 7, 7, 46, 46, 20, 20, 20, 20, 20,
	58, 58, 117, 117, 117, 119, 119, 118, 118, 118,
	96, 96, 31, 78, 78, 87, 87, 88, 88, 167,
	89, 89, 24, 24, 34, 34, 32, 32, 32, 32,
	32, 32, 33, 33, 35, 35, 35, 35, 35, 35,
	35, 221, 221, 221, 223, 223, 220, 222, 222, 244,
	244, 97, 97, 97, 68, 67, 67, 71, 71, 70,
	72, 72, 160, 94, 94, 94, 94, 113, 114, 114,
	115, 115, 116, 116, 93, 93, 143, 143, 36, 36,
	77, 77, 79, 79, 134, 134, 135, 135, 133, 133,
	133, 162, 162, 162, 162, 163, 163, 163, 163, 163,
	163, 158, 158, 158, 158, 159, 159, 168, 168, 100,
	100, 100, 100, 98, 98, 99, 99, 164, 164, 164,
	164, 95, 95, 165, 165, 165, 129, 129, 171, 171,
	171, 76, 76, 76, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 173, 173, 173,
	173, 175, 175, 175, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 176, 176,
	183, 183, 184, 184, 185, 186, 177, 177, 178, 178,
	179, 180, 187, 187, 187, 187, 189, 189, 181, 181,
	181, 181, 181, 182, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 108, 108,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 216, 216, 216, 216, 216, 216, 216, 218, 218,
	219, 219, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 224, 224,
	225, 225, 227, 227, 228, 228, 229, 230, 230, 230,
	231, 232, 232, 226, 226, 233, 233, 233, 234, 234,
	235, 235, 235, 235, 235, 148, 148, 148, 149, 149,
	150, 84, 84, 145, 145, 144, 144, 144, 147, 147,
	101, 188, 188, 188, 188, 188, 188, 188, 102, 102,
	109, 103, 103, 104, 104, 104, 104, 104, 104, 140,
	141, 105, 105, 105, 142, 142, 151, 155, 155, 154,
	153, 153, 152, 152, 132, 132, 132, 132, 131, 130,
	90, 90, 246, 246, 156, 156, 91, 91, 92, 86,
	86, 166, 166, 166, 166, 80, 80, 60, 60, 81,
	81, 56, 56, 59, 57, 57, 57, 57, 74, 74,
	75, 75, 54, 54, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 190, 190, 190, 49, 49,
	49, 50, 50, 51, 51, 195, 195, 195, 196, 196,
	196, 196, 194, 194, 194, 194, 194, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 6, 3, 1, 5, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	4, 4, 4, 2, 3, 4, 3, 2, 4, 2,
	0, 2, 0, 8, 8, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -29, -21, -30, -31, 23, 64, -7, -8,
	-9, -10, -222, 92, 100, 193, 99, 85, 115, 207,
	214, -32, -34, 222, -125, 223, 34, 232, 58, 95,
	209, 204, 253, 66, -221, -35, -33, 299, 274, 280,
	217, -36, 240, 267, 302, 240, 128, 78, -56, -49,
	4, -200, -202, 20, 21, 23, 33, 34, 39, 43,
	46, 57, 58, 59, 61, 63, 64, 65, 68, 69,
	76, 77, 78, 79, 81, 85, 87, 91, 92, 94,
	99, 100, 105, 106, 109, 111, 116, 121, 122, 129,
	132, 127, 141, 143, 144, 149, 152, 155, 157, 158,
	159, 160, 161, 163, 164, 166, 168, 165, 171, 173,
	174, 180, 183, 186, 187, 188, 191, 193, 195, 196,
	197, 199, 200, 204, 202, 203, 205, 207, 209, 210,
	212, 214, 215, 216, 219, 220, 222, 223, 225, 228,
	231, 232, 233, 236, 234, 230, 239, 241, 242, 249,
	253, 254, 255, 256, 259, 260, 261, 264, 265, 266,
	270, 275, 276, 277, 278, 28, 35, 36, 37, 38,
	40, 41, 44, 45, 49, 50, 51, 53, 80, 82,
	83, 98, 101, 107, 117, 119, 123, 124, 133, 134,
	135, 136, 138, 147, 170, 172, 181, 185, 190, 192,
	198, 211, 218, 226, 227, 235, 237, 244, 245, 246,
	250, 251, 267, 268, 87, 132, 261, 260, 78, 128,
	240, -14, 299, -24, -6, -12, -4, -20, -31, -11,
	-13, 23, -49, -49, -49, 193, 22, -240, 22, -241,
	-242, 66, 92, 115, 217, 132, 87, 260, -240, -53,
	214, -49, -121, 152, 220, 211, 249, -122, -120, -193,
	244, 161, -82, -49, 4, 78, 57, 79, 116, 128,
	129, 62, 63, 144, 241, 244, 249, 22, 66, -245,
	249, 249, -245, -245, -52, 249, 247, -53, -244, 240,
	240, -110, 78, 258, -33, -35, -34, -70, -71, 257,
	137, 97, 179, -32, -34, -221, -223, 199, -220, -49,
	-223, -67, -68, 22, 89, 303, -164, -56, 177, -92,
	299, -3, -164, 123, -56, -59, 123, -56, -49, 113,
	299, -90, -132, -131, -130, 297, 301, 113, 139, 139,
	-165, -164, -49, 123, -60, 123, -59, -83, 123, -82,
	-170, -169, -196, 4, -200, -202, -201, 267, 55, 67,
	114, 131, 125, 140, 142, 148, 150, 162, 182, 184,
	208, 224, 240, -146, 299, -106, 299, -49, 22, 176,
	303, 176, -49, -121, 51, -121, 299, -123, -47, -48,
	141, 195, 247, 284, 113, 278, -63, 5, 84, -85,
	301, 113, -237, 176, 113, 113, 113, 113, 113, 113,
	278, 141, 195, 240, -124, -47, -48, -124, 247, -53,
	-95, -164, -82, 123, 128, -49, 123, -70, -71, -94,
	-113, -114, 151, 175, -97, 22, 89, -97, -97, 43,
	300, 300, 303, -223, -75, 299, -86, -166, -136, 292,
	-138, 290, 291, 296, 167, 279, -148, -56, -139, 9,
	299, -151, -218, -34, 98, 29, -149, -150, 211, -49,
	7, 8, 5, 6, -54, -173, -182, 252, 102, 169,
	47, -216, -217, 4, -200, -195, -174, -184, -178, -181,
	138, 55, 71, 74, 72, 75, 221, 262, 48, 28,
	101, 185, 190, 237, 250, 251, 123, 170, 124, 53,
	117, 147, 91, 36, 38, 40, 41, 49, 50, 80,
	82, 83, 107, 133, 134, 135, 136, 172, 198, 226,
	235, 245, 246, 268, -201, -185, -186, -179, -180, -187,
	-86, -92, 292, -56, 299, -91, -156, -136, 84, -41,
	202, -40, 21, 23, 92, 265, 98, 230, 230, 202,
	98, 304, 202, 233, 300, -80, -56, -132, -136, -194,
	292, 4, -200, -202, -201, -203, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 42, 47, 48, 52, 54,
	56, 62, 66, 70, 71, 72, 73, 74, 75, 84,
	86, 88, 89, 90, 93, 95, 97, 102, 103, 104,
	110, 112, 113, 115, 118, 120, 126, 128, 130, 137,
	139, 145, 146, 151, 153, 154, 167, 169, 175, 176,
	177, 178, 179, 189, 194, 201, 206, 217, 221, 229,
	238, 240, 243, 247, 248, 252, 257, 258, 262, 263,
	269, 271, 272, 273, 274, -165, -58, -56, -58, 222,
	-49, 30, 98, -43, 303, 46, 205, 98, -43, 303,
	98, 300, 303, -164, 123, 30, -145, -171, -172, -174,
	-183, -177, -181, -182, 39, 45, 44, 242, 218, 227,
	37, 133, 134, 135, 136, 226, 36, 198, 107, 91,
	83, 82, 172, 41, 40, -185, -186, -179, -180, 80,
	245, 246, 138, 38, 50, 49, 268, 235, -84, -136,
	-236, -81, 240, 78, -57, -49, 292, -242, -236, 30,
	-84, 303, 303, 149, -62, 155, 166, 121, -192, 84,
	-198, -191, -157, 9, 252, 102, 176, -197, 8, 291,
	-190, -196, 5, 7, 290, -192, 84, 69, -199, 5,
	4, -182, -157, 84, 152, 301, -194, -193, -239, 110,
	-236, -193, -193, -193, -193, -193, -49, 149, -193, 303,
	303, -53, -43, 303, 299, -69, 167, -50, 123, -49,
	-46, 94, 167, -94, -114, -113, -115, -136, 22, -136,
	-138, -33, -33, -33, -72, -160, -136, -220, 30, -74,
	-49, -77, 303, 113, 10, 11, 54, 33, 290, 291,
	292, 293, 108, 294, 287, 288, 289, 286, 282, 283,
	284, 60, 156, 213, 13, 14, 15, 26, 178, 150,
	279, 125, 224, 296, 16, 17, 18, 140, 35, 126,
	30, 4, -136, -136, -136, -136, -136, 184, -34, -136,
	-84, -90, -34, -144, 297, 299, -90, 299, 5, 5,
	299, -152, -136, -224, 275, 110, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 192, -189, 270, -189, -189, -175, 299, -175,
	-176, 299, -175, 276, 280, 299, -77, -56, 303, 300,
	303, 247, -111, 62, 56, -127, 123, 56, -204, -49,
	62, -205, 52, 258, 194, 112, -111, 62, -111, 62,
	62, -164, 33, 33, 247, -59, -49, 247, 113, 300,
	303, 298, 307, -129, 272, -117, -24, 299, 84, 30,
	-117, -87, -88, -167, -89, -56, 299, -49, -49, -59,
	-60, -82, -83, -14, -169, 98, -16, -24, -20, -31,
	-11, 300, 303, -76, 29, -107, 299, 277, 159, 81,
	122, 158, -108, 216, 300, 303, 247, 303, -81, -74,
	-131, -130, 113, 249, 300, -48, -47, -61, 197, 228,
	203, 219, 303, 8, 7, 7, 5, -194, -238, -49,
	-48, -47, -164, -64, -74, -65, -49, -128, -127, -206,
	-207, -204, 128, 258, 103, 30, 98, 176, 167, 284,
	98, -116, 211, 212, 303, -39, 31, 88, 299, 303,
	300, -129, -166, -79, -162, -164, -34, -163, 299, -171,
	-171, -82, 244, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, 150, 125, 224, 35, 126,
	-136, 247, -136, -136, -136, -136, 169, 167, 252, 102,
	259, 89, 173, -246, 238, 32, -142, -34, 299, -194,
	-148, 211, 299, 300, 303, -84, -147, 298, -144, -84,
	300, 300, -84, 269, 22, 89, 292, -107, 7, -155,
	-154, 271, -225, 105, 118, 299, 300, 300, -136, -136,
	-101, -188, 4, 277, 159, 81, 122, 158, 216, -102,
	-136, -103, -137, -138, 290, 291, 296, 299, 211, -104,
	-136, -84, -136, 42, 146, 248, -105, -136, 113, -84,
	-136, -136, -136, -84, -84, -84, 299, 7, 7, 244,
	244, 7, -129, 300, -156, -40, -56, -49, -49, 167,
	-127, 123, -45, 167, -171, -49, 299, 299, 143, 143,
	-49, -49, 123, -49, 123, -49, -49, -41, 202, 299,
	299, -49, 202, -49, 233, 113, -56, -136, -96, 206,
	-136, -96, -119, 176, -80, 267, -49, 206, -78, 303,
	113, 284, -80, -43, -43, -164, -171, 297, 297, 7,
	247, 247, 247, 247, 299, -136, -238, -57, -238, -47,
	256, 59, 197, -198, -107, 303, 300, 300, 303, -50,
	128, -50, -24, -82, -56, 98, 5, -49, -160, -16,
	-49, -93, 118, -168, 303, 281, 67, -100, 142, 162,
	114, 148, 208, 131, -133, 304, -159, -158, 30, -49,
	-34, -163, -162, 278, -136, -136, 247, -246, 238, -142,
	-136, 169, 252, 102, 259, 89, 173, 113, 299, -137,
	-137, -84, 299, -84, -136, 298, 298, 303, 300, -71,
	303, -70, -136, -84, -84, 300, 300, -153, -154, 93,
	-136, -230, 183, 299, 299, -136, 30, 303, 300, 113,
	300, -109, 189, 300, 10, 11, 290, 291, 292, 293,
	108, 294, 287, 288, 289, 286, 282, 283, 284, 60,
	156, 213, 13, 14, 15, 140, 126, -137, -137, -137,
	-84, 299, 300, -140, -141, 113, 110, 30, -105, -105,
	-105, 300, 113, -84, 303, 303, 303, 300, 300, 300,
	7, 300, 303, 300, 278, 278, 300, -93, 247, 247,
	98, 167, 264, -208, -205, -136, -74, 299, 299, -38,
	92, 222, -112, 98, -43, 98, -43, 247, -111, 62,
	-84, -84, 247, 233, 298, -86, 206, 61, 300, -86,
	-129, -88, -79, -156, 300, 298, 7, 7, 300, 159,
	122, 158, -108, 158, -108, -108, 7, -49, -66, 127,
	-128, 299, -50, 299, 299, -69, 299, -49, -46, 300,
	-143, 120, 43, -162, 173, 142, 142, -162, -100, 142,
	-98, 182, -98, -98, -159, -194, 305, -49, 299, 300,
	-136, -136, -137, -137, 113, 299, -136, -145, 26, 26,
	300, -84, 300, 303, 300, -144, 300, 269, -71, -71,
	-71, 5, 95, -136, 243, -231, -49, 299, 272, -70,
	300, -171, -171, -136, -140, -136, -171, -171, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, 89, 167, 173,
	-137, 303, -84, 300, -141, -140, -136, -136, -171, 300,
	300, 300, -84, -136, -136, -136, 300, 7, -143, -49,
	-49, -127, 98, -209, 62, -210, 54, 103, 66, 167,
	169, 258, 194, 52, 84, 201, 300, 300, -74, -74,
	167, 84, 167, 84, 77, 254, -49, -49, -56, -49,
	-49, 300, 300, -49, -86, -118, 299, 176, -24, -96,
	284, 298, 298, 300, 126, -73, -161, -49, -219, 299,
	-216, -217, -54, 299, -74, -64, 30, -73, 176, -227,
	273, -136, -84, 239, -162, -162, -99, 263, 176, 142,
	-162, -135, -134, 111, 165, 299, -74, -158, 26, 26,
	-136, -145, 300, -136, -136, 300, -136, 5, -136, 300,
	300, 300, -136, -232, -49, -136, 300, 300, 300, -141,
	113, 89, 173, 299, -136, 300, 300, 303, 300, 300,
	300, -227, -127, -49, -82, -49, 103, 123, 169, 143,
	299, -137, -56, -126, -243, 65, 236, 300, 300, 169,
	169, -136, -171, -43, -43, 247, 247, 90, -74, 62,
	-92, -34, 299, 186, 300, 303, -55, -90, 54, -55,
	-136, 299, -73, 300, 300, -24, 300, -56, -228, -229,
	-49, 244, -99, 299, -136, -162, 303, 306, 284, -74,
	300, -136, -136, 300, 300, -71, -226, 188, 300, -137,
	113, 299, -145, 300, -136, -210, -50, 167, -136, -51,
	299, -66, 299, 201, -42, 54, -49, -49, 260, 168,
	300, -49, -49, -126, -161, -39, -82, -39, 300, -84,
	300, -66, -126, 299, 303, 30, 5, -74, -134, -194,
	300, 300, -71, 43, -137, -145, 300, 300, 98, 300,
	-213, 157, -49, -74, -56, -37, 263, -82, 222, -129,
	299, -66, -55, -71, -126, -66, -73, -229, -231, 300,
	-233, 196, 212, -84, 300, 103, -211, -214, -212, 176,
	114, 187, 225, 300, 300, -69, 299, -136, -87, -74,
	-39, 300, -66, 300, 300, -234, -235, 35, 255, 69,
	-136, -234, -49, -212, 176, -214, 176, 260, 87, -213,
	-129, 300, -126, -235, 191, 109, 211, 191, 109, -215,
	164, 205, 46, 222, -215, -211, -44, 46, 205, -66,
	26, 20, 169, 84, -235,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 0, 0, 368, 0, 0, 0, 0, 0,
	0, 342, -2, 0, 126, 0, 298, 0, 298, 298,
	302, 0, 370, 266, 367, -2, 378, 0, 0, 0,
	376, 356, 0, 0, -2, 0, 0, 0, 0, 771,
	798, 799, 800, 817, 818, 819, 820, 821, 822, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 897, 898, 899, 900, 901, 902, 903,
	904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
	914, 915, 916, 917, 918, 919, 920, 921, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 0, 0, 0, 0, 0, 0,
	0, 77, 0, 79, 80, 81, 82, 83, 84, 85,
	86, 0, 92, 99, 100, 881, 102, 0, 109, 110,
	111, 113, 114, 115, 116, 117, 118, 119, 0, 291,
	895, 304, 122, 860, 899, 965, 913, 129, 139, 0,
	971, -2, 143, 73, 172, 173, 0, 175, 190, 0,
	0, 0, 0, 0, 183, 0, 0, 187, 0, 309,
	297, 309, 294, 295, 296, 299, 0, 290, 0, 369,
	0, 0, 0, 265, -2, 352, 353, -2, 0, 373,
	373, 373, 0, 0, 353, 0, 361, 885, 364, 781,
	362, 0, 0, 375, 374, 0, 357, 437, 0, 398,
	0, 2, 0, 950, 437, 0, 950, 0, 0, 0,
	0, 772, 750, 744, 745, 0, 0, 0, 0, 0,
	0, 443, 65, 950, 50, 950, 767, 50, 950, 71,
	0, 87, 89, 808, 809, 810, 811, 976, 978, 979,
	980, 981, 982, 983, 984, 985, 986, 987, 988, 989,
	990, 991, 0, 0, 0, 97, 0, 101, 103, 0,
	0, 0, 303, 123, 940, 125, 0, 128, 130, 131,
	0, 0, 0, 0, 0, 0, 142, 167, 168, 74,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	184, 0, 186, 0, 292, 305, 306, 293, 0, 301,
	50, 441, 242, 950, 802, 314, 950, -2, 0, 348,
	385, 386, 0, 0, 0, 371, 372, 0, 0, 0,
	344, 345, 0, 363, 0, 0, 401, 759, 763, 764,
	530, 0, 0, 0, 0, 0, 0, 619, 620, 621,
	0, 623, 624, 625, 945, 0, 629, 630, 965, 771,
	784, 785, 786, 787, 0, 0, 0, 792, 793, 794,
	743, 669, 639, -2, -2, 782, 467, 468, 469, 470,
	-2, 978, 643, 645, 647, 648, 649, 650, 0, 929,
	946, 961, 962, 970, 974, 975, 950, 958, 951, 941,
	948, 957, 841, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 807, 492, 493, 498, 499, 501,
	401, 399, 438, 439, 0, 0, 756, 754, 755, 27,
	287, 29, 0, 287, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 765, 751, 0, 748,
	749, 812, 813, 814, 815, 816, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 447, 0, 320, 0, 0,
	444, 0, 0, 67, 0, 48, 49, 0, 69, 0,
	0, 368, 0, 0, 950, 368, 0, 703, 453, 454,
	455, 456, 457, 527, 460, 461, 462, 463, 464, 465,
	466, 474, 475, 476, 477, 478, 479, 480, 489, 0,
	473, 473, 473, 486, 487, 490, 491, 496, 497, 508,
	509, 511, 513, 507, 507, 507, 504, 505, 0, 701,
	0, 106, 0, 836, 769, 774, 775, 112, 0, 0,
	0, 0, 0, 0, 134, 154, 155, 156, 135, 137,
	144, 146, 147, 148, 157, 158, 159, 160, 259, 0,
	261, 170, 171, 795, 0, 136, 138, 140, 141, 161,
	162, 0, 164, 165, 166, 0, 75, 174, 176, 0,
	189, 177, 178, 179, 180, 181, 182, 185, 188, 0,
	0, 300, 262, 0, 200, 0, 0, 0, 950, 801,
	311, 0, 0, 351, 383, 384, 387, 390, 391, 388,
	530, 358, 359, 360, 379, 380, 276, 365, 0, 0,
	778, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 753, 0,
	0, 762, 535, 536, 537, 559, 560, 0, -2, 701,
	0, 626, 627, 628, 0, 0, -2, 0, 789, 527,
	0, 0, 742, 671, 0, 0, 0, 0, 0, 0,
	0, 0, 722, 728, 0, 0, 0, 0, 0, 0,
	0, 0, 482, 495, 506, 503, 502, 484, 0, 483,
	481, 0, 485, 0, 0, 0, 447, 0, 0, 758,
	0, 0, 0, 0, 286, 31, 950, 0, 52, 0,
	0, 232, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 746, 0, 331, 0, 331, 322, 0, 0, 0,
	318, 334, 335, 337, 338, 0, 0, 445, 66, 768,
	50, 72, 50, 78, 88, 0, 90, 93, 94, 95,
	96, 91, 0, 448, 450, 458, 0, 514, 515, 516,
	517, 518, 519, 528, 98, 0, 0, 0, 107, 108,
	776, 777, 0, 0, 127, 132, 133, 310, 0, 151,
	0, 153, 0, 260, 797, 796, 527, 76, 191, 120,
	307, 308, 442, 0, 0, 199, 778, 201, 203, 204,
	205, 206, 802, 0, 802, 0, 0, 0, 0, 0,
	0, 389, 392, 393, 0, 382, 274, 275, 368, 0,
	780, 395, 760, 428, 402, 410, 426, 413, 0, 531,
	532, 533, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, -2, -2, -2, 551, 552, 553, -2,
	-2, -2, 557, 558, -2, 0, 0, 0, 753, 0,
	-2, 0, 567, -2, -2, -2, 571, 0, 574, 576,
	578, 0, 0, 0, 0, 752, 588, 734, 0, 761,
	573, 0, 0, 622, 0, 0, 0, 707, 708, 0,
	-2, 631, 378, 0, 0, 0, 0, 790, 0, 741,
	737, 0, 679, 0, 0, 0, 644, 646, 0, 0,
	0, 0, 711, 712, 713, 714, 715, 716, 717, 0,
	0, 0, 0, 590, 0, 0, 0, 0, 965, 0,
	701, 727, 0, 0, 0, 0, 0, 701, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 395, 440, 757, 30, 278, 0, 0, 0,
	33, 950, 41, 0, 214, 0, 0, 0, 0, 0,
	289, 42, 950, 50, 950, 50, 43, 28, 287, 0,
	0, 280, 0, 277, 58, 0, 766, 0, 64, 0,
	446, 315, 316, 0, 0, 324, 321, 0, 447, 0,
	0, 0, 0, 68, 70, 0, 704, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 104, 770, 105, 124,
	149, 150, 152, 145, 163, 0, 208, 241, 0, 0,
	802, 0, 197, 242, 0, 0, 313, 314, 381, 0,
	779, 397, 0, 400, 0, 0, 0, 0, 0, 0,
	434, 434, 434, 432, 426, 0, 412, 425, 0, 424,
	-2, 413, 0, 0, -2, -2, 0, 0, 0, 589,
	-2, 572, 575, 577, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 702, 705, 706, 0, -2, 0,
	0, 377, 378, 378, 378, 637, 0, 0, 738, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 653, 0,
	654, 0, 0, 655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 593, 594, 595,
	0, 0, 656, 725, 726, 0, 0, 0, 0, 0,
	0, 661, 0, 732, 0, 0, 0, 665, 666, 667,
	0, 471, 0, 488, 510, 512, 500, 397, 0, 0,
	0, 0, 51, 212, 231, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 39, 0, 45, 0, 0, 0,
	0, 0, 0, 59, 747, 330, 0, 329, 0, 319,
	331, 336, 333, 339, 0, 451, 0, 0, 459, 520,
	521, 522, 523, 524, 525, 526, 0, 121, 195, 0,
	202, 0, 0, 0, 200, 0, 0, 0, 312, 366,
	673, 0, 0, 403, 0, 0, 0, 0, 0, 0,
	429, 433, 430, 431, 411, 408, 0, 422, 0, 415,
	534, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	735, 0, 696, 0, -2, 709, 632, 0, 0, 0,
	0, 791, 736, 740, 0, 677, 678, 682, 0, 0,
	642, 0, 0, 710, 719, 720, 591, 592, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 605, -2, -2,
	-2, 609, 610, 611, -2, -2, -2, 0, 0, 0,
	721, 0, 0, 699, 723, 724, 729, 730, 0, 658,
	659, 660, 731, 0, 0, 0, 494, 0, 673, 282,
	284, 32, 0, 213, 0, 216, 0, 0, 0, 0,
	222, 223, 0, 0, 0, 0, 233, 240, 0, 0,
	0, 47, 0, 0, 288, 0, 50, 50, 279, 0,
	0, 193, 194, 281, 317, 0, 0, 0, 323, 332,
	0, 452, 449, 529, 0, 0, 267, 273, 273, 0,
	640, 641, 0, 0, 0, 0, 0, 0, 0, 354,
	0, 396, 394, 0, 416, 0, 418, 0, 0, 0,
	420, 0, 406, 0, 405, 0, 0, 414, 0, 0,
	-2, 0, 582, -2, -2, 695, 702, 788, 378, 633,
	635, 636, 739, 684, 681, 0, 668, 651, 652, 718,
	0, 0, 0, 0, 702, 698, 657, 0, 663, 664,
	472, 355, 34, 0, 217, 218, 802, 0, 221, 224,
	0, 226, 804, 208, 0, 237, 238, 235, 0, 36,
	37, 46, 54, 38, 44, 0, 0, 0, 0, 0,
	340, 341, 0, 0, 240, 0, 276, 783, 0, 276,
	0, 0, 0, 230, 208, 198, 240, 0, 672, 674,
	0, 0, 417, 0, 436, 419, 0, 409, 0, 0,
	423, -2, -2, 583, 697, 0, 378, 0, 670, -2,
	0, 0, 0, 700, 0, 215, 219, 0, 0, 246,
	0, 234, 0, 0, 56, 0, 283, 285, 0, 326,
	447, 328, 0, 208, 268, 269, 272, 270, 273, 378,
	240, 196, 208, 0, 0, 0, 427, 0, 407, 404,
	421, 634, 687, 0, -2, 0, 617, 662, 0, 225,
	251, 0, 0, 0, 242, 40, 0, 53, 0, 327,
	0, 228, 276, 0, 208, 263, 0, 675, 676, 435,
	0, 0, 0, 683, 618, 0, 227, 247, 248, 0,
	243, 244, 245, 803, 239, 246, 0, 55, 447, 0,
	271, 632, 229, 240, 680, 685, 688, -2, 916, 833,
	0, 686, 220, 249, 0, 250, 0, 0, 0, 251,
	325, 211, 208, 0, 690, 691, 692, 693, 694, 252,
	0, 255, 256, 0, 253, 236, 207, 209, 210, 264,
	0, 254, 257, 258, 689,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 288, 3, 294, 289, 3,
	299, 300, 292, 290, 303, 291, 301, 293, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 307, 302,
	282, 284, 283, 3, 304, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 297, 3, 298, 287, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 305, 286, 306, 296,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 285,
	57625, 295, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:727
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:739
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:790
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:848
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:921
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:925
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{ /* SKIP DOC */
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{ /* SKIP DOC */
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			unimplemented()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = Low
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = Normal
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = High
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1423
		{
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1603
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1607
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = DropDefault
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1817
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1828
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1831
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = true
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = false
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			unimplemented()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1919
		{
			unimplemented()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1923
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = Ascending
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = Descending
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1990
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2032
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.str = ""
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.str = ""
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2127
		{
			unimplementedWithIssue(6637)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2134
		{
			unimplementedWithIssue(6637)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2176
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			unimplementedWithIssue(7841)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2206
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2434
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2435
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2438
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2442
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2446
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = true
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = false
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = false
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = true
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2474
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2532
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2624
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &From{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.str = astFullJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.str = astLeftJoin
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.str = astRightJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.str = astInnerJoin
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2819
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			unimplementedWithIssue(2115)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2914
		{
			unimplementedWithIssue(2115)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2923
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2979
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = nil
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3028
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3100
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3132
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3172
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3207
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3216
		{
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3220
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3663
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3664
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3687
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3707
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3796
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3797
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3800
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3801
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = Window(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.str = ""
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3890
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3903
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3904
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4233
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4389
		{
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4425
		{
			unimplemented()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = DNull
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.str = ""
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
