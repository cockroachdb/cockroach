// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COPY = 57405
const COVERING = 57406
const CREATE = 57407
const CROSS = 57408
const CUBE = 57409
const CURRENT = 57410
const CURRENT_CATALOG = 57411
const CURRENT_DATE = 57412
const CURRENT_ROLE = 57413
const CURRENT_TIME = 57414
const CURRENT_TIMESTAMP = 57415
const CURRENT_USER = 57416
const CYCLE = 57417
const DATA = 57418
const DATABASE = 57419
const DATABASES = 57420
const DATE = 57421
const DAY = 57422
const DEC = 57423
const DECIMAL = 57424
const DEFAULT = 57425
const DEALLOCATE = 57426
const DEFERRABLE = 57427
const DELETE = 57428
const DESC = 57429
const DISTINCT = 57430
const DO = 57431
const DOUBLE = 57432
const DROP = 57433
const ELSE = 57434
const ENCODING = 57435
const END = 57436
const ESCAPE = 57437
const EXCEPT = 57438
const EXISTS = 57439
const EXECUTE = 57440
const EXPLAIN = 57441
const EXTRACT = 57442
const FALSE = 57443
const FAMILY = 57444
const FETCH = 57445
const FILTER = 57446
const FIRST = 57447
const FLOAT = 57448
const FLOORDIV = 57449
const FOLLOWING = 57450
const FOR = 57451
const FORCE_INDEX = 57452
const FOREIGN = 57453
const FROM = 57454
const FULL = 57455
const GRANT = 57456
const GRANTS = 57457
const GREATEST = 57458
const GROUP = 57459
const GROUPING = 57460
const HAVING = 57461
const HIGH = 57462
const HOUR = 57463
const IF = 57464
const IFNULL = 57465
const ILIKE = 57466
const IN = 57467
const INTERLEAVE = 57468
const INDEX = 57469
const INDEXES = 57470
const INITIALLY = 57471
const INNER = 57472
const INSERT = 57473
const INT = 57474
const INT8 = 57475
const INT64 = 57476
const INTEGER = 57477
const INTERSECT = 57478
const INTERVAL = 57479
const INTO = 57480
const IS = 57481
const ISOLATION = 57482
const JOIN = 57483
const KEY = 57484
const KEYS = 57485
const LATERAL = 57486
const LEADING = 57487
const LEAST = 57488
const LEFT = 57489
const LEVEL = 57490
const LIKE = 57491
const LIMIT = 57492
const LOCAL = 57493
const LOCALTIME = 57494
const LOCALTIMESTAMP = 57495
const LOW = 57496
const LSHIFT = 57497
const MATCH = 57498
const MINUTE = 57499
const MONTH = 57500
const NAME = 57501
const NAMES = 57502
const NATURAL = 57503
const NEXT = 57504
const NO = 57505
const NO_INDEX_JOIN = 57506
const NORMAL = 57507
const NOT = 57508
const NOTHING = 57509
const NULL = 57510
const NULLIF = 57511
const NULLS = 57512
const NUMERIC = 57513
const OF = 57514
const OFF = 57515
const OFFSET = 57516
const ON = 57517
const ONLY = 57518
const OR = 57519
const ORDER = 57520
const ORDINALITY = 57521
const OUT = 57522
const OUTER = 57523
const OVER = 57524
const OVERLAPS = 57525
const OVERLAY = 57526
const PARENT = 57527
const PARTIAL = 57528
const PARTITION = 57529
const PLACING = 57530
const POSITION = 57531
const PRECEDING = 57532
const PRECISION = 57533
const PREPARE = 57534
const PRIMARY = 57535
const PRIORITY = 57536
const RANGE = 57537
const READ = 57538
const REAL = 57539
const RECURSIVE = 57540
const REF = 57541
const REFERENCES = 57542
const RENAME = 57543
const REPEATABLE = 57544
const RELEASE = 57545
const RESTRICT = 57546
const RETURNING = 57547
const REVOKE = 57548
const RIGHT = 57549
const ROLLBACK = 57550
const ROLLUP = 57551
const ROW = 57552
const ROWS = 57553
const RSHIFT = 57554
const SAVEPOINT = 57555
const SEARCH = 57556
const SECOND = 57557
const SELECT = 57558
const SERIAL = 57559
const SERIALIZABLE = 57560
const SESSION = 57561
const SESSION_USER = 57562
const SET = 57563
const SHOW = 57564
const SIMILAR = 57565
const SIMPLE = 57566
const SMALLINT = 57567
const SMALLSERIAL = 57568
const SNAPSHOT = 57569
const SOME = 57570
const SPLIT = 57571
const SQL = 57572
const START = 57573
const STDIN = 57574
const STRICT = 57575
const STRING = 57576
const STORING = 57577
const SUBSTRING = 57578
const SYMMETRIC = 57579
const SYSTEM = 57580
const TABLE = 57581
const TABLES = 57582
const TEXT = 57583
const THEN = 57584
const TIME = 57585
const TIMESTAMP = 57586
const TIMESTAMPTZ = 57587
const TO = 57588
const TRAILING = 57589
const TRANSACTION = 57590
const TREAT = 57591
const TRIM = 57592
const TRUE = 57593
const TRUNCATE = 57594
const TYPE = 57595
const UNBOUNDED = 57596
const UNCOMMITTED = 57597
const UNION = 57598
const UNIQUE = 57599
const UNKNOWN = 57600
const UPDATE = 57601
const UPSERT = 57602
const USER = 57603
const USING = 57604
const VALID = 57605
const VALIDATE = 57606
const VALUE = 57607
const VALUES = 57608
const VARCHAR = 57609
const VARIADIC = 57610
const VARYING = 57611
const WHEN = 57612
const WHERE = 57613
const WINDOW = 57614
const WITH = 57615
const WITHIN = 57616
const WITHOUT = 57617
const YEAR = 57618
const ZONE = 57619
const NOT_LA = 57620
const WITH_LA = 57621
const AS_LA = 57622
const POSTFIXOP = 57623
const UMINUS = 57624

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4723

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	301, 26,
	-2, 363,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 42,
	1, 338,
	175, 338,
	205, 338,
	299, 338,
	301, 338,
	-2, 348,
	-1, 55,
	1, 341,
	175, 341,
	205, 341,
	299, 341,
	301, 341,
	-2, 347,
	-1, 64,
	1, 26,
	301, 26,
	-2, 363,
	-1, 281,
	1, 167,
	301, 167,
	-2, 859,
	-1, 314,
	150, 373,
	174, 373,
	-2, 344,
	-1, 317,
	150, 372,
	174, 372,
	-2, 342,
	-1, 447,
	150, 372,
	174, 372,
	-2, 345,
	-1, 503,
	298, 798,
	-2, 791,
	-1, 504,
	298, 799,
	-2, 792,
	-1, 510,
	5, 508,
	298, 508,
	-2, 949,
	-1, 533,
	5, 474,
	-2, 924,
	-1, 534,
	5, 502,
	298, 502,
	-2, 926,
	-1, 535,
	5, 482,
	-2, 927,
	-1, 536,
	5, 481,
	-2, 928,
	-1, 537,
	5, 502,
	298, 502,
	-2, 931,
	-1, 538,
	5, 502,
	298, 502,
	-2, 932,
	-1, 539,
	5, 503,
	-2, 935,
	-1, 540,
	5, 468,
	-2, 936,
	-1, 541,
	5, 468,
	-2, 937,
	-1, 542,
	5, 484,
	-2, 940,
	-1, 543,
	5, 469,
	-2, 945,
	-1, 544,
	5, 470,
	-2, 946,
	-1, 545,
	5, 471,
	-2, 947,
	-1, 546,
	5, 472,
	-2, 948,
	-1, 547,
	5, 468,
	-2, 952,
	-1, 548,
	5, 475,
	-2, 957,
	-1, 549,
	5, 473,
	-2, 960,
	-1, 550,
	5, 500,
	298, 500,
	-2, 962,
	-1, 551,
	5, 504,
	-2, 965,
	-1, 552,
	5, 506,
	-2, 966,
	-1, 553,
	5, 499,
	298, 499,
	-2, 970,
	-1, 877,
	96, 348,
	136, 348,
	150, 348,
	174, 348,
	178, 348,
	256, 348,
	-2, 618,
	-1, 885,
	298, 776,
	-2, 765,
	-1, 1079,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 542,
	-1, 1080,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 543,
	-1, 1081,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 544,
	-1, 1085,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 548,
	-1, 1086,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 549,
	-1, 1087,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 550,
	-1, 1090,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 555,
	-1, 1096,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 557,
	-1, 1099,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 562,
	-1, 1100,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 563,
	-1, 1101,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 564,
	-1, 1126,
	183, 689,
	-2, 692,
	-1, 1292,
	96, 348,
	136, 348,
	150, 348,
	174, 348,
	178, 348,
	256, 348,
	-2, 421,
	-1, 1296,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 556,
	-1, 1297,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 558,
	-1, 1302,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 559,
	-1, 1320,
	183, 688,
	-2, 691,
	-1, 1481,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 560,
	-1, 1486,
	139, 0,
	-2, 574,
	-1, 1494,
	183, 690,
	-2, 693,
	-1, 1527,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 599,
	-1, 1528,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 600,
	-1, 1529,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 601,
	-1, 1533,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 605,
	-1, 1534,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 606,
	-1, 1535,
	12, 0,
	13, 0,
	14, 0,
	281, 0,
	282, 0,
	283, 0,
	-2, 607,
	-1, 1639,
	139, 0,
	-2, 575,
	-1, 1642,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 578,
	-1, 1643,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 580,
	-1, 1729,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 579,
	-1, 1730,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	124, 0,
	125, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 581,
	-1, 1737,
	139, 0,
	-2, 608,
	-1, 1782,
	139, 0,
	-2, 609,
	-1, 1835,
	34, 0,
	124, 0,
	149, 0,
	223, 0,
	278, 0,
	-2, 923,
}

const sqlNprod = 1064
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24082

var sqlAct = [...]int{

	504, 1834, 683, 1448, 1814, 1788, 1682, 1858, 962, 1052,
	1815, 1833, 1816, 1505, 970, 1717, 1705, 589, 1631, 502,
	1605, 352, 1625, 880, 1618, 282, 1604, 339, 71, 18,
	807, 1564, 1222, 72, 466, 1035, 71, 71, 71, 554,
	1289, 71, 1460, 882, 71, 1288, 1470, 1279, 1034, 810,
	1375, 697, 71, 1001, 1060, 1032, 696, 931, 971, 71,
	71, 940, 1374, 71, 243, 1136, 71, 71, 71, 1112,
	1323, 1109, 569, 825, 25, 501, 1172, 566, 1064, 14,
	41, 325, 54, 1273, 494, 994, 1027, 7, 760, 985,
	744, 435, 1062, 351, 476, 585, 353, 571, 436, 354,
	741, 771, 467, 916, 371, 367, 9, 8, 318, 248,
	6, 912, 364, 964, 247, 4, 54, 241, 831, 1038,
	829, 366, 249, 328, 450, 55, 449, 317, 451, 269,
	56, 762, 758, 676, 260, 740, 360, 454, 323, 326,
	1724, 250, 245, 1725, 963, 244, 54, 685, 1287, 685,
	246, 685, 1234, 1865, 1850, 336, 1056, 1056, 342, 998,
	1831, 1822, 1812, 1704, 1056, 991, 833, 1807, 322, 279,
	1056, 1784, 322, 1778, 991, 1233, 1056, 64, 581, 1768,
	315, 307, 1704, 1758, 1731, 314, 1056, 991, 345, 834,
	1728, 1714, 1712, 1056, 1704, 1056, 967, 477, 60, 330,
	999, 834, 1703, 1687, 1686, 1704, 1056, 1056, 1004, 1664,
	1644, 836, 1004, 1004, 1641, 1591, 1590, 991, 1004, 1004,
	1772, 62, 832, 836, 1576, 68, 1276, 1056, 1490, 834,
	1175, 1004, 835, 1540, 1493, 1259, 1000, 997, 71, 71,
	71, 71, 1434, 374, 835, 959, 496, 251, 63, 1428,
	1392, 836, 959, 1393, 1390, 58, 71, 1004, 1707, 1389,
	337, 59, 1004, 344, 347, 1388, 369, 1320, 1004, 929,
	1004, 71, 835, 1318, 71, 71, 375, 1277, 1319, 1261,
	57, 1056, 376, 1317, 1057, 1006, 841, 1056, 1004, 1120,
	53, 1061, 1322, 1051, 1002, 1021, 1004, 1013, 841, 1276,
	1004, 1003, 990, 462, 1004, 991, 686, 71, 686, 71,
	686, 71, 800, 71, 958, 556, 33, 959, 928, 691,
	799, 927, 692, 323, 34, 752, 841, 751, 71, 60,
	361, 400, 335, 434, 851, 356, 442, 355, 60, 71,
	461, 356, 1233, 355, 372, 785, 420, 356, 1832, 1829,
	1821, 71, 62, 1596, 1779, 996, 832, 592, 71, 71,
	71, 62, 71, 561, 1713, 1669, 1665, 560, 408, 1657,
	688, 1656, 1655, 587, 851, 409, 834, 995, 1455, 63,
	1650, 1649, 1648, 1602, 1555, 447, 58, 1550, 63, 1549,
	593, 852, 59, 71, 1548, 1496, 594, 1479, 836, 1459,
	71, 441, 71, 888, 689, 805, 684, 1438, 803, 1397,
	1394, 966, 1117, 374, 374, 1382, 1373, 1345, 834, 835,
	57, 592, 71, 448, 71, 71, 71, 71, 71, 71,
	71, 852, 1342, 1340, 71, 337, 439, 347, 786, 71,
	836, 60, 1328, 802, 1327, 71, 375, 375, 1346, 1260,
	361, 315, 376, 376, 593, 1263, 314, 1189, 457, 458,
	594, 835, 1143, 71, 62, 1142, 71, 463, 837, 838,
	839, 840, 842, 841, 862, 1346, 1595, 1363, 1364, 1365,
	837, 838, 839, 840, 842, 693, 862, 461, 460, 349,
	1638, 63, 1824, 678, 675, 1507, 1798, 1771, 58, 1750,
	1118, 355, 1748, 1436, 59, 356, 337, 845, 837, 838,
	839, 840, 842, 885, 862, 841, 1739, 562, 1721, 1710,
	1701, 851, 1679, 57, 1360, 1662, 1634, 1612, 1485, 1478,
	1456, 1453, 1451, 1408, 555, 747, 563, 748, 1407, 1372,
	1336, 1335, 1314, 1310, 251, 1351, 775, 782, 586, 1114,
	1248, 1214, 1213, 1201, 1200, 337, 677, 677, 1182, 790,
	1141, 323, 1055, 917, 920, 71, 924, 910, 801, 909,
	908, 907, 1351, 71, 1346, 813, 815, 71, 852, 814,
	315, 71, 71, 315, 315, 821, 827, 53, 822, 823,
	337, 787, 906, 905, 791, 792, 793, 794, 795, 904,
	903, 902, 901, 798, 1366, 900, 899, 898, 934, 897,
	896, 895, 886, 33, 884, 57, 340, 465, 406, 396,
	1361, 34, 394, 1346, 1601, 834, 1201, 738, 1600, 883,
	1242, 945, 947, 1241, 1726, 437, 1346, 750, 834, 1599,
	1235, 703, 509, 834, 1046, 918, 414, 1454, 739, 914,
	915, 921, 843, 844, 845, 837, 838, 839, 840, 842,
	836, 862, 781, 922, 1396, 893, 1395, 923, 835, 950,
	1295, 1351, 577, 430, 804, 350, 415, 1362, 272, 925,
	71, 835, 71, 71, 1619, 71, 963, 1508, 71, 1331,
	71, 71, 937, 374, 1137, 913, 889, 1229, 1794, 839,
	840, 842, 954, 862, 1845, 1846, 965, 1584, 965, 312,
	726, 879, 306, 1695, 305, 980, 369, 1012, 300, 1361,
	1351, 243, 301, 1757, 941, 986, 375, 1347, 1348, 1349,
	1350, 1352, 376, 1351, 562, 1694, 1422, 1400, 60, 572,
	470, 573, 1255, 71, 71, 1399, 1357, 1358, 1359, 1298,
	1356, 1353, 1354, 1355, 1347, 1348, 1349, 1350, 1352, 1247,
	1246, 62, 926, 1245, 1244, 1097, 248, 1005, 1719, 956,
	988, 247, 953, 54, 337, 987, 1362, 54, 347, 249,
	412, 1361, 234, 989, 944, 438, 592, 1186, 63, 1185,
	71, 998, 969, 1435, 372, 58, 981, 983, 250, 245,
	979, 59, 244, 1026, 71, 71, 978, 246, 1068, 982,
	574, 433, 572, 1158, 573, 1756, 392, 413, 321, 593,
	242, 309, 933, 933, 918, 594, 921, 235, 1419, 932,
	1622, 1423, 999, 1111, 71, 1042, 71, 1218, 1362, 583,
	1058, 238, 1009, 1007, 1015, 1010, 915, 914, 1684, 1002,
	1014, 579, 1355, 1347, 1348, 1349, 1350, 1352, 320, 1017,
	1796, 1067, 679, 1855, 1008, 1019, 943, 1137, 1000, 997,
	592, 310, 572, 1111, 573, 1148, 1223, 974, 1845, 578,
	1426, 1020, 347, 574, 1231, 347, 1066, 1115, 67, 313,
	1018, 239, 1030, 1049, 1050, 1107, 1031, 1751, 1029, 1216,
	322, 1443, 587, 593, 1349, 1350, 1352, 587, 1105, 594,
	862, 1356, 1353, 1354, 1355, 1347, 1348, 1349, 1350, 1352,
	1212, 780, 779, 862, 773, 768, 1002, 1124, 862, 725,
	942, 71, 71, 71, 1188, 1059, 1227, 71, 66, 1254,
	71, 1440, 261, 574, 1410, 1809, 71, 71, 71, 71,
	71, 1151, 403, 405, 71, 237, 236, 71, 489, 1002,
	71, 1810, 1256, 266, 582, 411, 1223, 71, 262, 71,
	911, 1116, 1196, 1103, 1133, 1102, 71, 1441, 319, 1108,
	468, 468, 1237, 575, 1238, 71, 69, 996, 1735, 567,
	1198, 263, 1152, 570, 252, 253, 254, 1225, 1307, 271,
	783, 337, 283, 240, 588, 1190, 71, 71, 265, 558,
	271, 1305, 71, 1417, 930, 1818, 1094, 329, 329, 1685,
	685, 69, 374, 1211, 69, 69, 348, 1191, 1153, 1150,
	410, 337, 1702, 1861, 876, 1002, 1854, 702, 1334, 1300,
	71, 431, 71, 1240, 71, 71, 1471, 323, 71, 1817,
	65, 322, 557, 1844, 732, 375, 575, 71, 1104, 1842,
	1617, 376, 1228, 1044, 71, 1106, 71, 423, 784, 1265,
	1262, 1236, 1264, 1346, 1411, 452, 1464, 1239, 1303, 1110,
	401, 703, 1308, 399, 411, 986, 1154, 453, 1819, 1871,
	258, 1536, 1250, 264, 1346, 432, 1660, 1251, 1252, 453,
	1689, 817, 819, 1688, 1253, 1677, 1092, 1095, 826, 1745,
	1257, 1258, 1402, 1195, 1121, 1125, 575, 1128, 1853, 1045,
	871, 872, 873, 874, 875, 1270, 1820, 812, 1192, 878,
	988, 1091, 806, 1167, 261, 987, 267, 54, 1580, 1179,
	1180, 1181, 506, 989, 1293, 1271, 323, 1149, 1439, 891,
	726, 1859, 1789, 797, 452, 266, 1678, 1220, 753, 1282,
	262, 1304, 1632, 1203, 586, 1301, 1299, 1202, 1306, 1537,
	1351, 1628, 1466, 586, 1870, 1538, 1285, 757, 1465, 686,
	1661, 410, 337, 263, 1449, 703, 359, 1469, 358, 320,
	1603, 1351, 1860, 1283, 820, 323, 69, 362, 69, 283,
	265, 1330, 71, 444, 1675, 1093, 774, 769, 1583, 1862,
	1414, 755, 1416, 1461, 397, 1582, 1633, 1274, 1361, 1738,
	1140, 1579, 756, 1659, 1676, 1376, 1484, 1341, 1309, 402,
	1219, 1011, 283, 283, 71, 71, 957, 1321, 703, 1361,
	429, 1430, 1266, 428, 323, 427, 1379, 1380, 1381, 426,
	425, 424, 421, 1284, 726, 357, 1377, 894, 1425, 789,
	71, 1404, 71, 337, 71, 271, 1429, 69, 71, 283,
	1418, 445, 1398, 1139, 1813, 1362, 1786, 71, 1561, 1415,
	1413, 71, 1401, 1267, 1047, 264, 329, 71, 592, 1432,
	1043, 71, 1431, 71, 1452, 984, 1362, 69, 1581, 1442,
	1444, 1445, 690, 687, 682, 1475, 580, 726, 576, 69,
	1450, 1572, 1211, 1433, 1502, 811, 69, 69, 69, 1458,
	680, 593, 1406, 1696, 1053, 1846, 455, 594, 267, 1468,
	1472, 1473, 1474, 777, 417, 71, 933, 1698, 949, 1427,
	933, 1707, 948, 1573, 333, 1313, 946, 952, 3, 1315,
	1753, 69, 1347, 1348, 1349, 1350, 1352, 1294, 745, 1781,
	745, 1325, 1326, 1495, 1462, 951, 459, 1487, 1773, 725,
	1353, 1354, 1355, 1347, 1348, 1349, 1350, 1352, 968, 828,
	283, 1054, 745, 283, 283, 283, 283, 283, 796, 257,
	1511, 1512, 283, 456, 1371, 749, 695, 271, 1516, 299,
	71, 71, 71, 809, 728, 1384, 1514, 1509, 71, 71,
	993, 334, 418, 341, 71, 1868, 71, 1869, 71, 71,
	71, 329, 1346, 71, 830, 1543, 1568, 834, 1569, 268,
	1547, 974, 337, 1498, 1499, 1500, 1556, 1560, 1544, 1023,
	1022, 1557, 1446, 1437, 1420, 1421, 1391, 727, 302, 303,
	1243, 1187, 1184, 1571, 71, 71, 1183, 1134, 1597, 1024,
	1574, 1593, 1774, 1598, 1646, 1501, 71, 71, 1268, 1025,
	71, 1610, 887, 725, 337, 308, 1610, 702, 337, 71,
	71, 468, 1683, 1616, 259, 1615, 1069, 1070, 1071, 1072,
	1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 71, 1096,
	1614, 1098, 1099, 1100, 1101, 788, 422, 1570, 1652, 1808,
	1636, 1333, 1734, 69, 1716, 1138, 725, 1609, 1577, 1578,
	892, 938, 1609, 32, 1607, 69, 1611, 699, 482, 69,
	955, 1611, 1640, 1562, 1403, 1491, 1144, 1145, 1037, 1156,
	1036, 1166, 1168, 1173, 1176, 1177, 1178, 703, 595, 778,
	767, 505, 71, 761, 71, 1658, 71, 71, 1463, 770,
	1147, 559, 1467, 507, 1613, 71, 567, 700, 508, 701,
	919, 702, 1670, 495, 698, 703, 703, 370, 1692, 1693,
	1275, 1673, 972, 703, 1135, 1329, 71, 1671, 890, 1635,
	481, 487, 486, 1541, 1122, 393, 478, 1630, 1286, 44,
	1221, 407, 1224, 277, 1551, 1587, 278, 1226, 71, 1594,
	71, 1048, 816, 1412, 1708, 703, 726, 1699, 311, 71,
	1706, 1343, 1610, 395, 702, 71, 1691, 1165, 69, 1711,
	976, 977, 1159, 69, 1157, 1155, 69, 1720, 283, 283,
	1146, 440, 565, 1249, 726, 726, 973, 419, 1232, 992,
	464, 824, 726, 337, 337, 1823, 332, 337, 331, 1033,
	416, 754, 1016, 304, 1747, 1752, 71, 1409, 1793, 61,
	24, 22, 21, 20, 19, 17, 1749, 16, 1609, 1278,
	15, 23, 13, 1621, 726, 71, 71, 1611, 12, 71,
	826, 745, 830, 71, 1743, 11, 1744, 10, 71, 31,
	1761, 30, 29, 28, 5, 1763, 1697, 1769, 1765, 1740,
	2, 1770, 71, 1, 1610, 1762, 0, 592, 587, 0,
	0, 0, 703, 1764, 0, 0, 1282, 0, 0, 0,
	1296, 1297, 0, 1776, 1777, 0, 1302, 0, 1028, 71,
	0, 71, 71, 1285, 71, 1727, 1733, 1623, 1624, 0,
	593, 1629, 69, 938, 1280, 1799, 594, 1797, 0, 1316,
	1283, 0, 1681, 71, 1803, 1802, 0, 0, 1324, 1795,
	1609, 0, 323, 1800, 1281, 0, 1332, 1806, 1805, 1611,
	1337, 1610, 69, 0, 283, 0, 1783, 71, 1804, 71,
	0, 726, 0, 0, 0, 0, 1830, 0, 0, 0,
	1828, 1826, 878, 0, 71, 1715, 0, 0, 1173, 1173,
	1173, 0, 1839, 0, 0, 71, 337, 1843, 1841, 1847,
	1284, 703, 0, 0, 0, 1849, 0, 1852, 1851, 0,
	0, 0, 1775, 1780, 728, 725, 0, 1609, 0, 1405,
	1159, 1159, 1864, 1866, 1863, 1867, 1611, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1872, 1791, 468, 725, 725, 0, 1801, 0, 0, 0,
	468, 725, 0, 0, 567, 0, 0, 727, 1278, 69,
	1193, 1194, 0, 0, 0, 938, 0, 0, 1199, 0,
	726, 1159, 1159, 1159, 1204, 1205, 1207, 1209, 1210, 703,
	0, 0, 1215, 725, 0, 1217, 0, 0, 69, 1827,
	1723, 0, 0, 1311, 1312, 69, 0, 1230, 0, 0,
	0, 0, 0, 0, 69, 1282, 0, 0, 0, 0,
	0, 1767, 0, 69, 1480, 1848, 0, 1481, 728, 1792,
	0, 0, 1285, 702, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 1280, 1028, 745, 0, 0, 0, 1283,
	1028, 1249, 0, 0, 1368, 1369, 1370, 699, 726, 0,
	1503, 702, 702, 1281, 0, 0, 703, 0, 0, 702,
	1513, 727, 0, 1515, 974, 0, 0, 1627, 809, 0,
	809, 728, 283, 69, 0, 0, 1269, 0, 0, 0,
	0, 0, 1811, 0, 0, 1272, 0, 0, 0, 0,
	725, 702, 1291, 0, 69, 1545, 1546, 0, 0, 1284,
	0, 0, 0, 0, 1552, 1553, 1554, 0, 0, 0,
	1159, 1159, 0, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 726, 0, 0, 1346, 0,
	1363, 1364, 1365, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1637, 0, 468, 0, 0, 0, 0,
	0, 699, 0, 0, 1626, 0, 0, 0, 1159, 1159,
	1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
	1159, 1159, 1159, 1159, 1159, 1159, 1159, 1360, 1159, 0,
	1620, 0, 0, 1482, 1483, 0, 0, 0, 0, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 702, 0,
	0, 0, 0, 1639, 699, 0, 0, 1642, 1643, 0,
	0, 0, 1645, 0, 0, 0, 1647, 0, 0, 0,
	483, 42, 0, 1651, 0, 1351, 0, 1654, 0, 0,
	830, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	0, 1539, 0, 0, 0, 42, 0, 1366, 0, 1663,
	0, 0, 69, 69, 0, 0, 0, 725, 0, 0,
	0, 0, 1572, 1361, 1565, 316, 0, 0, 324, 0,
	0, 0, 1563, 0, 0, 42, 1567, 0, 1447, 0,
	938, 0, 809, 0, 0, 0, 1457, 702, 0, 0,
	0, 1690, 0, 0, 1573, 69, 0, 0, 0, 69,
	0, 0, 0, 0, 0, 1291, 0, 0, 0, 1477,
	0, 1291, 0, 1566, 0, 0, 0, 1709, 0, 0,
	1362, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 725, 0, 1722, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1729, 1730, 0, 0,
	0, 0, 0, 1506, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 1159, 1742, 0, 1568, 0, 1569,
	728, 0, 0, 0, 0, 0, 0, 0, 1746, 1357,
	1358, 1359, 0, 1356, 1353, 1354, 1355, 1347, 1348, 1349,
	1350, 1352, 0, 0, 1571, 0, 0, 0, 728, 728,
	567, 1574, 0, 0, 0, 0, 728, 0, 1558, 1559,
	938, 0, 0, 727, 0, 0, 830, 830, 1346, 0,
	0, 0, 1585, 0, 1586, 0, 69, 1588, 1589, 0,
	0, 1592, 702, 0, 0, 0, 0, 1680, 728, 0,
	0, 727, 727, 324, 0, 0, 0, 0, 0, 727,
	1159, 0, 0, 0, 0, 0, 0, 0, 1570, 0,
	1606, 0, 830, 938, 834, 1606, 0, 1360, 0, 0,
	0, 0, 0, 0, 69, 69, 0, 0, 69, 0,
	0, 727, 0, 0, 0, 0, 836, 830, 1291, 0,
	0, 0, 0, 1825, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 699, 0, 0, 0, 835, 1838, 1838,
	0, 0, 0, 850, 0, 1351, 1653, 0, 0, 0,
	0, 0, 0, 1737, 0, 0, 316, 0, 0, 1159,
	0, 699, 699, 0, 1838, 834, 0, 0, 0, 699,
	863, 864, 865, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 867,
	0, 841, 0, 1361, 0, 0, 0, 1838, 0, 0,
	938, 699, 1672, 0, 283, 1674, 0, 0, 835, 0,
	0, 0, 0, 69, 850, 0, 0, 0, 727, 0,
	0, 1346, 0, 1363, 1364, 1365, 0, 0, 0, 0,
	0, 0, 1782, 0, 830, 0, 1489, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1362, 1606, 0, 0, 0, 0, 69, 0, 1718, 0,
	0, 0, 841, 0, 0, 0, 0, 69, 0, 0,
	1360, 0, 0, 830, 728, 0, 0, 0, 0, 860,
	868, 0, 0, 0, 0, 316, 0, 0, 316, 316,
	0, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 858, 0, 0, 0, 699, 0,
	851, 877, 0, 0, 809, 881, 0, 727, 1351, 0,
	0, 0, 0, 1356, 1353, 1354, 1355, 1347, 1348, 1349,
	1350, 1352, 0, 1754, 1755, 0, 0, 1759, 0, 0,
	0, 1760, 0, 1606, 0, 0, 283, 0, 0, 0,
	1366, 0, 728, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 0, 1361, 852, 0, 846,
	843, 844, 845, 837, 838, 839, 840, 842, 861, 862,
	0, 0, 0, 0, 0, 0, 0, 1790, 0, 830,
	69, 0, 283, 0, 0, 727, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	1606, 1718, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1362, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 859, 0, 69, 0, 830, 0, 0,
	846, 843, 844, 845, 837, 838, 839, 840, 842, 0,
	862, 0, 1840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 0, 0, 0, 0, 0,
	0, 0, 727, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	0, 0, 1357, 1358, 1359, 0, 1356, 1353, 1354, 1355,
	1347, 1348, 1349, 1350, 1352, 0, 0, 42, 0, 42,
	0, 0, 0, 0, 0, 503, 492, 493, 490, 491,
	479, 0, 42, 0, 0, 0, 42, 0, 0, 0,
	73, 74, 1130, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 699, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 1131,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 42, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 1063, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 1113,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 1129,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	471, 472, 1132, 0, 0, 0, 473, 0, 0, 480,
	1127, 0, 0, 834, 0, 853, 854, 855, 863, 864,
	865, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 836, 0, 867, 0, 0,
	0, 0, 834, 0, 853, 854, 855, 863, 864, 865,
	0, 0, 0, 0, 0, 0, 835, 856, 0, 0,
	0, 0, 850, 0, 836, 0, 867, 1346, 0, 1363,
	1364, 1365, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1488, 0, 0, 835, 42, 0, 0, 0,
	0, 850, 0, 0, 0, 0, 1292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 1360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 860, 868, 0,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 841,
	0, 0, 866, 0, 0, 877, 0, 0, 0, 0,
	0, 297, 858, 0, 0, 0, 860, 868, 851, 0,
	0, 0, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 858, 0, 0, 0, 0, 286, 851, 0, 0,
	0, 291, 292, 0, 877, 298, 1366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 285, 287, 857,
	0, 0, 1361, 0, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 852, 288, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 289, 290, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 1362,
	0, 0, 0, 293, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 0, 862, 0,
	960, 0, 0, 0, 0, 0, 0, 1063, 0, 961,
	859, 1063, 0, 847, 848, 849, 0, 846, 843, 844,
	845, 837, 838, 839, 840, 842, 0, 862, 0, 0,
	0, 0, 0, 0, 1666, 0, 0, 0, 1357, 1358,
	1359, 0, 1356, 1353, 1354, 1355, 1347, 1348, 1349, 1350,
	1352, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	294, 0, 0, 295, 519, 485, 0, 0, 296, 76,
	77, 0, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 1837, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 42,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 0, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 42, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 1063, 1063, 116, 0,
	1063, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	0, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 1836, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	1700, 0, 0, 0, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 0, 0, 480, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 596, 75, 597, 598, 599, 600,
	185, 601, 602, 603, 604, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 605, 79, 192, 193, 80, 606,
	607, 194, 195, 196, 608, 197, 609, 378, 610, 81,
	82, 83, 877, 84, 611, 85, 86, 87, 612, 379,
	88, 89, 613, 614, 615, 616, 617, 618, 90, 91,
	92, 93, 198, 94, 199, 200, 619, 95, 620, 96,
	621, 622, 623, 97, 98, 624, 99, 625, 0, 626,
	201, 100, 101, 202, 627, 628, 629, 102, 103, 203,
	0, 104, 630, 105, 631, 632, 380, 633, 106, 204,
	634, 205, 635, 107, 108, 206, 207, 382, 636, 111,
	637, 109, 638, 381, 110, 208, 209, 210, 211, 639,
	212, 640, 383, 112, 384, 113, 114, 641, 642, 213,
	385, 115, 386, 643, 116, 644, 645, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 646,
	126, 647, 214, 128, 215, 129, 130, 648, 649, 650,
	651, 652, 131, 216, 388, 132, 389, 217, 133, 134,
	135, 653, 218, 136, 219, 137, 654, 138, 139, 140,
	220, 141, 142, 655, 144, 145, 143, 146, 656, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 657,
	222, 154, 155, 658, 156, 157, 391, 158, 223, 224,
	159, 659, 165, 160, 161, 162, 164, 225, 163, 226,
	660, 166, 661, 167, 168, 662, 227, 228, 229, 663,
	664, 169, 230, 231, 665, 170, 171, 172, 173, 666,
	667, 174, 175, 176, 668, 669, 177, 178, 179, 232,
	233, 670, 180, 671, 672, 673, 674, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1476, 73, 74,
	596, 75, 597, 598, 599, 600, 185, 601, 602, 603,
	604, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	605, 79, 192, 193, 80, 606, 607, 194, 195, 196,
	608, 197, 609, 378, 610, 81, 82, 83, 0, 84,
	611, 85, 86, 87, 612, 379, 88, 89, 613, 614,
	615, 616, 617, 618, 90, 91, 92, 93, 198, 94,
	199, 200, 619, 95, 620, 96, 621, 622, 623, 97,
	98, 624, 99, 625, 0, 626, 201, 100, 101, 202,
	627, 628, 629, 102, 103, 203, 0, 104, 630, 105,
	631, 632, 380, 633, 106, 204, 634, 205, 635, 107,
	108, 206, 207, 382, 636, 111, 637, 109, 638, 381,
	110, 208, 209, 210, 211, 639, 212, 640, 383, 112,
	384, 113, 114, 641, 642, 213, 385, 115, 386, 643,
	116, 644, 645, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 646, 126, 647, 214, 128,
	215, 129, 130, 648, 649, 650, 651, 652, 131, 216,
	388, 132, 389, 217, 133, 134, 135, 653, 218, 136,
	219, 137, 654, 138, 139, 140, 220, 141, 142, 655,
	144, 145, 143, 146, 656, 147, 390, 148, 149, 221,
	150, 0, 151, 152, 153, 657, 222, 154, 155, 658,
	156, 157, 391, 158, 223, 224, 159, 659, 165, 160,
	161, 162, 164, 225, 163, 226, 660, 166, 661, 167,
	168, 662, 227, 228, 229, 663, 664, 169, 230, 231,
	665, 170, 171, 172, 173, 666, 667, 174, 175, 176,
	668, 669, 177, 178, 179, 232, 233, 670, 180, 671,
	672, 673, 674, 181, 182, 183, 184, 591, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 73, 74, 596, 75, 597, 598, 599, 600,
	185, 601, 602, 603, 604, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 605, 79, 192, 193, 80, 606,
	607, 194, 195, 196, 608, 197, 609, 378, 610, 81,
	82, 83, 0, 84, 611, 85, 86, 87, 612, 379,
	88, 89, 613, 614, 615, 616, 617, 618, 90, 91,
	92, 93, 198, 94, 199, 200, 619, 95, 620, 96,
	621, 622, 623, 97, 98, 624, 99, 625, 0, 626,
	201, 100, 101, 202, 627, 628, 629, 102, 103, 203,
	0, 104, 630, 105, 631, 632, 380, 633, 106, 204,
	634, 205, 635, 107, 108, 206, 207, 382, 636, 111,
	637, 109, 638, 381, 110, 208, 209, 210, 211, 639,
	212, 640, 383, 112, 384, 113, 114, 641, 642, 213,
	385, 115, 386, 643, 116, 644, 645, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 646,
	126, 647, 214, 128, 215, 129, 130, 648, 649, 650,
	651, 652, 131, 216, 388, 132, 389, 217, 133, 134,
	135, 653, 218, 136, 219, 137, 654, 138, 139, 140,
	220, 141, 142, 655, 144, 145, 143, 146, 656, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 657,
	222, 154, 155, 658, 156, 157, 391, 158, 223, 224,
	159, 659, 165, 160, 161, 162, 164, 225, 163, 226,
	660, 166, 661, 167, 168, 662, 227, 228, 229, 663,
	664, 169, 230, 231, 665, 170, 171, 172, 173, 666,
	667, 174, 175, 176, 668, 669, 177, 178, 179, 232,
	233, 670, 180, 671, 672, 673, 674, 181, 182, 183,
	184, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	568, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 60, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 62, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 377, 553, 0, 180, 0, 0, 0,
	58, 181, 182, 183, 184, 475, 59, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	60, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 62, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	377, 553, 0, 180, 0, 0, 0, 58, 181, 182,
	183, 184, 475, 59, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	73, 74, 480, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 1169, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 1174, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 1170, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 1171, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 0, 0, 480, 1542, 503, 492,
	493, 490, 491, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 89, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	0, 0, 480, 1492, 503, 492, 493, 490, 491, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	74, 0, 75, 0, 0, 0, 0, 519, 485, 0,
	0, 0, 76, 77, 186, 533, 188, 534, 78, 535,
	536, 0, 79, 192, 193, 80, 500, 518, 537, 538,
	196, 0, 529, 0, 511, 0, 81, 82, 83, 0,
	84, 0, 85, 86, 87, 0, 379, 88, 89, 0,
	512, 514, 0, 513, 515, 90, 91, 92, 93, 539,
	94, 540, 541, 0, 95, 0, 96, 0, 0, 0,
	532, 98, 0, 99, 0, 0, 0, 484, 100, 101,
	520, 498, 0, 0, 102, 103, 542, 0, 104, 0,
	105, 0, 0, 380, 0, 106, 530, 0, 205, 0,
	107, 108, 526, 528, 382, 0, 111, 0, 109, 0,
	381, 110, 543, 544, 545, 546, 0, 510, 0, 383,
	112, 384, 113, 114, 0, 0, 531, 385, 115, 386,
	0, 116, 0, 0, 117, 0, 118, 119, 120, 121,
	122, 387, 123, 124, 127, 125, 474, 126, 499, 527,
	128, 547, 129, 130, 0, 0, 0, 0, 0, 131,
	216, 388, 132, 389, 521, 133, 134, 135, 0, 522,
	136, 219, 137, 0, 138, 139, 140, 548, 141, 142,
	0, 144, 145, 143, 146, 0, 147, 390, 148, 149,
	488, 150, 0, 151, 152, 153, 0, 222, 154, 155,
	516, 156, 157, 391, 158, 549, 224, 159, 0, 165,
	160, 161, 162, 164, 550, 163, 523, 0, 166, 0,
	167, 168, 0, 227, 551, 552, 0, 0, 169, 524,
	525, 497, 170, 171, 172, 173, 0, 0, 174, 175,
	176, 517, 0, 177, 178, 179, 232, 553, 0, 180,
	0, 0, 0, 0, 181, 182, 183, 184, 475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 471,
	472, 0, 0, 0, 0, 473, 0, 0, 480, 1126,
	503, 492, 493, 490, 491, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 0, 75, 0,
	0, 0, 0, 519, 485, 0, 0, 0, 76, 77,
	186, 533, 188, 534, 78, 535, 536, 0, 79, 192,
	193, 80, 500, 518, 537, 538, 196, 0, 529, 0,
	511, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 512, 514, 0, 513,
	515, 90, 91, 92, 93, 539, 94, 540, 541, 0,
	95, 0, 96, 0, 0, 0, 532, 98, 0, 99,
	0, 0, 0, 484, 100, 101, 520, 498, 0, 0,
	102, 103, 542, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 530, 0, 205, 0, 107, 108, 526, 528,
	382, 0, 111, 0, 109, 0, 381, 110, 543, 544,
	545, 546, 0, 510, 0, 383, 112, 384, 113, 114,
	0, 0, 531, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 474, 126, 499, 527, 128, 547, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	521, 133, 134, 135, 0, 522, 136, 219, 137, 0,
	138, 139, 140, 548, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 488, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 516, 156, 157, 391,
	158, 549, 224, 159, 0, 165, 160, 161, 162, 164,
	550, 163, 523, 0, 166, 0, 167, 168, 0, 227,
	551, 552, 0, 0, 169, 524, 525, 497, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 517, 0, 177,
	178, 179, 232, 553, 0, 180, 0, 0, 0, 0,
	181, 182, 183, 184, 475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 472, 0, 0, 0,
	0, 473, 883, 1123, 480, 503, 492, 493, 490, 491,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 186, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	471, 472, 469, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 1497, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 73, 74, 480, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 568, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 474, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 488, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 475, 0, 0, 503, 492, 493, 490,
	491, 479, 0, 0, 471, 472, 0, 0, 0, 0,
	473, 73, 74, 480, 75, 0, 0, 0, 0, 519,
	485, 0, 0, 0, 76, 77, 186, 533, 188, 534,
	78, 535, 536, 0, 79, 192, 193, 80, 500, 518,
	537, 538, 196, 0, 529, 0, 511, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 379, 88,
	89, 0, 512, 514, 0, 513, 515, 90, 91, 92,
	93, 539, 94, 540, 541, 0, 95, 0, 96, 0,
	0, 0, 532, 98, 0, 99, 0, 0, 0, 484,
	100, 101, 520, 498, 0, 0, 102, 103, 542, 0,
	104, 0, 105, 0, 1174, 380, 0, 106, 530, 0,
	205, 0, 107, 108, 526, 528, 382, 0, 111, 0,
	109, 0, 381, 110, 543, 544, 545, 546, 0, 510,
	0, 383, 112, 384, 113, 114, 0, 0, 531, 385,
	115, 386, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 387, 123, 124, 127, 125, 474, 126,
	499, 527, 128, 547, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 388, 132, 389, 521, 133, 134, 135,
	0, 522, 136, 219, 137, 0, 138, 139, 140, 548,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 390,
	148, 149, 488, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 516, 156, 157, 391, 158, 549, 224, 159,
	0, 165, 160, 161, 162, 164, 550, 163, 523, 0,
	166, 0, 167, 168, 0, 227, 551, 552, 0, 0,
	169, 524, 525, 497, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 517, 0, 177, 178, 179, 232, 553,
	0, 180, 0, 0, 0, 0, 181, 182, 183, 184,
	475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 471, 472, 0, 0, 0, 0, 473, 0, 0,
	480, 503, 492, 493, 490, 491, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 818, 75,
	0, 0, 0, 0, 519, 485, 0, 0, 0, 76,
	77, 186, 533, 188, 534, 78, 535, 536, 0, 79,
	192, 193, 80, 500, 518, 537, 538, 196, 0, 529,
	0, 511, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 512, 514, 0,
	513, 515, 90, 91, 92, 93, 539, 94, 540, 541,
	0, 95, 0, 96, 0, 0, 0, 532, 98, 0,
	99, 0, 0, 0, 484, 100, 101, 520, 498, 0,
	0, 102, 103, 542, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 530, 0, 205, 0, 107, 108, 526,
	528, 382, 0, 111, 0, 109, 0, 381, 110, 543,
	544, 545, 546, 0, 510, 0, 383, 112, 384, 113,
	114, 0, 0, 531, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 474, 126, 499, 527, 128, 547, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 388, 132,
	389, 521, 133, 134, 135, 0, 522, 136, 219, 137,
	0, 138, 139, 140, 548, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 488, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 516, 156, 157,
	391, 158, 549, 224, 159, 0, 165, 160, 161, 162,
	164, 550, 163, 523, 0, 166, 0, 167, 168, 0,
	227, 551, 552, 0, 0, 169, 524, 525, 497, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 517, 0,
	177, 178, 179, 232, 553, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 475, 0, 0, 503, 492,
	493, 490, 491, 479, 0, 0, 471, 472, 0, 0,
	0, 0, 473, 73, 74, 480, 75, 0, 0, 0,
	0, 519, 485, 0, 0, 0, 76, 77, 186, 533,
	188, 534, 78, 535, 536, 0, 79, 192, 193, 80,
	500, 518, 537, 538, 196, 0, 529, 0, 511, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	379, 88, 1837, 0, 512, 514, 0, 513, 515, 90,
	91, 92, 93, 539, 94, 540, 541, 0, 95, 0,
	96, 0, 0, 0, 532, 98, 0, 99, 0, 0,
	0, 484, 100, 101, 520, 498, 0, 0, 102, 103,
	542, 0, 104, 0, 105, 0, 0, 380, 0, 106,
	530, 0, 205, 0, 107, 108, 526, 528, 382, 0,
	111, 0, 109, 0, 381, 110, 543, 544, 545, 546,
	0, 510, 0, 383, 112, 384, 113, 114, 0, 0,
	531, 385, 115, 386, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 387, 123, 124, 127, 125,
	474, 126, 499, 527, 128, 547, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 388, 132, 389, 521, 133,
	134, 135, 0, 522, 136, 219, 137, 0, 138, 139,
	140, 548, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 390, 148, 149, 488, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 516, 156, 157, 391, 158, 549,
	224, 159, 0, 165, 160, 161, 162, 164, 550, 163,
	523, 0, 166, 0, 167, 168, 0, 227, 551, 552,
	0, 0, 169, 524, 525, 497, 170, 171, 1836, 173,
	0, 0, 174, 175, 176, 517, 0, 177, 178, 179,
	232, 553, 0, 180, 0, 0, 0, 0, 181, 182,
	183, 184, 475, 0, 0, 503, 492, 493, 490, 491,
	479, 0, 0, 471, 472, 0, 0, 0, 0, 473,
	73, 74, 480, 75, 0, 0, 0, 0, 519, 485,
	0, 0, 0, 76, 77, 1835, 533, 188, 534, 78,
	535, 536, 0, 79, 192, 193, 80, 500, 518, 537,
	538, 196, 0, 529, 0, 511, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 1837,
	0, 512, 514, 0, 513, 515, 90, 91, 92, 93,
	539, 94, 540, 541, 0, 95, 0, 96, 0, 0,
	0, 532, 98, 0, 99, 0, 0, 0, 484, 100,
	101, 520, 498, 0, 0, 102, 103, 542, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 530, 0, 205,
	0, 107, 108, 526, 528, 382, 0, 111, 0, 109,
	0, 381, 110, 543, 544, 545, 546, 0, 510, 0,
	383, 112, 384, 113, 114, 0, 0, 531, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 474, 126, 499,
	527, 128, 547, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 388, 132, 389, 521, 133, 134, 135, 0,
	522, 136, 219, 137, 0, 138, 139, 140, 548, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 488, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 516, 156, 157, 391, 158, 549, 224, 159, 0,
	165, 160, 161, 162, 164, 550, 163, 523, 0, 166,
	0, 167, 168, 0, 227, 551, 552, 0, 0, 169,
	524, 525, 497, 170, 171, 1836, 173, 0, 0, 174,
	175, 176, 517, 0, 177, 178, 179, 232, 553, 0,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 475,
	0, 0, 503, 492, 493, 490, 491, 479, 0, 0,
	471, 472, 0, 0, 0, 0, 473, 73, 74, 480,
	75, 0, 0, 0, 0, 519, 485, 0, 0, 0,
	76, 77, 186, 533, 188, 534, 78, 535, 536, 0,
	79, 192, 193, 80, 500, 518, 537, 538, 196, 0,
	529, 0, 511, 0, 81, 82, 83, 0, 84, 0,
	85, 86, 87, 0, 379, 88, 89, 0, 512, 514,
	0, 513, 515, 90, 91, 92, 93, 539, 94, 540,
	541, 0, 95, 0, 96, 0, 0, 0, 532, 98,
	0, 99, 0, 0, 0, 484, 100, 101, 520, 498,
	0, 0, 102, 103, 542, 0, 104, 0, 105, 0,
	0, 380, 0, 106, 530, 0, 205, 0, 107, 108,
	526, 528, 382, 0, 111, 0, 109, 0, 381, 110,
	543, 544, 545, 546, 0, 510, 0, 383, 112, 384,
	113, 114, 0, 0, 531, 385, 115, 386, 0, 116,
	0, 0, 117, 0, 118, 119, 120, 121, 122, 387,
	123, 124, 127, 125, 474, 126, 499, 527, 128, 547,
	129, 130, 0, 0, 0, 0, 0, 131, 216, 388,
	132, 389, 521, 133, 134, 135, 0, 522, 136, 219,
	137, 0, 138, 139, 140, 548, 141, 142, 0, 144,
	145, 143, 146, 0, 147, 390, 148, 149, 488, 150,
	0, 151, 152, 153, 0, 222, 154, 155, 516, 156,
	157, 391, 158, 549, 224, 159, 0, 165, 160, 161,
	162, 164, 550, 163, 523, 0, 166, 0, 167, 168,
	0, 227, 551, 552, 0, 0, 169, 524, 525, 497,
	170, 171, 172, 173, 0, 0, 174, 175, 176, 517,
	0, 177, 178, 179, 232, 553, 0, 180, 0, 0,
	0, 0, 181, 182, 183, 184, 475, 0, 0, 503,
	492, 493, 490, 491, 479, 0, 0, 471, 472, 0,
	0, 0, 0, 473, 73, 74, 480, 75, 0, 0,
	0, 0, 519, 485, 0, 0, 0, 76, 77, 186,
	533, 188, 534, 78, 535, 536, 0, 79, 192, 193,
	80, 500, 518, 537, 538, 196, 0, 529, 0, 511,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 512, 514, 0, 513, 515,
	90, 91, 92, 93, 539, 94, 540, 541, 0, 95,
	0, 96, 0, 0, 0, 532, 98, 0, 99, 0,
	0, 0, 484, 100, 101, 520, 498, 0, 0, 102,
	103, 542, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 530, 0, 205, 0, 107, 108, 526, 528, 382,
	0, 111, 0, 109, 0, 381, 110, 543, 544, 545,
	546, 0, 510, 0, 383, 112, 384, 113, 114, 0,
	0, 531, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 0, 126, 499, 527, 128, 547, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 521,
	133, 134, 135, 0, 522, 136, 219, 137, 0, 138,
	139, 140, 548, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 1164, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 516, 156, 157, 391, 158,
	549, 224, 159, 0, 165, 160, 161, 162, 164, 550,
	163, 523, 0, 166, 0, 167, 168, 0, 227, 551,
	552, 0, 0, 169, 524, 525, 497, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 517, 0, 177, 178,
	179, 232, 553, 0, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 503, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1160, 1161, 0, 0, 73, 74,
	1162, 75, 0, 1163, 0, 0, 519, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 518, 194, 195, 196,
	0, 529, 0, 511, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 379, 88, 89, 0, 512,
	514, 0, 513, 515, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 520,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 380, 0, 106, 530, 0, 205, 0, 107,
	108, 526, 528, 382, 0, 111, 0, 109, 0, 381,
	110, 208, 209, 210, 211, 0, 212, 0, 383, 112,
	384, 113, 114, 0, 0, 531, 385, 115, 386, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	387, 123, 124, 127, 125, 0, 126, 0, 527, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	388, 132, 389, 521, 133, 134, 135, 0, 522, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 390, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 516,
	156, 157, 391, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 523, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 524, 525,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	517, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	373, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 1608, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	378, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 379, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 380,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	382, 0, 111, 0, 109, 0, 381, 110, 208, 209,
	210, 211, 0, 212, 0, 383, 112, 384, 113, 114,
	0, 0, 213, 385, 115, 386, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 387, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 388, 132, 389,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 390, 148, 149, 221, 150, 0, 151,
	152, 153, 60, 222, 154, 155, 0, 156, 157, 391,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 62, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 377, 233, 0, 180, 0, 0, 0, 58,
	181, 182, 183, 184, 0, 59, 0, 373, 772, 0,
	773, 768, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 57, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 378, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 379,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 776, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 765, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 380, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 382, 0, 111,
	0, 109, 0, 381, 110, 208, 209, 210, 211, 0,
	212, 0, 383, 112, 384, 113, 114, 0, 0, 213,
	385, 115, 386, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 387, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 766, 0,
	0, 0, 131, 216, 388, 132, 389, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	390, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 391, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 764, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 373, 772, 0, 773, 768, 763, 0, 0, 0,
	0, 0, 774, 769, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 378, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 379, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	759, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 765, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	380, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 382, 0, 111, 0, 109, 0, 381, 110, 208,
	209, 210, 211, 0, 212, 0, 383, 112, 384, 113,
	114, 0, 0, 213, 385, 115, 386, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 387, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 766, 0, 0, 0, 131, 216, 388, 132,
	389, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 390, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	391, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 764, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 373, 772, 0, 773, 768,
	763, 0, 0, 0, 0, 0, 774, 769, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 378, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 379, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 765, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 380, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 382, 0, 111, 0, 109,
	0, 381, 110, 208, 209, 210, 211, 0, 212, 0,
	383, 112, 384, 113, 114, 0, 0, 213, 385, 115,
	386, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 387, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 766, 0, 0, 0,
	131, 216, 388, 132, 389, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 390, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 391, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 764, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	774, 769, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 338, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 60, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 62, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 377, 233, 0, 180, 0, 70, 0, 58, 181,
	182, 183, 184, 0, 59, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 1065, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 60, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 62, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 377, 233,
	0, 180, 0, 70, 0, 58, 181, 182, 183, 184,
	0, 59, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 1290, 0,
	57, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 70, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 461, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 338, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 0, 180, 0, 70, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 74, 0, 75, 0, 0, 0,
	0, 185, 0, 0, 0, 1065, 76, 77, 186, 187,
	188, 189, 78, 190, 191, 0, 79, 192, 193, 80,
	0, 0, 194, 195, 196, 0, 197, 0, 0, 0,
	81, 82, 83, 0, 84, 0, 85, 86, 87, 0,
	0, 88, 89, 0, 0, 0, 0, 0, 0, 90,
	91, 92, 93, 198, 94, 199, 200, 0, 95, 0,
	96, 0, 0, 0, 97, 98, 0, 99, 0, 0,
	0, 201, 100, 101, 202, 0, 0, 0, 102, 103,
	203, 0, 104, 0, 105, 0, 0, 0, 0, 106,
	204, 0, 205, 0, 107, 108, 206, 207, 0, 0,
	111, 0, 109, 0, 0, 110, 208, 209, 210, 211,
	0, 212, 0, 0, 112, 0, 113, 114, 0, 0,
	213, 0, 115, 0, 0, 116, 0, 0, 117, 0,
	118, 119, 120, 121, 122, 0, 123, 124, 127, 125,
	0, 126, 0, 214, 128, 215, 129, 130, 0, 0,
	0, 0, 0, 131, 216, 0, 132, 0, 217, 133,
	134, 135, 0, 218, 136, 219, 137, 0, 138, 139,
	140, 220, 141, 142, 0, 144, 145, 143, 146, 0,
	147, 0, 148, 149, 221, 150, 0, 151, 152, 153,
	0, 222, 154, 155, 0, 156, 157, 0, 158, 223,
	224, 159, 0, 165, 160, 161, 162, 164, 225, 163,
	226, 0, 166, 0, 167, 168, 0, 227, 228, 229,
	0, 0, 169, 230, 231, 0, 170, 171, 172, 173,
	0, 0, 174, 175, 176, 0, 0, 177, 178, 179,
	232, 233, 0, 180, 0, 0, 70, 0, 181, 182,
	183, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 74, 0, 75, 0, 0, 0, 0, 185,
	0, 0, 0, 584, 76, 77, 186, 187, 188, 189,
	78, 190, 191, 0, 79, 192, 193, 80, 0, 0,
	194, 195, 196, 0, 197, 0, 0, 0, 81, 82,
	83, 0, 84, 0, 85, 86, 87, 0, 0, 88,
	89, 0, 0, 0, 0, 0, 0, 90, 91, 92,
	93, 198, 94, 199, 200, 0, 95, 0, 96, 0,
	0, 0, 97, 98, 0, 99, 0, 0, 0, 201,
	100, 101, 202, 0, 0, 0, 102, 103, 203, 0,
	104, 0, 105, 0, 0, 0, 0, 106, 204, 0,
	205, 0, 107, 108, 206, 207, 0, 0, 111, 0,
	109, 0, 0, 110, 208, 209, 210, 211, 0, 212,
	0, 0, 112, 0, 113, 114, 0, 0, 213, 0,
	115, 0, 0, 116, 0, 0, 117, 0, 118, 119,
	120, 121, 122, 0, 123, 124, 127, 125, 0, 126,
	0, 214, 128, 215, 129, 130, 0, 0, 0, 0,
	0, 131, 216, 0, 132, 0, 217, 133, 134, 135,
	0, 218, 136, 219, 137, 0, 138, 139, 140, 220,
	141, 142, 0, 144, 145, 143, 146, 0, 147, 0,
	148, 149, 221, 150, 0, 151, 152, 153, 0, 222,
	154, 155, 0, 156, 157, 0, 158, 223, 224, 159,
	0, 165, 160, 161, 162, 164, 225, 163, 226, 0,
	166, 0, 167, 168, 0, 227, 228, 229, 0, 0,
	169, 230, 231, 0, 170, 171, 172, 173, 0, 0,
	174, 175, 176, 0, 0, 177, 178, 179, 232, 233,
	0, 180, 0, 70, 0, 0, 181, 182, 183, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	975, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	70, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 0, 75, 0,
	0, 0, 0, 185, 0, 0, 0, 1507, 76, 77,
	186, 187, 188, 189, 78, 190, 191, 0, 79, 192,
	193, 80, 0, 0, 194, 195, 196, 0, 197, 0,
	0, 0, 81, 82, 83, 0, 84, 0, 85, 86,
	87, 0, 0, 88, 89, 0, 0, 0, 0, 0,
	0, 90, 91, 92, 93, 198, 94, 199, 200, 0,
	95, 0, 96, 0, 0, 0, 97, 98, 0, 99,
	0, 0, 0, 201, 100, 101, 202, 0, 0, 0,
	102, 103, 203, 0, 104, 0, 105, 0, 0, 0,
	0, 106, 204, 0, 205, 0, 107, 108, 206, 207,
	0, 0, 111, 0, 109, 0, 0, 110, 208, 209,
	210, 211, 0, 212, 0, 0, 112, 0, 113, 114,
	0, 0, 213, 0, 115, 0, 0, 116, 0, 0,
	117, 0, 118, 119, 120, 121, 122, 0, 123, 124,
	127, 125, 0, 126, 0, 214, 128, 215, 129, 130,
	0, 0, 0, 0, 0, 131, 216, 0, 132, 0,
	217, 133, 134, 135, 0, 218, 136, 219, 137, 0,
	138, 139, 140, 220, 141, 142, 0, 144, 145, 143,
	146, 0, 147, 0, 148, 149, 221, 150, 0, 151,
	152, 153, 0, 222, 154, 155, 0, 156, 157, 0,
	158, 223, 224, 159, 0, 165, 160, 161, 162, 164,
	225, 163, 226, 0, 166, 0, 167, 168, 0, 227,
	228, 229, 0, 0, 169, 230, 231, 0, 170, 171,
	172, 173, 0, 0, 174, 175, 176, 0, 0, 177,
	178, 179, 232, 233, 0, 180, 0, 70, 0, 0,
	181, 182, 183, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 564, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	743, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 206, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 742, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 0, 180, 70, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 746, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 373,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	746, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 378,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 379, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 380, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 382,
	0, 111, 0, 109, 0, 381, 110, 208, 209, 210,
	211, 0, 212, 0, 383, 112, 384, 113, 114, 0,
	0, 213, 385, 115, 386, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 387, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 388, 132, 389, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 390, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 391, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	941, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	939, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 1041, 0, 102, 103, 203, 0, 104, 0, 105,
	944, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 1039, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 943, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 1040, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 941, 197, 0, 0, 936, 81,
	82, 83, 0, 84, 939, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 944, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 935, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 943, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	942, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 70, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 1290, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 70, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 338, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 694, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 338, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	398, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 343, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 338,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 70, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 73, 74, 256, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 255,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 70, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 1208, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 1206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 1197, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 70, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 808,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 70, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 270, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 681, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 0, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 446, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 443, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 70, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 404, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 206,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 281, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	280, 228, 229, 0, 0, 276, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 70, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 281, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 141,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 280, 228, 229, 0, 0, 276,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 368, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 116, 0, 0, 117,
	0, 118, 119, 120, 121, 122, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 221, 150, 0, 151, 152,
	153, 0, 222, 154, 155, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 227, 228,
	229, 0, 0, 169, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 365, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 135, 0, 218, 136,
	219, 137, 0, 138, 139, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	150, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 70, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 0, 0, 0,
	0, 0, 73, 74, 0, 75, 0, 0, 0, 0,
	185, 0, 0, 0, 0, 76, 77, 186, 187, 188,
	189, 78, 190, 191, 0, 79, 192, 193, 80, 0,
	0, 194, 195, 196, 0, 197, 0, 0, 0, 81,
	82, 83, 0, 84, 0, 85, 86, 87, 0, 0,
	88, 89, 0, 0, 0, 0, 0, 0, 90, 91,
	92, 93, 198, 94, 199, 200, 0, 95, 0, 96,
	0, 0, 0, 97, 98, 0, 99, 0, 0, 0,
	201, 100, 101, 202, 0, 0, 0, 102, 103, 203,
	0, 104, 0, 105, 0, 0, 0, 0, 106, 204,
	0, 205, 0, 107, 108, 363, 207, 0, 0, 111,
	0, 109, 0, 0, 110, 208, 209, 210, 211, 0,
	212, 0, 0, 112, 0, 113, 114, 0, 0, 213,
	0, 115, 0, 0, 116, 0, 0, 117, 0, 118,
	119, 120, 121, 122, 0, 123, 124, 127, 125, 0,
	126, 0, 214, 128, 215, 129, 130, 0, 0, 0,
	0, 0, 131, 216, 0, 132, 0, 217, 133, 134,
	135, 0, 218, 136, 219, 137, 0, 138, 139, 140,
	220, 141, 142, 0, 144, 145, 143, 146, 0, 147,
	0, 148, 149, 221, 150, 0, 151, 152, 153, 0,
	222, 154, 155, 0, 156, 157, 0, 158, 223, 224,
	159, 0, 165, 160, 161, 162, 164, 225, 163, 226,
	0, 166, 0, 167, 168, 0, 227, 228, 229, 0,
	0, 169, 230, 231, 0, 170, 171, 172, 173, 0,
	0, 174, 175, 176, 0, 0, 177, 178, 179, 232,
	233, 70, 180, 0, 0, 0, 0, 181, 182, 183,
	184, 0, 0, 0, 0, 0, 73, 74, 0, 75,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 76,
	77, 186, 187, 188, 189, 78, 190, 191, 0, 79,
	192, 193, 80, 0, 0, 194, 195, 196, 0, 197,
	0, 0, 0, 81, 82, 83, 0, 84, 0, 85,
	86, 87, 0, 0, 88, 89, 0, 0, 0, 0,
	0, 0, 90, 91, 92, 93, 198, 94, 199, 200,
	0, 95, 0, 96, 0, 0, 0, 97, 98, 0,
	99, 0, 0, 0, 201, 100, 101, 202, 0, 0,
	0, 102, 103, 203, 0, 104, 0, 105, 0, 0,
	0, 0, 106, 204, 0, 205, 0, 107, 108, 346,
	207, 0, 0, 111, 0, 109, 0, 0, 110, 208,
	209, 210, 211, 0, 212, 0, 0, 112, 0, 113,
	114, 0, 0, 213, 0, 115, 0, 0, 116, 0,
	0, 117, 0, 118, 119, 120, 121, 122, 0, 123,
	124, 127, 125, 0, 126, 0, 214, 128, 215, 129,
	130, 0, 0, 0, 0, 0, 131, 216, 0, 132,
	0, 217, 133, 134, 135, 0, 218, 136, 219, 137,
	0, 138, 139, 140, 220, 141, 142, 0, 144, 145,
	143, 146, 0, 147, 0, 148, 149, 221, 150, 0,
	151, 152, 153, 0, 222, 154, 155, 0, 156, 157,
	0, 158, 223, 224, 159, 0, 165, 160, 161, 162,
	164, 225, 163, 226, 0, 166, 0, 167, 168, 0,
	227, 228, 229, 0, 0, 169, 230, 231, 0, 170,
	171, 172, 173, 0, 0, 174, 175, 176, 0, 0,
	177, 178, 179, 232, 233, 70, 180, 0, 0, 0,
	0, 181, 182, 183, 184, 0, 0, 0, 0, 0,
	73, 74, 0, 75, 0, 0, 0, 0, 185, 0,
	0, 0, 0, 76, 77, 186, 187, 188, 189, 78,
	190, 191, 0, 79, 192, 193, 80, 0, 0, 194,
	195, 196, 0, 197, 0, 0, 0, 81, 82, 83,
	0, 84, 0, 85, 86, 87, 0, 0, 88, 89,
	0, 0, 0, 0, 0, 0, 90, 91, 92, 93,
	198, 94, 199, 200, 0, 95, 0, 96, 0, 0,
	0, 97, 98, 0, 99, 0, 0, 0, 201, 100,
	101, 202, 0, 0, 0, 102, 103, 203, 0, 104,
	0, 105, 0, 0, 0, 0, 106, 204, 0, 205,
	0, 107, 108, 206, 207, 0, 0, 111, 0, 109,
	0, 0, 110, 208, 209, 210, 211, 0, 212, 0,
	0, 112, 0, 113, 114, 0, 0, 213, 0, 115,
	0, 0, 116, 0, 0, 117, 0, 118, 119, 120,
	121, 122, 0, 123, 124, 127, 125, 0, 126, 0,
	214, 128, 215, 129, 130, 0, 0, 0, 0, 0,
	131, 216, 0, 132, 0, 217, 133, 134, 135, 0,
	218, 136, 219, 137, 0, 138, 139, 140, 220, 327,
	142, 0, 144, 145, 143, 146, 0, 147, 0, 148,
	149, 221, 150, 0, 151, 152, 153, 0, 222, 154,
	155, 0, 156, 157, 0, 158, 223, 224, 159, 0,
	165, 160, 161, 162, 164, 225, 163, 226, 0, 166,
	0, 167, 168, 0, 227, 228, 229, 0, 0, 169,
	230, 231, 0, 170, 171, 172, 173, 0, 0, 174,
	175, 176, 0, 0, 177, 178, 179, 232, 233, 70,
	180, 0, 0, 0, 0, 181, 182, 183, 184, 0,
	0, 0, 0, 0, 73, 74, 0, 75, 0, 0,
	0, 0, 185, 0, 0, 0, 0, 76, 77, 186,
	187, 188, 189, 78, 190, 191, 0, 79, 192, 193,
	80, 0, 0, 194, 195, 196, 0, 197, 0, 0,
	0, 81, 82, 83, 0, 84, 0, 85, 86, 87,
	0, 0, 88, 89, 0, 0, 0, 0, 0, 0,
	90, 91, 92, 93, 198, 94, 199, 200, 0, 95,
	0, 96, 0, 0, 0, 97, 98, 0, 99, 0,
	0, 0, 201, 100, 101, 202, 0, 0, 0, 102,
	103, 203, 0, 104, 0, 105, 0, 0, 0, 0,
	106, 204, 0, 205, 0, 107, 108, 206, 207, 0,
	0, 111, 0, 109, 0, 0, 110, 208, 209, 210,
	211, 0, 212, 0, 0, 112, 0, 113, 114, 0,
	0, 213, 0, 115, 0, 0, 273, 0, 0, 117,
	0, 118, 119, 120, 121, 281, 0, 123, 124, 127,
	125, 0, 126, 0, 214, 128, 215, 129, 130, 0,
	0, 0, 0, 0, 131, 216, 0, 132, 0, 217,
	133, 134, 135, 0, 218, 136, 219, 137, 0, 138,
	139, 140, 220, 141, 142, 0, 144, 145, 143, 146,
	0, 147, 0, 148, 149, 275, 150, 0, 151, 152,
	153, 0, 222, 154, 274, 0, 156, 157, 0, 158,
	223, 224, 159, 0, 165, 160, 161, 162, 164, 225,
	163, 226, 0, 166, 0, 167, 168, 0, 280, 228,
	229, 0, 0, 276, 230, 231, 0, 170, 171, 172,
	173, 0, 0, 174, 175, 176, 0, 0, 177, 178,
	179, 232, 233, 70, 180, 0, 0, 0, 0, 181,
	182, 183, 184, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 0, 0, 0, 0, 185, 0, 0, 0,
	0, 76, 77, 186, 187, 188, 189, 78, 190, 191,
	0, 79, 192, 193, 80, 0, 0, 194, 195, 196,
	0, 197, 0, 0, 0, 81, 82, 83, 0, 84,
	0, 85, 86, 87, 0, 0, 88, 89, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 198, 94,
	199, 200, 0, 95, 0, 96, 0, 0, 0, 97,
	98, 0, 99, 0, 0, 0, 201, 100, 101, 202,
	0, 0, 0, 102, 103, 203, 0, 104, 0, 105,
	0, 0, 0, 0, 106, 204, 0, 205, 0, 107,
	108, 206, 207, 0, 0, 111, 0, 109, 0, 0,
	110, 208, 209, 210, 211, 0, 212, 0, 0, 112,
	0, 113, 114, 0, 0, 213, 0, 115, 0, 0,
	116, 0, 0, 117, 0, 118, 119, 120, 121, 122,
	0, 123, 124, 127, 125, 0, 126, 0, 214, 128,
	215, 129, 130, 0, 0, 0, 0, 0, 131, 216,
	0, 132, 0, 217, 133, 134, 0, 0, 218, 136,
	219, 137, 0, 138, 0, 140, 220, 141, 142, 0,
	144, 145, 143, 146, 0, 147, 0, 148, 149, 221,
	0, 0, 151, 152, 153, 0, 222, 154, 155, 0,
	156, 157, 0, 158, 223, 224, 159, 0, 165, 160,
	161, 162, 164, 225, 163, 226, 0, 166, 0, 167,
	168, 0, 227, 228, 229, 0, 0, 169, 230, 231,
	0, 170, 171, 172, 173, 0, 0, 174, 175, 176,
	0, 0, 177, 178, 179, 232, 233, 0, 180, 0,
	0, 0, 0, 181, 182, 183, 184, 834, 0, 853,
	854, 855, 863, 864, 865, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 836,
	834, 867, 853, 854, 855, 863, 864, 865, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	835, 0, 836, 0, 867, 0, 850, 0, 0, 0,
	0, 0, 0, 834, 0, 853, 854, 855, 863, 864,
	865, 0, 0, 835, 0, 0, 0, 0, 856, 850,
	0, 0, 0, 0, 0, 836, 0, 867, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 835, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 868, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 860, 868, 858, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 866,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 857, 851, 0, 860, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 861, 0, 847, 848,
	849, 0, 846, 843, 844, 845, 837, 838, 839, 840,
	842, 0, 862, 0, 0, 0, 0, 0, 859, 1387,
	0, 847, 848, 849, 0, 846, 843, 844, 845, 837,
	838, 839, 840, 842, 1346, 862, 1363, 1364, 1365, 0,
	0, 0, 1386, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 834, 862, 853,
	854, 855, 863, 864, 865, 1385, 0, 0, 0, 0,
	0, 0, 856, 1360, 0, 0, 0, 0, 0, 836,
	834, 867, 853, 854, 855, 863, 864, 865, 0, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	835, 0, 836, 0, 867, 0, 850, 0, 0, 0,
	0, 0, 0, 834, 0, 853, 854, 855, 863, 864,
	865, 1351, 0, 835, 0, 0, 0, 0, 856, 850,
	0, 0, 0, 0, 0, 836, 0, 867, 0, 1367,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1366, 841, 0, 835, 0, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 0, 0, 1361,
	0, 860, 868, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 860, 868, 858, 0, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 0, 0, 866,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 857, 851, 1362, 860, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 851, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	857, 0, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 861, 0, 1357, 1358, 1359, 0, 1356,
	1353, 1354, 1355, 1347, 1348, 1349, 1350, 1352, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 861, 0, 847, 848,
	849, 0, 846, 843, 844, 845, 837, 838, 839, 840,
	842, 0, 862, 0, 0, 0, 0, 0, 859, 1339,
	0, 847, 848, 849, 0, 846, 843, 844, 845, 837,
	838, 839, 840, 842, 0, 862, 0, 0, 1346, 1787,
	1363, 1364, 1365, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 0, 862, 0,
	0, 834, 1785, 853, 854, 855, 863, 864, 865, 0,
	0, 0, 0, 0, 0, 0, 856, 1360, 0, 0,
	0, 0, 0, 836, 834, 867, 853, 854, 855, 863,
	864, 865, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 0, 0, 0, 835, 0, 836, 0, 867, 0,
	850, 0, 0, 0, 0, 0, 0, 834, 0, 853,
	854, 855, 863, 864, 865, 1351, 0, 835, 0, 0,
	0, 0, 856, 850, 0, 0, 0, 0, 0, 836,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1366, 841, 0,
	835, 0, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 0, 0, 1361, 0, 860, 868, 0, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 0, 860, 868,
	858, 0, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 0, 0, 866, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 0, 857, 851,
	1362, 860, 868, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 851, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 857, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 861, 0, 1357,
	1358, 1359, 0, 1356, 1353, 1354, 1355, 1347, 1348, 1349,
	1350, 1352, 0, 0, 0, 0, 0, 0, 0, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	861, 0, 847, 848, 849, 0, 846, 843, 844, 845,
	837, 838, 839, 840, 842, 0, 862, 0, 0, 0,
	1766, 0, 859, 0, 0, 847, 848, 849, 0, 846,
	843, 844, 845, 837, 838, 839, 840, 842, 0, 862,
	0, 0, 1346, 1741, 1363, 1364, 1365, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 847, 848,
	849, 0, 846, 843, 844, 845, 837, 838, 839, 840,
	842, 0, 862, 0, 0, 834, 1736, 853, 854, 855,
	863, 864, 865, 0, 0, 0, 0, 0, 0, 0,
	856, 1360, 0, 0, 0, 0, 0, 836, 834, 867,
	853, 854, 855, 863, 864, 865, 0, 0, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 835, 0,
	836, 0, 867, 0, 850, 0, 0, 0, 0, 0,
	0, 834, 0, 853, 854, 855, 863, 864, 865, 1351,
	0, 835, 0, 0, 0, 0, 856, 850, 0, 0,
	0, 0, 0, 836, 0, 867, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 835, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 1361, 0, 860,
	868, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 0,
	0, 0, 860, 868, 858, 0, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 866, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 857, 851, 1362, 860, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 857, 0, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 851, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 861, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 1357, 1358, 1359, 0, 1356, 1353, 1354,
	1355, 1347, 1348, 1349, 1350, 1352, 0, 0, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 861, 0, 847, 848, 849, 0,
	846, 843, 844, 845, 837, 838, 839, 840, 842, 0,
	862, 0, 0, 0, 1732, 0, 859, 0, 0, 847,
	848, 849, 0, 846, 843, 844, 845, 837, 838, 839,
	840, 842, 0, 862, 0, 0, 0, 1668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 847, 848, 849, 0, 846, 843, 844, 845,
	837, 838, 839, 840, 842, 0, 862, 0, 0, 834,
	1667, 853, 854, 855, 863, 864, 865, 0, 0, 0,
	0, 0, 0, 0, 856, 0, 0, 0, 0, 0,
	0, 836, 834, 867, 853, 854, 855, 863, 864, 865,
	0, 0, 0, 0, 0, 0, 0, 856, 0, 0,
	0, 0, 835, 0, 836, 0, 867, 0, 850, 0,
	0, 0, 0, 0, 0, 834, 0, 853, 854, 855,
	863, 864, 865, 0, 0, 835, 0, 0, 0, 0,
	856, 850, 0, 0, 0, 0, 0, 836, 0, 867,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 835, 0,
	0, 0, 0, 0, 850, 0, 0, 0, 0, 0,
	0, 0, 0, 860, 868, 0, 0, 0, 0, 841,
	834, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 0, 860, 868, 858, 0,
	0, 0, 836, 0, 851, 0, 0, 0, 0, 0,
	0, 866, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 835, 0, 0, 857, 851, 0, 860,
	868, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 857,
	0, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	851, 852, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 861, 0, 0, 0, 0, 841, 0, 0,
	0, 0, 857, 0, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 851, 0, 859, 861, 0,
	847, 848, 849, 0, 846, 843, 844, 845, 837, 838,
	839, 840, 842, 0, 862, 0, 0, 0, 1575, 0,
	859, 0, 0, 847, 848, 849, 0, 846, 843, 844,
	845, 837, 838, 839, 840, 842, 0, 862, 0, 0,
	0, 1510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 859, 0, 0, 847, 848, 849, 0,
	846, 843, 844, 845, 837, 838, 839, 840, 842, 0,
	862, 0, 0, 834, 1494, 853, 854, 855, 863, 864,
	865, 0, 0, 0, 0, 0, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 836, 834, 867, 853, 854,
	855, 863, 864, 865, 0, 0, 0, 0, 0, 0,
	0, 856, 0, 0, 0, 0, 835, 0, 836, 0,
	867, 0, 850, 0, 0, 846, 843, 844, 845, 837,
	838, 839, 840, 842, 0, 862, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 868, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	860, 868, 858, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	857, 851, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 861, 0, 834, 0,
	853, 854, 855, 863, 864, 865, 0, 0, 852, 0,
	0, 0, 0, 856, 0, 0, 0, 0, 0, 861,
	836, 0, 867, 0, 834, 0, 853, 854, 855, 863,
	864, 865, 0, 0, 0, 0, 0, 0, 0, 856,
	0, 835, 0, 0, 0, 0, 836, 850, 867, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 835, 862, 0,
	0, 0, 1119, 850, 859, 0, 0, 847, 848, 849,
	0, 846, 843, 844, 845, 837, 838, 839, 840, 842,
	0, 862, 0, 1424, 0, 841, 1857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 868, 0, 0, 0, 0, 0, 0,
	0, 841, 0, 1377, 0, 0, 1376, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 860, 868,
	0, 0, 0, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 858, 0, 857, 0, 0, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 1856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 0, 0, 0, 0,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 861, 0, 0, 834, 0, 853, 854, 855, 863,
	864, 865, 0, 0, 0, 0, 852, 0, 0, 856,
	0, 0, 0, 0, 1053, 0, 836, 861, 867, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 850, 0, 0, 859, 0, 0, 847,
	848, 849, 0, 846, 843, 844, 845, 837, 838, 839,
	840, 842, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 1054, 859, 0, 0, 847, 848, 849, 0, 846,
	843, 844, 845, 837, 838, 839, 840, 842, 0, 862,
	0, 841, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 860, 868,
	0, 0, 0, 834, 0, 853, 854, 855, 863, 864,
	865, 0, 0, 866, 0, 0, 0, 0, 856, 0,
	0, 0, 869, 858, 0, 836, 0, 867, 0, 851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 857, 850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 852, 0, 834, 0,
	853, 854, 855, 863, 864, 865, 0, 861, 0, 0,
	841, 0, 0, 856, 0, 0, 0, 0, 0, 0,
	836, 0, 867, 0, 0, 0, 0, 860, 868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 866, 0, 0, 0, 0, 850, 0, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 851, 0,
	0, 0, 859, 0, 0, 847, 848, 849, 0, 846,
	843, 844, 845, 837, 838, 839, 840, 842, 0, 862,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 860, 868, 0, 852, 0, 0, 834, 0,
	853, 854, 855, 863, 864, 865, 861, 866, 0, 0,
	0, 0, 0, 856, 0, 0, 0, 858, 0, 0,
	836, 0, 867, 851, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 857, 322, 850, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 0, 862, 0,
	852, 0, 0, 834, 0, 853, 854, 855, 863, 864,
	865, 861, 0, 0, 0, 841, 0, 0, 856, 0,
	0, 0, 0, 0, 0, 836, 0, 867, 0, 0,
	0, 0, 860, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 866, 0, 0,
	0, 0, 850, 0, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 851, 0, 0, 859, 0, 0, 847,
	848, 849, 0, 846, 843, 844, 845, 837, 838, 839,
	840, 842, 0, 862, 0, 857, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 1383, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 860, 868, 0,
	852, 0, 834, 0, 853, 854, 855, 863, 864, 865,
	0, 861, 866, 0, 0, 0, 0, 856, 0, 0,
	0, 1378, 858, 0, 836, 0, 867, 0, 851, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	857, 850, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 859, 0, 0, 847,
	848, 849, 0, 846, 843, 844, 845, 837, 838, 839,
	840, 842, 0, 862, 0, 852, 0, 834, 0, 853,
	854, 855, 863, 864, 865, 0, 861, 0, 0, 841,
	0, 0, 856, 0, 0, 0, 0, 0, 0, 836,
	0, 867, 0, 0, 0, 0, 860, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 866, 0, 0, 0, 0, 850, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 859, 0, 0, 847, 848, 849, 0, 846, 843,
	844, 845, 837, 838, 839, 840, 842, 0, 862, 857,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 868, 0, 852, 0, 834, 0, 853, 854,
	855, 863, 864, 865, 0, 861, 866, 0, 0, 0,
	0, 856, 0, 0, 0, 1338, 858, 0, 836, 0,
	867, 0, 851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 857, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 0, 0, 0,
	859, 0, 0, 847, 848, 849, 0, 846, 843, 844,
	845, 837, 838, 839, 840, 842, 0, 862, 0, 852,
	0, 834, 0, 853, 854, 855, 863, 864, 865, 0,
	861, 0, 0, 841, 0, 0, 856, 0, 0, 0,
	0, 0, 0, 836, 0, 867, 0, 0, 0, 0,
	860, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 866, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 851, 0, 0, 0, 859, 0, 0, 847, 848,
	849, 0, 846, 843, 844, 845, 837, 838, 839, 840,
	842, 0, 862, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 868, 0, 852, 0,
	834, 0, 853, 854, 855, 863, 864, 865, 0, 861,
	866, 0, 0, 0, 0, 856, 0, 0, 0, 0,
	858, 0, 836, 0, 867, 0, 851, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 857, 850,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 0, 847, 848, 849,
	0, 846, 843, 844, 845, 837, 838, 839, 840, 842,
	0, 862, 834, 852, 853, 854, 855, 863, 864, 865,
	0, 0, 0, 0, 861, 0, 0, 841, 0, 0,
	0, 0, 0, 0, 836, 0, 867, 0, 0, 0,
	0, 0, 0, 0, 860, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 866,
	0, 850, 0, 0, 0, 0, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 851, 0, 0, 0, 859,
	0, 0, 847, 848, 849, 0, 846, 843, 844, 845,
	837, 838, 839, 840, 842, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 860, 868, 0, 0,
	0, 834, 852, 853, 854, 855, 863, 864, 865, 0,
	0, 866, 0, 861, 0, 0, 0, 0, 0, 0,
	0, 858, 0, 836, 0, 867, 0, 851, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 859, 0,
	0, 847, 848, 849, 0, 846, 843, 844, 845, 837,
	838, 839, 840, 842, 852, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 861, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 860, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 0, 0, 0, 0,
	858, 0, 0, 0, 46, 0, 851, 0, 0, 0,
	859, 0, 0, 847, 848, 849, 0, 846, 843, 844,
	845, 837, 838, 839, 840, 842, 0, 862, 48, 0,
	0, 0, 0, 0, 27, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 0, 0, 0, 0,
	0, 0, 33, 852, 0, 49, 0, 0, 0, 36,
	34, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 716,
	710, 733, 704, 724, 723, 0, 0, 706, 705, 0,
	0, 0, 735, 734, 0, 0, 0, 0, 0, 859,
	0, 0, 847, 848, 849, 0, 846, 843, 844, 845,
	837, 838, 839, 840, 842, 0, 862, 0, 0, 0,
	0, 0, 0, 729, 0, 721, 720, 0, 0, 0,
	0, 0, 0, 35, 719, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 51, 0, 0, 39, 0, 50,
	718, 0, 0, 0, 40, 0, 0, 60, 0, 0,
	0, 0, 43, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 47, 0, 0, 0, 711, 712, 713, 714,
	62, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 58, 722, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 0, 0, 0, 0, 715,
	709, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 707, 0, 0, 730, 731,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736,
}
var sqlPact = [...]int{

	23711, -1000, -124, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 811, 15551, -1000, -1000,
	-1000, -1000, 696, 764, 522, 15551, 15551, 15287, 1069, 1069,
	16871, -1000, -1000, 19775, -1000, 3250, 470, 474, 470, 470,
	466, 16871, 582, 632, 122, -1000, 722, -18, 19511, 15551,
	1323, 30, 14231, 318, 23711, 15023, 19247, 15551, 377, 47,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1143, 1050, 1048, 14231, 18983, 18719,
	18455, -1000, 9416, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 577, 324, 321, -1000, 14759, -1000, 908, -1000, 29,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 905, -1000,
	15551, -1000, -1000, 18191, 17927, 320, 890, -1000, -1000, 534,
	399, 1329, -1000, 46, -1000, -1000, 1140, -1000, 892, 1139,
	1138, 1137, 1133, 1131, 1128, 396, 901, -1000, 572, 890,
	-1000, 890, -1000, -1000, -1000, 539, 16871, -1000, 14231, -1000,
	17663, 1076, 17399, -1000, 722, -1000, -1000, -1000, 925, 1305,
	1305, 1305, 1324, 189, 188, 122, 1, 15551, -1000, 319,
	1, 6641, 6641, -1000, -1000, 318, -1000, 226, 12376, -1000,
	7195, -1000, 792, 1211, 443, 650, 1209, -125, 763, 607,
	11574, 47, -1000, -1000, -1000, 8598, 4079, 14231, 15551, 15551,
	641, 17135, -1000, 1207, 104, 1206, -1000, 102, 1205, -1000,
	20, -1000, -1000, -1000, -1000, -1000, -1000, 318, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14495, 1367, 23814, -1000, 8598, -1000, -1000, 12643,
	877, 12643, -1000, -1000, 1366, -1000, 8598, -1000, 25, 23,
	1010, 1057, 9967, 9693, 1265, 917, -1000, -1000, -1000, 45,
	4353, 15551, 1150, 12643, 15551, 15551, 15551, 15551, 15551, 15551,
	-1000, 1005, -1000, 15551, -1000, 18, 10, -1000, 16871, -1000,
	106, -1000, 376, 966, 16607, 1222, 961, -1000, 925, -1000,
	913, 1004, 7767, 8598, 122, -1000, -1000, 122, 122, 8598,
	-1000, -1000, 15551, 1, 1350, 15551, 54, -1000, 22573, -1000,
	-1000, 8598, 8598, 8598, 8598, 8598, 851, -1000, -1000, -1000,
	4904, -1000, -1000, 47, 317, 333, -1000, -1000, 316, 47,
	-1000, -1000, -1000, -1000, 314, 1467, 398, -1000, -1000, -1000,
	8598, 391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1148, 313, 312, -1000, -1000, -1000, -1000, 311, 309,
	308, 307, 304, 303, 302, 301, 295, 294, 273, 272,
	271, 269, 779, -1000, 426, -1000, -1000, 426, 426, -1000,
	265, 265, 266, -1000, -1000, -1000, -1000, 265, -1000, -1000,
	-1000, 388, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 268,
	54, -1000, -1000, -1000, 15551, 19, -1000, 23271, -1000, -33,
	768, -1000, 13703, 1285, 1281, 1277, 14231, 1333, 1315, 526,
	15551, 15551, 523, -1000, 1124, 15, -1000, -1000, 3123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 415, 113, 1349, 113, 11842,
	-1000, 15551, 15551, -1000, 15551, -1000, -1000, 15551, -1000, 15551,
	15551, 225, 13175, 852, 1198, -18, 3, -1000, 1382, -1000,
	-1000, -1000, -1000, 79, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 266, 779,
	265, 265, 265, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	388, -1000, -1000, 426, 426, 426, -1000, -1000, 2, 23271,
	521, -17, 12909, 15551, -1000, 35, -1000, -1000, 1119, 469,
	-2, 771, 1041, 663, -1000, -1000, -1000, -1000, -7, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1432,
	-1000, -1000, -1000, -1000, 1452, -7, -1000, -1000, -1000, -1000,
	-1000, 1464, -1000, -1000, -1000, 4353, -1000, -1000, -1000, 15551,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 771,
	1041, -1000, -1000, 14231, 13439, -18, 1193, 888, 953, -1000,
	-1000, 361, 1187, -1000, -1000, -1000, -1000, 23271, -1000, 23271,
	683, 1053, -1000, 1053, -9, -1000, 22454, -1000, 264, -15,
	-1000, 415, 6641, 11307, 23814, 15551, 565, 8598, 8598, 8598,
	8598, 8598, 8598, 8598, 8598, 8598, 8598, 8598, 8598, 8598,
	8598, 8598, 8598, 8598, 8598, 8598, 8598, 8598, 8598, 982,
	8598, 519, 8598, 8598, 8598, 8598, 807, 842, 251, 4353,
	-1000, 633, 633, 633, 23472, 23472, 202, 41, 22023, -13,
	47, -1000, -1000, 6346, 6050, 47, 2831, -1000, 711, 1450,
	424, 23271, 1169, 1103, 262, 166, 163, 8598, 8598, 871,
	8598, 8875, 8598, 8598, 5181, 8598, 8598, 8598, 8598, 8598,
	8598, -1000, 260, -1000, -1000, -1000, -1000, 1449, -1000, -1000,
	1445, -1000, 546, 544, 1444, 415, 158, 7195, -1000, 852,
	15551, 15551, 15551, -1000, -1000, 947, 16343, -1000, 23814, 15551,
	-1000, 256, 255, 1025, 1021, 15551, 15551, 16079, 15815, 15551,
	719, 254, 253, 15551, 698, -1000, 15551, 605, 1118, 15551,
	-1000, 8598, 671, 8598, 761, -1000, 10772, 431, 15551, 679,
	40, -1000, -1000, -1000, 357, 15551, -1000, -1000, -1000, 104,
	-1000, 102, -1000, -1000, 14231, -1000, -1000, -1000, -1000, -1000,
	-1000, 23814, 337, 334, -1000, 1443, 518, -1000, 517, 514,
	513, -1000, 252, -1000, 8598, 15551, 12909, -17, -21, -1000,
	-1000, 15551, 1041, -1000, -1000, -1000, -1000, 684, -1000, 766,
	-1000, 10241, -1000, -1000, -1000, 711, -1000, -67, -1000, -1000,
	-1000, -1000, 150, -23, -1000, -1000, -1000, -1000, -1000, 15551,
	328, 15551, -1000, 15551, 15551, 1186, 1463, 15551, -1000, -1000,
	-1000, 8598, -1000, -1000, -1000, -18, 15551, -1000, 1100, -1000,
	-3, 1623, -155, 13967, -1000, 10505, -1000, -1000, 393, 408,
	408, 628, 628, 628, 628, 219, 219, 179, 366, 2475,
	2475, 2475, 21800, 191, 191, 2475, 2475, 2475, 23472, 23390,
	2404, 8598, 8598, 503, 802, 251, 2404, 8598, 1417, 2404,
	2404, 2404, -1000, 910, -1000, -1000, -1000, 1116, 245, 8875,
	8875, -1000, -1000, -1000, 4904, -1000, -1000, 244, 8598, -1000,
	8598, -14, -24, -1000, -1000, -32, -1000, -1000, -10, 8598,
	8598, 8598, 145, -1000, 143, 597, -1000, 8598, 856, 243,
	242, 8598, -1000, -1000, 23186, 20647, 134, 1115, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 133, 23067, 118, 20614, -1000,
	8875, 8875, 8875, 4904, 241, 117, 22264, -94, 22982, 7472,
	7472, 7472, 116, 22863, 8598, -94, 20363, 20330, 20307, -34,
	-40, -45, 1439, -49, 111, 389, 387, 110, 1100, -1000,
	-1000, -1000, -1000, 499, 491, 1185, -1000, 946, -1000, 673,
	8598, 15551, 240, 235, 853, -1000, 1183, 975, 1182, 975,
	-1000, -33, 767, 8598, 8598, -1000, 490, -1000, -1000, 599,
	-1000, 22046, -1000, 6641, 23271, -1000, 675, 1279, -50, -1000,
	-1000, 6641, 415, 11842, 11307, 7195, -57, -1000, -1000, 852,
	-1000, 496, 1436, 108, 990, 820, 744, 634, 1435, 23271,
	-67, -1000, -67, -1000, -1000, -1000, -1000, -1000, -1000, 15551,
	1058, 13439, 234, 15551, 233, 349, 232, 15551, -1000, 1222,
	-1000, 100, -1000, 1094, 1322, -1000, 11307, 904, 1037, 1031,
	11307, 1046, 865, 865, 865, -1000, 13967, 3793, -1000, -1000,
	15551, 231, 11039, 98, 1623, 8598, 2404, 2404, 8598, 8875,
	8875, -1000, 2404, -1000, -1000, -1000, -1000, 1114, 230, 8598,
	23814, 3177, 2531, -71, 5754, -68, 21735, -1000, -1000, 333,
	-1000, 96, 6918, -1000, 22658, -6, -6, -1000, 1460, 1220,
	-1000, 8598, 22778, -1000, 12109, 416, 873, 21702, 23814, 23814,
	-1000, 8598, -1000, 1113, 8598, -1000, 23814, 8875, 8875, 8875,
	8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875,
	8875, 8875, 8875, 8875, 8875, 8875, 1003, 8875, 1412, 1412,
	1412, -69, 5458, -1000, 1147, 1113, 8598, 8598, 23814, 95,
	90, 88, -1000, 8598, -94, 8598, 8598, 8598, -1000, -1000,
	-1000, 85, -1000, 1429, -1000, -1000, -1000, -1000, 1094, 15551,
	15551, 15551, 1181, 2151, -1000, 21679, -75, 15551, 15551, -1000,
	1055, 1132, 454, 15551, -1000, 15551, -1000, 15551, 15551, 15551,
	-83, -84, 15551, -1000, -1000, -80, 6641, 178, -18, -80,
	671, -1000, -76, -1000, 356, -1000, 331, 327, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 84, -1000, -1000, 1065,
	-1000, 9149, 229, 15551, 13439, -18, 9149, 885, -1000, -1000,
	412, 8598, 8598, 1623, 592, 11307, 11307, 1822, 1030, 11307,
	-1000, -1000, -1000, -1000, -1000, -1000, 1052, 228, 15551, 13967,
	615, 2404, 2048, 465, 8598, 23814, 23591, -85, 8598, 8598,
	-1000, -89, -1000, 8598, -1000, -1000, 1459, 8598, 83, 82,
	81, -1000, -1000, 23271, 8598, -1000, -1000, 20039, 8598, 73,
	-1000, 72, 70, 23271, 1147, 23271, -1000, 613, 613, 1412,
	1412, 1412, 1412, 564, 564, 1063, 1084, 2358, 2358, 2358,
	626, 438, 438, 2358, 2358, 2358, 1111, 1008, 227, 20958,
	8598, -90, -1000, -1000, -1000, 23271, 23271, 67, -1000, -1000,
	-1000, -94, 3152, 21391, 21358, -1000, 66, 412, -1000, -1000,
	-1000, 15551, -1000, 15551, -1000, 15551, 15551, 1102, 937, -1000,
	-1000, 1014, 224, 8875, 15551, -1000, 784, -95, -96, 935,
	-1000, 932, 8598, -1000, 23814, 975, 975, -1000, 489, 467,
	-1000, -1000, -1000, -80, 1234, 15551, 1276, -1000, -1000, 222,
	-1000, -1000, -1000, 847, -97, -1000, 205, 1288, 8598, -1000,
	-1000, 221, 9149, -107, 65, -1000, -108, 15551, -1000, 15551,
	23271, -94, 525, -1000, 1822, -1000, 220, 8598, 11307, -1000,
	-162, -1000, 351, -1000, 15551, -109, -1000, 8598, 8598, 23591,
	-115, -1000, 2404, 2404, -1000, 21335, -1000, 22658, -1000, -1000,
	-1000, 23271, 801, -1000, 21047, -1000, -1000, -1000, -1000, 8875,
	1107, 218, 23814, 21014, -1000, -1000, 8598, -1000, -1000, -1000,
	-1000, -1000, 1260, -1000, -1000, 15551, 943, -1000, -1000, 8598,
	20958, 204, 1058, 201, -1000, -1000, -1000, 697, -1000, -1000,
	23271, 1297, -1000, -1000, 15551, 15551, 556, -116, 15551, -1000,
	-1000, 4627, 15551, 784, 9149, 1294, 47, 15551, 1294, 20991,
	2831, -120, -1000, 1058, 784, 199, -82, -1000, 1339, 1457,
	-1000, 15551, 23271, -1000, 1052, -1000, 4353, -126, -1000, 2404,
	2404, -1000, -1000, 55, 873, 1317, -1000, 21302, 8875, 23814,
	-128, -1000, 20703, -1000, -1000, 1179, 20670, 996, 15551, -1000,
	15551, 15551, 436, 15551, -1000, -1000, 639, -1000, 415, -1000,
	198, 1058, -1000, -1000, -1000, -1000, 1288, -10, 784, -1000,
	1058, 9149, 15551, 197, -1000, -132, -1000, -1000, -1000, -1000,
	750, 8598, 21302, -137, -1000, -1000, 1172, -1000, 874, 902,
	51, -138, 194, -1000, 8598, -1000, 11842, -1000, 15551, -1000,
	1294, 50, 1058, -1000, -139, -1000, -1000, -1000, 49, 8321,
	8321, -94, -1000, 15551, -1000, 884, 878, 619, -1000, -1000,
	-1000, -1000, -1000, 996, 15551, 23271, -127, -145, -1000, -1000,
	-1000, 784, -1000, -1000, -1000, 3467, 928, 653, 22238, -1000,
	-1000, -1000, 1239, -1000, 445, 988, 988, 874, -146, -1000,
	975, 1058, 1390, -1000, -1000, -1000, -1000, -1000, -1000, 1398,
	-1000, -1000, 1006, -1000, -1000, -1000, -1000, -1000, 8044, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1723, 1720, 1348, 115, 1714, 110, 1713, 1712, 1711,
	1709, 87, 107, 106, 117, 1707, 89, 1705, 1698, 1692,
	79, 1691, 1690, 1687, 29, 1685, 1684, 1683, 1682, 1681,
	1680, 74, 80, 130, 2150, 125, 1679, 1678, 1677, 9,
	97, 72, 1675, 2, 49, 91, 98, 958, 30, 1674,
	1673, 129, 84, 16, 197, 90, 133, 121, 112, 1672,
	1671, 1670, 55, 1669, 3, 1668, 1666, 1665, 70, 108,
	1661, 26, 120, 1660, 1659, 118, 1658, 54, 95, 100,
	25, 105, 230, 1657, 34, 14, 58, 1656, 23, 1652,
	27, 83, 126, 1651, 32, 137, 46, 22, 47, 1650,
	1645, 1644, 1637, 76, 1633, 85, 53, 1631, 1628, 57,
	1623, 124, 128, 1622, 1621, 113, 1619, 1617, 1616, 678,
	1613, 1611, 333, 1609, 6, 35, 48, 8, 99, 96,
	21, 1608, 18, 1607, 648, 813, 740, 1606, 62, 50,
	69, 42, 43, 56, 1605, 1604, 94, 1602, 1601, 1600,
	1598, 1595, 65, 1594, 77, 131, 40, 45, 73, 20,
	291, 78, 92, 136, 102, 1592, 1590, 104, 1587, 51,
	1584, 1583, 1142, 103, 1580, 1579, 1578, 1052, 1009, 642,
	246, 1577, 1573, 534, 315, 1571, 1570, 111, 1569, 1563,
	132, 169, 17, 1561, 101, 1560, 88, 1559, 0, 39,
	33, 1558, 119, 61, 1550, 1548, 1544, 1543, 31, 4,
	12, 5, 10, 7, 75, 19, 1538, 1534, 123, 81,
	1533, 139, 1530, 1525, 24, 1524, 1522, 15, 1521, 13,
	1519, 11, 1, 1518, 135, 1516, 86, 1515, 1389, 1484,
	134, 1482, 1475, 1399, 71,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 41,
	41, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 38, 38, 43, 43,
	43, 42, 42, 37, 37, 5, 5, 5, 6, 6,
	6, 6, 11, 12, 12, 12, 12, 12, 12, 81,
	81, 80, 80, 83, 83, 13, 13, 14, 14, 14,
	14, 14, 14, 14, 14, 168, 168, 167, 15, 144,
	144, 16, 16, 16, 16, 17, 104, 104, 18, 18,
	18, 18, 19, 23, 234, 234, 234, 238, 238, 239,
	239, 240, 240, 240, 240, 240, 240, 240, 236, 236,
	26, 26, 26, 26, 26, 123, 119, 119, 121, 121,
	121, 121, 46, 118, 118, 118, 118, 120, 120, 120,
	120, 191, 190, 190, 196, 196, 196, 59, 59, 59,
	59, 59, 60, 60, 60, 189, 189, 189, 189, 197,
	197, 197, 197, 197, 197, 61, 61, 61, 195, 195,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 235, 235, 237,
	237, 28, 28, 9, 9, 10, 10, 62, 62, 63,
	63, 126, 126, 126, 126, 64, 64, 125, 206, 206,
	207, 207, 207, 207, 207, 207, 208, 208, 208, 208,
	208, 208, 208, 204, 204, 205, 202, 202, 203, 203,
	203, 203, 241, 241, 124, 124, 67, 67, 211, 211,
	211, 211, 209, 209, 209, 209, 209, 212, 210, 213,
	213, 213, 213, 213, 155, 155, 155, 30, 8, 8,
	108, 108, 71, 71, 159, 159, 159, 53, 53, 39,
	39, 39, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 109, 109, 110, 110, 21, 25, 29, 29, 29,
	29, 29, 243, 243, 50, 50, 50, 50, 51, 51,
	122, 122, 122, 122, 122, 45, 7, 7, 44, 44,
	20, 20, 20, 20, 20, 56, 56, 115, 115, 115,
	117, 117, 116, 116, 116, 94, 94, 31, 76, 76,
	85, 85, 86, 86, 165, 87, 87, 24, 24, 34,
	34, 32, 32, 32, 32, 32, 32, 33, 33, 35,
	35, 35, 35, 35, 35, 35, 219, 219, 219, 221,
	221, 218, 220, 220, 242, 242, 95, 95, 95, 66,
	65, 65, 69, 69, 68, 70, 70, 158, 92, 92,
	92, 92, 111, 112, 112, 113, 113, 114, 114, 91,
	91, 141, 141, 36, 36, 75, 75, 77, 77, 132,
	132, 133, 133, 131, 131, 131, 160, 160, 160, 160,
	161, 161, 161, 161, 161, 161, 156, 156, 156, 156,
	157, 157, 166, 166, 98, 98, 98, 98, 96, 96,
	97, 97, 162, 162, 162, 162, 93, 93, 163, 163,
	163, 127, 127, 169, 169, 169, 74, 74, 74, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 171, 171, 171, 171, 173, 173, 173, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 174, 174, 181, 181, 182, 182, 183,
	184, 175, 175, 176, 176, 177, 178, 185, 185, 185,
	185, 187, 187, 179, 179, 179, 179, 179, 180, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 106, 106, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 214, 214, 214, 214, 214, 214,
	214, 216, 216, 217, 217, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 222, 222, 223, 223, 224, 224, 225, 225, 227,
	228, 228, 228, 229, 233, 233, 226, 226, 230, 230,
	230, 231, 231, 232, 232, 232, 232, 232, 146, 146,
	146, 147, 147, 148, 82, 82, 143, 143, 142, 142,
	142, 145, 145, 99, 186, 186, 186, 186, 186, 186,
	186, 100, 100, 107, 101, 101, 102, 102, 102, 102,
	102, 102, 138, 139, 103, 103, 103, 140, 140, 149,
	153, 153, 152, 151, 151, 150, 150, 130, 130, 130,
	130, 129, 128, 88, 88, 244, 244, 154, 154, 89,
	89, 90, 84, 84, 164, 164, 164, 164, 78, 78,
	58, 58, 79, 79, 54, 54, 57, 55, 55, 55,
	55, 72, 72, 73, 73, 52, 52, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 188, 188,
	188, 47, 47, 47, 48, 48, 49, 49, 193, 193,
	193, 194, 194, 194, 194, 192, 192, 192, 192, 192,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 4, 4, 4, 4,
	4, 2, 3, 4, 3, 2, 4, 2, 0, 2,
	0, 8, 8, 7, 10, 5, 8, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 3, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 1, 1, 3,
	5, 2, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -11, -12, -13,
	-15, -17, -18, -19, -20, -22, -23, -25, -24, -26,
	-27, -28, -29, -21, -30, -31, 22, 63, -7, -8,
	-9, -10, -220, 91, 99, 192, 98, 84, 114, 206,
	213, -32, -34, 221, -123, 222, 33, 231, 57, 94,
	208, 203, 252, 65, -219, -35, -33, 298, 273, 279,
	216, -36, 239, 266, 301, 239, 127, 77, -54, -47,
	4, -198, -200, 19, 20, 22, 32, 33, 38, 42,
	45, 56, 57, 58, 60, 62, 63, 64, 67, 68,
	75, 76, 77, 78, 80, 84, 86, 90, 91, 93,
	98, 99, 104, 105, 108, 110, 115, 120, 121, 128,
	131, 126, 140, 142, 143, 148, 151, 154, 156, 157,
	158, 159, 160, 162, 163, 165, 167, 164, 170, 172,
	173, 179, 182, 185, 186, 187, 190, 192, 194, 195,
	196, 198, 199, 203, 201, 202, 204, 206, 208, 209,
	211, 213, 214, 215, 218, 219, 221, 222, 224, 227,
	230, 231, 232, 235, 233, 229, 238, 240, 241, 248,
	252, 253, 254, 255, 258, 259, 260, 263, 264, 265,
	269, 274, 275, 276, 277, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 79, 81,
	82, 97, 100, 106, 116, 118, 122, 123, 132, 133,
	134, 135, 137, 146, 169, 171, 180, 184, 189, 191,
	197, 210, 217, 225, 226, 234, 236, 243, 244, 245,
	249, 250, 266, 267, 86, 131, 260, 259, 77, 127,
	239, -14, 298, -24, -6, -12, -4, -20, -31, -11,
	-13, 22, -47, -47, -47, 192, 21, -238, 21, -239,
	-240, 65, 91, 114, 216, 131, 86, 259, -238, -51,
	213, -47, -119, 151, 219, 210, 248, -120, -118, -191,
	243, 160, -80, -47, 4, 77, 56, 78, 115, 127,
	128, 61, 62, 143, 240, 243, 248, 21, 65, -243,
	248, 248, -243, -243, -50, 248, 246, -51, -242, 239,
	239, -108, 77, 257, -33, -35, -34, -68, -69, 256,
	136, 96, 178, -32, -34, -219, -221, 198, -218, -47,
	-221, -65, -66, 21, 88, 302, -162, -54, 176, -90,
	298, -3, -162, 122, -54, -57, 122, -54, -47, 112,
	298, -88, -130, -129, -128, 296, 300, 112, 138, 138,
	-163, -162, -47, 122, -58, 122, -57, -81, 122, -80,
	-168, -167, -194, 4, -198, -200, -199, 266, 54, 66,
	113, 130, 124, 139, 141, 147, 149, 161, 181, 183,
	207, 223, 239, -144, 298, -104, 298, -47, 21, 175,
	302, 175, -47, -119, 50, -119, 298, -121, -45, -46,
	140, 194, 246, 283, 112, 277, -61, 5, 83, -83,
	300, 112, -235, 175, 112, 112, 112, 112, 112, 112,
	277, 140, 194, 239, -122, -45, -46, -122, 246, -51,
	-93, -162, -80, 122, 127, -47, 122, -68, -69, -92,
	-111, -112, 150, 174, -95, 21, 88, -95, -95, 42,
	299, 299, 302, -221, -73, 298, -84, -164, -134, 291,
	-136, 289, 290, 295, 166, 278, -146, -54, -137, 9,
	298, -149, -216, -34, 97, 28, -147, -148, 210, -47,
	7, 8, 5, 6, -52, -171, -180, 251, 101, 168,
	46, -214, -215, 4, -198, -193, -172, -182, -176, -179,
	137, 54, 70, 73, 71, 74, 220, 261, 47, 27,
	100, 184, 189, 236, 249, 250, 122, 169, 123, 52,
	116, 146, 90, 35, 37, 39, 40, 48, 49, 79,
	81, 82, 106, 132, 133, 134, 135, 171, 197, 225,
	234, 244, 245, 267, -199, -183, -184, -177, -178, -185,
	-84, -90, 291, -54, 298, -89, -154, -134, 83, -41,
	201, -40, 20, 22, 91, 264, 97, 229, 229, 201,
	97, 303, 201, 232, 299, -78, -54, -130, -134, -192,
	291, 4, -198, -200, -199, -201, 21, 23, 24, 25,
	26, 28, 29, 30, 31, 41, 46, 47, 51, 53,
	55, 61, 65, 69, 70, 71, 72, 73, 74, 83,
	85, 87, 88, 89, 92, 94, 96, 101, 102, 103,
	109, 111, 112, 114, 117, 119, 125, 127, 129, 136,
	138, 144, 145, 150, 152, 153, 166, 168, 174, 175,
	176, 177, 178, 188, 193, 200, 205, 216, 220, 228,
	237, 239, 242, 246, 247, 251, 256, 257, 261, 262,
	268, 270, 271, 272, 273, -163, -56, -54, -56, 221,
	-47, 29, 97, -43, 302, 45, 204, 97, -43, 302,
	97, 299, 302, -162, 122, 29, -143, -169, -170, -172,
	-181, -175, -179, -180, 38, 44, 43, 241, 217, 226,
	36, 132, 133, 134, 135, 225, 35, 197, 106, 90,
	82, 81, 171, 40, 39, -183, -184, -177, -178, 79,
	244, 245, 137, 37, 49, 48, 267, 234, -82, -134,
	-234, -79, 239, 77, -55, -47, 291, -240, -234, 29,
	-82, 302, 302, 148, -60, 154, 165, 120, -190, 83,
	-196, -189, -155, 9, 251, 101, 175, -195, 8, 290,
	-188, -194, 5, 7, 289, -190, 83, 68, -197, 5,
	4, -180, -155, 83, 151, 300, -192, -191, -237, 109,
	-234, -191, -191, -191, -191, -191, -47, 148, -191, 302,
	302, -51, -43, 302, 298, 29, 166, -48, 122, -47,
	-44, 93, 166, -92, -112, -111, -113, -134, 21, -134,
	-136, -33, -33, -33, -70, -158, -134, -218, 29, -72,
	-47, -75, 302, 112, 10, 53, 32, 289, 290, 291,
	292, 107, 293, 286, 287, 288, 285, 281, 282, 283,
	59, 155, 212, 12, 13, 14, 25, 177, 149, 278,
	124, 223, 295, 15, 16, 17, 139, 34, 125, 29,
	4, -134, -134, -134, -134, -134, 183, -34, -134, -82,
	-88, -34, -142, 296, 298, -88, 298, 5, 5, 298,
	-150, -134, -222, 274, 109, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 191, -187, 269, -187, -187, -173, 298, -173, -174,
	298, -173, 275, 279, 298, -75, -54, 302, 299, 302,
	246, -109, 61, 55, -125, 122, 55, -202, -47, 61,
	-203, 51, 257, 193, 111, -109, 61, -109, 61, 61,
	-162, 32, 32, 246, -57, -47, 246, 112, 299, 302,
	297, 306, -127, 271, -115, -24, 298, 83, 29, -115,
	-85, -86, -165, -87, -54, 298, -47, -47, -57, -58,
	-80, -81, -14, -167, 97, -16, -24, -20, -31, -11,
	299, 302, -74, 28, -105, 298, 276, 158, 80, 121,
	157, -106, 215, 299, 302, 246, 302, -79, -72, -129,
	-128, 112, 248, 299, -46, -45, -59, 196, 227, 202,
	218, 302, 8, 7, 7, 5, -192, -236, -47, -46,
	-45, -162, -62, -63, -126, -125, -204, -205, -202, 127,
	257, 102, -24, 97, 175, 166, 283, 97, -114, 210,
	211, 302, -39, 30, 87, 298, 302, 299, -127, -164,
	-77, -160, -162, -34, -161, 298, -169, -80, 243, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
	-134, 149, 124, 223, 34, 125, -134, 246, -134, -134,
	-134, -134, 168, 166, 251, 101, 258, 88, 172, -244,
	237, 31, -140, -34, 298, -192, -146, 210, 298, 299,
	302, -82, -145, 297, -142, -82, 299, 299, -82, 268,
	21, 88, 291, -105, 7, -153, -152, 270, -223, 104,
	117, 298, 299, 299, -134, -134, -99, -186, 4, 276,
	158, 80, 121, 157, 215, -100, -134, -101, -135, -136,
	289, 290, 295, 298, 210, -102, -134, -82, -134, 41,
	145, 247, -103, -134, 112, -82, -134, -134, -134, -82,
	-82, -82, 298, 7, 7, 243, 243, 7, -127, 299,
	-154, -40, -54, -47, -47, 166, -125, 122, -169, -47,
	298, 298, 142, 142, -47, -47, 122, -47, 122, -47,
	-47, -41, 201, 298, 298, -47, 201, -47, 232, 112,
	-54, -134, -94, 205, -134, -94, -117, 175, -78, 266,
	-47, 205, -76, 302, 112, 283, -78, -43, -43, -162,
	-169, 296, 296, 7, 246, 246, 246, 246, 298, -134,
	-236, -55, -236, -45, 255, 58, 196, -196, -105, 302,
	299, 302, -48, 127, -48, -80, -54, 97, 5, -47,
	-158, -16, -47, -91, 117, -166, 302, 280, 66, -98,
	141, 161, 113, 147, 207, 130, -131, 303, -157, -156,
	29, -47, -34, -161, -160, 277, -134, -134, 246, -244,
	237, -140, -134, 168, 251, 101, 258, 88, 172, 112,
	298, -135, -135, -82, 298, -82, -134, 297, 297, 302,
	299, -69, 302, -68, -134, -82, -82, 299, 299, -151,
	-152, 92, -134, -228, 182, 298, 298, -134, 29, 302,
	299, 112, 299, -107, 188, 299, 10, 289, 290, 291,
	292, 107, 293, 286, 287, 288, 285, 281, 282, 283,
	59, 155, 212, 12, 13, 14, 139, 125, -135, -135,
	-135, -82, 298, 299, -138, -139, 112, 109, 29, -103,
	-103, -103, 299, 112, -82, 302, 302, 302, 299, 299,
	299, 7, 299, 302, 299, 277, 277, 299, -91, 246,
	246, 97, 166, -206, -203, -134, -72, 298, 298, -38,
	91, 221, -110, 97, -43, 97, -43, 246, -109, 61,
	-82, -82, 246, 232, 297, -84, 205, 60, 299, -84,
	-127, -86, -77, -154, 299, 297, 7, 7, 299, 158,
	121, 157, -106, 157, -106, -106, 7, -47, -64, 126,
	-126, 298, -48, 298, 298, 29, 298, -47, -44, 299,
	-141, 119, 42, -160, 172, 141, 141, -160, -98, 141,
	-96, 181, -96, -96, -157, -192, 304, -47, 298, 299,
	-134, -134, -135, -135, 112, 298, -134, -143, 25, 25,
	299, -82, 299, 302, 299, -142, 299, 268, -69, -69,
	-69, 5, 94, -134, 242, -229, -47, 298, 271, -68,
	299, -169, -169, -134, -138, -134, -169, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, 88, 166, 172, -135,
	302, -82, 299, -139, -138, -134, -134, -169, 299, 299,
	299, -82, -134, -134, -134, 299, 7, -141, -47, -47,
	-125, 97, -207, 61, -208, 53, 102, 65, 166, 168,
	257, 193, 51, 83, 200, 299, 299, -72, -72, 166,
	83, 166, 83, 76, 253, -47, -47, -54, -47, -47,
	299, 299, -47, -84, -116, 298, 175, -24, -94, 283,
	297, 297, 299, 125, -71, -159, -47, -217, 298, -214,
	-215, -52, 298, -72, -62, -24, -71, 175, -224, 272,
	-134, -82, 238, -160, -160, -97, 262, 175, 141, -160,
	-133, -132, 110, 164, 298, -72, -156, 25, 25, -134,
	-143, 299, -134, -134, 299, -134, 5, -134, 299, 299,
	299, -134, -233, -47, -134, 299, 299, 299, -139, 112,
	88, 172, 298, -134, 299, 299, 302, 299, 299, 299,
	-224, -125, -47, -80, -47, 102, 122, 168, 142, 298,
	-135, -54, -124, -241, 64, 235, 299, 299, 168, 168,
	-134, -169, -43, -43, 246, 246, 89, -72, 61, -90,
	-34, 298, 185, 299, 302, -53, -88, 53, -53, -134,
	298, -71, 299, 299, 299, -54, -225, -227, -47, 243,
	-97, 298, -134, -160, 302, 305, 283, -72, 299, -134,
	-134, 299, 299, -69, -226, 187, 299, -135, 112, 298,
	-143, 299, -134, -208, -48, 166, -134, -49, 298, -64,
	298, 200, -42, 53, -47, -47, 259, 167, 299, -47,
	-47, -124, -159, -39, -80, -39, 299, -82, 299, -64,
	-124, 298, 302, 29, 5, -72, -132, -192, 299, 299,
	-69, 42, -135, -143, 299, 299, 97, 299, -211, 156,
	-47, -72, -54, -37, 262, -80, 221, -127, 298, -64,
	-53, -69, -124, -64, -71, -227, -229, 299, -230, 195,
	211, -82, 299, 102, -209, -212, -210, 175, 113, 186,
	224, 299, 299, -67, 298, -134, -85, -72, -39, 299,
	-64, 299, 299, -231, -232, 34, 254, 68, -134, -231,
	-47, -210, 175, -212, 175, 259, 86, -211, -72, -127,
	299, -124, -232, 190, 108, 210, 190, 108, -213, 163,
	204, 45, 221, -213, -209, 299, -43, -64, 25, 19,
	168, 83, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 0, 0, 363, 0, 0, 0, 0, 0,
	0, 337, -2, 0, 124, 0, 293, 0, 293, 293,
	297, 0, 365, 261, 362, -2, 373, 0, 0, 0,
	371, 351, 0, 0, -2, 0, 0, 0, 0, 764,
	791, 792, 793, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 77, 78, 79, 80, 81, 82, 83,
	84, 0, 90, 97, 98, 874, 100, 0, 107, 108,
	109, 111, 112, 113, 114, 115, 116, 117, 0, 286,
	888, 299, 120, 853, 892, 958, 906, 127, 137, 0,
	964, -2, 141, 71, 170, 171, 0, 173, 188, 0,
	0, 0, 0, 0, 181, 0, 0, 185, 0, 304,
	292, 304, 289, 290, 291, 294, 0, 285, 0, 364,
	0, 0, 0, 260, -2, 347, 348, -2, 0, 368,
	368, 368, 0, 0, 348, 0, 356, 878, 359, 774,
	357, 0, 0, 370, 369, 0, 352, 432, 0, 393,
	0, 2, 0, 943, 432, 0, 943, 0, 0, 0,
	0, 765, 743, 737, 738, 0, 0, 0, 0, 0,
	0, 438, 63, 943, 50, 943, 760, 50, 943, 69,
	0, 85, 87, 801, 802, 803, 804, 969, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 0, 0, 0, 95, 0, 99, 101, 0,
	0, 0, 298, 121, 933, 123, 0, 126, 128, 129,
	0, 0, 0, 0, 0, 0, 140, 165, 166, 72,
	0, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	182, 0, 184, 0, 287, 300, 301, 288, 0, 296,
	50, 436, 0, 943, 795, 309, 943, -2, 0, 343,
	380, 381, 0, 0, 0, 366, 367, 0, 0, 0,
	339, 340, 0, 358, 0, 0, 396, 752, 756, 757,
	525, 0, 0, 0, 0, 0, 0, 612, 613, 614,
	0, 616, 617, 618, 938, 0, 622, 623, 958, 764,
	777, 778, 779, 780, 0, 0, 0, 785, 786, 787,
	736, 662, 632, -2, -2, 775, 462, 463, 464, 465,
	-2, 971, 636, 638, 640, 641, 642, 643, 0, 922,
	939, 954, 955, 963, 967, 968, 943, 951, 944, 934,
	941, 950, 834, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 800, 487, 488, 493, 494, 496,
	396, 394, 433, 434, 0, 0, 749, 747, 748, 27,
	282, 29, 0, 282, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 758, 744, 0, 741,
	742, 805, 806, 807, 808, 809, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 442, 0, 315, 0, 0,
	439, 0, 0, 65, 0, 48, 49, 0, 67, 0,
	0, 363, 0, 0, 943, 363, 0, 696, 448, 449,
	450, 451, 452, 522, 455, 456, 457, 458, 459, 460,
	461, 469, 470, 471, 472, 473, 474, 475, 484, 0,
	468, 468, 468, 481, 482, 485, 486, 491, 492, 503,
	504, 506, 508, 502, 502, 502, 499, 500, 0, 694,
	0, 104, 0, 829, 762, 767, 768, 110, 0, 0,
	0, 0, 0, 0, 132, 152, 153, 154, 133, 135,
	142, 144, 145, 146, 155, 156, 157, 158, 254, 0,
	256, 168, 169, 788, 0, 134, 136, 138, 139, 159,
	160, 0, 162, 163, 164, 0, 73, 172, 174, 0,
	187, 175, 176, 177, 178, 179, 180, 183, 186, 0,
	0, 295, 257, 0, 198, 0, 0, 0, 943, 794,
	306, 0, 0, 346, 378, 379, 382, 385, 386, 383,
	525, 353, 354, 355, 374, 375, 271, 360, 0, 0,
	771, 442, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	755, 529, 530, 531, 553, 554, 0, -2, 694, 0,
	619, 620, 621, 0, 0, -2, 0, 782, 522, 0,
	0, 735, 664, 0, 0, 0, 0, 0, 0, 0,
	0, 715, 721, 0, 0, 0, 0, 0, 0, 0,
	0, 477, 490, 501, 498, 497, 479, 0, 478, 476,
	0, 480, 0, 0, 0, 442, 0, 0, 751, 0,
	0, 0, 0, 281, 31, 943, 0, 41, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 766, 0, 0, 0, 0,
	739, 0, 326, 0, 326, 317, 0, 0, 0, 313,
	329, 330, 332, 333, 0, 0, 440, 64, 761, 50,
	70, 50, 76, 86, 0, 88, 91, 92, 93, 94,
	89, 0, 443, 445, 453, 0, 509, 510, 511, 512,
	513, 514, 523, 96, 0, 0, 0, 105, 106, 769,
	770, 0, 0, 125, 130, 131, 305, 0, 149, 0,
	151, 0, 255, 790, 789, 522, 74, 189, 118, 302,
	303, 437, 0, 197, 199, 201, 202, 203, 204, 795,
	0, 795, 195, 0, 0, 0, 0, 0, 384, 387,
	388, 0, 377, 269, 270, 363, 0, 773, 390, 753,
	423, 397, 405, 421, 408, 0, 526, 527, 0, 532,
	533, 534, 535, 536, 537, 538, 539, 540, 541, -2,
	-2, -2, 545, 546, 547, -2, -2, -2, 551, 552,
	-2, 0, 0, 0, 746, 0, -2, 0, 561, -2,
	-2, -2, 565, 0, 568, 570, 572, 0, 0, 0,
	0, 745, 582, 727, 0, 754, 567, 0, 0, 615,
	0, 0, 0, 700, 701, 0, -2, 624, 373, 0,
	0, 0, 0, 783, 0, 734, 730, 0, 672, 0,
	0, 0, 637, 639, 0, 0, 0, 0, 704, 705,
	706, 707, 708, 709, 710, 0, 0, 0, 0, 584,
	0, 0, 0, 0, 958, 0, 694, 720, 0, 0,
	0, 0, 0, 694, 0, 726, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 390, 435,
	750, 30, 273, 0, 0, 0, 33, 943, 209, 0,
	0, 0, 0, 0, 284, 42, 943, 50, 943, 50,
	43, 28, 282, 0, 0, 275, 0, 272, 56, 0,
	759, 0, 62, 0, 441, 310, 311, 0, 0, 319,
	316, 0, 442, 0, 0, 0, 0, 66, 68, 0,
	697, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	102, 763, 103, 122, 147, 148, 150, 143, 161, 0,
	206, 0, 0, 795, 0, 0, 0, 0, 308, 309,
	376, 0, 772, 392, 0, 395, 0, 0, 0, 0,
	0, 0, 429, 429, 429, 427, 421, 0, 407, 420,
	0, 419, -2, 408, 0, 0, -2, -2, 0, 0,
	0, 583, -2, 566, 569, 571, 573, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 695, 698, 699, 0,
	-2, 0, 0, 372, 373, 373, 373, 630, 0, 0,
	731, 0, 0, 631, 0, 0, 0, 0, 0, 0,
	646, 0, 647, 0, 0, 648, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 586, 587,
	588, 0, 0, 649, 718, 719, 0, 0, 0, 0,
	0, 0, 654, 0, 725, 0, 0, 0, 658, 659,
	660, 0, 466, 0, 483, 505, 507, 495, 392, 0,
	0, 0, 0, 207, 226, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 39, 0, 45, 0, 0, 0,
	0, 0, 0, 57, 740, 325, 0, 324, 0, 314,
	326, 331, 328, 334, 0, 446, 0, 0, 454, 515,
	516, 517, 518, 519, 520, 521, 0, 119, 193, 0,
	200, 0, 0, 0, 198, 0, 0, 0, 307, 361,
	666, 0, 0, 398, 0, 0, 0, 0, 0, 0,
	424, 428, 425, 426, 406, 403, 0, 417, 0, 410,
	528, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	728, 0, 689, 0, -2, 702, 625, 0, 0, 0,
	0, 784, 729, 733, 0, 670, 671, 675, 0, 0,
	635, 0, 0, 703, 712, 713, 585, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, -2, -2, -2,
	602, 603, 604, -2, -2, -2, 0, 0, 0, 714,
	0, 0, 692, 716, 717, 722, 723, 0, 651, 652,
	653, 724, 0, 0, 0, 489, 0, 666, 277, 279,
	32, 0, 208, 0, 211, 0, 0, 0, 0, 217,
	218, 0, 0, 0, 0, 228, 235, 0, 0, 0,
	47, 0, 0, 283, 0, 50, 50, 274, 0, 0,
	191, 192, 276, 312, 0, 0, 0, 318, 327, 0,
	447, 444, 524, 0, 0, 262, 268, 268, 0, 633,
	634, 0, 0, 0, 0, 196, 0, 0, 349, 0,
	391, 389, 0, 411, 0, 413, 0, 0, 0, 415,
	0, 401, 0, 400, 0, 0, 409, 0, 0, -2,
	0, 576, -2, -2, 688, 695, 781, 373, 626, 628,
	629, 732, 677, 674, 0, 661, 644, 645, 711, 0,
	0, 0, 0, 695, 691, 650, 0, 656, 657, 467,
	350, 34, 0, 212, 213, 795, 0, 216, 219, 0,
	221, 797, 206, 0, 232, 233, 230, 0, 36, 37,
	46, 52, 38, 44, 0, 0, 0, 0, 0, 335,
	336, 0, 0, 235, 0, 271, 776, 0, 271, 0,
	0, 0, 225, 206, 235, 0, 665, 667, 0, 0,
	412, 0, 431, 414, 0, 404, 0, 0, 418, -2,
	-2, 577, 690, 0, 373, 0, 663, -2, 0, 0,
	0, 693, 0, 210, 214, 0, 0, 241, 0, 229,
	0, 0, 54, 0, 278, 280, 0, 321, 442, 323,
	0, 206, 263, 264, 267, 265, 268, 373, 235, 194,
	206, 0, 0, 0, 422, 0, 402, 399, 416, 627,
	680, 0, -2, 0, 610, 655, 0, 220, 246, 0,
	0, 0, 237, 40, 0, 51, 0, 322, 0, 223,
	271, 0, 206, 258, 0, 668, 669, 430, 0, 0,
	0, 676, 611, 0, 222, 242, 243, 0, 238, 239,
	240, 796, 234, 241, 0, 53, 442, 0, 266, 625,
	224, 235, 673, 678, 681, -2, 909, 826, 0, 679,
	215, 244, 0, 245, 0, 0, 0, 246, 0, 320,
	50, 206, 0, 683, 684, 685, 686, 687, 247, 0,
	250, 251, 0, 248, 231, 236, 205, 259, 0, 249,
	252, 253, 682,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 287, 3, 293, 288, 3,
	298, 299, 291, 289, 302, 290, 300, 292, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 306, 301,
	281, 283, 282, 3, 303, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 296, 3, 297, 286, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 304, 285, 305, 295,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 284, 57624, 294,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:715
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:721
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:727
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:836
		{
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:891
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:895
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{ /* SKIP DOC */
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{ /* SKIP DOC */
		}
	case 125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			unimplemented()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = Low
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Normal
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = High
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1393
		{
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1558
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1772
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1779
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = true
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = false
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			unimplemented()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1874
		{
			unimplemented()
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1877
		{
			unimplemented()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1878
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = Ascending
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = Descending
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = true
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = false
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1944
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1945
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.str = ""
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.str = ""
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2082
		{
			unimplementedWithIssue(6637)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2089
		{
			unimplementedWithIssue(6637)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2131
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2135
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2160
		{
			unimplementedWithIssue(7841)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2161
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2387
		{
			unimplemented()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2391
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			unimplemented()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2395
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = true
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = false
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = false
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = true
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2427
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2485
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &From{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.str = astFullJoin
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.str = astLeftJoin
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.str = astRightJoin
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.str = astInnerJoin
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2772
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2862
		{
			unimplementedWithIssue(2115)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2863
		{
			unimplementedWithIssue(2115)
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			unimplementedWithIssue(2115)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2867
		{
			unimplementedWithIssue(2115)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2868
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2876
		{
			unimplemented()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2923
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = nil
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2981
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3053
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3125
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3157
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3162
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3169
		{
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3206
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3619
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3655
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3660
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3749
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3750
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3769
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3775
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3786
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3791
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3799
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3801
		{
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			unimplemented()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			unimplemented()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4143
		{
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4336
		{
			unimplemented()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = DNull
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.str = ""
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
