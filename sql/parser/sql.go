// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:36

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) ival() IntVal {
	return u.val.(IntVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:262
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TIMESTAMPTZ = 57565
const TO = 57566
const TRAILING = 57567
const TRANSACTION = 57568
const TREAT = 57569
const TRIM = 57570
const TRUE = 57571
const TRUNCATE = 57572
const TYPE = 57573
const UNBOUNDED = 57574
const UNCOMMITTED = 57575
const UNION = 57576
const UNIQUE = 57577
const UNKNOWN = 57578
const UPDATE = 57579
const USER = 57580
const USING = 57581
const VALID = 57582
const VALIDATE = 57583
const VALUE = 57584
const VALUES = 57585
const VARCHAR = 57586
const VARIADIC = 57587
const VARYING = 57588
const WHEN = 57589
const WHERE = 57590
const WINDOW = 57591
const WITH = 57592
const WITHIN = 57593
const WITHOUT = 57594
const YEAR = 57595
const ZONE = 57596
const NOT_LA = 57597
const WITH_LA = 57598
const POSTFIXOP = 57599
const UMINUS = 57600

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4270

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	277, 21,
	-2, 318,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 289,
	160, 289,
	188, 289,
	275, 289,
	277, 289,
	-2, 299,
	-1, 44,
	1, 292,
	160, 292,
	188, 292,
	275, 292,
	277, 292,
	-2, 298,
	-1, 53,
	1, 21,
	277, 21,
	-2, 318,
	-1, 238,
	1, 138,
	277, 138,
	-2, 789,
	-1, 269,
	135, 328,
	159, 328,
	-2, 295,
	-1, 272,
	135, 327,
	159, 327,
	-2, 293,
	-1, 382,
	135, 327,
	159, 327,
	-2, 296,
	-1, 438,
	274, 734,
	-2, 729,
	-1, 439,
	274, 735,
	-2, 730,
	-1, 445,
	6, 455,
	274, 455,
	-2, 870,
	-1, 467,
	6, 423,
	-2, 847,
	-1, 468,
	6, 451,
	274, 451,
	-2, 848,
	-1, 469,
	6, 431,
	-2, 849,
	-1, 470,
	6, 430,
	-2, 850,
	-1, 471,
	6, 451,
	274, 451,
	-2, 853,
	-1, 472,
	6, 451,
	274, 451,
	-2, 854,
	-1, 473,
	6, 452,
	-2, 857,
	-1, 474,
	6, 418,
	-2, 858,
	-1, 475,
	6, 418,
	-2, 859,
	-1, 476,
	6, 433,
	-2, 862,
	-1, 477,
	6, 419,
	-2, 867,
	-1, 478,
	6, 420,
	-2, 868,
	-1, 479,
	6, 421,
	-2, 869,
	-1, 480,
	6, 418,
	-2, 873,
	-1, 481,
	6, 424,
	-2, 878,
	-1, 482,
	6, 422,
	-2, 880,
	-1, 483,
	6, 449,
	274, 449,
	-2, 881,
	-1, 484,
	6, 453,
	-2, 884,
	-1, 485,
	6, 454,
	-2, 885,
	-1, 486,
	6, 448,
	274, 448,
	-2, 889,
	-1, 744,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	234, 299,
	-2, 557,
	-1, 752,
	274, 714,
	-2, 703,
	-1, 947,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 488,
	-1, 948,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 489,
	-1, 949,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 490,
	-1, 953,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 494,
	-1, 954,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 495,
	-1, 955,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 496,
	-1, 958,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 501,
	-1, 989,
	168, 627,
	-2, 630,
	-1, 1141,
	87, 299,
	121, 299,
	135, 299,
	159, 299,
	163, 299,
	234, 299,
	-2, 376,
	-1, 1149,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 502,
	-1, 1154,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 503,
	-1, 1173,
	168, 626,
	-2, 629,
	-1, 1316,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 504,
	-1, 1321,
	124, 0,
	-2, 514,
	-1, 1330,
	168, 628,
	-2, 631,
	-1, 1370,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 538,
	-1, 1371,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 539,
	-1, 1372,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 540,
	-1, 1376,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 544,
	-1, 1377,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 545,
	-1, 1378,
	12, 0,
	13, 0,
	14, 0,
	257, 0,
	258, 0,
	259, 0,
	-2, 546,
	-1, 1476,
	124, 0,
	-2, 515,
	-1, 1480,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 518,
	-1, 1481,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 520,
	-1, 1563,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 519,
	-1, 1564,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 521,
	-1, 1572,
	124, 0,
	-2, 547,
	-1, 1611,
	124, 0,
	-2, 548,
	-1, 1656,
	30, 0,
	134, 0,
	205, 0,
	255, 0,
	-2, 846,
}

const sqlNprod = 981
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20049

var sqlAct = [...]int{

	986, 1655, 1638, 1517, 1676, 823, 1616, 1639, 1654, 1640,
	886, 1580, 1350, 830, 1539, 437, 1322, 1464, 1440, 436,
	582, 1550, 1441, 1458, 1408, 295, 747, 499, 429, 1452,
	273, 1138, 873, 870, 1293, 278, 31, 1231, 1230, 1002,
	1085, 1137, 895, 1128, 872, 239, 749, 1302, 86, 505,
	1176, 431, 682, 1124, 831, 1041, 1006, 527, 401, 14,
	974, 808, 971, 31, 778, 898, 996, 698, 555, 1323,
	782, 280, 43, 20, 799, 370, 10, 540, 704, 6,
	1090, 487, 508, 510, 411, 402, 865, 65, 896, 31,
	371, 500, 501, 537, 63, 566, 272, 312, 1044, 43,
	317, 67, 283, 310, 66, 313, 875, 68, 315, 385,
	384, 44, 386, 321, 236, 81, 557, 553, 536, 45,
	72, 306, 529, 1556, 828, 43, 1557, 1203, 529, 1219,
	1220, 1221, 824, 1652, 1646, 277, 1538, 890, 999, 1475,
	291, 277, 1136, 298, 281, 702, 322, 1645, 307, 1637,
	890, 706, 1479, 706, 301, 270, 262, 519, 1632, 1169,
	318, 890, 1095, 269, 1613, 1602, 1203, 1479, 1219, 1220,
	1221, 1216, 1607, 1599, 1000, 890, 1538, 1590, 1474, 1565,
	1538, 1560, 1479, 1547, 890, 1537, 1538, 1522, 1538, 1521,
	890, 1502, 890, 285, 1169, 1482, 1478, 1418, 1169, 1479,
	890, 49, 1326, 1284, 705, 1169, 1280, 1001, 998, 1279,
	1216, 1248, 1280, 1246, 1249, 1245, 1169, 1244, 1169, 51,
	1169, 1173, 1171, 1170, 1169, 1383, 891, 1172, 1169, 890,
	796, 534, 1541, 795, 535, 49, 1329, 1108, 797, 1126,
	1110, 1222, 890, 845, 532, 52, 982, 49, 885, 859,
	1175, 502, 47, 51, 396, 503, 1169, 1217, 48, 397,
	676, 675, 547, 1003, 707, 51, 546, 338, 290, 530,
	502, 389, 53, 503, 503, 530, 46, 581, 1653, 52,
	1222, 357, 709, 49, 1651, 1608, 47, 403, 403, 1546,
	1507, 52, 48, 1503, 1495, 1494, 1217, 506, 47, 1489,
	383, 51, 708, 1488, 48, 1487, 1486, 439, 722, 345,
	64, 377, 1218, 1473, 1435, 1398, 494, 1393, 997, 1392,
	382, 498, 827, 1112, 346, 1391, 1581, 52, 1352, 1095,
	1333, 705, 1311, 1292, 1251, 1250, 1238, 1229, 85, 1147,
	1601, 85, 1202, 1199, 1197, 1186, 493, 1180, 85, 1109,
	1056, 1218, 376, 1013, 1012, 85, 85, 979, 46, 85,
	528, 396, 85, 85, 85, 395, 679, 85, 85, 85,
	85, 1582, 320, 755, 1213, 1214, 1215, 374, 1212, 1209,
	1210, 1211, 1204, 1205, 1206, 1207, 1208, 1574, 690, 692,
	85, 1562, 270, 307, 723, 699, 1553, 1203, 321, 321,
	269, 1544, 1536, 1514, 576, 1500, 585, 738, 739, 740,
	741, 742, 1471, 1213, 1214, 1215, 745, 1212, 1209, 1210,
	1211, 1204, 1205, 1206, 1207, 1208, 520, 398, 1434, 1467,
	1561, 322, 322, 678, 1448, 1320, 758, 707, 980, 586,
	1310, 1216, 1290, 1289, 1287, 1263, 1262, 1228, 1194, 724,
	1193, 752, 1185, 1166, 1162, 709, 502, 976, 544, 543,
	503, 783, 786, 1070, 1069, 1051, 1011, 889, 570, 577,
	788, 776, 775, 666, 774, 708, 670, 671, 672, 669,
	673, 773, 772, 771, 1070, 770, 1203, 769, 768, 677,
	767, 766, 707, 765, 686, 764, 688, 763, 687, 762,
	700, 270, 753, 792, 270, 270, 751, 46, 680, 694,
	709, 296, 695, 696, 746, 718, 715, 716, 717, 710,
	711, 712, 713, 714, 793, 405, 791, 1217, 750, 400,
	708, 1203, 1313, 1312, 495, 1558, 780, 781, 351, 85,
	85, 1439, 1096, 369, 802, 1148, 784, 392, 393, 366,
	352, 787, 585, 760, 1453, 824, 1353, 31, 707, 1007,
	779, 1092, 511, 489, 512, 1622, 488, 723, 1665, 85,
	31, 85, 789, 85, 1666, 85, 709, 230, 840, 315,
	57, 826, 1218, 1426, 321, 586, 851, 813, 815, 1589,
	85, 276, 1189, 444, 65, 261, 708, 260, 255, 1104,
	256, 85, 864, 1530, 818, 1529, 43, 1203, 67, 1275,
	1255, 66, 85, 85, 68, 85, 821, 322, 805, 58,
	1254, 491, 724, 853, 1184, 275, 838, 1183, 513, 842,
	585, 318, 846, 848, 849, 839, 843, 852, 801, 841,
	1182, 756, 1181, 1150, 1274, 85, 809, 85, 1212, 1209,
	1210, 1211, 1204, 1205, 1206, 1207, 1208, 320, 320, 963,
	844, 264, 349, 586, 820, 584, 85, 277, 85, 85,
	85, 85, 819, 85, 1588, 373, 937, 1470, 961, 1265,
	1624, 85, 973, 523, 1003, 847, 1673, 85, 718, 715,
	716, 717, 710, 711, 712, 713, 714, 350, 973, 812,
	1203, 529, 1086, 801, 490, 85, 403, 267, 85, 800,
	892, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 1583, 1665, 1519, 883, 884, 1217, 274, 59,
	441, 1204, 1205, 1206, 1207, 1208, 1027, 1159, 1203, 712,
	713, 714, 868, 1084, 936, 1007, 517, 977, 1157, 906,
	962, 516, 1203, 1414, 60, 1014, 867, 1025, 869, 1035,
	1037, 1042, 1045, 1046, 1047, 791, 811, 900, 1105, 1103,
	791, 348, 959, 777, 1570, 585, 514, 1634, 1206, 1207,
	1208, 893, 1218, 1415, 743, 1055, 506, 987, 1192, 1266,
	372, 55, 1303, 1635, 1679, 85, 277, 61, 388, 341,
	343, 584, 1272, 710, 711, 712, 713, 714, 586, 85,
	1155, 1672, 1641, 85, 1160, 1087, 85, 85, 978, 1642,
	1217, 85, 1664, 85, 85, 810, 85, 1065, 1342, 85,
	85, 85, 1662, 320, 56, 1059, 85, 85, 530, 983,
	988, 1451, 991, 960, 265, 1339, 1524, 1089, 906, 1209,
	1210, 1211, 1204, 1205, 1206, 1207, 1208, 1036, 1410, 347,
	1411, 1152, 268, 1048, 1049, 1050, 1067, 798, 1217, 879,
	511, 1060, 512, 367, 855, 1218, 699, 972, 1340, 584,
	857, 1520, 1217, 1413, 1003, 1131, 1156, 1098, 1643, 1671,
	1416, 1080, 511, 1158, 512, 858, 1523, 360, 321, 1094,
	1134, 62, 1677, 856, 693, 387, 1097, 339, 1512, 337,
	1301, 348, 1017, 1100, 1113, 31, 1132, 1102, 1106, 1111,
	1107, 1099, 1257, 1218, 1644, 368, 1498, 1101, 1379, 388,
	1064, 322, 1143, 552, 1003, 1465, 513, 1218, 54, 1119,
	880, 1678, 1412, 1117, 1211, 1204, 1205, 1206, 1207, 1208,
	1149, 43, 1422, 1121, 1154, 1142, 1120, 1680, 513, 1122,
	1425, 1686, 685, 1146, 550, 681, 85, 1424, 1617, 1338,
	387, 674, 548, 1168, 1133, 551, 1513, 85, 85, 1072,
	784, 1020, 787, 1177, 424, 999, 1466, 781, 780, 1212,
	1209, 1210, 1211, 1204, 1205, 1206, 1207, 1208, 1190, 1380,
	1071, 305, 1195, 1499, 85, 1381, 85, 1204, 1205, 1206,
	1207, 1208, 1174, 1153, 1151, 83, 1461, 1021, 240, 1298,
	1297, 1000, 1127, 745, 347, 83, 275, 1421, 379, 1042,
	1042, 1042, 284, 284, 584, 1294, 294, 1081, 1685, 294,
	300, 294, 1423, 1125, 294, 308, 294, 240, 1010, 1253,
	1022, 1019, 1188, 1573, 1001, 998, 1497, 1232, 1319, 509,
	1260, 1198, 1161, 1405, 1131, 1165, 850, 340, 365, 1167,
	363, 362, 361, 358, 304, 1233, 761, 403, 668, 1134,
	1009, 1270, 1178, 1179, 1235, 1236, 1237, 506, 1268, 1129,
	1281, 1256, 1115, 881, 514, 1132, 85, 85, 85, 1252,
	878, 533, 85, 531, 526, 85, 1023, 518, 515, 1130,
	1003, 85, 85, 85, 85, 85, 514, 85, 85, 1277,
	1259, 1227, 1347, 1460, 1269, 85, 1271, 85, 1531, 390,
	887, 288, 1240, 85, 1666, 1276, 1283, 354, 572, 1315,
	1282, 1316, 85, 85, 801, 1286, 1273, 1307, 85, 1533,
	816, 817, 1321, 1133, 1278, 1288, 3, 320, 707, 1296,
	1331, 1018, 1299, 707, 1300, 997, 1331, 1306, 1541, 1585,
	1304, 1305, 801, 1610, 85, 585, 85, 85, 814, 85,
	1348, 709, 254, 888, 1295, 69, 394, 1603, 85, 1357,
	829, 391, 1359, 289, 701, 85, 708, 85, 1335, 1336,
	1337, 708, 1459, 545, 906, 1145, 1261, 355, 586, 1332,
	297, 1683, 1341, 1343, 1344, 80, 240, 240, 1684, 1203,
	257, 258, 707, 1388, 1389, 860, 1472, 1399, 861, 1358,
	1345, 1314, 1395, 1396, 1397, 1354, 1247, 1054, 906, 1053,
	1052, 1004, 70, 862, 1484, 906, 83, 1346, 294, 863,
	240, 754, 380, 263, 1518, 1327, 1356, 71, 1386, 667,
	1387, 925, 359, 1360, 924, 1491, 1633, 284, 1191, 1569,
	1549, 1008, 759, 25, 1443, 417, 906, 1400, 294, 1404,
	1406, 1258, 73, 1028, 874, 1454, 587, 573, 562, 294,
	294, 905, 524, 1446, 1390, 440, 1446, 1445, 364, 1450,
	1445, 556, 78, 565, 1016, 31, 1447, 74, 492, 1447,
	1476, 442, 1438, 1449, 903, 1480, 1481, 1384, 412, 927,
	1483, 443, 541, 904, 541, 1485, 75, 1477, 1394, 1436,
	1456, 1457, 785, 1469, 1462, 430, 901, 316, 832, 1005,
	1490, 77, 1187, 240, 1493, 541, 240, 240, 240, 757,
	240, 416, 422, 421, 984, 413, 1463, 1135, 83, 344,
	925, 234, 906, 924, 684, 235, 1088, 1433, 85, 825,
	292, 882, 689, 292, 1501, 303, 1267, 266, 292, 1200,
	303, 1034, 284, 1026, 1455, 703, 1496, 1024, 1015, 375,
	905, 504, 833, 85, 356, 894, 1144, 399, 1419, 1420,
	697, 287, 926, 286, 871, 1127, 85, 353, 85, 549,
	85, 854, 521, 85, 259, 1525, 1584, 1264, 927, 1621,
	1508, 50, 19, 76, 85, 17, 16, 85, 1509, 15,
	13, 12, 11, 85, 584, 1543, 18, 85, 902, 85,
	1446, 1118, 9, 1532, 1445, 1511, 1468, 1131, 1542, 8,
	7, 1554, 24, 1447, 1446, 1534, 23, 1545, 1445, 1540,
	22, 79, 1134, 5, 4, 1563, 1564, 1447, 906, 2,
	1, 1552, 1129, 0, 0, 1527, 1528, 0, 1132, 0,
	0, 0, 294, 0, 0, 0, 1526, 1028, 1028, 0,
	85, 0, 1130, 0, 1555, 1577, 806, 0, 0, 0,
	294, 926, 0, 294, 822, 1579, 1568, 1575, 294, 0,
	836, 837, 0, 294, 0, 0, 294, 240, 240, 0,
	0, 906, 0, 541, 703, 1578, 0, 506, 0, 0,
	0, 1592, 0, 0, 0, 0, 1133, 902, 0, 1566,
	1594, 1600, 906, 1596, 1446, 1028, 1028, 1028, 1445, 0,
	0, 1593, 85, 85, 85, 0, 0, 1447, 791, 0,
	85, 85, 0, 0, 1605, 0, 85, 707, 85, 1606,
	85, 85, 85, 85, 1414, 0, 1409, 1595, 85, 0,
	0, 1612, 292, 0, 1407, 709, 1625, 85, 0, 0,
	1609, 0, 0, 1628, 0, 85, 85, 585, 0, 85,
	0, 0, 1626, 1559, 1415, 708, 1631, 1446, 85, 85,
	1629, 1445, 496, 1648, 1630, 0, 906, 0, 0, 1627,
	1447, 1623, 1647, 292, 522, 1659, 1659, 1650, 1649, 0,
	586, 0, 0, 1598, 1660, 0, 0, 0, 1663, 1661,
	0, 0, 0, 0, 1667, 1668, 1669, 1659, 1670, 0,
	85, 0, 0, 866, 0, 0, 0, 0, 0, 0,
	1682, 1681, 0, 0, 294, 806, 0, 1028, 1028, 0,
	0, 0, 0, 0, 1659, 1687, 0, 0, 0, 1410,
	0, 1411, 0, 0, 0, 0, 0, 0, 0, 1604,
	0, 294, 0, 240, 0, 0, 0, 723, 0, 1636,
	0, 0, 0, 85, 1413, 85, 0, 85, 1163, 1164,
	0, 1416, 0, 0, 85, 0, 925, 1618, 1619, 924,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 0, 1028,
	0, 575, 563, 574, 0, 568, 905, 0, 0, 85,
	925, 85, 724, 924, 0, 0, 0, 925, 0, 85,
	924, 0, 0, 1412, 0, 85, 1224, 1225, 1226, 0,
	0, 0, 0, 0, 927, 0, 0, 0, 0, 0,
	905, 0, 0, 294, 1062, 1063, 0, 905, 925, 806,
	0, 924, 1068, 0, 0, 0, 0, 0, 1073, 1074,
	1076, 1078, 1079, 0, 1082, 1083, 0, 0, 927, 0,
	0, 0, 294, 578, 1093, 927, 790, 0, 905, 0,
	294, 717, 710, 711, 712, 713, 714, 85, 85, 866,
	541, 85, 0, 0, 292, 866, 0, 303, 0, 85,
	0, 969, 834, 0, 0, 0, 927, 303, 0, 0,
	303, 85, 967, 0, 0, 0, 584, 926, 0, 580,
	0, 684, 0, 240, 294, 73, 1116, 0, 0, 0,
	0, 0, 0, 579, 925, 1123, 0, 924, 0, 85,
	85, 85, 1140, 85, 294, 78, 0, 0, 1317, 1318,
	74, 926, 0, 902, 0, 0, 0, 0, 926, 0,
	85, 0, 0, 0, 905, 0, 0, 0, 0, 75,
	0, 0, 965, 0, 964, 0, 0, 0, 970, 0,
	0, 0, 85, 0, 77, 0, 0, 902, 0, 926,
	0, 1028, 927, 0, 902, 418, 32, 0, 0, 0,
	0, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
	1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 0,
	1382, 0, 0, 32, 0, 902, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 271,
	925, 0, 279, 924, 709, 0, 0, 0, 0, 32,
	966, 0, 0, 0, 0, 21, 0, 968, 292, 0,
	279, 0, 569, 564, 708, 35, 76, 0, 0, 0,
	905, 0, 0, 1028, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 0, 0, 37, 0,
	0, 0, 0, 925, 42, 0, 924, 0, 927, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 902, 0, 0, 925, 703, 0, 924, 0, 26,
	0, 38, 0, 905, 0, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	294, 0, 0, 0, 905, 0, 0, 0, 0, 1028,
	0, 927, 0, 1285, 0, 806, 723, 684, 0, 0,
	1291, 0, 0, 0, 0, 1203, 0, 1219, 1220, 1221,
	0, 294, 927, 0, 294, 0, 0, 1061, 0, 0,
	1140, 926, 707, 0, 1309, 0, 1140, 0, 925, 0,
	0, 924, 0, 0, 0, 0, 0, 0, 0, 0,
	709, 0, 0, 0, 0, 0, 1091, 0, 0, 1216,
	0, 724, 1515, 0, 1091, 0, 0, 902, 905, 0,
	708, 0, 40, 0, 0, 29, 0, 39, 0, 0,
	0, 0, 30, 0, 926, 49, 0, 1351, 0, 33,
	34, 0, 0, 0, 0, 0, 927, 36, 0, 0,
	0, 0, 0, 51, 0, 926, 0, 0, 1114, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	902, 0, 0, 0, 0, 0, 271, 0, 292, 52,
	0, 710, 711, 712, 713, 714, 47, 0, 0, 0,
	0, 902, 48, 0, 1572, 1217, 0, 0, 0, 1402,
	1403, 806, 0, 0, 0, 0, 0, 703, 703, 0,
	46, 0, 723, 1427, 0, 1428, 0, 294, 1430, 1431,
	1432, 0, 0, 0, 0, 294, 0, 0, 0, 926,
	0, 0, 1442, 242, 806, 1442, 0, 0, 0, 0,
	0, 0, 294, 294, 0, 0, 294, 253, 0, 0,
	1218, 0, 0, 0, 0, 703, 1140, 707, 0, 725,
	726, 727, 0, 0, 0, 902, 0, 724, 0, 728,
	1611, 0, 0, 0, 0, 709, 0, 734, 0, 0,
	244, 0, 0, 0, 0, 271, 0, 0, 271, 271,
	0, 0, 0, 0, 0, 708, 0, 1492, 0, 243,
	245, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 744, 1213, 1214, 1215, 748, 1212, 1209, 1210, 1211,
	1204, 1205, 1206, 1207, 1208, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 715, 716, 717, 710, 711, 712,
	713, 714, 247, 248, 0, 0, 0, 0, 0, 0,
	806, 0, 1510, 0, 240, 0, 0, 249, 0, 735,
	0, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 834, 0, 0, 0, 0, 1442,
	0, 730, 0, 0, 0, 0, 0, 723, 0, 0,
	0, 0, 0, 1442, 0, 0, 294, 0, 1551, 0,
	0, 0, 0, 0, 0, 292, 294, 0, 292, 729,
	0, 0, 703, 0, 0, 0, 0, 32, 0, 707,
	0, 725, 726, 727, 0, 0, 0, 0, 0, 0,
	32, 728, 0, 0, 0, 0, 0, 709, 0, 734,
	0, 0, 724, 0, 0, 0, 0, 250, 0, 0,
	251, 0, 732, 0, 0, 252, 0, 708, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1586, 1587, 0, 0, 1591, 0,
	0, 0, 0, 1442, 0, 0, 240, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 703, 0,
	0, 0, 731, 0, 719, 720, 721, 0, 718, 715,
	716, 717, 710, 711, 712, 713, 714, 0, 0, 0,
	1057, 735, 0, 0, 0, 0, 703, 703, 294, 1058,
	240, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 1442, 1551, 0, 723,
	0, 1429, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	0, 729, 0, 0, 0, 0, 292, 292, 0, 707,
	292, 725, 726, 727, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 0, 709, 707, 734,
	0, 0, 897, 0, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 709, 708, 734, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 1203, 708, 1219, 1220, 1221,
	0, 0, 722, 0, 0, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1203, 0, 1219,
	1220, 1221, 0, 0, 731, 0, 719, 720, 721, 1324,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 1216,
	0, 735, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 733, 0, 1516, 0, 0, 0, 0,
	735, 1216, 0, 730, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 279, 0, 0, 0, 0, 723, 0,
	1548, 729, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 1222,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 1217, 0, 0, 0, 0,
	0, 1222, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 32, 0, 1217, 0, 0,
	0, 0, 0, 732, 0, 1141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1218, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 0,
	0, 0, 1218, 731, 0, 0, 0, 1243, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 975, 0,
	0, 0, 1620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1213, 1214, 1215, 0, 1212, 1209, 1210, 1211,
	1204, 1205, 1206, 1207, 1208, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 1213, 1214, 1215, 0, 1212, 1209,
	1210, 1211, 1204, 1205, 1206, 1207, 1208, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 438,
	426, 427, 428, 425, 414, 0, 0, 0, 0, 0,
	0, 87, 88, 993, 89, 0, 0, 0, 0, 420,
	0, 0, 0, 90, 91, 186, 467, 468, 92, 469,
	470, 0, 93, 191, 192, 94, 435, 453, 471, 472,
	195, 0, 463, 0, 446, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 325, 100, 101, 0, 447, 449,
	0, 448, 450, 102, 103, 104, 105, 473, 106, 474,
	475, 0, 0, 107, 0, 994, 0, 466, 109, 0,
	0, 0, 0, 419, 110, 454, 433, 0, 111, 112,
	476, 113, 897, 114, 0, 897, 326, 0, 115, 464,
	0, 204, 0, 116, 117, 460, 462, 0, 0, 118,
	0, 327, 119, 477, 478, 479, 0, 445, 0, 328,
	120, 329, 121, 122, 0, 0, 465, 330, 123, 331,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 332, 131, 132, 135, 133, 409, 134, 434, 461,
	136, 480, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 333, 140, 334, 455, 141, 142, 0, 456, 143,
	217, 0, 144, 145, 146, 481, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 335, 154, 155, 423, 156,
	0, 241, 157, 158, 0, 159, 160, 451, 161, 162,
	336, 163, 482, 164, 0, 165, 166, 168, 483, 167,
	457, 0, 0, 169, 170, 0, 223, 484, 485, 0,
	0, 171, 458, 459, 432, 172, 173, 174, 175, 0,
	0, 176, 177, 452, 0, 178, 179, 180, 228, 486,
	992, 181, 0, 0, 0, 32, 182, 183, 184, 185,
	410, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	406, 407, 995, 897, 897, 0, 408, 897, 0, 415,
	990, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1535, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	583, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	0, 0, 87, 88, 588, 89, 589, 590, 591, 592,
	593, 594, 595, 596, 90, 91, 186, 187, 188, 92,
	189, 190, 597, 93, 191, 192, 94, 598, 599, 193,
	194, 195, 600, 196, 601, 324, 602, 95, 96, 97,
	0, 98, 603, 99, 604, 325, 100, 101, 605, 606,
	607, 608, 609, 610, 102, 103, 104, 105, 197, 106,
	198, 199, 611, 612, 107, 613, 614, 615, 108, 109,
	616, 617, 744, 618, 200, 110, 201, 619, 620, 111,
	112, 202, 113, 621, 114, 622, 623, 326, 624, 115,
	203, 625, 204, 626, 116, 117, 205, 206, 627, 628,
	118, 629, 327, 119, 207, 208, 209, 630, 210, 631,
	328, 120, 329, 121, 122, 632, 633, 211, 330, 123,
	331, 634, 124, 635, 636, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 637, 134, 638,
	212, 136, 213, 137, 138, 639, 640, 641, 642, 643,
	139, 214, 333, 140, 334, 215, 141, 142, 644, 216,
	143, 217, 645, 144, 145, 146, 218, 147, 148, 646,
	150, 151, 149, 152, 647, 153, 335, 154, 155, 219,
	156, 0, 241, 157, 158, 648, 159, 160, 649, 161,
	162, 336, 163, 220, 164, 650, 165, 166, 168, 221,
	167, 222, 651, 652, 169, 170, 653, 223, 224, 225,
	654, 655, 171, 226, 227, 656, 172, 173, 174, 175,
	657, 658, 176, 177, 659, 660, 178, 179, 180, 228,
	229, 661, 181, 662, 663, 664, 665, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 583, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1308, 87, 88, 588,
	89, 589, 590, 591, 592, 593, 594, 595, 596, 90,
	91, 186, 187, 188, 92, 189, 190, 597, 93, 191,
	192, 94, 598, 599, 193, 194, 195, 600, 196, 601,
	324, 602, 95, 96, 97, 0, 98, 603, 99, 604,
	325, 100, 101, 605, 606, 607, 608, 609, 610, 102,
	103, 104, 105, 197, 106, 198, 199, 611, 612, 107,
	613, 614, 615, 108, 109, 616, 617, 0, 618, 200,
	110, 201, 619, 620, 111, 112, 202, 113, 621, 114,
	622, 623, 326, 624, 115, 203, 625, 204, 626, 116,
	117, 205, 206, 627, 628, 118, 629, 327, 119, 207,
	208, 209, 630, 210, 631, 328, 120, 329, 121, 122,
	632, 633, 211, 330, 123, 331, 634, 124, 635, 636,
	125, 0, 126, 127, 128, 129, 130, 332, 131, 132,
	135, 133, 637, 134, 638, 212, 136, 213, 137, 138,
	639, 640, 641, 642, 643, 139, 214, 333, 140, 334,
	215, 141, 142, 644, 216, 143, 217, 645, 144, 145,
	146, 218, 147, 148, 646, 150, 151, 149, 152, 647,
	153, 335, 154, 155, 219, 156, 0, 241, 157, 158,
	648, 159, 160, 649, 161, 162, 336, 163, 220, 164,
	650, 165, 166, 168, 221, 167, 222, 651, 652, 169,
	170, 653, 223, 224, 225, 654, 655, 171, 226, 227,
	656, 172, 173, 174, 175, 657, 658, 176, 177, 659,
	660, 178, 179, 180, 228, 229, 661, 181, 662, 663,
	664, 665, 182, 183, 184, 185, 0, 583, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 794, 87,
	88, 588, 89, 589, 590, 591, 592, 593, 594, 595,
	596, 90, 91, 186, 187, 188, 92, 189, 190, 597,
	93, 191, 192, 94, 598, 599, 193, 194, 195, 600,
	196, 601, 324, 602, 95, 96, 97, 0, 98, 603,
	99, 604, 325, 100, 101, 605, 606, 607, 608, 609,
	610, 102, 103, 104, 105, 197, 106, 198, 199, 611,
	612, 107, 613, 614, 615, 108, 109, 616, 617, 0,
	618, 200, 110, 201, 619, 620, 111, 112, 202, 113,
	621, 114, 622, 623, 326, 624, 115, 203, 625, 204,
	626, 116, 117, 205, 206, 627, 628, 118, 629, 327,
	119, 207, 208, 209, 630, 210, 631, 328, 120, 329,
	121, 122, 632, 633, 211, 330, 123, 331, 634, 124,
	635, 636, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 637, 134, 638, 212, 136, 213,
	137, 138, 639, 640, 641, 642, 643, 139, 214, 333,
	140, 334, 215, 141, 142, 644, 216, 143, 217, 645,
	144, 145, 146, 218, 147, 148, 646, 150, 151, 149,
	152, 647, 153, 335, 154, 155, 219, 156, 0, 241,
	157, 158, 648, 159, 160, 649, 161, 162, 336, 163,
	220, 164, 650, 165, 166, 168, 221, 167, 222, 651,
	652, 169, 170, 653, 223, 224, 225, 654, 655, 171,
	226, 227, 656, 172, 173, 174, 175, 657, 658, 176,
	177, 659, 660, 178, 179, 180, 228, 229, 661, 181,
	662, 663, 664, 665, 182, 183, 184, 185, 438, 426,
	427, 428, 425, 414, 0, 0, 0, 0, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 420, 0,
	0, 0, 90, 91, 186, 467, 468, 92, 469, 470,
	0, 93, 191, 192, 94, 435, 453, 471, 472, 195,
	0, 463, 0, 446, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 325, 100, 101, 0, 447, 449, 0,
	448, 450, 102, 103, 104, 105, 473, 106, 474, 475,
	507, 0, 107, 0, 0, 0, 466, 109, 0, 0,
	0, 0, 419, 110, 454, 433, 0, 111, 112, 476,
	113, 0, 114, 0, 0, 326, 0, 115, 464, 0,
	204, 0, 116, 117, 460, 462, 0, 0, 118, 0,
	327, 119, 477, 478, 479, 0, 445, 0, 328, 120,
	329, 121, 122, 0, 0, 465, 330, 123, 331, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	332, 131, 132, 135, 133, 409, 134, 434, 461, 136,
	480, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	333, 140, 334, 455, 141, 142, 0, 456, 143, 217,
	0, 144, 145, 146, 481, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 335, 154, 155, 423, 156, 0,
	241, 157, 158, 49, 159, 160, 451, 161, 162, 336,
	163, 482, 164, 0, 165, 166, 168, 483, 167, 457,
	0, 51, 169, 170, 0, 223, 484, 485, 0, 0,
	171, 458, 459, 432, 172, 173, 174, 175, 0, 0,
	176, 177, 452, 0, 178, 179, 180, 323, 486, 0,
	181, 0, 0, 0, 47, 182, 183, 184, 185, 410,
	48, 438, 426, 427, 428, 425, 414, 0, 0, 406,
	407, 0, 0, 87, 88, 408, 89, 0, 415, 0,
	0, 420, 0, 0, 0, 90, 91, 186, 467, 468,
	92, 469, 470, 0, 93, 191, 192, 94, 435, 453,
	471, 472, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 473,
	106, 474, 475, 0, 0, 107, 0, 0, 0, 466,
	109, 0, 0, 0, 0, 419, 110, 454, 433, 0,
	111, 112, 476, 113, 0, 114, 0, 0, 326, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 327, 119, 477, 478, 479, 0, 445,
	0, 328, 120, 329, 121, 122, 0, 0, 465, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 409, 134,
	434, 461, 136, 480, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 481, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	423, 156, 0, 241, 157, 158, 49, 159, 160, 451,
	161, 162, 336, 163, 482, 164, 0, 165, 166, 168,
	483, 167, 457, 0, 51, 169, 170, 0, 223, 484,
	485, 0, 0, 171, 458, 459, 432, 172, 173, 174,
	175, 0, 0, 176, 177, 452, 0, 178, 179, 180,
	323, 486, 0, 181, 0, 0, 0, 47, 182, 183,
	184, 185, 410, 48, 438, 426, 427, 428, 425, 414,
	0, 0, 406, 407, 0, 0, 87, 88, 408, 89,
	0, 415, 0, 0, 420, 0, 0, 0, 90, 91,
	186, 467, 468, 92, 469, 470, 1038, 93, 191, 192,
	94, 435, 453, 471, 472, 195, 0, 463, 0, 446,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 325,
	100, 101, 0, 447, 449, 0, 448, 450, 102, 103,
	104, 105, 473, 106, 474, 475, 0, 0, 107, 0,
	0, 0, 466, 109, 0, 0, 0, 0, 419, 110,
	454, 433, 0, 111, 112, 476, 113, 0, 114, 0,
	1043, 326, 0, 115, 464, 0, 204, 0, 116, 117,
	460, 462, 0, 0, 118, 0, 327, 119, 477, 478,
	479, 0, 445, 0, 328, 120, 329, 121, 122, 0,
	1039, 465, 330, 123, 331, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 332, 131, 132, 135,
	133, 409, 134, 434, 461, 136, 480, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 333, 140, 334, 455,
	141, 142, 0, 456, 143, 217, 0, 144, 145, 146,
	481, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	335, 154, 155, 423, 156, 0, 241, 157, 158, 0,
	159, 160, 451, 161, 162, 336, 163, 482, 164, 0,
	165, 166, 168, 483, 167, 457, 0, 0, 169, 170,
	0, 223, 484, 485, 0, 1040, 171, 458, 459, 432,
	172, 173, 174, 175, 0, 0, 176, 177, 452, 0,
	178, 179, 180, 228, 486, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 410, 0, 438, 426, 427,
	428, 425, 414, 0, 0, 406, 407, 0, 0, 87,
	88, 408, 89, 0, 415, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 483, 167, 457, 0,
	0, 169, 170, 0, 223, 484, 485, 0, 0, 171,
	458, 459, 432, 172, 173, 174, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 486, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	0, 0, 87, 88, 408, 89, 0, 415, 1385, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 483,
	167, 457, 0, 0, 169, 170, 0, 223, 484, 485,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	486, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 1328, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 325, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	326, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 327, 119, 477, 478, 479,
	0, 445, 0, 328, 120, 329, 121, 122, 0, 0,
	465, 330, 123, 331, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 332, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 333, 140, 334, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 335,
	154, 155, 423, 156, 0, 241, 157, 158, 0, 159,
	160, 451, 161, 162, 336, 163, 482, 164, 0, 165,
	166, 168, 483, 167, 457, 0, 0, 169, 170, 0,
	223, 484, 485, 0, 0, 171, 458, 459, 432, 172,
	173, 174, 175, 0, 0, 176, 177, 452, 0, 178,
	179, 180, 228, 486, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 410, 0, 438, 426, 427, 428,
	425, 414, 0, 0, 406, 407, 0, 0, 87, 88,
	408, 89, 0, 415, 989, 0, 420, 0, 0, 0,
	90, 91, 186, 467, 468, 92, 469, 470, 0, 93,
	191, 192, 94, 435, 453, 471, 472, 195, 0, 463,
	0, 446, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 325, 100, 101, 0, 447, 449, 0, 448, 450,
	102, 103, 104, 105, 473, 106, 474, 475, 0, 0,
	107, 0, 0, 0, 466, 109, 0, 0, 0, 0,
	419, 110, 454, 433, 0, 111, 112, 476, 113, 0,
	114, 0, 0, 326, 0, 115, 464, 0, 204, 0,
	116, 117, 460, 462, 0, 0, 118, 0, 327, 119,
	477, 478, 479, 0, 445, 0, 328, 120, 329, 121,
	122, 0, 0, 465, 330, 123, 331, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 332, 131,
	132, 135, 133, 409, 134, 434, 461, 136, 480, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 333, 140,
	334, 455, 141, 142, 0, 456, 143, 217, 0, 144,
	145, 146, 481, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 335, 154, 155, 423, 156, 0, 241, 157,
	158, 0, 159, 160, 451, 161, 162, 336, 163, 482,
	164, 0, 165, 166, 168, 483, 167, 457, 0, 0,
	169, 170, 0, 223, 484, 485, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 228, 486, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 0,
	0, 0, 0, 408, 750, 985, 415, 438, 426, 427,
	428, 425, 414, 0, 0, 0, 0, 0, 0, 87,
	88, 0, 89, 0, 0, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 483, 167, 457, 0,
	0, 169, 170, 0, 223, 484, 485, 0, 0, 171,
	458, 459, 432, 172, 173, 174, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 486, 1334, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	0, 0, 87, 88, 408, 89, 0, 415, 0, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 101, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 507, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 483,
	167, 457, 0, 0, 169, 170, 0, 223, 484, 485,
	0, 0, 171, 458, 459, 432, 172, 173, 174, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	486, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 186,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 325, 100,
	101, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	326, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 327, 119, 477, 478, 479,
	0, 445, 0, 328, 120, 329, 121, 122, 0, 0,
	465, 330, 123, 331, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 332, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 333, 140, 334, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 335,
	154, 155, 423, 156, 0, 241, 157, 158, 0, 159,
	160, 451, 161, 162, 336, 163, 482, 164, 0, 165,
	166, 168, 483, 167, 457, 0, 0, 169, 170, 0,
	223, 484, 485, 0, 0, 171, 458, 459, 432, 172,
	173, 174, 175, 0, 0, 176, 177, 452, 0, 178,
	179, 180, 228, 486, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 410, 0, 438, 426, 427, 428,
	425, 414, 0, 0, 406, 407, 404, 0, 87, 88,
	408, 89, 0, 415, 0, 0, 420, 0, 0, 0,
	90, 91, 186, 467, 468, 92, 469, 470, 0, 93,
	191, 192, 94, 435, 453, 471, 472, 195, 0, 463,
	0, 446, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 325, 100, 101, 0, 447, 449, 0, 448, 450,
	102, 103, 104, 105, 473, 106, 474, 475, 0, 0,
	107, 0, 0, 0, 466, 109, 0, 0, 0, 0,
	419, 110, 454, 433, 0, 111, 112, 476, 113, 0,
	114, 0, 1043, 326, 0, 115, 464, 0, 204, 0,
	116, 117, 460, 462, 0, 0, 118, 0, 327, 119,
	477, 478, 479, 0, 445, 0, 328, 120, 329, 121,
	122, 0, 0, 465, 330, 123, 331, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 332, 131,
	132, 135, 133, 409, 134, 434, 461, 136, 480, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 333, 140,
	334, 455, 141, 142, 0, 456, 143, 217, 0, 144,
	145, 146, 481, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 335, 154, 155, 423, 156, 0, 241, 157,
	158, 0, 159, 160, 451, 161, 162, 336, 163, 482,
	164, 0, 165, 166, 168, 483, 167, 457, 0, 0,
	169, 170, 0, 223, 484, 485, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 228, 486, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 406, 407, 0,
	0, 0, 0, 408, 0, 0, 415, 438, 426, 427,
	428, 425, 414, 0, 0, 0, 0, 0, 0, 87,
	88, 691, 89, 0, 0, 0, 0, 420, 0, 0,
	0, 90, 91, 186, 467, 468, 92, 469, 470, 0,
	93, 191, 192, 94, 435, 453, 471, 472, 195, 0,
	463, 0, 446, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 447, 449, 0, 448,
	450, 102, 103, 104, 105, 473, 106, 474, 475, 0,
	0, 107, 0, 0, 0, 466, 109, 0, 0, 0,
	0, 419, 110, 454, 433, 0, 111, 112, 476, 113,
	0, 114, 0, 0, 326, 0, 115, 464, 0, 204,
	0, 116, 117, 460, 462, 0, 0, 118, 0, 327,
	119, 477, 478, 479, 0, 445, 0, 328, 120, 329,
	121, 122, 0, 0, 465, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 409, 134, 434, 461, 136, 480,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 455, 141, 142, 0, 456, 143, 217, 0,
	144, 145, 146, 481, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 423, 156, 0, 241,
	157, 158, 0, 159, 160, 451, 161, 162, 336, 163,
	482, 164, 0, 165, 166, 168, 483, 167, 457, 0,
	0, 169, 170, 0, 223, 484, 485, 0, 0, 171,
	458, 459, 432, 172, 173, 174, 175, 0, 0, 176,
	177, 452, 0, 178, 179, 180, 228, 486, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 410, 0,
	438, 426, 427, 428, 425, 414, 0, 0, 406, 407,
	0, 0, 87, 88, 408, 89, 0, 415, 0, 0,
	420, 0, 0, 0, 90, 91, 186, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 1658, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	328, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	331, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 336, 163, 482, 164, 0, 165, 166, 168, 483,
	167, 457, 0, 0, 169, 170, 0, 223, 484, 485,
	0, 0, 171, 458, 459, 432, 172, 173, 1657, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	486, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 410, 0, 438, 426, 427, 428, 425, 414, 0,
	0, 406, 407, 0, 0, 87, 88, 408, 89, 0,
	415, 0, 0, 420, 0, 0, 0, 90, 91, 1656,
	467, 468, 92, 469, 470, 0, 93, 191, 192, 94,
	435, 453, 471, 472, 195, 0, 463, 0, 446, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 325, 100,
	1658, 0, 447, 449, 0, 448, 450, 102, 103, 104,
	105, 473, 106, 474, 475, 0, 0, 107, 0, 0,
	0, 466, 109, 0, 0, 0, 0, 419, 110, 454,
	433, 0, 111, 112, 476, 113, 0, 114, 0, 0,
	326, 0, 115, 464, 0, 204, 0, 116, 117, 460,
	462, 0, 0, 118, 0, 327, 119, 477, 478, 479,
	0, 445, 0, 328, 120, 329, 121, 122, 0, 0,
	465, 330, 123, 331, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 332, 131, 132, 135, 133,
	409, 134, 434, 461, 136, 480, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 333, 140, 334, 455, 141,
	142, 0, 456, 143, 217, 0, 144, 145, 146, 481,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 335,
	154, 155, 423, 156, 0, 241, 157, 158, 0, 159,
	160, 451, 161, 162, 336, 163, 482, 164, 0, 165,
	166, 168, 483, 167, 457, 0, 0, 169, 170, 0,
	223, 484, 485, 0, 0, 171, 458, 459, 432, 172,
	173, 1657, 175, 0, 0, 176, 177, 452, 0, 178,
	179, 180, 228, 486, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 410, 0, 438, 426, 427, 428,
	425, 414, 0, 0, 406, 407, 0, 0, 87, 88,
	408, 89, 0, 415, 0, 0, 420, 0, 0, 0,
	90, 91, 186, 467, 468, 92, 469, 470, 0, 93,
	191, 192, 94, 435, 453, 471, 472, 195, 0, 463,
	0, 446, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 325, 100, 101, 0, 447, 449, 0, 448, 450,
	102, 103, 104, 105, 473, 106, 474, 475, 0, 0,
	107, 0, 0, 0, 466, 109, 0, 0, 0, 0,
	419, 110, 454, 433, 0, 111, 112, 476, 113, 0,
	114, 0, 0, 326, 0, 115, 464, 0, 204, 0,
	116, 117, 460, 462, 0, 0, 118, 0, 327, 119,
	477, 478, 479, 0, 445, 0, 328, 120, 329, 121,
	122, 0, 0, 465, 330, 123, 331, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 332, 131,
	132, 135, 133, 409, 134, 434, 461, 136, 480, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 333, 140,
	334, 455, 141, 142, 0, 456, 143, 217, 0, 144,
	145, 146, 481, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 335, 154, 155, 423, 156, 0, 241, 157,
	158, 0, 159, 160, 451, 161, 162, 336, 163, 482,
	164, 0, 165, 166, 168, 483, 167, 457, 0, 0,
	169, 170, 0, 223, 484, 485, 0, 0, 171, 458,
	459, 432, 172, 173, 174, 175, 0, 0, 176, 177,
	452, 0, 178, 179, 180, 228, 486, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 410, 0, 438,
	426, 427, 428, 425, 414, 0, 0, 406, 407, 0,
	0, 87, 88, 408, 89, 0, 415, 0, 0, 420,
	0, 0, 0, 90, 91, 186, 467, 468, 92, 469,
	470, 0, 93, 191, 192, 94, 435, 453, 471, 472,
	195, 0, 463, 0, 446, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 325, 100, 101, 0, 447, 449,
	0, 448, 450, 102, 103, 104, 105, 473, 106, 474,
	475, 0, 0, 107, 0, 0, 0, 466, 109, 0,
	0, 0, 0, 419, 110, 454, 433, 0, 111, 112,
	476, 113, 0, 114, 0, 0, 326, 0, 115, 464,
	0, 204, 0, 116, 117, 460, 462, 0, 0, 118,
	0, 327, 119, 477, 478, 479, 0, 445, 0, 328,
	120, 329, 121, 122, 0, 0, 465, 330, 123, 331,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 332, 131, 132, 135, 133, 0, 134, 434, 461,
	136, 480, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 333, 140, 334, 455, 141, 142, 0, 456, 143,
	217, 0, 144, 145, 146, 481, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 335, 154, 155, 1033, 156,
	0, 241, 157, 158, 0, 159, 160, 451, 161, 162,
	336, 163, 482, 164, 0, 165, 166, 168, 483, 167,
	457, 0, 0, 169, 170, 0, 223, 484, 485, 0,
	0, 171, 458, 459, 432, 172, 173, 174, 175, 0,
	0, 176, 177, 452, 0, 178, 179, 180, 228, 486,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	438, 426, 427, 428, 425, 414, 0, 0, 0, 0,
	1029, 1030, 87, 88, 0, 89, 1031, 0, 0, 1032,
	420, 0, 0, 0, 90, 91, 0, 467, 468, 92,
	469, 470, 0, 93, 191, 192, 94, 435, 453, 471,
	472, 195, 0, 463, 0, 446, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 325, 100, 1658, 0, 447,
	449, 0, 448, 450, 102, 103, 104, 105, 473, 106,
	474, 475, 0, 0, 107, 0, 0, 0, 466, 109,
	0, 0, 0, 0, 419, 110, 454, 433, 0, 111,
	112, 476, 113, 0, 114, 0, 0, 326, 0, 115,
	464, 0, 204, 0, 116, 117, 460, 462, 0, 0,
	118, 0, 327, 119, 477, 478, 479, 0, 445, 0,
	0, 120, 329, 121, 122, 0, 0, 465, 330, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 332, 131, 132, 135, 133, 409, 134, 434,
	461, 136, 480, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 333, 140, 334, 455, 141, 142, 0, 456,
	143, 217, 0, 144, 145, 146, 481, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 335, 154, 155, 423,
	156, 0, 241, 157, 158, 0, 159, 160, 451, 161,
	162, 0, 163, 482, 164, 0, 165, 166, 168, 483,
	167, 457, 0, 0, 169, 170, 0, 223, 484, 485,
	0, 0, 171, 458, 459, 432, 172, 173, 1657, 175,
	0, 0, 176, 177, 452, 0, 178, 179, 180, 228,
	486, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 438, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 406, 407, 87, 88, 0, 89, 408, 0, 0,
	415, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 453,
	193, 194, 195, 0, 463, 0, 446, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 325, 100, 101, 0,
	447, 449, 0, 448, 450, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 454, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 326, 0,
	115, 464, 0, 204, 0, 116, 117, 460, 462, 0,
	0, 118, 0, 327, 119, 207, 208, 209, 0, 210,
	0, 328, 120, 329, 121, 122, 0, 0, 465, 330,
	123, 331, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 332, 131, 132, 135, 133, 0, 134,
	0, 461, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 333, 140, 334, 455, 141, 142, 0,
	456, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 335, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 451,
	161, 162, 336, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 457, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 458, 459, 0, 172, 173, 174,
	175, 0, 0, 176, 177, 452, 0, 178, 179, 180,
	228, 229, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 319, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 1444, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 324, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 325, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 326,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 327, 119, 207, 208, 209, 0,
	210, 0, 328, 120, 329, 121, 122, 0, 0, 211,
	330, 123, 331, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 332, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 333, 140, 334, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 335, 154,
	155, 219, 156, 0, 241, 157, 158, 49, 159, 160,
	0, 161, 162, 336, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 51, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 0, 0, 178, 179,
	180, 323, 229, 0, 181, 0, 0, 0, 47, 182,
	183, 184, 185, 0, 48, 319, 563, 567, 0, 568,
	558, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 46, 0, 0, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	324, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	325, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 571, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 560, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 326, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 327, 119, 207,
	208, 209, 0, 210, 0, 328, 120, 329, 121, 122,
	0, 0, 211, 330, 123, 331, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 332, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 561, 0, 0, 0, 139, 214, 333, 140, 334,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 335, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 336, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	559, 172, 173, 174, 175, 0, 0, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 319, 563, 567, 0,
	568, 558, 0, 0, 0, 0, 569, 564, 87, 88,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 324, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 325, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 554, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 560, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 326, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 327, 119,
	207, 208, 209, 0, 210, 0, 328, 120, 329, 121,
	122, 0, 0, 211, 330, 123, 331, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 332, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 561, 0, 0, 0, 139, 214, 333, 140,
	334, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 335, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 336, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 559, 172, 173, 174, 175, 0, 0, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 319, 563, 567,
	0, 568, 558, 0, 0, 0, 0, 569, 564, 87,
	88, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 324, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 560, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 326, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 327,
	119, 207, 208, 209, 0, 210, 0, 328, 120, 329,
	121, 122, 0, 0, 211, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 561, 0, 0, 0, 139, 214, 333,
	140, 334, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 336, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 559, 172, 173, 174, 175, 0, 0, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 84, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	87, 88, 0, 89, 0, 0, 0, 0, 569, 564,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 293, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 49, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 51, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 0,
	176, 177, 0, 0, 178, 179, 180, 323, 229, 0,
	181, 0, 0, 0, 47, 182, 183, 184, 185, 84,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 899, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 49, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 51, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	0, 176, 177, 0, 0, 178, 179, 180, 323, 229,
	0, 181, 0, 0, 0, 47, 182, 183, 184, 185,
	84, 48, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 46,
	0, 1139, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 88, 0, 89, 0, 0, 0,
	0, 396, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 293, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 0, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 88, 0, 89, 0, 0,
	0, 899, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 0, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 0, 89, 0,
	0, 0, 835, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 0, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 88, 0, 89,
	0, 0, 0, 1352, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	205, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 0, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 88, 0,
	89, 0, 0, 0, 497, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 539, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 205, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 538, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 542, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 205, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 319, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 542,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 324, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 325, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 326, 0, 115, 203, 0, 204,
	0, 116, 117, 205, 206, 0, 0, 118, 0, 327,
	119, 207, 208, 209, 0, 210, 0, 328, 120, 329,
	121, 122, 0, 0, 211, 330, 123, 331, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 332,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 333,
	140, 334, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 335, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 336, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	809, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	807, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 812, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 876, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	811, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 877,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 84,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 87, 88, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 809, 196, 0, 0, 804, 95, 96, 97, 0,
	98, 807, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 812, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 803, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 811, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	810, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	84, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 87, 88, 0, 89, 0, 0, 0, 0,
	0, 1139, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 205, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 293, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 195, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 299, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 293,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 223,
	224, 225, 0, 0, 171, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	223, 224, 225, 0, 0, 171, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	1077, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 1075, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 1066, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 683, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 147, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	82, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	525, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 160, 0, 0, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 223, 224, 225, 0,
	0, 171, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 381, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 142, 0, 216,
	143, 217, 0, 144, 145, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	156, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 84, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 0, 181, 87, 88, 0, 89, 182, 183, 184,
	185, 0, 0, 0, 0, 90, 91, 186, 187, 188,
	92, 189, 190, 0, 93, 191, 192, 94, 0, 0,
	193, 194, 195, 0, 196, 0, 0, 0, 95, 96,
	97, 0, 98, 0, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 197,
	106, 198, 199, 0, 0, 107, 0, 0, 0, 108,
	109, 0, 0, 0, 0, 200, 110, 201, 0, 0,
	111, 112, 202, 113, 0, 114, 0, 0, 0, 0,
	115, 203, 0, 204, 0, 116, 117, 378, 206, 0,
	0, 118, 0, 0, 119, 207, 208, 209, 0, 210,
	0, 0, 120, 0, 121, 122, 0, 0, 211, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 212, 136, 213, 137, 138, 0, 0, 0, 0,
	0, 139, 214, 0, 140, 0, 215, 141, 142, 0,
	216, 143, 217, 0, 144, 145, 146, 218, 147, 148,
	0, 150, 151, 149, 152, 0, 153, 0, 154, 155,
	219, 156, 0, 241, 157, 158, 0, 159, 160, 0,
	161, 162, 0, 163, 220, 164, 0, 165, 166, 168,
	221, 167, 222, 0, 0, 169, 170, 0, 223, 224,
	225, 0, 0, 171, 226, 227, 0, 172, 173, 174,
	175, 0, 84, 176, 177, 0, 0, 178, 179, 180,
	228, 229, 0, 181, 87, 88, 0, 89, 182, 183,
	184, 185, 0, 0, 0, 0, 90, 91, 186, 187,
	188, 92, 189, 190, 0, 93, 191, 192, 94, 0,
	0, 193, 194, 342, 0, 196, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	197, 106, 198, 199, 0, 0, 107, 0, 0, 0,
	108, 109, 0, 0, 0, 0, 200, 110, 201, 0,
	0, 111, 112, 202, 113, 0, 114, 0, 0, 0,
	0, 115, 203, 0, 204, 0, 116, 117, 205, 206,
	0, 0, 118, 0, 0, 119, 207, 208, 209, 0,
	210, 0, 0, 120, 0, 121, 122, 0, 0, 211,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 238, 0, 131, 132, 135, 133, 0,
	134, 0, 212, 136, 213, 137, 138, 0, 0, 0,
	0, 0, 139, 214, 0, 140, 0, 215, 141, 142,
	0, 216, 143, 217, 0, 144, 145, 146, 218, 147,
	148, 0, 150, 151, 149, 152, 0, 153, 0, 154,
	155, 219, 156, 0, 241, 157, 158, 0, 159, 160,
	0, 161, 162, 0, 163, 220, 164, 0, 165, 166,
	168, 221, 167, 222, 0, 0, 169, 170, 0, 237,
	224, 225, 0, 0, 233, 226, 227, 0, 172, 173,
	174, 175, 0, 84, 176, 177, 0, 0, 178, 179,
	180, 228, 229, 0, 181, 87, 88, 0, 89, 182,
	183, 184, 185, 0, 0, 0, 0, 90, 91, 186,
	187, 188, 92, 189, 190, 0, 93, 191, 192, 94,
	0, 0, 193, 194, 195, 0, 196, 0, 0, 0,
	95, 96, 97, 0, 98, 0, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 197, 106, 198, 199, 0, 0, 107, 0, 0,
	0, 108, 109, 0, 0, 0, 0, 200, 110, 201,
	0, 0, 111, 112, 202, 113, 0, 114, 0, 0,
	0, 0, 115, 203, 0, 204, 0, 116, 117, 205,
	206, 0, 0, 118, 0, 0, 119, 207, 208, 209,
	0, 210, 0, 0, 120, 0, 121, 122, 0, 0,
	211, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 238, 0, 131, 132, 135, 133,
	0, 134, 0, 212, 136, 213, 137, 138, 0, 0,
	0, 0, 0, 139, 214, 0, 140, 0, 215, 141,
	142, 0, 216, 143, 217, 0, 144, 145, 146, 218,
	147, 148, 0, 150, 151, 149, 152, 0, 153, 0,
	154, 155, 219, 156, 0, 241, 157, 158, 0, 159,
	160, 0, 161, 162, 0, 163, 220, 164, 0, 165,
	166, 168, 221, 167, 222, 0, 0, 169, 170, 0,
	237, 224, 225, 0, 0, 233, 226, 227, 0, 172,
	173, 174, 175, 0, 84, 176, 177, 0, 0, 178,
	179, 180, 228, 229, 0, 181, 87, 88, 0, 89,
	182, 183, 184, 185, 0, 0, 0, 0, 90, 91,
	186, 187, 188, 92, 189, 190, 0, 93, 191, 192,
	94, 0, 0, 193, 194, 195, 0, 196, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 197, 106, 198, 199, 0, 0, 107, 0,
	0, 0, 108, 109, 0, 0, 0, 0, 200, 110,
	201, 0, 0, 111, 112, 202, 113, 0, 114, 0,
	0, 0, 0, 115, 203, 0, 204, 0, 116, 117,
	314, 206, 0, 0, 118, 0, 0, 119, 207, 208,
	209, 0, 210, 0, 0, 120, 0, 121, 122, 0,
	0, 211, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 212, 136, 213, 137, 138, 0,
	0, 0, 0, 0, 139, 214, 0, 140, 0, 215,
	141, 142, 0, 216, 143, 217, 0, 144, 145, 146,
	218, 147, 148, 0, 150, 151, 149, 152, 0, 153,
	0, 154, 155, 219, 156, 0, 241, 157, 158, 0,
	159, 160, 0, 161, 162, 0, 163, 220, 164, 0,
	165, 166, 168, 221, 167, 222, 0, 0, 169, 170,
	0, 223, 224, 225, 0, 0, 171, 226, 227, 0,
	172, 173, 174, 175, 0, 84, 176, 177, 0, 0,
	178, 179, 180, 228, 229, 0, 181, 87, 88, 0,
	89, 182, 183, 184, 185, 0, 0, 0, 0, 90,
	91, 186, 187, 188, 92, 189, 190, 0, 93, 191,
	192, 94, 0, 0, 193, 194, 195, 0, 196, 0,
	0, 0, 95, 96, 97, 0, 98, 0, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 197, 106, 198, 199, 0, 0, 107,
	0, 0, 0, 108, 109, 0, 0, 0, 0, 200,
	110, 201, 0, 0, 111, 112, 202, 113, 0, 114,
	0, 0, 0, 0, 115, 203, 0, 204, 0, 116,
	117, 311, 206, 0, 0, 118, 0, 0, 119, 207,
	208, 209, 0, 210, 0, 0, 120, 0, 121, 122,
	0, 0, 211, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 212, 136, 213, 137, 138,
	0, 0, 0, 0, 0, 139, 214, 0, 140, 0,
	215, 141, 142, 0, 216, 143, 217, 0, 144, 145,
	146, 218, 147, 148, 0, 150, 151, 149, 152, 0,
	153, 0, 154, 155, 219, 156, 0, 241, 157, 158,
	0, 159, 160, 0, 161, 162, 0, 163, 220, 164,
	0, 165, 166, 168, 221, 167, 222, 0, 0, 169,
	170, 0, 223, 224, 225, 0, 0, 171, 226, 227,
	0, 172, 173, 174, 175, 0, 84, 176, 177, 0,
	0, 178, 179, 180, 228, 229, 0, 181, 87, 88,
	0, 89, 182, 183, 184, 185, 0, 0, 0, 0,
	90, 91, 186, 187, 188, 92, 189, 190, 0, 93,
	191, 192, 94, 0, 0, 193, 194, 195, 0, 196,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 197, 106, 198, 199, 0, 0,
	107, 0, 0, 0, 108, 109, 0, 0, 0, 0,
	200, 110, 201, 0, 0, 111, 112, 202, 113, 0,
	114, 0, 0, 0, 0, 115, 203, 0, 204, 0,
	116, 117, 309, 206, 0, 0, 118, 0, 0, 119,
	207, 208, 209, 0, 210, 0, 0, 120, 0, 121,
	122, 0, 0, 211, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 212, 136, 213, 137,
	138, 0, 0, 0, 0, 0, 139, 214, 0, 140,
	0, 215, 141, 142, 0, 216, 143, 217, 0, 144,
	145, 146, 218, 147, 148, 0, 150, 151, 149, 152,
	0, 153, 0, 154, 155, 219, 156, 0, 241, 157,
	158, 0, 159, 160, 0, 161, 162, 0, 163, 220,
	164, 0, 165, 166, 168, 221, 167, 222, 0, 0,
	169, 170, 0, 223, 224, 225, 0, 0, 171, 226,
	227, 0, 172, 173, 174, 175, 0, 84, 176, 177,
	0, 0, 178, 179, 180, 228, 229, 0, 181, 87,
	88, 0, 89, 182, 183, 184, 185, 0, 0, 0,
	0, 90, 91, 186, 187, 188, 92, 189, 190, 0,
	93, 191, 192, 94, 0, 0, 193, 194, 195, 0,
	196, 0, 0, 0, 95, 96, 97, 0, 98, 0,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 197, 106, 198, 199, 0,
	0, 107, 0, 0, 0, 108, 109, 0, 0, 0,
	0, 200, 110, 201, 0, 0, 111, 112, 202, 113,
	0, 114, 0, 0, 0, 0, 115, 203, 0, 204,
	0, 116, 117, 302, 206, 0, 0, 118, 0, 0,
	119, 207, 208, 209, 0, 210, 0, 0, 120, 0,
	121, 122, 0, 0, 211, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 212, 136, 213,
	137, 138, 0, 0, 0, 0, 0, 139, 214, 0,
	140, 0, 215, 141, 142, 0, 216, 143, 217, 0,
	144, 145, 146, 218, 147, 148, 0, 150, 151, 149,
	152, 0, 153, 0, 154, 155, 219, 156, 0, 241,
	157, 158, 0, 159, 160, 0, 161, 162, 0, 163,
	220, 164, 0, 165, 166, 168, 221, 167, 222, 0,
	0, 169, 170, 0, 223, 224, 225, 0, 0, 171,
	226, 227, 0, 172, 173, 174, 175, 0, 84, 176,
	177, 0, 0, 178, 179, 180, 228, 229, 0, 181,
	87, 88, 0, 89, 182, 183, 184, 185, 0, 0,
	0, 0, 90, 91, 186, 187, 188, 92, 189, 190,
	0, 93, 191, 192, 94, 0, 0, 193, 194, 195,
	0, 196, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 197, 106, 198, 199,
	0, 0, 107, 0, 0, 0, 108, 109, 0, 0,
	0, 0, 200, 110, 201, 0, 0, 111, 112, 202,
	113, 0, 114, 0, 0, 0, 0, 115, 203, 0,
	204, 0, 116, 117, 205, 206, 0, 0, 118, 0,
	0, 119, 207, 208, 209, 0, 210, 0, 0, 120,
	0, 121, 122, 0, 0, 211, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 212, 136,
	213, 137, 138, 0, 0, 0, 0, 0, 139, 214,
	0, 140, 0, 215, 141, 142, 0, 216, 143, 217,
	0, 144, 145, 146, 218, 282, 148, 0, 150, 151,
	149, 152, 0, 153, 0, 154, 155, 219, 156, 0,
	241, 157, 158, 0, 159, 160, 0, 161, 162, 0,
	163, 220, 164, 0, 165, 166, 168, 221, 167, 222,
	0, 0, 169, 170, 0, 223, 224, 225, 0, 0,
	171, 226, 227, 0, 172, 173, 174, 175, 0, 84,
	176, 177, 0, 0, 178, 179, 180, 228, 229, 0,
	181, 87, 88, 0, 89, 182, 183, 184, 185, 0,
	0, 0, 0, 90, 91, 186, 187, 188, 92, 189,
	190, 0, 93, 191, 192, 94, 0, 0, 193, 194,
	195, 0, 196, 0, 0, 0, 95, 96, 97, 0,
	98, 0, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 197, 106, 198,
	199, 0, 0, 107, 0, 0, 0, 108, 109, 0,
	0, 0, 0, 200, 110, 201, 0, 0, 111, 112,
	202, 113, 0, 114, 0, 0, 0, 0, 115, 203,
	0, 204, 0, 116, 117, 205, 206, 0, 0, 118,
	0, 0, 119, 207, 208, 209, 0, 210, 0, 0,
	120, 0, 121, 122, 0, 0, 211, 0, 123, 0,
	0, 231, 0, 0, 125, 0, 126, 127, 128, 129,
	238, 0, 131, 132, 135, 133, 0, 134, 0, 212,
	136, 213, 137, 138, 0, 0, 0, 0, 0, 139,
	214, 0, 140, 0, 215, 141, 142, 0, 216, 143,
	217, 0, 144, 145, 146, 218, 147, 148, 0, 150,
	151, 149, 152, 0, 153, 0, 154, 155, 219, 156,
	0, 241, 157, 158, 0, 159, 232, 0, 161, 162,
	0, 163, 220, 164, 0, 165, 166, 168, 221, 167,
	222, 0, 0, 169, 170, 0, 237, 224, 225, 0,
	0, 233, 226, 227, 0, 172, 173, 174, 175, 0,
	84, 176, 177, 0, 0, 178, 179, 180, 228, 229,
	0, 181, 87, 88, 0, 89, 182, 183, 184, 185,
	0, 0, 0, 0, 90, 91, 186, 187, 188, 92,
	189, 190, 0, 93, 191, 192, 94, 0, 0, 193,
	194, 195, 0, 196, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 197, 106,
	198, 199, 0, 0, 107, 0, 0, 0, 108, 109,
	0, 0, 0, 0, 200, 110, 201, 0, 0, 111,
	112, 202, 113, 0, 114, 0, 0, 0, 0, 115,
	203, 0, 204, 0, 116, 117, 205, 206, 0, 0,
	118, 0, 0, 119, 207, 208, 209, 0, 210, 0,
	0, 120, 0, 121, 122, 0, 0, 211, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	212, 136, 213, 137, 138, 0, 0, 0, 0, 0,
	139, 214, 0, 140, 0, 215, 141, 0, 0, 216,
	143, 217, 0, 144, 0, 146, 218, 147, 148, 0,
	150, 151, 149, 152, 0, 153, 0, 154, 155, 219,
	0, 0, 241, 157, 158, 0, 159, 160, 0, 161,
	162, 0, 163, 220, 164, 0, 165, 166, 168, 221,
	167, 222, 0, 0, 169, 170, 0, 223, 224, 225,
	0, 0, 171, 226, 227, 0, 172, 173, 174, 175,
	0, 0, 176, 177, 0, 0, 178, 179, 180, 228,
	229, 707, 181, 725, 726, 727, 0, 182, 183, 184,
	185, 0, 0, 728, 0, 0, 0, 0, 0, 709,
	0, 734, 0, 0, 0, 0, 707, 0, 725, 726,
	727, 0, 0, 0, 0, 0, 0, 0, 728, 708,
	0, 0, 0, 0, 709, 722, 734, 0, 915, 931,
	907, 923, 922, 0, 0, 909, 908, 0, 0, 0,
	933, 932, 0, 0, 708, 0, 0, 0, 0, 0,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 920, 919, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 707, 733, 725, 726, 727, 0,
	0, 0, 0, 0, 0, 730, 728, 0, 735, 0,
	0, 723, 709, 0, 734, 911, 912, 913, 0, 580,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 708, 729, 0, 0, 723, 0, 722, 0,
	0, 0, 707, 0, 725, 726, 727, 0, 0, 0,
	0, 0, 0, 921, 728, 0, 0, 0, 729, 0,
	709, 0, 734, 0, 0, 0, 724, 0, 0, 707,
	0, 725, 726, 727, 0, 0, 732, 916, 0, 0,
	708, 728, 0, 0, 0, 0, 722, 709, 0, 734,
	0, 724, 0, 0, 0, 0, 735, 0, 0, 0,
	0, 732, 0, 0, 914, 0, 0, 708, 733, 0,
	935, 0, 0, 722, 0, 0, 910, 0, 730, 929,
	930, 0, 0, 0, 723, 0, 731, 0, 719, 720,
	721, 0, 718, 715, 716, 717, 710, 711, 712, 713,
	714, 934, 0, 0, 735, 0, 729, 0, 0, 1242,
	0, 731, 0, 719, 720, 721, 733, 718, 715, 716,
	717, 710, 711, 712, 713, 714, 730, 0, 0, 0,
	0, 735, 723, 0, 1241, 0, 0, 0, 707, 724,
	725, 726, 727, 733, 0, 0, 0, 0, 0, 732,
	728, 0, 0, 730, 729, 0, 709, 0, 734, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 729, 722, 0, 0, 0, 0, 724, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 732, 0, 731,
	0, 719, 720, 721, 0, 718, 715, 716, 717, 710,
	711, 712, 713, 714, 724, 0, 0, 0, 0, 1615,
	0, 0, 0, 0, 732, 707, 0, 725, 726, 727,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 0,
	735, 0, 0, 709, 0, 734, 0, 731, 0, 719,
	720, 721, 733, 718, 715, 716, 717, 710, 711, 712,
	713, 714, 730, 708, 0, 0, 0, 1614, 723, 722,
	0, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 0,
	729, 0, 0, 0, 1597, 0, 0, 0, 0, 0,
	707, 0, 725, 726, 727, 0, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 0, 709, 0,
	734, 0, 0, 724, 0, 0, 0, 735, 0, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 708, 733,
	0, 0, 0, 0, 722, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 1203, 0,
	1219, 1220, 1221, 731, 0, 719, 720, 721, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 0, 0,
	0, 0, 735, 1576, 0, 0, 0, 0, 0, 707,
	724, 725, 726, 727, 733, 0, 0, 0, 0, 0,
	732, 728, 1216, 0, 730, 0, 0, 709, 0, 734,
	723, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 0, 0,
	0, 0, 729, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	731, 0, 719, 720, 721, 0, 718, 715, 716, 717,
	710, 711, 712, 713, 714, 724, 0, 0, 0, 0,
	1571, 0, 1222, 0, 707, 732, 725, 726, 727, 0,
	0, 0, 0, 0, 0, 0, 728, 0, 1217, 0,
	0, 735, 709, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 708, 730, 0, 0, 0, 0, 722, 723,
	0, 0, 0, 0, 0, 731, 0, 719, 720, 721,
	0, 718, 715, 716, 717, 710, 711, 712, 713, 714,
	0, 729, 0, 1218, 0, 1567, 0, 0, 0, 707,
	0, 725, 726, 727, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 0, 709, 0, 734,
	0, 0, 0, 0, 724, 0, 735, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 708, 733, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 723, 1213, 1214, 1215, 0, 1212,
	1209, 1210, 1211, 1204, 1205, 1206, 1207, 1208, 0, 0,
	0, 0, 0, 0, 0, 0, 729, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 0,
	0, 735, 0, 0, 1506, 0, 0, 0, 707, 724,
	725, 726, 727, 733, 0, 0, 0, 0, 0, 732,
	728, 0, 0, 730, 0, 0, 709, 0, 734, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 708, 0, 0, 0,
	0, 729, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 719, 720, 721, 0, 718, 715, 716, 717, 710,
	711, 712, 713, 714, 724, 0, 0, 0, 0, 1505,
	0, 0, 0, 707, 732, 725, 726, 727, 0, 0,
	0, 0, 0, 0, 0, 728, 0, 0, 0, 0,
	735, 709, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 708, 730, 0, 0, 0, 0, 722, 723, 0,
	0, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 0,
	729, 0, 0, 0, 1417, 0, 0, 0, 707, 0,
	725, 726, 727, 0, 0, 0, 0, 0, 0, 0,
	728, 0, 0, 0, 0, 0, 709, 0, 734, 0,
	0, 0, 0, 724, 0, 735, 0, 0, 0, 0,
	0, 0, 0, 732, 0, 0, 708, 733, 0, 0,
	0, 0, 722, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 729, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 719, 720, 721, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 0, 0,
	735, 0, 0, 1355, 0, 0, 0, 707, 724, 725,
	726, 727, 733, 0, 0, 0, 0, 0, 732, 728,
	0, 0, 730, 0, 0, 709, 0, 734, 723, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 0,
	729, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	719, 720, 721, 0, 718, 715, 716, 717, 710, 711,
	712, 713, 714, 724, 0, 0, 0, 0, 1330, 0,
	0, 0, 0, 732, 0, 707, 0, 725, 726, 727,
	0, 0, 0, 0, 0, 0, 0, 728, 0, 735,
	0, 0, 0, 709, 0, 734, 0, 0, 0, 0,
	707, 733, 725, 726, 727, 0, 0, 0, 0, 0,
	0, 730, 728, 708, 0, 0, 0, 723, 709, 722,
	734, 0, 0, 731, 0, 719, 720, 721, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 708, 729,
	0, 0, 0, 981, 722, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1233, 0, 0, 1232, 0, 0, 0, 0,
	0, 0, 724, 0, 0, 0, 0, 735, 0, 0,
	0, 0, 732, 0, 0, 0, 1675, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 735, 0, 0, 723, 0, 0, 0, 0,
	0, 0, 0, 0, 733, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 0, 0, 729, 0, 0,
	723, 0, 731, 0, 719, 720, 721, 0, 718, 715,
	716, 717, 710, 711, 712, 713, 714, 0, 0, 0,
	1401, 0, 729, 0, 0, 0, 0, 0, 0, 0,
	724, 0, 0, 0, 1674, 0, 0, 0, 0, 0,
	732, 707, 0, 725, 726, 727, 0, 0, 0, 0,
	0, 0, 0, 728, 0, 724, 0, 887, 0, 709,
	0, 734, 737, 0, 0, 732, 0, 0, 707, 0,
	725, 726, 727, 0, 0, 0, 0, 0, 0, 708,
	728, 0, 0, 736, 0, 722, 709, 0, 734, 0,
	731, 0, 719, 720, 721, 0, 718, 715, 716, 717,
	710, 711, 712, 713, 714, 0, 708, 0, 0, 0,
	888, 0, 722, 0, 0, 731, 0, 719, 720, 721,
	0, 718, 715, 716, 717, 710, 711, 712, 713, 714,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 707, 0, 725,
	726, 727, 0, 0, 0, 730, 0, 0, 0, 728,
	735, 723, 0, 0, 0, 709, 0, 734, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 730, 729, 0, 708, 0, 0, 723, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 1203,
	0, 1219, 1220, 1221, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 724, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 1216, 0, 0, 731, 723, 719, 720,
	721, 0, 718, 715, 716, 717, 710, 711, 712, 713,
	714, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	277, 0, 0, 731, 0, 719, 720, 721, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 707, 0,
	725, 726, 727, 0, 0, 0, 0, 0, 0, 0,
	728, 1223, 724, 0, 0, 0, 709, 707, 734, 725,
	726, 727, 732, 1222, 0, 0, 0, 0, 0, 728,
	0, 0, 0, 0, 0, 709, 708, 734, 0, 1217,
	0, 0, 722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 708, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 719, 720, 721, 0, 718, 715,
	716, 717, 710, 711, 712, 713, 714, 0, 0, 0,
	0, 0, 0, 0, 1218, 0, 0, 0, 0, 0,
	735, 0, 0, 0, 0, 0, 0, 1239, 0, 0,
	0, 0, 733, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 730, 0, 0, 0, 0, 0, 723, 0,
	0, 733, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 723, 0, 0,
	729, 0, 0, 0, 0, 0, 1213, 1214, 1215, 0,
	1212, 1209, 1210, 1211, 1204, 1205, 1206, 1207, 1208, 729,
	0, 0, 0, 0, 0, 0, 707, 0, 725, 726,
	727, 0, 0, 724, 0, 0, 0, 0, 728, 0,
	0, 1234, 0, 732, 709, 707, 734, 725, 726, 727,
	0, 0, 724, 0, 0, 0, 0, 728, 1349, 0,
	0, 0, 732, 709, 708, 734, 0, 0, 0, 0,
	722, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 731, 0, 719, 720, 721, 0, 718,
	715, 716, 717, 710, 711, 712, 713, 714, 0, 0,
	0, 0, 731, 0, 719, 720, 721, 0, 718, 715,
	716, 717, 710, 711, 712, 713, 714, 0, 735, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	730, 0, 0, 0, 0, 0, 723, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 723, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1201, 0, 0,
	0, 724, 0, 707, 0, 725, 726, 727, 0, 0,
	0, 732, 0, 0, 0, 728, 0, 0, 1196, 0,
	724, 709, 707, 734, 725, 726, 727, 0, 0, 0,
	732, 0, 0, 0, 728, 0, 0, 0, 0, 0,
	709, 708, 734, 0, 0, 0, 0, 722, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	708, 731, 0, 719, 720, 721, 722, 718, 715, 716,
	717, 710, 711, 712, 713, 714, 0, 0, 0, 0,
	731, 0, 719, 720, 721, 0, 718, 715, 716, 717,
	710, 711, 712, 713, 714, 0, 0, 0, 0, 0,
	707, 0, 725, 726, 727, 735, 0, 0, 0, 0,
	0, 0, 728, 0, 0, 0, 0, 733, 709, 707,
	734, 725, 726, 727, 735, 0, 0, 730, 0, 0,
	0, 0, 0, 723, 0, 0, 733, 709, 708, 734,
	0, 0, 0, 0, 722, 0, 730, 0, 0, 0,
	0, 0, 723, 0, 0, 729, 0, 708, 0, 0,
	0, 0, 0, 722, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 724, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 732, 0,
	0, 0, 735, 0, 0, 0, 0, 724, 0, 707,
	0, 725, 726, 727, 733, 0, 0, 732, 0, 0,
	0, 735, 0, 0, 730, 0, 0, 709, 0, 734,
	723, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 708, 731, 723,
	719, 720, 721, 722, 718, 715, 716, 717, 710, 711,
	712, 713, 714, 0, 0, 0, 0, 731, 0, 719,
	720, 721, 0, 718, 715, 716, 717, 710, 711, 712,
	713, 714, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 731, 0, 719, 720, 721,
	0, 718, 715, 716, 717, 710, 711, 712, 713, 714,
	0, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 724, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 719, 720, 721, 0,
	718, 715, 716, 717, 710, 711, 712, 713, 714,
}
var sqlPact = [...]int{

	1986, -1000, -5, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 731, -1000, -1000, -1000, 502, 694, 36, 1234, 1234,
	14524, -1000, -1000, 17065, 2279, 372, 374, 372, 372, 371,
	14524, 444, 637, 84, -1000, 504, 2, 16834, 13369, 1123,
	-10, 12907, 237, 1986, 13138, 13369, 16603, 984, 888, 12907,
	16372, 16141, 15910, -1000, 8748, -1000, -1000, -1000, -1000, 759,
	-1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	757, -1000, 13369, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 15679, 15448, 744, -1000, -1000, 438, 296, 1141, -1000,
	5, -1000, -1000, -1000, 983, -1000, 747, 982, 981, 980,
	978, 295, 758, -1000, 744, -1000, 744, -1000, -1000, -1000,
	451, 14524, -1000, 12907, -1000, 15217, 925, 14986, -1000, 504,
	-1000, -1000, -1000, 780, 1121, 1121, 1121, 1159, 90, 86,
	84, -19, 13369, -1000, 255, -19, 6459, 6459, -1000, -1000,
	237, -1000, 267, 11250, -2, -1000, 6206, -1000, 885, 1030,
	577, 572, 1029, -122, 12907, 13369, 480, 14755, -1000, 1026,
	82, 1025, -1000, -34, 1023, -1000, -44, -1000, -1000, -1000,
	-1000, -1000, -1000, 237, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 11501, 1817, 11501,
	-1000, -1000, 1188, -1000, -1000, -12, -16, 849, 835, 9252,
	9001, 1087, 1747, -1000, -1000, -1000, 1, 3913, 13369, 991,
	11501, 13369, 13369, 13369, -1000, 13369, -1000, 848, -1000, -1000,
	-17, -18, -1000, 14524, -1000, 88, -1000, 234, 824, 14293,
	-1000, 821, -1000, 780, -1000, 649, 845, 6983, 7742, 84,
	-1000, -1000, 84, 84, 7742, -1000, -1000, 13369, -19, 1179,
	13369, 53, -1000, 18948, -1000, -1000, 7742, 7742, 7742, 7742,
	7742, 626, -1000, -1000, -1000, 4417, -1000, -1000, -2, 233,
	256, -1000, -1000, 232, -2, -1000, -1000, -1000, -1000, 228,
	1255, 367, -1000, -1000, -1000, 7742, 302, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 989, 225, 223, -1000,
	-1000, -1000, -1000, 221, 219, 217, 216, 214, 213, 211,
	209, 208, 207, 200, 198, 197, 608, -1000, 314, -1000,
	-1000, 314, 314, -1000, 187, 187, 188, -1000, -1000, -1000,
	187, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 196, 53, -1000, -1000, -1000, 13369, -2, -1000,
	-1000, -1000, 7742, 3661, -45, -1000, 19592, -1000, -40, 653,
	-1000, 12435, 1132, 1104, 1105, 12907, 448, 440, 13369, 13369,
	307, 48, 1175, 10748, -1000, 13369, 13369, -1000, 13369, -1000,
	-1000, 13369, 13369, 13369, 2, 11963, 436, -35, 11732, 13369,
	-1000, -3, -1000, -1000, 976, 360, 604, 909, 705, -1000,
	-1000, -1000, -1000, -29, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1230, -1000, -1000, -1000, -1000, 1245,
	-29, -1000, -1000, -1000, -1000, -1000, 1253, -1000, -1000, -1000,
	-1000, 3913, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13369, -1000,
	-1000, -1000, -1000, -1000, -1000, 604, 909, -1000, -1000, 12907,
	12194, 1022, 719, 799, -1000, 1015, -1000, -1000, -1000, -1000,
	19592, -1000, 19592, 542, 915, -1000, 915, -30, -1000, 18921,
	-1000, 193, -49, -1000, 307, 6459, 10497, 17557, 13369, 455,
	7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742,
	7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742, 7742,
	7742, 648, 435, 1771, 671, 183, 3913, -1000, 1222, 1222,
	1222, 19689, 19689, 164, -21, 18528, -32, -2, -1000, -1000,
	5682, 5429, -2, 2975, -1000, 922, 1243, 312, 19592, 997,
	953, 192, 79, 78, 7742, 918, 7742, 7995, 7742, 7742,
	4670, 7742, 7742, 7742, 7742, 7742, 7742, -1000, 191, -1000,
	-1000, -1000, -1000, 1242, -1000, -1000, 1241, -1000, 1239, 307,
	75, -1000, 2297, -1000, -1000, 6206, -1000, 545, 13369, 13369,
	13369, -1000, -1000, 789, 14062, -1000, 17557, 13369, -1000, 190,
	189, 883, 862, 13369, 13369, 13831, 13600, 13369, 863, 13369,
	13369, 569, -1000, 514, 7742, 697, -1000, 9995, 318, 13369,
	51, -1000, -1000, -1000, 283, 13369, -1000, -1000, -1000, 82,
	-1000, -34, -1000, -1000, 13369, 11732, -35, -36, -1000, -1000,
	13369, 909, -1000, -1000, -1000, 546, -1000, 599, -1000, 9503,
	-1000, -1000, -1000, 922, -1000, -41, -1000, -1000, -1000, -1000,
	74, -38, -1000, -1000, -1000, -1000, 13369, 210, 13369, 13369,
	1014, 13369, -1000, -1000, -1000, 7742, -1000, -1000, -1000, 2,
	13369, -1000, 948, -1000, -39, 1356, -137, 12676, -1000, 9744,
	-1000, 1191, -1000, -1000, -1000, -1000, 65, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 188, 608, 187,
	187, 187, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 314, 314, 314, -1000, -1000, -1000, 291, 482, 482,
	1163, 1163, 1163, 1567, 1567, 1966, 2122, 2638, 2638, 2638,
	427, 548, 548, 2638, 2638, 2638, 19689, 19670, 254, 7742,
	419, 655, 183, 7742, -1000, 667, -1000, -1000, -1000, 972,
	180, 7995, 7995, -1000, -1000, -1000, 4417, -1000, -1000, 179,
	7742, -1000, 7742, -50, -51, -1000, 19592, -1000, -54, -1000,
	-1000, -28, 7742, 7742, 7742, 72, -1000, 418, -1000, 416,
	403, 400, -1000, 178, 70, 508, -1000, 7742, 631, 176,
	174, 7742, -1000, -1000, 19573, 69, 971, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 68, 19405, 67, 19119, -1000, 7995,
	7995, 7995, 4417, 173, 62, 18725, -119, 19386, 6712, 6712,
	6712, 61, 19227, 7742, -119, 17556, 17531, 2619, -58, -60,
	-62, 1238, -64, 60, 59, 948, -1000, -1000, 7742, -1000,
	-1000, -1000, 396, 386, 1013, -1000, 781, -1000, 600, 7742,
	13369, 172, 171, 596, -1000, 1010, 661, 1003, 661, -1000,
	-40, 588, -1000, -1000, 385, -1000, 6459, 19592, 514, 1109,
	-66, -1000, -1000, -1000, 307, 10748, 6206, -72, -1000, -41,
	-1000, -41, -1000, -1000, -1000, -1000, -1000, -1000, 13369, -1000,
	12194, 170, 13369, 169, 168, 13369, -1000, -1000, 58, -1000,
	-1000, -1000, -1000, -1000, 938, 1157, 10497, 904, 903, 10497,
	794, 636, 636, 636, -1000, 12676, 3396, -1000, -1000, 13369,
	166, 10246, 57, 1356, 261, 260, -1000, 1233, 7742, 254,
	7742, 7995, 7995, -1000, 254, -1000, -1000, -1000, -1000, 968,
	161, 7742, 17557, 2697, 2675, -73, 5176, -42, 18453, 7742,
	-1000, -1000, 256, -1000, 55, 5953, -1000, 19037, -22, -22,
	-1000, 836, 746, 696, 486, 1232, 1251, 1047, -1000, 7742,
	19208, -1000, 10999, 308, 643, 18368, 17557, -1000, 7742, -1000,
	967, 7742, -1000, 17557, 7995, 7995, 7995, 7995, 7995, 7995,
	7995, 7995, 7995, 7995, 7995, 7995, 7995, 7995, 7995, 7995,
	7995, 7995, 858, 7995, 1219, 1219, 1219, -53, 4923, -1000,
	988, 967, 7742, 7742, 17557, 50, 44, 42, -1000, 7742,
	-119, 7742, 7742, 7742, -1000, -1000, -1000, 40, -1000, 1229,
	-1000, -1000, 938, 18637, 13369, 13369, 13369, 985, 1538, -1000,
	18259, -78, 13369, 13369, -1000, 886, 901, 352, 13369, -1000,
	13369, -1000, 13369, 13369, 13369, 13369, -74, -1000, 154, 2,
	13369, 514, -1000, -1000, 282, -1000, -1000, 8497, 160, 12194,
	8497, 691, -1000, 305, 7742, 7742, 1356, 10497, 10497, 973,
	900, 10497, -1000, -1000, -1000, -1000, -1000, -1000, 847, 155,
	13369, 12676, 404, 1228, 38, 1158, 254, 156, 117, 7742,
	17557, 19779, -79, -1000, 7742, 7742, -1000, -80, -1000, 7742,
	-1000, 19592, -1000, 1248, 7742, 31, 30, 28, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 24, -1000, -1000, 19592, 7742,
	-1000, -1000, 17296, 7742, 20, -1000, 19, 19592, 988, 19592,
	-1000, 521, 521, 1219, 1219, 1219, 690, 690, 752, 597,
	387, 387, 387, 738, 476, 476, 387, 387, 387, 966,
	856, 131, 18068, 7742, -84, -1000, -1000, -1000, 19592, 19592,
	18, -1000, -1000, -1000, -119, 2459, 18184, 18099, -1000, 15,
	305, -1000, -1000, -1000, -1000, 13369, -1000, 13369, -1000, 13369,
	765, -1000, -1000, 859, 129, 7995, 13369, -1000, 677, -86,
	-88, 753, -1000, 703, 7742, -1000, 17557, 661, 661, -1000,
	381, 379, -1000, 1057, 8497, 1103, -1000, -1000, -1000, 128,
	-90, -1000, 184, 1130, 7742, -1000, -1000, 127, 8497, 14,
	-92, 13369, -1000, 13369, 19592, -119, -1000, 973, -1000, 122,
	7742, 10497, -1000, -155, -1000, 276, -1000, 13369, -94, -1000,
	-1000, 157, 118, -1000, 7742, 7742, 19779, -96, -1000, 17557,
	254, 254, -1000, 17990, -1000, 19037, -1000, -1000, -1000, -1000,
	19592, 613, -1000, 17915, -1000, -1000, -1000, 7995, 963, 113,
	17557, 17828, -1000, -1000, 7742, -1000, -1000, -1000, -1000, -1000,
	717, -1000, -1000, -1000, 7742, 18068, 52, -1000, 97, -1000,
	-1000, -1000, 549, -1000, -1000, 19592, 1131, -1000, -1000, 13369,
	13369, 437, -98, 13369, -1000, -1000, 4164, 677, 8497, 1114,
	-2, 13369, 1114, 17719, 2975, -102, -1000, 677, 66, -113,
	-1000, 1172, -1000, 13369, 19592, -1000, 847, -1000, 3913, -103,
	-1000, -1000, -1000, 254, 254, -1000, -1000, -1000, 10, 643,
	1146, -1000, 2105, 7995, 17557, -111, -1000, 17692, -1000, 17644,
	837, 13369, 13369, 13369, 326, 13369, -1000, -1000, 477, -1000,
	307, -1000, -1000, -1000, -1000, -1000, -1000, 1130, -28, 677,
	-1000, 8497, 13369, 54, -117, -1000, -1000, -1000, -1000, 609,
	7742, 2105, -126, -1000, -1000, -1000, 662, 728, -128, -141,
	52, -1000, 7742, -1000, 10748, -1000, 1114, 9, -1000, -142,
	-1000, -1000, -1000, 3, 7489, 7489, -119, -1000, -1000, 682,
	672, 496, -1000, -1000, -1000, -1000, -1000, 837, 19592, -116,
	-1000, -1000, 677, -1000, -1000, -1000, 8246, 725, 493, 18750,
	-1000, -1000, 1066, -1000, 331, 764, 764, 662, -1000, -1000,
	1199, -1000, -1000, -1000, -1000, -1000, -1000, 1212, -1000, -1000,
	895, -1000, -1000, 7236, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1480, 1479, 1166, 1474, 1473, 1470, 1466, 1462, 79,
	1460, 1459, 94, 1452, 76, 1451, 1446, 1442, 1441, 59,
	1440, 1439, 1436, 1435, 1432, 73, 35, 119, 1945, 111,
	1431, 1429, 1427, 10, 83, 82, 1426, 57, 75, 90,
	994, 52, 1424, 115, 28, 14, 1328, 77, 1422, 97,
	103, 1421, 1419, 1417, 33, 1414, 1413, 1411, 11, 50,
	30, 1410, 18, 145, 1407, 1406, 78, 1405, 80, 93,
	45, 105, 98, 1404, 58, 13, 54, 1402, 26, 1401,
	25, 53, 110, 1399, 40, 271, 47, 23, 43, 1398,
	1397, 1393, 1391, 55, 66, 39, 1389, 1387, 74, 1386,
	109, 112, 1382, 1381, 1379, 1377, 1376, 1375, 577, 1371,
	1369, 543, 3, 32, 44, 5, 92, 91, 27, 1367,
	17, 1366, 0, 746, 525, 1365, 38, 37, 60, 34,
	46, 16, 1364, 84, 1363, 1362, 1361, 1359, 1352, 56,
	1349, 49, 116, 31, 41, 67, 22, 42, 65, 88,
	121, 85, 1348, 100, 1347, 69, 1346, 1345, 740, 70,
	1342, 1333, 1331, 704, 621, 593, 51, 1324, 1321, 566,
	563, 1318, 1314, 64, 1313, 1311, 117, 1308, 114, 20,
	1305, 95, 1298, 68, 1297, 307, 81, 48, 1296, 106,
	61, 1294, 1291, 1290, 24, 2, 9, 6, 7, 4,
	19, 15, 1285, 1284, 102, 71, 1283, 144, 1282, 1281,
	29, 1280, 1279, 21, 1278, 12, 1276, 8, 1, 1275,
	118, 1272, 86, 1269, 1195, 1267, 120, 1264, 1263, 1192,
	62,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 154, 154, 153, 13, 18, 220, 220, 220,
	224, 224, 225, 225, 226, 226, 226, 226, 226, 226,
	226, 222, 222, 21, 21, 21, 21, 108, 108, 110,
	110, 110, 110, 39, 107, 107, 107, 107, 109, 109,
	109, 109, 178, 176, 176, 183, 183, 183, 51, 51,
	51, 51, 51, 52, 52, 52, 175, 175, 175, 175,
	184, 184, 184, 184, 184, 184, 53, 53, 53, 182,
	182, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 177, 177, 221, 221, 223, 223,
	8, 8, 54, 54, 55, 55, 114, 114, 114, 113,
	192, 192, 193, 193, 193, 194, 194, 194, 194, 194,
	194, 194, 191, 191, 189, 189, 190, 190, 190, 190,
	227, 227, 112, 112, 58, 58, 197, 197, 197, 197,
	195, 195, 195, 195, 195, 198, 196, 199, 199, 199,
	199, 199, 142, 142, 142, 24, 7, 7, 97, 97,
	62, 62, 146, 146, 146, 45, 45, 33, 33, 33,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 98,
	98, 99, 99, 16, 20, 23, 23, 23, 23, 23,
	229, 229, 42, 42, 42, 42, 43, 43, 111, 111,
	111, 111, 111, 38, 6, 6, 14, 48, 48, 104,
	104, 104, 106, 106, 106, 105, 105, 105, 84, 84,
	25, 75, 75, 76, 76, 152, 77, 77, 19, 19,
	28, 28, 26, 26, 26, 26, 26, 26, 27, 27,
	29, 29, 29, 29, 29, 29, 29, 205, 205, 205,
	207, 207, 204, 15, 15, 15, 15, 206, 206, 228,
	228, 85, 85, 85, 57, 56, 56, 60, 60, 59,
	61, 61, 145, 82, 82, 82, 82, 100, 101, 101,
	102, 102, 103, 103, 81, 81, 129, 129, 30, 30,
	66, 66, 67, 67, 120, 120, 121, 121, 119, 119,
	119, 147, 147, 147, 147, 148, 148, 148, 148, 148,
	148, 143, 143, 143, 143, 144, 144, 88, 88, 88,
	88, 86, 86, 87, 87, 149, 149, 149, 149, 83,
	83, 150, 150, 150, 115, 115, 155, 155, 155, 65,
	65, 65, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 157, 157, 157, 157, 159, 159, 159, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 160, 160, 167, 167, 168, 168, 169, 170,
	161, 161, 162, 162, 163, 164, 171, 171, 171, 171,
	173, 173, 165, 165, 165, 166, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	95, 95, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 200, 200, 200, 200, 200, 200, 200,
	202, 202, 203, 203, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 208,
	208, 209, 209, 210, 210, 211, 211, 213, 214, 214,
	214, 215, 219, 219, 212, 212, 216, 216, 216, 217,
	217, 218, 218, 218, 218, 218, 133, 133, 133, 134,
	134, 135, 72, 72, 131, 131, 130, 130, 130, 132,
	132, 89, 172, 172, 172, 172, 172, 172, 172, 90,
	90, 96, 91, 91, 92, 92, 92, 92, 92, 92,
	126, 127, 93, 93, 93, 128, 128, 136, 140, 140,
	139, 138, 138, 137, 137, 118, 118, 118, 118, 117,
	116, 78, 78, 230, 230, 141, 141, 79, 79, 80,
	74, 74, 151, 151, 151, 151, 68, 68, 50, 50,
	69, 69, 46, 46, 49, 47, 47, 47, 47, 63,
	63, 64, 64, 44, 44, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 174, 174, 174, 40,
	40, 40, 41, 41, 180, 180, 180, 181, 181, 181,
	181, 179, 179, 179, 179, 179, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 2, 0, 2, 0, 2, 0,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 3,
	2, 0, 3, 1, 2, 2, 1, 1, 2, 4,
	2, 5, 6, 7, 3, 1, 4, 5, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 10, 13, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 3, 6, 7, 1, 3, 1,
	4, 2, 8, 5, 0, 4, 3, 0, 2, 0,
	8, 1, 3, 1, 1, 3, 5, 5, 1, 1,
	3, 3, 1, 2, 3, 2, 3, 4, 1, 1,
	8, 8, 1, 2, 4, 4, 4, 2, 2, 3,
	1, 3, 6, 1, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 2, 2, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	2, 0, 1, 3, 3, 1, 1, 3, 2, 4,
	0, 3, 2, 1, 4, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 4, 5, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 2, 3, 0, 3, 3, 2, 2, 1, 0,
	2, 2, 3, 2, 1, 1, 3, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 1, 3, 5, 2,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 2, 2, 1, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 3, 5, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -206, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 230, 58, -205, -29, -27, 274, 250, 256, 199,
	-30, 217, 243, 277, 217, 70, 113, 78, 117, 237,
	70, 113, 217, -12, 274, -19, -14, -25, -9, -224,
	18, -225, -226, 58, 83, 102, 199, 117, 78, 237,
	-224, -43, 196, -40, 4, -185, -187, 16, 17, 19,
	28, 29, 33, 37, 40, 51, 52, 53, 55, 57,
	60, 61, 68, 69, 70, 71, 73, 78, 82, 83,
	89, 93, 94, 96, 98, 103, 108, 109, 114, 117,
	125, 127, 128, 133, 136, 139, 141, 142, 143, 144,
	145, 147, 148, 150, 152, 149, 155, 157, 158, 164,
	167, 170, 171, 174, 177, 178, 179, 181, 182, 186,
	184, 185, 187, 189, 191, 192, 194, 197, 198, 200,
	201, 203, 204, 206, 208, 210, 211, 214, 212, 218,
	219, 226, 230, 231, 232, 233, 236, 237, 240, 241,
	242, 246, 251, 252, 253, 254, 30, 31, 32, 34,
	35, 38, 39, 43, 44, 45, 47, 72, 74, 75,
	88, 90, 95, 104, 106, 110, 111, 118, 119, 120,
	122, 131, 154, 156, 165, 169, 173, 175, 180, 193,
	207, 213, 215, 221, 222, 223, 227, 228, 243, 244,
	-108, 136, 201, 226, -109, -107, -178, 221, 145, -70,
	-40, 196, 4, 70, 51, 71, 103, 113, 114, 128,
	218, 221, 226, 18, -229, 226, 226, -229, -229, -42,
	226, 224, -43, -228, 217, 217, -97, 70, 235, -27,
	-29, -28, -59, -60, 234, 121, 87, 163, -26, -28,
	-205, -207, 181, -204, -40, -207, -56, -57, 18, 80,
	278, -149, -46, 161, -40, -80, 274, -3, -149, 110,
	-40, -49, 110, -46, 100, 123, -150, -149, -40, 110,
	-50, 110, -49, -71, 110, -70, -154, -153, -181, 4,
	-185, -187, -186, 243, 49, 59, 101, 116, 124, 126,
	132, 134, 146, 166, 168, 190, 205, 160, 278, 160,
	-40, -108, 45, -108, -110, -38, -39, 125, 177, 224,
	259, 100, 254, -53, 6, 76, -73, 276, 100, -221,
	160, 100, 100, 100, -177, 100, 254, 125, 177, -111,
	-38, -39, -111, 224, -43, -83, -149, -70, 110, 113,
	-40, 110, -59, -60, -82, -100, -101, 135, 159, -85,
	18, 80, -85, -85, 37, 275, 275, 278, -207, -64,
	274, -74, -151, -122, 267, -124, 265, 266, 271, 151,
	255, -133, -46, -125, 9, 274, -136, -202, -28, 88,
	24, -134, -135, 193, -40, 8, 5, 6, 7, -44,
	-157, -166, 229, 91, 153, 41, -200, -201, 4, -185,
	-180, -158, -168, -162, -165, 122, 49, 63, 66, 64,
	67, 202, 238, 42, 90, 169, 173, 215, 227, 228,
	110, 154, 111, 47, 104, 131, 82, 31, 32, 34,
	35, 43, 44, 72, 74, 75, 95, 118, 119, 120,
	156, 180, 207, 213, 222, 223, 244, -186, -169, -170,
	-163, -164, -171, -74, -80, 267, -46, 274, -78, -118,
	-117, -116, 272, 276, -79, -141, -122, 76, -35, 184,
	-34, 17, 19, 83, 241, 88, 184, 184, 88, 279,
	-150, -48, -46, 203, -40, 25, 88, -37, 278, 40,
	187, 88, 278, 88, 275, 278, -220, -69, 217, 70,
	-47, -40, 267, -226, -220, 25, 278, 278, 133, -52,
	139, 150, 108, -176, 76, -183, -175, -142, 9, 229,
	91, 160, -182, 5, 266, -174, -181, 6, 8, 265,
	-176, 76, 61, -184, 6, 4, -166, -142, 76, 136,
	122, 276, -179, 4, -185, -187, -186, -188, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 41, 42,
	46, 48, 50, 56, 58, 62, 63, 64, 65, 66,
	67, 76, 77, 79, 80, 81, 84, 85, 87, 91,
	92, 97, 99, 100, 102, 105, 107, 112, 113, 115,
	121, 123, 129, 130, 135, 137, 138, 151, 153, 159,
	160, 161, 162, 163, 172, 176, 183, 188, 199, 202,
	209, 216, 217, 220, 224, 225, 229, 234, 235, 238,
	239, 245, 247, 248, 249, 250, -178, -223, 97, -220,
	-178, -178, -178, -178, 133, 278, 278, -43, -37, 278,
	274, 151, -41, 110, -40, 151, -82, -101, -100, -102,
	-122, 18, -122, -124, -27, -27, -27, -61, -145, -122,
	-204, 25, -63, -40, -66, 278, 100, 10, 48, 28,
	265, 266, 267, 268, 269, 262, 263, 264, 261, 257,
	258, 259, 54, 140, 195, 12, 13, 14, 22, 162,
	134, 255, 205, 124, 30, 112, 25, 4, -122, -122,
	-122, -122, -122, 168, -28, -122, -72, -78, -28, -130,
	272, 274, -78, 274, 6, 6, 274, -137, -122, -208,
	251, 97, 274, 274, 274, 274, 274, 274, 274, 274,
	274, 274, 274, 274, 274, 274, 274, 175, -173, 246,
	-173, -173, -159, 274, -159, -160, 274, -159, 274, -66,
	-46, -118, -122, -179, 267, 278, 275, 278, 224, -98,
	56, 50, -113, 110, 50, -189, -40, 56, -190, 46,
	235, 176, 99, -98, 56, -98, 56, 56, -149, 224,
	224, -49, -40, -115, 248, -104, -19, 274, 76, 25,
	-75, -76, -152, -77, -46, 274, -40, -40, -49, -50,
	-70, -71, -12, -153, 224, 278, -69, -63, -117, -116,
	100, 226, -39, -38, -51, 179, 208, 185, 200, 278,
	5, 8, 8, 6, -179, -222, -40, -39, -38, -149,
	-54, -55, -114, -113, -191, -189, 113, 235, 88, 160,
	151, 88, -103, 193, 194, 278, -33, 26, 79, 274,
	278, 275, -115, -151, -67, -147, -149, -28, -148, 274,
	-155, -156, -158, -167, -161, -165, -166, 33, 39, 38,
	219, 118, 119, 120, 207, 31, 180, 95, 82, 75,
	74, 156, 35, 34, -169, -170, -163, -164, 72, 222,
	223, 32, 44, 43, 244, 213, -70, 221, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, 134,
	205, 30, 112, 224, 153, 151, 229, 91, 236, 80,
	157, -230, 216, 27, -128, -28, 274, -179, -133, 193,
	274, 275, 278, -72, -132, 273, -122, -130, -72, 275,
	275, -72, 245, 18, 80, 267, -94, 253, 143, 73,
	109, 142, -95, 198, 8, -140, -139, 247, -209, 93,
	105, 274, 275, 275, -122, -89, -172, 4, 253, 143,
	73, 109, 142, 198, -90, -122, -91, -123, -124, 265,
	266, 271, 274, 193, -92, -122, -72, -122, 36, 130,
	225, -93, -122, 100, -72, -122, -122, -122, -72, -72,
	-72, 274, 8, 8, 8, -115, 275, 273, 282, -141,
	-34, -46, -40, -40, 151, -113, 110, -155, -40, 274,
	274, 127, 127, -40, -40, 110, -40, 110, -40, -40,
	-35, 184, -40, -40, 184, -84, 188, -122, -106, 160,
	-68, -46, 243, -40, -66, 278, 259, -68, -37, -222,
	-47, -222, -38, 233, 53, 179, -183, -94, 278, 275,
	278, -41, 113, -70, -46, 88, -40, -145, -15, -19,
	-14, -25, -9, -40, -81, 105, 278, 59, -88, 126,
	146, 101, 132, 190, 116, -119, 279, -144, -143, 25,
	-40, -28, -148, -147, -65, 24, -94, 274, 254, -122,
	224, -230, 216, -128, -122, 153, 229, 91, 236, 80,
	157, 100, 274, -123, -123, -72, 274, -72, -122, 278,
	273, 273, 278, 275, -60, 278, -59, -122, -72, -72,
	275, 224, 224, 224, 224, 274, 275, -138, -139, 84,
	-122, -214, 167, 274, 274, -122, 25, 275, 100, 275,
	-96, 172, 275, 10, 265, 266, 267, 268, 269, 262,
	263, 264, 261, 257, 258, 259, 54, 140, 195, 12,
	13, 14, 124, 112, -123, -123, -123, -72, 274, 275,
	-126, -127, 100, 97, 25, -93, -93, -93, 275, 100,
	-72, 278, 278, 278, 275, 275, 275, 8, 275, 278,
	275, 275, -81, -122, 224, 224, 88, 151, -192, -190,
	-122, -63, 274, 274, -32, 83, 203, -99, 88, -37,
	88, -37, 224, -98, 56, 224, -74, -84, 55, 275,
	278, -115, -76, -141, 275, -40, -114, 274, -41, 274,
	274, -40, 275, -129, 107, 37, -147, 126, 126, -147,
	-88, 126, -86, 166, -86, -86, -144, -179, 280, -40,
	274, 275, 272, 272, 8, -122, -122, -123, -123, 100,
	274, -122, -131, -155, 22, 22, 275, -72, 275, 278,
	275, -122, -130, 275, 245, -60, -60, -60, 143, 109,
	142, -95, 142, -95, -95, 8, 6, 85, -122, 220,
	-215, -40, 274, 248, -59, 275, -155, -122, -126, -122,
	-155, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, 80,
	151, 157, -123, 278, -72, 275, -127, -126, -122, -122,
	-155, 275, 275, 275, -72, -122, -122, -122, 275, 8,
	-129, 273, -40, -40, -113, 88, -193, 56, -194, 48,
	151, 153, 235, 176, 46, 76, 183, 275, 275, -63,
	-63, 151, 76, 151, 76, 69, 231, -40, -40, -46,
	-40, -40, -40, -105, 274, 160, -19, -46, -84, 259,
	-62, -146, -40, -203, 274, -200, -201, -44, 274, -54,
	-62, 160, -210, 249, -122, -72, -147, -147, -87, 239,
	160, 126, -147, -121, -120, 98, 149, 274, -63, -143,
	273, 8, 8, 275, 22, 22, -122, -131, 275, 278,
	-122, -122, 275, -122, 6, -122, 275, 275, 275, 275,
	-122, -219, -40, -122, 275, 275, -127, 100, 80, 157,
	274, -122, 275, 275, 278, 275, 275, 275, -210, -113,
	-40, -70, 153, 127, 274, -123, -46, -112, -227, 57,
	214, 275, 275, 153, 153, -122, -155, -37, -37, 224,
	224, 81, -62, 56, -80, -28, 274, 275, 278, -45,
	-78, 48, -45, -122, 274, -62, 275, 275, -46, -211,
	-213, -40, -87, 274, -122, -147, 278, 281, 259, -63,
	275, 273, 273, -122, -122, 275, -155, 275, -60, -212,
	171, 275, -123, 100, 274, -131, 275, -122, -194, -122,
	-58, 274, 274, 183, -36, 48, -40, -40, 237, 152,
	275, -40, -112, -146, -33, -70, -33, 275, -72, 275,
	-112, 274, 278, 25, -63, -120, -179, 275, 275, -60,
	37, -123, -131, 275, 275, 275, -197, 141, -63, -63,
	-46, -31, 239, -70, 203, -115, -45, -60, -112, -62,
	-213, -215, 275, -216, 178, 194, -72, 275, -195, -198,
	-196, 160, 101, 170, 206, 275, 275, -58, -122, -75,
	-33, 275, 275, 275, -217, -218, 30, 232, 61, -122,
	-217, -196, 160, -198, 160, 237, 78, -197, -115, -112,
	-218, 174, 96, 193, 174, 96, -199, 148, 187, 40,
	203, -199, -195, 22, 16, 153, 76, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 318, 0, 0,
	0, 288, -2, 0, 0, 251, 0, 251, 251, 255,
	0, 320, 219, 317, -2, 328, 0, 0, 0, 326,
	302, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 68, 69, 70, 71, 0,
	80, 81, 82, 84, 85, 86, 87, 88, 89, 90,
	0, 244, 816, 257, 729, 730, 731, 746, 747, 748,
	749, 750, 751, 752, 753, 754, 755, 756, 757, 758,
	759, 760, 761, 762, 763, 764, 765, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	93, 783, 820, 831, 98, 108, 0, 883, -2, 112,
	62, 816, 141, 142, 0, 144, 157, 0, 0, 0,
	155, 0, 0, 153, 262, 250, 262, 247, 248, 249,
	252, 0, 243, 0, 319, 0, 0, 0, 218, -2,
	298, 299, -2, 0, 323, 323, 323, 0, 0, 299,
	0, 307, 806, 310, 712, 308, 0, 0, 325, 324,
	0, 303, 385, 0, 702, 348, 0, 2, 0, 865,
	0, 0, 865, 0, 0, 0, 0, 391, 54, 865,
	45, 865, 698, 58, 865, 60, 0, 72, 74, 737,
	738, 739, 740, 888, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 0, 0, 0,
	256, 94, 855, 96, 97, 99, 100, 0, 0, 0,
	0, 0, 0, 111, 136, 137, 63, 0, 0, 159,
	0, 0, 0, 0, 149, 0, 150, 0, 152, 245,
	258, 259, 246, 0, 254, 45, 389, 0, 865, 733,
	264, 865, -2, 0, 294, 335, 336, 0, 0, 0,
	321, 322, 0, 0, 0, 290, 291, 0, 309, 0,
	0, 351, 690, 694, 695, 472, 0, 0, 0, 0,
	0, 0, 551, 552, 553, 0, 555, 556, 557, 860,
	0, 561, 562, 879, 702, 715, 716, 717, 718, 0,
	0, 0, 723, 724, 725, 674, 600, 571, -2, -2,
	713, 412, 413, 414, 415, -2, 890, 575, 577, 579,
	580, 581, 582, 0, 861, 875, 876, 882, 886, 887,
	865, 872, 866, 856, 863, 871, 767, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 736, 436, 437,
	442, 443, 445, 351, 349, 386, 387, 0, 703, 681,
	675, 676, 0, 0, 0, 687, 685, 686, 22, 240,
	24, 0, 240, 240, 0, 0, 0, 0, 0, 0,
	395, 0, 267, 0, 392, 0, 0, 56, 0, 43,
	44, 0, 0, 0, 318, 0, 0, 77, 0, 763,
	700, 705, 708, 83, 0, 0, 0, 0, 0, 103,
	123, 124, 125, 104, 106, 113, 115, 116, 117, 126,
	127, 128, 129, 212, 0, 214, 139, 140, 726, 0,
	105, 107, 109, 110, 130, 131, 0, 133, 134, 135,
	455, 0, 64, 741, 742, 743, 744, 745, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 143, 145, 0, 156,
	146, 147, 148, 154, 151, 0, 0, 253, 215, 0,
	163, 0, 0, 865, 732, 0, 297, 333, 334, 337,
	340, 341, 338, 472, 304, 305, 306, 329, 330, 229,
	311, 0, 0, 709, 395, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 693, 476, 477,
	478, 499, 500, 0, -2, 632, 0, 558, 559, 560,
	0, 0, -2, 0, 720, 469, 0, 0, 673, 602,
	0, 0, 0, 0, 0, 0, 0, 653, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 426, 439, 450,
	447, 446, 428, 0, 427, 425, 0, 429, 0, 395,
	0, 682, 0, 679, 680, 0, 689, 0, 0, 0,
	0, 239, 26, 865, 0, 36, 0, 0, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 704, 279, 0, 274, 269, 0, 0, 0,
	351, 281, 283, 284, 0, 0, 393, 55, 699, 45,
	61, 59, 67, 73, 0, 0, 78, 79, 706, 707,
	0, 0, 101, 102, 263, 0, 120, 0, 122, 0,
	213, 728, 727, 469, 65, 158, 91, 260, 261, 390,
	0, 162, 164, 166, 167, 168, 733, 0, 0, 0,
	0, 0, 339, 342, 343, 0, 332, 227, 228, 318,
	0, 711, 345, 691, 350, 352, 360, 376, 363, 0,
	473, 401, 402, 403, 404, 405, 469, 408, 409, 410,
	411, 419, 420, 421, 422, 423, 424, 433, 0, 418,
	418, 418, 430, 431, 434, 435, 440, 441, 452, 453,
	454, 451, 451, 451, 448, 449, 474, 0, 479, 480,
	481, 482, 483, 484, 485, 486, 487, -2, -2, -2,
	491, 492, 493, -2, -2, -2, 497, 498, -2, 0,
	0, 684, 0, 0, 505, 0, 508, 510, 512, 0,
	0, 0, 0, 683, 522, 665, 0, 692, 507, 0,
	0, 554, 0, 0, 0, 638, 632, 639, 0, -2,
	563, 328, 0, 0, 0, 0, 721, 456, 457, 458,
	459, 460, 461, 470, 0, 672, 668, 0, 610, 0,
	0, 0, 576, 578, 0, 0, 0, 642, 643, 644,
	645, 646, 647, 648, 0, 0, 0, 0, 524, 0,
	0, 0, 0, 879, 0, 632, 658, 0, 0, 0,
	0, 0, 632, 0, 664, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 388, 677, 0, 688,
	25, 231, 0, 0, 0, 28, 865, 171, 0, 0,
	0, 0, 0, 242, 37, 865, 45, 865, 45, 38,
	23, 240, 230, 233, 0, 53, 0, 394, 279, 0,
	0, 696, 271, 268, 395, 0, 0, 0, 57, 75,
	701, 76, 95, 118, 119, 121, 114, 132, 0, 160,
	0, 0, 733, 0, 0, 0, 265, 331, 0, 313,
	314, 315, 316, 710, 347, 0, 0, 0, 0, 0,
	0, 382, 382, 382, 380, 376, 0, 362, 375, 0,
	374, -2, 363, 0, 396, 398, 406, 0, 0, -2,
	0, 0, 0, 523, -2, 506, 509, 511, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 633, 0,
	636, 637, 0, -2, 0, 0, 327, 328, 328, 328,
	569, 0, 0, 0, 0, 0, 0, 0, 669, 0,
	0, 570, 0, 0, 0, 0, 0, 584, 0, 585,
	0, 0, 586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 526, 527, 528, 0, 0, 587,
	656, 657, 0, 0, 0, 0, 0, 0, 592, 0,
	663, 0, 0, 0, 596, 597, 598, 0, 416, 0,
	432, 444, 347, 0, 0, 0, 0, 0, 169, 184,
	0, 0, 0, 0, 30, 0, 0, 0, 0, 34,
	0, 40, 0, 0, 0, 0, 278, 266, 277, 0,
	0, 279, 282, 285, 0, 92, 165, 0, 0, 163,
	0, 0, 312, 604, 0, 0, 353, 0, 0, 0,
	0, 0, 377, 381, 378, 379, 361, 358, 0, 372,
	0, 365, 0, 0, 0, 475, -2, 0, 0, 0,
	0, -2, 0, 634, 0, 0, 666, 0, 627, 0,
	-2, 633, 640, 564, 0, 0, 0, 0, 462, 463,
	464, 465, 466, 467, 468, 0, 722, 667, 671, 0,
	608, 609, 613, 0, 0, 574, 0, 641, 650, 651,
	525, 529, 530, 531, 532, 533, 534, 535, 536, 537,
	-2, -2, -2, 541, 542, 543, -2, -2, -2, 0,
	0, 0, 652, 0, 0, 630, 654, 655, 660, 661,
	0, 589, 590, 591, 662, 0, 0, 0, 438, 0,
	604, 678, 235, 237, 27, 0, 170, 0, 173, 0,
	0, 176, 177, 0, 0, 0, 0, 186, 193, 0,
	0, 0, 42, 0, 0, 241, 0, 45, 45, 232,
	0, 0, 234, 0, 0, 0, 270, 697, 280, 0,
	0, 220, 226, 226, 0, 572, 573, 0, 0, 0,
	0, 0, 300, 0, 346, 344, 366, 0, 368, 0,
	0, 0, 370, 0, 356, 0, 355, 0, 0, 364,
	399, 0, 0, 407, 0, 0, -2, 0, 516, 0,
	-2, -2, 626, 633, 719, 328, 565, 567, 568, 471,
	670, 615, 612, 0, 599, 583, 649, 0, 0, 0,
	0, 633, 629, 588, 0, 594, 595, 417, 301, 29,
	0, 174, 175, 178, 0, 180, 195, 187, 0, 190,
	191, 188, 0, 31, 32, 41, 47, 33, 39, 0,
	0, 0, 0, 0, 286, 287, 0, 193, 0, 229,
	714, 0, 229, 0, 0, 0, 161, 193, 0, 603,
	605, 0, 367, 0, 384, 369, 0, 359, 0, 0,
	373, 400, 397, -2, -2, 517, 635, 628, 0, 328,
	0, 601, -2, 0, 0, 0, 631, 0, 172, 0,
	199, 0, 0, 0, 49, 0, 236, 238, 0, 273,
	395, 276, 182, 221, 222, 225, 223, 226, 328, 193,
	216, 0, 0, 0, 0, 357, 354, 371, 566, 618,
	0, -2, 0, 549, 593, 179, 204, 0, 0, 0,
	195, 35, 0, 46, 0, 275, 229, 0, 183, 0,
	606, 607, 383, 0, 0, 0, 614, 550, 181, 200,
	201, 0, 196, 197, 198, 194, 192, 199, 48, 395,
	224, 564, 193, 611, 616, 619, -2, 834, 760, 0,
	617, 202, 0, 203, 0, 0, 0, 204, 272, 217,
	0, 621, 622, 623, 624, 625, 205, 0, 208, 209,
	0, 206, 189, 0, 207, 210, 211, 620,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 263, 3, 269, 264, 3,
	274, 275, 267, 265, 278, 266, 276, 268, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 282, 277,
	257, 259, 258, 3, 279, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 272, 3, 273, 262, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 280, 261, 281, 271,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 260,
}
var sqlTok3 = [...]int{
	57600, 270, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:651
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:657
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:663
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:683
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:699
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:720
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:749
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:767
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:774
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:821
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:822
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:826
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1108
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = DBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = DBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1225
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 155:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = []string(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			if ContainsVars(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1431
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1488
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = []string(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = []string(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1527
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1534
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = NumVal("-" + sqlDollar[2].str)
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = DInt(sqlDollar[1].union.ival().Val)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = true
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = false
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			unimplemented()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1627
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1631
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = Ascending
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = Descending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = true
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = false
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1698
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1741
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.str = ""
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.str = ""
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.qname()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1843
		{
			unimplemented()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1845
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{sqlDollar[5].union.exprs()}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			unimplemented()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			unimplemented()
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2097
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2098
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2101
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2118
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = true
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = false
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = true
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2142
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2242
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{sqlDollar[2].union.exprs()}}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2383
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.str = astFullJoin
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.str = astLeftJoin
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.str = astRightJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.str = astInnerJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2561
		{
			unimplemented()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2562
		{
			unimplemented()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2566
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2567
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2575
		{
			unimplemented()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &BytesType{Name: "BLOB"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &BytesType{Name: "BYTES"}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &BytesType{Name: "BYTEA"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &StringType{Name: "TEXT"}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &DecimalType{Prec: int(sqlDollar[2].union.ival().Val), Scale: int(sqlDollar[4].union.ival().Val)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &DecimalType{}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &IntType{Name: "INT"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &IntType{Name: "INT64"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &IntType{Name: "INTEGER"}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &IntType{Name: "SMALLINT"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &IntType{Name: "BIGINT"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &FloatType{Name: "REAL"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].union.ival().Val)}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DECIMAL"
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "DEC"
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			sqlVAL.union.val.(*DecimalType).Name = "NUMERIC"
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &BoolType{Name: "BOOLEAN"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &BoolType{Name: "BOOL"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = IntVal{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = &IntType{Name: "BIT", N: int(sqlDollar[4].union.ival().Val)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &IntType{Name: "BIT"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			sqlVAL.union.val.(*StringType).N = int(sqlDollar[3].union.ival().Val)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = &StringType{Name: "CHAR"}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &StringType{Name: "VARCHAR"}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = &StringType{Name: "STRING"}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &DateType{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &TimestampType{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &TimestampType{withZone: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &IntervalType{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			unimplemented()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2789
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2796
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2824
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2825
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(true)}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DBool(false)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = ValArg{name: sqlDollar[1].str}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3200
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3201
		{
			unimplemented()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3259
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3283
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3327
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3331
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3336
		{
			unimplemented()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3341
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3349
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3353
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3365
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3369
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3379
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3382
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3383
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &Row{sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &Row{nil}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &Tuple{append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = Exprs{DString(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), DInt(1), sqlDollar[2].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &Tuple{sqlDollar[2].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3719
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3720
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3876
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &IntVal{Val: sqlDollar[1].union.ival().Val, Str: sqlDollar[1].union.ival().Str}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = NumVal(sqlDollar[1].str)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = DString(sqlDollar[1].str)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = DBytes(sqlDollar[1].str)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3912
		{
			unimplemented()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].union.colType()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].union.colType()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = DBool(true)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = DBool(false)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = DNull
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[2].union.ival()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = IntVal{Val: -sqlDollar[2].union.ival().Val, Str: "-" + sqlDollar[2].union.ival().Str}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
