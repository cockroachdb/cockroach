// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	userPriority   UserPriority
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HIGH = 57447
const HOUR = 57448
const IF = 57449
const IFNULL = 57450
const IN = 57451
const INDEX = 57452
const INITIALLY = 57453
const INNER = 57454
const INSERT = 57455
const INT = 57456
const INT64 = 57457
const INTEGER = 57458
const INTERSECT = 57459
const INTERVAL = 57460
const INTO = 57461
const IS = 57462
const ISOLATION = 57463
const JOIN = 57464
const KEY = 57465
const LATERAL = 57466
const LEADING = 57467
const LEAST = 57468
const LEFT = 57469
const LEVEL = 57470
const LIKE = 57471
const LIMIT = 57472
const LOCAL = 57473
const LOCALTIME = 57474
const LOCALTIMESTAMP = 57475
const LOW = 57476
const LSHIFT = 57477
const MATCH = 57478
const MINUTE = 57479
const MONTH = 57480
const NAME = 57481
const NAMES = 57482
const NATURAL = 57483
const NEXT = 57484
const NO = 57485
const NORMAL = 57486
const NOT = 57487
const NOTHING = 57488
const NULL = 57489
const NULLIF = 57490
const NULLS = 57491
const NUMERIC = 57492
const OF = 57493
const OFF = 57494
const OFFSET = 57495
const ON = 57496
const ONLY = 57497
const OR = 57498
const ORDER = 57499
const ORDINALITY = 57500
const OUT = 57501
const OUTER = 57502
const OVER = 57503
const OVERLAPS = 57504
const OVERLAY = 57505
const PARTIAL = 57506
const PARTITION = 57507
const PLACING = 57508
const POSITION = 57509
const PRECEDING = 57510
const PRECISION = 57511
const PRIMARY = 57512
const PRIORITY = 57513
const RANGE = 57514
const READ = 57515
const REAL = 57516
const RECURSIVE = 57517
const REF = 57518
const REFERENCES = 57519
const RENAME = 57520
const REPEATABLE = 57521
const RESTRICT = 57522
const RETURNING = 57523
const REVOKE = 57524
const RIGHT = 57525
const ROLLBACK = 57526
const ROLLUP = 57527
const ROW = 57528
const ROWS = 57529
const RSHIFT = 57530
const SEARCH = 57531
const SECOND = 57532
const SELECT = 57533
const SERIALIZABLE = 57534
const SESSION = 57535
const SESSION_USER = 57536
const SET = 57537
const SHOW = 57538
const SIMILAR = 57539
const SIMPLE = 57540
const SMALLINT = 57541
const SNAPSHOT = 57542
const SOME = 57543
const SQL = 57544
const STRICT = 57545
const STRING = 57546
const STORING = 57547
const SUBSTRING = 57548
const SYMMETRIC = 57549
const TABLE = 57550
const TABLES = 57551
const TEXT = 57552
const THEN = 57553
const TIME = 57554
const TIMESTAMP = 57555
const TO = 57556
const TRAILING = 57557
const TRANSACTION = 57558
const TREAT = 57559
const TRIM = 57560
const TRUE = 57561
const TRUNCATE = 57562
const TYPE = 57563
const UNBOUNDED = 57564
const UNCOMMITTED = 57565
const UNION = 57566
const UNIQUE = 57567
const UNKNOWN = 57568
const UPDATE = 57569
const USER = 57570
const USING = 57571
const VALID = 57572
const VALIDATE = 57573
const VALUE = 57574
const VALUES = 57575
const VARCHAR = 57576
const VARIADIC = 57577
const VARYING = 57578
const WHEN = 57579
const WHERE = 57580
const WINDOW = 57581
const WITH = 57582
const WITHIN = 57583
const WITHOUT = 57584
const YEAR = 57585
const ZONE = 57586
const NOT_LA = 57587
const WITH_LA = 57588
const POSTFIXOP = 57589
const UMINUS = 57590

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3845

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	267, 19,
	-2, 301,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 272,
	154, 272,
	265, 272,
	267, 272,
	-2, 282,
	-1, 38,
	1, 275,
	154, 275,
	265, 275,
	267, 275,
	-2, 281,
	-1, 47,
	1, 19,
	267, 19,
	-2, 301,
	-1, 83,
	1, 135,
	267, 135,
	-2, 752,
	-1, 238,
	130, 311,
	153, 311,
	-2, 278,
	-1, 241,
	130, 310,
	153, 310,
	-2, 276,
	-1, 348,
	130, 310,
	153, 310,
	-2, 279,
	-1, 405,
	264, 700,
	-2, 695,
	-1, 406,
	264, 701,
	-2, 696,
	-1, 412,
	6, 429,
	264, 429,
	-2, 827,
	-1, 434,
	6, 399,
	-2, 806,
	-1, 435,
	6, 426,
	264, 426,
	-2, 807,
	-1, 436,
	6, 407,
	-2, 808,
	-1, 437,
	6, 406,
	-2, 809,
	-1, 438,
	6, 426,
	264, 426,
	-2, 811,
	-1, 439,
	6, 426,
	264, 426,
	-2, 812,
	-1, 440,
	6, 427,
	-2, 814,
	-1, 441,
	6, 394,
	-2, 815,
	-1, 442,
	6, 394,
	-2, 816,
	-1, 443,
	6, 409,
	-2, 819,
	-1, 444,
	6, 395,
	-2, 824,
	-1, 445,
	6, 396,
	-2, 825,
	-1, 446,
	6, 397,
	-2, 826,
	-1, 447,
	6, 394,
	-2, 830,
	-1, 448,
	6, 400,
	-2, 835,
	-1, 449,
	6, 398,
	-2, 837,
	-1, 450,
	6, 428,
	-2, 841,
	-1, 451,
	6, 424,
	264, 424,
	-2, 845,
	-1, 700,
	85, 282,
	117, 282,
	130, 282,
	153, 282,
	157, 282,
	224, 282,
	-2, 531,
	-1, 708,
	264, 680,
	-2, 674,
	-1, 897,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 462,
	-1, 898,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 463,
	-1, 899,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 464,
	-1, 903,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 468,
	-1, 904,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 469,
	-1, 905,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 470,
	-1, 908,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 475,
	-1, 939,
	162, 601,
	-2, 604,
	-1, 1085,
	85, 282,
	117, 282,
	130, 282,
	153, 282,
	157, 282,
	224, 282,
	-2, 352,
	-1, 1093,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 476,
	-1, 1098,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 477,
	-1, 1117,
	162, 600,
	-2, 603,
	-1, 1254,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 478,
	-1, 1259,
	120, 0,
	-2, 488,
	-1, 1268,
	162, 602,
	-2, 605,
	-1, 1308,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 512,
	-1, 1309,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 513,
	-1, 1310,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 514,
	-1, 1314,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 518,
	-1, 1315,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 519,
	-1, 1316,
	12, 0,
	13, 0,
	14, 0,
	247, 0,
	248, 0,
	249, 0,
	-2, 520,
	-1, 1408,
	120, 0,
	-2, 489,
	-1, 1412,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 492,
	-1, 1413,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 494,
	-1, 1492,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 493,
	-1, 1493,
	30, 0,
	109, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 495,
	-1, 1501,
	120, 0,
	-2, 521,
	-1, 1538,
	120, 0,
	-2, 522,
	-1, 1583,
	30, 0,
	129, 0,
	197, 0,
	245, 0,
	-2, 805,
}

const sqlNprod = 937
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18406

var sqlAct = [...]int{

	936, 1582, 1565, 1449, 1603, 1543, 1566, 1581, 1567, 786,
	994, 1509, 1288, 838, 1482, 242, 1346, 1260, 1377, 269,
	404, 825, 1388, 1394, 703, 1174, 1471, 403, 13, 779,
	464, 1175, 84, 1081, 822, 1120, 1234, 952, 396, 705,
	1376, 1073, 638, 824, 1261, 1243, 469, 1069, 765, 991,
	846, 787, 247, 28, 59, 490, 756, 956, 921, 924,
	734, 946, 18, 1084, 738, 849, 249, 37, 654, 514,
	658, 817, 660, 10, 500, 241, 6, 472, 28, 88,
	316, 474, 369, 317, 525, 378, 541, 290, 61, 288,
	398, 452, 37, 57, 827, 847, 286, 252, 38, 60,
	28, 352, 62, 454, 81, 350, 351, 39, 499, 516,
	512, 66, 279, 949, 37, 19, 467, 1473, 492, 362,
	465, 780, 467, 466, 246, 32, 465, 492, 246, 466,
	283, 784, 1579, 1113, 1573, 1470, 239, 842, 294, 1572,
	661, 265, 842, 291, 272, 238, 33, 661, 950, 280,
	295, 1042, 36, 1564, 1559, 1540, 1411, 842, 1411, 1534,
	1528, 1519, 842, 1470, 1470, 1494, 1489, 1479, 1411, 842,
	1470, 1469, 1454, 1453, 1470, 842, 842, 24, 1434, 951,
	948, 1113, 1414, 25, 1410, 1113, 1356, 1411, 1264, 842,
	1225, 1113, 1531, 491, 1221, 26, 43, 491, 1192, 1190,
	1189, 1193, 1113, 1113, 1188, 1117, 1115, 1113, 1113, 1114,
	1321, 1116, 843, 45, 1113, 842, 753, 497, 1267, 752,
	498, 1053, 754, 1071, 1055, 842, 491, 495, 932, 837,
	811, 662, 953, 363, 633, 1119, 632, 506, 46, 1113,
	663, 505, 681, 682, 683, 41, 43, 311, 43, 264,
	47, 42, 684, 540, 349, 328, 1580, 1147, 665, 493,
	690, 370, 370, 45, 1578, 45, 1535, 343, 493, 40,
	1373, 470, 43, 1478, 348, 1439, 664, 1435, 27, 1427,
	34, 1426, 678, 1421, 459, 947, 1420, 43, 46, 45,
	46, 30, 31, 463, 1419, 41, 1418, 41, 1405, 1336,
	1331, 42, 1330, 42, 45, 1329, 1091, 711, 1057, 339,
	1271, 1042, 340, 1249, 46, 1510, 35, 1233, 662, 58,
	929, 783, 1403, 1195, 1194, 1182, 1173, 1146, 342, 46,
	1143, 1141, 1130, 467, 1124, 1054, 41, 465, 1006, 691,
	466, 963, 42, 962, 1290, 40, 1530, 491, 239, 362,
	689, 361, 1147, 1511, 646, 648, 635, 238, 1503, 686,
	40, 655, 1485, 1476, 1468, 679, 1446, 1432, 1399, 1384,
	1258, 1248, 1231, 280, 694, 695, 696, 697, 698, 1230,
	1372, 1228, 1161, 701, 1207, 453, 685, 1206, 1172, 1138,
	483, 1137, 1129, 702, 1147, 1110, 1106, 634, 930, 926,
	294, 294, 739, 714, 742, 1020, 1019, 663, 544, 1001,
	663, 961, 295, 295, 535, 841, 708, 744, 680, 732,
	545, 504, 731, 503, 730, 665, 729, 688, 665, 728,
	727, 726, 529, 536, 625, 1162, 1160, 629, 725, 630,
	628, 724, 723, 664, 722, 721, 664, 1147, 720, 678,
	719, 718, 709, 643, 239, 642, 707, 239, 239, 644,
	40, 656, 1020, 650, 636, 270, 651, 652, 751, 379,
	366, 1491, 1490, 706, 1251, 687, 1250, 675, 676, 677,
	460, 674, 671, 672, 673, 666, 667, 668, 669, 670,
	368, 1375, 1043, 1092, 747, 322, 335, 759, 1436, 736,
	737, 1155, 1148, 1149, 1150, 1151, 1152, 740, 323, 716,
	355, 1389, 743, 782, 780, 266, 1291, 957, 266, 1161,
	275, 735, 1039, 266, 1549, 285, 59, 967, 796, 288,
	1592, 745, 679, 770, 772, 1049, 411, 28, 250, 1364,
	229, 456, 1462, 1133, 455, 544, 544, 1518, 1593, 758,
	28, 1461, 748, 750, 1219, 1218, 758, 545, 545, 51,
	61, 1199, 757, 1198, 37, 712, 663, 406, 1128, 795,
	762, 60, 1162, 802, 62, 775, 801, 1402, 294, 663,
	1127, 259, 1126, 291, 665, 680, 799, 805, 1125, 804,
	295, 798, 1094, 797, 970, 913, 52, 665, 87, 1150,
	1151, 1152, 664, 800, 777, 776, 887, 233, 1551, 87,
	87, 408, 320, 87, 766, 664, 87, 87, 87, 1209,
	544, 87, 87, 87, 87, 923, 293, 816, 1517, 971,
	486, 236, 545, 953, 1600, 1156, 1153, 1154, 1155, 1148,
	1149, 1150, 1151, 1152, 87, 87, 54, 321, 674, 671,
	672, 673, 666, 667, 668, 669, 670, 668, 669, 670,
	972, 969, 492, 370, 923, 1034, 769, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 55, 1103,
	844, 679, 1148, 1149, 1150, 1151, 1152, 886, 957, 1592,
	1101, 1512, 266, 481, 679, 480, 1352, 1048, 852, 475,
	53, 476, 1050, 973, 820, 1216, 819, 933, 938, 1451,
	941, 964, 755, 975, 1280, 985, 987, 992, 995, 996,
	997, 821, 663, 1210, 747, 986, 1353, 461, 319, 747,
	768, 998, 999, 1000, 680, 851, 937, 266, 485, 1561,
	665, 663, 458, 470, 858, 358, 359, 680, 1099, 534,
	522, 533, 1104, 527, 1562, 1569, 968, 877, 664, 665,
	1147, 234, 544, 477, 733, 1005, 1599, 953, 1499, 927,
	285, 1035, 285, 1015, 545, 928, 56, 664, 237, 699,
	364, 1136, 475, 318, 476, 767, 835, 836, 1244, 1009,
	87, 285, 87, 493, 87, 1096, 911, 1348, 1017, 1349,
	673, 666, 667, 668, 669, 670, 246, 1568, 336, 87,
	674, 671, 672, 673, 666, 667, 668, 669, 670, 537,
	1100, 1570, 1351, 1277, 1591, 87, 1010, 1102, 655, 1354,
	1589, 372, 49, 319, 922, 87, 87, 245, 87, 1387,
	1598, 1045, 1037, 1030, 858, 949, 477, 831, 1038, 1041,
	475, 331, 476, 1058, 1278, 1571, 1044, 877, 337, 1452,
	1064, 1056, 1046, 539, 312, 1047, 679, 1052, 87, 244,
	87, 1051, 310, 354, 50, 912, 538, 1350, 293, 293,
	950, 294, 1430, 1317, 28, 1161, 543, 87, 1456, 87,
	87, 1087, 87, 295, 1066, 909, 1062, 353, 37, 1201,
	1093, 1080, 1613, 87, 1098, 1065, 1086, 953, 1067, 246,
	1090, 951, 948, 478, 477, 1455, 1444, 1014, 832, 680,
	354, 87, 746, 1112, 87, 641, 740, 1109, 743, 637,
	807, 1111, 1276, 1121, 737, 736, 809, 1544, 1162, 266,
	353, 631, 778, 1031, 1122, 1123, 790, 1118, 1134, 810,
	1318, 794, 1139, 507, 285, 1431, 1319, 808, 1445, 1022,
	1095, 285, 1097, 910, 953, 1021, 1397, 666, 667, 668,
	669, 670, 48, 701, 1239, 1612, 243, 1363, 1238, 992,
	992, 992, 1606, 1171, 1362, 318, 666, 667, 668, 669,
	670, 278, 511, 244, 1184, 1360, 478, 1235, 345, 1197,
	528, 523, 1070, 1132, 960, 1148, 1149, 1150, 1151, 1152,
	1204, 473, 1076, 1502, 1429, 1176, 1257, 947, 1177, 1142,
	87, 509, 1072, 543, 543, 1105, 1079, 803, 1179, 1180,
	1181, 510, 661, 87, 470, 334, 1242, 87, 332, 876,
	87, 1077, 329, 1196, 87, 67, 87, 87, 277, 87,
	717, 627, 87, 87, 87, 1361, 293, 1203, 663, 87,
	87, 1222, 64, 1076, 478, 72, 1359, 959, 1343, 1214,
	68, 1212, 1213, 1200, 1215, 1072, 665, 1079, 1217, 1060,
	1224, 1205, 977, 1253, 1223, 1254, 1604, 1074, 69, 1227,
	1229, 833, 1077, 830, 664, 266, 1259, 1078, 543, 496,
	67, 494, 71, 489, 1269, 482, 1075, 1241, 479, 1285,
	1269, 1265, 1237, 1245, 1246, 1240, 1076, 1463, 839, 356,
	72, 266, 1593, 1605, 1286, 68, 75, 1273, 1274, 1275,
	1079, 325, 262, 1295, 531, 758, 1297, 1465, 1607, 876,
	1074, 773, 774, 69, 758, 1077, 1270, 1220, 1078, 3,
	771, 919, 663, 663, 1279, 1281, 1282, 71, 1473, 1075,
	1296, 1514, 917, 1537, 1292, 1236, 360, 1326, 1327, 840,
	665, 228, 1396, 1322, 63, 1294, 1333, 1334, 1335, 357,
	70, 1532, 1298, 679, 1332, 87, 649, 858, 664, 664,
	857, 1325, 263, 87, 87, 879, 1324, 271, 878, 326,
	877, 1078, 74, 313, 314, 230, 231, 785, 657, 1089,
	1610, 1611, 1342, 1328, 1147, 1011, 73, 663, 915, 87,
	914, 858, 87, 1338, 920, 1404, 1390, 812, 858, 1337,
	813, 1283, 1252, 1191, 877, 70, 680, 1391, 1004, 1382,
	1374, 877, 1382, 285, 1003, 1002, 1381, 1395, 1408, 1381,
	543, 285, 954, 1412, 1413, 1385, 814, 1383, 1415, 858,
	1383, 1416, 1386, 1417, 28, 854, 1409, 1357, 1358, 1284,
	815, 73, 877, 1401, 710, 232, 1450, 65, 1422, 1392,
	1393, 626, 1425, 1398, 330, 1423, 1560, 1135, 1498, 1481,
	857, 1059, 916, 958, 715, 879, 23, 1379, 878, 918,
	671, 672, 673, 666, 667, 668, 669, 670, 384, 1400,
	266, 1344, 1433, 87, 87, 87, 1202, 826, 1428, 87,
	546, 532, 87, 521, 407, 333, 515, 524, 87, 87,
	87, 87, 87, 966, 87, 87, 457, 409, 1352, 858,
	1347, 87, 855, 87, 410, 856, 741, 397, 1345, 87,
	853, 1440, 877, 1457, 289, 1441, 788, 955, 87, 1131,
	713, 87, 383, 389, 388, 854, 934, 380, 1353, 293,
	1443, 1475, 338, 315, 79, 80, 1036, 1371, 1147, 391,
	781, 834, 645, 1382, 1211, 1466, 87, 1486, 87, 87,
	1381, 87, 235, 1472, 1144, 1382, 1474, 1492, 1493, 1458,
	87, 1383, 1381, 1464, 984, 87, 87, 1484, 87, 976,
	85, 1459, 1460, 1383, 974, 1477, 965, 341, 468, 789,
	367, 253, 253, 1497, 327, 268, 845, 1506, 268, 274,
	268, 1088, 365, 268, 281, 268, 85, 1508, 1487, 1348,
	1504, 1349, 653, 261, 260, 858, 1495, 823, 324, 1507,
	508, 806, 484, 1513, 1548, 1208, 85, 85, 877, 470,
	1488, 44, 17, 1521, 1351, 16, 15, 14, 12, 11,
	1063, 1354, 9, 1529, 1147, 1523, 8, 1527, 1525, 1522,
	7, 1382, 876, 22, 21, 20, 5, 4, 1381, 2,
	1, 0, 858, 747, 0, 0, 1524, 0, 0, 1383,
	0, 0, 790, 1161, 1536, 877, 0, 0, 0, 0,
	0, 1539, 0, 858, 0, 0, 876, 0, 0, 1350,
	0, 0, 1555, 876, 0, 0, 877, 0, 0, 0,
	0, 266, 0, 1554, 266, 1558, 1557, 1550, 1563, 1552,
	1575, 1382, 0, 1553, 0, 0, 1533, 0, 1381, 1574,
	0, 1576, 1586, 1586, 876, 978, 1162, 1577, 0, 1383,
	1587, 1556, 0, 0, 1590, 1588, 0, 0, 0, 0,
	1594, 1545, 1546, 1596, 1586, 1597, 0, 0, 87, 0,
	0, 0, 0, 0, 858, 0, 0, 1609, 1608, 0,
	218, 0, 0, 0, 0, 0, 1595, 877, 0, 1161,
	87, 1586, 1614, 0, 227, 0, 0, 0, 0, 0,
	0, 87, 268, 87, 85, 87, 346, 0, 87, 1156,
	1153, 1154, 1155, 1148, 1149, 1150, 1151, 1152, 0, 87,
	0, 253, 87, 857, 876, 220, 0, 0, 879, 0,
	87, 878, 0, 87, 0, 0, 0, 268, 0, 0,
	0, 0, 1162, 0, 219, 221, 0, 268, 268, 0,
	487, 0, 0, 0, 0, 0, 0, 857, 0, 0,
	0, 0, 879, 0, 857, 878, 1367, 0, 0, 879,
	0, 0, 878, 0, 0, 0, 222, 0, 0, 0,
	268, 0, 268, 0, 87, 0, 223, 0, 266, 266,
	0, 0, 266, 0, 0, 857, 0, 0, 854, 85,
	879, 268, 85, 878, 85, 0, 1153, 1154, 1155, 1148,
	1149, 1150, 1151, 1152, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 854, 253, 0, 0, 659, 0, 0, 854,
	0, 0, 0, 978, 978, 0, 87, 87, 87, 0,
	0, 0, 0, 0, 87, 87, 0, 0, 0, 0,
	87, 0, 87, 0, 87, 87, 87, 87, 0, 0,
	854, 0, 0, 0, 0, 857, 0, 876, 87, 0,
	879, 0, 0, 878, 0, 224, 87, 87, 225, 0,
	87, 0, 226, 0, 0, 0, 87, 87, 876, 0,
	0, 978, 978, 978, 1448, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 268, 0, 0, 0, 0, 1480, 87, 0,
	0, 0, 0, 0, 0, 763, 0, 266, 0, 268,
	854, 0, 268, 0, 0, 0, 268, 0, 792, 793,
	0, 268, 0, 0, 268, 85, 85, 0, 0, 876,
	0, 268, 659, 0, 0, 0, 0, 0, 0, 0,
	0, 857, 0, 0, 0, 0, 879, 0, 0, 878,
	0, 87, 0, 87, 0, 87, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 978, 978, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 879, 0, 87, 878, 87, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 87, 0, 857,
	0, 0, 0, 0, 879, 0, 854, 878, 0, 0,
	0, 0, 1547, 0, 0, 0, 0, 0, 0, 0,
	978, 978, 978, 978, 978, 978, 978, 978, 978, 978,
	978, 978, 978, 978, 978, 978, 978, 978, 0, 978,
	0, 385, 29, 0, 1107, 1108, 0, 818, 0, 0,
	0, 790, 0, 854, 0, 268, 763, 0, 0, 87,
	87, 0, 0, 87, 0, 0, 0, 29, 0, 0,
	857, 87, 0, 0, 854, 879, 0, 0, 878, 240,
	0, 268, 248, 87, 85, 0, 0, 0, 0, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	248, 0, 1168, 1169, 1170, 0, 0, 0, 87, 87,
	87, 0, 87, 0, 0, 0, 0, 0, 663, 0,
	681, 682, 683, 0, 0, 0, 0, 0, 0, 87,
	684, 0, 0, 0, 0, 0, 665, 0, 690, 0,
	0, 0, 0, 0, 1147, 854, 1163, 1164, 1165, 87,
	0, 0, 0, 0, 664, 0, 1407, 0, 0, 0,
	678, 0, 0, 0, 0, 0, 0, 1147, 0, 1163,
	1164, 1165, 0, 0, 0, 268, 1012, 1013, 0, 0,
	0, 763, 0, 0, 1018, 0, 1160, 0, 0, 0,
	1023, 1024, 1026, 1028, 1029, 0, 1032, 1033, 0, 0,
	0, 0, 0, 268, 0, 1040, 0, 0, 0, 1160,
	0, 268, 0, 0, 0, 0, 0, 691, 1255, 1256,
	818, 0, 0, 818, 0, 978, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	0, 0, 0, 679, 0, 0, 0, 0, 640, 0,
	85, 268, 0, 1061, 1166, 0, 0, 0, 0, 0,
	0, 0, 1068, 0, 685, 0, 0, 1083, 1083, 1161,
	268, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 0,
	1320, 240, 1161, 0, 0, 0, 680, 0, 0, 0,
	0, 978, 0, 0, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 681, 682, 683, 0,
	0, 0, 0, 0, 0, 1162, 684, 0, 0, 0,
	0, 0, 665, 687, 690, 675, 676, 677, 0, 674,
	671, 672, 673, 666, 667, 668, 669, 670, 0, 0,
	664, 1007, 0, 0, 978, 0, 678, 0, 1008, 0,
	0, 1157, 1158, 1159, 0, 1156, 1153, 1154, 1155, 1148,
	1149, 1150, 1151, 1152, 0, 0, 0, 240, 0, 0,
	240, 240, 0, 0, 1157, 1158, 1159, 0, 1156, 1153,
	1154, 1155, 1148, 1149, 1150, 1151, 1152, 0, 0, 0,
	0, 0, 0, 0, 700, 0, 0, 0, 704, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	659, 0, 0, 663, 689, 681, 682, 683, 0, 0,
	0, 0, 0, 686, 0, 684, 0, 0, 0, 679,
	0, 665, 268, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1226, 0, 763, 1447, 640, 0, 664,
	1232, 0, 0, 0, 0, 678, 0, 0, 0, 0,
	0, 268, 0, 0, 268, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 688, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 29,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1501, 689, 0, 0, 1289, 0, 0, 0,
	0, 0, 686, 0, 0, 0, 0, 0, 679, 687,
	0, 675, 676, 677, 0, 674, 671, 672, 673, 666,
	667, 668, 669, 670, 0, 0, 0, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1147,
	0, 1163, 1164, 1165, 0, 0, 0, 0, 0, 0,
	0, 1406, 0, 0, 0, 0, 0, 0, 1340, 1341,
	763, 680, 0, 0, 0, 1538, 659, 659, 0, 0,
	688, 0, 1365, 0, 1366, 0, 268, 1368, 1369, 1370,
	0, 1160, 0, 0, 0, 0, 0, 0, 1378, 0,
	763, 1378, 0, 0, 0, 0, 0, 0, 268, 268,
	0, 0, 268, 0, 0, 0, 0, 0, 659, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 687, 0,
	675, 676, 677, 0, 674, 671, 672, 673, 666, 667,
	668, 669, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 1187, 0, 848, 0, 0, 0, 0, 0, 1166,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 925, 0, 0, 0, 0, 0, 0,
	663, 0, 681, 682, 683, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 665, 0,
	690, 0, 0, 763, 0, 1442, 1147, 85, 1163, 1164,
	1165, 0, 0, 0, 268, 0, 664, 1162, 1263, 0,
	0, 0, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1378, 0, 0, 268, 1160, 1483,
	0, 0, 0, 0, 0, 0, 0, 268, 0, 659,
	0, 0, 0, 0, 0, 248, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1157, 1158, 1159, 691,
	1156, 1153, 1154, 1155, 1148, 1149, 1150, 1151, 1152, 0,
	689, 0, 0, 0, 0, 0, 0, 0, 0, 686,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1166, 0, 0, 0,
	0, 1515, 1516, 29, 0, 1520, 685, 0, 0, 0,
	1378, 1161, 1085, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	659, 659, 268, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1162, 0, 0, 0, 0, 0,
	1378, 1483, 0, 0, 925, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 700, 0,
	0, 268, 0, 0, 0, 687, 0, 675, 676, 677,
	0, 674, 671, 672, 673, 666, 667, 668, 669, 670,
	0, 0, 0, 0, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 1157, 1158, 1159, 0, 1156, 1153, 1154,
	1155, 1148, 1149, 1150, 1151, 1152, 0, 0, 405, 393,
	394, 395, 392, 381, 700, 0, 0, 0, 0, 0,
	89, 90, 943, 91, 0, 0, 0, 0, 387, 0,
	0, 0, 92, 93, 178, 434, 435, 94, 436, 437,
	0, 95, 183, 96, 402, 420, 438, 439, 0, 430,
	0, 413, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 298, 102, 103, 0, 414, 416, 0, 415, 417,
	104, 105, 106, 107, 440, 108, 441, 442, 0, 0,
	109, 0, 944, 0, 433, 111, 0, 0, 0, 0,
	386, 112, 421, 400, 0, 113, 114, 443, 115, 0,
	0, 0, 299, 848, 116, 431, 848, 194, 0, 117,
	118, 427, 429, 0, 0, 0, 300, 119, 444, 445,
	446, 0, 412, 0, 301, 120, 302, 121, 0, 0,
	432, 303, 122, 304, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 305, 128, 129, 130, 376,
	131, 401, 428, 132, 447, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 306, 136, 307, 422, 137, 138,
	0, 423, 139, 207, 0, 140, 141, 142, 448, 143,
	144, 0, 145, 146, 147, 0, 148, 308, 149, 150,
	390, 151, 0, 152, 153, 0, 154, 256, 418, 155,
	156, 309, 157, 449, 158, 0, 159, 161, 211, 160,
	424, 0, 0, 162, 163, 0, 258, 450, 0, 0,
	257, 425, 426, 399, 164, 165, 166, 167, 0, 0,
	168, 169, 419, 0, 170, 171, 172, 216, 451, 942,
	173, 0, 0, 0, 0, 174, 175, 176, 177, 377,
	0, 0, 0, 29, 0, 0, 0, 0, 0, 373,
	374, 945, 0, 0, 0, 375, 0, 0, 382, 940,
	848, 848, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1467, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	542, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 89, 90, 547, 91, 548, 549, 550, 551,
	552, 553, 554, 555, 92, 93, 178, 179, 180, 94,
	181, 182, 556, 95, 183, 96, 557, 558, 184, 185,
	559, 186, 560, 297, 561, 97, 98, 99, 0, 100,
	562, 101, 563, 298, 102, 103, 564, 565, 566, 567,
	568, 569, 104, 105, 106, 107, 187, 108, 188, 189,
	570, 571, 109, 572, 573, 574, 110, 111, 575, 576,
	700, 577, 190, 112, 191, 578, 579, 113, 114, 192,
	115, 580, 581, 582, 299, 583, 116, 193, 584, 194,
	585, 117, 118, 195, 196, 586, 587, 588, 300, 119,
	197, 198, 199, 589, 200, 590, 301, 120, 302, 121,
	591, 592, 201, 303, 122, 304, 593, 254, 594, 595,
	123, 0, 124, 125, 126, 127, 255, 305, 128, 129,
	130, 596, 131, 597, 202, 132, 203, 133, 134, 598,
	599, 600, 601, 602, 135, 204, 306, 136, 307, 205,
	137, 138, 603, 206, 139, 207, 604, 140, 141, 142,
	208, 143, 144, 605, 145, 146, 147, 606, 148, 308,
	149, 150, 209, 151, 0, 152, 153, 607, 154, 256,
	608, 155, 156, 309, 157, 210, 158, 609, 159, 161,
	211, 160, 212, 610, 611, 162, 163, 612, 258, 213,
	613, 614, 257, 214, 215, 615, 164, 165, 166, 167,
	616, 617, 168, 169, 618, 619, 170, 171, 172, 216,
	217, 620, 173, 621, 622, 623, 624, 174, 175, 176,
	177, 0, 542, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 89, 90, 547, 91, 548, 549,
	550, 551, 552, 553, 554, 555, 92, 93, 178, 179,
	180, 94, 181, 182, 556, 95, 183, 96, 557, 558,
	184, 185, 559, 186, 560, 297, 561, 97, 98, 99,
	0, 100, 562, 101, 563, 298, 102, 103, 564, 565,
	566, 567, 568, 569, 104, 105, 106, 107, 187, 108,
	188, 189, 570, 571, 109, 572, 573, 574, 110, 111,
	575, 576, 0, 577, 190, 112, 191, 578, 579, 113,
	114, 192, 115, 580, 581, 582, 299, 583, 116, 193,
	584, 194, 585, 117, 118, 195, 196, 586, 587, 588,
	300, 119, 197, 198, 199, 589, 200, 590, 301, 120,
	302, 121, 591, 592, 201, 303, 122, 304, 593, 254,
	594, 595, 123, 0, 124, 125, 126, 127, 255, 305,
	128, 129, 130, 596, 131, 597, 202, 132, 203, 133,
	134, 598, 599, 600, 601, 602, 135, 204, 306, 136,
	307, 205, 137, 138, 603, 206, 139, 207, 604, 140,
	141, 142, 208, 143, 144, 605, 145, 146, 147, 606,
	148, 308, 149, 150, 209, 151, 0, 152, 153, 607,
	154, 256, 608, 155, 156, 309, 157, 210, 158, 609,
	159, 161, 211, 160, 212, 610, 611, 162, 163, 612,
	258, 213, 613, 614, 257, 214, 215, 615, 164, 165,
	166, 167, 616, 617, 168, 169, 618, 619, 170, 171,
	172, 216, 217, 620, 173, 621, 622, 623, 624, 174,
	175, 176, 177, 405, 393, 394, 395, 392, 381, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 387, 0, 0, 0, 92, 93, 178,
	434, 435, 94, 436, 437, 0, 95, 183, 96, 402,
	420, 438, 439, 0, 430, 0, 413, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 298, 102, 103, 0,
	414, 416, 0, 415, 417, 104, 105, 106, 107, 440,
	108, 441, 442, 471, 0, 109, 0, 0, 0, 433,
	111, 0, 0, 0, 0, 386, 112, 421, 400, 0,
	113, 114, 443, 115, 0, 0, 0, 299, 0, 116,
	431, 0, 194, 0, 117, 118, 427, 429, 0, 0,
	0, 300, 119, 444, 445, 446, 0, 412, 0, 301,
	120, 302, 121, 0, 0, 432, 303, 122, 304, 0,
	254, 0, 0, 123, 0, 124, 125, 126, 127, 255,
	305, 128, 129, 130, 376, 131, 401, 428, 132, 447,
	133, 134, 0, 0, 0, 0, 0, 135, 204, 306,
	136, 307, 422, 137, 138, 0, 423, 139, 207, 0,
	140, 141, 142, 448, 143, 144, 0, 145, 146, 147,
	0, 148, 308, 149, 150, 390, 151, 0, 152, 153,
	43, 154, 256, 418, 155, 156, 309, 157, 449, 158,
	0, 159, 161, 211, 160, 424, 0, 45, 162, 163,
	0, 258, 450, 0, 0, 257, 425, 426, 399, 164,
	165, 166, 167, 0, 0, 168, 169, 419, 0, 170,
	171, 172, 296, 451, 0, 173, 0, 0, 0, 41,
	174, 175, 176, 177, 377, 42, 405, 393, 394, 395,
	392, 381, 0, 0, 373, 374, 0, 0, 89, 90,
	375, 91, 0, 382, 0, 0, 387, 0, 0, 0,
	92, 93, 178, 434, 435, 94, 436, 437, 0, 95,
	183, 96, 402, 420, 438, 439, 0, 430, 0, 413,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 298,
	102, 103, 0, 414, 416, 0, 415, 417, 104, 105,
	106, 107, 440, 108, 441, 442, 0, 0, 109, 0,
	0, 0, 433, 111, 0, 0, 0, 0, 386, 112,
	421, 400, 0, 113, 114, 443, 115, 0, 0, 0,
	299, 0, 116, 431, 0, 194, 0, 117, 118, 427,
	429, 0, 0, 0, 300, 119, 444, 445, 446, 0,
	412, 0, 301, 120, 302, 121, 0, 0, 432, 303,
	122, 304, 0, 254, 0, 0, 123, 0, 124, 125,
	126, 127, 255, 305, 128, 129, 130, 376, 131, 401,
	428, 132, 447, 133, 134, 0, 0, 0, 0, 0,
	135, 204, 306, 136, 307, 422, 137, 138, 0, 423,
	139, 207, 0, 140, 141, 142, 448, 143, 144, 0,
	145, 146, 147, 0, 148, 308, 149, 150, 390, 151,
	0, 152, 153, 43, 154, 256, 418, 155, 156, 309,
	157, 449, 158, 0, 159, 161, 211, 160, 424, 0,
	45, 162, 163, 0, 258, 450, 0, 0, 257, 425,
	426, 399, 164, 165, 166, 167, 0, 0, 168, 169,
	419, 0, 170, 171, 172, 296, 451, 0, 173, 0,
	0, 0, 41, 174, 175, 176, 177, 377, 42, 405,
	393, 394, 395, 392, 381, 0, 0, 373, 374, 0,
	0, 89, 90, 375, 91, 0, 382, 0, 0, 387,
	0, 0, 0, 92, 93, 178, 434, 435, 94, 436,
	437, 988, 95, 183, 96, 402, 420, 438, 439, 0,
	430, 0, 413, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 298, 102, 103, 0, 414, 416, 0, 415,
	417, 104, 105, 106, 107, 440, 108, 441, 442, 0,
	0, 109, 0, 0, 0, 433, 111, 0, 0, 0,
	0, 386, 112, 421, 400, 0, 113, 114, 443, 115,
	0, 0, 993, 299, 0, 116, 431, 0, 194, 0,
	117, 118, 427, 429, 0, 0, 0, 300, 119, 444,
	445, 446, 0, 412, 0, 301, 120, 302, 121, 0,
	989, 432, 303, 122, 304, 0, 254, 0, 0, 123,
	0, 124, 125, 126, 127, 255, 305, 128, 129, 130,
	376, 131, 401, 428, 132, 447, 133, 134, 0, 0,
	0, 0, 0, 135, 204, 306, 136, 307, 422, 137,
	138, 0, 423, 139, 207, 0, 140, 141, 142, 448,
	143, 144, 0, 145, 146, 147, 0, 148, 308, 149,
	150, 390, 151, 0, 152, 153, 0, 154, 256, 418,
	155, 156, 309, 157, 449, 158, 0, 159, 161, 211,
	160, 424, 0, 0, 162, 163, 0, 258, 450, 0,
	990, 257, 425, 426, 399, 164, 165, 166, 167, 0,
	0, 168, 169, 419, 0, 170, 171, 172, 216, 451,
	0, 173, 0, 0, 0, 0, 174, 175, 176, 177,
	377, 0, 405, 393, 394, 395, 392, 381, 0, 0,
	373, 374, 0, 0, 89, 90, 375, 91, 0, 382,
	0, 0, 387, 0, 0, 0, 92, 93, 178, 434,
	435, 94, 436, 437, 0, 95, 183, 96, 402, 420,
	438, 439, 0, 430, 0, 413, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 298, 102, 103, 0, 414,
	416, 0, 415, 417, 104, 105, 106, 107, 440, 108,
	441, 442, 0, 0, 109, 0, 0, 0, 433, 111,
	0, 0, 0, 0, 386, 112, 421, 400, 0, 113,
	114, 443, 115, 0, 0, 0, 299, 0, 116, 431,
	0, 194, 0, 117, 118, 427, 429, 0, 0, 0,
	300, 119, 444, 445, 446, 0, 412, 0, 301, 120,
	302, 121, 0, 0, 432, 303, 122, 304, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 305,
	128, 129, 130, 376, 131, 401, 428, 132, 447, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 306, 136,
	307, 422, 137, 138, 0, 423, 139, 207, 0, 140,
	141, 142, 448, 143, 144, 0, 145, 146, 147, 0,
	148, 308, 149, 150, 390, 151, 0, 152, 153, 0,
	154, 256, 418, 155, 156, 309, 157, 449, 158, 0,
	159, 161, 211, 160, 424, 0, 0, 162, 163, 0,
	258, 450, 0, 0, 257, 425, 426, 399, 164, 165,
	166, 167, 0, 0, 168, 169, 419, 0, 170, 171,
	172, 216, 451, 0, 173, 0, 0, 0, 0, 174,
	175, 176, 177, 377, 0, 405, 393, 394, 395, 392,
	381, 0, 0, 373, 374, 0, 0, 89, 90, 375,
	91, 0, 382, 1323, 0, 387, 0, 0, 0, 92,
	93, 178, 434, 435, 94, 436, 437, 0, 95, 183,
	96, 402, 420, 438, 439, 0, 430, 0, 413, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 298, 102,
	103, 0, 414, 416, 0, 415, 417, 104, 105, 106,
	107, 440, 108, 441, 442, 0, 0, 109, 0, 0,
	0, 433, 111, 0, 0, 0, 0, 386, 112, 421,
	400, 0, 113, 114, 443, 115, 0, 0, 0, 299,
	0, 116, 431, 0, 194, 0, 117, 118, 427, 429,
	0, 0, 0, 300, 119, 444, 445, 446, 0, 412,
	0, 301, 120, 302, 121, 0, 0, 432, 303, 122,
	304, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 305, 128, 129, 130, 376, 131, 401, 428,
	132, 447, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 306, 136, 307, 422, 137, 138, 0, 423, 139,
	207, 0, 140, 141, 142, 448, 143, 144, 0, 145,
	146, 147, 0, 148, 308, 149, 150, 390, 151, 0,
	152, 153, 0, 154, 256, 418, 155, 156, 309, 157,
	449, 158, 0, 159, 161, 211, 160, 424, 0, 0,
	162, 163, 0, 258, 450, 0, 0, 257, 425, 426,
	399, 164, 165, 166, 167, 0, 0, 168, 169, 419,
	0, 170, 171, 172, 216, 451, 0, 173, 0, 0,
	0, 0, 174, 175, 176, 177, 377, 0, 405, 393,
	394, 395, 392, 381, 0, 0, 373, 374, 0, 0,
	89, 90, 375, 91, 0, 382, 1266, 0, 387, 0,
	0, 0, 92, 93, 178, 434, 435, 94, 436, 437,
	0, 95, 183, 96, 402, 420, 438, 439, 0, 430,
	0, 413, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 298, 102, 103, 0, 414, 416, 0, 415, 417,
	104, 105, 106, 107, 440, 108, 441, 442, 0, 0,
	109, 0, 0, 0, 433, 111, 0, 0, 0, 0,
	386, 112, 421, 400, 0, 113, 114, 443, 115, 0,
	0, 0, 299, 0, 116, 431, 0, 194, 0, 117,
	118, 427, 429, 0, 0, 0, 300, 119, 444, 445,
	446, 0, 412, 0, 301, 120, 302, 121, 0, 0,
	432, 303, 122, 304, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 305, 128, 129, 130, 376,
	131, 401, 428, 132, 447, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 306, 136, 307, 422, 137, 138,
	0, 423, 139, 207, 0, 140, 141, 142, 448, 143,
	144, 0, 145, 146, 147, 0, 148, 308, 149, 150,
	390, 151, 0, 152, 153, 0, 154, 256, 418, 155,
	156, 309, 157, 449, 158, 0, 159, 161, 211, 160,
	424, 0, 0, 162, 163, 0, 258, 450, 0, 0,
	257, 425, 426, 399, 164, 165, 166, 167, 0, 0,
	168, 169, 419, 0, 170, 171, 172, 216, 451, 0,
	173, 0, 0, 0, 0, 174, 175, 176, 177, 377,
	0, 405, 393, 394, 395, 392, 381, 0, 0, 373,
	374, 0, 0, 89, 90, 375, 91, 0, 382, 939,
	0, 387, 0, 0, 0, 92, 93, 178, 434, 435,
	94, 436, 437, 0, 95, 183, 96, 402, 420, 438,
	439, 0, 430, 0, 413, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 298, 102, 103, 0, 414, 416,
	0, 415, 417, 104, 105, 106, 107, 440, 108, 441,
	442, 0, 0, 109, 0, 0, 0, 433, 111, 0,
	0, 0, 0, 386, 112, 421, 400, 0, 113, 114,
	443, 115, 0, 0, 0, 299, 0, 116, 431, 0,
	194, 0, 117, 118, 427, 429, 0, 0, 0, 300,
	119, 444, 445, 446, 0, 412, 0, 301, 120, 302,
	121, 0, 0, 432, 303, 122, 304, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 305, 128,
	129, 130, 376, 131, 401, 428, 132, 447, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 306, 136, 307,
	422, 137, 138, 0, 423, 139, 207, 0, 140, 141,
	142, 448, 143, 144, 0, 145, 146, 147, 0, 148,
	308, 149, 150, 390, 151, 0, 152, 153, 0, 154,
	256, 418, 155, 156, 309, 157, 449, 158, 0, 159,
	161, 211, 160, 424, 0, 0, 162, 163, 0, 258,
	450, 0, 0, 257, 425, 426, 399, 164, 165, 166,
	167, 0, 0, 168, 169, 419, 0, 170, 171, 172,
	216, 451, 0, 173, 0, 0, 0, 0, 174, 175,
	176, 177, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 0, 0, 0, 0, 375, 706,
	935, 382, 405, 393, 394, 395, 392, 381, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 387, 0, 0, 0, 92, 93, 178, 434,
	435, 94, 436, 437, 0, 95, 183, 96, 402, 420,
	438, 439, 0, 430, 0, 413, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 298, 102, 103, 0, 414,
	416, 0, 415, 417, 104, 105, 106, 107, 440, 108,
	441, 442, 0, 0, 109, 0, 0, 0, 433, 111,
	0, 0, 0, 0, 386, 112, 421, 400, 0, 113,
	114, 443, 115, 0, 0, 0, 299, 0, 116, 431,
	0, 194, 0, 117, 118, 427, 429, 0, 0, 0,
	300, 119, 444, 445, 446, 0, 412, 0, 301, 120,
	302, 121, 0, 0, 432, 303, 122, 304, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 305,
	128, 129, 130, 376, 131, 401, 428, 132, 447, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 306, 136,
	307, 422, 137, 138, 0, 423, 139, 207, 0, 140,
	141, 142, 448, 143, 144, 0, 145, 146, 147, 0,
	148, 308, 149, 150, 390, 151, 0, 152, 153, 0,
	154, 256, 418, 155, 156, 309, 157, 449, 158, 0,
	159, 161, 211, 160, 424, 0, 0, 162, 163, 0,
	258, 450, 0, 0, 257, 425, 426, 399, 164, 165,
	166, 167, 0, 0, 168, 169, 419, 0, 170, 171,
	172, 216, 451, 1272, 173, 0, 0, 0, 0, 174,
	175, 176, 177, 377, 0, 405, 393, 394, 395, 392,
	381, 0, 0, 373, 374, 0, 0, 89, 90, 375,
	91, 0, 382, 0, 0, 387, 0, 0, 0, 92,
	93, 178, 434, 435, 94, 436, 437, 0, 95, 183,
	96, 402, 420, 438, 439, 0, 430, 0, 413, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 298, 102,
	103, 0, 414, 416, 0, 415, 417, 104, 105, 106,
	107, 440, 108, 441, 442, 471, 0, 109, 0, 0,
	0, 433, 111, 0, 0, 0, 0, 386, 112, 421,
	400, 0, 113, 114, 443, 115, 0, 0, 0, 299,
	0, 116, 431, 0, 194, 0, 117, 118, 427, 429,
	0, 0, 0, 300, 119, 444, 445, 446, 0, 412,
	0, 301, 120, 302, 121, 0, 0, 432, 303, 122,
	304, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 305, 128, 129, 130, 376, 131, 401, 428,
	132, 447, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 306, 136, 307, 422, 137, 138, 0, 423, 139,
	207, 0, 140, 141, 142, 448, 143, 144, 0, 145,
	146, 147, 0, 148, 308, 149, 150, 390, 151, 0,
	152, 153, 0, 154, 256, 418, 155, 156, 309, 157,
	449, 158, 0, 159, 161, 211, 160, 424, 0, 0,
	162, 163, 0, 258, 450, 0, 0, 257, 425, 426,
	399, 164, 165, 166, 167, 0, 0, 168, 169, 419,
	0, 170, 171, 172, 216, 451, 0, 173, 0, 0,
	0, 0, 174, 175, 176, 177, 377, 0, 405, 393,
	394, 395, 392, 381, 0, 0, 373, 374, 0, 0,
	89, 90, 375, 91, 0, 382, 0, 0, 387, 0,
	0, 0, 92, 93, 178, 434, 435, 94, 436, 437,
	0, 95, 183, 96, 402, 420, 438, 439, 0, 430,
	0, 413, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 298, 102, 103, 0, 414, 416, 0, 415, 417,
	104, 105, 106, 107, 440, 108, 441, 442, 0, 0,
	109, 0, 0, 0, 433, 111, 0, 0, 0, 0,
	386, 112, 421, 400, 0, 113, 114, 443, 115, 0,
	0, 993, 299, 0, 116, 431, 0, 194, 0, 117,
	118, 427, 429, 0, 0, 0, 300, 119, 444, 445,
	446, 0, 412, 0, 301, 120, 302, 121, 0, 0,
	432, 303, 122, 304, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 305, 128, 129, 130, 376,
	131, 401, 428, 132, 447, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 306, 136, 307, 422, 137, 138,
	0, 423, 139, 207, 0, 140, 141, 142, 448, 143,
	144, 0, 145, 146, 147, 0, 148, 308, 149, 150,
	390, 151, 0, 152, 153, 0, 154, 256, 418, 155,
	156, 309, 157, 449, 158, 0, 159, 161, 211, 160,
	424, 0, 0, 162, 163, 0, 258, 450, 0, 0,
	257, 425, 426, 399, 164, 165, 166, 167, 0, 0,
	168, 169, 419, 0, 170, 171, 172, 216, 451, 0,
	173, 0, 0, 0, 0, 174, 175, 176, 177, 377,
	0, 405, 393, 394, 395, 392, 381, 0, 0, 373,
	374, 0, 0, 89, 90, 375, 91, 0, 382, 0,
	0, 387, 0, 0, 0, 92, 93, 178, 434, 435,
	94, 436, 437, 0, 95, 183, 96, 402, 420, 438,
	439, 0, 430, 0, 413, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 298, 102, 103, 0, 414, 416,
	0, 415, 417, 104, 105, 106, 107, 440, 108, 441,
	442, 0, 0, 109, 0, 0, 0, 433, 111, 0,
	0, 0, 0, 386, 112, 421, 400, 0, 113, 114,
	443, 115, 0, 0, 0, 299, 0, 116, 431, 0,
	194, 0, 117, 118, 427, 429, 0, 0, 0, 300,
	119, 444, 445, 446, 0, 412, 0, 301, 120, 302,
	121, 0, 0, 432, 303, 122, 304, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 305, 128,
	129, 130, 376, 131, 401, 428, 132, 447, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 306, 136, 307,
	422, 137, 138, 0, 423, 139, 207, 0, 140, 141,
	142, 448, 143, 144, 0, 145, 146, 147, 0, 148,
	308, 149, 150, 390, 151, 0, 152, 153, 0, 154,
	256, 418, 155, 156, 309, 157, 449, 158, 0, 159,
	161, 211, 160, 424, 0, 0, 162, 163, 0, 258,
	450, 0, 0, 257, 425, 426, 399, 164, 165, 166,
	167, 0, 0, 168, 169, 419, 0, 170, 171, 172,
	216, 451, 0, 173, 0, 0, 0, 0, 174, 175,
	176, 177, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 373, 374, 371, 0, 0, 0, 375, 0,
	0, 382, 405, 393, 394, 395, 392, 381, 0, 0,
	0, 0, 0, 0, 89, 90, 647, 91, 0, 0,
	0, 0, 387, 0, 0, 0, 92, 93, 178, 434,
	435, 94, 436, 437, 0, 95, 183, 96, 402, 420,
	438, 439, 0, 430, 0, 413, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 298, 102, 103, 0, 414,
	416, 0, 415, 417, 104, 105, 106, 107, 440, 108,
	441, 442, 0, 0, 109, 0, 0, 0, 433, 111,
	0, 0, 0, 0, 386, 112, 421, 400, 0, 113,
	114, 443, 115, 0, 0, 0, 299, 0, 116, 431,
	0, 194, 0, 117, 118, 427, 429, 0, 0, 0,
	300, 119, 444, 445, 446, 0, 412, 0, 301, 120,
	302, 121, 0, 0, 432, 303, 122, 304, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 305,
	128, 129, 130, 376, 131, 401, 428, 132, 447, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 306, 136,
	307, 422, 137, 138, 0, 423, 139, 207, 0, 140,
	141, 142, 448, 143, 144, 0, 145, 146, 147, 0,
	148, 308, 149, 150, 390, 151, 0, 152, 153, 0,
	154, 256, 418, 155, 156, 309, 157, 449, 158, 0,
	159, 161, 211, 160, 424, 0, 0, 162, 163, 0,
	258, 450, 0, 0, 257, 425, 426, 399, 164, 165,
	166, 167, 0, 0, 168, 169, 419, 0, 170, 171,
	172, 216, 451, 0, 173, 0, 0, 0, 0, 174,
	175, 176, 177, 377, 0, 405, 393, 394, 395, 392,
	381, 0, 0, 373, 374, 0, 0, 89, 90, 375,
	91, 0, 382, 0, 0, 387, 0, 0, 0, 92,
	93, 178, 434, 435, 94, 436, 437, 0, 95, 183,
	96, 402, 420, 438, 439, 0, 430, 0, 413, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 298, 102,
	1585, 0, 414, 416, 0, 415, 417, 104, 105, 106,
	107, 440, 108, 441, 442, 0, 0, 109, 0, 0,
	0, 433, 111, 0, 0, 0, 0, 386, 112, 421,
	400, 0, 113, 114, 443, 115, 0, 0, 0, 299,
	0, 116, 431, 0, 194, 0, 117, 118, 427, 429,
	0, 0, 0, 300, 119, 444, 445, 446, 0, 412,
	0, 301, 120, 302, 121, 0, 0, 432, 303, 122,
	304, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 305, 128, 129, 130, 376, 131, 401, 428,
	132, 447, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 306, 136, 307, 422, 137, 138, 0, 423, 139,
	207, 0, 140, 141, 142, 448, 143, 144, 0, 145,
	146, 147, 0, 148, 308, 149, 150, 390, 151, 0,
	152, 153, 0, 154, 256, 418, 155, 156, 309, 157,
	449, 158, 0, 159, 161, 211, 160, 424, 0, 0,
	162, 163, 0, 258, 450, 0, 0, 257, 425, 426,
	399, 164, 165, 1584, 167, 0, 0, 168, 169, 419,
	0, 170, 171, 172, 216, 451, 0, 173, 0, 0,
	0, 0, 174, 175, 176, 177, 377, 0, 405, 393,
	394, 395, 392, 381, 0, 0, 373, 374, 0, 0,
	89, 90, 375, 91, 0, 382, 0, 0, 387, 0,
	0, 0, 92, 93, 1583, 434, 435, 94, 436, 437,
	0, 95, 183, 96, 402, 420, 438, 439, 0, 430,
	0, 413, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 298, 102, 1585, 0, 414, 416, 0, 415, 417,
	104, 105, 106, 107, 440, 108, 441, 442, 0, 0,
	109, 0, 0, 0, 433, 111, 0, 0, 0, 0,
	386, 112, 421, 400, 0, 113, 114, 443, 115, 0,
	0, 0, 299, 0, 116, 431, 0, 194, 0, 117,
	118, 427, 429, 0, 0, 0, 300, 119, 444, 445,
	446, 0, 412, 0, 301, 120, 302, 121, 0, 0,
	432, 303, 122, 304, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 305, 128, 129, 130, 376,
	131, 401, 428, 132, 447, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 306, 136, 307, 422, 137, 138,
	0, 423, 139, 207, 0, 140, 141, 142, 448, 143,
	144, 0, 145, 146, 147, 0, 148, 308, 149, 150,
	390, 151, 0, 152, 153, 0, 154, 256, 418, 155,
	156, 309, 157, 449, 158, 0, 159, 161, 211, 160,
	424, 0, 0, 162, 163, 0, 258, 450, 0, 0,
	257, 425, 426, 399, 164, 165, 1584, 167, 0, 0,
	168, 169, 419, 0, 170, 171, 172, 216, 451, 0,
	173, 0, 0, 0, 0, 174, 175, 176, 177, 377,
	0, 405, 393, 394, 395, 392, 381, 0, 0, 373,
	374, 0, 0, 89, 90, 375, 91, 0, 382, 0,
	0, 387, 0, 0, 0, 92, 93, 178, 434, 435,
	94, 436, 437, 0, 95, 183, 96, 402, 420, 438,
	439, 0, 430, 0, 413, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 298, 102, 103, 0, 414, 416,
	0, 415, 417, 104, 105, 106, 107, 440, 108, 441,
	442, 0, 0, 109, 0, 0, 0, 433, 111, 0,
	0, 0, 0, 386, 112, 421, 400, 0, 113, 114,
	443, 115, 0, 0, 0, 299, 0, 116, 431, 0,
	194, 0, 117, 118, 427, 429, 0, 0, 0, 300,
	119, 444, 445, 446, 0, 412, 0, 301, 120, 302,
	121, 0, 0, 432, 303, 122, 304, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 305, 128,
	129, 130, 376, 131, 401, 428, 132, 447, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 306, 136, 307,
	422, 137, 138, 0, 423, 139, 207, 0, 140, 141,
	142, 448, 143, 144, 0, 145, 146, 147, 0, 148,
	308, 149, 150, 390, 151, 0, 152, 153, 0, 154,
	256, 418, 155, 156, 309, 157, 449, 158, 0, 159,
	161, 211, 160, 424, 0, 0, 162, 163, 0, 258,
	450, 0, 0, 257, 425, 426, 399, 164, 165, 166,
	167, 0, 0, 168, 169, 419, 0, 170, 171, 172,
	216, 451, 0, 173, 0, 0, 0, 0, 174, 175,
	176, 177, 377, 0, 405, 393, 394, 395, 392, 381,
	0, 0, 373, 374, 0, 0, 89, 90, 375, 91,
	0, 382, 0, 0, 387, 0, 0, 0, 92, 93,
	178, 434, 435, 94, 436, 437, 0, 95, 183, 96,
	402, 420, 438, 439, 0, 430, 0, 413, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 298, 102, 103,
	0, 414, 416, 0, 415, 417, 104, 105, 106, 107,
	440, 108, 441, 442, 0, 0, 109, 0, 0, 0,
	433, 111, 0, 0, 0, 0, 386, 112, 421, 400,
	0, 113, 114, 443, 115, 0, 0, 0, 299, 0,
	116, 431, 0, 194, 0, 117, 118, 427, 429, 0,
	0, 0, 300, 119, 444, 445, 446, 0, 412, 0,
	301, 120, 302, 121, 0, 0, 432, 303, 122, 304,
	0, 254, 0, 0, 123, 0, 124, 125, 126, 127,
	255, 305, 128, 129, 130, 0, 131, 401, 428, 132,
	447, 133, 134, 0, 0, 0, 0, 0, 135, 204,
	306, 136, 307, 422, 137, 138, 0, 423, 139, 207,
	0, 140, 141, 142, 448, 143, 144, 0, 145, 146,
	147, 0, 148, 308, 149, 150, 983, 151, 0, 152,
	153, 0, 154, 256, 418, 155, 156, 309, 157, 449,
	158, 0, 159, 161, 211, 160, 424, 0, 0, 162,
	163, 0, 258, 450, 0, 0, 257, 425, 426, 399,
	164, 165, 166, 167, 0, 0, 168, 169, 419, 0,
	170, 171, 172, 216, 451, 0, 173, 0, 0, 0,
	0, 174, 175, 176, 177, 405, 393, 394, 395, 392,
	381, 0, 0, 0, 0, 979, 980, 89, 90, 0,
	91, 981, 0, 0, 982, 387, 0, 0, 0, 92,
	93, 0, 434, 435, 94, 436, 437, 0, 95, 183,
	96, 402, 420, 438, 439, 0, 430, 0, 413, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 298, 102,
	1585, 0, 414, 416, 0, 415, 417, 104, 105, 106,
	107, 440, 108, 441, 442, 0, 0, 109, 0, 0,
	0, 433, 111, 0, 0, 0, 0, 386, 112, 421,
	400, 0, 113, 114, 443, 115, 0, 0, 0, 299,
	0, 116, 431, 0, 194, 0, 117, 118, 427, 429,
	0, 0, 0, 300, 119, 444, 445, 446, 0, 412,
	0, 0, 120, 302, 121, 0, 0, 432, 303, 122,
	0, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 305, 128, 129, 130, 376, 131, 401, 428,
	132, 447, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 306, 136, 307, 422, 137, 138, 0, 423, 139,
	207, 0, 140, 141, 142, 448, 143, 144, 0, 145,
	146, 147, 0, 148, 308, 149, 150, 390, 151, 0,
	152, 153, 0, 154, 256, 418, 155, 156, 0, 157,
	449, 158, 0, 159, 161, 211, 160, 424, 0, 0,
	162, 163, 0, 258, 450, 0, 0, 257, 425, 426,
	399, 164, 165, 1584, 167, 0, 0, 168, 169, 419,
	0, 170, 171, 172, 216, 451, 0, 173, 0, 0,
	0, 0, 174, 175, 176, 177, 405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 373, 374, 89, 90,
	0, 91, 375, 0, 0, 382, 0, 0, 0, 0,
	92, 93, 178, 179, 180, 94, 181, 182, 0, 95,
	183, 96, 0, 420, 184, 185, 0, 430, 0, 413,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 298,
	102, 103, 0, 414, 416, 0, 415, 417, 104, 105,
	106, 107, 187, 108, 188, 189, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 190, 112,
	421, 0, 0, 113, 114, 192, 115, 0, 0, 0,
	299, 0, 116, 431, 0, 194, 0, 117, 118, 427,
	429, 0, 0, 0, 300, 119, 197, 198, 199, 0,
	200, 0, 301, 120, 302, 121, 0, 0, 432, 303,
	122, 304, 0, 254, 0, 0, 123, 0, 124, 125,
	126, 127, 255, 305, 128, 129, 130, 0, 131, 0,
	428, 132, 203, 133, 134, 0, 0, 0, 0, 0,
	135, 204, 306, 136, 307, 422, 137, 138, 0, 423,
	139, 207, 0, 140, 141, 142, 208, 143, 144, 0,
	145, 146, 147, 0, 148, 308, 149, 150, 209, 151,
	0, 152, 153, 0, 154, 256, 418, 155, 156, 309,
	157, 210, 158, 0, 159, 161, 211, 160, 424, 0,
	0, 162, 163, 0, 258, 213, 0, 0, 257, 425,
	426, 0, 164, 165, 166, 167, 0, 0, 168, 169,
	419, 0, 170, 171, 172, 216, 217, 0, 173, 0,
	0, 0, 0, 174, 175, 176, 177, 292, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 1380, 0, 0, 0,
	0, 92, 93, 178, 179, 180, 94, 181, 182, 0,
	95, 183, 96, 0, 0, 184, 185, 0, 186, 0,
	297, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	298, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 187, 108, 188, 189, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 190,
	112, 191, 0, 0, 113, 114, 192, 115, 0, 0,
	0, 299, 0, 116, 193, 0, 194, 0, 117, 118,
	195, 196, 0, 0, 0, 300, 119, 197, 198, 199,
	0, 200, 0, 301, 120, 302, 121, 0, 0, 201,
	303, 122, 304, 0, 254, 0, 0, 123, 0, 124,
	125, 126, 127, 255, 305, 128, 129, 130, 0, 131,
	0, 202, 132, 203, 133, 134, 0, 0, 0, 0,
	0, 135, 204, 306, 136, 307, 205, 137, 138, 0,
	206, 139, 207, 0, 140, 141, 142, 208, 143, 144,
	0, 145, 146, 147, 0, 148, 308, 149, 150, 209,
	151, 0, 152, 153, 43, 154, 256, 0, 155, 156,
	309, 157, 210, 158, 0, 159, 161, 211, 160, 212,
	0, 45, 162, 163, 0, 258, 213, 0, 0, 257,
	214, 215, 0, 164, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 170, 171, 172, 296, 217, 0, 173,
	0, 0, 0, 41, 174, 175, 176, 177, 0, 42,
	292, 522, 526, 0, 527, 517, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 40, 0, 0,
	0, 0, 0, 0, 92, 93, 178, 179, 180, 94,
	181, 182, 0, 95, 183, 96, 0, 0, 184, 185,
	0, 186, 0, 297, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 298, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 187, 108, 188, 189,
	530, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 190, 112, 191, 519, 0, 113, 114, 192,
	115, 0, 0, 0, 299, 0, 116, 193, 0, 194,
	0, 117, 118, 195, 196, 0, 0, 0, 300, 119,
	197, 198, 199, 0, 200, 0, 301, 120, 302, 121,
	0, 0, 201, 303, 122, 304, 0, 254, 0, 0,
	123, 0, 124, 125, 126, 127, 255, 305, 128, 129,
	130, 0, 131, 0, 202, 132, 203, 133, 134, 0,
	520, 0, 0, 0, 135, 204, 306, 136, 307, 205,
	137, 138, 0, 206, 139, 207, 0, 140, 141, 142,
	208, 143, 144, 0, 145, 146, 147, 0, 148, 308,
	149, 150, 209, 151, 0, 152, 153, 0, 154, 256,
	0, 155, 156, 309, 157, 210, 158, 0, 159, 161,
	211, 160, 212, 0, 0, 162, 163, 0, 258, 213,
	0, 0, 257, 214, 215, 518, 164, 165, 166, 167,
	0, 0, 168, 169, 0, 0, 170, 171, 172, 216,
	217, 0, 173, 0, 0, 0, 0, 174, 175, 176,
	177, 292, 522, 526, 0, 527, 517, 0, 0, 0,
	0, 528, 523, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 178, 179, 180,
	94, 181, 182, 0, 95, 183, 96, 0, 0, 184,
	185, 0, 186, 0, 297, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 298, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 187, 108, 188,
	189, 513, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 190, 112, 191, 519, 0, 113, 114,
	192, 115, 0, 0, 0, 299, 0, 116, 193, 0,
	194, 0, 117, 118, 195, 196, 0, 0, 0, 300,
	119, 197, 198, 199, 0, 200, 0, 301, 120, 302,
	121, 0, 0, 201, 303, 122, 304, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 305, 128,
	129, 130, 0, 131, 0, 202, 132, 203, 133, 134,
	0, 520, 0, 0, 0, 135, 204, 306, 136, 307,
	205, 137, 138, 0, 206, 139, 207, 0, 140, 141,
	142, 208, 143, 144, 0, 145, 146, 147, 0, 148,
	308, 149, 150, 209, 151, 0, 152, 153, 0, 154,
	256, 0, 155, 156, 309, 157, 210, 158, 0, 159,
	161, 211, 160, 212, 0, 0, 162, 163, 0, 258,
	213, 0, 0, 257, 214, 215, 518, 164, 165, 166,
	167, 0, 0, 168, 169, 0, 0, 170, 171, 172,
	216, 217, 0, 173, 0, 0, 0, 0, 174, 175,
	176, 177, 292, 522, 526, 0, 527, 517, 0, 0,
	0, 0, 528, 523, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 178, 179,
	180, 94, 181, 182, 0, 95, 183, 96, 0, 0,
	184, 185, 0, 186, 0, 297, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 298, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 187, 108,
	188, 189, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 190, 112, 191, 519, 0, 113,
	114, 192, 115, 0, 0, 0, 299, 0, 116, 193,
	0, 194, 0, 117, 118, 195, 196, 0, 0, 0,
	300, 119, 197, 198, 199, 0, 200, 0, 301, 120,
	302, 121, 0, 0, 201, 303, 122, 304, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 305,
	128, 129, 130, 0, 131, 0, 202, 132, 203, 133,
	134, 0, 520, 0, 0, 0, 135, 204, 306, 136,
	307, 205, 137, 138, 0, 206, 139, 207, 0, 140,
	141, 142, 208, 143, 144, 0, 145, 146, 147, 0,
	148, 308, 149, 150, 209, 151, 0, 152, 153, 0,
	154, 256, 0, 155, 156, 309, 157, 210, 158, 0,
	159, 161, 211, 160, 212, 0, 0, 162, 163, 0,
	258, 213, 0, 0, 257, 214, 215, 518, 164, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 170, 171,
	172, 216, 217, 86, 173, 0, 0, 0, 0, 174,
	175, 176, 177, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 528, 523, 0, 0, 92, 93, 178,
	179, 180, 94, 181, 182, 0, 95, 183, 96, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 187,
	108, 188, 189, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 190, 112, 191, 0, 0,
	113, 114, 192, 115, 0, 0, 0, 0, 0, 116,
	193, 0, 194, 0, 117, 118, 195, 196, 0, 0,
	0, 0, 119, 197, 198, 199, 0, 200, 0, 0,
	120, 0, 121, 0, 0, 201, 0, 122, 0, 0,
	254, 0, 0, 123, 0, 124, 125, 126, 127, 255,
	0, 128, 129, 130, 0, 131, 0, 202, 132, 203,
	133, 134, 0, 0, 267, 0, 0, 135, 204, 0,
	136, 0, 205, 137, 138, 0, 206, 139, 207, 0,
	140, 141, 142, 208, 143, 144, 0, 145, 146, 147,
	0, 148, 0, 149, 150, 209, 151, 0, 152, 153,
	43, 154, 256, 0, 155, 156, 0, 157, 210, 158,
	0, 159, 161, 211, 160, 212, 0, 45, 162, 163,
	0, 258, 213, 0, 0, 257, 214, 215, 0, 164,
	165, 166, 167, 0, 0, 168, 169, 0, 0, 170,
	171, 172, 296, 217, 0, 173, 0, 0, 0, 41,
	174, 175, 176, 177, 86, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 850, 0, 0, 0, 0, 92, 93,
	178, 179, 180, 94, 181, 182, 0, 95, 183, 96,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	187, 108, 188, 189, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 190, 112, 191, 0,
	0, 113, 114, 192, 115, 0, 0, 0, 0, 0,
	116, 193, 0, 194, 0, 117, 118, 195, 196, 0,
	0, 0, 0, 119, 197, 198, 199, 0, 200, 0,
	0, 120, 0, 121, 0, 0, 201, 0, 122, 0,
	0, 254, 0, 0, 123, 0, 124, 125, 126, 127,
	255, 0, 128, 129, 130, 0, 131, 0, 202, 132,
	203, 133, 134, 0, 0, 0, 0, 0, 135, 204,
	0, 136, 0, 205, 137, 138, 0, 206, 139, 207,
	0, 140, 141, 142, 208, 143, 144, 0, 145, 146,
	147, 0, 148, 0, 149, 150, 209, 151, 0, 152,
	153, 43, 154, 256, 0, 155, 156, 0, 157, 210,
	158, 0, 159, 161, 211, 160, 212, 0, 45, 162,
	163, 0, 258, 213, 0, 0, 257, 214, 215, 0,
	164, 165, 166, 167, 0, 0, 168, 169, 0, 0,
	170, 171, 172, 296, 217, 0, 173, 0, 0, 0,
	41, 174, 175, 176, 177, 86, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 40, 0, 1082, 0, 0, 92,
	93, 178, 179, 180, 94, 181, 182, 0, 95, 183,
	96, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 187, 108, 188, 189, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 190, 112, 191,
	0, 0, 113, 114, 192, 115, 0, 0, 0, 0,
	0, 116, 193, 0, 194, 0, 117, 118, 195, 196,
	0, 0, 0, 0, 119, 197, 198, 199, 0, 200,
	0, 0, 120, 0, 121, 0, 0, 201, 0, 122,
	0, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 0, 128, 129, 130, 0, 131, 0, 202,
	132, 203, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 0, 136, 0, 205, 137, 138, 0, 206, 139,
	207, 0, 140, 141, 142, 208, 143, 144, 0, 145,
	146, 147, 0, 148, 0, 149, 150, 209, 151, 0,
	152, 153, 0, 154, 256, 0, 155, 156, 0, 157,
	210, 158, 0, 159, 161, 211, 160, 212, 0, 0,
	162, 163, 0, 258, 213, 0, 0, 257, 214, 215,
	0, 164, 165, 166, 167, 0, 86, 168, 169, 0,
	0, 170, 171, 172, 216, 217, 0, 173, 89, 90,
	0, 91, 174, 175, 176, 177, 0, 0, 0, 0,
	92, 93, 178, 179, 180, 94, 181, 182, 0, 95,
	183, 96, 0, 0, 184, 185, 362, 186, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 187, 108, 188, 189, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 190, 112,
	191, 0, 0, 113, 114, 192, 115, 0, 0, 0,
	0, 0, 116, 193, 0, 194, 0, 117, 118, 195,
	196, 0, 0, 0, 0, 119, 197, 198, 199, 0,
	200, 0, 0, 120, 0, 121, 0, 0, 201, 0,
	122, 0, 0, 254, 0, 0, 123, 0, 124, 125,
	126, 127, 255, 0, 128, 129, 130, 0, 131, 0,
	202, 132, 203, 133, 134, 0, 0, 267, 0, 0,
	135, 204, 0, 136, 0, 205, 137, 138, 0, 206,
	139, 207, 0, 140, 141, 142, 208, 143, 144, 0,
	145, 146, 147, 0, 148, 0, 149, 150, 209, 151,
	0, 152, 153, 0, 154, 256, 0, 155, 156, 0,
	157, 210, 158, 0, 159, 161, 211, 160, 212, 0,
	0, 162, 163, 0, 258, 213, 0, 0, 257, 214,
	215, 0, 164, 165, 166, 167, 0, 0, 168, 169,
	0, 0, 170, 171, 172, 216, 217, 0, 173, 0,
	0, 0, 0, 174, 175, 176, 177, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 850, 0, 0, 0,
	0, 92, 93, 178, 179, 180, 94, 181, 182, 0,
	95, 183, 96, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 187, 108, 188, 189, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 190,
	112, 191, 0, 0, 113, 114, 192, 115, 0, 0,
	0, 0, 0, 116, 193, 0, 194, 0, 117, 118,
	195, 196, 0, 0, 0, 0, 119, 197, 198, 199,
	0, 200, 0, 0, 120, 0, 121, 0, 0, 201,
	0, 122, 0, 0, 254, 0, 0, 123, 0, 124,
	125, 126, 127, 255, 0, 128, 129, 130, 0, 131,
	0, 202, 132, 203, 133, 134, 0, 0, 0, 0,
	0, 135, 204, 0, 136, 0, 205, 137, 138, 0,
	206, 139, 207, 0, 140, 141, 142, 208, 143, 144,
	0, 145, 146, 147, 0, 148, 0, 149, 150, 209,
	151, 0, 152, 153, 0, 154, 256, 0, 155, 156,
	0, 157, 210, 158, 0, 159, 161, 211, 160, 212,
	0, 0, 162, 163, 0, 258, 213, 0, 0, 257,
	214, 215, 0, 164, 165, 166, 167, 0, 0, 168,
	169, 0, 0, 170, 171, 172, 216, 217, 0, 173,
	0, 0, 0, 0, 174, 175, 176, 177, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 0, 91, 0, 0, 0, 791, 0, 0,
	0, 0, 92, 93, 178, 179, 180, 94, 181, 182,
	0, 95, 183, 96, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 187, 108, 188, 189, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	190, 112, 191, 0, 0, 113, 114, 192, 115, 0,
	0, 0, 0, 0, 116, 193, 0, 194, 0, 117,
	118, 195, 196, 0, 0, 0, 0, 119, 197, 198,
	199, 0, 200, 0, 0, 120, 0, 121, 0, 0,
	201, 0, 122, 0, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 0, 128, 129, 130, 0,
	131, 0, 202, 132, 203, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 0, 136, 0, 205, 137, 138,
	0, 206, 139, 207, 0, 140, 141, 142, 208, 143,
	144, 0, 145, 146, 147, 0, 148, 0, 149, 150,
	209, 151, 0, 152, 153, 0, 154, 256, 0, 155,
	156, 0, 157, 210, 158, 0, 159, 161, 211, 160,
	212, 0, 0, 162, 163, 0, 258, 213, 0, 0,
	257, 214, 215, 0, 164, 165, 166, 167, 0, 0,
	168, 169, 0, 0, 170, 171, 172, 216, 217, 0,
	173, 0, 0, 0, 0, 174, 175, 176, 177, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 1290, 0,
	0, 0, 0, 92, 93, 178, 179, 180, 94, 181,
	182, 0, 95, 183, 96, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 187, 108, 188, 189, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 190, 112, 191, 0, 0, 113, 114, 192, 115,
	0, 0, 0, 0, 0, 116, 193, 0, 194, 0,
	117, 118, 195, 196, 0, 0, 0, 0, 119, 197,
	198, 199, 0, 200, 0, 0, 120, 0, 121, 0,
	0, 201, 0, 122, 0, 0, 254, 0, 0, 123,
	0, 124, 125, 126, 127, 255, 0, 128, 129, 130,
	0, 131, 0, 202, 132, 203, 133, 134, 0, 0,
	0, 0, 0, 135, 204, 0, 136, 0, 205, 137,
	138, 0, 206, 139, 207, 0, 140, 141, 142, 208,
	143, 144, 0, 145, 146, 147, 0, 148, 0, 149,
	150, 209, 151, 0, 152, 153, 0, 154, 256, 0,
	155, 156, 0, 157, 210, 158, 0, 159, 161, 211,
	160, 212, 0, 0, 162, 163, 0, 258, 213, 0,
	0, 257, 214, 215, 0, 164, 165, 166, 167, 0,
	0, 168, 169, 0, 0, 170, 171, 172, 216, 217,
	0, 173, 0, 0, 0, 0, 174, 175, 176, 177,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 462,
	0, 0, 0, 0, 92, 93, 178, 179, 180, 94,
	181, 182, 0, 95, 183, 96, 0, 0, 184, 185,
	0, 186, 0, 297, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 298, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 187, 108, 188, 189,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 190, 112, 191, 0, 0, 113, 114, 192,
	115, 0, 0, 0, 299, 0, 116, 193, 0, 194,
	0, 117, 118, 195, 196, 0, 0, 0, 300, 119,
	197, 198, 199, 0, 200, 0, 301, 120, 302, 121,
	0, 0, 201, 303, 122, 304, 0, 254, 0, 0,
	123, 0, 124, 125, 126, 127, 255, 305, 128, 129,
	130, 0, 131, 0, 202, 132, 203, 133, 134, 0,
	0, 0, 0, 0, 135, 204, 306, 136, 307, 205,
	137, 138, 0, 206, 139, 207, 0, 140, 141, 142,
	208, 143, 144, 0, 145, 146, 147, 0, 148, 308,
	149, 150, 209, 151, 0, 152, 153, 0, 154, 256,
	0, 155, 156, 309, 157, 210, 158, 0, 159, 161,
	211, 160, 212, 0, 0, 162, 163, 0, 258, 213,
	0, 0, 257, 214, 215, 0, 164, 165, 166, 167,
	0, 86, 168, 169, 0, 0, 170, 171, 172, 216,
	217, 0, 173, 89, 90, 0, 91, 174, 175, 176,
	177, 0, 0, 0, 0, 92, 93, 178, 179, 180,
	94, 181, 182, 0, 95, 183, 96, 0, 0, 184,
	185, 766, 186, 0, 0, 0, 97, 98, 99, 0,
	100, 764, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 187, 108, 188,
	189, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 190, 112, 191, 0, 0, 113, 114,
	192, 115, 0, 769, 0, 0, 0, 116, 193, 0,
	194, 0, 117, 118, 195, 196, 0, 828, 0, 0,
	119, 197, 198, 199, 0, 200, 0, 0, 120, 0,
	121, 0, 0, 201, 0, 122, 0, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 0, 128,
	129, 130, 0, 131, 0, 202, 132, 203, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 0, 136, 0,
	205, 137, 138, 0, 206, 139, 207, 768, 140, 141,
	142, 208, 143, 144, 0, 145, 146, 147, 0, 148,
	0, 149, 150, 209, 151, 0, 152, 153, 0, 154,
	256, 0, 155, 156, 0, 157, 210, 158, 0, 159,
	161, 211, 160, 212, 0, 0, 162, 163, 0, 258,
	213, 0, 0, 257, 214, 215, 0, 164, 165, 166,
	167, 0, 829, 168, 169, 0, 0, 170, 171, 172,
	216, 217, 86, 173, 0, 0, 0, 0, 174, 175,
	176, 177, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 93, 178, 179,
	180, 94, 181, 182, 0, 95, 183, 96, 0, 0,
	184, 185, 766, 186, 0, 0, 761, 97, 98, 99,
	0, 100, 764, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 187, 108,
	188, 189, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 190, 112, 191, 0, 0, 113,
	114, 192, 115, 0, 769, 0, 0, 0, 116, 193,
	0, 194, 0, 117, 118, 760, 196, 0, 0, 0,
	0, 119, 197, 198, 199, 0, 200, 0, 0, 120,
	0, 121, 0, 0, 201, 0, 122, 0, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 0,
	128, 129, 130, 0, 131, 0, 202, 132, 203, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 0, 136,
	0, 205, 137, 138, 0, 206, 139, 207, 768, 140,
	141, 142, 208, 143, 144, 0, 145, 146, 147, 0,
	148, 0, 149, 150, 209, 151, 0, 152, 153, 0,
	154, 256, 0, 155, 156, 0, 157, 210, 158, 0,
	159, 161, 211, 160, 212, 0, 0, 162, 163, 0,
	258, 213, 0, 0, 257, 214, 215, 0, 164, 165,
	166, 167, 0, 767, 168, 169, 0, 0, 170, 171,
	172, 216, 217, 86, 173, 0, 0, 0, 0, 174,
	175, 176, 177, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 1082, 0, 0, 92, 93, 178,
	179, 180, 94, 181, 182, 0, 95, 183, 96, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 187,
	108, 188, 189, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 190, 112, 191, 0, 0,
	113, 114, 192, 115, 0, 0, 0, 0, 0, 116,
	193, 0, 194, 0, 117, 118, 195, 196, 0, 0,
	0, 0, 119, 197, 198, 199, 0, 200, 0, 0,
	120, 0, 121, 0, 0, 201, 0, 122, 0, 0,
	254, 0, 0, 123, 0, 124, 125, 126, 127, 255,
	0, 128, 129, 130, 0, 131, 0, 202, 132, 203,
	133, 134, 0, 0, 0, 0, 0, 135, 204, 0,
	136, 0, 205, 137, 138, 0, 206, 139, 207, 0,
	140, 141, 142, 208, 143, 144, 0, 145, 146, 147,
	0, 148, 0, 149, 150, 209, 151, 0, 152, 153,
	0, 154, 256, 0, 155, 156, 0, 157, 210, 158,
	0, 159, 161, 211, 160, 212, 0, 0, 162, 163,
	0, 258, 213, 0, 0, 257, 214, 215, 0, 164,
	165, 166, 167, 0, 86, 168, 169, 0, 0, 170,
	171, 172, 216, 217, 0, 173, 89, 90, 0, 91,
	174, 175, 176, 177, 0, 0, 0, 0, 92, 93,
	178, 179, 180, 94, 181, 182, 0, 95, 183, 96,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	187, 108, 188, 189, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 190, 112, 191, 0,
	0, 113, 114, 192, 115, 0, 0, 0, 0, 0,
	116, 193, 0, 194, 0, 117, 118, 195, 196, 0,
	0, 0, 0, 119, 197, 198, 199, 0, 200, 0,
	0, 120, 0, 121, 0, 0, 201, 0, 122, 0,
	0, 254, 0, 0, 123, 0, 124, 125, 126, 127,
	255, 0, 128, 129, 130, 0, 131, 0, 202, 132,
	203, 133, 134, 0, 0, 267, 0, 0, 135, 204,
	0, 136, 0, 205, 137, 138, 0, 206, 139, 207,
	0, 140, 141, 142, 208, 143, 144, 0, 145, 146,
	147, 0, 148, 0, 149, 150, 209, 151, 0, 152,
	153, 0, 154, 256, 0, 155, 156, 0, 157, 210,
	158, 0, 159, 161, 211, 160, 212, 0, 0, 162,
	163, 0, 258, 213, 0, 0, 257, 214, 215, 0,
	164, 165, 166, 167, 0, 86, 168, 169, 0, 0,
	170, 171, 172, 216, 217, 0, 173, 89, 90, 0,
	91, 174, 175, 176, 177, 0, 0, 0, 0, 92,
	93, 178, 179, 180, 94, 181, 182, 0, 95, 183,
	96, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 502,
	107, 187, 108, 188, 189, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 190, 112, 191,
	0, 0, 113, 114, 192, 115, 0, 0, 0, 0,
	0, 116, 193, 0, 194, 0, 117, 118, 195, 196,
	0, 0, 0, 0, 119, 197, 198, 199, 0, 200,
	0, 0, 120, 0, 121, 0, 0, 201, 0, 122,
	0, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 255, 0, 128, 129, 130, 0, 131, 0, 202,
	132, 203, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 0, 136, 0, 205, 137, 138, 0, 206, 139,
	207, 0, 140, 141, 142, 208, 143, 144, 0, 145,
	146, 147, 0, 148, 0, 149, 150, 209, 151, 0,
	152, 153, 0, 154, 256, 0, 155, 156, 0, 157,
	210, 158, 0, 159, 161, 211, 160, 212, 0, 501,
	162, 163, 0, 258, 213, 0, 0, 257, 214, 215,
	0, 164, 165, 166, 167, 0, 86, 168, 169, 0,
	0, 170, 171, 172, 216, 217, 0, 173, 89, 90,
	0, 91, 174, 175, 176, 177, 0, 0, 0, 0,
	92, 93, 178, 179, 180, 94, 181, 182, 0, 95,
	183, 96, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 187, 108, 188, 189, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 190, 112,
	191, 0, 0, 113, 114, 192, 115, 0, 0, 0,
	0, 0, 116, 193, 0, 194, 0, 117, 118, 273,
	196, 0, 0, 0, 0, 119, 197, 198, 199, 0,
	200, 0, 0, 120, 0, 121, 0, 0, 201, 0,
	122, 0, 0, 254, 0, 0, 123, 0, 124, 125,
	126, 127, 255, 0, 128, 129, 130, 0, 131, 0,
	202, 132, 203, 133, 134, 0, 0, 267, 0, 0,
	135, 204, 0, 136, 0, 205, 137, 138, 0, 206,
	139, 207, 0, 140, 141, 142, 208, 143, 144, 0,
	145, 146, 147, 0, 148, 0, 149, 150, 209, 151,
	0, 152, 153, 0, 154, 256, 0, 155, 156, 0,
	157, 210, 158, 0, 159, 161, 211, 160, 212, 0,
	0, 162, 163, 0, 258, 213, 0, 0, 257, 214,
	215, 0, 164, 165, 166, 167, 0, 86, 168, 169,
	0, 0, 170, 171, 172, 216, 217, 0, 173, 89,
	90, 0, 91, 174, 175, 176, 177, 0, 0, 0,
	0, 92, 93, 178, 179, 180, 94, 181, 182, 0,
	95, 183, 96, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 187, 108, 188, 189, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 190,
	112, 191, 0, 0, 113, 114, 192, 115, 0, 0,
	0, 0, 0, 116, 193, 0, 194, 0, 117, 118,
	195, 196, 0, 0, 0, 0, 119, 197, 198, 199,
	0, 200, 0, 0, 120, 0, 121, 0, 0, 201,
	0, 122, 0, 0, 254, 0, 0, 123, 0, 124,
	125, 126, 127, 255, 0, 128, 129, 130, 0, 131,
	0, 202, 132, 203, 133, 134, 0, 0, 0, 0,
	0, 135, 204, 0, 136, 0, 205, 137, 138, 0,
	206, 139, 207, 0, 140, 141, 142, 208, 143, 144,
	0, 145, 146, 147, 0, 148, 0, 149, 150, 209,
	151, 0, 152, 153, 0, 154, 256, 0, 155, 156,
	0, 157, 210, 158, 0, 159, 161, 211, 160, 212,
	0, 0, 162, 163, 0, 258, 213, 0, 0, 257,
	214, 215, 0, 164, 165, 166, 167, 0, 86, 168,
	169, 0, 0, 170, 171, 172, 216, 217, 0, 173,
	89, 90, 0, 91, 174, 175, 176, 177, 0, 0,
	0, 0, 92, 93, 178, 179, 180, 94, 181, 182,
	0, 95, 183, 96, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 187, 108, 188, 189, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	190, 112, 191, 0, 0, 113, 114, 192, 115, 0,
	0, 0, 0, 0, 116, 193, 0, 194, 0, 117,
	118, 1027, 196, 0, 0, 0, 0, 119, 197, 198,
	199, 0, 200, 0, 0, 120, 0, 121, 0, 0,
	201, 0, 122, 0, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 0, 128, 129, 130, 0,
	131, 0, 202, 132, 203, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 0, 136, 0, 205, 137, 138,
	0, 206, 139, 207, 0, 140, 141, 142, 208, 143,
	144, 0, 145, 146, 147, 0, 148, 0, 149, 150,
	209, 151, 0, 152, 153, 0, 154, 256, 0, 155,
	156, 0, 157, 210, 158, 0, 159, 161, 211, 160,
	212, 0, 0, 162, 163, 0, 258, 213, 0, 0,
	257, 214, 215, 0, 164, 165, 166, 167, 0, 86,
	168, 169, 0, 0, 170, 171, 172, 216, 217, 0,
	173, 89, 90, 0, 91, 174, 175, 176, 177, 0,
	0, 0, 0, 92, 93, 178, 179, 180, 94, 181,
	182, 0, 95, 183, 96, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 187, 108, 188, 189, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 190, 112, 191, 0, 0, 113, 114, 192, 115,
	0, 0, 0, 0, 0, 116, 193, 0, 194, 0,
	117, 118, 1025, 196, 0, 0, 0, 0, 119, 197,
	198, 199, 0, 200, 0, 0, 120, 0, 121, 0,
	0, 201, 0, 122, 0, 0, 254, 0, 0, 123,
	0, 124, 125, 126, 127, 255, 0, 128, 129, 130,
	0, 131, 0, 202, 132, 203, 133, 134, 0, 0,
	0, 0, 0, 135, 204, 0, 136, 0, 205, 137,
	138, 0, 206, 139, 207, 0, 140, 141, 142, 208,
	143, 144, 0, 145, 146, 147, 0, 148, 0, 149,
	150, 209, 151, 0, 152, 153, 0, 154, 256, 0,
	155, 156, 0, 157, 210, 158, 0, 159, 161, 211,
	160, 212, 0, 0, 162, 163, 0, 258, 213, 0,
	0, 257, 214, 215, 0, 164, 165, 166, 167, 0,
	86, 168, 169, 0, 0, 170, 171, 172, 216, 217,
	0, 173, 89, 90, 0, 91, 174, 175, 176, 177,
	0, 0, 0, 0, 92, 93, 178, 179, 180, 94,
	181, 182, 0, 95, 183, 96, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 187, 108, 188, 189,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 190, 112, 191, 0, 0, 113, 114, 192,
	115, 0, 0, 0, 0, 0, 116, 193, 0, 194,
	0, 117, 118, 1016, 196, 0, 0, 0, 0, 119,
	197, 198, 199, 0, 200, 0, 0, 120, 0, 121,
	0, 0, 201, 0, 122, 0, 0, 254, 0, 0,
	123, 0, 124, 125, 126, 127, 255, 0, 128, 129,
	130, 0, 131, 0, 202, 132, 203, 133, 134, 0,
	0, 0, 0, 0, 135, 204, 0, 136, 0, 205,
	137, 138, 0, 206, 139, 207, 0, 140, 141, 142,
	208, 143, 144, 0, 145, 146, 147, 0, 148, 0,
	149, 150, 209, 151, 0, 152, 153, 0, 154, 256,
	0, 155, 156, 0, 157, 210, 158, 0, 159, 161,
	211, 160, 212, 0, 0, 162, 163, 0, 258, 213,
	0, 0, 257, 214, 215, 0, 164, 165, 166, 167,
	0, 86, 168, 169, 0, 0, 170, 171, 172, 216,
	217, 0, 173, 89, 90, 0, 91, 174, 175, 176,
	177, 0, 0, 0, 0, 92, 93, 178, 179, 180,
	94, 181, 182, 0, 95, 183, 96, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 187, 108, 188,
	189, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 190, 112, 191, 0, 0, 113, 114,
	192, 115, 0, 0, 0, 0, 0, 116, 193, 0,
	194, 0, 117, 118, 639, 196, 0, 0, 0, 0,
	119, 197, 198, 199, 0, 200, 0, 0, 120, 0,
	121, 0, 0, 201, 0, 122, 0, 0, 254, 0,
	0, 123, 0, 124, 125, 126, 127, 255, 0, 128,
	129, 130, 0, 131, 0, 202, 132, 203, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 0, 136, 0,
	205, 137, 138, 0, 206, 139, 207, 0, 140, 141,
	142, 208, 143, 144, 0, 145, 146, 147, 0, 148,
	0, 149, 150, 209, 151, 0, 152, 153, 0, 154,
	256, 0, 155, 156, 0, 157, 210, 158, 0, 159,
	161, 211, 160, 212, 0, 0, 162, 163, 0, 258,
	213, 0, 0, 257, 214, 215, 0, 164, 165, 166,
	167, 0, 86, 168, 169, 0, 0, 170, 171, 172,
	216, 217, 0, 173, 89, 90, 0, 91, 174, 175,
	176, 177, 0, 488, 0, 0, 92, 93, 178, 179,
	180, 94, 181, 182, 0, 95, 183, 96, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 187, 108,
	188, 189, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 190, 112, 191, 0, 0, 113,
	114, 192, 115, 0, 0, 0, 0, 0, 116, 193,
	0, 194, 0, 117, 118, 195, 196, 0, 0, 0,
	0, 119, 197, 198, 199, 0, 200, 0, 0, 120,
	0, 121, 0, 0, 201, 0, 122, 0, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 0,
	128, 129, 130, 0, 131, 0, 202, 132, 203, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 0, 136,
	0, 205, 137, 138, 0, 206, 139, 207, 0, 140,
	141, 142, 208, 143, 144, 0, 145, 146, 147, 0,
	148, 0, 149, 150, 209, 151, 0, 152, 153, 0,
	154, 256, 0, 0, 156, 0, 157, 210, 158, 0,
	159, 161, 211, 160, 212, 0, 0, 162, 163, 0,
	258, 213, 0, 0, 257, 214, 215, 0, 164, 165,
	166, 167, 0, 86, 168, 169, 0, 0, 170, 171,
	172, 216, 217, 0, 173, 89, 90, 0, 91, 174,
	175, 176, 177, 0, 0, 0, 0, 92, 93, 178,
	179, 180, 94, 181, 182, 0, 95, 183, 96, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 187,
	108, 188, 189, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 190, 112, 191, 0, 0,
	113, 114, 192, 115, 0, 0, 0, 0, 0, 116,
	193, 0, 194, 0, 117, 118, 347, 196, 0, 0,
	0, 0, 119, 197, 198, 199, 0, 200, 0, 0,
	120, 0, 121, 0, 0, 201, 0, 122, 0, 0,
	254, 0, 0, 123, 0, 124, 125, 126, 127, 255,
	0, 128, 129, 130, 0, 131, 0, 202, 132, 203,
	133, 134, 0, 0, 0, 0, 0, 135, 204, 0,
	136, 0, 205, 137, 138, 0, 206, 139, 207, 0,
	140, 141, 142, 208, 143, 144, 0, 145, 146, 147,
	0, 148, 0, 149, 150, 209, 151, 0, 152, 153,
	0, 154, 256, 0, 155, 156, 0, 157, 210, 158,
	0, 159, 161, 211, 160, 212, 0, 0, 162, 163,
	0, 258, 213, 0, 0, 257, 214, 215, 0, 164,
	165, 166, 167, 0, 86, 168, 169, 0, 0, 170,
	171, 172, 216, 217, 0, 173, 89, 90, 0, 91,
	174, 175, 176, 177, 0, 0, 0, 0, 92, 93,
	178, 179, 180, 94, 181, 182, 0, 95, 183, 96,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	187, 108, 188, 189, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 190, 112, 191, 0,
	0, 113, 114, 192, 115, 0, 0, 0, 0, 0,
	116, 193, 0, 194, 0, 117, 118, 344, 196, 0,
	0, 0, 0, 119, 197, 198, 199, 0, 200, 0,
	0, 120, 0, 121, 0, 0, 201, 0, 122, 0,
	0, 254, 0, 0, 123, 0, 124, 125, 126, 127,
	255, 0, 128, 129, 130, 0, 131, 0, 202, 132,
	203, 133, 134, 0, 0, 0, 0, 0, 135, 204,
	0, 136, 0, 205, 137, 138, 0, 206, 139, 207,
	0, 140, 141, 142, 208, 143, 144, 0, 145, 146,
	147, 0, 148, 0, 149, 150, 209, 151, 0, 152,
	153, 0, 154, 256, 0, 155, 156, 0, 157, 210,
	158, 0, 159, 161, 211, 160, 212, 0, 0, 162,
	163, 0, 258, 213, 0, 0, 257, 214, 215, 0,
	164, 165, 166, 167, 0, 86, 168, 169, 0, 0,
	170, 171, 172, 216, 217, 0, 173, 89, 90, 0,
	91, 174, 175, 176, 177, 0, 0, 0, 0, 92,
	93, 178, 179, 180, 94, 181, 182, 0, 95, 183,
	96, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 187, 108, 188, 189, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 190, 112, 191,
	0, 0, 113, 114, 192, 115, 0, 0, 0, 0,
	0, 116, 193, 0, 194, 0, 117, 118, 195, 196,
	0, 0, 0, 0, 119, 197, 198, 199, 0, 200,
	0, 0, 120, 0, 121, 0, 0, 201, 0, 122,
	0, 0, 254, 0, 0, 123, 0, 124, 125, 126,
	127, 83, 0, 128, 129, 130, 0, 131, 0, 202,
	132, 203, 133, 134, 0, 0, 0, 0, 0, 135,
	204, 0, 136, 0, 205, 137, 138, 0, 206, 139,
	207, 0, 140, 141, 142, 208, 143, 144, 0, 145,
	146, 147, 0, 148, 0, 149, 150, 209, 151, 0,
	152, 153, 0, 154, 256, 0, 155, 156, 0, 157,
	210, 158, 0, 159, 161, 211, 160, 212, 0, 0,
	162, 163, 0, 82, 213, 0, 0, 78, 214, 215,
	0, 164, 165, 166, 167, 0, 86, 168, 169, 0,
	0, 170, 171, 172, 216, 217, 0, 173, 89, 90,
	0, 91, 174, 175, 176, 177, 0, 0, 0, 0,
	92, 93, 178, 179, 180, 94, 181, 182, 0, 95,
	183, 96, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 187, 108, 188, 189, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 190, 112,
	191, 0, 0, 113, 114, 192, 115, 0, 0, 0,
	0, 0, 116, 193, 0, 194, 0, 117, 118, 287,
	196, 0, 0, 0, 0, 119, 197, 198, 199, 0,
	200, 0, 0, 120, 0, 121, 0, 0, 201, 0,
	122, 0, 0, 254, 0, 0, 123, 0, 124, 125,
	126, 127, 255, 0, 128, 129, 130, 0, 131, 0,
	202, 132, 203, 133, 134, 0, 0, 0, 0, 0,
	135, 204, 0, 136, 0, 205, 137, 138, 0, 206,
	139, 207, 0, 140, 141, 142, 208, 143, 144, 0,
	145, 146, 147, 0, 148, 0, 149, 150, 209, 151,
	0, 152, 153, 0, 154, 256, 0, 155, 156, 0,
	157, 210, 158, 0, 159, 161, 211, 160, 212, 0,
	0, 162, 163, 0, 258, 213, 0, 0, 257, 214,
	215, 0, 164, 165, 166, 167, 0, 86, 168, 169,
	0, 0, 170, 171, 172, 216, 217, 0, 173, 89,
	90, 0, 91, 174, 175, 176, 177, 0, 0, 0,
	0, 92, 93, 178, 179, 180, 94, 181, 182, 0,
	95, 183, 96, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 187, 108, 188, 189, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 190,
	112, 191, 0, 0, 113, 114, 192, 115, 0, 0,
	0, 0, 0, 116, 193, 0, 194, 0, 117, 118,
	284, 196, 0, 0, 0, 0, 119, 197, 198, 199,
	0, 200, 0, 0, 120, 0, 121, 0, 0, 201,
	0, 122, 0, 0, 254, 0, 0, 123, 0, 124,
	125, 126, 127, 255, 0, 128, 129, 130, 0, 131,
	0, 202, 132, 203, 133, 134, 0, 0, 0, 0,
	0, 135, 204, 0, 136, 0, 205, 137, 138, 0,
	206, 139, 207, 0, 140, 141, 142, 208, 143, 144,
	0, 145, 146, 147, 0, 148, 0, 149, 150, 209,
	151, 0, 152, 153, 0, 154, 256, 0, 155, 156,
	0, 157, 210, 158, 0, 159, 161, 211, 160, 212,
	0, 0, 162, 163, 0, 258, 213, 0, 0, 257,
	214, 215, 0, 164, 165, 166, 167, 0, 86, 168,
	169, 0, 0, 170, 171, 172, 216, 217, 0, 173,
	89, 90, 0, 91, 174, 175, 176, 177, 0, 0,
	0, 0, 92, 93, 178, 179, 180, 94, 181, 182,
	0, 95, 183, 96, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 187, 108, 188, 189, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	190, 112, 191, 0, 0, 113, 114, 192, 115, 0,
	0, 0, 0, 0, 116, 193, 0, 194, 0, 117,
	118, 282, 196, 0, 0, 0, 0, 119, 197, 198,
	199, 0, 200, 0, 0, 120, 0, 121, 0, 0,
	201, 0, 122, 0, 0, 254, 0, 0, 123, 0,
	124, 125, 126, 127, 255, 0, 128, 129, 130, 0,
	131, 0, 202, 132, 203, 133, 134, 0, 0, 0,
	0, 0, 135, 204, 0, 136, 0, 205, 137, 138,
	0, 206, 139, 207, 0, 140, 141, 142, 208, 143,
	144, 0, 145, 146, 147, 0, 148, 0, 149, 150,
	209, 151, 0, 152, 153, 0, 154, 256, 0, 155,
	156, 0, 157, 210, 158, 0, 159, 161, 211, 160,
	212, 0, 0, 162, 163, 0, 258, 213, 0, 0,
	257, 214, 215, 0, 164, 165, 166, 167, 0, 86,
	168, 169, 0, 0, 170, 171, 172, 216, 217, 0,
	173, 89, 90, 0, 91, 174, 175, 176, 177, 0,
	0, 0, 0, 92, 93, 178, 179, 180, 94, 181,
	182, 0, 95, 183, 96, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 187, 108, 188, 189, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 190, 112, 191, 0, 0, 113, 114, 192, 115,
	0, 0, 0, 0, 0, 116, 193, 0, 194, 0,
	117, 118, 276, 196, 0, 0, 0, 0, 119, 197,
	198, 199, 0, 200, 0, 0, 120, 0, 121, 0,
	0, 201, 0, 122, 0, 0, 254, 0, 0, 123,
	0, 124, 125, 126, 127, 255, 0, 128, 129, 130,
	0, 131, 0, 202, 132, 203, 133, 134, 0, 0,
	0, 0, 0, 135, 204, 0, 136, 0, 205, 137,
	138, 0, 206, 139, 207, 0, 140, 141, 142, 208,
	143, 144, 0, 145, 146, 147, 0, 148, 0, 149,
	150, 209, 151, 0, 152, 153, 0, 154, 256, 0,
	155, 156, 0, 157, 210, 158, 0, 159, 161, 211,
	160, 212, 0, 0, 162, 163, 0, 258, 213, 0,
	0, 257, 214, 215, 0, 164, 165, 166, 167, 0,
	86, 168, 169, 0, 0, 170, 171, 172, 216, 217,
	0, 173, 89, 90, 0, 91, 174, 175, 176, 177,
	0, 0, 0, 0, 92, 93, 178, 179, 180, 94,
	181, 182, 0, 95, 183, 96, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 187, 108, 188, 189,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 190, 112, 191, 0, 0, 113, 114, 192,
	115, 0, 0, 0, 0, 0, 116, 193, 0, 194,
	0, 117, 118, 195, 196, 0, 0, 0, 0, 119,
	197, 198, 199, 0, 200, 0, 0, 120, 0, 121,
	0, 0, 201, 0, 122, 0, 0, 254, 0, 0,
	123, 0, 124, 125, 126, 127, 255, 0, 128, 129,
	130, 0, 131, 0, 202, 132, 203, 133, 134, 0,
	0, 0, 0, 0, 135, 204, 0, 136, 0, 205,
	137, 138, 0, 206, 139, 207, 0, 140, 141, 142,
	208, 251, 144, 0, 145, 146, 147, 0, 148, 0,
	149, 150, 209, 151, 0, 152, 153, 0, 154, 256,
	0, 155, 156, 0, 157, 210, 158, 0, 159, 161,
	211, 160, 212, 0, 0, 162, 163, 0, 258, 213,
	0, 0, 257, 214, 215, 0, 164, 165, 166, 167,
	0, 86, 168, 169, 0, 0, 170, 171, 172, 216,
	217, 0, 173, 89, 90, 0, 91, 174, 175, 176,
	177, 0, 0, 0, 0, 92, 93, 178, 179, 180,
	94, 181, 182, 0, 95, 183, 96, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 187, 108, 188,
	189, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 190, 112, 191, 0, 0, 113, 114,
	192, 115, 0, 0, 0, 0, 0, 116, 193, 0,
	194, 0, 117, 118, 195, 196, 0, 0, 0, 0,
	119, 197, 198, 199, 0, 200, 0, 0, 120, 0,
	121, 0, 0, 201, 0, 122, 0, 0, 76, 0,
	0, 123, 0, 124, 125, 126, 127, 83, 0, 128,
	129, 130, 0, 131, 0, 202, 132, 203, 133, 134,
	0, 0, 0, 0, 0, 135, 204, 0, 136, 0,
	205, 137, 138, 0, 206, 139, 207, 0, 140, 141,
	142, 208, 143, 144, 0, 145, 146, 147, 0, 148,
	0, 149, 150, 209, 151, 0, 152, 153, 0, 154,
	77, 0, 155, 156, 0, 157, 210, 158, 0, 159,
	161, 211, 160, 212, 0, 0, 162, 163, 0, 82,
	213, 0, 0, 78, 214, 215, 0, 164, 165, 166,
	167, 0, 86, 168, 169, 0, 0, 170, 171, 172,
	216, 217, 0, 173, 89, 90, 0, 91, 174, 175,
	176, 177, 0, 0, 0, 0, 92, 93, 178, 179,
	180, 94, 181, 182, 0, 95, 183, 96, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 187, 108,
	188, 189, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 190, 112, 191, 0, 0, 113,
	114, 192, 115, 0, 0, 0, 0, 0, 116, 193,
	0, 194, 0, 117, 118, 195, 196, 0, 0, 0,
	0, 119, 197, 198, 199, 0, 200, 0, 0, 120,
	0, 121, 0, 0, 201, 0, 122, 0, 0, 254,
	0, 0, 123, 0, 124, 125, 126, 127, 255, 0,
	128, 129, 130, 0, 131, 0, 202, 132, 203, 133,
	134, 0, 0, 0, 0, 0, 135, 204, 0, 136,
	0, 205, 137, 0, 0, 206, 139, 207, 0, 140,
	0, 142, 208, 143, 144, 0, 145, 146, 147, 0,
	148, 0, 149, 150, 209, 0, 0, 152, 153, 0,
	154, 256, 0, 155, 156, 0, 157, 210, 158, 0,
	159, 161, 211, 160, 212, 0, 0, 162, 163, 0,
	258, 213, 0, 0, 257, 214, 215, 0, 164, 165,
	166, 167, 0, 0, 168, 169, 0, 0, 170, 171,
	172, 216, 217, 663, 173, 681, 682, 683, 0, 174,
	175, 176, 177, 0, 0, 684, 0, 0, 0, 0,
	0, 665, 0, 690, 0, 0, 0, 0, 663, 0,
	681, 682, 683, 0, 0, 0, 0, 0, 0, 664,
	684, 0, 0, 0, 0, 678, 665, 663, 690, 681,
	682, 683, 0, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 0, 0, 664, 665, 0, 690, 0, 0,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 664, 0, 0, 0, 0, 0, 678,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 691, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 0, 0, 0, 0,
	0, 0, 686, 0, 0, 0, 0, 691, 679, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 691, 686, 0, 685,
	0, 0, 0, 679, 0, 0, 0, 689, 0, 0,
	0, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 0, 679, 0, 685, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 0, 0, 685, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 681, 682, 683, 680, 0, 0, 0,
	0, 0, 0, 684, 0, 688, 0, 0, 0, 665,
	0, 690, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 688, 0, 0, 664, 687, 0,
	675, 676, 677, 678, 674, 671, 672, 673, 666, 667,
	668, 669, 670, 0, 0, 0, 0, 0, 0, 0,
	0, 1185, 0, 687, 0, 675, 676, 677, 0, 674,
	671, 672, 673, 666, 667, 668, 669, 670, 0, 0,
	0, 0, 687, 1542, 675, 676, 677, 0, 674, 671,
	672, 673, 666, 667, 668, 669, 670, 0, 0, 0,
	691, 0, 1541, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 663, 0, 681, 682, 683, 0, 0, 0,
	686, 0, 0, 0, 684, 0, 679, 0, 0, 0,
	665, 0, 690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 685, 664, 0,
	0, 0, 0, 0, 678, 663, 0, 681, 682, 683,
	0, 0, 0, 0, 0, 0, 0, 684, 0, 0,
	0, 0, 0, 665, 0, 690, 0, 0, 0, 680,
	0, 0, 0, 0, 0, 0, 0, 0, 688, 0,
	663, 664, 681, 682, 683, 0, 0, 678, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 665, 0,
	690, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 689, 0, 0, 0, 664, 0, 0, 0,
	0, 686, 678, 0, 0, 0, 687, 679, 675, 676,
	677, 0, 674, 671, 672, 673, 666, 667, 668, 669,
	670, 0, 0, 0, 691, 0, 1526, 0, 685, 0,
	0, 0, 0, 0, 0, 689, 663, 0, 681, 682,
	683, 0, 0, 0, 686, 0, 0, 0, 684, 0,
	679, 0, 0, 0, 665, 0, 690, 0, 0, 691,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	689, 685, 664, 0, 0, 0, 0, 0, 678, 686,
	0, 0, 0, 0, 0, 679, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 0, 685, 0, 0, 0,
	0, 0, 688, 0, 0, 0, 0, 687, 0, 675,
	676, 677, 0, 674, 671, 672, 673, 666, 667, 668,
	669, 670, 0, 0, 0, 691, 0, 1505, 680, 0,
	0, 0, 0, 0, 0, 0, 689, 688, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 0,
	687, 679, 675, 676, 677, 0, 674, 671, 672, 673,
	666, 667, 668, 669, 670, 0, 0, 0, 0, 0,
	1500, 0, 685, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 687, 0, 675, 676, 677,
	0, 674, 671, 672, 673, 666, 667, 668, 669, 670,
	0, 0, 0, 0, 680, 1496, 663, 0, 681, 682,
	683, 0, 0, 688, 0, 0, 0, 0, 684, 0,
	0, 0, 0, 0, 665, 0, 690, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 675, 676, 677, 0, 674, 671, 672,
	673, 666, 667, 668, 669, 670, 0, 0, 0, 0,
	0, 1438, 663, 0, 681, 682, 683, 0, 0, 0,
	0, 0, 0, 0, 684, 0, 0, 0, 0, 0,
	665, 0, 690, 0, 0, 691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 689, 663, 664, 681,
	682, 683, 0, 0, 678, 686, 0, 0, 0, 684,
	0, 679, 0, 0, 0, 665, 0, 690, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 664, 0, 0, 0, 0, 0, 678,
	663, 0, 681, 682, 683, 0, 0, 0, 0, 0,
	0, 0, 684, 0, 0, 0, 0, 0, 665, 0,
	690, 691, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 689, 688, 0, 0, 664, 0, 0, 0,
	0, 686, 678, 0, 0, 0, 0, 679, 0, 0,
	0, 0, 0, 0, 0, 0, 691, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 689, 685, 0,
	0, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 687, 679, 675, 676, 677, 0, 674, 671, 672,
	673, 666, 667, 668, 669, 670, 0, 0, 0, 691,
	680, 1437, 0, 685, 0, 0, 0, 0, 0, 688,
	689, 663, 0, 681, 682, 683, 0, 0, 0, 686,
	0, 0, 0, 684, 0, 679, 0, 0, 0, 665,
	0, 690, 0, 0, 0, 680, 0, 0, 0, 0,
	0, 0, 0, 0, 688, 0, 685, 664, 0, 0,
	0, 0, 0, 678, 0, 0, 0, 687, 0, 675,
	676, 677, 0, 674, 671, 672, 673, 666, 667, 668,
	669, 670, 0, 0, 0, 0, 0, 1355, 680, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 0, 0,
	0, 0, 687, 0, 675, 676, 677, 0, 674, 671,
	672, 673, 666, 667, 668, 669, 670, 0, 0, 0,
	691, 0, 1293, 0, 0, 0, 0, 0, 0, 0,
	0, 689, 0, 0, 0, 0, 0, 0, 0, 0,
	686, 0, 0, 0, 0, 687, 679, 675, 676, 677,
	0, 674, 671, 672, 673, 666, 667, 668, 669, 670,
	0, 0, 0, 0, 0, 1268, 0, 685, 0, 0,
	0, 0, 0, 663, 0, 681, 682, 683, 0, 0,
	0, 0, 0, 0, 0, 684, 0, 0, 0, 0,
	0, 665, 0, 690, 0, 0, 0, 0, 663, 680,
	681, 682, 683, 0, 0, 0, 0, 0, 688, 664,
	684, 0, 0, 0, 0, 678, 665, 0, 690, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 664, 0, 0, 0, 0, 0,
	678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 0, 675, 676,
	677, 0, 674, 671, 672, 673, 666, 667, 668, 669,
	670, 0, 691, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 1602, 689, 663, 0, 681, 682, 683, 0,
	0, 0, 686, 0, 0, 0, 684, 691, 679, 0,
	0, 0, 665, 0, 690, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 685,
	664, 0, 0, 679, 0, 0, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 685, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 1601, 0, 0, 0,
	688, 0, 663, 0, 681, 682, 683, 0, 0, 1177,
	0, 1176, 0, 0, 684, 0, 680, 0, 839, 0,
	665, 0, 690, 691, 0, 688, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 0, 664, 0,
	0, 0, 0, 686, 678, 0, 0, 0, 687, 679,
	675, 676, 677, 0, 674, 671, 672, 673, 666, 667,
	668, 669, 670, 0, 0, 0, 1339, 0, 0, 840,
	685, 0, 0, 687, 0, 675, 676, 677, 0, 674,
	671, 672, 673, 666, 667, 668, 669, 670, 663, 0,
	681, 682, 683, 0, 0, 0, 0, 0, 0, 0,
	684, 691, 680, 0, 0, 0, 665, 693, 690, 0,
	0, 688, 689, 663, 0, 681, 682, 683, 0, 0,
	0, 686, 0, 0, 664, 684, 0, 679, 692, 0,
	678, 665, 0, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 685, 664,
	0, 0, 0, 0, 0, 678, 0, 0, 0, 687,
	0, 675, 676, 677, 0, 674, 671, 672, 673, 666,
	667, 668, 669, 670, 0, 0, 0, 0, 0, 0,
	680, 0, 0, 0, 0, 0, 0, 691, 0, 688,
	0, 663, 0, 681, 682, 683, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 665,
	0, 690, 691, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 689, 0, 0, 0, 664, 0, 0,
	0, 0, 686, 678, 685, 246, 0, 687, 679, 675,
	676, 677, 0, 674, 671, 672, 673, 666, 667, 668,
	669, 670, 0, 0, 0, 0, 0, 0, 0, 685,
	0, 0, 0, 0, 0, 663, 680, 681, 682, 683,
	0, 0, 0, 0, 0, 688, 0, 684, 0, 0,
	0, 0, 0, 665, 0, 690, 0, 0, 0, 0,
	691, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	688, 664, 663, 0, 681, 682, 683, 678, 0, 0,
	686, 0, 0, 0, 684, 0, 679, 0, 0, 0,
	665, 0, 690, 687, 0, 675, 676, 677, 0, 674,
	671, 672, 673, 666, 667, 668, 669, 670, 664, 0,
	0, 0, 0, 0, 678, 0, 0, 0, 687, 0,
	675, 676, 677, 0, 674, 671, 672, 673, 666, 667,
	668, 669, 670, 0, 691, 0, 0, 0, 0, 680,
	0, 0, 0, 0, 0, 689, 0, 0, 688, 0,
	0, 0, 0, 0, 686, 0, 0, 0, 0, 1183,
	679, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 685, 689, 0, 0, 0, 0, 0, 0, 0,
	0, 686, 0, 0, 0, 0, 687, 679, 675, 676,
	677, 0, 674, 671, 672, 673, 666, 667, 668, 669,
	670, 0, 0, 680, 0, 0, 0, 0, 685, 0,
	0, 0, 688, 0, 0, 663, 0, 681, 682, 683,
	0, 0, 0, 0, 0, 0, 1287, 684, 0, 0,
	1178, 0, 0, 665, 0, 690, 0, 0, 0, 0,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 688,
	0, 664, 0, 0, 0, 0, 0, 678, 0, 0,
	687, 0, 675, 676, 677, 0, 674, 671, 672, 673,
	666, 667, 668, 669, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1147, 0, 1163,
	1164, 1165, 0, 0, 0, 0, 0, 687, 0, 675,
	676, 677, 0, 674, 671, 672, 673, 666, 667, 668,
	669, 670, 0, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 689, 681, 682, 683, 1160,
	0, 0, 0, 0, 686, 0, 684, 0, 0, 0,
	679, 0, 665, 0, 690, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	664, 685, 0, 0, 0, 0, 678, 663, 0, 681,
	682, 683, 0, 0, 0, 0, 0, 0, 0, 684,
	0, 0, 1140, 0, 0, 665, 1167, 690, 0, 0,
	0, 0, 0, 680, 0, 0, 663, 1166, 681, 682,
	683, 0, 688, 664, 0, 0, 0, 0, 684, 678,
	0, 0, 1161, 0, 665, 0, 690, 0, 0, 0,
	0, 0, 0, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 689, 0, 0, 0, 678, 0,
	0, 0, 0, 686, 0, 0, 0, 0, 0, 679,
	687, 0, 675, 676, 677, 0, 674, 671, 672, 673,
	666, 667, 668, 669, 670, 1162, 691, 0, 0, 0,
	685, 0, 0, 0, 0, 0, 0, 689, 663, 0,
	1145, 0, 0, 0, 0, 0, 686, 0, 0, 0,
	0, 0, 679, 0, 0, 691, 665, 0, 690, 0,
	0, 0, 680, 0, 0, 0, 689, 0, 0, 0,
	0, 688, 0, 685, 664, 686, 0, 0, 0, 0,
	678, 679, 0, 0, 1157, 1158, 1159, 0, 1156, 1153,
	1154, 1155, 1148, 1149, 1150, 1151, 1152, 1147, 0, 1163,
	1164, 1165, 685, 0, 0, 680, 0, 0, 0, 1262,
	0, 0, 0, 1147, 688, 1163, 1164, 1165, 0, 687,
	0, 675, 676, 677, 0, 674, 671, 672, 673, 666,
	667, 668, 669, 670, 680, 0, 0, 691, 0, 1160,
	0, 0, 0, 688, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1160, 0, 686, 0, 0,
	0, 0, 687, 679, 675, 676, 677, 0, 674, 671,
	672, 673, 666, 667, 668, 669, 670, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 675, 676, 677, 0, 674, 671, 672,
	673, 666, 667, 668, 669, 670, 663, 1166, 681, 682,
	683, 0, 0, 0, 0, 0, 680, 0, 0, 0,
	0, 0, 1161, 1166, 665, 688, 690, 0, 867, 882,
	859, 875, 874, 0, 0, 860, 0, 0, 1161, 884,
	883, 0, 664, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 880, 0, 872,
	871, 0, 0, 687, 0, 1162, 0, 870, 0, 674,
	671, 672, 673, 666, 667, 668, 669, 670, 0, 0,
	869, 1162, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 691, 0, 0, 0, 0,
	0, 863, 864, 865, 0, 539, 689, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 0,
	0, 679, 0, 0, 1157, 1158, 1159, 0, 1156, 1153,
	1154, 1155, 1148, 1149, 1150, 1151, 1152, 873, 0, 0,
	1157, 1158, 1159, 0, 1156, 1153, 1154, 1155, 1148, 1149,
	1150, 1151, 1152, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 688, 0, 0, 866, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 861, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 675, 676, 677, 0, 674, 671, 672,
	673, 666, 667, 668, 669, 670,
}
var sqlPact = [...]int{

	96, -1000, -17, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 774,
	-1000, -1000, -1000, 483, 578, 55, 1054, 1054, -1000, -1000,
	15567, 1596, 324, 324, 324, 399, 563, 81, -1000, 762,
	5, 15346, 12473, 1124, -19, 11810, 201, 96, 12252, 12473,
	15125, 961, 882, 11810, 14904, 14683, 14462, -1000, 8283, -1000,
	-1000, -1000, -1000, 728, -1000, -21, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 720, -1000, 14241, 14241, 672, -1000,
	-1000, 398, 264, 1135, -1000, -11, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	955, -1000, 707, 951, 948, 252, 697, -1000, 672, -1000,
	-1000, -1000, 11810, -1000, 14020, 898, 13799, -1000, 762, -1000,
	-1000, -1000, 777, 1111, 1111, 1111, 1139, 86, 84, 81,
	-35, 12473, -1000, 206, -1000, -1000, -1000, -1000, -1000, -35,
	6327, 6327, -1000, -1000, 201, -1000, 223, 10665, -140, -1000,
	5841, -1000, 843, 1032, 527, 525, 1029, 11810, 12473, 435,
	13578, -1000, 1027, 79, 1025, -1000, -41, 1023, -1000, -48,
	-1000, -1000, -1000, -1000, -1000, -1000, 201, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12031, 999, 12031, -1000, -1000, -1000, -27, -31, 835, 897,
	8767, 8526, 1085, 755, -1000, -1000, -1000, -13, 3638, 12473,
	966, 12031, 12473, -1000, 12473, -1000, 823, -1000, -1000, -32,
	-34, 88, -1000, 200, 794, 13357, -1000, 790, -1000, 777,
	-1000, 730, 820, 6588, 7317, 81, -1000, -1000, 81, 81,
	7317, -1000, -1000, 12473, -35, 1193, 12473, 945, -37, -1000,
	17373, -1000, -1000, 7317, 7317, 7317, 7317, 7317, 627, -1000,
	-1000, -1000, 4122, -1000, -1000, -140, 196, 211, -1000, -1000,
	192, -140, -1000, -1000, -1000, -1000, 188, 1278, 301, -1000,
	-1000, -1000, 7317, 268, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 965, 187, 186, -1000, -1000, -1000, -1000,
	184, 181, 180, 178, 177, 174, 167, 166, 165, 162,
	160, 158, 155, 605, -1000, 285, -1000, -1000, 285, 285,
	-1000, 138, 138, 140, -1000, -1000, -1000, 138, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 50, -1000,
	-1000, -1000, 12473, -140, -1000, 3396, 3638, 7317, -49, -1000,
	17896, -1000, -46, 508, -1000, 11358, 1106, 1097, 1098, 11810,
	391, 390, 12473, 276, 57, 1192, 10183, -1000, 12473, 12473,
	-1000, 12473, -1000, -1000, 12473, 12473, 12473, 5, 10906, 389,
	-42, 12473, 12473, -1000, 940, 567, 874, 767, -1000, -1000,
	-1000, -1000, -38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1232, -1000, -1000, -1000, -1000, 1258, -38,
	-1000, -1000, -1000, -1000, -1000, 1274, -1000, -1000, -1000, -1000,
	3638, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12473, -1000, -1000,
	-1000, -1000, 567, 874, -1000, 11810, 11127, 1017, 703, 783,
	-1000, 1015, -1000, -1000, -1000, -1000, 17896, -1000, 17896, 610,
	886, -1000, 886, -39, -1000, 17262, -1000, 151, -53, -1000,
	276, 9942, 6327, 18147, 12473, 394, 7317, 7317, 7317, 7317,
	7317, 7317, 7317, 7317, 7317, 7317, 7317, 7317, 7317, 7317,
	7317, 7317, 7317, 7317, 7317, 7317, 7317, 776, 381, 1083,
	637, 135, 3638, -1000, 1217, 1217, 1217, 18146, 18146, 134,
	-146, 16921, -40, -140, -1000, -1000, 5337, 5094, -140, 2984,
	-1000, 784, 1254, 280, 17896, 986, 912, 147, 78, 76,
	7317, 523, 7317, 7560, 7317, 7317, 4365, 7317, 7317, 7317,
	7317, 7317, 7317, -1000, 145, -1000, -1000, -1000, -1000, 1247,
	-1000, -1000, 1246, -1000, 1240, 276, 73, -1000, -1000, -1000,
	-1000, 2078, 5841, -1000, 692, 12473, 12473, 12473, -1000, -1000,
	782, 13136, -1000, 18147, 12473, -1000, 142, 141, 852, 846,
	12473, 12473, 12915, 12694, 12473, 775, 12473, 12473, 487, -1000,
	7317, 698, -1000, 9480, 289, 12473, 43, -1000, -1000, -1000,
	243, 12473, -1000, -1000, -1000, 79, -1000, -41, -1000, -1000,
	12473, -42, -43, 12473, -1000, -1000, -1000, 484, -1000, 539,
	-1000, 9008, -1000, -1000, -1000, 784, -1000, -47, -1000, -1000,
	-1000, -1000, 70, -44, -1000, -1000, -1000, -1000, 12473, 198,
	12473, 12473, 1003, 12473, -1000, -1000, -1000, 7317, -1000, -1000,
	-1000, 5, 12473, -1000, 910, -45, 975, 11589, 11589, -1000,
	9239, -1000, -1000, 1195, -1000, -1000, -1000, -1000, 42, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 140,
	605, 138, 138, 138, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 285, 285, 285, -1000, -1000, 249, 400, 400,
	1152, 1152, 1152, 556, 556, 741, 1058, 17978, 17978, 17978,
	569, 722, 722, 17978, 17978, 17978, 18146, 2294, 397, 7317,
	378, 598, 135, 7317, -1000, 611, -1000, -1000, -1000, 938,
	132, 7560, 7560, -1000, -1000, -1000, 4122, -1000, -1000, 131,
	7317, -1000, 7317, -54, -57, -1000, 17896, -1000, -60, -1000,
	-1000, -33, 7317, 7317, 7317, 69, -1000, 374, -1000, 368,
	366, 354, -1000, 128, 67, 461, -1000, 7317, 630, 127,
	125, 7317, -1000, -1000, 17867, 66, 932, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 65, 17824, 62, 17787, -1000, 7560,
	7560, 7560, 4122, 124, 61, 17184, -135, 17715, 6084, 6084,
	6084, 60, 17562, 7317, -135, 16013, 2700, 2403, -61, -65,
	-66, 1235, -67, 59, 58, 910, -1000, -1000, 7317, -1000,
	-1000, -1000, 349, 347, 997, -1000, 764, -1000, 570, 7317,
	12473, 123, 120, 538, -1000, 995, 623, 993, 623, -1000,
	-46, 501, -1000, -1000, 340, 17896, -1000, 1104, -71, -1000,
	-1000, 276, 10183, 5841, -75, -1000, -47, -47, -1000, -1000,
	-1000, -1000, -1000, 12473, -1000, 11127, 117, 12473, 115, 108,
	12473, -1000, -1000, 52, -1000, -1000, -1000, -1000, -1000, 903,
	1138, 9942, 866, 862, 9942, 924, 638, 638, 638, -1000,
	-1000, -1000, 12473, 107, -1000, 9721, 48, 975, 214, 212,
	-1000, 1234, 7317, 397, 7317, 7560, 7560, -1000, 397, -1000,
	-1000, -1000, -1000, 929, 106, 7317, 18147, 18037, 2726, -77,
	4851, -50, 16810, 7317, -1000, -1000, 211, -1000, 45, 5598,
	-1000, 17348, -29, -29, -1000, 804, 727, 587, 443, 1233,
	1273, 1036, -1000, 7317, 17525, -1000, 10424, 278, 659, 16767,
	18147, -1000, 7317, -1000, 928, 7317, -1000, 18147, 7560, 7560,
	7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560, 7560,
	7560, 7560, 7560, 7560, 7560, 7560, 815, 7560, 1214, 1214,
	1214, -58, 4608, -1000, 933, 928, 7317, 7317, 18147, 40,
	37, 35, -1000, 7317, -135, 7317, 7317, 7317, -1000, -1000,
	-1000, 34, -1000, 1231, -1000, -1000, 903, 17073, 12473, 12473,
	12473, 992, 1304, -1000, 16732, -79, 12473, 12473, -1000, 931,
	920, 318, 12473, -1000, 12473, -1000, 12473, 12473, 12473, 12473,
	116, 5, -1000, -1000, -1000, 242, -1000, -1000, 8042, 105,
	11127, 8042, 695, -1000, 272, 7317, 7317, 975, 9942, 9942,
	1028, 854, 9942, -1000, -1000, -1000, -1000, 104, 12473, 11589,
	314, 1227, 33, 1153, 397, 2559, 2104, 7317, 18147, 17451,
	-81, -1000, 7317, 7317, -1000, -83, -1000, 7317, -1000, 17896,
	-1000, 1265, 7317, 31, 29, 21, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18, -1000, -1000, 17896, 7317, -1000, -1000,
	15788, 7317, 16, -1000, 14, 17896, 933, 17896, -1000, 342,
	342, 1214, 1214, 1214, 247, 247, 760, 1474, 384, 384,
	384, 1378, 437, 437, 384, 384, 384, 927, 814, 103,
	18053, 7317, -87, -1000, -1000, -1000, 17896, 17896, 12, -1000,
	-1000, -1000, -135, 230, 16656, 16476, -1000, 10, 272, -1000,
	-1000, -1000, -1000, 12473, -1000, 12473, -1000, 12473, 779, -1000,
	-1000, 845, 102, 7560, 12473, -1000, 664, -92, -93, 778,
	-1000, 751, 7317, -1000, 18147, 623, 623, -1000, 337, 328,
	-1000, 1048, 8042, 1093, -1000, 100, -94, -1000, 71, 1122,
	7317, -1000, -1000, 99, 8042, 8, -98, 12473, -1000, 12473,
	17896, -135, -1000, 1028, -1000, 98, 7317, 9942, -1000, 12473,
	-99, -1000, -1000, 209, 208, -1000, 7317, 7317, 17451, -100,
	-1000, 18147, 397, 397, -1000, 16400, -1000, 17348, -1000, -1000,
	-1000, -1000, 17896, 613, -1000, 16365, -1000, -1000, -1000, 7560,
	926, 94, 18147, 16322, -1000, -1000, 7317, -1000, -1000, -1000,
	-1000, -1000, 662, -1000, -1000, -1000, 7317, 18053, 51, -1000,
	89, -1000, -1000, -1000, 524, -1000, -1000, 17896, 1125, -1000,
	-1000, 12473, 12473, 401, -104, 12473, -1000, -1000, 3879, 664,
	8042, 1102, -140, 12473, 1102, 16211, 2984, -105, -1000, 664,
	82, -76, -1000, 1166, -1000, 12473, 17896, -1000, -106, -1000,
	-1000, -1000, 397, 397, -1000, -1000, -1000, 1, 659, 1136,
	-1000, 2127, 7560, 18147, -110, -1000, 16057, -1000, 16038, 811,
	12473, 12473, 12473, 295, 12473, -1000, -1000, 413, -1000, 276,
	-1000, -1000, -1000, -1000, -1000, -1000, 1122, -33, 664, -1000,
	8042, 12473, 80, -111, -1000, -1000, 577, 7317, 2127, -112,
	-1000, -1000, -1000, 663, 667, -126, -131, 51, -1000, 7317,
	-1000, 10183, -1000, 1102, -1, -1000, -133, -1000, -1000, -1000,
	-9, 7074, 7074, -135, -1000, -1000, 686, 680, 472, -1000,
	-1000, -1000, -1000, -1000, 811, 17896, -117, -1000, -1000, 664,
	-1000, -1000, -1000, 7801, 682, 448, 17098, -1000, -1000, 1056,
	-1000, 303, 953, 953, 663, -1000, -1000, 1198, -1000, -1000,
	-1000, -1000, -1000, -1000, 1205, -1000, -1000, 838, -1000, -1000,
	6831, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1500, 1499, 1159, 1497, 1496, 1495, 1494, 1493, 76,
	1490, 1486, 93, 1482, 73, 1480, 1479, 1478, 28, 1477,
	1476, 1475, 1472, 62, 52, 2011, 107, 98, 1471, 1465,
	1464, 13, 81, 77, 1463, 55, 80, 83, 1389, 42,
	38, 26, 469, 1462, 1461, 1460, 1458, 34, 1457, 1454,
	1453, 11, 35, 15, 1452, 40, 70, 1442, 1441, 72,
	1436, 74, 32, 96, 10, 1434, 490, 1430, 9, 51,
	1429, 24, 1428, 19, 47, 105, 1427, 510, 45, 23,
	41, 1426, 1424, 1419, 1414, 49, 61, 37, 1404, 1402,
	56, 1394, 106, 101, 1392, 1391, 1390, 1387, 1386, 1385,
	1136, 1384, 1383, 1382, 3, 21, 43, 29, 30, 0,
	1092, 841, 1377, 25, 31, 59, 36, 39, 17, 1376,
	85, 1374, 1373, 1372, 1370, 1369, 57, 1367, 46, 109,
	33, 63, 68, 18, 50, 65, 95, 112, 82, 1366,
	87, 1364, 44, 1360, 1357, 611, 64, 1356, 1355, 1354,
	544, 541, 536, 90, 1352, 1347, 385, 103, 1346, 1343,
	60, 1337, 1336, 110, 1335, 104, 86, 1334, 84, 1333,
	69, 1331, 567, 91, 79, 1330, 94, 48, 1327, 1326,
	1321, 16, 2, 8, 5, 6, 4, 27, 20, 1318,
	1307, 97, 66, 1306, 538, 1304, 1303, 22, 1299, 1298,
	14, 1297, 12, 1296, 7, 1, 1295, 108, 1294, 71,
	1291, 1184, 1287, 111, 1286, 1285, 1181, 58,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 63, 63,
	62, 62, 65, 65, 11, 11, 12, 12, 12, 12,
	141, 141, 140, 13, 17, 207, 207, 207, 211, 211,
	212, 212, 213, 213, 213, 213, 213, 213, 213, 209,
	209, 19, 19, 19, 100, 100, 102, 102, 102, 102,
	37, 99, 99, 99, 99, 101, 101, 101, 101, 165,
	163, 163, 170, 170, 170, 44, 44, 44, 44, 44,
	45, 45, 45, 162, 162, 162, 162, 171, 171, 171,
	171, 171, 171, 46, 46, 46, 169, 169, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 164,
	164, 208, 208, 210, 210, 8, 8, 47, 47, 48,
	48, 106, 106, 106, 105, 179, 179, 180, 180, 180,
	181, 181, 181, 181, 181, 181, 181, 178, 178, 176,
	176, 177, 177, 177, 177, 214, 214, 104, 104, 51,
	51, 184, 184, 184, 184, 182, 182, 182, 182, 182,
	185, 183, 186, 186, 186, 186, 186, 129, 129, 129,
	22, 7, 7, 89, 89, 55, 55, 133, 133, 133,
	41, 41, 31, 31, 31, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 90, 90, 91, 91, 21, 21,
	21, 216, 216, 103, 103, 103, 103, 103, 36, 6,
	6, 14, 43, 43, 96, 96, 96, 98, 98, 98,
	97, 97, 97, 23, 68, 68, 69, 69, 139, 70,
	70, 18, 18, 25, 25, 24, 24, 24, 24, 24,
	24, 26, 26, 27, 27, 27, 27, 27, 27, 27,
	192, 192, 192, 194, 194, 191, 15, 15, 15, 15,
	193, 193, 215, 215, 77, 77, 77, 50, 49, 49,
	53, 53, 52, 54, 54, 132, 75, 75, 75, 75,
	92, 93, 93, 94, 94, 95, 95, 74, 74, 116,
	116, 28, 28, 59, 59, 60, 60, 134, 134, 134,
	134, 135, 135, 135, 135, 135, 135, 130, 130, 130,
	130, 131, 131, 80, 80, 80, 80, 78, 78, 79,
	79, 136, 136, 136, 136, 76, 76, 137, 137, 137,
	107, 107, 142, 142, 142, 58, 58, 58, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 144, 144,
	144, 144, 146, 146, 146, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 147, 147,
	154, 154, 155, 155, 156, 157, 148, 148, 149, 149,
	150, 151, 158, 158, 158, 160, 160, 152, 152, 153,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 87, 87, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 110, 110, 110, 110, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 187, 187, 187,
	187, 187, 187, 187, 189, 189, 190, 190, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 195, 195, 196, 196, 197, 197, 198,
	198, 200, 201, 201, 201, 202, 206, 206, 199, 199,
	203, 203, 203, 204, 204, 205, 205, 205, 205, 205,
	120, 120, 120, 121, 121, 122, 64, 64, 118, 118,
	117, 117, 117, 119, 119, 81, 159, 159, 159, 159,
	159, 159, 159, 82, 82, 88, 83, 83, 84, 84,
	84, 84, 84, 84, 113, 114, 85, 85, 85, 115,
	115, 123, 127, 127, 126, 125, 125, 124, 124, 108,
	108, 108, 108, 108, 71, 71, 217, 217, 128, 128,
	72, 72, 73, 67, 67, 66, 66, 138, 138, 138,
	138, 61, 61, 42, 42, 56, 56, 57, 57, 40,
	40, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 161, 161, 161, 38, 38, 38, 39, 39,
	167, 167, 167, 168, 168, 168, 168, 166, 166, 166,
	166, 166, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 175,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	4, 2, 4, 4, 3, 3, 4, 3, 2, 2,
	0, 2, 0, 2, 0, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 3, 2, 0, 3, 1, 2,
	2, 1, 1, 2, 4, 2, 5, 6, 7, 3,
	1, 4, 5, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 10, 13, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	8, 10, 8, 10, 1, 0, 2, 0, 3, 2,
	2, 1, 0, 1, 1, 3, 3, 0, 3, 3,
	6, 6, 1, 3, 1, 4, 2, 8, 5, 0,
	4, 3, 0, 7, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 2, 2, 1,
	4, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 4, 5, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 1, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 4, 4,
	4, 4, 6, 5, 5, 5, 4, 8, 6, 6,
	4, 4, 4, 5, 0, 5, 0, 2, 0, 1,
	3, 3, 2, 2, 0, 6, 1, 0, 3, 0,
	2, 2, 0, 1, 4, 2, 2, 2, 2, 2,
	4, 3, 5, 4, 3, 5, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 2,
	2, 2, 3, 5, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -193, 81, 87, 99, 182, -24, -25,
	195, 196, 29, 50, 184, 220, 56, -192, -27, -26,
	264, 240, 246, 191, -28, 208, 233, 267, 208, 68,
	110, 76, 113, 227, 68, 110, 208, -12, 264, -18,
	-14, -23, -9, -211, 18, -212, -213, 56, 81, 99,
	191, 113, 76, 227, -211, -100, 131, 193, 216, -101,
	-99, -165, 212, 140, -62, -38, 4, -172, -174, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 106, 113,
	121, 123, 128, 134, 136, 137, 138, 139, 142, 143,
	144, 146, 149, 151, 152, 158, 161, 164, 165, 168,
	171, 172, 173, 175, 176, 178, 179, 180, 182, 184,
	185, 187, 189, 190, 192, 195, 196, 198, 200, 202,
	205, 203, 209, 210, 220, 221, 222, 223, 226, 227,
	230, 231, 232, 236, 241, 242, 243, 244, 30, 31,
	32, 34, 35, 38, 42, 43, 45, 70, 72, 73,
	86, 88, 93, 101, 103, 107, 108, 114, 115, 116,
	118, 126, 148, 150, 159, 163, 167, 169, 174, 186,
	199, 204, 206, 213, 217, 218, 233, 234, 4, 68,
	49, 69, 100, 110, 209, 212, 216, 18, -216, 216,
	-216, -216, -215, 208, 208, -89, 68, 225, -26, -27,
	-25, -52, -53, 224, 117, 85, 157, -24, -25, -192,
	-194, 175, -191, -38, 131, 140, 193, 216, 212, -194,
	-49, -50, 18, 78, 268, -136, -42, 155, -38, -73,
	264, -3, -136, 107, -38, -42, 107, 97, 119, -137,
	-136, -38, 107, -61, 107, -42, -63, 107, -62, -141,
	-140, -168, 4, -172, -174, -173, 233, 47, 57, 98,
	112, 120, 122, 127, 129, 141, 160, 162, 183, 197,
	154, 268, 154, -100, -100, -102, -36, -37, 121, 171,
	214, 249, 97, 244, -46, 6, 74, -65, 266, 97,
	-208, 154, 97, -164, 97, 244, 121, 171, -103, -36,
	-37, -76, -136, -62, 107, 110, -38, 107, -52, -53,
	-75, -92, -93, 130, 153, -77, 18, 78, -77, -77,
	37, 265, 265, 268, -194, -57, 264, -67, -66, -138,
	-109, 257, -111, 255, 256, 261, 145, 245, -120, -42,
	-112, 9, 264, -123, -189, -25, 86, 24, -121, -122,
	186, -38, 8, 5, 6, 7, -40, -144, -153, 219,
	89, 147, 40, -187, -188, 4, -172, -167, -145, -155,
	-149, -152, 118, 47, 61, 64, 62, 65, 194, 228,
	41, 88, 163, 167, 206, 217, 218, 107, 148, 108,
	45, 101, 126, 80, 31, 32, 34, 35, 42, 43,
	70, 72, 73, 93, 114, 115, 116, 150, 174, 199,
	213, 234, -173, -156, -157, -150, -151, -158, -66, -73,
	257, -42, 264, -71, -108, 266, 269, 262, -72, -128,
	-109, 74, -33, 178, -32, 17, 19, 81, 231, 86,
	178, 178, 86, -137, -43, -42, 195, -38, 25, 86,
	-35, 268, 39, 180, 86, 268, 86, 265, 268, -207,
	-61, 208, 68, -213, -207, 268, 268, 128, -45, 134,
	144, 105, -163, 74, -170, -162, -129, 9, 219, 89,
	154, -169, 5, 256, -161, -168, 6, 8, 255, -163,
	74, 59, -171, 6, 4, -153, -129, 74, 131, 118,
	266, -166, 4, -172, -174, -173, -175, 18, 20, 21,
	22, 23, 24, 25, 26, 27, 36, 40, 41, 44,
	46, 48, 54, 56, 60, 61, 62, 63, 64, 65,
	74, 75, 77, 78, 79, 82, 83, 85, 89, 90,
	95, 96, 97, 99, 102, 104, 109, 110, 111, 117,
	119, 124, 125, 130, 132, 133, 145, 147, 153, 154,
	155, 156, 157, 166, 170, 177, 181, 191, 194, 201,
	207, 208, 211, 214, 215, 219, 224, 225, 228, 229,
	235, 237, 238, 239, 240, -165, -210, 95, -207, -165,
	-165, 128, 268, 268, -35, 268, 264, 145, -39, 107,
	-38, 145, -75, -93, -92, -94, -109, 18, -109, -111,
	-26, -26, -26, -54, -132, -109, -191, 25, -56, -38,
	-59, 97, 268, 10, 46, 28, 255, 256, 257, 258,
	259, 252, 253, 254, 251, 247, 248, 249, 52, 135,
	188, 12, 13, 14, 22, 156, 129, 245, 197, 120,
	30, 109, 25, 4, -109, -109, -109, -109, -109, 162,
	-25, -109, -64, -71, -25, -117, 262, 264, -71, 264,
	6, 6, 264, -124, -109, -195, 241, 95, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 169, -160, 236, -160, -160, -146, 264,
	-146, -147, 264, -146, 264, -59, -42, -108, -166, 257,
	-166, -109, 268, 265, 268, 214, -90, 54, 48, -105,
	107, 48, -176, -38, 54, -177, 44, 225, 170, 96,
	-90, 54, -90, 54, 54, -136, 214, 214, -42, -107,
	238, -96, -18, 264, 74, 25, -68, -69, -139, -70,
	-42, 264, -38, -38, -42, -61, -62, -63, -12, -140,
	214, -61, -56, 97, -37, -36, -44, 173, 200, 179,
	192, 268, 5, 8, 8, 6, -166, -209, -38, -37,
	-36, -136, -47, -48, -106, -105, -178, -176, 110, 225,
	86, 154, 145, 86, -95, 186, 187, 268, -31, 26,
	77, 264, 268, 265, -107, -60, -134, -136, -25, -135,
	264, -138, -142, -143, -145, -154, -148, -152, -153, 33,
	38, 210, 204, 114, 115, 116, 199, 31, 174, 93,
	80, 73, 72, 150, 35, 34, -156, -157, -150, -151,
	70, 213, 32, 43, 42, 234, -62, 212, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, -109,
	-109, -109, -109, -109, -109, -109, -109, -109, -109, 129,
	197, 30, 109, 214, 147, 145, 219, 89, 226, 78,
	151, -217, 207, 27, -115, -25, 264, -166, -120, 186,
	264, 265, 268, -64, -119, 263, -109, -117, -64, 265,
	265, -64, 235, 18, 78, 257, -86, 243, 138, 71,
	106, 137, -87, 190, 8, -127, -126, 237, -196, 91,
	102, 264, 265, 265, -109, -81, -159, 4, 243, 138,
	71, 106, 137, 190, -82, -109, -83, -110, -111, 255,
	256, 261, 264, 186, -84, -109, -64, -109, 36, 125,
	215, -85, -109, 97, -64, -109, -109, -109, -64, -64,
	-64, 264, 8, 8, 8, -107, 265, 263, 270, -128,
	-32, -42, -38, -38, 145, -105, 107, -142, -38, 264,
	264, 123, 123, -38, -38, 107, -38, 107, -38, -38,
	-33, 178, -38, -38, 178, -109, -98, 154, -61, 233,
	-38, -59, 268, 249, -61, -35, -209, -209, 223, 51,
	173, -170, -86, 268, 265, 268, -39, 110, -62, -42,
	86, -38, -132, -15, -18, -14, -23, -9, -38, -74,
	102, 268, 57, -80, 122, 141, 98, 127, 183, 112,
	-131, -130, 25, -38, -131, -25, -135, -134, -58, 24,
	-86, 264, 244, -109, 214, -217, 207, -115, -109, 147,
	219, 89, 226, 78, 151, 97, 264, -110, -110, -64,
	264, -64, -109, 268, 263, 263, 268, 265, -53, 268,
	-52, -109, -64, -64, 265, 214, 214, 214, 214, 264,
	265, -125, -126, 82, -109, -201, 161, 264, 264, -109,
	25, 265, 97, 265, -88, 166, 265, 10, 255, 256,
	257, 258, 259, 252, 253, 254, 251, 247, 248, 249,
	52, 135, 188, 12, 13, 14, 120, 109, -110, -110,
	-110, -64, 264, 265, -113, -114, 97, 95, 25, -85,
	-85, -85, 265, 97, -64, 268, 268, 268, 265, 265,
	265, 8, 265, 268, 265, 265, -74, -109, 214, 214,
	86, 145, -179, -177, -109, -56, 264, 264, -29, 81,
	195, -91, 86, -35, 86, -35, 214, -90, 54, 214,
	53, 265, -107, -69, -128, 265, -38, -106, 264, -39,
	264, 264, -38, 265, -116, 104, 37, -134, 122, 122,
	-134, -80, 122, -78, 160, -78, -78, -38, 264, 265,
	262, 262, 8, -109, -109, -110, -110, 97, 264, -109,
	-118, -142, 22, 22, 265, -64, 265, 268, 265, -109,
	-117, 265, 235, -53, -53, -53, 138, 106, 137, -87,
	137, -87, -87, 8, 6, 83, -109, 211, -202, -38,
	264, 238, -52, 265, -142, -109, -113, -109, -142, -110,
	-110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
	-110, -110, -110, -110, -110, -110, -110, 78, 145, 151,
	-110, 268, -64, 265, -114, -113, -109, -109, -142, 265,
	265, 265, -64, -109, -109, -109, 265, 8, -116, 263,
	-38, -38, -105, 86, -180, 54, -181, 46, 145, 147,
	225, 170, 44, 74, 177, 265, 265, -56, -56, 145,
	74, 145, 74, 67, 221, -38, -38, -42, -38, -38,
	-38, -97, 264, 154, -18, 249, -55, -133, -38, -190,
	264, -187, -188, -40, 264, -47, -55, 154, -197, 239,
	-109, -64, -134, -134, -79, 229, 154, 122, -134, 264,
	-56, -130, 263, 8, 8, 265, 22, 22, -109, -118,
	265, 268, -109, -109, 265, -109, 6, -109, 265, 265,
	265, 265, -109, -206, -38, -109, 265, 265, -114, 97,
	78, 151, 264, -109, 265, 265, 268, 265, 265, 265,
	-197, -105, -38, -62, 147, 123, 264, -110, -42, -104,
	-214, 55, 205, 265, 265, 147, 147, -109, -142, -35,
	-35, 214, 214, 79, -55, 54, -73, -25, 264, 265,
	268, -41, -71, 46, -41, -109, 264, -55, 265, 265,
	-42, -198, -200, -38, -79, 264, -109, -134, -56, 265,
	263, 263, -109, -109, 265, -142, 265, -53, -199, 165,
	265, -110, 97, 264, -118, 265, -109, -181, -109, -51,
	264, 264, 177, -34, 46, -38, -38, 227, 146, 265,
	-38, -104, -133, -31, -62, -31, 265, -64, 265, -104,
	264, 268, 25, -56, 265, 265, -53, 37, -110, -118,
	265, 265, 265, -184, 136, -56, -56, -42, -30, 229,
	-62, 195, -107, -41, -53, -104, -55, -200, -202, 265,
	-203, 172, 187, -64, 265, -182, -185, -183, 154, 98,
	164, 198, 265, 265, -51, -109, -68, -31, 265, 265,
	265, -204, -205, 30, 222, 59, -109, -204, -183, 154,
	-185, 154, 227, 76, -184, -107, -104, -205, 168, 94,
	186, 168, 94, -186, 143, 180, 39, 195, -186, -182,
	22, 16, 147, 74, -205,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 301, 0, 0, 271, -2,
	0, 0, 242, 242, 242, 303, 214, 300, -2, 311,
	0, 0, 0, 309, 285, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 746, 780, 790, 95,
	105, 0, 840, -2, 109, 60, 695, 696, 697, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 747, 748, 749, 750, 751, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 781, 782, 783, 784, 785,
	786, 787, 788, 789, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 841, 842, 843, 844, 845, 138, 139,
	0, 141, 152, 0, 150, 0, 0, 148, 247, 241,
	239, 240, 0, 302, 0, 0, 0, 213, -2, 281,
	282, -2, 0, 306, 306, 306, 0, 0, 282, 0,
	290, 768, 293, 678, 746, 752, 780, 790, 840, 291,
	664, 0, 308, 307, 0, 286, 361, 0, 673, 331,
	0, 2, 0, 822, 0, 0, 822, 0, 0, 0,
	367, 52, 822, 43, 822, 671, 56, 822, 58, 0,
	70, 72, 703, 704, 705, 706, 844, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	0, 0, 0, 92, 93, 94, 96, 97, 0, 0,
	0, 0, 0, 0, 108, 133, 134, 61, 0, 0,
	154, 0, 0, 144, 0, 145, 0, 147, 238, 243,
	244, 43, 365, 0, 822, 699, 249, 822, -2, 0,
	277, 318, 319, 0, 0, 0, 304, 305, 0, 0,
	0, 273, 274, 0, 292, 0, 0, 334, 663, 665,
	669, 670, 446, 0, 0, 0, 0, 0, 0, 525,
	526, 527, 0, 529, 530, 531, 817, 0, 535, 536,
	836, 673, 681, 682, 683, 684, 0, 0, 0, 689,
	690, 691, 648, 574, 545, -2, -2, 679, 388, 389,
	390, 391, -2, 846, 549, 551, 553, 554, 555, 556,
	0, 818, 832, 833, 839, 842, 843, 822, 829, 823,
	813, 820, 828, 733, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 702, 412, 413, 418, 419, 421, 334, 332,
	362, 363, 0, 674, 654, 0, 0, 0, 0, 660,
	658, 659, 20, 235, 22, 0, 235, 235, 0, 0,
	0, 0, 0, 371, 0, 252, 0, 368, 0, 0,
	54, 0, 41, 42, 0, 0, 0, 301, 0, 0,
	75, 0, 729, 81, 0, 0, 0, 0, 100, 120,
	121, 122, 101, 103, 110, 112, 113, 114, 123, 124,
	125, 126, 207, 0, 209, 136, 137, 692, 0, 102,
	104, 106, 107, 127, 128, 0, 130, 131, 132, 429,
	0, 62, 707, 708, 709, 710, 711, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 140, 142, 0, 151, 143,
	149, 146, 0, 0, 210, 0, 158, 0, 0, 822,
	698, 0, 280, 316, 317, 320, 323, 324, 321, 446,
	287, 288, 289, 312, 313, 224, 294, 0, 0, 675,
	371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	657, 0, 0, 668, 450, 451, 452, 473, 474, 0,
	-2, 606, 0, 532, 533, 534, 0, 0, -2, 0,
	686, 443, 0, 0, 647, 576, 0, 0, 0, 0,
	0, 0, 0, 627, 633, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 415, 425, 423, 422, 404, 0,
	403, 401, 0, 405, 0, 371, 0, 655, 649, 650,
	651, 0, 0, 662, 0, 0, 0, 0, 234, 24,
	822, 0, 34, 0, 0, 180, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	0, 259, 254, 0, 0, 0, 334, 264, 266, 267,
	0, 0, 369, 53, 672, 43, 59, 57, 65, 71,
	0, 76, 77, 0, 98, 99, 248, 0, 117, 0,
	119, 0, 208, 694, 693, 443, 63, 153, 89, 245,
	246, 366, 0, 157, 159, 161, 162, 163, 699, 0,
	0, 0, 0, 0, 322, 325, 326, 0, 315, 222,
	223, 301, 0, 677, 328, 333, 335, 352, 352, 339,
	0, 666, 447, 377, 378, 379, 380, 381, 443, 384,
	385, 386, 387, 395, 396, 397, 398, 399, 400, 409,
	0, 394, 394, 394, 406, 407, 410, 411, 416, 417,
	427, 428, 426, 426, 426, 424, 448, 0, 453, 454,
	455, 456, 457, 458, 459, 460, 461, -2, -2, -2,
	465, 466, 467, -2, -2, -2, 471, 472, -2, 0,
	0, 657, 0, 0, 479, 0, 482, 484, 486, 0,
	0, 0, 0, 656, 496, 639, 0, 667, 481, 0,
	0, 528, 0, 0, 0, 612, 606, 613, 0, -2,
	537, 311, 0, 0, 0, 0, 687, 430, 431, 432,
	433, 434, 435, 444, 0, 646, 642, 0, 584, 0,
	0, 0, 550, 552, 0, 0, 0, 616, 617, 618,
	619, 620, 621, 622, 0, 0, 0, 0, 498, 0,
	0, 0, 0, 836, 0, 606, 632, 0, 0, 0,
	0, 0, 606, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 328, 364, 652, 0, 661,
	23, 226, 0, 0, 0, 26, 822, 166, 0, 0,
	0, 0, 0, 237, 35, 822, 43, 822, 43, 36,
	21, 235, 225, 228, 0, 370, 251, 0, 0, 256,
	253, 371, 0, 0, 0, 55, 73, 74, 115, 116,
	118, 111, 129, 0, 155, 0, 0, 699, 0, 0,
	0, 250, 314, 0, 296, 297, 298, 299, 676, 330,
	0, 0, 0, 0, 0, 0, 358, 358, 358, 356,
	337, 351, 0, 350, 338, -2, 339, 0, 372, 374,
	382, 0, 0, -2, 0, 0, 0, 497, -2, 480,
	483, 485, 487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 607, 0, 610, 611, 0, -2, 0, 0,
	310, 311, 311, 311, 543, 0, 0, 0, 0, 0,
	0, 0, 643, 0, 0, 544, 0, 0, 0, 0,
	0, 558, 0, 559, 0, 0, 560, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 500, 501,
	502, 0, 0, 561, 630, 631, 0, 0, 0, 0,
	0, 0, 566, 0, 637, 0, 0, 0, 570, 571,
	572, 0, 392, 0, 408, 420, 330, 0, 0, 0,
	0, 0, 164, 179, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 32, 0, 38, 0, 0, 0, 0,
	262, 0, 263, 265, 268, 0, 90, 160, 0, 0,
	158, 0, 0, 295, 578, 0, 0, 336, 0, 0,
	0, 0, 0, 353, 357, 354, 355, 348, 0, 341,
	0, 0, 0, 449, -2, 0, 0, 0, 0, -2,
	0, 608, 0, 0, 640, 0, 601, 0, -2, 607,
	614, 538, 0, 0, 0, 0, 436, 437, 438, 439,
	440, 441, 442, 0, 688, 641, 645, 0, 582, 583,
	587, 0, 0, 548, 0, 615, 624, 625, 499, 503,
	504, 505, 506, 507, 508, 509, 510, 511, -2, -2,
	-2, 515, 516, 517, -2, -2, -2, 0, 0, 0,
	626, 0, 0, 604, 628, 629, 634, 635, 0, 563,
	564, 565, 636, 0, 0, 0, 414, 0, 578, 653,
	230, 232, 25, 0, 165, 0, 168, 0, 0, 171,
	172, 0, 0, 0, 0, 181, 188, 0, 0, 0,
	40, 0, 0, 236, 0, 43, 43, 227, 0, 0,
	229, 0, 0, 0, 255, 0, 0, 215, 221, 221,
	0, 546, 547, 0, 0, 0, 0, 0, 283, 0,
	329, 327, 342, 0, 344, 0, 0, 0, 346, 0,
	0, 340, 375, 0, 0, 383, 0, 0, -2, 0,
	490, 0, -2, -2, 600, 607, 685, 311, 539, 541,
	542, 445, 644, 589, 586, 0, 573, 557, 623, 0,
	0, 0, 0, 607, 603, 562, 0, 568, 569, 393,
	284, 27, 0, 169, 170, 173, 0, 175, 190, 182,
	0, 185, 186, 183, 0, 29, 30, 39, 45, 31,
	37, 0, 0, 0, 0, 0, 269, 270, 0, 188,
	0, 224, 680, 0, 224, 0, 0, 0, 156, 188,
	0, 577, 579, 0, 343, 0, 360, 345, 0, 349,
	376, 373, -2, -2, 491, 609, 602, 0, 311, 0,
	575, -2, 0, 0, 0, 605, 0, 167, 0, 194,
	0, 0, 0, 47, 0, 231, 233, 0, 258, 371,
	261, 177, 216, 217, 220, 218, 221, 311, 188, 211,
	0, 0, 0, 0, 347, 540, 592, 0, -2, 0,
	523, 567, 174, 199, 0, 0, 0, 190, 33, 0,
	44, 0, 260, 224, 0, 178, 0, 580, 581, 359,
	0, 0, 0, 588, 524, 176, 195, 196, 0, 191,
	192, 193, 189, 187, 194, 46, 371, 219, 538, 188,
	585, 590, 593, -2, 793, 726, 0, 591, 197, 0,
	198, 0, 0, 0, 199, 257, 212, 0, 595, 596,
	597, 598, 599, 200, 0, 203, 204, 0, 201, 184,
	0, 202, 205, 206, 594,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 253, 3, 259, 254, 3,
	264, 265, 257, 255, 268, 256, 266, 258, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 270, 267,
	247, 249, 248, 3, 269, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 262, 3, 263, 252, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 251, 3, 261,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 250, 260,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:447
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:453
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:459
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:478
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:487
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:493
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:497
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:503
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:507
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:514
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:519
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:524
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:529
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:533
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:535
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:537
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:540
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:545
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:550
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:553
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:557
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:559
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:562
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:567
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:572
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:576
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:577
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:578
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:581
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:582
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:585
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:586
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:597
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:604
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:608
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:612
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:616
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:620
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:624
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:630
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:634
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:640
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:644
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:650
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:654
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:661
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:665
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:671
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:680
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:684
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:694
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:701
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:712
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:736
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:743
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.stmt = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.userPriority = sqlDollar[2].userPriority
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			unimplemented()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:883
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqlVAL.userPriority = Low
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.userPriority = Normal
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.userPriority = High
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.expr = DBool(true)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.expr = DBool(false)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:953
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			unimplemented()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			unimplemented()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.stmt = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 150:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.qname = nil
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.targetListPtr = nil
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.strs = nil
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.tblDefs = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.colQuals = nil
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			unimplemented()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1163
		{
			unimplemented()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1176
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1213
		{
			unimplemented()
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.strs = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.strs = nil
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1272
		{
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1280
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1283
		{
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1289
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1294
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1295
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.boolVal = true
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.boolVal = false
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1372
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1376
		{
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.dir = Ascending
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.dir = Descending
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.dir = DefaultDirection
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.stmt = nil
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.stmt = nil
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.boolVal = true
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.boolVal = false
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1462
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: UnspecifiedUserPriority}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].userPriority}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[1].isoLevel, UserPriority: sqlDollar[3].userPriority}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel, UserPriority: sqlDollar[1].userPriority}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.stmt = &Insert{}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1535
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1536
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1537
		{
		}
	case 260:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1540
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1542
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			unimplemented()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			unimplemented()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			unimplemented()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1788
		{
			unimplemented()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1791
		{
			unimplemented()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			unimplemented()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1804
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.boolVal = true
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.boolVal = false
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.boolVal = false
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.boolVal = true
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1831
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.orderBy = nil
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1890
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.expr = nil
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1932
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.groupBy = nil
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.expr = nil
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.tblExprs = nil
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			unimplemented()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2064
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2069
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.str = astFullJoin
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.str = astLeftJoin
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.str = astRightJoin
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.str = astInnerJoin
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2103
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2138
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.expr = nil
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2196
		{
			unimplemented()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			unimplemented()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			unimplemented()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2201
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2202
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2210
		{
			unimplemented()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.ival = IntVal{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2388
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.colType = &DateType{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2407
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2408
		{
			unimplemented()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2409
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
			unimplemented()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2411
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			unimplemented()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			unimplemented()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			unimplemented()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			unimplemented()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			unimplemented()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2423
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2424
		{
			unimplemented()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2452
		{
			unimplemented()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2584
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2824
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2828
		{
			unimplemented()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2829
		{
			unimplemented()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2831
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2836
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2854
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			unimplemented()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			unimplemented()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2874
		{
			unimplemented()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			unimplemented()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2893
		{
			unimplemented()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2959
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2963
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2964
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2969
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			unimplemented()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2976
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2981
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			unimplemented()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3001
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3011
		{
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3015
		{
			unimplemented()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3021
		{
			unimplemented()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.expr = Row(nil)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.expr = Row(nil)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.expr = Array(nil)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.exprs = nil
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.exprs = nil
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 646:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.expr = nil
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.expr = nil
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3344
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.selExprs = nil
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3459
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3495
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3506
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.expr = DBool(true)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.expr = DBool(false)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.expr = DNull
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
