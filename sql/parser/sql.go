// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:291
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const IN = 57465
const ILIKE = 57466
const INDEX = 57467
const INDEXES = 57468
const INITIALLY = 57469
const INNER = 57470
const INSERT = 57471
const INT = 57472
const INT64 = 57473
const INTEGER = 57474
const INTERSECT = 57475
const INTERVAL = 57476
const INTO = 57477
const IS = 57478
const ISOLATION = 57479
const JOIN = 57480
const KEY = 57481
const KEYS = 57482
const LATERAL = 57483
const LEADING = 57484
const LEAST = 57485
const LEFT = 57486
const LEVEL = 57487
const LIKE = 57488
const LIMIT = 57489
const LOCAL = 57490
const LOCALTIME = 57491
const LOCALTIMESTAMP = 57492
const LOW = 57493
const LSHIFT = 57494
const MATCH = 57495
const MINUTE = 57496
const MONTH = 57497
const NAME = 57498
const NAMES = 57499
const NATURAL = 57500
const NEXT = 57501
const NO = 57502
const NO_INDEX_JOIN = 57503
const NORMAL = 57504
const NOT = 57505
const NOTHING = 57506
const NULL = 57507
const NULLIF = 57508
const NULLS = 57509
const NUMERIC = 57510
const OF = 57511
const OFF = 57512
const OFFSET = 57513
const ON = 57514
const ONLY = 57515
const OR = 57516
const ORDER = 57517
const ORDINALITY = 57518
const OUT = 57519
const OUTER = 57520
const OVER = 57521
const OVERLAPS = 57522
const OVERLAY = 57523
const PARTIAL = 57524
const PARTITION = 57525
const PLACING = 57526
const POSITION = 57527
const PRECEDING = 57528
const PRECISION = 57529
const PREPARE = 57530
const PRIMARY = 57531
const PRIORITY = 57532
const RANGE = 57533
const READ = 57534
const REAL = 57535
const RECURSIVE = 57536
const REF = 57537
const REFERENCES = 57538
const RENAME = 57539
const REPEATABLE = 57540
const RELEASE = 57541
const RESTRICT = 57542
const RETURNING = 57543
const REVOKE = 57544
const RIGHT = 57545
const ROLLBACK = 57546
const ROLLUP = 57547
const ROW = 57548
const ROWS = 57549
const RSHIFT = 57550
const SAVEPOINT = 57551
const SEARCH = 57552
const SECOND = 57553
const SELECT = 57554
const SERIAL = 57555
const SERIALIZABLE = 57556
const SESSION = 57557
const SESSION_USER = 57558
const SET = 57559
const SHOW = 57560
const SIMILAR = 57561
const SIMPLE = 57562
const SMALLINT = 57563
const SMALLSERIAL = 57564
const SNAPSHOT = 57565
const SOME = 57566
const SQL = 57567
const START = 57568
const STRICT = 57569
const STRING = 57570
const STORING = 57571
const SUBSTRING = 57572
const SYMMETRIC = 57573
const SYSTEM = 57574
const TABLE = 57575
const TABLES = 57576
const TEXT = 57577
const THEN = 57578
const TIME = 57579
const TIMESTAMP = 57580
const TIMESTAMPTZ = 57581
const TO = 57582
const TRAILING = 57583
const TRANSACTION = 57584
const TREAT = 57585
const TRIM = 57586
const TRUE = 57587
const TRUNCATE = 57588
const TYPE = 57589
const UNBOUNDED = 57590
const UNCOMMITTED = 57591
const UNION = 57592
const UNIQUE = 57593
const UNKNOWN = 57594
const UPDATE = 57595
const UPSERT = 57596
const USER = 57597
const USING = 57598
const VALID = 57599
const VALIDATE = 57600
const VALUE = 57601
const VALUES = 57602
const VARCHAR = 57603
const VARIADIC = 57604
const VARYING = 57605
const WHEN = 57606
const WHERE = 57607
const WINDOW = 57608
const WITH = 57609
const WITHIN = 57610
const WITHOUT = 57611
const YEAR = 57612
const ZONE = 57613
const NOT_LA = 57614
const WITH_LA = 57615
const AS_LA = 57616
const POSTFIXOP = 57617
const UMINUS = 57618

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"ILIKE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4633

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	295, 24,
	-2, 351,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 326,
	172, 326,
	201, 326,
	293, 326,
	295, 326,
	-2, 336,
	-1, 51,
	1, 329,
	172, 329,
	201, 329,
	293, 329,
	295, 329,
	-2, 335,
	-1, 60,
	1, 24,
	295, 24,
	-2, 351,
	-1, 269,
	1, 161,
	295, 161,
	-2, 844,
	-1, 302,
	147, 361,
	171, 361,
	-2, 332,
	-1, 305,
	147, 360,
	171, 360,
	-2, 330,
	-1, 428,
	147, 360,
	171, 360,
	-2, 333,
	-1, 484,
	292, 785,
	-2, 778,
	-1, 485,
	292, 786,
	-2, 779,
	-1, 491,
	5, 495,
	292, 495,
	-2, 930,
	-1, 514,
	5, 461,
	-2, 906,
	-1, 515,
	5, 489,
	292, 489,
	-2, 908,
	-1, 516,
	5, 469,
	-2, 909,
	-1, 517,
	5, 468,
	-2, 910,
	-1, 518,
	5, 489,
	292, 489,
	-2, 913,
	-1, 519,
	5, 489,
	292, 489,
	-2, 914,
	-1, 520,
	5, 490,
	-2, 917,
	-1, 521,
	5, 456,
	-2, 918,
	-1, 522,
	5, 456,
	-2, 919,
	-1, 523,
	5, 471,
	-2, 922,
	-1, 524,
	5, 457,
	-2, 927,
	-1, 525,
	5, 458,
	-2, 928,
	-1, 526,
	5, 459,
	-2, 929,
	-1, 527,
	5, 456,
	-2, 933,
	-1, 528,
	5, 462,
	-2, 938,
	-1, 529,
	5, 460,
	-2, 941,
	-1, 530,
	5, 487,
	292, 487,
	-2, 943,
	-1, 531,
	5, 491,
	-2, 946,
	-1, 532,
	5, 493,
	-2, 947,
	-1, 533,
	5, 486,
	292, 486,
	-2, 951,
	-1, 851,
	95, 336,
	133, 336,
	147, 336,
	171, 336,
	175, 336,
	250, 336,
	-2, 605,
	-1, 859,
	292, 763,
	-2, 752,
	-1, 1049,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 529,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 530,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 531,
	-1, 1055,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 535,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 536,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 537,
	-1, 1060,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 542,
	-1, 1066,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 544,
	-1, 1069,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 549,
	-1, 1070,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 550,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 551,
	-1, 1096,
	180, 676,
	-2, 679,
	-1, 1256,
	95, 336,
	133, 336,
	147, 336,
	171, 336,
	175, 336,
	250, 336,
	-2, 409,
	-1, 1260,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 543,
	-1, 1261,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 545,
	-1, 1266,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 546,
	-1, 1284,
	180, 675,
	-2, 678,
	-1, 1438,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 547,
	-1, 1443,
	136, 0,
	-2, 561,
	-1, 1451,
	180, 677,
	-2, 680,
	-1, 1484,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 586,
	-1, 1485,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 587,
	-1, 1486,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 588,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 592,
	-1, 1491,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 593,
	-1, 1492,
	12, 0,
	13, 0,
	14, 0,
	275, 0,
	276, 0,
	277, 0,
	-2, 594,
	-1, 1596,
	136, 0,
	-2, 562,
	-1, 1599,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 565,
	-1, 1600,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 567,
	-1, 1684,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 566,
	-1, 1685,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 568,
	-1, 1692,
	136, 0,
	-2, 595,
	-1, 1733,
	136, 0,
	-2, 596,
	-1, 1781,
	34, 0,
	124, 0,
	146, 0,
	219, 0,
	272, 0,
	-2, 905,
}

const sqlNprod = 1045
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23499

var sqlAct = [...]int{

	485, 1780, 1761, 1637, 1802, 933, 1738, 1763, 1779, 1762,
	941, 1022, 1145, 1462, 803, 1672, 1560, 1522, 588, 483,
	1580, 306, 37, 1559, 458, 1659, 270, 1588, 482, 328,
	1569, 854, 84, 84, 84, 575, 1031, 84, 85, 1006,
	84, 475, 1574, 677, 534, 1418, 1287, 546, 84, 1253,
	856, 1339, 1252, 1188, 1338, 84, 84, 447, 1003, 84,
	1427, 1243, 84, 84, 84, 784, 1005, 17, 84, 84,
	84, 84, 781, 354, 972, 942, 311, 555, 552, 909,
	1239, 918, 1142, 325, 1106, 1082, 325, 1079, 336, 956,
	23, 1034, 325, 651, 336, 311, 416, 349, 73, 305,
	799, 965, 313, 50, 998, 1194, 635, 805, 13, 557,
	6, 355, 457, 448, 547, 548, 417, 356, 662, 632,
	1032, 78, 886, 351, 890, 8, 7, 5, 4, 71,
	935, 347, 1009, 50, 316, 431, 344, 631, 432, 77,
	346, 79, 653, 430, 248, 257, 649, 568, 340, 577,
	435, 314, 51, 934, 969, 310, 80, 75, 74, 76,
	310, 1679, 577, 50, 1680, 1809, 52, 577, 1026, 807,
	1776, 1769, 589, 1658, 1026, 1760, 808, 1754, 962, 324,
	1026, 975, 331, 1735, 1200, 1282, 962, 536, 341, 1729,
	1283, 352, 1026, 295, 1719, 970, 808, 1658, 810, 1710,
	56, 1251, 1026, 303, 334, 267, 1686, 318, 1683, 962,
	1669, 1026, 1666, 1658, 1723, 1667, 806, 302, 810, 809,
	1657, 58, 1281, 1658, 808, 938, 566, 975, 1642, 971,
	968, 1026, 1497, 1641, 1621, 808, 1026, 975, 1601, 809,
	1598, 975, 1533, 962, 84, 1026, 810, 1447, 59, 1395,
	975, 1389, 1390, 1356, 1390, 54, 1357, 810, 477, 84,
	1450, 55, 84, 84, 1225, 1354, 907, 809, 975, 535,
	1353, 1352, 815, 975, 975, 1241, 1286, 1227, 809, 1284,
	53, 975, 975, 807, 824, 1027, 973, 984, 1026, 1661,
	975, 974, 815, 961, 975, 84, 962, 84, 1026, 84,
	906, 84, 583, 905, 578, 584, 977, 1090, 549, 1021,
	992, 442, 550, 443, 550, 775, 84, 578, 825, 774,
	815, 325, 578, 643, 429, 423, 642, 84, 380, 323,
	549, 815, 60, 676, 550, 400, 1778, 1775, 84, 84,
	84, 1768, 84, 1730, 56, 967, 1668, 1626, 1622, 428,
	1614, 543, 1613, 541, 1200, 56, 490, 1612, 1607, 545,
	1606, 388, 325, 569, 569, 58, 825, 966, 1551, 1605,
	1558, 1512, 1507, 84, 826, 1506, 58, 825, 540, 1505,
	84, 389, 84, 580, 1453, 1310, 81, 1436, 1417, 629,
	1399, 1361, 59, 354, 354, 1358, 1346, 325, 1337, 641,
	581, 679, 84, 59, 84, 84, 84, 84, 84, 84,
	54, 84, 1309, 576, 1306, 84, 55, 422, 778, 1304,
	84, 1292, 826, 1291, 53, 1771, 84, 1226, 49, 1159,
	1113, 355, 355, 826, 1112, 937, 1087, 356, 356, 680,
	420, 442, 862, 441, 84, 681, 1464, 84, 819, 811,
	812, 813, 814, 816, 29, 836, 1722, 777, 341, 438,
	439, 1229, 30, 1702, 857, 1701, 303, 444, 806, 811,
	812, 813, 814, 816, 853, 836, 1694, 1675, 1397, 1664,
	302, 1315, 1656, 1634, 311, 1619, 567, 570, 1550, 1591,
	1567, 1442, 1435, 585, 817, 818, 819, 811, 812, 813,
	814, 816, 859, 836, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 1414, 836, 1413, 1412, 1208, 1410, 639,
	1373, 808, 1088, 1372, 1336, 638, 549, 1300, 808, 1299,
	550, 1278, 1274, 451, 1084, 1214, 1173, 1172, 673, 1152,
	666, 765, 1111, 810, 1025, 84, 891, 894, 898, 884,
	810, 679, 883, 882, 881, 880, 879, 878, 877, 84,
	876, 875, 617, 84, 809, 776, 84, 84, 789, 900,
	788, 809, 84, 787, 84, 84, 56, 84, 801, 874,
	84, 873, 84, 84, 872, 354, 1310, 325, 303, 680,
	336, 303, 303, 901, 903, 681, 945, 58, 912, 871,
	870, 336, 795, 1128, 336, 796, 797, 762, 951, 349,
	766, 767, 768, 769, 770, 869, 771, 815, 860, 858,
	773, 53, 779, 355, 59, 329, 446, 386, 1173, 356,
	376, 54, 374, 595, 84, 84, 936, 55, 936, 923,
	925, 888, 889, 1557, 616, 1556, 1207, 892, 899, 979,
	808, 73, 895, 808, 672, 957, 53, 542, 1311, 1312,
	1313, 1314, 1316, 825, 1681, 415, 1555, 1310, 1201, 1016,
	1586, 896, 394, 867, 78, 897, 1310, 679, 959, 1360,
	538, 1359, 1315, 928, 1259, 969, 50, 411, 395, 1575,
	50, 915, 77, 809, 79, 934, 958, 1465, 960, 1118,
	1107, 940, 1295, 352, 260, 887, 931, 1196, 954, 80,
	75, 74, 76, 953, 952, 680, 950, 949, 1744, 826,
	997, 681, 1790, 1709, 808, 1221, 970, 1541, 1325, 863,
	983, 594, 558, 1791, 559, 558, 892, 559, 895, 309,
	986, 294, 288, 293, 808, 64, 810, 289, 889, 888,
	1650, 980, 981, 978, 1649, 1385, 1365, 1364, 1755, 985,
	971, 968, 1396, 1315, 1262, 84, 810, 809, 537, 1213,
	1212, 81, 1315, 1211, 1121, 1210, 1067, 308, 976, 84,
	84, 930, 300, 929, 1326, 419, 1156, 809, 1155, 65,
	820, 817, 818, 819, 811, 812, 813, 814, 816, 1038,
	836, 392, 560, 325, 414, 560, 372, 836, 84, 1726,
	84, 1028, 1708, 49, 297, 1122, 1746, 973, 1325, 310,
	815, 1639, 571, 911, 487, 973, 1081, 911, 558, 1384,
	559, 1799, 325, 910, 1019, 1020, 1037, 68, 393, 29,
	815, 1222, 1081, 1189, 679, 1401, 1387, 30, 1193, 1123,
	1120, 1198, 1187, 1757, 1703, 1320, 1317, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 1765, 564, 825, 563, 62, 1758,
	1091, 1095, 1001, 1098, 1326, 1107, 967, 1189, 1404, 1402,
	671, 670, 680, 664, 659, 885, 69, 1085, 681, 1137,
	1529, 1000, 1805, 390, 307, 1149, 1150, 1151, 560, 1002,
	919, 1790, 901, 1375, 577, 1158, 1124, 901, 1094, 84,
	84, 84, 1184, 67, 66, 84, 1220, 63, 84, 391,
	1029, 1530, 826, 412, 84, 84, 84, 84, 84, 836,
	84, 84, 836, 1164, 1766, 973, 973, 1690, 84, 298,
	84, 1298, 1313, 1314, 1316, 850, 391, 84, 1319, 1311,
	1312, 1313, 1314, 1316, 1168, 418, 84, 301, 674, 922,
	311, 56, 1195, 1086, 1103, 1119, 383, 385, 794, 1428,
	561, 1195, 1767, 561, 1798, 310, 413, 84, 84, 1271,
	325, 1036, 58, 84, 1162, 434, 1203, 1640, 1204, 1191,
	1764, 1789, 1269, 354, 70, 1787, 617, 811, 812, 813,
	814, 816, 1525, 836, 1526, 556, 1183, 1803, 1382, 59,
	623, 84, 908, 84, 84, 84, 54, 1163, 84, 813,
	814, 816, 55, 836, 675, 61, 1264, 84, 1528, 1573,
	1376, 355, 1014, 403, 84, 1531, 84, 356, 921, 1232,
	1231, 72, 1080, 381, 433, 379, 1678, 1804, 988, 1199,
	1064, 1644, 1202, 1797, 990, 619, 1643, 1267, 311, 578,
	325, 1272, 470, 1617, 1806, 1310, 561, 595, 434, 1632,
	991, 1493, 1258, 1367, 1537, 1813, 1205, 1310, 616, 989,
	1219, 1216, 1167, 1228, 1217, 1230, 1223, 1218, 1015, 1170,
	1527, 1242, 786, 957, 82, 241, 242, 1277, 1224, 259,
	920, 1279, 271, 780, 617, 1540, 1400, 311, 1739, 433,
	259, 772, 1539, 1289, 1290, 1237, 959, 317, 317, 1589,
	1285, 327, 1236, 644, 327, 333, 327, 1257, 50, 1633,
	327, 342, 327, 271, 958, 1206, 960, 1268, 1246, 1065,
	1062, 1175, 1174, 618, 1270, 1618, 1335, 1494, 648, 1583,
	617, 1265, 1263, 1495, 1249, 1536, 311, 1348, 1812, 665,
	660, 1315, 1061, 1246, 1244, 594, 1423, 339, 1077, 1422,
	1247, 1590, 390, 1315, 84, 595, 338, 308, 425, 1249,
	646, 1075, 1419, 1693, 1245, 1240, 616, 1110, 1371, 1426,
	1294, 647, 1341, 1538, 1616, 1247, 1340, 1441, 1582, 591,
	1305, 84, 1273, 982, 410, 1392, 408, 1325, 407, 406,
	405, 404, 401, 337, 868, 1379, 764, 1381, 1109, 1325,
	1519, 595, 1343, 1344, 1345, 945, 84, 1380, 84, 1248,
	84, 1378, 616, 1366, 84, 1063, 1233, 1017, 1013, 1362,
	955, 582, 84, 579, 1073, 84, 1072, 1386, 574, 565,
	1078, 84, 679, 1369, 1248, 84, 1391, 84, 562, 1459,
	785, 1651, 436, 1326, 1383, 321, 325, 1023, 1791, 325,
	668, 397, 1653, 594, 927, 1326, 1393, 1388, 1421, 911,
	1394, 1424, 1581, 1183, 3, 926, 1403, 1405, 1406, 1661,
	680, 1448, 1705, 1444, 1409, 1432, 681, 1732, 911, 84,
	1420, 1416, 1411, 1431, 924, 440, 377, 1425, 1429, 1430,
	1455, 1456, 1457, 246, 1724, 939, 802, 640, 587, 594,
	1810, 382, 245, 1024, 271, 271, 1074, 964, 437, 1811,
	287, 322, 1310, 1076, 1452, 1317, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 808, 1513, 330, 1407, 1466, 398, 1498,
	1311, 1312, 1313, 1314, 1316, 1398, 249, 259, 256, 327,
	1508, 271, 1471, 426, 1355, 84, 84, 84, 994, 993,
	1209, 1157, 1154, 84, 84, 290, 291, 254, 317, 84,
	1153, 84, 250, 84, 84, 84, 84, 1534, 1535, 327,
	1500, 84, 1104, 995, 1501, 1777, 1603, 1458, 1234, 996,
	327, 327, 327, 861, 572, 251, 1518, 1544, 1514, 1129,
	296, 1638, 247, 84, 84, 1553, 763, 402, 1609, 1756,
	1297, 253, 1689, 84, 84, 1671, 1108, 84, 866, 28,
	1565, 1562, 463, 1577, 1565, 327, 84, 84, 1572, 1564,
	1520, 1368, 636, 1564, 636, 1548, 1554, 325, 325, 1008,
	1592, 325, 1566, 1007, 682, 669, 1566, 1552, 658, 1578,
	1579, 1597, 617, 1584, 271, 84, 636, 271, 271, 271,
	271, 271, 1571, 271, 486, 1468, 1469, 271, 409, 652,
	661, 1117, 259, 1473, 539, 488, 1593, 592, 783, 619,
	617, 617, 489, 593, 893, 476, 590, 350, 617, 1585,
	943, 1105, 1293, 864, 252, 249, 317, 462, 468, 804,
	467, 1092, 373, 459, 1587, 1504, 1250, 40, 387, 265,
	84, 266, 84, 1615, 84, 84, 254, 1192, 1549, 1018,
	617, 250, 84, 595, 790, 1377, 299, 1307, 375, 1135,
	1127, 1125, 1116, 421, 616, 255, 551, 944, 399, 1030,
	1630, 84, 963, 445, 251, 1568, 1636, 1627, 798, 1628,
	1770, 595, 595, 320, 319, 1652, 1004, 396, 645, 595,
	253, 987, 616, 616, 84, 292, 84, 618, 1647, 1648,
	616, 1700, 1704, 1374, 84, 1654, 1743, 1565, 1662, 57,
	22, 1665, 84, 1660, 20, 19, 1564, 619, 1670, 18,
	1674, 595, 16, 15, 14, 21, 1682, 327, 325, 1566,
	12, 11, 616, 1129, 1129, 10, 9, 27, 26, 25,
	1677, 916, 2, 1, 0, 327, 1688, 0, 327, 932,
	617, 594, 0, 591, 327, 0, 947, 948, 1695, 327,
	0, 0, 327, 619, 271, 271, 0, 1698, 0, 0,
	84, 84, 0, 252, 84, 0, 0, 0, 0, 594,
	594, 1712, 84, 0, 1129, 1129, 1129, 594, 84, 0,
	0, 1714, 0, 1721, 1716, 1713, 84, 1718, 1565, 311,
	0, 0, 679, 1275, 1276, 618, 0, 1564, 1715, 0,
	1725, 0, 0, 0, 255, 0, 636, 804, 1720, 594,
	1566, 595, 84, 84, 84, 0, 84, 1727, 901, 0,
	0, 1731, 616, 1734, 1646, 0, 1747, 1741, 0, 0,
	680, 0, 0, 1750, 84, 1728, 681, 630, 1742, 617,
	0, 618, 1745, 0, 1332, 1333, 1334, 0, 1753, 1752,
	1749, 591, 1565, 1748, 0, 1759, 1751, 84, 0, 0,
	0, 1564, 0, 0, 0, 0, 0, 1773, 0, 1529,
	1774, 1523, 0, 0, 1566, 272, 0, 1785, 0, 1521,
	1786, 945, 84, 1788, 0, 0, 0, 1792, 0, 1794,
	1795, 0, 285, 1796, 0, 0, 1793, 591, 0, 0,
	1530, 0, 0, 0, 0, 1808, 1807, 1129, 1129, 594,
	595, 0, 0, 0, 0, 0, 0, 617, 0, 1524,
	0, 616, 1814, 0, 0, 0, 0, 274, 0, 0,
	0, 0, 279, 280, 0, 286, 0, 999, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 275, 0,
	0, 327, 916, 1310, 0, 1129, 1129, 1129, 1129, 1129,
	1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
	1129, 1129, 1129, 1129, 0, 1129, 0, 1439, 1440, 0,
	327, 1525, 271, 1526, 0, 276, 0, 0, 595, 0,
	0, 0, 617, 0, 0, 0, 277, 278, 0, 616,
	0, 0, 1324, 0, 0, 0, 0, 1528, 594, 0,
	0, 281, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 0, 1496, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 619, 0, 1242, 0, 1527,
	0, 0, 0, 0, 616, 0, 0, 0, 0, 0,
	0, 327, 1165, 1166, 0, 0, 594, 916, 0, 0,
	1171, 0, 0, 619, 619, 1325, 1176, 1177, 1179, 1181,
	1182, 619, 1185, 1186, 0, 282, 0, 0, 283, 0,
	327, 0, 1197, 284, 1246, 0, 0, 0, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 327, 0,
	1249, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	1244, 0, 0, 0, 0, 0, 1247, 0, 0, 999,
	636, 1326, 0, 618, 0, 999, 0, 449, 449, 0,
	1245, 594, 0, 0, 0, 0, 0, 553, 0, 0,
	808, 0, 0, 0, 1129, 837, 838, 839, 0, 0,
	0, 618, 618, 783, 0, 783, 271, 327, 0, 618,
	1235, 0, 810, 1310, 841, 1327, 1328, 1329, 0, 1238,
	0, 0, 0, 0, 0, 1248, 1255, 0, 327, 591,
	0, 0, 0, 809, 0, 0, 0, 0, 0, 824,
	0, 618, 1320, 1317, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 0, 0, 619, 0, 0, 0, 591, 591, 0,
	0, 0, 1324, 0, 1635, 591, 0, 0, 0, 0,
	0, 0, 808, 0, 827, 828, 829, 837, 838, 839,
	1129, 0, 0, 0, 0, 0, 815, 830, 0, 0,
	0, 791, 793, 0, 810, 0, 841, 591, 800, 0,
	0, 0, 0, 842, 834, 0, 0, 0, 0, 1315,
	845, 846, 847, 848, 849, 809, 464, 38, 0, 852,
	0, 824, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 0, 0, 865,
	0, 618, 0, 0, 0, 0, 0, 38, 0, 0,
	1692, 0, 619, 0, 0, 1325, 0, 1129, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 304, 815, 0,
	312, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 842, 834, 0, 826, 312,
	0, 0, 0, 327, 0, 0, 0, 591, 840, 835,
	0, 0, 0, 0, 0, 0, 0, 902, 832, 0,
	0, 1326, 0, 0, 825, 0, 0, 0, 1408, 0,
	916, 0, 783, 0, 0, 0, 1415, 1733, 0, 0,
	619, 0, 0, 0, 327, 0, 831, 327, 0, 0,
	618, 0, 0, 1255, 0, 0, 0, 1434, 0, 1255,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	826, 0, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 835, 1320, 1317, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1463, 0, 0, 0, 0, 591, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 618, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 836, 0, 1160, 0, 0, 0, 1516, 1517, 916,
	0, 0, 1161, 0, 0, 804, 804, 0, 0, 0,
	0, 1542, 0, 1543, 591, 327, 1545, 1546, 1547, 0,
	0, 0, 0, 327, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1561, 0, 1570, 916, 1561, 0, 0,
	0, 0, 0, 0, 0, 327, 327, 0, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 1255,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 591,
	0, 0, 0, 0, 0, 0, 0, 1610, 0, 0,
	0, 0, 0, 0, 449, 0, 0, 0, 0, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 0, 1066, 0, 1068, 1069, 1070, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 916, 0, 1629, 0, 271, 1631, 0, 0,
	0, 0, 0, 0, 327, 0, 0, 0, 0, 1114,
	1115, 0, 1126, 0, 1136, 1138, 1143, 1146, 1147, 1148,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 0,
	0, 0, 304, 0, 0, 304, 304, 0, 0, 0,
	1561, 0, 0, 553, 0, 0, 327, 0, 1673, 0,
	0, 0, 0, 0, 0, 0, 327, 0, 851, 0,
	0, 0, 855, 0, 804, 0, 0, 0, 0, 0,
	0, 0, 1190, 0, 0, 808, 0, 827, 828, 829,
	837, 838, 839, 0, 0, 0, 0, 0, 0, 0,
	830, 0, 0, 0, 0, 0, 0, 810, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1215, 0, 0, 0, 0, 809, 0,
	0, 0, 1706, 1707, 824, 0, 1711, 0, 0, 0,
	0, 1561, 0, 0, 271, 0, 0, 0, 0, 0,
	1570, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 800,
	0, 0, 0, 0, 0, 38, 0, 38, 0, 0,
	0, 815, 0, 0, 1740, 804, 327, 0, 271, 0,
	38, 0, 0, 0, 38, 0, 0, 0, 842, 834,
	0, 0, 0, 0, 0, 1561, 1673, 0, 0, 1260,
	1261, 840, 0, 0, 0, 1266, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 825, 0, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 1280, 0,
	0, 0, 0, 0, 0, 0, 0, 1288, 0, 831,
	0, 0, 0, 0, 804, 1296, 0, 0, 0, 1301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 852, 0, 826, 0, 0, 0, 1143, 1143, 1143,
	0, 0, 0, 0, 835, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 449, 0, 0,
	0, 0, 0, 0, 0, 0, 449, 833, 0, 553,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 836, 0, 0, 0, 0, 0,
	0, 1623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 808, 0, 827, 828, 829, 837, 838, 839, 0,
	0, 0, 0, 0, 0, 0, 830, 0, 0, 0,
	0, 0, 0, 810, 0, 841, 0, 1437, 0, 0,
	1438, 0, 0, 0, 1033, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 809, 0, 0, 0, 0, 0,
	824, 0, 0, 1310, 1215, 1327, 1328, 1329, 0, 0,
	0, 0, 0, 1460, 0, 0, 0, 0, 1595, 1083,
	0, 0, 0, 1470, 0, 0, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 1324, 0, 0, 0, 0, 0, 1502, 1503,
	0, 0, 0, 0, 842, 834, 0, 1509, 1510, 1511,
	0, 0, 0, 0, 0, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 449, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 831, 0, 0, 808, 0,
	827, 828, 829, 837, 838, 839, 0, 0, 0, 1330,
	0, 0, 0, 830, 0, 0, 0, 1576, 0, 0,
	810, 0, 841, 0, 0, 1325, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1596,
	835, 809, 0, 1599, 1600, 0, 0, 824, 1602, 0,
	0, 0, 1604, 0, 0, 0, 0, 0, 0, 1608,
	0, 0, 0, 1611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1326, 38, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1256, 833, 815, 1620, 821, 822, 823, 0,
	820, 817, 818, 819, 811, 812, 813, 814, 816, 0,
	836, 842, 834, 0, 0, 0, 0, 1351, 0, 0,
	0, 0, 1083, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 1645, 0, 0,
	825, 851, 0, 0, 0, 0, 0, 0, 1321, 1322,
	1323, 0, 1320, 1317, 1318, 1319, 1311, 1312, 1313, 1314,
	1316, 1663, 831, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1676, 0, 808, 0, 827, 828, 829, 837, 838, 839,
	851, 0, 1684, 1685, 0, 0, 826, 830, 0, 0,
	0, 0, 0, 0, 810, 0, 841, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1697, 0, 0, 0, 809, 0, 0, 0, 0,
	0, 824, 1699, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 0, 0, 0, 0, 0,
	833, 0, 0, 821, 822, 823, 0, 820, 817, 818,
	819, 811, 812, 813, 814, 816, 0, 836, 815, 0,
	0, 0, 0, 0, 1350, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 834, 0, 1033, 0,
	0, 1033, 0, 0, 0, 0, 0, 0, 840, 0,
	24, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 42, 0, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1772, 0, 0, 44, 831, 0, 0, 0,
	0, 0, 49, 0, 0, 1784, 1784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 29, 1784,
	826, 45, 0, 0, 0, 32, 30, 0, 0, 0,
	808, 835, 827, 828, 829, 837, 838, 839, 0, 0,
	0, 34, 0, 0, 0, 830, 0, 0, 1784, 0,
	0, 0, 810, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 833, 0, 38, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 836, 0, 0, 0, 0, 0, 0, 1349, 0,
	0, 0, 0, 0, 0, 0, 31, 0, 0, 1033,
	1033, 0, 0, 1033, 0, 0, 815, 47, 0, 0,
	35, 0, 46, 0, 0, 0, 0, 36, 0, 0,
	56, 0, 0, 842, 834, 39, 41, 0, 0, 0,
	0, 0, 0, 0, 43, 0, 840, 0, 0, 0,
	0, 58, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 825, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 0, 0, 0, 831, 54, 0, 0, 0, 0,
	0, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1655, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 821, 822, 823, 678, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	0, 1515, 0, 86, 87, 683, 88, 684, 685, 686,
	687, 193, 688, 689, 690, 691, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 692, 92, 200, 201, 93,
	693, 694, 202, 203, 204, 695, 205, 696, 358, 697,
	94, 95, 96, 851, 97, 698, 98, 99, 699, 359,
	100, 101, 700, 701, 702, 703, 704, 705, 102, 103,
	104, 105, 206, 106, 207, 208, 706, 107, 707, 108,
	708, 709, 710, 109, 110, 711, 111, 712, 0, 713,
	209, 112, 113, 210, 714, 715, 716, 114, 115, 211,
	0, 116, 717, 117, 718, 719, 360, 720, 118, 212,
	721, 213, 722, 119, 120, 214, 215, 723, 362, 724,
	121, 725, 361, 122, 216, 217, 218, 726, 219, 727,
	363, 123, 364, 124, 125, 728, 729, 220, 365, 126,
	366, 730, 127, 731, 732, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 733, 137, 734,
	221, 139, 222, 140, 141, 735, 736, 737, 738, 739,
	142, 223, 368, 143, 369, 224, 144, 145, 740, 225,
	146, 226, 147, 741, 148, 149, 150, 227, 151, 152,
	742, 154, 155, 153, 156, 743, 157, 370, 158, 159,
	228, 160, 0, 161, 162, 163, 744, 229, 164, 165,
	745, 166, 167, 371, 168, 230, 231, 169, 746, 170,
	171, 173, 232, 172, 233, 747, 174, 748, 175, 176,
	749, 234, 235, 236, 750, 751, 177, 237, 238, 752,
	178, 179, 180, 181, 753, 754, 182, 183, 184, 755,
	756, 185, 186, 187, 239, 240, 757, 188, 758, 759,
	760, 761, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 678, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 86, 87, 683, 88, 684, 685, 686,
	687, 193, 688, 689, 690, 691, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 692, 92, 200, 201, 93,
	693, 694, 202, 203, 204, 695, 205, 696, 358, 697,
	94, 95, 96, 0, 97, 698, 98, 99, 699, 359,
	100, 101, 700, 701, 702, 703, 704, 705, 102, 103,
	104, 105, 206, 106, 207, 208, 706, 107, 707, 108,
	708, 709, 710, 109, 110, 711, 111, 712, 0, 713,
	209, 112, 113, 210, 714, 715, 716, 114, 115, 211,
	0, 116, 717, 117, 718, 719, 360, 720, 118, 212,
	721, 213, 722, 119, 120, 214, 215, 723, 362, 724,
	121, 725, 361, 122, 216, 217, 218, 726, 219, 727,
	363, 123, 364, 124, 125, 728, 729, 220, 365, 126,
	366, 730, 127, 731, 732, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 733, 137, 734,
	221, 139, 222, 140, 141, 735, 736, 737, 738, 739,
	142, 223, 368, 143, 369, 224, 144, 145, 740, 225,
	146, 226, 147, 741, 148, 149, 150, 227, 151, 152,
	742, 154, 155, 153, 156, 743, 157, 370, 158, 159,
	228, 160, 0, 161, 162, 163, 744, 229, 164, 165,
	745, 166, 167, 371, 168, 230, 231, 169, 746, 170,
	171, 173, 232, 172, 233, 747, 174, 748, 175, 176,
	749, 234, 235, 236, 750, 751, 177, 237, 238, 752,
	178, 179, 180, 181, 753, 754, 182, 183, 184, 755,
	756, 185, 186, 187, 239, 240, 757, 188, 758, 759,
	760, 761, 189, 190, 191, 192, 678, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 86, 87, 683, 88, 684, 685, 686, 687, 193,
	688, 689, 690, 691, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 692, 92, 200, 201, 93, 693, 694,
	202, 203, 204, 695, 205, 696, 358, 697, 94, 95,
	96, 0, 97, 698, 98, 99, 699, 359, 100, 101,
	700, 701, 702, 703, 704, 705, 102, 103, 104, 105,
	206, 106, 207, 208, 706, 107, 707, 108, 708, 709,
	710, 109, 110, 711, 111, 712, 0, 713, 209, 112,
	113, 210, 714, 715, 716, 114, 115, 211, 0, 116,
	717, 117, 718, 719, 360, 720, 118, 212, 721, 213,
	722, 119, 120, 214, 215, 723, 362, 724, 121, 725,
	361, 122, 216, 217, 218, 726, 219, 727, 363, 123,
	364, 124, 125, 728, 729, 220, 365, 126, 366, 730,
	127, 731, 732, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 733, 137, 734, 221, 139,
	222, 140, 141, 735, 736, 737, 738, 739, 142, 223,
	368, 143, 369, 224, 144, 145, 740, 225, 146, 226,
	147, 741, 148, 149, 150, 227, 151, 152, 742, 154,
	155, 153, 156, 743, 157, 370, 158, 159, 228, 160,
	0, 161, 162, 163, 744, 229, 164, 165, 745, 166,
	167, 371, 168, 230, 231, 169, 746, 170, 171, 173,
	232, 172, 233, 747, 174, 748, 175, 176, 749, 234,
	235, 236, 750, 751, 177, 237, 238, 752, 178, 179,
	180, 181, 753, 754, 182, 183, 184, 755, 756, 185,
	186, 187, 239, 240, 757, 188, 758, 759, 760, 761,
	189, 190, 191, 192, 484, 473, 474, 471, 472, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 1100, 88, 0, 0, 0, 0, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 0, 107, 0, 108, 0, 1101, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 0, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	239, 533, 1099, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 452, 453, 1102, 0, 0, 0, 454,
	0, 0, 461, 1097, 484, 473, 474, 471, 472, 460,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 500, 466, 0,
	0, 0, 89, 90, 194, 514, 196, 515, 91, 516,
	517, 0, 92, 200, 201, 93, 481, 499, 518, 519,
	204, 0, 510, 0, 492, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 359, 100, 101, 0, 493,
	495, 0, 494, 496, 102, 103, 104, 105, 520, 106,
	521, 522, 554, 107, 0, 108, 0, 0, 0, 513,
	110, 0, 111, 0, 0, 0, 465, 112, 113, 501,
	479, 0, 0, 114, 115, 523, 0, 116, 0, 117,
	0, 0, 360, 0, 118, 511, 0, 213, 0, 119,
	120, 507, 509, 0, 362, 0, 121, 0, 361, 122,
	524, 525, 526, 0, 491, 0, 363, 123, 364, 124,
	125, 0, 0, 512, 365, 126, 366, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 367, 134,
	135, 138, 136, 455, 137, 480, 508, 139, 527, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 368, 143,
	369, 502, 144, 145, 0, 503, 146, 226, 147, 0,
	148, 149, 150, 528, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 370, 158, 159, 469, 160, 0, 161,
	162, 163, 56, 229, 164, 165, 497, 166, 167, 371,
	168, 529, 231, 169, 0, 170, 171, 173, 530, 172,
	504, 0, 174, 58, 175, 176, 0, 234, 531, 532,
	0, 0, 177, 505, 506, 478, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 498, 0, 185, 186, 187,
	357, 533, 0, 188, 0, 0, 0, 54, 189, 190,
	191, 192, 456, 55, 0, 484, 473, 474, 471, 472,
	460, 0, 0, 452, 453, 0, 0, 0, 0, 454,
	86, 87, 461, 88, 0, 0, 0, 0, 500, 466,
	0, 0, 0, 89, 90, 194, 514, 196, 515, 91,
	516, 517, 0, 92, 200, 201, 93, 481, 499, 518,
	519, 204, 0, 510, 0, 492, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 359, 100, 101, 0,
	493, 495, 0, 494, 496, 102, 103, 104, 105, 520,
	106, 521, 522, 0, 107, 0, 108, 0, 0, 0,
	513, 110, 0, 111, 0, 0, 0, 465, 112, 113,
	501, 479, 0, 0, 114, 115, 523, 0, 116, 0,
	117, 0, 0, 360, 0, 118, 511, 0, 213, 0,
	119, 120, 507, 509, 0, 362, 0, 121, 0, 361,
	122, 524, 525, 526, 0, 491, 0, 363, 123, 364,
	124, 125, 0, 0, 512, 365, 126, 366, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 367,
	134, 135, 138, 136, 455, 137, 480, 508, 139, 527,
	140, 141, 0, 0, 0, 0, 0, 142, 223, 368,
	143, 369, 502, 144, 145, 0, 503, 146, 226, 147,
	0, 148, 149, 150, 528, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 370, 158, 159, 469, 160, 0,
	161, 162, 163, 56, 229, 164, 165, 497, 166, 167,
	371, 168, 529, 231, 169, 0, 170, 171, 173, 530,
	172, 504, 0, 174, 58, 175, 176, 0, 234, 531,
	532, 0, 0, 177, 505, 506, 478, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 498, 0, 185, 186,
	187, 357, 533, 0, 188, 0, 0, 0, 54, 189,
	190, 191, 192, 456, 55, 0, 484, 473, 474, 471,
	472, 460, 0, 0, 452, 453, 0, 0, 0, 0,
	454, 86, 87, 461, 88, 0, 0, 0, 0, 500,
	466, 0, 0, 0, 89, 90, 194, 514, 196, 515,
	91, 516, 517, 1139, 92, 200, 201, 93, 481, 499,
	518, 519, 204, 0, 510, 0, 492, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 359, 100, 101,
	0, 493, 495, 0, 494, 496, 102, 103, 104, 105,
	520, 106, 521, 522, 0, 107, 0, 108, 0, 0,
	0, 513, 110, 0, 111, 0, 0, 0, 465, 112,
	113, 501, 479, 0, 0, 114, 115, 523, 0, 116,
	0, 117, 0, 1144, 360, 0, 118, 511, 0, 213,
	0, 119, 120, 507, 509, 0, 362, 0, 121, 0,
	361, 122, 524, 525, 526, 0, 491, 0, 363, 123,
	364, 124, 125, 0, 1140, 512, 365, 126, 366, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 455, 137, 480, 508, 139,
	527, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	368, 143, 369, 502, 144, 145, 0, 503, 146, 226,
	147, 0, 148, 149, 150, 528, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 370, 158, 159, 469, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 497, 166,
	167, 371, 168, 529, 231, 169, 0, 170, 171, 173,
	530, 172, 504, 0, 174, 0, 175, 176, 0, 234,
	531, 532, 0, 1141, 177, 505, 506, 478, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 498, 0, 185,
	186, 187, 239, 533, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 456, 0, 0, 484, 473, 474,
	471, 472, 460, 0, 0, 452, 453, 0, 0, 0,
	0, 454, 86, 87, 461, 88, 0, 0, 0, 0,
	500, 466, 0, 0, 0, 89, 90, 194, 514, 196,
	515, 91, 516, 517, 0, 92, 200, 201, 93, 481,
	499, 518, 519, 204, 0, 510, 0, 492, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 493, 495, 0, 494, 496, 102, 103, 104,
	105, 520, 106, 521, 522, 0, 107, 0, 108, 0,
	0, 0, 513, 110, 0, 111, 0, 0, 0, 465,
	112, 113, 501, 479, 0, 0, 114, 115, 523, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 511, 0,
	213, 0, 119, 120, 507, 509, 0, 362, 0, 121,
	0, 361, 122, 524, 525, 526, 0, 491, 0, 363,
	123, 364, 124, 125, 0, 0, 512, 365, 126, 366,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 367, 134, 135, 138, 136, 455, 137, 480, 508,
	139, 527, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 368, 143, 369, 502, 144, 145, 0, 503, 146,
	226, 147, 0, 148, 149, 150, 528, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 370, 158, 159, 469,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 497,
	166, 167, 371, 168, 529, 231, 169, 0, 170, 171,
	173, 530, 172, 504, 0, 174, 0, 175, 176, 0,
	234, 531, 532, 0, 0, 177, 505, 506, 478, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 498, 0,
	185, 186, 187, 239, 533, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 453, 0, 0,
	0, 0, 454, 0, 0, 461, 1499, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	500, 466, 0, 0, 0, 89, 90, 194, 514, 196,
	515, 91, 516, 517, 0, 92, 200, 201, 93, 481,
	499, 518, 519, 204, 0, 510, 0, 492, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 493, 495, 0, 494, 496, 102, 103, 104,
	105, 520, 106, 521, 522, 0, 107, 0, 108, 0,
	0, 0, 513, 110, 0, 111, 0, 0, 0, 465,
	112, 113, 501, 479, 0, 0, 114, 115, 523, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 511, 0,
	213, 0, 119, 120, 507, 509, 0, 362, 0, 121,
	0, 361, 122, 524, 525, 526, 0, 491, 0, 363,
	123, 364, 124, 125, 0, 0, 512, 365, 126, 366,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 367, 134, 135, 138, 136, 455, 137, 480, 508,
	139, 527, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 368, 143, 369, 502, 144, 145, 0, 503, 146,
	226, 147, 0, 148, 149, 150, 528, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 370, 158, 159, 469,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 497,
	166, 167, 371, 168, 529, 231, 169, 0, 170, 171,
	173, 530, 172, 504, 0, 174, 0, 175, 176, 0,
	234, 531, 532, 0, 0, 177, 505, 506, 478, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 498, 0,
	185, 186, 187, 239, 533, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 453, 0, 0,
	0, 0, 454, 0, 0, 461, 1449, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	500, 466, 0, 0, 0, 89, 90, 194, 514, 196,
	515, 91, 516, 517, 0, 92, 200, 201, 93, 481,
	499, 518, 519, 204, 0, 510, 0, 492, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 493, 495, 0, 494, 496, 102, 103, 104,
	105, 520, 106, 521, 522, 0, 107, 0, 108, 0,
	0, 0, 513, 110, 0, 111, 0, 0, 0, 465,
	112, 113, 501, 479, 0, 0, 114, 115, 523, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 511, 0,
	213, 0, 119, 120, 507, 509, 0, 362, 0, 121,
	0, 361, 122, 524, 525, 526, 0, 491, 0, 363,
	123, 364, 124, 125, 0, 0, 512, 365, 126, 366,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 367, 134, 135, 138, 136, 455, 137, 480, 508,
	139, 527, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 368, 143, 369, 502, 144, 145, 0, 503, 146,
	226, 147, 0, 148, 149, 150, 528, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 370, 158, 159, 469,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 497,
	166, 167, 371, 168, 529, 231, 169, 0, 170, 171,
	173, 530, 172, 504, 0, 174, 0, 175, 176, 0,
	234, 531, 532, 0, 0, 177, 505, 506, 478, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 498, 0,
	185, 186, 187, 239, 533, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 453, 0, 0,
	0, 0, 454, 0, 0, 461, 1096, 484, 473, 474,
	471, 472, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	500, 466, 0, 0, 0, 89, 90, 194, 514, 196,
	515, 91, 516, 517, 0, 92, 200, 201, 93, 481,
	499, 518, 519, 204, 0, 510, 0, 492, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 493, 495, 0, 494, 496, 102, 103, 104,
	105, 520, 106, 521, 522, 0, 107, 0, 108, 0,
	0, 0, 513, 110, 0, 111, 0, 0, 0, 465,
	112, 113, 501, 479, 0, 0, 114, 115, 523, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 511, 0,
	213, 0, 119, 120, 507, 509, 0, 362, 0, 121,
	0, 361, 122, 524, 525, 526, 0, 491, 0, 363,
	123, 364, 124, 125, 0, 0, 512, 365, 126, 366,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 367, 134, 135, 138, 136, 455, 137, 480, 508,
	139, 527, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 368, 143, 369, 502, 144, 145, 0, 503, 146,
	226, 147, 0, 148, 149, 150, 528, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 370, 158, 159, 469,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 497,
	166, 167, 371, 168, 529, 231, 169, 0, 170, 171,
	173, 530, 172, 504, 0, 174, 0, 175, 176, 0,
	234, 531, 532, 0, 0, 177, 505, 506, 478, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 498, 0,
	185, 186, 187, 239, 533, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 452, 453, 0, 0,
	0, 0, 454, 857, 1093, 461, 484, 473, 474, 471,
	472, 460, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 500,
	466, 0, 0, 0, 89, 90, 194, 514, 196, 515,
	91, 516, 517, 0, 92, 200, 201, 93, 481, 499,
	518, 519, 204, 0, 510, 0, 492, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 359, 100, 101,
	0, 493, 495, 0, 494, 496, 102, 103, 104, 105,
	520, 106, 521, 522, 0, 107, 0, 108, 0, 0,
	0, 513, 110, 0, 111, 0, 0, 0, 465, 112,
	113, 501, 479, 0, 0, 114, 115, 523, 0, 116,
	0, 117, 0, 0, 360, 0, 118, 511, 0, 213,
	0, 119, 120, 507, 509, 0, 362, 0, 121, 0,
	361, 122, 524, 525, 526, 0, 491, 0, 363, 123,
	364, 124, 125, 0, 0, 512, 365, 126, 366, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 455, 137, 480, 508, 139,
	527, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	368, 143, 369, 502, 144, 145, 0, 503, 146, 226,
	147, 0, 148, 149, 150, 528, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 370, 158, 159, 469, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 497, 166,
	167, 371, 168, 529, 231, 169, 0, 170, 171, 173,
	530, 172, 504, 0, 174, 0, 175, 176, 0, 234,
	531, 532, 0, 0, 177, 505, 506, 478, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 498, 0, 185,
	186, 187, 239, 533, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 456, 0, 0, 484, 473, 474,
	471, 472, 460, 0, 0, 452, 453, 450, 0, 0,
	0, 454, 86, 87, 461, 88, 0, 0, 0, 0,
	500, 466, 0, 0, 0, 89, 90, 194, 514, 196,
	515, 91, 516, 517, 0, 92, 200, 201, 93, 481,
	499, 518, 519, 204, 0, 510, 0, 492, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 359, 100,
	101, 0, 493, 495, 0, 494, 496, 102, 103, 104,
	105, 520, 106, 521, 522, 0, 107, 0, 108, 0,
	0, 0, 513, 110, 0, 111, 0, 0, 0, 465,
	112, 113, 501, 479, 0, 0, 114, 115, 523, 0,
	116, 0, 117, 0, 0, 360, 0, 118, 511, 0,
	213, 0, 119, 120, 507, 509, 0, 362, 0, 121,
	0, 361, 122, 524, 525, 526, 0, 491, 0, 363,
	123, 364, 124, 125, 0, 0, 512, 365, 126, 366,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 367, 134, 135, 138, 136, 455, 137, 480, 508,
	139, 527, 140, 141, 0, 0, 0, 0, 0, 142,
	223, 368, 143, 369, 502, 144, 145, 0, 503, 146,
	226, 147, 0, 148, 149, 150, 528, 151, 152, 0,
	154, 155, 153, 156, 0, 157, 370, 158, 159, 469,
	160, 0, 161, 162, 163, 0, 229, 164, 165, 497,
	166, 167, 371, 168, 529, 231, 169, 0, 170, 171,
	173, 530, 172, 504, 0, 174, 0, 175, 176, 0,
	234, 531, 532, 0, 0, 177, 505, 506, 478, 178,
	179, 180, 181, 0, 0, 182, 183, 184, 498, 0,
	185, 186, 187, 239, 533, 1454, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 456, 0, 0, 484, 473,
	474, 471, 472, 460, 0, 0, 452, 453, 0, 0,
	0, 0, 454, 86, 87, 461, 88, 0, 0, 0,
	0, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 0, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 554, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 0, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 0, 0, 484,
	473, 474, 471, 472, 460, 0, 0, 452, 453, 0,
	0, 0, 0, 454, 86, 87, 461, 88, 0, 0,
	0, 0, 500, 466, 0, 0, 0, 89, 90, 194,
	514, 196, 515, 91, 516, 517, 0, 92, 200, 201,
	93, 481, 499, 518, 519, 204, 0, 510, 0, 492,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 101, 0, 493, 495, 0, 494, 496, 102,
	103, 104, 105, 520, 106, 521, 522, 0, 107, 0,
	108, 0, 0, 0, 513, 110, 0, 111, 0, 0,
	0, 465, 112, 113, 501, 479, 0, 0, 114, 115,
	523, 0, 116, 0, 117, 0, 1144, 360, 0, 118,
	511, 0, 213, 0, 119, 120, 507, 509, 0, 362,
	0, 121, 0, 361, 122, 524, 525, 526, 0, 491,
	0, 363, 123, 364, 124, 125, 0, 0, 512, 365,
	126, 366, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 455, 137,
	480, 508, 139, 527, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 368, 143, 369, 502, 144, 145, 0,
	503, 146, 226, 147, 0, 148, 149, 150, 528, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 370, 158,
	159, 469, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 497, 166, 167, 371, 168, 529, 231, 169, 0,
	170, 171, 173, 530, 172, 504, 0, 174, 0, 175,
	176, 0, 234, 531, 532, 0, 0, 177, 505, 506,
	478, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	498, 0, 185, 186, 187, 239, 533, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 456, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 452, 453,
	0, 0, 0, 0, 454, 0, 0, 461, 484, 473,
	474, 471, 472, 460, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 792, 88, 0, 0, 0,
	0, 500, 466, 0, 0, 0, 89, 90, 194, 514,
	196, 515, 91, 516, 517, 0, 92, 200, 201, 93,
	481, 499, 518, 519, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 520, 106, 521, 522, 0, 107, 0, 108,
	0, 0, 0, 513, 110, 0, 111, 0, 0, 0,
	465, 112, 113, 501, 479, 0, 0, 114, 115, 523,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 524, 525, 526, 0, 491, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 455, 137, 480,
	508, 139, 527, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 528, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	469, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 529, 231, 169, 0, 170,
	171, 173, 530, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 531, 532, 0, 0, 177, 505, 506, 478,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 533, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 456, 0, 0, 484,
	473, 474, 471, 472, 460, 0, 0, 452, 453, 0,
	0, 0, 0, 454, 86, 87, 461, 88, 0, 0,
	0, 0, 500, 466, 0, 0, 0, 89, 90, 194,
	514, 196, 515, 91, 516, 517, 0, 92, 200, 201,
	93, 481, 499, 518, 519, 204, 0, 510, 0, 492,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 1783, 0, 493, 495, 0, 494, 496, 102,
	103, 104, 105, 520, 106, 521, 522, 0, 107, 0,
	108, 0, 0, 0, 513, 110, 0, 111, 0, 0,
	0, 465, 112, 113, 501, 479, 0, 0, 114, 115,
	523, 0, 116, 0, 117, 0, 0, 360, 0, 118,
	511, 0, 213, 0, 119, 120, 507, 509, 0, 362,
	0, 121, 0, 361, 122, 524, 525, 526, 0, 491,
	0, 363, 123, 364, 124, 125, 0, 0, 512, 365,
	126, 366, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 455, 137,
	480, 508, 139, 527, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 368, 143, 369, 502, 144, 145, 0,
	503, 146, 226, 147, 0, 148, 149, 150, 528, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 370, 158,
	159, 469, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 497, 166, 167, 371, 168, 529, 231, 169, 0,
	170, 171, 173, 530, 172, 504, 0, 174, 0, 175,
	176, 0, 234, 531, 532, 0, 0, 177, 505, 506,
	478, 178, 179, 1782, 181, 0, 0, 182, 183, 184,
	498, 0, 185, 186, 187, 239, 533, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 456, 0, 0,
	484, 473, 474, 471, 472, 460, 0, 0, 452, 453,
	0, 0, 0, 0, 454, 86, 87, 461, 88, 0,
	0, 0, 0, 500, 466, 0, 0, 0, 89, 90,
	1781, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 1783, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	362, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 363, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 366, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 497, 166, 167, 371, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 0,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 1782, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 239, 533, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 456, 0,
	0, 484, 473, 474, 471, 472, 460, 0, 0, 452,
	453, 0, 0, 0, 0, 454, 86, 87, 461, 88,
	0, 0, 0, 0, 500, 466, 0, 0, 0, 89,
	90, 194, 514, 196, 515, 91, 516, 517, 0, 92,
	200, 201, 93, 481, 499, 518, 519, 204, 0, 510,
	0, 492, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 359, 100, 101, 0, 493, 495, 0, 494,
	496, 102, 103, 104, 105, 520, 106, 521, 522, 0,
	107, 0, 108, 0, 0, 0, 513, 110, 0, 111,
	0, 0, 0, 465, 112, 113, 501, 479, 0, 0,
	114, 115, 523, 0, 116, 0, 117, 0, 0, 360,
	0, 118, 511, 0, 213, 0, 119, 120, 507, 509,
	0, 362, 0, 121, 0, 361, 122, 524, 525, 526,
	0, 491, 0, 363, 123, 364, 124, 125, 0, 0,
	512, 365, 126, 366, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 367, 134, 135, 138, 136,
	455, 137, 480, 508, 139, 527, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 368, 143, 369, 502, 144,
	145, 0, 503, 146, 226, 147, 0, 148, 149, 150,
	528, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	370, 158, 159, 469, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 497, 166, 167, 371, 168, 529, 231,
	169, 0, 170, 171, 173, 530, 172, 504, 0, 174,
	0, 175, 176, 0, 234, 531, 532, 0, 0, 177,
	505, 506, 478, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 498, 0, 185, 186, 187, 239, 533, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 456,
	0, 0, 484, 473, 474, 471, 472, 460, 0, 0,
	452, 453, 0, 0, 0, 0, 454, 86, 87, 461,
	88, 0, 0, 0, 0, 500, 466, 0, 0, 0,
	89, 90, 194, 514, 196, 515, 91, 516, 517, 0,
	92, 200, 201, 93, 481, 499, 518, 519, 204, 0,
	510, 0, 492, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 493, 495, 0,
	494, 496, 102, 103, 104, 105, 520, 106, 521, 522,
	0, 107, 0, 108, 0, 0, 0, 513, 110, 0,
	111, 0, 0, 0, 465, 112, 113, 501, 479, 0,
	0, 114, 115, 523, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 511, 0, 213, 0, 119, 120, 507,
	509, 0, 362, 0, 121, 0, 361, 122, 524, 525,
	526, 0, 491, 0, 363, 123, 364, 124, 125, 0,
	0, 512, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 0, 137, 480, 508, 139, 527, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 502,
	144, 145, 0, 503, 146, 226, 147, 0, 148, 149,
	150, 528, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 1134, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 497, 166, 167, 371, 168, 529,
	231, 169, 0, 170, 171, 173, 530, 172, 504, 0,
	174, 0, 175, 176, 0, 234, 531, 532, 0, 0,
	177, 505, 506, 478, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 498, 0, 185, 186, 187, 239, 533,
	0, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	484, 473, 474, 471, 472, 460, 0, 0, 0, 0,
	0, 1130, 1131, 0, 0, 86, 87, 1132, 88, 0,
	1133, 0, 0, 500, 466, 0, 0, 0, 89, 90,
	0, 514, 196, 515, 91, 516, 517, 0, 92, 200,
	201, 93, 481, 499, 518, 519, 204, 0, 510, 0,
	492, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 1783, 0, 493, 495, 0, 494, 496,
	102, 103, 104, 105, 520, 106, 521, 522, 0, 107,
	0, 108, 0, 0, 0, 513, 110, 0, 111, 0,
	0, 0, 465, 112, 113, 501, 479, 0, 0, 114,
	115, 523, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 511, 0, 213, 0, 119, 120, 507, 509, 0,
	0, 0, 121, 0, 361, 122, 524, 525, 526, 0,
	491, 0, 0, 123, 364, 124, 125, 0, 0, 512,
	365, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 455,
	137, 480, 508, 139, 527, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 368, 143, 369, 502, 144, 145,
	0, 503, 146, 226, 147, 0, 148, 149, 150, 528,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 469, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 497, 166, 167, 0, 168, 529, 231, 169,
	0, 170, 171, 173, 530, 172, 504, 0, 174, 0,
	175, 176, 0, 234, 531, 532, 0, 0, 177, 505,
	506, 478, 178, 179, 1782, 181, 0, 0, 182, 183,
	184, 498, 0, 185, 186, 187, 239, 533, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 484, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 452,
	453, 0, 0, 86, 87, 454, 88, 0, 461, 0,
	0, 500, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 499, 202, 203, 204, 0, 510, 0, 492, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 493, 495, 0, 494, 496, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 501, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 511,
	0, 213, 0, 119, 120, 507, 509, 0, 362, 0,
	121, 0, 361, 122, 216, 217, 218, 0, 219, 0,
	363, 123, 364, 124, 125, 0, 0, 512, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 0, 137, 0,
	508, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 368, 143, 369, 502, 144, 145, 0, 503,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	497, 166, 167, 371, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 504, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 505, 506, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 498,
	0, 185, 186, 187, 239, 240, 0, 188, 0, 353,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 1563, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 358,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	359, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 360, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 362,
	0, 121, 0, 361, 122, 216, 217, 218, 0, 219,
	0, 363, 123, 364, 124, 125, 0, 0, 220, 365,
	126, 366, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 367, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 368, 143, 369, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 370, 158,
	159, 228, 160, 0, 161, 162, 163, 56, 229, 164,
	165, 0, 166, 167, 371, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 58, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 357, 240, 0, 188, 0,
	0, 0, 54, 189, 190, 191, 192, 0, 55, 0,
	353, 663, 0, 664, 659, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 53, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	358, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 359, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 667, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 656, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 360, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	362, 0, 121, 0, 361, 122, 216, 217, 218, 0,
	219, 0, 363, 123, 364, 124, 125, 0, 0, 220,
	365, 126, 366, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 367, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 657, 0,
	0, 0, 142, 223, 368, 143, 369, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 370,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 371, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 655, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 353, 663,
	0, 664, 659, 654, 0, 0, 0, 0, 0, 665,
	660, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 358, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 359,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 650, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 656, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 360, 0, 118, 212,
	0, 213, 0, 119, 120, 214, 215, 0, 362, 0,
	121, 0, 361, 122, 216, 217, 218, 0, 219, 0,
	363, 123, 364, 124, 125, 0, 0, 220, 365, 126,
	366, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 367, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 657, 0, 0, 0,
	142, 223, 368, 143, 369, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 370, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 371, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 655,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 353, 663, 0, 664,
	659, 654, 0, 0, 0, 0, 0, 665, 660, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 358, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 359, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 656, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 360, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 362, 0, 121, 0,
	361, 122, 216, 217, 218, 0, 219, 0, 363, 123,
	364, 124, 125, 0, 0, 220, 365, 126, 366, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	367, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 657, 0, 0, 0, 142, 223,
	368, 143, 369, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 370, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 371, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 655, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 665, 660, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 326, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 56, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 58, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	357, 240, 0, 188, 0, 83, 0, 54, 189, 190,
	191, 192, 0, 55, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 193, 0,
	0, 0, 1035, 89, 90, 194, 195, 196, 197, 91,
	198, 199, 0, 92, 200, 201, 93, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 206,
	106, 207, 208, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 209, 112, 113,
	210, 0, 0, 0, 114, 115, 211, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 212, 0, 213, 0,
	119, 120, 214, 215, 0, 0, 0, 121, 0, 0,
	122, 216, 217, 218, 0, 219, 0, 0, 123, 0,
	124, 125, 0, 0, 220, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 221, 139, 222,
	140, 141, 0, 0, 0, 0, 0, 142, 223, 0,
	143, 0, 224, 144, 145, 0, 225, 146, 226, 147,
	0, 148, 149, 150, 227, 151, 152, 0, 154, 155,
	153, 156, 0, 157, 0, 158, 159, 228, 160, 0,
	161, 162, 163, 56, 229, 164, 165, 0, 166, 167,
	0, 168, 230, 231, 169, 0, 170, 171, 173, 232,
	172, 233, 0, 174, 58, 175, 176, 0, 234, 235,
	236, 0, 0, 177, 237, 238, 0, 178, 179, 180,
	181, 0, 0, 182, 183, 184, 0, 0, 185, 186,
	187, 357, 240, 0, 188, 0, 83, 0, 54, 189,
	190, 191, 192, 0, 55, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 1254, 0, 53, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 0, 188, 0, 0, 83, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 442, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 214, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 326, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 0, 188, 0, 83,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 193, 0, 0, 0, 1035, 89, 90, 194,
	195, 196, 197, 91, 198, 199, 0, 92, 200, 201,
	93, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 206, 106, 207, 208, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 209, 112, 113, 210, 0, 0, 0, 114, 115,
	211, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	212, 0, 213, 0, 119, 120, 214, 215, 0, 0,
	0, 121, 0, 0, 122, 216, 217, 218, 0, 219,
	0, 0, 123, 0, 124, 125, 0, 0, 220, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 221, 139, 222, 140, 141, 0, 0, 0, 0,
	0, 142, 223, 0, 143, 0, 224, 144, 145, 0,
	225, 146, 226, 147, 0, 148, 149, 150, 227, 151,
	152, 0, 154, 155, 153, 156, 0, 157, 0, 158,
	159, 228, 160, 0, 161, 162, 163, 0, 229, 164,
	165, 0, 166, 167, 0, 168, 230, 231, 169, 0,
	170, 171, 173, 232, 172, 233, 0, 174, 0, 175,
	176, 0, 234, 235, 236, 0, 0, 177, 237, 238,
	0, 178, 179, 180, 181, 0, 0, 182, 183, 184,
	0, 0, 185, 186, 187, 239, 240, 0, 188, 0,
	83, 0, 0, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 946, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 0, 188,
	0, 83, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 193, 0, 0, 0, 1464, 89,
	90, 194, 195, 196, 197, 91, 198, 199, 0, 92,
	200, 201, 93, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 206, 106, 207, 208, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 209, 112, 113, 210, 0, 0, 0,
	114, 115, 211, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 212, 0, 213, 0, 119, 120, 214, 215,
	0, 0, 0, 121, 0, 0, 122, 216, 217, 218,
	0, 219, 0, 0, 123, 0, 124, 125, 0, 0,
	220, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 221, 139, 222, 140, 141, 0, 0,
	0, 0, 0, 142, 223, 0, 143, 0, 224, 144,
	145, 0, 225, 146, 226, 147, 0, 148, 149, 150,
	227, 151, 152, 0, 154, 155, 153, 156, 0, 157,
	0, 158, 159, 228, 160, 0, 161, 162, 163, 0,
	229, 164, 165, 0, 166, 167, 0, 168, 230, 231,
	169, 0, 170, 171, 173, 232, 172, 233, 0, 174,
	0, 175, 176, 0, 234, 235, 236, 0, 0, 177,
	237, 238, 0, 178, 179, 180, 181, 0, 0, 182,
	183, 184, 0, 0, 185, 186, 187, 239, 240, 0,
	188, 0, 83, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 0, 0, 544,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 634, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 633, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	0, 188, 83, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 637, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	0, 188, 353, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 637, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 358, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 359, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	360, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 362, 0, 121, 0, 361, 122, 216, 217,
	218, 0, 219, 0, 363, 123, 364, 124, 125, 0,
	0, 220, 365, 126, 366, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 367, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 368, 143, 369, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 370, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 371, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 919, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 917, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 1012, 0, 114,
	115, 211, 0, 116, 0, 117, 922, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	0, 1010, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 921, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 1011, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 919, 205, 0, 0, 914,
	94, 95, 96, 0, 97, 917, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 922, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 913, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 921, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 920, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 1254, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 326, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 586,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 326, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 378, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 332, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 326, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 86, 87, 244, 88, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	243, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 1180,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 1178, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 1169, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 782, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 258,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 573, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 0, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 427, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 424, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 384, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 214, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 269,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 268,
	235, 236, 0, 0, 264, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 269, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 151, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 268, 235, 236,
	0, 0, 264, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 348,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 228, 160, 0, 161, 162, 163,
	0, 229, 164, 165, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 234, 235, 236, 0, 0,
	177, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 345, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 145,
	0, 225, 146, 226, 147, 0, 148, 149, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 160, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 83, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 193, 0, 0, 0, 0, 89, 90, 194, 195,
	196, 197, 91, 198, 199, 0, 92, 200, 201, 93,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 206, 106, 207, 208, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	209, 112, 113, 210, 0, 0, 0, 114, 115, 211,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 212,
	0, 213, 0, 119, 120, 343, 215, 0, 0, 0,
	121, 0, 0, 122, 216, 217, 218, 0, 219, 0,
	0, 123, 0, 124, 125, 0, 0, 220, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	221, 139, 222, 140, 141, 0, 0, 0, 0, 0,
	142, 223, 0, 143, 0, 224, 144, 145, 0, 225,
	146, 226, 147, 0, 148, 149, 150, 227, 151, 152,
	0, 154, 155, 153, 156, 0, 157, 0, 158, 159,
	228, 160, 0, 161, 162, 163, 0, 229, 164, 165,
	0, 166, 167, 0, 168, 230, 231, 169, 0, 170,
	171, 173, 232, 172, 233, 0, 174, 0, 175, 176,
	0, 234, 235, 236, 0, 0, 177, 237, 238, 0,
	178, 179, 180, 181, 0, 0, 182, 183, 184, 0,
	0, 185, 186, 187, 239, 240, 83, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 193,
	0, 0, 0, 0, 89, 90, 194, 195, 196, 197,
	91, 198, 199, 0, 92, 200, 201, 93, 0, 0,
	202, 203, 204, 0, 205, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	206, 106, 207, 208, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 209, 112,
	113, 210, 0, 0, 0, 114, 115, 211, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 212, 0, 213,
	0, 119, 120, 335, 215, 0, 0, 0, 121, 0,
	0, 122, 216, 217, 218, 0, 219, 0, 0, 123,
	0, 124, 125, 0, 0, 220, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 221, 139,
	222, 140, 141, 0, 0, 0, 0, 0, 142, 223,
	0, 143, 0, 224, 144, 145, 0, 225, 146, 226,
	147, 0, 148, 149, 150, 227, 151, 152, 0, 154,
	155, 153, 156, 0, 157, 0, 158, 159, 228, 160,
	0, 161, 162, 163, 0, 229, 164, 165, 0, 166,
	167, 0, 168, 230, 231, 169, 0, 170, 171, 173,
	232, 172, 233, 0, 174, 0, 175, 176, 0, 234,
	235, 236, 0, 0, 177, 237, 238, 0, 178, 179,
	180, 181, 0, 0, 182, 183, 184, 0, 0, 185,
	186, 187, 239, 240, 83, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 89, 90, 194, 195, 196, 197, 91, 198,
	199, 0, 92, 200, 201, 93, 0, 0, 202, 203,
	204, 0, 205, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 206, 106,
	207, 208, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 209, 112, 113, 210,
	0, 0, 0, 114, 115, 211, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 212, 0, 213, 0, 119,
	120, 214, 215, 0, 0, 0, 121, 0, 0, 122,
	216, 217, 218, 0, 219, 0, 0, 123, 0, 124,
	125, 0, 0, 220, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 221, 139, 222, 140,
	141, 0, 0, 0, 0, 0, 142, 223, 0, 143,
	0, 224, 144, 145, 0, 225, 146, 226, 147, 0,
	148, 149, 150, 227, 315, 152, 0, 154, 155, 153,
	156, 0, 157, 0, 158, 159, 228, 160, 0, 161,
	162, 163, 0, 229, 164, 165, 0, 166, 167, 0,
	168, 230, 231, 169, 0, 170, 171, 173, 232, 172,
	233, 0, 174, 0, 175, 176, 0, 234, 235, 236,
	0, 0, 177, 237, 238, 0, 178, 179, 180, 181,
	0, 0, 182, 183, 184, 0, 0, 185, 186, 187,
	239, 240, 83, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 193, 0, 0, 0, 0,
	89, 90, 194, 195, 196, 197, 91, 198, 199, 0,
	92, 200, 201, 93, 0, 0, 202, 203, 204, 0,
	205, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 206, 106, 207, 208,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 209, 112, 113, 210, 0, 0,
	0, 114, 115, 211, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 212, 0, 213, 0, 119, 120, 214,
	215, 0, 0, 0, 121, 0, 0, 122, 216, 217,
	218, 0, 219, 0, 0, 123, 0, 124, 125, 0,
	0, 220, 0, 126, 0, 0, 261, 0, 0, 128,
	0, 129, 130, 131, 132, 269, 0, 134, 135, 138,
	136, 0, 137, 0, 221, 139, 222, 140, 141, 0,
	0, 0, 0, 0, 142, 223, 0, 143, 0, 224,
	144, 145, 0, 225, 146, 226, 147, 0, 148, 149,
	150, 227, 151, 152, 0, 154, 155, 153, 156, 0,
	157, 0, 158, 159, 263, 160, 0, 161, 162, 163,
	0, 229, 164, 262, 0, 166, 167, 0, 168, 230,
	231, 169, 0, 170, 171, 173, 232, 172, 233, 0,
	174, 0, 175, 176, 0, 268, 235, 236, 0, 0,
	264, 237, 238, 0, 178, 179, 180, 181, 0, 0,
	182, 183, 184, 0, 0, 185, 186, 187, 239, 240,
	83, 188, 0, 0, 0, 0, 189, 190, 191, 192,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 193, 0, 0, 0, 0, 89, 90,
	194, 195, 196, 197, 91, 198, 199, 0, 92, 200,
	201, 93, 0, 0, 202, 203, 204, 0, 205, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 206, 106, 207, 208, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 209, 112, 113, 210, 0, 0, 0, 114,
	115, 211, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 212, 0, 213, 0, 119, 120, 214, 215, 0,
	0, 0, 121, 0, 0, 122, 216, 217, 218, 0,
	219, 0, 0, 123, 0, 124, 125, 0, 0, 220,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 221, 139, 222, 140, 141, 0, 0, 0,
	0, 0, 142, 223, 0, 143, 0, 224, 144, 0,
	0, 225, 146, 226, 147, 0, 148, 0, 150, 227,
	151, 152, 0, 154, 155, 153, 156, 0, 157, 0,
	158, 159, 228, 0, 0, 161, 162, 163, 0, 229,
	164, 165, 0, 166, 167, 0, 168, 230, 231, 169,
	0, 170, 171, 173, 232, 172, 233, 0, 174, 0,
	175, 176, 0, 234, 235, 236, 0, 0, 177, 237,
	238, 0, 178, 179, 180, 181, 0, 0, 182, 183,
	184, 0, 0, 185, 186, 187, 239, 240, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 808, 0,
	827, 828, 829, 837, 838, 839, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 0, 0, 0, 0, 0,
	810, 0, 841, 0, 808, 0, 827, 828, 829, 837,
	838, 839, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 809, 0, 0, 0, 0, 810, 824, 841, 0,
	808, 0, 827, 828, 829, 837, 838, 839, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 809, 0, 0,
	0, 0, 810, 824, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 815, 0, 0, 0, 0, 824,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 834, 0, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 842, 834, 0,
	825, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 831, 842, 834, 0, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 831, 0,
	0, 0, 825, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	833, 0, 0, 821, 822, 823, 0, 820, 817, 818,
	819, 811, 812, 813, 814, 816, 0, 836, 0, 0,
	0, 0, 0, 0, 1303, 0, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 836, 0, 0, 0, 1737, 0, 0,
	0, 0, 833, 0, 0, 821, 822, 823, 0, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	0, 0, 808, 1736, 827, 828, 829, 837, 838, 839,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	0, 0, 0, 0, 810, 0, 841, 0, 808, 0,
	827, 828, 829, 837, 838, 839, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 809, 0, 0, 0, 0,
	810, 824, 841, 0, 808, 0, 827, 828, 829, 837,
	838, 839, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 809, 0, 0, 0, 0, 810, 824, 841, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 809, 815, 0,
	0, 0, 0, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 842, 834, 0, 0, 0,
	0, 0, 0, 0, 815, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 842, 834, 0, 825, 0, 0, 0, 0, 0,
	815, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 831, 842, 834, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 831, 0, 0, 0, 825, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 836, 0, 0, 0, 1717, 0, 0, 0, 0,
	833, 0, 0, 821, 822, 823, 0, 820, 817, 818,
	819, 811, 812, 813, 814, 816, 0, 836, 0, 0,
	0, 1696, 0, 0, 0, 0, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 836, 0, 0, 808, 1691, 827, 828,
	829, 837, 838, 839, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 0, 0, 0, 0, 0, 810, 0,
	841, 0, 808, 0, 827, 828, 829, 837, 838, 839,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 809,
	0, 0, 0, 0, 810, 824, 841, 0, 808, 0,
	827, 828, 829, 837, 838, 839, 0, 0, 0, 0,
	0, 0, 0, 830, 0, 809, 0, 0, 0, 0,
	810, 824, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 815, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	834, 0, 0, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 842, 834, 0, 825, 0,
	0, 0, 0, 0, 815, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	831, 842, 834, 0, 825, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 831, 0, 0, 0,
	825, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 833, 0,
	0, 821, 822, 823, 0, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 0, 836, 0, 0, 0, 1687,
	0, 0, 0, 0, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 836, 0, 0, 0, 1625, 0, 0, 0, 0,
	833, 0, 0, 821, 822, 823, 0, 820, 817, 818,
	819, 811, 812, 813, 814, 816, 0, 836, 0, 0,
	808, 1624, 827, 828, 829, 837, 838, 839, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 810, 0, 841, 0, 808, 0, 827, 828,
	829, 837, 838, 839, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 809, 0, 0, 0, 0, 810, 824,
	841, 0, 808, 0, 827, 828, 829, 837, 838, 839,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 809,
	0, 0, 0, 0, 810, 824, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 815, 0, 0, 0,
	0, 824, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 842, 834, 0, 0, 0, 0, 0,
	0, 0, 815, 0, 0, 0, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 842,
	834, 0, 825, 0, 0, 0, 0, 0, 815, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 831, 842, 834, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	831, 0, 0, 0, 825, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 831, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 833, 0, 0, 821, 822, 823, 0, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	0, 0, 0, 1532, 0, 0, 0, 0, 833, 0,
	0, 821, 822, 823, 0, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 0, 836, 0, 0, 0, 1467,
	0, 0, 0, 0, 833, 0, 0, 821, 822, 823,
	0, 820, 817, 818, 819, 811, 812, 813, 814, 816,
	0, 836, 0, 0, 808, 1451, 827, 828, 829, 837,
	838, 839, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 0, 0, 810, 0, 841, 0,
	808, 0, 827, 828, 829, 837, 838, 839, 0, 0,
	0, 0, 0, 0, 0, 830, 0, 809, 0, 0,
	0, 0, 810, 824, 841, 0, 808, 0, 827, 828,
	829, 837, 838, 839, 0, 0, 0, 0, 0, 0,
	0, 830, 0, 809, 0, 0, 0, 0, 810, 824,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 809,
	815, 0, 0, 0, 0, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 834, 0,
	0, 0, 0, 0, 0, 0, 815, 1801, 0, 0,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 842, 834, 0, 825, 0, 0, 0,
	0, 0, 815, 0, 1341, 0, 840, 1340, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 831, 842,
	834, 0, 825, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 831, 0, 0, 0, 825, 0,
	0, 0, 826, 0, 0, 0, 1800, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 836, 0, 0, 0, 1089, 0, 0,
	0, 0, 833, 0, 0, 821, 822, 823, 0, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 821, 822, 823, 0, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 808, 836, 827, 828, 829, 837,
	838, 839, 0, 0, 0, 0, 0, 0, 0, 830,
	0, 0, 0, 0, 1023, 0, 810, 0, 841, 844,
	0, 0, 0, 0, 0, 808, 0, 827, 828, 829,
	837, 838, 839, 0, 0, 0, 0, 809, 0, 0,
	830, 0, 0, 824, 843, 0, 0, 810, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	1024, 0, 0, 0, 824, 0, 0, 0, 0, 0,
	808, 0, 827, 828, 829, 837, 838, 839, 0, 0,
	815, 0, 0, 0, 0, 830, 0, 0, 0, 0,
	0, 0, 810, 0, 841, 0, 0, 842, 834, 0,
	0, 808, 0, 827, 828, 829, 837, 838, 839, 0,
	840, 815, 0, 809, 0, 0, 830, 0, 0, 824,
	832, 0, 0, 810, 0, 841, 825, 0, 842, 834,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 840, 0, 0, 809, 0, 0, 0, 831, 0,
	824, 832, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 826, 842, 834, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 840, 815, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 825, 826, 842, 834, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 840, 0, 0,
	0, 0, 0, 0, 831, 310, 0, 832, 0, 0,
	0, 0, 0, 825, 0, 0, 833, 0, 0, 821,
	822, 823, 0, 820, 817, 818, 819, 811, 812, 813,
	814, 816, 0, 836, 0, 831, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 835,
	821, 822, 823, 0, 820, 817, 818, 819, 811, 812,
	813, 814, 816, 0, 836, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	835, 827, 828, 829, 837, 838, 839, 0, 0, 0,
	0, 0, 0, 0, 830, 0, 0, 1461, 0, 0,
	0, 810, 833, 841, 0, 821, 822, 823, 0, 820,
	817, 818, 819, 811, 812, 813, 814, 816, 0, 836,
	0, 0, 809, 0, 0, 0, 0, 0, 824, 0,
	0, 0, 0, 833, 0, 0, 821, 822, 823, 0,
	820, 817, 818, 819, 811, 812, 813, 814, 816, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 808,
	0, 827, 828, 829, 837, 838, 839, 0, 0, 0,
	0, 0, 0, 0, 830, 815, 0, 0, 1342, 0,
	1347, 810, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 834, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 0, 840, 0, 0, 824, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 815, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 842, 834, 0, 0, 808, 826, 827, 828,
	829, 837, 838, 839, 0, 840, 0, 0, 835, 0,
	0, 830, 0, 0, 0, 832, 0, 0, 810, 0,
	841, 825, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 809,
	0, 0, 0, 831, 0, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 826, 836, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 0, 815, 808, 0, 827, 828, 829, 837, 838,
	839, 0, 0, 0, 0, 0, 0, 0, 830, 842,
	834, 0, 1302, 0, 0, 810, 0, 841, 0, 0,
	0, 0, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 809, 0, 825, 0,
	0, 833, 824, 0, 821, 822, 823, 0, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 836, 0,
	831, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1308, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 815,
	0, 0, 0, 808, 826, 827, 828, 829, 837, 838,
	839, 0, 0, 0, 0, 835, 842, 834, 830, 0,
	0, 0, 0, 0, 0, 810, 0, 841, 0, 840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 825, 809, 0, 0, 0,
	0, 0, 824, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 831, 833, 0,
	0, 821, 822, 823, 0, 820, 817, 818, 819, 811,
	812, 813, 814, 816, 0, 836, 0, 0, 0, 808,
	0, 827, 828, 829, 837, 838, 839, 0, 0, 815,
	0, 826, 0, 0, 830, 0, 0, 0, 0, 0,
	0, 810, 835, 841, 0, 0, 842, 834, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 840,
	0, 0, 809, 0, 0, 0, 0, 0, 824, 832,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 831, 821, 822,
	823, 0, 820, 817, 818, 819, 811, 812, 813, 814,
	816, 0, 836, 0, 0, 815, 0, 808, 0, 827,
	828, 829, 837, 838, 839, 0, 0, 0, 0, 0,
	0, 826, 842, 834, 0, 0, 0, 0, 0, 810,
	0, 841, 835, 0, 0, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	809, 825, 0, 0, 0, 0, 824, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1310, 0, 1327,
	1328, 1329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1594, 0, 0, 833, 0, 0, 821, 822,
	823, 0, 820, 817, 818, 819, 811, 812, 813, 814,
	816, 0, 836, 815, 0, 0, 0, 826, 808, 0,
	827, 828, 829, 837, 838, 839, 1324, 0, 835, 0,
	842, 834, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 841, 840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 0, 825,
	0, 809, 0, 0, 0, 0, 0, 824, 0, 0,
	0, 0, 1310, 1315, 1327, 1328, 1329, 0, 0, 0,
	0, 833, 0, 0, 821, 822, 823, 1446, 820, 817,
	818, 819, 811, 812, 813, 814, 816, 0, 836, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 815, 826, 0, 0, 0, 1325,
	0, 1324, 0, 0, 0, 0, 835, 0, 0, 0,
	0, 842, 834, 0, 0, 0, 1310, 0, 1327, 1328,
	1329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1445, 0, 0, 832, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 1326, 0, 0, 0, 833,
	0, 0, 821, 822, 823, 1324, 820, 817, 818, 819,
	811, 812, 813, 814, 816, 0, 836, 0, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 1315, 0, 0, 0, 0, 1310, 0, 1327,
	1328, 1329, 1321, 1322, 1323, 0, 1320, 1317, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 1310, 0, 1327, 1328, 1329,
	0, 0, 1330, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	833, 0, 0, 821, 822, 823, 1324, 820, 817, 818,
	819, 811, 812, 813, 814, 816, 0, 836, 0, 0,
	0, 0, 0, 0, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 1326, 0, 0, 1321, 1322, 1323,
	0, 1320, 1317, 1318, 1319, 1311, 1312, 1313, 1314, 1316,
	1331, 1315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1330, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 1330, 607, 602, 624, 596, 615, 614, 0, 0,
	598, 597, 0, 0, 0, 626, 625, 1325, 0, 0,
	0, 1321, 1322, 1323, 0, 1320, 1317, 1318, 1319, 1311,
	1312, 1313, 1314, 1316, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 612, 611, 0,
	0, 0, 0, 0, 0, 1326, 610, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 609, 1326, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 603, 604, 605,
	0, 623, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1321, 1322, 1323, 0, 1320, 1317, 1318, 1319,
	1311, 1312, 1313, 1314, 1316, 613, 0, 0, 0, 0,
	1321, 1322, 1323, 0, 1320, 1317, 1318, 1319, 1311, 1312,
	1313, 1314, 1316, 0, 0, 0, 0, 0, 0, 0,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 0, 0, 606, 601,
	0, 0, 0, 0, 0, 628, 0, 0, 0, 0,
	0, 0, 599, 0, 0, 621, 622, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627,
}
var sqlPact = [...]int{

	3418, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 792, -1000, -1000, -1000, 660, 761,
	749, 15580, 15580, 15322, 1292, 1292, 16870, -1000, -1000, 19708,
	-1000, 1761, 500, 505, 500, 500, 501, 16870, 581, 706,
	132, -1000, 644, -12, 19450, 15580, 1244, 33, 14290, 333,
	3418, 15064, 15580, 19192, 1102, 1041, 1032, 14290, 18934, 18676,
	18418, -1000, 9845, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 573, 340, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 338, -1000, 14806, -1000, 873, -1000, 32, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 871, -1000, 15580, -1000,
	-1000, 18160, 17902, 335, 756, -1000, -1000, 561, 417, 1266,
	-1000, 41, -1000, -1000, 1101, -1000, 861, 1100, 1099, 1098,
	1097, 1095, 1093, 416, 786, -1000, 571, 756, -1000, 756,
	-1000, -1000, -1000, 545, 16870, -1000, 14290, -1000, 17644, 1053,
	17386, -1000, 644, -1000, -1000, -1000, 897, 1241, 1241, 1241,
	1263, 150, 148, 132, 17, 15580, -1000, 334, 17, 6862,
	6862, -1000, -1000, 333, -1000, 372, 12477, 40, -1000, 7404,
	-1000, 808, 1162, 670, 668, 1153, -71, 14290, 15580, 15580,
	605, 17128, -1000, 1152, 117, 1147, -1000, 104, 1145, -1000,
	9, -1000, -1000, -1000, -1000, -1000, -1000, 333, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14548, 1289, 23237, -1000, 8777, -1000, -1000, 12738,
	1441, 12738, -1000, -1000, 1288, -1000, 8777, -1000, 30, 27,
	978, 1029, 10384, 10116, 1203, 876, -1000, -1000, -1000, 39,
	4332, 15580, 1108, 12738, 15580, 15580, 15580, 15580, 15580, -1000,
	15580, -1000, 966, -1000, 15580, -1000, 23, 19, -1000, 16870,
	-1000, 122, -1000, 330, 940, 16612, 1168, 929, -1000, 897,
	-1000, 814, 962, 7964, 8777, 132, -1000, -1000, 132, 132,
	8777, -1000, -1000, 15580, 17, 1287, 15580, 172, -1000, 21925,
	-1000, -1000, 8777, 8777, 8777, 8777, 8777, 765, -1000, -1000,
	-1000, 5161, -1000, -1000, 40, 329, 174, -1000, -1000, 327,
	40, -1000, -1000, -1000, -1000, 326, 1398, 437, -1000, -1000,
	-1000, 8777, 405, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1106, 323, 308, -1000, -1000, -1000, -1000, 307,
	292, 289, 287, 269, 268, 266, 265, 264, 263, 262,
	261, 260, 257, 698, -1000, 442, -1000, -1000, 442, 442,
	-1000, 254, 254, 255, -1000, -1000, -1000, 254, -1000, -1000,
	-1000, 402, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 256,
	172, -1000, -1000, -1000, 15580, 40, -1000, -1000, -1000, 8777,
	4064, 7, -1000, 22613, -1000, -30, 772, -1000, 13774, 1243,
	1224, 1213, 14290, 543, 541, 15580, 15580, 430, 143, 1286,
	143, 11955, -1000, 15580, 15580, -1000, 15580, -1000, -1000, 15580,
	-1000, 15580, 15580, 364, 13258, 712, 1144, -12, 0, -1000,
	1299, -1000, -1000, -1000, -1000, 75, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 255,
	698, 254, 254, 254, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 402, -1000, -1000, 442, 442, 442, -1000, -1000, -2,
	22613, 538, 10, 12998, 15580, -1000, 20, -1000, -1000, 1092,
	488, -6, 729, 1035, 856, -1000, -1000, -1000, -1000, 14,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1361, -1000, -1000, -1000, -1000, 1386, 14, -1000, -1000, -1000,
	-1000, -1000, 1394, -1000, -1000, -1000, 4332, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15580, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 729, 1035, -1000, -1000, 14290, 13516,
	1142, 860, 925, -1000, -1000, 392, 1141, -1000, -1000, -1000,
	-1000, 22613, -1000, 22613, 628, 1044, -1000, 1044, 13, -1000,
	21894, -1000, 252, -8, -1000, 430, 6862, 11694, 23237, 15580,
	562, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777,
	8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777, 8777,
	8777, 8777, 8777, 1016, 8777, 536, 8777, 8777, 8777, 8777,
	1081, 811, 242, 4332, -1000, 643, 643, 643, 22797, 22797,
	230, 18, 21564, 11, 40, -1000, -1000, 6573, 6283, 40,
	4600, -1000, 606, 1385, 436, 22613, 1115, 1071, 250, 141,
	137, 8777, 8777, 695, 8777, 9048, 8777, 8777, 5432, 8777,
	8777, 8777, 8777, 8777, 8777, -1000, 247, -1000, -1000, -1000,
	-1000, 1373, -1000, -1000, 1365, -1000, 551, 549, 1364, 430,
	136, -1000, 2132, -1000, -1000, 7404, -1000, 712, 15580, 15580,
	15580, -1000, -1000, 919, 16354, -1000, 23237, 15580, -1000, 245,
	244, 1003, 1002, 15580, 15580, 16096, 15838, 15580, 715, 15580,
	15580, 655, -1000, 642, 8777, 676, -1000, 11171, 447, 15580,
	650, 58, -1000, -1000, -1000, 391, 15580, -1000, -1000, -1000,
	117, -1000, 104, -1000, -1000, 14290, -1000, -1000, -1000, -1000,
	-1000, -1000, 23237, 356, 227, -1000, 1363, 535, -1000, 533,
	530, 529, -1000, 243, -1000, 8777, 15580, 12998, 10, 2,
	-1000, -1000, 15580, 1035, -1000, -1000, -1000, -1000, 667, -1000,
	649, -1000, 10652, -1000, -1000, -1000, 606, -1000, -32, -1000,
	-1000, -1000, -1000, 134, -19, -1000, -1000, -1000, -1000, -1000,
	15580, 336, 15580, 15580, 15580, 1140, 1393, 15580, -1000, -1000,
	-1000, 8777, -1000, -1000, -1000, -12, 15580, -1000, 1069, -1000,
	-21, 1892, -96, 14032, -1000, 10910, -1000, -1000, 413, 734,
	734, 518, 518, 518, 518, 166, 166, 714, 214, 2050,
	2050, 2050, 511, 186, 186, 2050, 2050, 2050, 22797, 22699,
	225, 8777, 8777, 524, 795, 242, 225, 8777, 1333, 225,
	225, 225, -1000, 892, -1000, -1000, -1000, 1091, 240, 9048,
	9048, -1000, -1000, -1000, 5161, -1000, -1000, 239, 8777, -1000,
	8777, -69, -106, -1000, -1000, -14, -1000, -1000, -20, 8777,
	8777, 8777, 130, -1000, 128, 611, -1000, 8777, 762, 237,
	235, 8777, -1000, -1000, 22513, 20228, 126, 1089, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 121, 22416, 119, 23117, -1000,
	9048, 9048, 9048, 5161, 232, 105, 21616, -115, 22299, 7675,
	7675, 7675, 103, 22219, 8777, -115, 3302, 3118, 2951, -22,
	-23, -28, 1357, -40, 102, 410, 408, 98, 1069, -1000,
	-1000, 8777, -1000, -1000, -1000, 517, 516, 1137, -1000, 910,
	-1000, 849, 8777, 15580, 231, 228, 813, -1000, 1135, 859,
	1131, 859, -1000, -30, 768, -1000, -1000, 515, -1000, 6862,
	22613, -1000, 645, 1217, -42, -1000, -1000, -1000, 6862, 430,
	11955, 7404, -44, -1000, -1000, 712, -1000, 471, 1348, 97,
	951, 725, 724, 614, 1339, 22613, -32, -1000, -32, -1000,
	-1000, -1000, -1000, -1000, -1000, 15580, -1000, 13516, 226, 15580,
	224, 223, 221, 15580, -1000, 1168, -1000, 95, -1000, 1064,
	1258, 11694, 1031, 1028, 11694, 1051, 791, 791, 791, -1000,
	14032, 3784, -1000, -1000, 15580, 200, 11432, 94, 1892, 8777,
	225, 225, 8777, 9048, 9048, -1000, 225, -1000, -1000, -1000,
	-1000, 1086, 199, 8777, 23237, 23016, 22952, -46, 5993, -36,
	21282, -1000, -1000, 174, -1000, 91, 7133, -1000, 21980, -15,
	-15, -1000, 1392, 1166, -1000, 8777, 22011, -1000, 12216, 432,
	800, 21256, 23237, 23237, -1000, 8777, -1000, 1085, 8777, -1000,
	23237, 9048, 9048, 9048, 9048, 9048, 9048, 9048, 9048, 9048,
	9048, 9048, 9048, 9048, 9048, 9048, 9048, 9048, 9048, 9048,
	984, 9048, 1322, 1322, 1322, -64, 5703, -1000, 1084, 1085,
	8777, 8777, 23237, 86, 82, 79, -1000, 8777, -115, 8777,
	8777, 8777, -1000, -1000, -1000, 78, -1000, 1337, -1000, -1000,
	-1000, -1000, 1064, 3510, 15580, 15580, 15580, 1124, 1708, -1000,
	21230, -51, 15580, 15580, -1000, 992, 1030, 480, 15580, -1000,
	15580, -1000, 15580, 15580, 15580, 15580, -80, 6862, 196, -12,
	15580, -80, 642, -1000, -1000, 389, -1000, 354, 352, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, -1000, -1000,
	9584, 198, 15580, 13516, 9584, 857, -1000, -1000, 423, 8777,
	8777, 1892, 11694, 11694, 1026, 1011, 11694, -1000, -1000, -1000,
	-1000, 396, -1000, 1010, 197, 15580, 14032, 640, 225, 22857,
	3003, 8777, 23237, 22898, -53, 8777, 8777, -1000, -55, -1000,
	8777, -1000, -1000, 1391, 8777, 76, 67, 65, -1000, -1000,
	22613, 8777, -1000, -1000, 19966, 8777, 64, -1000, 59, 57,
	22613, 1084, 22613, -1000, 657, 657, 1322, 1322, 1322, 1322,
	666, 666, 1067, 1055, 1833, 1833, 1833, 576, 375, 375,
	1833, 1833, 1833, 1083, 976, 193, 23135, 8777, -59, -1000,
	-1000, -1000, 22613, 22613, 55, -1000, -1000, -1000, -115, 2655,
	20948, 20922, -1000, 54, 423, -1000, -1000, -1000, -1000, 15580,
	-1000, 15580, -1000, 15580, 15580, 904, -1000, -1000, 990, 191,
	9048, 15580, -1000, 758, -60, -65, 891, -1000, 886, 8777,
	-1000, 23237, 859, 859, -1000, 514, 510, -1000, -80, 1173,
	15580, 1211, -1000, -1000, -1000, 190, -1000, -1000, -1000, -73,
	-1000, 236, 1236, 8777, -1000, -1000, 187, 9584, -81, -1000,
	-1000, 53, -83, 15580, -1000, 15580, 22613, -115, -1000, 1026,
	-1000, 185, 8777, 11694, -1000, -1000, 877, -135, -1000, 387,
	-1000, 15580, -85, -1000, 8777, 8777, 22898, -87, -1000, 225,
	225, -1000, 20896, -1000, 21980, -1000, -1000, -1000, 22613, 754,
	-1000, 20614, -1000, -1000, -1000, -1000, 9048, 1072, 184, 23237,
	20588, -1000, -1000, 8777, -1000, -1000, -1000, -1000, -1000, 839,
	-1000, -1000, -1000, -1000, 8777, 23135, 173, -1000, 171, -1000,
	-1000, -1000, 658, -1000, -1000, 22613, 1239, -1000, -1000, 15580,
	15580, 559, -94, 15580, -1000, -1000, 4890, 758, 9584, 1237,
	40, 15580, 1237, 20562, 4600, -99, -1000, 15580, -1000, 758,
	164, -82, -1000, 1285, -1000, 15580, 22613, -1000, 577, 1010,
	-1000, 4332, -104, -1000, 225, 225, -1000, -1000, 50, 800,
	1255, -1000, 2073, 9048, 23237, -110, -1000, 20280, -1000, 20254,
	955, 15580, 15580, 15580, 462, 15580, -1000, -1000, 599, -1000,
	430, -1000, -1000, -1000, -1000, -1000, -1000, 1236, -20, 758,
	-1000, -1000, 9584, 15580, 154, -116, 521, -1000, -1000, -1000,
	-1000, 662, 8777, 2073, -118, -1000, -1000, -1000, 818, 752,
	48, -122, 133, -1000, 8777, -1000, 11955, -1000, 1237, 44,
	-1000, -123, -1000, -1000, -1000, 1390, 43, 8506, 8506, -115,
	-1000, -1000, 823, 819, 648, -1000, -1000, -1000, -1000, -1000,
	955, 15580, 22613, -112, -1000, -1000, 758, -1000, -1000, -1000,
	-1000, 9316, 867, 625, 21590, -1000, -1000, 1183, -1000, 469,
	847, 847, 818, -128, -1000, -1000, 1295, -1000, -1000, -1000,
	-1000, -1000, -1000, 1310, -1000, -1000, 993, -1000, -1000, -1000,
	8235, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1623, 1622, 1284, 128, 127, 1619, 1618, 1617, 110,
	126, 125, 129, 1616, 89, 1615, 1611, 1610, 108, 1605,
	1604, 1603, 67, 1602, 1599, 1595, 1594, 1590, 90, 22,
	166, 2186, 152, 1589, 1586, 1583, 11, 109, 77, 1582,
	35, 65, 96, 116, 1062, 72, 1581, 1575, 145, 41,
	25, 24, 106, 147, 140, 136, 1571, 1568, 1567, 58,
	1566, 1564, 1563, 1560, 46, 21, 1558, 23, 1555, 14,
	1553, 1552, 107, 1549, 105, 119, 26, 131, 12, 1548,
	57, 10, 75, 1547, 31, 1546, 29, 80, 143, 1543,
	53, 150, 60, 20, 61, 1542, 1541, 1540, 1539, 82,
	1538, 101, 74, 1537, 1536, 79, 1535, 135, 138, 1534,
	1529, 130, 1528, 1527, 1521, 704, 1519, 1518, 665, 1517,
	3, 39, 66, 5, 115, 114, 47, 1516, 27, 1514,
	1727, 603, 533, 1513, 54, 51, 85, 45, 50, 18,
	1512, 1511, 112, 1510, 1508, 1507, 1503, 1502, 84, 1501,
	78, 142, 49, 52, 100, 16, 30, 36, 91, 120,
	148, 113, 1500, 1499, 123, 1497, 172, 1496, 1495, 824,
	124, 1494, 1493, 1492, 768, 680, 356, 258, 1487, 1485,
	269, 187, 1484, 1481, 122, 1480, 1479, 146, 1478, 205,
	43, 1474, 118, 1458, 93, 1455, 0, 44, 38, 1454,
	132, 81, 1453, 1449, 1441, 1440, 17, 2, 7, 6,
	9, 4, 28, 19, 1432, 1431, 134, 102, 1429, 151,
	1428, 1426, 42, 1425, 1422, 15, 1420, 13, 1419, 8,
	1, 1418, 137, 1417, 104, 1416, 1322, 1412, 144, 1411,
	1410, 1330, 87,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 77, 77, 76, 76, 79, 79, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 140, 140, 14, 14, 14, 14, 15,
	100, 100, 16, 16, 16, 16, 17, 21, 232, 232,
	232, 236, 236, 237, 237, 238, 238, 238, 238, 238,
	238, 238, 234, 234, 24, 24, 24, 24, 24, 119,
	115, 115, 117, 117, 117, 117, 43, 114, 114, 114,
	114, 116, 116, 116, 116, 189, 187, 187, 194, 194,
	194, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 195, 195, 195, 195, 195, 195, 58,
	58, 58, 193, 193, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	188, 188, 233, 233, 235, 235, 8, 8, 59, 59,
	60, 60, 122, 122, 122, 122, 121, 204, 204, 205,
	205, 205, 205, 206, 206, 206, 206, 206, 206, 206,
	202, 202, 203, 200, 200, 201, 201, 201, 201, 239,
	239, 120, 120, 63, 63, 209, 209, 209, 209, 207,
	207, 207, 207, 207, 210, 208, 211, 211, 211, 211,
	211, 151, 151, 151, 27, 7, 7, 104, 104, 67,
	67, 155, 155, 155, 68, 68, 156, 50, 50, 36,
	36, 36, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 105, 105, 106, 106, 19, 23, 26, 26, 26,
	26, 26, 241, 241, 47, 47, 47, 47, 48, 48,
	118, 118, 118, 118, 118, 42, 6, 6, 41, 41,
	18, 18, 18, 18, 18, 53, 53, 111, 111, 111,
	113, 113, 112, 112, 112, 90, 90, 28, 81, 81,
	82, 82, 162, 83, 83, 22, 22, 31, 31, 29,
	29, 29, 29, 29, 29, 30, 30, 32, 32, 32,
	32, 32, 32, 32, 217, 217, 217, 219, 219, 216,
	218, 218, 240, 240, 91, 91, 91, 62, 61, 61,
	65, 65, 64, 66, 66, 154, 88, 88, 88, 88,
	107, 108, 108, 109, 109, 110, 110, 87, 87, 137,
	137, 33, 33, 72, 72, 73, 73, 128, 128, 129,
	129, 127, 127, 127, 157, 157, 157, 157, 158, 158,
	158, 158, 158, 158, 152, 152, 152, 152, 153, 153,
	163, 163, 94, 94, 94, 94, 92, 92, 93, 93,
	159, 159, 159, 159, 89, 89, 160, 160, 160, 123,
	123, 166, 166, 166, 71, 71, 71, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	168, 168, 168, 168, 170, 170, 170, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	171, 171, 178, 178, 179, 179, 180, 181, 172, 172,
	173, 173, 174, 175, 182, 182, 182, 182, 184, 184,
	176, 176, 176, 176, 176, 177, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	102, 102, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 212, 212, 212, 212, 212, 212, 212, 214, 214,
	215, 215, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 220, 220,
	221, 221, 222, 222, 223, 223, 225, 226, 226, 226,
	227, 231, 231, 224, 224, 228, 228, 228, 229, 229,
	230, 230, 230, 230, 230, 142, 142, 142, 143, 143,
	144, 78, 78, 139, 139, 138, 138, 138, 141, 141,
	95, 183, 183, 183, 183, 183, 183, 183, 96, 96,
	103, 97, 97, 98, 98, 98, 98, 98, 98, 134,
	135, 99, 99, 99, 136, 136, 145, 149, 149, 148,
	147, 147, 146, 146, 126, 126, 126, 126, 125, 124,
	84, 84, 242, 242, 150, 150, 85, 85, 86, 80,
	80, 161, 161, 161, 161, 74, 74, 55, 55, 75,
	75, 51, 51, 54, 52, 52, 52, 52, 69, 69,
	70, 70, 49, 49, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 185, 185, 185, 44, 44,
	44, 45, 45, 46, 46, 191, 191, 191, 192, 192,
	192, 192, 190, 190, 190, 190, 190, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 3, 2, 0, 3,
	1, 2, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 2, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 1, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 1, 3, 1, 1, 1, 2, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -218, 90,
	98, 188, 97, 83, 113, 202, 209, -29, -31, 217,
	-119, 218, 33, 226, 57, 93, 204, 199, 246, 64,
	-217, -32, -30, 292, 267, 273, 212, -33, 233, 260,
	295, 233, 76, 125, 85, 129, 254, 253, 76, 125,
	233, -12, 292, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -196, -198, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 126, 129, 137, 139, 140, 145, 148, 151, 153,
	154, 155, 156, 157, 159, 160, 162, 164, 161, 167,
	169, 170, 176, 179, 182, 183, 186, 188, 190, 191,
	192, 194, 195, 199, 197, 198, 200, 202, 204, 205,
	207, 209, 210, 211, 214, 215, 217, 218, 220, 223,
	225, 226, 229, 227, 232, 234, 235, 242, 246, 247,
	248, 249, 252, 253, 254, 257, 258, 259, 263, 268,
	269, 270, 271, 27, 34, 35, 36, 37, 39, 40,
	43, 44, 48, 49, 50, 52, 78, 80, 81, 96,
	99, 105, 115, 117, 121, 122, 130, 131, 132, 134,
	143, 166, 168, 177, 181, 185, 187, 193, 206, 213,
	221, 222, 228, 230, 237, 238, 239, 243, 244, 260,
	261, -44, -44, 188, 21, -236, 21, -237, -238, 64,
	90, 113, 212, 129, 85, 253, -236, -48, 209, -44,
	-115, 148, 215, 206, 242, -116, -114, -189, 237, 157,
	-76, -44, 4, 76, 56, 77, 114, 125, 126, 61,
	62, 140, 234, 237, 242, 21, 64, -241, 242, 242,
	-241, -241, -47, 242, 240, -48, -240, 233, 233, -104,
	76, 251, -30, -32, -31, -64, -65, 250, 133, 95,
	175, -29, -31, -217, -219, 194, -216, -44, -219, -61,
	-62, 21, 87, 296, -159, -51, 173, -44, -86, 292,
	-3, -159, 121, -44, -54, 121, -51, 111, 135, 135,
	-160, -159, -44, 121, -55, 121, -54, -77, 121, -76,
	-165, -164, -192, 4, -196, -198, -197, 260, 54, 65,
	112, 128, 124, 136, 138, 144, 146, 158, 178, 180,
	203, 219, 233, -140, 292, -100, 292, -44, 21, 172,
	296, 172, -44, -115, 50, -115, 292, -117, -42, -43,
	137, 190, 240, 277, 111, 271, -58, 5, 82, -79,
	294, 111, -233, 172, 111, 111, 111, 111, 111, -188,
	111, 271, 137, 190, 233, -118, -42, -43, -118, 240,
	-48, -89, -159, -76, 121, 125, -44, 121, -64, -65,
	-88, -107, -108, 147, 171, -91, 21, 87, -91, -91,
	42, 293, 293, 296, -219, -70, 292, -80, -161, -130,
	285, -132, 283, 284, 289, 163, 272, -142, -51, -133,
	9, 292, -145, -214, -31, 96, 28, -143, -144, 206,
	-44, 7, 8, 5, 6, -49, -168, -177, 245, 100,
	165, 46, -212, -213, 4, -196, -191, -169, -179, -173,
	-176, 134, 54, 69, 72, 70, 73, 216, 255, 47,
	27, 99, 181, 185, 230, 243, 244, 121, 166, 122,
	52, 115, 143, 89, 35, 37, 39, 40, 48, 49,
	78, 80, 81, 105, 130, 131, 132, 168, 193, 221,
	228, 238, 239, 261, -197, -180, -181, -174, -175, -182,
	-80, -86, 285, -51, 292, -84, -126, -125, -124, 290,
	294, -85, -150, -130, 82, -38, 197, -37, 20, 22,
	90, 258, 96, 197, 197, 96, 297, -160, -53, -51,
	-53, 217, -44, 29, 96, -40, 296, 45, 200, 96,
	-40, 296, 96, 293, 296, -159, 121, 29, -139, -166,
	-167, -169, -178, -172, -176, -177, 38, 44, 43, 235,
	213, 222, 36, 130, 131, 132, 221, 35, 193, 105,
	89, 81, 80, 168, 40, 39, -180, -181, -174, -175,
	78, 238, 239, 134, 37, 49, 48, 261, 228, -78,
	-130, -232, -75, 233, 76, -52, -44, 285, -238, -232,
	29, -78, 296, 296, 145, -57, 151, 162, 119, -187,
	82, -194, -186, -151, 9, 245, 100, 172, -193, 8,
	284, -185, -192, 5, 7, 283, -187, 82, 67, -195,
	5, 4, -177, -151, 82, 148, 294, -190, 4, -196,
	-198, -197, -199, 21, 23, 24, 25, 26, 28, 29,
	30, 31, 41, 46, 47, 51, 53, 55, 61, 64,
	68, 69, 70, 71, 72, 73, 82, 84, 86, 87,
	88, 91, 93, 95, 100, 101, 102, 108, 110, 111,
	113, 116, 118, 123, 125, 127, 133, 135, 141, 142,
	147, 149, 150, 163, 165, 171, 172, 173, 174, 175,
	184, 189, 196, 201, 212, 216, 224, 231, 233, 236,
	240, 241, 245, 250, 251, 255, 256, 262, 264, 265,
	266, 267, -189, -235, 108, -232, -189, -189, -189, -189,
	-189, -189, 145, -189, 296, 296, -48, -40, 296, 292,
	163, -45, 121, -44, -41, 92, 163, -88, -108, -107,
	-109, -130, 21, -130, -132, -30, -30, -30, -66, -154,
	-130, -216, 29, -69, -44, -72, 296, 111, 10, 53,
	32, 283, 284, 285, 286, 106, 287, 280, 281, 282,
	279, 275, 276, 277, 59, 152, 208, 12, 13, 14,
	25, 174, 146, 272, 124, 219, 289, 15, 16, 17,
	136, 34, 123, 29, 4, -130, -130, -130, -130, -130,
	180, -31, -130, -78, -84, -31, -138, 290, 292, -84,
	292, 5, 5, 292, -146, -130, -220, 268, 108, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 187, -184, 263, -184, -184,
	-170, 292, -170, -171, 292, -170, 269, 273, 292, -72,
	-51, -126, -130, -190, 285, 296, 293, 296, 240, -105,
	61, 55, -121, 121, 55, -200, -44, 61, -201, 51,
	251, 189, 110, -105, 61, -105, 61, 61, -159, 240,
	240, -54, -44, -123, 265, -111, -22, 292, 82, 29,
	-111, -81, -82, -162, -83, -51, 292, -44, -44, -54,
	-55, -76, -77, -12, -164, 96, -14, -22, -18, -28,
	-9, 293, 296, -71, 28, -101, 292, 270, 155, 79,
	120, 154, -102, 211, 293, 296, 240, 296, -75, -69,
	-125, -124, 111, 242, 293, -43, -42, -56, 192, 223,
	198, 214, 296, 8, 7, 7, 5, -190, -234, -44,
	-43, -42, -159, -59, -60, -122, -121, -202, -203, -200,
	125, 251, 101, 96, 172, 163, 277, 96, -110, 206,
	207, 296, -36, 30, 86, 292, 296, 293, -123, -161,
	-73, -157, -159, -31, -158, 292, -166, -76, 237, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
	-130, 146, 124, 219, 34, 123, -130, 240, -130, -130,
	-130, -130, 165, 163, 245, 100, 252, 87, 169, -242,
	231, 31, -136, -31, 292, -190, -142, 206, 292, 293,
	296, -78, -141, 291, -138, -78, 293, 293, -78, 262,
	21, 87, 285, -101, 7, -149, -148, 264, -221, 103,
	116, 292, 293, 293, -130, -130, -95, -183, 4, 270,
	155, 79, 120, 154, 211, -96, -130, -97, -131, -132,
	283, 284, 289, 292, 206, -98, -130, -78, -130, 41,
	142, 241, -99, -130, 111, -78, -130, -130, -130, -78,
	-78, -78, 292, 7, 7, 237, 237, 7, -123, 293,
	291, 300, -150, -37, -51, -44, -44, 163, -121, 121,
	-166, -44, 292, 292, 139, 139, -44, -44, 121, -44,
	121, -44, -44, -38, 197, -44, -44, 197, -90, 201,
	-130, -90, -113, 172, -74, -51, 260, -44, 201, -72,
	296, 277, -74, -40, -40, -159, -166, 290, 290, 7,
	240, 240, 240, 240, 292, -130, -234, -52, -234, -42,
	249, 58, 192, -194, -101, 296, 293, 296, -45, 125,
	-45, -76, -51, 96, 5, -44, -154, -14, -44, -87,
	116, 296, 65, -94, 138, 158, 112, 144, 203, 128,
	-127, 297, -153, -152, 29, -44, -31, -158, -157, 271,
	-130, -130, 240, -242, 231, -136, -130, 165, 245, 100,
	252, 87, 169, 111, 292, -131, -131, -78, 292, -78,
	-130, 291, 291, 296, 293, -65, 296, -64, -130, -78,
	-78, 293, 293, -147, -148, 91, -130, -226, 179, 292,
	292, -130, 29, 296, 293, 111, 293, -103, 184, 293,
	10, 283, 284, 285, 286, 106, 287, 280, 281, 282,
	279, 275, 276, 277, 59, 152, 208, 12, 13, 14,
	136, 123, -131, -131, -131, -78, 292, 293, -134, -135,
	111, 108, 29, -99, -99, -99, 293, 111, -78, 296,
	296, 296, 293, 293, 293, 7, 293, 296, 293, 271,
	271, 293, -87, -130, 240, 240, 96, 163, -204, -201,
	-130, -69, 292, 292, -35, 90, 217, -106, 96, -40,
	96, -40, 240, -105, 61, 240, -80, 201, 60, 293,
	296, -80, -123, -82, -150, 293, 291, 7, 7, 293,
	155, 120, 154, -102, 154, -102, -102, 7, -44, -122,
	292, -45, 292, 292, 292, -44, -41, 293, -137, 118,
	42, -157, 138, 138, -157, -94, 138, -92, 178, -92,
	-92, -153, -190, 298, -44, 292, 293, -130, -130, -131,
	-131, 111, 292, -130, -139, 25, 25, 293, -78, 293,
	296, 293, -138, 293, 262, -65, -65, -65, 5, 93,
	-130, 236, -227, -44, 292, 265, -64, 293, -166, -166,
	-130, -134, -130, -166, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, 87, 163, 169, -131, 296, -78, 293,
	-135, -134, -130, -130, -166, 293, 293, 293, -78, -130,
	-130, -130, 293, 7, -137, 291, -44, -44, -121, 96,
	-205, 61, -206, 53, 101, 163, 165, 251, 189, 51,
	82, 196, 293, 293, -69, -69, 163, 82, 163, 82,
	75, 247, -44, -44, -51, -44, -44, -44, -80, -112,
	292, 172, -22, -51, -90, 277, 291, 291, 293, -67,
	-155, -44, -215, 292, -212, -213, -49, 292, -68, -156,
	-44, -59, -67, 172, -222, 266, -130, -78, -157, -157,
	-93, 256, 172, 138, -157, -163, 274, -129, -128, 109,
	161, 292, -69, -152, 25, 25, -130, -139, 293, -130,
	-130, 293, -130, 5, -130, 293, 293, 293, -130, -231,
	-44, -130, 293, 293, 293, -135, 111, 87, 169, 292,
	-130, 293, 293, 296, 293, 293, 293, -222, -121, -44,
	-76, -44, 165, 139, 292, -131, -51, -120, -239, 63,
	229, 293, 293, 165, 165, -130, -166, -40, -40, 240,
	240, 88, -69, 61, -86, -31, 292, 293, 296, -50,
	-84, 53, -50, -130, 292, -67, 293, 296, 293, 293,
	-51, -223, -225, -44, -93, 292, -130, -157, 169, 296,
	299, 277, -69, 293, -130, -130, 293, 293, -65, -224,
	183, 293, -131, 111, 292, -139, 293, -130, -206, -130,
	-46, 292, 292, 196, -39, 53, -44, -44, 253, 164,
	293, -44, -120, -155, -36, -76, -36, 293, -78, 293,
	-156, -120, 292, 296, 29, -69, 232, -128, -190, 293,
	293, -65, 42, -131, -139, 293, 293, 293, -209, 153,
	-44, -69, -51, -34, 256, -76, 217, -123, -50, -65,
	-120, -67, -225, -227, 293, 237, -228, 191, 207, -78,
	293, -207, -210, -208, 172, 112, 182, 220, 293, 293,
	-63, 292, -130, -81, -36, 293, 293, 5, 293, -229,
	-230, 34, 248, 67, -130, -229, -208, 172, -210, 172,
	253, 85, -209, -69, -123, -120, -230, 186, 107, 206,
	186, 107, -211, 160, 200, 45, 217, -211, -207, 293,
	25, 19, 165, 82, -230,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	351, 0, 0, 0, 0, 0, 0, 325, -2, 0,
	118, 0, 283, 0, 283, 283, 287, 0, 353, 248,
	350, -2, 361, 0, 0, 0, 359, 339, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 778, 779, 780, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 91, 92, 858, 94, 0, 101, 102, 103, 105,
	106, 107, 108, 109, 110, 111, 0, 276, 872, 289,
	114, 838, 876, 939, 888, 121, 131, 0, 945, -2,
	135, 65, 164, 165, 0, 167, 183, 0, 0, 0,
	0, 0, 181, 0, 0, 178, 0, 294, 282, 294,
	279, 280, 281, 284, 0, 275, 0, 352, 0, 0,
	0, 247, -2, 335, 336, -2, 0, 356, 356, 356,
	0, 0, 336, 0, 344, 862, 347, 761, 345, 0,
	0, 358, 357, 0, 340, 420, 0, 751, 381, 0,
	2, 0, 925, 0, 0, 925, 0, 0, 0, 0,
	0, 426, 57, 925, 48, 925, 747, 48, 925, 63,
	0, 79, 81, 788, 789, 790, 791, 950, 952, 953,
	954, 955, 956, 957, 958, 959, 960, 961, 962, 963,
	964, 965, 0, 0, 0, 89, 0, 93, 95, 0,
	0, 0, 288, 115, 915, 117, 0, 120, 122, 123,
	0, 0, 0, 0, 0, 0, 134, 159, 160, 66,
	0, 0, 185, 0, 0, 0, 0, 0, 0, 174,
	0, 175, 0, 177, 0, 277, 290, 291, 278, 0,
	286, 48, 424, 0, 925, 782, 299, 925, -2, 0,
	331, 368, 369, 0, 0, 0, 354, 355, 0, 0,
	0, 327, 328, 0, 346, 0, 0, 384, 739, 743,
	744, 512, 0, 0, 0, 0, 0, 0, 599, 600,
	601, 0, 603, 604, 605, 920, 0, 609, 610, 939,
	751, 764, 765, 766, 767, 0, 0, 0, 772, 773,
	774, 723, 649, 619, -2, -2, 762, 450, 451, 452,
	453, -2, 952, 623, 625, 627, 628, 629, 630, 0,
	904, 921, 935, 936, 944, 948, 949, 925, 932, 926,
	916, 923, 931, 820, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 787, 474, 475, 480, 481, 483,
	384, 382, 421, 422, 0, 752, 730, 724, 725, 0,
	0, 0, 736, 734, 735, 25, 272, 27, 0, 272,
	272, 0, 0, 0, 0, 0, 0, 430, 0, 305,
	0, 0, 427, 0, 0, 59, 0, 46, 47, 0,
	61, 0, 0, 351, 0, 0, 925, 351, 0, 683,
	436, 437, 438, 439, 440, 509, 443, 444, 445, 446,
	447, 448, 449, 457, 458, 459, 460, 461, 462, 471,
	0, 456, 456, 456, 468, 469, 472, 473, 478, 479,
	490, 491, 493, 495, 489, 489, 489, 486, 487, 0,
	681, 0, 98, 0, 815, 749, 754, 757, 104, 0,
	0, 0, 0, 0, 0, 126, 146, 147, 148, 127,
	129, 136, 138, 139, 140, 149, 150, 151, 152, 241,
	0, 243, 162, 163, 775, 0, 128, 130, 132, 133,
	153, 154, 0, 156, 157, 158, 0, 67, 792, 793,
	794, 795, 796, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002,
	1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022,
	1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
	1043, 1044, 166, 168, 0, 182, 169, 170, 171, 172,
	173, 180, 176, 179, 0, 0, 285, 244, 0, 189,
	0, 0, 925, 781, 296, 0, 0, 334, 366, 367,
	370, 373, 374, 371, 512, 341, 342, 343, 362, 363,
	261, 348, 0, 0, 758, 430, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 0, 742, 516, 517, 518, 540, 541,
	0, -2, 681, 0, 606, 607, 608, 0, 0, -2,
	0, 769, 509, 0, 0, 722, 651, 0, 0, 0,
	0, 0, 0, 0, 0, 702, 708, 0, 0, 0,
	0, 0, 0, 0, 0, 464, 477, 488, 485, 484,
	466, 0, 465, 463, 0, 467, 0, 0, 0, 430,
	0, 731, 0, 728, 729, 0, 738, 0, 0, 0,
	0, 271, 29, 925, 0, 39, 0, 0, 214, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 753, 316, 0, 316, 307, 0, 0, 0,
	303, 384, 318, 320, 321, 0, 0, 428, 58, 748,
	48, 64, 48, 70, 80, 0, 82, 85, 86, 87,
	88, 83, 0, 431, 433, 441, 0, 496, 497, 498,
	499, 500, 501, 510, 90, 0, 0, 0, 99, 100,
	755, 756, 0, 0, 119, 124, 125, 295, 0, 143,
	0, 145, 0, 242, 777, 776, 509, 68, 184, 112,
	292, 293, 425, 0, 188, 190, 192, 193, 194, 195,
	782, 0, 782, 0, 0, 0, 0, 0, 372, 375,
	376, 0, 365, 259, 260, 351, 0, 760, 378, 740,
	383, 385, 393, 409, 396, 0, 513, 514, 0, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, -2,
	-2, -2, 532, 533, 534, -2, -2, -2, 538, 539,
	-2, 0, 0, 0, 733, 0, -2, 0, 548, -2,
	-2, -2, 552, 0, 555, 557, 559, 0, 0, 0,
	0, 732, 569, 714, 0, 741, 554, 0, 0, 602,
	0, 0, 0, 687, 688, 0, -2, 611, 361, 0,
	0, 0, 0, 770, 0, 721, 717, 0, 659, 0,
	0, 0, 624, 626, 0, 0, 0, 0, 691, 692,
	693, 694, 695, 696, 697, 0, 0, 0, 0, 571,
	0, 0, 0, 0, 939, 0, 681, 707, 0, 0,
	0, 0, 0, 681, 0, 713, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 378, 423,
	726, 0, 737, 28, 263, 0, 0, 0, 31, 925,
	198, 0, 0, 0, 0, 0, 274, 40, 925, 48,
	925, 48, 41, 26, 272, 262, 265, 0, 56, 0,
	429, 300, 301, 0, 0, 745, 309, 306, 0, 430,
	0, 0, 0, 60, 62, 0, 684, 0, 0, 0,
	0, 0, 0, 0, 0, 682, 96, 750, 97, 116,
	141, 142, 144, 137, 155, 0, 186, 0, 0, 782,
	0, 0, 0, 0, 298, 299, 364, 0, 759, 380,
	0, 0, 0, 0, 0, 0, 417, 417, 417, 415,
	409, 0, 395, 408, 0, 407, -2, 396, 0, 0,
	-2, -2, 0, 0, 0, 570, -2, 553, 556, 558,
	560, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	682, 685, 686, 0, -2, 0, 0, 360, 361, 361,
	361, 617, 0, 0, 718, 0, 0, 618, 0, 0,
	0, 0, 0, 0, 633, 0, 634, 0, 0, 635,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 573, 574, 575, 0, 0, 636, 705, 706,
	0, 0, 0, 0, 0, 0, 641, 0, 712, 0,
	0, 0, 645, 646, 647, 0, 454, 0, 470, 492,
	494, 482, 380, 0, 0, 0, 0, 0, 196, 213,
	0, 0, 0, 0, 33, 0, 0, 0, 0, 37,
	0, 43, 0, 0, 0, 0, 315, 0, 314, 0,
	0, 304, 316, 319, 322, 0, 434, 0, 0, 442,
	502, 503, 504, 505, 506, 507, 508, 0, 113, 191,
	0, 0, 0, 189, 0, 0, 297, 349, 653, 0,
	0, 386, 0, 0, 0, 0, 0, 412, 416, 413,
	414, 411, 391, 0, 405, 0, 398, 515, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 715, 0, 676,
	0, -2, 689, 612, 0, 0, 0, 0, 771, 716,
	720, 0, 657, 658, 662, 0, 0, 622, 0, 0,
	690, 699, 700, 572, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, -2, -2, -2, 589, 590, 591,
	-2, -2, -2, 0, 0, 0, 701, 0, 0, 679,
	703, 704, 709, 710, 0, 638, 639, 640, 711, 0,
	0, 0, 476, 0, 653, 727, 267, 269, 30, 0,
	197, 0, 200, 0, 0, 0, 204, 205, 0, 0,
	0, 0, 215, 222, 0, 0, 0, 45, 0, 0,
	273, 0, 48, 48, 264, 0, 0, 266, 302, 0,
	0, 0, 308, 746, 317, 0, 435, 432, 511, 0,
	249, 258, 258, 0, 620, 621, 0, 0, 0, 254,
	256, 0, 0, 0, 337, 0, 379, 377, 399, 0,
	401, 0, 0, 0, 403, 394, 0, 0, 389, 0,
	388, 0, 0, 397, 0, 0, -2, 0, 563, -2,
	-2, 675, 682, 768, 361, 613, 615, 616, 719, 664,
	661, 0, 648, 631, 632, 698, 0, 0, 0, 0,
	682, 678, 637, 0, 643, 644, 455, 338, 32, 0,
	201, 202, 203, 206, 0, 208, 784, 216, 0, 219,
	220, 217, 0, 34, 35, 44, 50, 36, 42, 0,
	0, 0, 0, 0, 323, 324, 0, 222, 0, 261,
	763, 0, 261, 0, 0, 0, 212, 0, 187, 222,
	0, 652, 654, 0, 400, 0, 419, 402, 0, 0,
	392, 0, 0, 406, -2, -2, 564, 677, 0, 361,
	0, 650, -2, 0, 0, 0, 680, 0, 199, 0,
	228, 0, 0, 0, 52, 0, 268, 270, 0, 311,
	430, 313, 210, 250, 251, 257, 252, 258, 361, 222,
	255, 245, 0, 0, 0, 0, 0, 390, 387, 404,
	614, 667, 0, -2, 0, 597, 642, 207, 233, 0,
	0, 0, 224, 38, 0, 49, 0, 312, 261, 0,
	211, 0, 655, 656, 418, 0, 0, 0, 0, 663,
	598, 209, 229, 230, 0, 225, 226, 227, 783, 221,
	228, 0, 51, 430, 253, 612, 222, 410, 660, 665,
	668, -2, 891, 812, 0, 666, 231, 0, 232, 0,
	0, 0, 233, 0, 310, 246, 0, 670, 671, 672,
	673, 674, 234, 0, 237, 238, 0, 235, 218, 223,
	0, 236, 239, 240, 669,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 281, 3, 287, 282, 3,
	292, 293, 285, 283, 296, 284, 294, 286, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 300, 295,
	275, 277, 276, 3, 297, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 290, 3, 291, 280, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 298, 279, 299, 289,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 278, 57618, 288, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:694
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:700
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:706
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:739
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:786
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:795
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:813
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:820
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:854
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:867
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:868
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:872
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:974
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1242
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1334
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1355
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1445
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1649
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = []string(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1685
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1688
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1699
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = true
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = false
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1788
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = Ascending
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = Descending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1827
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1908
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1918
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.str = ""
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2012
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2019
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2061
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = []string(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2293
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			unimplemented()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			unimplemented()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2316
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2320
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2323
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = true
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = false
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = false
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = true
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2410
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2452
		{
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.str = astFullJoin
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.str = astLeftJoin
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.str = astRightJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.str = astInnerJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2697
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2787
		{
			unimplementedWithIssue(2115)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			unimplementedWithIssue(2115)
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			unimplemented()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2857
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = nil
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2974
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3001
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3040
		{
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3041
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3046
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3058
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3073
		{
			unimplemented()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3085
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3089
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3122
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			unimplemented()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3534
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3535
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3572
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3576
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3621
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3665
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3666
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3669
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3674
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3675
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3678
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3685
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3686
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3687
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3702
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3703
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3707
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3728
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4060
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4216
		{
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4252
		{
			unimplemented()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = DNull
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.str = ""
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
