// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:290
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SMALLSERIAL = 57555
const SNAPSHOT = 57556
const SOME = 57557
const SQL = 57558
const START = 57559
const STRICT = 57560
const STRING = 57561
const STORING = 57562
const SUBSTRING = 57563
const SYMMETRIC = 57564
const SYSTEM = 57565
const TABLE = 57566
const TABLES = 57567
const TEXT = 57568
const THEN = 57569
const TIME = 57570
const TIMESTAMP = 57571
const TIMESTAMPTZ = 57572
const TO = 57573
const TRAILING = 57574
const TRANSACTION = 57575
const TREAT = 57576
const TRIM = 57577
const TRUE = 57578
const TRUNCATE = 57579
const TYPE = 57580
const UNBOUNDED = 57581
const UNCOMMITTED = 57582
const UNION = 57583
const UNIQUE = 57584
const UNKNOWN = 57585
const UPDATE = 57586
const UPSERT = 57587
const USER = 57588
const USING = 57589
const VALID = 57590
const VALIDATE = 57591
const VALUE = 57592
const VALUES = 57593
const VARCHAR = 57594
const VARIADIC = 57595
const VARYING = 57596
const WHEN = 57597
const WHERE = 57598
const WINDOW = 57599
const WITH = 57600
const WITHIN = 57601
const WITHOUT = 57602
const YEAR = 57603
const ZONE = 57604
const NOT_LA = 57605
const WITH_LA = 57606
const AS_LA = 57607
const POSTFIXOP = 57608
const UMINUS = 57609

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4490

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	286, 21,
	-2, 335,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 306,
	164, 306,
	192, 306,
	284, 306,
	286, 306,
	-2, 316,
	-1, 45,
	1, 309,
	164, 309,
	192, 309,
	284, 309,
	286, 309,
	-2, 315,
	-1, 54,
	1, 21,
	286, 21,
	-2, 335,
	-1, 252,
	1, 144,
	286, 144,
	-2, 818,
	-1, 284,
	139, 345,
	163, 345,
	-2, 312,
	-1, 287,
	139, 344,
	163, 344,
	-2, 310,
	-1, 396,
	283, 762,
	-2, 755,
	-1, 397,
	283, 763,
	-2, 756,
	-1, 403,
	5, 479,
	283, 479,
	-2, 902,
	-1, 425,
	5, 445,
	-2, 878,
	-1, 426,
	5, 473,
	283, 473,
	-2, 880,
	-1, 427,
	5, 453,
	-2, 881,
	-1, 428,
	5, 452,
	-2, 882,
	-1, 429,
	5, 473,
	283, 473,
	-2, 885,
	-1, 430,
	5, 473,
	283, 473,
	-2, 886,
	-1, 431,
	5, 474,
	-2, 889,
	-1, 432,
	5, 440,
	-2, 890,
	-1, 433,
	5, 440,
	-2, 891,
	-1, 434,
	5, 455,
	-2, 894,
	-1, 435,
	5, 441,
	-2, 899,
	-1, 436,
	5, 442,
	-2, 900,
	-1, 437,
	5, 443,
	-2, 901,
	-1, 438,
	5, 440,
	-2, 905,
	-1, 439,
	5, 446,
	-2, 910,
	-1, 440,
	5, 444,
	-2, 913,
	-1, 441,
	5, 471,
	283, 471,
	-2, 915,
	-1, 442,
	5, 475,
	-2, 918,
	-1, 443,
	5, 477,
	-2, 919,
	-1, 444,
	5, 470,
	283, 470,
	-2, 923,
	-1, 490,
	139, 344,
	163, 344,
	-2, 313,
	-1, 607,
	89, 316,
	125, 316,
	139, 316,
	163, 316,
	167, 316,
	241, 316,
	-2, 583,
	-1, 615,
	283, 740,
	-2, 729,
	-1, 938,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 513,
	-1, 939,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 514,
	-1, 940,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 515,
	-1, 944,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 519,
	-1, 945,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 520,
	-1, 946,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 521,
	-1, 949,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 526,
	-1, 978,
	172, 653,
	-2, 656,
	-1, 1155,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 527,
	-1, 1160,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 528,
	-1, 1178,
	172, 652,
	-2, 655,
	-1, 1300,
	89, 316,
	125, 316,
	139, 316,
	163, 316,
	167, 316,
	241, 316,
	-2, 393,
	-1, 1341,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 529,
	-1, 1346,
	128, 0,
	-2, 539,
	-1, 1355,
	172, 654,
	-2, 657,
	-1, 1395,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 564,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 565,
	-1, 1397,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 566,
	-1, 1401,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 570,
	-1, 1402,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 571,
	-1, 1403,
	12, 0,
	13, 0,
	14, 0,
	266, 0,
	267, 0,
	268, 0,
	-2, 572,
	-1, 1501,
	128, 0,
	-2, 540,
	-1, 1505,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 543,
	-1, 1506,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 545,
	-1, 1599,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 544,
	-1, 1600,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 546,
	-1, 1608,
	128, 0,
	-2, 573,
	-1, 1658,
	128, 0,
	-2, 574,
	-1, 1720,
	30, 0,
	138, 0,
	210, 0,
	263, 0,
	-2, 877,
}

const sqlNprod = 1016
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20954

var sqlAct = [...]int{

	397, 1704, 1577, 1719, 1745, 1705, 1681, 1706, 1718, 863,
	1083, 1374, 855, 1629, 1616, 1562, 1543, 1554, 395, 394,
	387, 253, 1534, 814, 519, 1533, 1347, 1462, 610, 31,
	1064, 92, 1297, 1548, 92, 1237, 310, 93, 548, 1296,
	14, 1128, 92, 1435, 690, 1033, 445, 795, 1066, 92,
	92, 1287, 1236, 92, 612, 864, 92, 92, 92, 1067,
	509, 1444, 92, 92, 92, 92, 792, 336, 67, 528,
	1092, 288, 991, 1181, 525, 1283, 1348, 293, 1095, 840,
	810, 20, 831, 965, 295, 44, 331, 985, 663, 10,
	92, 995, 962, 6, 1059, 564, 293, 478, 1093, 641,
	816, 1134, 1030, 530, 337, 510, 369, 520, 521, 72,
	8, 674, 44, 338, 479, 645, 561, 71, 333, 329,
	287, 73, 328, 65, 1070, 298, 857, 45, 493, 7,
	5, 4, 494, 560, 661, 492, 250, 88, 74, 44,
	326, 46, 79, 665, 322, 541, 296, 497, 292, 1636,
	988, 306, 1637, 856, 313, 292, 550, 69, 68, 70,
	323, 1295, 75, 550, 550, 1752, 1727, 75, 1087, 1615,
	1712, 1702, 285, 1087, 1087, 570, 1176, 1175, 334, 277,
	316, 1177, 570, 1673, 1140, 363, 284, 1695, 1679, 989,
	1504, 1087, 818, 539, 1669, 21, 300, 1615, 1660, 818,
	1653, 1504, 43, 1087, 817, 36, 1640, 43, 1626, 1087,
	1623, 1615, 1614, 1624, 1601, 1615, 1582, 1504, 1581, 1087,
	1408, 1087, 990, 987, 1618, 1527, 1354, 26, 570, 38,
	1507, 1265, 26, 570, 27, 43, 50, 1503, 1472, 27,
	1504, 1087, 829, 1285, 1351, 92, 92, 570, 860, 1336,
	1330, 1254, 1331, 1331, 1255, 1252, 1251, 52, 570, 570,
	26, 1250, 1178, 39, 570, 570, 1088, 27, 1180, 1087,
	828, 556, 1267, 827, 557, 570, 1087, 92, 992, 92,
	879, 92, 28, 92, 53, 1082, 1053, 972, 505, 786,
	522, 48, 361, 504, 523, 785, 54, 49, 92, 655,
	654, 355, 485, 305, 522, 523, 551, 689, 523, 92,
	464, 1726, 1717, 551, 551, 1711, 47, 1490, 1655, 1625,
	92, 92, 92, 1532, 92, 1528, 1520, 1519, 1514, 1513,
	1512, 1511, 1498, 389, 447, 1453, 1434, 986, 518, 1423,
	50, 1418, 514, 1417, 1416, 452, 50, 1357, 1269, 1266,
	1259, 50, 1256, 1244, 92, 92, 491, 92, 490, 1153,
	969, 52, 453, 513, 1235, 1207, 41, 52, 553, 29,
	1204, 40, 52, 1202, 50, 1140, 30, 484, 1191, 50,
	1185, 1099, 817, 1002, 33, 35, 1001, 1208, 53, 504,
	503, 1714, 1376, 37, 53, 52, 1672, 1645, 1598, 53,
	52, 48, 554, 293, 1644, 613, 48, 49, 1632, 549,
	789, 615, 49, 42, 482, 1621, 1610, 618, 323, 609,
	47, 1596, 53, 285, 1574, 1565, 47, 53, 1541, 48,
	1525, 66, 1496, 1452, 48, 49, 1489, 284, 500, 501,
	49, 1431, 1430, 1429, 506, 1427, 970, 1345, 1314, 1313,
	1234, 1199, 558, 1198, 859, 1208, 522, 336, 336, 47,
	523, 1190, 1172, 1168, 540, 692, 92, 543, 92, 92,
	92, 92, 967, 92, 646, 649, 1213, 92, 571, 1113,
	1112, 1086, 92, 1040, 1000, 790, 653, 639, 92, 638,
	568, 637, 636, 635, 337, 337, 573, 634, 567, 633,
	1222, 632, 693, 338, 338, 631, 92, 630, 629, 92,
	628, 694, 627, 626, 1113, 625, 616, 572, 92, 614,
	47, 311, 788, 508, 692, 1597, 1338, 1337, 515, 643,
	644, 477, 92, 571, 1638, 1494, 92, 458, 1141, 92,
	92, 1077, 1560, 823, 1213, 92, 1258, 92, 92, 647,
	92, 573, 1257, 92, 650, 92, 92, 1154, 336, 473,
	459, 693, 651, 92, 92, 623, 652, 578, 825, 1549,
	694, 856, 572, 92, 1377, 996, 873, 331, 1194, 642,
	1136, 1687, 858, 1733, 858, 1734, 1261, 881, 291, 1223,
	1480, 834, 678, 885, 926, 337, 270, 67, 531, 271,
	532, 778, 775, 685, 338, 779, 780, 781, 476, 782,
	1652, 1590, 1589, 784, 821, 845, 847, 1326, 276, 787,
	275, 1306, 578, 800, 290, 285, 799, 798, 285, 285,
	243, 812, 1305, 1189, 850, 823, 1188, 1187, 72, 806,
	823, 44, 807, 808, 1224, 1186, 71, 382, 887, 1156,
	73, 1209, 1210, 1211, 1212, 1214, 837, 954, 878, 973,
	977, 853, 980, 852, 456, 533, 292, 74, 976, 334,
	862, 1208, 871, 882, 883, 874, 876, 1025, 90, 880,
	875, 254, 805, 1037, 1038, 1039, 69, 68, 70, 90,
	692, 851, 481, 872, 1208, 619, 299, 299, 1651, 370,
	309, 457, 1703, 309, 315, 309, 841, 1495, 988, 309,
	324, 309, 254, 968, 1044, 1218, 1215, 1216, 1217, 1209,
	1210, 1211, 1212, 1214, 1043, 571, 927, 693, 353, 833,
	964, 279, 1676, 282, 1058, 1325, 694, 357, 1689, 964,
	289, 62, 544, 573, 576, 577, 579, 989, 996, 446,
	1733, 992, 307, 1047, 1741, 307, 1366, 318, 1129, 80,
	1213, 307, 844, 318, 572, 56, 1316, 1080, 1081, 1046,
	587, 531, 1260, 532, 402, 531, 571, 532, 92, 85,
	990, 987, 1016, 1213, 81, 683, 682, 63, 676, 671,
	92, 92, 1165, 684, 573, 1133, 1328, 574, 575, 576,
	577, 579, 1708, 480, 1163, 550, 82, 1006, 1138, 449,
	1579, 57, 992, 1127, 578, 572, 1017, 537, 833, 92,
	692, 84, 1646, 1129, 832, 1692, 536, 1262, 1223, 1089,
	534, 92, 92, 92, 1098, 455, 992, 92, 533, 843,
	92, 1693, 533, 571, 640, 448, 92, 92, 92, 92,
	92, 1606, 92, 92, 1363, 960, 1197, 693, 686, 588,
	92, 573, 92, 1740, 1097, 578, 694, 958, 1161, 92,
	58, 1709, 1166, 606, 1445, 358, 360, 1009, 92, 92,
	92, 292, 572, 1224, 1062, 92, 280, 1364, 1063, 293,
	1317, 1707, 254, 254, 64, 986, 1108, 399, 1732, 1131,
	1061, 842, 1102, 83, 283, 893, 915, 688, 1710, 1323,
	588, 1143, 59, 1144, 589, 1110, 1010, 1730, 55, 1547,
	1123, 687, 454, 1090, 90, 1158, 309, 1748, 254, 956,
	488, 955, 578, 1103, 963, 961, 1075, 1211, 1212, 1214,
	467, 1739, 1124, 992, 86, 299, 529, 1162, 474, 1011,
	1008, 356, 1468, 354, 1164, 551, 309, 1217, 1209, 1210,
	1211, 1212, 1214, 952, 1139, 589, 1523, 309, 309, 309,
	1142, 545, 1580, 1146, 455, 1147, 1145, 588, 307, 1148,
	496, 1152, 1469, 1149, 1290, 583, 580, 581, 582, 574,
	575, 576, 577, 579, 495, 1635, 1584, 293, 830, 1293,
	475, 309, 565, 534, 565, 1012, 1583, 534, 516, 1443,
	957, 1572, 1308, 1171, 1107, 1291, 1173, 959, 496, 307,
	542, 542, 644, 643, 1476, 647, 660, 650, 1183, 1184,
	1076, 1563, 589, 797, 1362, 61, 60, 1159, 1746, 582,
	574, 575, 576, 577, 579, 1157, 1524, 791, 1404, 953,
	495, 293, 1179, 307, 336, 677, 672, 658, 1682, 1049,
	1464, 783, 1465, 656, 1007, 1051, 1756, 1233, 659, 1573,
	1115, 950, 92, 1292, 92, 92, 92, 1747, 1246, 92,
	1114, 1052, 1564, 1557, 1440, 1467, 1193, 1439, 92, 454,
	1050, 337, 1470, 321, 1749, 92, 1271, 92, 320, 290,
	338, 487, 1475, 583, 580, 581, 582, 574, 575, 576,
	577, 579, 1436, 254, 92, 565, 254, 254, 254, 1284,
	254, 999, 1405, 1609, 254, 1522, 293, 1278, 1406, 90,
	1241, 1242, 1243, 1238, 1344, 794, 1203, 1312, 1268, 1167,
	1270, 92, 1263, 951, 884, 1264, 1755, 1466, 1017, 1017,
	472, 470, 1333, 299, 469, 1479, 815, 468, 1320, 465,
	1322, 319, 1478, 1276, 1239, 309, 777, 1302, 1280, 1286,
	624, 44, 893, 915, 1303, 1301, 1279, 1286, 998, 838,
	1281, 1459, 1321, 309, 1319, 1307, 309, 854, 1273, 1078,
	1327, 1310, 309, 1074, 869, 870, 1334, 309, 92, 1332,
	309, 877, 254, 254, 1017, 1017, 1017, 1324, 555, 552,
	565, 815, 547, 538, 1290, 1123, 1335, 822, 1352, 535,
	254, 1371, 1290, 796, 1591, 498, 1734, 680, 1084, 1293,
	303, 1593, 1356, 461, 849, 307, 833, 1293, 318, 1288,
	1477, 1618, 848, 1329, 867, 1291, 1648, 1288, 571, 318,
	1674, 833, 318, 1291, 1359, 1360, 1361, 846, 1382, 1289,
	1365, 1367, 1368, 3, 1657, 571, 92, 1289, 92, 1437,
	92, 502, 1411, 1378, 92, 861, 813, 569, 1380, 1753,
	1409, 1556, 1085, 573, 1151, 1384, 92, 572, 499, 92,
	1412, 1419, 1754, 304, 362, 92, 692, 1208, 76, 92,
	571, 92, 1497, 1292, 572, 462, 92, 92, 92, 269,
	1424, 1292, 1055, 1054, 92, 92, 1426, 1415, 312, 1369,
	92, 914, 92, 1433, 92, 92, 92, 92, 87, 1339,
	1253, 1056, 92, 693, 1448, 1045, 1428, 1473, 1474, 1042,
	1449, 1442, 694, 1017, 1017, 1041, 892, 1454, 272, 273,
	993, 1728, 1509, 1446, 1447, 1370, 1438, 1274, 1057, 1441,
	617, 278, 1578, 78, 1555, 776, 466, 1458, 1516, 1691,
	1196, 1491, 1502, 1605, 1628, 1493, 997, 92, 622, 25,
	1536, 917, 375, 1460, 1309, 1069, 1068, 695, 681, 1487,
	670, 398, 471, 664, 673, 1017, 1017, 1017, 1017, 1017,
	1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
	1017, 1017, 1017, 1017, 1005, 1017, 450, 916, 1521, 400,
	890, 401, 891, 648, 388, 1060, 888, 332, 1559, 865,
	92, 92, 994, 1192, 620, 374, 380, 309, 838, 379,
	92, 92, 974, 371, 92, 1561, 1539, 1538, 1540, 1294,
	1539, 1538, 1540, 92, 92, 34, 451, 1546, 248, 249,
	92, 1545, 92, 1132, 92, 1488, 309, 1079, 801, 889,
	1318, 92, 281, 1205, 1023, 1015, 1566, 1013, 309, 1105,
	1106, 1004, 483, 1551, 838, 1571, 1567, 1111, 1568, 307,
	92, 524, 866, 1116, 1117, 1119, 1121, 1122, 463, 1125,
	1126, 1091, 893, 915, 1150, 507, 1542, 309, 809, 1137,
	1552, 1553, 1713, 1592, 1558, 302, 309, 301, 307, 1569,
	1587, 1588, 1065, 460, 657, 309, 1060, 565, 376, 32,
	1104, 1594, 1060, 1048, 274, 893, 915, 1643, 1647, 1315,
	1686, 51, 893, 915, 19, 17, 16, 15, 92, 13,
	92, 1619, 1611, 12, 11, 18, 32, 1586, 92, 1135,
	1539, 1538, 1540, 1277, 1617, 9, 92, 1622, 1135, 24,
	23, 1631, 22, 286, 893, 915, 294, 307, 2, 1,
	0, 1602, 1604, 32, 571, 0, 0, 0, 914, 1639,
	92, 92, 0, 0, 92, 294, 511, 511, 1641, 0,
	0, 0, 573, 0, 0, 0, 526, 0, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 1662, 0, 92,
	0, 0, 0, 572, 0, 92, 293, 1664, 1634, 1671,
	1666, 0, 0, 92, 1539, 1538, 1540, 1659, 1663, 692,
	1665, 1670, 823, 0, 0, 92, 92, 92, 917, 92,
	0, 0, 1677, 0, 0, 1017, 1675, 0, 0, 601,
	602, 603, 604, 605, 0, 0, 1690, 1668, 608, 1684,
	1688, 0, 1698, 578, 92, 0, 693, 1656, 0, 893,
	915, 0, 1696, 1678, 916, 694, 1701, 1700, 621, 0,
	92, 1539, 1538, 1540, 0, 0, 0, 0, 1699, 1716,
	0, 0, 1724, 1694, 0, 0, 77, 1725, 1017, 0,
	0, 0, 1731, 1729, 0, 92, 0, 0, 588, 794,
	1735, 794, 254, 309, 1738, 0, 1275, 0, 0, 1737,
	1744, 0, 0, 0, 0, 1282, 889, 1751, 1736, 1750,
	1697, 0, 1299, 0, 309, 1169, 1170, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1757, 0, 0,
	0, 815, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 81, 589, 0, 1272, 0, 1208, 0, 1225,
	1226, 1227, 0, 0, 0, 0, 0, 0, 309, 1500,
	802, 804, 0, 0, 82, 1017, 307, 811, 0, 0,
	0, 1230, 1231, 1232, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 893, 915, 0, 824, 0, 0,
	0, 0, 1222, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 915,
	867, 0, 0, 0, 0, 1375, 0, 0, 574, 575,
	576, 577, 579, 0, 0, 0, 0, 0, 0, 893,
	915, 0, 0, 0, 0, 886, 1213, 0, 0, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 83, 0, 1208, 0, 1228, 0, 0, 0, 0,
	0, 0, 607, 0, 0, 0, 611, 0, 0, 0,
	0, 1223, 0, 1425, 0, 838, 0, 794, 914, 0,
	0, 1432, 1003, 0, 1014, 0, 1024, 1026, 1031, 1034,
	1035, 1036, 86, 309, 0, 0, 309, 0, 0, 0,
	1342, 1343, 1299, 892, 893, 915, 1451, 0, 1299, 0,
	1468, 914, 1463, 1456, 1457, 838, 0, 0, 914, 1208,
	1461, 815, 815, 0, 0, 0, 1224, 1481, 0, 1482,
	0, 309, 1484, 1485, 1486, 0, 892, 0, 917, 309,
	1469, 0, 1213, 892, 0, 307, 0, 0, 307, 0,
	914, 0, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 917, 1407, 0, 916, 892, 0, 0, 917, 0,
	0, 0, 0, 1483, 1517, 0, 286, 1223, 0, 286,
	286, 1492, 0, 1219, 1220, 1221, 0, 1218, 1215, 1216,
	1217, 1209, 1210, 1211, 1212, 1214, 0, 916, 1213, 256,
	917, 0, 0, 0, 916, 0, 0, 0, 1464, 0,
	1465, 0, 0, 267, 0, 0, 889, 0, 0, 0,
	32, 0, 32, 0, 0, 1535, 0, 1544, 838, 1535,
	0, 0, 1224, 1467, 0, 32, 916, 309, 309, 0,
	1470, 309, 0, 1223, 0, 914, 0, 258, 0, 889,
	815, 1299, 0, 0, 268, 0, 889, 838, 0, 1570,
	0, 254, 511, 0, 0, 0, 257, 259, 309, 0,
	892, 0, 526, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 0, 0, 0, 0, 0, 815, 889, 307,
	307, 0, 0, 307, 0, 1466, 0, 0, 1224, 0,
	0, 1130, 260, 0, 0, 917, 0, 1209, 1210, 1211,
	1212, 1214, 261, 262, 0, 0, 0, 0, 0, 0,
	1576, 0, 0, 0, 0, 0, 0, 263, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1535,
	0, 916, 0, 0, 0, 309, 0, 1630, 0, 0,
	0, 0, 0, 0, 0, 309, 0, 0, 0, 0,
	0, 0, 0, 815, 0, 0, 0, 0, 0, 1218,
	1215, 1216, 1217, 1209, 1210, 1211, 1212, 1214, 0, 0,
	914, 0, 0, 0, 0, 0, 0, 1649, 1650, 0,
	0, 1654, 0, 889, 0, 1155, 0, 1627, 0, 1160,
	0, 0, 1575, 0, 914, 892, 1208, 307, 1225, 1226,
	1227, 0, 0, 1535, 0, 0, 254, 1174, 1499, 0,
	264, 0, 1544, 265, 0, 914, 1182, 0, 266, 892,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	917, 1195, 1683, 815, 309, 1200, 254, 0, 0, 0,
	892, 1222, 0, 0, 0, 1608, 1208, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 608, 0, 0, 0,
	1535, 1630, 1031, 1031, 1031, 0, 916, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 571, 309, 590, 591,
	592, 0, 0, 0, 0, 1213, 1685, 1094, 593, 0,
	916, 0, 0, 0, 573, 0, 599, 0, 0, 0,
	914, 0, 815, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 1228, 572, 0, 811, 889, 0,
	0, 587, 0, 0, 0, 892, 0, 0, 294, 867,
	1223, 0, 1658, 0, 0, 1213, 1304, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 1311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 889, 511, 578, 0, 0, 0, 0,
	0, 0, 0, 511, 0, 0, 526, 0, 0, 0,
	1223, 0, 600, 0, 0, 1224, 0, 0, 0, 1340,
	0, 1341, 0, 0, 598, 0, 916, 1208, 0, 1225,
	1226, 1227, 1346, 0, 595, 0, 0, 0, 0, 1350,
	588, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 1372,
	0, 0, 594, 0, 0, 1224, 607, 0, 1381, 0,
	0, 1383, 1222, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 1219, 1220, 1221, 0, 1218, 1215, 1216, 1217,
	1209, 1210, 1211, 1212, 1214, 589, 0, 0, 0, 0,
	0, 0, 0, 1413, 1414, 0, 597, 0, 0, 0,
	0, 0, 1420, 1421, 1422, 571, 1213, 590, 591, 592,
	607, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	0, 0, 0, 573, 0, 599, 0, 1215, 1216, 1217,
	1209, 1210, 1211, 1212, 1214, 1228, 0, 0, 0, 0,
	0, 0, 0, 0, 572, 0, 0, 0, 0, 596,
	587, 1223, 584, 585, 586, 0, 583, 580, 581, 582,
	574, 575, 576, 577, 579, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 32, 0, 1101, 0, 0,
	0, 0, 0, 511, 0, 1300, 0, 0, 0, 0,
	0, 0, 0, 0, 578, 0, 0, 571, 0, 1501,
	0, 0, 0, 0, 1505, 1506, 1224, 0, 0, 1508,
	0, 600, 0, 1510, 0, 573, 0, 599, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 1515, 0,
	0, 0, 1518, 595, 0, 0, 572, 0, 0, 588,
	0, 0, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 594, 0, 1526, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1219, 1220, 1221, 0, 1218, 1215, 1216,
	1217, 1209, 1210, 1211, 1212, 1214, 578, 0, 0, 0,
	0, 1550, 0, 0, 589, 0, 571, 0, 590, 591,
	592, 0, 0, 600, 0, 597, 0, 0, 593, 0,
	0, 0, 0, 0, 573, 0, 599, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	0, 588, 0, 1585, 0, 572, 1208, 0, 1225, 1226,
	1227, 587, 0, 0, 0, 0, 0, 0, 1349, 1208,
	0, 1225, 1226, 1227, 1599, 1600, 0, 571, 596, 0,
	0, 584, 585, 586, 0, 583, 580, 581, 582, 574,
	575, 576, 577, 579, 1094, 573, 0, 1094, 0, 0,
	0, 1222, 1529, 0, 1613, 578, 589, 571, 0, 590,
	591, 592, 1620, 0, 1222, 0, 572, 597, 0, 593,
	0, 0, 600, 0, 0, 573, 0, 599, 0, 0,
	0, 1633, 0, 0, 598, 0, 0, 0, 0, 32,
	0, 0, 0, 0, 595, 1213, 572, 0, 0, 1642,
	588, 0, 587, 0, 0, 0, 0, 0, 1213, 0,
	0, 0, 0, 0, 0, 0, 578, 0, 0, 0,
	596, 526, 594, 0, 1228, 1229, 0, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 1228, 0, 0,
	1223, 0, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 0, 0, 1223, 0, 589, 0, 0, 0, 0,
	0, 588, 0, 600, 0, 0, 597, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 0,
	0, 588, 0, 0, 0, 1224, 0, 0, 1094, 1094,
	0, 0, 1094, 0, 0, 0, 0, 0, 1224, 0,
	0, 0, 1715, 594, 0, 0, 589, 1723, 1723, 596,
	0, 0, 584, 585, 586, 0, 583, 580, 581, 582,
	574, 575, 576, 577, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 1249, 0, 1723, 589, 0, 0, 0,
	0, 0, 0, 1595, 0, 0, 0, 597, 0, 0,
	0, 0, 1219, 1220, 1221, 0, 1218, 1215, 1216, 1217,
	1209, 1210, 1211, 1212, 1214, 1219, 1220, 1221, 1723, 1218,
	1215, 1216, 1217, 1209, 1210, 1211, 1212, 1214, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	596, 0, 0, 584, 585, 586, 1094, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 0, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 691, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 94, 95, 696, 96,
	697, 698, 699, 700, 701, 702, 703, 704, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 705, 100, 202,
	203, 101, 706, 707, 204, 205, 206, 708, 207, 709,
	340, 710, 102, 103, 104, 0, 105, 711, 106, 712,
	341, 107, 108, 713, 714, 715, 716, 717, 718, 109,
	110, 111, 112, 208, 113, 209, 210, 719, 720, 114,
	721, 722, 723, 115, 116, 724, 117, 725, 0, 726,
	211, 118, 212, 727, 728, 729, 119, 120, 213, 0,
	121, 730, 122, 731, 732, 342, 733, 123, 214, 734,
	215, 735, 124, 125, 216, 217, 736, 737, 126, 738,
	343, 127, 218, 219, 220, 739, 221, 740, 344, 128,
	345, 129, 130, 741, 742, 222, 346, 131, 347, 743,
	132, 744, 745, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 746, 142, 747, 223, 144,
	224, 145, 146, 748, 749, 750, 751, 752, 147, 225,
	349, 148, 350, 226, 149, 150, 753, 227, 151, 228,
	754, 152, 153, 154, 229, 155, 156, 755, 158, 159,
	157, 160, 756, 161, 351, 162, 163, 230, 164, 0,
	255, 165, 166, 757, 231, 167, 168, 758, 169, 170,
	352, 171, 232, 233, 172, 759, 173, 174, 176, 234,
	175, 235, 760, 177, 761, 178, 179, 762, 236, 237,
	238, 763, 764, 180, 239, 240, 765, 181, 182, 183,
	184, 766, 767, 185, 186, 187, 768, 769, 188, 189,
	190, 241, 242, 770, 191, 771, 772, 773, 774, 192,
	193, 194, 195, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1450,
	94, 95, 696, 96, 697, 698, 699, 700, 701, 702,
	703, 704, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 705, 100, 202, 203, 101, 706, 707, 204, 205,
	206, 708, 207, 709, 340, 710, 102, 103, 104, 0,
	105, 711, 106, 712, 341, 107, 108, 713, 714, 715,
	716, 717, 718, 109, 110, 111, 112, 208, 113, 209,
	210, 719, 720, 114, 721, 722, 723, 115, 116, 724,
	117, 725, 0, 726, 211, 118, 212, 727, 728, 729,
	119, 120, 213, 0, 121, 730, 122, 731, 732, 342,
	733, 123, 214, 734, 215, 735, 124, 125, 216, 217,
	736, 737, 126, 738, 343, 127, 218, 219, 220, 739,
	221, 740, 344, 128, 345, 129, 130, 741, 742, 222,
	346, 131, 347, 743, 132, 744, 745, 133, 0, 134,
	135, 136, 137, 138, 348, 139, 140, 143, 141, 746,
	142, 747, 223, 144, 224, 145, 146, 748, 749, 750,
	751, 752, 147, 225, 349, 148, 350, 226, 149, 150,
	753, 227, 151, 228, 754, 152, 153, 154, 229, 155,
	156, 755, 158, 159, 157, 160, 756, 161, 351, 162,
	163, 230, 164, 0, 255, 165, 166, 757, 231, 167,
	168, 758, 169, 170, 352, 171, 232, 233, 172, 759,
	173, 174, 176, 234, 175, 235, 760, 177, 761, 178,
	179, 762, 236, 237, 238, 763, 764, 180, 239, 240,
	765, 181, 182, 183, 184, 766, 767, 185, 186, 187,
	768, 769, 188, 189, 190, 241, 242, 770, 191, 771,
	772, 773, 774, 192, 193, 194, 195, 0, 0, 691,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	826, 94, 95, 696, 96, 697, 698, 699, 700, 701,
	702, 703, 704, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 705, 100, 202, 203, 101, 706, 707, 204,
	205, 206, 708, 207, 709, 340, 710, 102, 103, 104,
	0, 105, 711, 106, 712, 341, 107, 108, 713, 714,
	715, 716, 717, 718, 109, 110, 111, 112, 208, 113,
	209, 210, 719, 720, 114, 721, 722, 723, 115, 116,
	724, 117, 725, 0, 726, 211, 118, 212, 727, 728,
	729, 119, 120, 213, 0, 121, 730, 122, 731, 732,
	342, 733, 123, 214, 734, 215, 735, 124, 125, 216,
	217, 736, 737, 126, 738, 343, 127, 218, 219, 220,
	739, 221, 740, 344, 128, 345, 129, 130, 741, 742,
	222, 346, 131, 347, 743, 132, 744, 745, 133, 0,
	134, 135, 136, 137, 138, 348, 139, 140, 143, 141,
	746, 142, 747, 223, 144, 224, 145, 146, 748, 749,
	750, 751, 752, 147, 225, 349, 148, 350, 226, 149,
	150, 753, 227, 151, 228, 754, 152, 153, 154, 229,
	155, 156, 755, 158, 159, 157, 160, 756, 161, 351,
	162, 163, 230, 164, 0, 255, 165, 166, 757, 231,
	167, 168, 758, 169, 170, 352, 171, 232, 233, 172,
	759, 173, 174, 176, 234, 175, 235, 760, 177, 761,
	178, 179, 762, 236, 237, 238, 763, 764, 180, 239,
	240, 765, 181, 182, 183, 184, 766, 767, 185, 186,
	187, 768, 769, 188, 189, 190, 241, 242, 770, 191,
	771, 772, 773, 774, 192, 193, 194, 195, 396, 385,
	386, 383, 384, 372, 0, 0, 0, 0, 0, 0,
	94, 95, 982, 96, 0, 0, 0, 0, 378, 0,
	0, 0, 97, 98, 196, 425, 198, 426, 99, 427,
	428, 0, 100, 202, 203, 101, 393, 411, 429, 430,
	206, 0, 421, 0, 404, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 341, 107, 108, 0, 405, 407,
	0, 406, 408, 109, 110, 111, 112, 431, 113, 432,
	433, 0, 0, 114, 0, 983, 0, 424, 116, 0,
	117, 0, 0, 0, 377, 118, 412, 391, 0, 0,
	119, 120, 434, 0, 121, 0, 122, 0, 0, 342,
	0, 123, 422, 0, 215, 0, 124, 125, 418, 420,
	0, 0, 126, 0, 343, 127, 435, 436, 437, 0,
	403, 0, 344, 128, 345, 129, 130, 0, 0, 423,
	346, 131, 347, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 348, 139, 140, 143, 141, 367,
	142, 392, 419, 144, 438, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 349, 148, 350, 413, 149, 150,
	0, 414, 151, 228, 0, 152, 153, 154, 439, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 351, 162,
	163, 381, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 409, 169, 170, 352, 171, 440, 233, 172, 0,
	173, 174, 176, 441, 175, 415, 0, 177, 0, 178,
	179, 0, 236, 442, 443, 0, 0, 180, 416, 417,
	390, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	410, 0, 188, 189, 190, 241, 444, 981, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 368, 0, 0,
	396, 385, 386, 383, 384, 372, 0, 0, 364, 365,
	984, 0, 94, 95, 366, 96, 0, 373, 979, 0,
	378, 0, 0, 0, 97, 98, 196, 425, 198, 426,
	99, 427, 428, 0, 100, 202, 203, 101, 393, 411,
	429, 430, 206, 0, 421, 0, 404, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 341, 107, 108, 0,
	405, 407, 0, 406, 408, 109, 110, 111, 112, 431,
	113, 432, 433, 527, 0, 114, 0, 0, 0, 424,
	116, 0, 117, 0, 0, 0, 377, 118, 412, 391,
	0, 0, 119, 120, 434, 0, 121, 0, 122, 0,
	0, 342, 0, 123, 422, 0, 215, 0, 124, 125,
	418, 420, 0, 0, 126, 0, 343, 127, 435, 436,
	437, 0, 403, 0, 344, 128, 345, 129, 130, 0,
	0, 423, 346, 131, 347, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 367, 142, 392, 419, 144, 438, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 349, 148, 350, 413,
	149, 150, 0, 414, 151, 228, 0, 152, 153, 154,
	439, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	351, 162, 163, 381, 164, 0, 255, 165, 166, 50,
	231, 167, 168, 409, 169, 170, 352, 171, 440, 233,
	172, 0, 173, 174, 176, 441, 175, 415, 0, 177,
	52, 178, 179, 0, 236, 442, 443, 0, 0, 180,
	416, 417, 390, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 410, 0, 188, 189, 190, 339, 444, 0,
	191, 0, 0, 0, 48, 192, 193, 194, 195, 368,
	49, 0, 396, 385, 386, 383, 384, 372, 0, 0,
	364, 365, 0, 0, 94, 95, 366, 96, 0, 373,
	0, 0, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 50, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 52, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 339,
	444, 0, 191, 0, 0, 0, 48, 192, 193, 194,
	195, 368, 49, 0, 396, 385, 386, 383, 384, 372,
	0, 0, 364, 365, 0, 0, 94, 95, 366, 96,
	0, 373, 0, 0, 378, 0, 0, 0, 97, 98,
	196, 425, 198, 426, 99, 427, 428, 1027, 100, 202,
	203, 101, 393, 411, 429, 430, 206, 0, 421, 0,
	404, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 405, 407, 0, 406, 408, 109,
	110, 111, 112, 431, 113, 432, 433, 0, 0, 114,
	0, 0, 0, 424, 116, 0, 117, 0, 0, 0,
	377, 118, 412, 391, 0, 0, 119, 120, 434, 0,
	121, 0, 122, 0, 1032, 342, 0, 123, 422, 0,
	215, 0, 124, 125, 418, 420, 0, 0, 126, 0,
	343, 127, 435, 436, 437, 0, 403, 0, 344, 128,
	345, 129, 130, 0, 1028, 423, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 367, 142, 392, 419, 144,
	438, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 413, 149, 150, 0, 414, 151, 228,
	0, 152, 153, 154, 439, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 381, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 409, 169, 170,
	352, 171, 440, 233, 172, 0, 173, 174, 176, 441,
	175, 415, 0, 177, 0, 178, 179, 0, 236, 442,
	443, 0, 1029, 180, 416, 417, 390, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 410, 0, 188, 189,
	190, 241, 444, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 368, 396, 385, 386, 383, 384, 372,
	0, 0, 0, 0, 364, 365, 94, 95, 0, 96,
	366, 0, 0, 373, 378, 0, 0, 0, 97, 98,
	196, 425, 198, 426, 99, 427, 428, 0, 100, 202,
	203, 101, 393, 411, 429, 430, 206, 0, 421, 0,
	404, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	341, 107, 108, 0, 405, 407, 0, 406, 408, 109,
	110, 111, 112, 431, 113, 432, 433, 0, 0, 114,
	0, 0, 0, 424, 116, 0, 117, 0, 0, 0,
	377, 118, 412, 391, 0, 0, 119, 120, 434, 0,
	121, 0, 122, 0, 0, 342, 0, 123, 422, 0,
	215, 0, 124, 125, 418, 420, 0, 0, 126, 0,
	343, 127, 435, 436, 437, 0, 403, 0, 344, 128,
	345, 129, 130, 0, 0, 423, 346, 131, 347, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	348, 139, 140, 143, 141, 367, 142, 392, 419, 144,
	438, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	349, 148, 350, 413, 149, 150, 0, 414, 151, 228,
	0, 152, 153, 154, 439, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 351, 162, 163, 381, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 409, 169, 170,
	352, 171, 440, 233, 172, 0, 173, 174, 176, 441,
	175, 415, 0, 177, 0, 178, 179, 0, 236, 442,
	443, 0, 0, 180, 416, 417, 390, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 410, 0, 188, 189,
	190, 241, 444, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 368, 0, 0, 396, 385, 386, 383,
	384, 372, 0, 0, 364, 365, 0, 0, 94, 95,
	366, 96, 0, 373, 1410, 0, 378, 0, 0, 0,
	97, 98, 196, 425, 198, 426, 99, 427, 428, 0,
	100, 202, 203, 101, 393, 411, 429, 430, 206, 0,
	421, 0, 404, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 341, 107, 108, 0, 405, 407, 0, 406,
	408, 109, 110, 111, 112, 431, 113, 432, 433, 0,
	0, 114, 0, 0, 0, 424, 116, 0, 117, 0,
	0, 0, 377, 118, 412, 391, 0, 0, 119, 120,
	434, 0, 121, 0, 122, 0, 0, 342, 0, 123,
	422, 0, 215, 0, 124, 125, 418, 420, 0, 0,
	126, 0, 343, 127, 435, 436, 437, 0, 403, 0,
	344, 128, 345, 129, 130, 0, 0, 423, 346, 131,
	347, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 348, 139, 140, 143, 141, 367, 142, 392,
	419, 144, 438, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 349, 148, 350, 413, 149, 150, 0, 414,
	151, 228, 0, 152, 153, 154, 439, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 351, 162, 163, 381,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 409,
	169, 170, 352, 171, 440, 233, 172, 0, 173, 174,
	176, 441, 175, 415, 0, 177, 0, 178, 179, 0,
	236, 442, 443, 0, 0, 180, 416, 417, 390, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 410, 0,
	188, 189, 190, 241, 444, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 368, 0, 0, 396, 385,
	386, 383, 384, 372, 0, 0, 364, 365, 0, 0,
	94, 95, 366, 96, 0, 373, 1353, 0, 378, 0,
	0, 0, 97, 98, 196, 425, 198, 426, 99, 427,
	428, 0, 100, 202, 203, 101, 393, 411, 429, 430,
	206, 0, 421, 0, 404, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 341, 107, 108, 0, 405, 407,
	0, 406, 408, 109, 110, 111, 112, 431, 113, 432,
	433, 0, 0, 114, 0, 0, 0, 424, 116, 0,
	117, 0, 0, 0, 377, 118, 412, 391, 0, 0,
	119, 120, 434, 0, 121, 0, 122, 0, 0, 342,
	0, 123, 422, 0, 215, 0, 124, 125, 418, 420,
	0, 0, 126, 0, 343, 127, 435, 436, 437, 0,
	403, 0, 344, 128, 345, 129, 130, 0, 0, 423,
	346, 131, 347, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 348, 139, 140, 143, 141, 367,
	142, 392, 419, 144, 438, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 349, 148, 350, 413, 149, 150,
	0, 414, 151, 228, 0, 152, 153, 154, 439, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 351, 162,
	163, 381, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 409, 169, 170, 352, 171, 440, 233, 172, 0,
	173, 174, 176, 441, 175, 415, 0, 177, 0, 178,
	179, 0, 236, 442, 443, 0, 0, 180, 416, 417,
	390, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	410, 0, 188, 189, 190, 241, 444, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 368, 0, 0,
	396, 385, 386, 383, 384, 372, 0, 0, 364, 365,
	0, 0, 94, 95, 366, 96, 0, 373, 978, 0,
	378, 0, 0, 0, 97, 98, 196, 425, 198, 426,
	99, 427, 428, 0, 100, 202, 203, 101, 393, 411,
	429, 430, 206, 0, 421, 0, 404, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 341, 107, 108, 0,
	405, 407, 0, 406, 408, 109, 110, 111, 112, 431,
	113, 432, 433, 0, 0, 114, 0, 0, 0, 424,
	116, 0, 117, 0, 0, 0, 377, 118, 412, 391,
	0, 0, 119, 120, 434, 0, 121, 0, 122, 0,
	0, 342, 0, 123, 422, 0, 215, 0, 124, 125,
	418, 420, 0, 0, 126, 0, 343, 127, 435, 436,
	437, 0, 403, 0, 344, 128, 345, 129, 130, 0,
	0, 423, 346, 131, 347, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 367, 142, 392, 419, 144, 438, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 349, 148, 350, 413,
	149, 150, 0, 414, 151, 228, 0, 152, 153, 154,
	439, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	351, 162, 163, 381, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 409, 169, 170, 352, 171, 440, 233,
	172, 0, 173, 174, 176, 441, 175, 415, 0, 177,
	0, 178, 179, 0, 236, 442, 443, 0, 0, 180,
	416, 417, 390, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 410, 0, 188, 189, 190, 241, 444, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 368,
	396, 385, 386, 383, 384, 372, 0, 0, 0, 0,
	364, 365, 94, 95, 0, 96, 366, 613, 975, 373,
	378, 0, 0, 0, 97, 98, 196, 425, 198, 426,
	99, 427, 428, 0, 100, 202, 203, 101, 393, 411,
	429, 430, 206, 0, 421, 0, 404, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 341, 107, 108, 0,
	405, 407, 0, 406, 408, 109, 110, 111, 112, 431,
	113, 432, 433, 0, 0, 114, 0, 0, 0, 424,
	116, 0, 117, 0, 0, 0, 377, 118, 412, 391,
	0, 0, 119, 120, 434, 0, 121, 0, 122, 0,
	0, 342, 0, 123, 422, 0, 215, 0, 124, 125,
	418, 420, 0, 0, 126, 0, 343, 127, 435, 436,
	437, 0, 403, 0, 344, 128, 345, 129, 130, 0,
	0, 423, 346, 131, 347, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 348, 139, 140, 143,
	141, 367, 142, 392, 419, 144, 438, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 349, 148, 350, 413,
	149, 150, 0, 414, 151, 228, 0, 152, 153, 154,
	439, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	351, 162, 163, 381, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 409, 169, 170, 352, 171, 440, 233,
	172, 0, 173, 174, 176, 441, 175, 415, 0, 177,
	0, 178, 179, 0, 236, 442, 443, 0, 0, 180,
	416, 417, 390, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 410, 0, 188, 189, 190, 241, 444, 0,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 368,
	0, 0, 396, 385, 386, 383, 384, 372, 0, 0,
	364, 365, 512, 0, 94, 95, 366, 96, 0, 373,
	0, 0, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 1358, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 527, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 1032, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 803, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	1722, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 1721, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 1720, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	1722, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 1721, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 368, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 378, 0, 0, 0, 97, 98, 196, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 1022, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 396, 385, 386, 383, 384, 372, 0, 0,
	0, 0, 1018, 1019, 94, 95, 0, 96, 1020, 0,
	0, 1021, 378, 0, 0, 0, 97, 98, 0, 425,
	198, 426, 99, 427, 428, 0, 100, 202, 203, 101,
	393, 411, 429, 430, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	1722, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 431, 113, 432, 433, 0, 0, 114, 0, 0,
	0, 424, 116, 0, 117, 0, 0, 0, 377, 118,
	412, 391, 0, 0, 119, 120, 434, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	435, 436, 437, 0, 403, 0, 0, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 367, 142, 392, 419, 144, 438, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 439, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 381, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 0, 171,
	440, 233, 172, 0, 173, 174, 176, 441, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 442, 443, 0,
	0, 180, 416, 417, 390, 181, 182, 1721, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	444, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 396, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 364, 365, 94, 95, 0, 96, 366, 0,
	0, 373, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 411, 204, 205, 206, 0, 421, 0, 404, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 405, 407, 0, 406, 408, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	412, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 422, 0, 215, 0,
	124, 125, 418, 420, 0, 0, 126, 0, 343, 127,
	218, 219, 220, 0, 221, 0, 344, 128, 345, 129,
	130, 0, 0, 423, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 0, 419, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 413, 149, 150, 0, 414, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 409, 169, 170, 352, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 415,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 416, 417, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 410, 0, 188, 189, 190, 241,
	242, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 1537, 0, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 340, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 341, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 342, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 343, 127, 218,
	219, 220, 0, 221, 0, 344, 128, 345, 129, 130,
	0, 0, 222, 346, 131, 347, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 348, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 349, 148, 350,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 351, 162, 163, 230, 164, 0, 255, 165, 166,
	50, 231, 167, 168, 0, 169, 170, 352, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 52, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 339, 242,
	0, 191, 0, 0, 0, 48, 192, 193, 194, 195,
	0, 49, 335, 675, 0, 676, 671, 666, 0, 0,
	0, 0, 0, 0, 94, 95, 0, 96, 0, 0,
	47, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 340, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 679, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 668, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 343, 127,
	218, 219, 220, 0, 221, 0, 344, 128, 345, 129,
	130, 0, 0, 222, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 669, 0, 0, 0, 147, 225, 349, 148,
	350, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 352, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 667, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 335, 675, 0, 676, 671, 666, 0, 0,
	0, 0, 677, 672, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 340, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 662, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 668, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 343, 127,
	218, 219, 220, 0, 221, 0, 344, 128, 345, 129,
	130, 0, 0, 222, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 669, 0, 0, 0, 147, 225, 349, 148,
	350, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 352, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 667, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 335, 675, 0, 676, 671, 666, 0, 0,
	0, 0, 677, 672, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 340, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 668, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 343, 127,
	218, 219, 220, 0, 221, 0, 344, 128, 345, 129,
	130, 0, 0, 222, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 669, 0, 0, 0, 147, 225, 349, 148,
	350, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 352, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 667, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 677, 672, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 308, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	50, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 52, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 339, 242,
	0, 191, 0, 0, 0, 48, 192, 193, 194, 195,
	91, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	1096, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 50,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	52, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 339, 242, 0,
	191, 0, 0, 0, 48, 192, 193, 194, 195, 91,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 47,
	1298, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 216,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 504,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 216, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 308,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 91, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 1096, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 216, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 138, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 0, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 236, 237, 238, 0, 0, 180, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 868, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 111, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 216, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 0, 178, 179, 0,
	236, 237, 238, 0, 0, 180, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 1376, 0, 0, 0, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 216, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	138, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 236,
	237, 238, 0, 0, 180, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 0, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 517, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 563, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 214, 0,
	215, 0, 124, 125, 216, 217, 0, 0, 126, 0,
	0, 127, 218, 219, 220, 0, 221, 0, 0, 128,
	0, 129, 130, 0, 0, 222, 0, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	0, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	0, 148, 0, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	0, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 562, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 566, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 216, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 335, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 566, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 340, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 341, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 342, 0, 123, 214, 0, 215, 0,
	124, 125, 216, 217, 0, 0, 126, 0, 343, 127,
	218, 219, 220, 0, 221, 0, 344, 128, 345, 129,
	130, 0, 0, 222, 346, 131, 347, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 348, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 349, 148,
	350, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 351, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 352, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 841, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 839, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 1073, 0, 119, 120, 213, 0, 121, 0, 122,
	844, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 216, 217, 0, 1071, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 843, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 1072,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 841, 207, 0, 0, 836, 102, 103,
	104, 0, 105, 839, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 844,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	835, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 843, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 842, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 91,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 0,
	1298, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 216,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 91, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 216, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 308,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 91, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 559, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 138, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 308, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 236, 237, 238, 0, 0, 180, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 91, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 111, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 314, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 138, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 308, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 0, 178, 179, 0,
	236, 237, 238, 0, 0, 180, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 91, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 216, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	138, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 236,
	237, 238, 0, 0, 180, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 91, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 214, 0,
	215, 0, 124, 125, 1120, 217, 0, 0, 126, 0,
	0, 127, 218, 219, 220, 0, 221, 0, 0, 128,
	0, 129, 130, 0, 0, 222, 0, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	0, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	0, 148, 0, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	0, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 1118, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 91, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 1109, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 793, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 155, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 89, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 91,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 0,
	546, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 216,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 132, 0, 0, 133, 0,
	134, 135, 136, 137, 138, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 168, 0, 0, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 236, 237, 238, 0, 0, 180, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 91, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 489, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 150,
	0, 227, 151, 228, 0, 152, 153, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 164, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 91, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 0, 0, 94,
	95, 0, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 98, 196, 197, 198, 199, 99, 200, 201,
	0, 100, 202, 203, 101, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 111, 112, 208, 113, 209, 210,
	0, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 211, 118, 212, 0, 0, 0, 119,
	120, 213, 0, 121, 0, 122, 0, 0, 0, 0,
	123, 214, 0, 215, 0, 124, 125, 486, 217, 0,
	0, 126, 0, 0, 127, 218, 219, 220, 0, 221,
	0, 0, 128, 0, 129, 130, 0, 0, 222, 0,
	131, 0, 0, 132, 0, 0, 133, 0, 134, 135,
	136, 137, 138, 0, 139, 140, 143, 141, 0, 142,
	0, 223, 144, 224, 145, 146, 0, 0, 0, 0,
	0, 147, 225, 0, 148, 0, 226, 149, 150, 0,
	227, 151, 228, 0, 152, 153, 154, 229, 155, 156,
	0, 158, 159, 157, 160, 0, 161, 0, 162, 163,
	230, 164, 0, 255, 165, 166, 0, 231, 167, 168,
	0, 169, 170, 0, 171, 232, 233, 172, 0, 173,
	174, 176, 234, 175, 235, 0, 177, 0, 178, 179,
	0, 236, 237, 238, 0, 0, 180, 239, 240, 0,
	181, 182, 183, 184, 0, 0, 185, 186, 187, 0,
	0, 188, 189, 190, 241, 242, 91, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 0, 0, 94, 95,
	0, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 98, 196, 197, 198, 199, 99, 200, 201, 0,
	100, 202, 203, 101, 0, 0, 204, 205, 359, 0,
	207, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 111, 112, 208, 113, 209, 210, 0,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 211, 118, 212, 0, 0, 0, 119, 120,
	213, 0, 121, 0, 122, 0, 0, 0, 0, 123,
	214, 0, 215, 0, 124, 125, 216, 217, 0, 0,
	126, 0, 0, 127, 218, 219, 220, 0, 221, 0,
	0, 128, 0, 129, 130, 0, 0, 222, 0, 131,
	0, 0, 132, 0, 0, 133, 0, 134, 135, 136,
	137, 252, 0, 139, 140, 143, 141, 0, 142, 0,
	223, 144, 224, 145, 146, 0, 0, 0, 0, 0,
	147, 225, 0, 148, 0, 226, 149, 150, 0, 227,
	151, 228, 0, 152, 153, 154, 229, 155, 156, 0,
	158, 159, 157, 160, 0, 161, 0, 162, 163, 230,
	164, 0, 255, 165, 166, 0, 231, 167, 168, 0,
	169, 170, 0, 171, 232, 233, 172, 0, 173, 174,
	176, 234, 175, 235, 0, 177, 0, 178, 179, 0,
	251, 237, 238, 0, 0, 247, 239, 240, 0, 181,
	182, 183, 184, 0, 0, 185, 186, 187, 0, 0,
	188, 189, 190, 241, 242, 91, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 94, 95, 0,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	98, 196, 197, 198, 199, 99, 200, 201, 0, 100,
	202, 203, 101, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 111, 112, 208, 113, 209, 210, 0, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 211, 118, 212, 0, 0, 0, 119, 120, 213,
	0, 121, 0, 122, 0, 0, 0, 0, 123, 214,
	0, 215, 0, 124, 125, 216, 217, 0, 0, 126,
	0, 0, 127, 218, 219, 220, 0, 221, 0, 0,
	128, 0, 129, 130, 0, 0, 222, 0, 131, 0,
	0, 132, 0, 0, 133, 0, 134, 135, 136, 137,
	252, 0, 139, 140, 143, 141, 0, 142, 0, 223,
	144, 224, 145, 146, 0, 0, 0, 0, 0, 147,
	225, 0, 148, 0, 226, 149, 150, 0, 227, 151,
	228, 0, 152, 153, 154, 229, 155, 156, 0, 158,
	159, 157, 160, 0, 161, 0, 162, 163, 230, 164,
	0, 255, 165, 166, 0, 231, 167, 168, 0, 169,
	170, 0, 171, 232, 233, 172, 0, 173, 174, 176,
	234, 175, 235, 0, 177, 0, 178, 179, 0, 251,
	237, 238, 0, 0, 247, 239, 240, 0, 181, 182,
	183, 184, 0, 0, 185, 186, 187, 0, 0, 188,
	189, 190, 241, 242, 91, 191, 0, 0, 0, 0,
	192, 193, 194, 195, 0, 0, 94, 95, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 98,
	196, 197, 198, 199, 99, 200, 201, 0, 100, 202,
	203, 101, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 111, 112, 208, 113, 209, 210, 0, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	211, 118, 212, 0, 0, 0, 119, 120, 213, 0,
	121, 0, 122, 0, 0, 0, 0, 123, 214, 0,
	215, 0, 124, 125, 330, 217, 0, 0, 126, 0,
	0, 127, 218, 219, 220, 0, 221, 0, 0, 128,
	0, 129, 130, 0, 0, 222, 0, 131, 0, 0,
	132, 0, 0, 133, 0, 134, 135, 136, 137, 138,
	0, 139, 140, 143, 141, 0, 142, 0, 223, 144,
	224, 145, 146, 0, 0, 0, 0, 0, 147, 225,
	0, 148, 0, 226, 149, 150, 0, 227, 151, 228,
	0, 152, 153, 154, 229, 155, 156, 0, 158, 159,
	157, 160, 0, 161, 0, 162, 163, 230, 164, 0,
	255, 165, 166, 0, 231, 167, 168, 0, 169, 170,
	0, 171, 232, 233, 172, 0, 173, 174, 176, 234,
	175, 235, 0, 177, 0, 178, 179, 0, 236, 237,
	238, 0, 0, 180, 239, 240, 0, 181, 182, 183,
	184, 0, 0, 185, 186, 187, 0, 0, 188, 189,
	190, 241, 242, 91, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 0, 0, 94, 95, 0, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 98, 196,
	197, 198, 199, 99, 200, 201, 0, 100, 202, 203,
	101, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	111, 112, 208, 113, 209, 210, 0, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 211,
	118, 212, 0, 0, 0, 119, 120, 213, 0, 121,
	0, 122, 0, 0, 0, 0, 123, 214, 0, 215,
	0, 124, 125, 327, 217, 0, 0, 126, 0, 0,
	127, 218, 219, 220, 0, 221, 0, 0, 128, 0,
	129, 130, 0, 0, 222, 0, 131, 0, 0, 132,
	0, 0, 133, 0, 134, 135, 136, 137, 138, 0,
	139, 140, 143, 141, 0, 142, 0, 223, 144, 224,
	145, 146, 0, 0, 0, 0, 0, 147, 225, 0,
	148, 0, 226, 149, 150, 0, 227, 151, 228, 0,
	152, 153, 154, 229, 155, 156, 0, 158, 159, 157,
	160, 0, 161, 0, 162, 163, 230, 164, 0, 255,
	165, 166, 0, 231, 167, 168, 0, 169, 170, 0,
	171, 232, 233, 172, 0, 173, 174, 176, 234, 175,
	235, 0, 177, 0, 178, 179, 0, 236, 237, 238,
	0, 0, 180, 239, 240, 0, 181, 182, 183, 184,
	0, 0, 185, 186, 187, 0, 0, 188, 189, 190,
	241, 242, 91, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 0, 0, 94, 95, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 98, 196, 197,
	198, 199, 99, 200, 201, 0, 100, 202, 203, 101,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 111,
	112, 208, 113, 209, 210, 0, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 211, 118,
	212, 0, 0, 0, 119, 120, 213, 0, 121, 0,
	122, 0, 0, 0, 0, 123, 214, 0, 215, 0,
	124, 125, 325, 217, 0, 0, 126, 0, 0, 127,
	218, 219, 220, 0, 221, 0, 0, 128, 0, 129,
	130, 0, 0, 222, 0, 131, 0, 0, 132, 0,
	0, 133, 0, 134, 135, 136, 137, 138, 0, 139,
	140, 143, 141, 0, 142, 0, 223, 144, 224, 145,
	146, 0, 0, 0, 0, 0, 147, 225, 0, 148,
	0, 226, 149, 150, 0, 227, 151, 228, 0, 152,
	153, 154, 229, 155, 156, 0, 158, 159, 157, 160,
	0, 161, 0, 162, 163, 230, 164, 0, 255, 165,
	166, 0, 231, 167, 168, 0, 169, 170, 0, 171,
	232, 233, 172, 0, 173, 174, 176, 234, 175, 235,
	0, 177, 0, 178, 179, 0, 236, 237, 238, 0,
	0, 180, 239, 240, 0, 181, 182, 183, 184, 0,
	0, 185, 186, 187, 0, 0, 188, 189, 190, 241,
	242, 91, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 0, 0, 94, 95, 0, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 98, 196, 197, 198,
	199, 99, 200, 201, 0, 100, 202, 203, 101, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 111, 112,
	208, 113, 209, 210, 0, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 211, 118, 212,
	0, 0, 0, 119, 120, 213, 0, 121, 0, 122,
	0, 0, 0, 0, 123, 214, 0, 215, 0, 124,
	125, 317, 217, 0, 0, 126, 0, 0, 127, 218,
	219, 220, 0, 221, 0, 0, 128, 0, 129, 130,
	0, 0, 222, 0, 131, 0, 0, 132, 0, 0,
	133, 0, 134, 135, 136, 137, 138, 0, 139, 140,
	143, 141, 0, 142, 0, 223, 144, 224, 145, 146,
	0, 0, 0, 0, 0, 147, 225, 0, 148, 0,
	226, 149, 150, 0, 227, 151, 228, 0, 152, 153,
	154, 229, 155, 156, 0, 158, 159, 157, 160, 0,
	161, 0, 162, 163, 230, 164, 0, 255, 165, 166,
	0, 231, 167, 168, 0, 169, 170, 0, 171, 232,
	233, 172, 0, 173, 174, 176, 234, 175, 235, 0,
	177, 0, 178, 179, 0, 236, 237, 238, 0, 0,
	180, 239, 240, 0, 181, 182, 183, 184, 0, 0,
	185, 186, 187, 0, 0, 188, 189, 190, 241, 242,
	91, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	0, 0, 94, 95, 0, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 98, 196, 197, 198, 199,
	99, 200, 201, 0, 100, 202, 203, 101, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 111, 112, 208,
	113, 209, 210, 0, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 211, 118, 212, 0,
	0, 0, 119, 120, 213, 0, 121, 0, 122, 0,
	0, 0, 0, 123, 214, 0, 215, 0, 124, 125,
	216, 217, 0, 0, 126, 0, 0, 127, 218, 219,
	220, 0, 221, 0, 0, 128, 0, 129, 130, 0,
	0, 222, 0, 131, 0, 0, 132, 0, 0, 133,
	0, 134, 135, 136, 137, 138, 0, 139, 140, 143,
	141, 0, 142, 0, 223, 144, 224, 145, 146, 0,
	0, 0, 0, 0, 147, 225, 0, 148, 0, 226,
	149, 150, 0, 227, 151, 228, 0, 152, 153, 154,
	229, 297, 156, 0, 158, 159, 157, 160, 0, 161,
	0, 162, 163, 230, 164, 0, 255, 165, 166, 0,
	231, 167, 168, 0, 169, 170, 0, 171, 232, 233,
	172, 0, 173, 174, 176, 234, 175, 235, 0, 177,
	0, 178, 179, 0, 236, 237, 238, 0, 0, 180,
	239, 240, 0, 181, 182, 183, 184, 0, 0, 185,
	186, 187, 0, 0, 188, 189, 190, 241, 242, 91,
	191, 0, 0, 0, 0, 192, 193, 194, 195, 0,
	0, 94, 95, 0, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 98, 196, 197, 198, 199, 99,
	200, 201, 0, 100, 202, 203, 101, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 246, 111, 112, 208, 113,
	209, 210, 0, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 211, 118, 212, 0, 0,
	0, 119, 120, 213, 0, 121, 0, 122, 0, 0,
	0, 0, 123, 214, 0, 215, 0, 124, 125, 216,
	217, 0, 0, 126, 0, 0, 127, 218, 219, 220,
	0, 221, 0, 0, 128, 0, 129, 130, 0, 0,
	222, 0, 131, 0, 0, 244, 0, 0, 133, 0,
	134, 135, 136, 137, 252, 0, 139, 140, 143, 141,
	0, 142, 0, 223, 144, 224, 145, 146, 0, 0,
	0, 0, 0, 147, 225, 0, 148, 0, 226, 149,
	150, 0, 227, 151, 228, 0, 152, 153, 154, 229,
	155, 156, 0, 158, 159, 157, 160, 0, 161, 0,
	162, 163, 230, 164, 0, 255, 165, 166, 0, 231,
	167, 245, 0, 169, 170, 0, 171, 232, 233, 172,
	0, 173, 174, 176, 234, 175, 235, 0, 177, 0,
	178, 179, 0, 251, 237, 238, 0, 0, 247, 239,
	240, 0, 181, 182, 183, 184, 0, 0, 185, 186,
	187, 0, 0, 188, 189, 190, 241, 242, 91, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	94, 95, 0, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 98, 196, 197, 198, 199, 99, 200,
	201, 0, 100, 202, 203, 101, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 111, 112, 208, 113, 209,
	210, 0, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 211, 118, 212, 0, 0, 0,
	119, 120, 213, 0, 121, 0, 122, 0, 0, 0,
	0, 123, 214, 0, 215, 0, 124, 125, 216, 217,
	0, 0, 126, 0, 0, 127, 218, 219, 220, 0,
	221, 0, 0, 128, 0, 129, 130, 0, 0, 222,
	0, 131, 0, 0, 132, 0, 0, 133, 0, 134,
	135, 136, 137, 138, 0, 139, 140, 143, 141, 0,
	142, 0, 223, 144, 224, 145, 146, 0, 0, 0,
	0, 0, 147, 225, 0, 148, 0, 226, 149, 0,
	0, 227, 151, 228, 0, 152, 0, 154, 229, 155,
	156, 0, 158, 159, 157, 160, 0, 161, 0, 162,
	163, 230, 0, 0, 255, 165, 166, 0, 231, 167,
	168, 0, 169, 170, 0, 171, 232, 233, 172, 0,
	173, 174, 176, 234, 175, 235, 0, 177, 0, 178,
	179, 0, 236, 237, 238, 0, 0, 180, 239, 240,
	0, 181, 182, 183, 184, 0, 0, 185, 186, 187,
	0, 0, 188, 189, 190, 241, 242, 571, 191, 590,
	591, 592, 0, 192, 193, 194, 195, 0, 0, 593,
	0, 0, 0, 0, 0, 573, 0, 599, 0, 0,
	571, 0, 590, 591, 592, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 0, 572, 0, 573, 0,
	599, 0, 587, 571, 0, 590, 591, 592, 0, 0,
	0, 0, 0, 0, 0, 593, 0, 0, 0, 572,
	0, 573, 0, 599, 0, 587, 0, 571, 0, 590,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 572, 0, 0, 573, 578, 599, 587, 0,
	571, 0, 590, 591, 592, 0, 0, 0, 0, 0,
	0, 0, 593, 600, 0, 0, 572, 0, 573, 578,
	599, 0, 587, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 600, 0, 0, 572,
	0, 588, 578, 0, 0, 587, 0, 0, 598, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 600,
	0, 0, 0, 594, 588, 0, 578, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 600, 0, 0, 594, 588, 0, 578,
	0, 0, 0, 0, 0, 598, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 600, 597, 0, 594,
	0, 588, 0, 0, 0, 0, 0, 0, 598, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	597, 0, 0, 594, 588, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 594, 0, 0, 0,
	596, 0, 0, 584, 585, 586, 589, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 597, 0, 0,
	0, 0, 0, 596, 1247, 0, 584, 585, 586, 589,
	583, 580, 581, 582, 574, 575, 576, 577, 579, 0,
	597, 0, 0, 0, 1680, 0, 596, 0, 0, 584,
	585, 586, 0, 583, 580, 581, 582, 574, 575, 576,
	577, 579, 0, 0, 0, 0, 0, 1667, 0, 0,
	596, 0, 0, 584, 585, 586, 0, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 0, 0, 0,
	0, 1661, 0, 596, 0, 0, 584, 585, 586, 0,
	583, 580, 581, 582, 574, 575, 576, 577, 579, 571,
	0, 590, 591, 592, 1612, 0, 0, 0, 0, 0,
	0, 593, 0, 0, 0, 0, 0, 573, 0, 599,
	0, 0, 571, 0, 590, 591, 592, 0, 0, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 572, 0,
	573, 0, 599, 0, 587, 571, 0, 590, 591, 592,
	0, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	0, 572, 0, 573, 0, 599, 0, 587, 0, 571,
	0, 590, 591, 592, 0, 0, 0, 0, 0, 0,
	0, 593, 0, 0, 572, 0, 0, 573, 578, 599,
	587, 0, 571, 0, 590, 591, 592, 0, 0, 0,
	0, 0, 0, 0, 593, 600, 0, 0, 572, 0,
	573, 578, 599, 0, 587, 0, 0, 598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 600, 0,
	0, 572, 0, 588, 578, 0, 0, 587, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 600, 0, 0, 0, 594, 588, 0, 578, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 600, 0, 0, 594, 588,
	0, 578, 0, 0, 0, 0, 0, 598, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 595, 600, 597,
	0, 594, 0, 588, 0, 0, 0, 0, 0, 0,
	598, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 0, 597, 0, 0, 594, 588, 0, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 594, 0,
	0, 0, 596, 0, 0, 584, 585, 586, 589, 583,
	580, 581, 582, 574, 575, 576, 577, 579, 0, 597,
	0, 0, 0, 1607, 0, 596, 0, 0, 584, 585,
	586, 589, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 0, 597, 0, 0, 0, 1603, 0, 596, 0,
	0, 584, 585, 586, 0, 583, 580, 581, 582, 574,
	575, 576, 577, 579, 0, 0, 0, 0, 0, 1531,
	0, 0, 596, 0, 0, 584, 585, 586, 0, 583,
	580, 581, 582, 574, 575, 576, 577, 579, 0, 0,
	0, 0, 0, 1530, 0, 596, 0, 0, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 571, 0, 590, 591, 592, 1471, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 0, 0, 0, 573,
	0, 599, 0, 0, 571, 0, 590, 591, 592, 0,
	0, 0, 0, 0, 0, 0, 593, 0, 0, 0,
	572, 0, 573, 0, 599, 0, 587, 571, 0, 590,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 0, 572, 0, 573, 0, 599, 0, 587,
	0, 571, 0, 590, 591, 592, 0, 0, 0, 0,
	0, 0, 0, 593, 0, 0, 572, 0, 0, 573,
	578, 599, 587, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 600, 0, 0,
	572, 0, 0, 578, 0, 0, 587, 0, 0, 598,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	600, 0, 0, 0, 0, 588, 578, 0, 0, 0,
	0, 0, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 595, 600, 0, 0, 0, 594, 588, 1208,
	578, 1225, 1226, 1227, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 600, 0, 0,
	594, 588, 0, 0, 0, 0, 0, 0, 0, 598,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 597, 0, 594, 1222, 588, 0, 0, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 1213, 0,
	0, 0, 0, 0, 596, 0, 0, 584, 585, 586,
	589, 583, 580, 581, 582, 574, 575, 576, 577, 579,
	0, 597, 0, 0, 0, 1379, 0, 596, 0, 0,
	584, 585, 586, 0, 583, 580, 581, 582, 574, 575,
	576, 577, 579, 1223, 0, 0, 0, 0, 1355, 0,
	596, 0, 0, 584, 585, 586, 0, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 0, 0, 0,
	0, 971, 0, 0, 596, 0, 0, 584, 585, 586,
	0, 583, 580, 581, 582, 574, 575, 576, 577, 579,
	0, 0, 571, 1455, 590, 591, 592, 0, 1224, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 0, 0,
	573, 0, 599, 0, 0, 571, 0, 590, 591, 592,
	0, 0, 0, 0, 0, 0, 0, 593, 0, 0,
	0, 572, 0, 573, 0, 599, 0, 587, 0, 0,
	0, 571, 0, 590, 591, 592, 0, 0, 0, 0,
	0, 0, 0, 593, 572, 0, 0, 1084, 0, 573,
	587, 599, 0, 0, 0, 1219, 1220, 1221, 0, 1218,
	1215, 1216, 1217, 1209, 1210, 1211, 1212, 1214, 0, 0,
	572, 578, 1743, 0, 0, 0, 587, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 0, 0, 0, 578, 0, 1239, 0, 0, 1238,
	598, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	595, 600, 0, 0, 0, 0, 588, 0, 0, 0,
	578, 0, 0, 598, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 595, 0, 0, 0, 600, 594, 588,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	1742, 0, 0, 0, 0, 0, 0, 0, 0, 595,
	0, 594, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 594, 0, 0,
	0, 0, 0, 0, 589, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 820, 0, 0, 0,
	0, 0, 571, 0, 590, 591, 592, 0, 0, 0,
	589, 0, 0, 0, 593, 0, 0, 819, 0, 0,
	573, 597, 599, 0, 0, 596, 0, 0, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 572, 0, 0, 0, 0, 0, 587, 596, 0,
	0, 584, 585, 586, 0, 583, 580, 581, 582, 574,
	575, 576, 577, 579, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 584, 585, 586,
	0, 583, 580, 581, 582, 574, 575, 576, 577, 579,
	0, 578, 571, 0, 590, 591, 592, 0, 0, 0,
	0, 0, 0, 0, 593, 0, 0, 0, 600, 0,
	573, 0, 599, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 571, 0, 590, 591, 592, 0, 0, 0,
	595, 572, 0, 0, 593, 0, 588, 587, 0, 0,
	573, 0, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 572, 0, 0, 0, 0, 0, 587, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	598, 578, 571, 0, 590, 591, 592, 0, 0, 0,
	595, 0, 0, 0, 593, 0, 588, 0, 600, 0,
	573, 0, 599, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 594, 292,
	595, 572, 0, 0, 0, 596, 588, 587, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 578, 0, 0, 0, 0, 1245, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 600, 0,
	0, 0, 597, 0, 0, 0, 0, 0, 0, 0,
	598, 0, 0, 0, 0, 0, 0, 0, 0, 1373,
	595, 0, 0, 0, 0, 596, 588, 0, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 0, 0, 0, 0, 0, 0, 0, 594, 0,
	0, 0, 0, 0, 0, 596, 0, 0, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 0, 0, 571, 0, 590, 591, 592, 0, 0,
	0, 589, 0, 0, 0, 593, 0, 0, 1240, 0,
	0, 573, 597, 599, 0, 0, 0, 571, 0, 590,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 572, 0, 0, 573, 0, 599, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 0, 0, 0,
	0, 0, 587, 0, 0, 596, 0, 0, 584, 585,
	586, 0, 583, 580, 581, 582, 574, 575, 576, 577,
	579, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 600,
	0, 0, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 598, 0, 571, 0, 590, 591, 592, 0, 0,
	0, 595, 0, 600, 0, 593, 0, 588, 1201, 0,
	0, 573, 0, 599, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 594,
	0, 588, 572, 1208, 0, 1225, 1226, 1227, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 1206, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 0, 1222, 0,
	0, 0, 578, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 1213, 0, 0, 0, 596, 588, 0, 584,
	585, 586, 0, 583, 580, 581, 582, 574, 575, 576,
	577, 579, 0, 0, 0, 0, 0, 0, 0, 594,
	596, 1228, 0, 584, 585, 586, 0, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 1223, 0, 0,
	0, 0, 0, 0, 571, 0, 590, 591, 592, 0,
	0, 0, 589, 0, 0, 0, 593, 0, 0, 0,
	0, 0, 573, 597, 599, 0, 0, 571, 0, 590,
	591, 592, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 0, 572, 0, 573, 0, 599, 0, 587,
	0, 0, 1224, 571, 0, 590, 591, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 572, 0, 0, 0,
	0, 573, 587, 599, 0, 0, 596, 0, 0, 584,
	585, 586, 0, 583, 580, 581, 582, 574, 575, 576,
	577, 579, 572, 578, 0, 0, 0, 0, 587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	600, 0, 0, 0, 0, 0, 578, 0, 0, 1219,
	1220, 1221, 598, 1218, 1215, 1216, 1217, 1209, 1210, 1211,
	1212, 1214, 595, 600, 0, 0, 0, 0, 588, 0,
	0, 0, 578, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 0, 600,
	594, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	571, 598, 590, 591, 592, 0, 0, 0, 0, 0,
	0, 595, 0, 0, 0, 0, 0, 588, 573, 0,
	599, 0, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 0, 587, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 597, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 0, 0, 596, 0, 578,
	584, 585, 586, 0, 583, 580, 581, 582, 574, 575,
	576, 577, 579, 0, 0, 0, 600, 0, 0, 0,
	596, 0, 0, 584, 585, 586, 0, 583, 580, 581,
	582, 574, 575, 576, 577, 579, 0, 0, 595, 0,
	0, 0, 0, 0, 588, 0, 596, 0, 0, 584,
	585, 586, 0, 583, 580, 581, 582, 574, 575, 576,
	577, 579, 905, 900, 921, 894, 913, 912, 0, 0,
	896, 895, 0, 0, 0, 923, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 589,
	0, 0, 0, 0, 918, 0, 910, 909, 0, 0,
	597, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 907,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 902, 903, 0, 688, 0, 0,
	0, 0, 0, 596, 0, 0, 584, 585, 586, 0,
	583, 580, 581, 582, 574, 575, 576, 577, 579, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 0, 0, 0, 0,
	0, 0, 0, 904, 899, 0, 0, 0, 0, 0,
	925, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	919, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 924,
}
var sqlPact = [...]int{

	176, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 694, -1000, -1000, -1000, 791, 670, 148, 1688, 1688,
	15186, -1000, -1000, 17925, -1000, 2045, 363, 366, 363, 363,
	387, 15186, 507, 662, 137, -1000, 499, 33, 17676, 13941,
	1212, 16, 13194, 238, 176, 13692, 13941, 17427, 1057, 971,
	966, 13194, 17178, 16929, 16680, -1000, 8857, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 504, 789, -1000, 14, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 787, -1000, 13941,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16431, 16182, 7818, 793, -1000, -1000,
	433, 298, 1228, -1000, 25, -1000, -1000, -1000, 1055, -1000,
	776, 1053, 1050, 1047, 1046, 297, 819, -1000, 384, 793,
	-1000, 793, -1000, -1000, -1000, 461, 15186, -1000, 13194, -1000,
	15933, 984, 15684, -1000, 499, -1000, -1000, -1000, 855, 1207,
	1207, 1207, 1233, 106, 105, 137, 1, 13941, -1000, 240,
	1, 5996, 5996, -1000, -1000, 238, -1000, 252, 11441, 23,
	-1000, 6518, -1000, 758, 1129, 638, 629, 1123, -95, 13194,
	13941, 13941, 534, 15435, -1000, 1122, 122, 1119, -1000, 115,
	1118, -1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, 238,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13443, 11700, 700, 11700, -1000, -1000, 1252,
	-1000, -112, 20404, -1000, 7818, 7818, 7818, 7818, 7818, 701,
	-1000, -1000, -1000, 4428, -1000, -1000, 23, 237, 124, -1000,
	-1000, 236, 23, -1000, -1000, -1000, -1000, 233, 1355, 412,
	-1000, -1000, -1000, 7818, 306, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1069, 232, 230, -1000, -1000, -1000,
	-1000, 229, 227, 225, 224, 222, 218, 216, 214, 210,
	209, 208, 206, 204, 665, -1000, 325, -1000, -1000, 325,
	325, -1000, 191, 191, 192, -1000, -1000, -1000, 191, -1000,
	-1000, -1000, 302, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	203, -1000, 13, 12, 926, 914, 9378, 9118, 1165, 781,
	-1000, -1000, -1000, 22, 3645, 13941, 1065, 11700, 13941, 13941,
	13941, -1000, 13941, -1000, 924, -1000, 13941, -1000, 8, 2,
	-1000, 15186, -1000, 123, -1000, 202, 892, 14937, 1137, 878,
	-1000, 855, -1000, 817, 911, 7038, 7818, 137, -1000, -1000,
	137, 137, 7818, -1000, -1000, 13941, 1, 1251, 13941, 95,
	-1000, 19712, -1000, 95, -1000, -1000, -1000, 13941, 23, -1000,
	-1000, -1000, 7818, 3384, -14, -1000, 20404, -1000, -45, 767,
	-1000, 12696, 1200, 1185, 1177, 13194, 460, 432, 13941, 13941,
	315, 171, 1250, 171, 10923, -1000, 13941, 13941, -1000, 13941,
	-1000, -1000, 13941, -1000, 13941, 13941, 143, 12198, 581, 1111,
	427, -7, 11949, 13941, -1000, 20, -1000, -1000, 1040, 360,
	7818, 20701, 13941, 498, 7818, 7818, 7818, 7818, 7818, 7818,
	7818, 7818, 7818, 7818, 7818, 7818, 7818, 7818, 7818, 7818,
	7818, 7818, 7818, 7818, 7818, 7818, 933, 426, 774, 712,
	189, 1290, 1290, 1290, 20453, 20453, 163, 9, 19187, 0,
	23, -1000, -1000, 5736, 5474, 23, 3904, -1000, 634, 1343,
	320, 20404, 1082, 1012, 201, 102, 99, 7818, 803, 7818,
	8078, 7818, 7818, 4690, 7818, 7818, 7818, 7818, 7818, 7818,
	-1000, 200, -1000, -1000, -1000, -1000, 1338, -1000, -1000, 1332,
	-1000, 496, 486, 1328, 654, 960, 876, -1000, -1000, -1000,
	-1000, -1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1305, -1000, -1000, -1000, -1000, 1324, -1, -1000,
	-1000, -1000, -1000, -1000, 1353, -1000, -1000, -1000, -1000, 3645,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 13941, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 654, 960, -1000, -1000, 13194,
	12447, 1103, 772, 875, -1000, -1000, 273, 1099, -1000, -1000,
	-1000, -1000, 20404, -1000, 20404, 570, 974, -1000, 974, -2,
	-1000, 19531, -1000, 198, -18, -1000, 315, 5996, 10664, 3645,
	-1000, 315, 97, -1000, 2326, -1000, -1000, 6518, -1000, 581,
	13941, 13941, 13941, -1000, -1000, 859, 14688, -1000, 20701, 13941,
	-1000, 197, 196, 949, 939, 13941, 13941, 14439, 14190, 13941,
	754, 13941, 13941, 625, -1000, 566, 7818, 631, -1000, 10146,
	329, 13941, 616, 88, -1000, -1000, -1000, 270, 13941, -1000,
	-1000, -1000, 122, -1000, 115, -1000, -1000, 13194, 13941, 11949,
	-7, -11, -1000, -1000, 13941, 960, 20404, -1000, 1260, -1000,
	-1000, -1000, -1000, 76, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 192, 665, 191,
	191, 191, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 302,
	-1000, 325, 325, 325, -1000, -1000, -1000, 295, 468, 468,
	1255, 1255, 1255, 1255, 766, 766, 1574, 2787, 2627, 2627,
	2627, 833, 523, 523, 2627, 2627, 2627, 20453, 20427, 715,
	7818, 418, 703, 189, 7818, -1000, 711, -1000, -1000, -1000,
	1035, 180, 8078, 8078, -1000, -1000, -1000, 4428, -1000, 179,
	7818, -1000, 7818, -105, -106, -1000, -1000, -22, -1000, -1000,
	-19, 7818, 7818, 7818, 96, -1000, 414, -1000, 406, 405,
	402, -1000, 178, 94, 493, -1000, 7818, 685, 170, 168,
	7818, -1000, -1000, 20223, 89, 1032, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 86, 20127, 81, 2779, -1000, 8078, 8078,
	8078, 4428, 167, 80, 19505, -112, 20103, 6778, 6778, 6778,
	69, 19922, 7818, -112, 18417, 2817, 2726, -23, -28, -29,
	1323, -33, 68, 290, 284, 66, -1000, -1000, -1000, 532,
	-1000, 644, -1000, 9638, -1000, -1000, -1000, 634, -1000, -56,
	-1000, -1000, -1000, -1000, 65, -15, -1000, -1000, -1000, -1000,
	-1000, 13941, 231, 13941, 13941, 13941, 1098, 1352, 13941, -1000,
	-1000, -1000, 7818, -1000, -1000, -1000, 33, 13941, -1000, 1010,
	-1000, -44, 1109, -127, 12945, -1000, 9887, -1000, 1010, -1000,
	-1000, 7818, -1000, -1000, -1000, 401, 390, 1095, -1000, 857,
	-1000, 659, 7818, 13941, 166, 165, 682, -1000, 1094, 764,
	1092, 764, -1000, -45, 678, -1000, -1000, 386, -1000, 5996,
	20404, -1000, 604, 1187, -34, -1000, -1000, -1000, 5996, 315,
	10923, 6518, -35, -1000, -1000, 581, -56, -1000, -56, -1000,
	246, 245, -1000, 1322, 7818, 715, 7818, 8078, 8078, -1000,
	715, -1000, -1000, -1000, -1000, 1030, 164, 7818, 20701, 2766,
	2447, -40, 5212, -61, 19164, -1000, -1000, 124, -1000, 63,
	6258, -1000, 19802, -12, -12, -1000, 887, 741, 610, 549,
	1312, 1350, 1134, -1000, 7818, 19832, -1000, 11182, 318, 714,
	19141, 20701, -1000, 7818, -1000, 1029, 7818, -1000, 20701, 8078,
	8078, 8078, 8078, 8078, 8078, 8078, 8078, 8078, 8078, 8078,
	8078, 8078, 8078, 8078, 8078, 8078, 8078, 8078, 967, 8078,
	1287, 1287, 1287, -67, 4950, -1000, 1063, 1029, 7818, 7818,
	20701, 60, 59, 57, -1000, 7818, -112, 7818, 7818, 7818,
	-1000, -1000, -1000, 55, -1000, 1303, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13941, -1000, 12447, 162, 13941,
	160, 159, 158, 13941, -1000, 1137, -1000, 52, -1000, -1000,
	-1000, -1000, -1000, 1001, 1231, 10664, 957, 954, 10664, 879,
	704, 704, 704, -1000, 12945, 3110, -1000, -1000, 13941, 150,
	10405, 51, 1109, 1001, 19211, 13941, 13941, 13941, 1091, 1903,
	-1000, 18872, -46, 13941, 13941, -1000, 947, 1085, 352, 13941,
	-1000, 13941, -1000, 13941, 13941, 13941, 13941, -83, 5996, 153,
	33, 13941, -83, 566, -1000, -1000, 267, 425, 1295, 48,
	1238, 715, 2246, 1767, 7818, 20701, 20570, -47, -1000, 7818,
	7818, -1000, -54, -1000, 7818, -1000, -1000, 1347, 7818, 47,
	46, 45, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 44,
	-1000, -1000, 20404, 7818, -1000, -1000, 18174, 7818, 43, -1000,
	42, 20404, 1063, 20404, -1000, 661, 661, 1287, 1287, 1287,
	1287, 684, 684, 1883, 2296, 445, 445, 445, 1949, 377,
	377, 445, 445, 445, 1021, 885, 147, 20263, 7818, -59,
	-1000, -1000, -1000, 20404, 20404, 41, -1000, -1000, -1000, -112,
	2535, 18849, 18825, -1000, 39, -1000, -1000, 8598, 145, 13941,
	12447, 8598, 755, -1000, -1000, 312, 7818, 7818, 1109, 10664,
	10664, 1117, 953, 10664, -1000, -1000, -1000, -1000, 277, -1000,
	929, 142, 13941, 12945, 312, -1000, -1000, -1000, -1000, 13941,
	-1000, 13941, -1000, 13941, 854, -1000, -1000, 938, 141, 8078,
	13941, -1000, 752, -66, -68, 849, -1000, 839, 7818, -1000,
	20701, 764, 764, -1000, 381, 380, -1000, -83, 1142, 13941,
	1174, -1000, -1000, -1000, 138, -1000, 243, 116, -1000, 7818,
	7818, 20570, -70, -1000, 20701, 715, 715, -1000, 18802, -1000,
	19802, -1000, -1000, -1000, -1000, 20404, 676, -1000, 18779, -1000,
	-1000, -1000, 8078, 1019, 133, 20701, 18510, -1000, -1000, 7818,
	-1000, -1000, -1000, -72, -1000, 175, 1192, 7818, -1000, -1000,
	132, 8598, -74, -1000, -1000, 35, -76, 13941, -1000, 13941,
	20404, -112, -1000, 1117, -1000, 125, 7818, 10664, -1000, -1000,
	834, -138, -1000, 266, -1000, 13941, -78, -1000, -1000, -1000,
	905, -1000, -1000, -1000, 7818, 20263, 121, -1000, 114, -1000,
	-1000, -1000, 635, -1000, -1000, 20404, 1197, -1000, -1000, 13941,
	13941, 454, -84, 13941, -1000, -1000, 4166, -1000, -1000, 715,
	715, -1000, -1000, -1000, 34, 714, 1226, -1000, 19299, 8078,
	20701, -86, -1000, 18487, 752, 8598, 1202, 23, 13941, 1202,
	18463, 3904, -90, -1000, 13941, -1000, 752, 113, -104, -1000,
	1225, -1000, 13941, 20404, -1000, 509, 929, -1000, 3645, -96,
	-1000, -1000, 18440, 913, 13941, 13941, 13941, 334, 13941, -1000,
	-1000, 530, -1000, 315, -1000, -1000, 643, 7818, 19299, -97,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1192, -19, 752,
	-1000, -1000, 8598, 13941, 109, -113, 474, -1000, -1000, -1000,
	-1000, 727, 697, 31, -114, 108, -1000, 7818, -1000, 10923,
	-1000, 28, 7558, 7558, -112, -1000, 1202, 27, -1000, -118,
	-1000, -1000, -1000, 1346, -1000, 753, 734, 506, -1000, -1000,
	-1000, -1000, -1000, 913, 13941, 20404, -103, -1000, -1000, -1000,
	8338, 763, 557, 19482, -1000, -1000, -1000, 752, -1000, -1000,
	1147, -1000, 339, 886, 886, 727, -119, -1000, 1257, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1276, -1000, -1000, 989,
	-1000, -1000, -1000, 7298, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1579, 1578, 1263, 131, 130, 1572, 1570, 1569, 93,
	129, 110, 123, 1565, 89, 1563, 1555, 1554, 1553, 40,
	1549, 1547, 1546, 1545, 1544, 81, 29, 141, 1528, 127,
	1541, 1540, 1539, 10, 103, 69, 1538, 38, 47, 97,
	114, 647, 66, 1537, 1534, 137, 20, 14, 699, 95,
	145, 122, 140, 1533, 1524, 1523, 30, 1522, 1517, 1515,
	1512, 73, 71, 1508, 25, 1506, 23, 1505, 1504, 100,
	1501, 101, 116, 21, 119, 45, 1498, 60, 9, 55,
	1492, 28, 1491, 36, 75, 135, 1482, 41, 147, 61,
	17, 51, 1481, 1477, 1475, 1474, 102, 87, 72, 1473,
	1472, 82, 1470, 128, 132, 1468, 1467, 126, 1465, 1463,
	1459, 630, 1458, 1456, 531, 1455, 2, 59, 48, 12,
	108, 107, 24, 1449, 15, 1445, 1294, 782, 185, 1443,
	52, 35, 83, 43, 54, 26, 1442, 106, 1439, 1436,
	1435, 1434, 1433, 91, 1432, 74, 143, 32, 39, 80,
	22, 16, 70, 78, 98, 144, 105, 1429, 1428, 118,
	1427, 76, 1426, 1424, 897, 115, 1423, 1422, 1421, 845,
	809, 774, 333, 1420, 1419, 749, 334, 1416, 1414, 99,
	1394, 1393, 134, 1392, 136, 44, 1391, 111, 1390, 88,
	1388, 0, 46, 37, 1387, 124, 79, 1386, 1385, 1384,
	1383, 27, 1, 7, 6, 5, 4, 19, 18, 1382,
	1380, 125, 84, 1379, 146, 1378, 1376, 33, 1374, 1373,
	13, 1370, 11, 1369, 8, 3, 1368, 133, 1366, 94,
	1365, 1298, 1363, 142, 1362, 1361, 1309, 92,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 12, 12, 12, 160, 160, 159, 13,
	18, 227, 227, 227, 231, 231, 232, 232, 233, 233,
	233, 233, 233, 233, 233, 229, 229, 21, 21, 21,
	21, 21, 115, 111, 111, 113, 113, 113, 113, 40,
	110, 110, 110, 110, 112, 112, 112, 112, 184, 182,
	182, 189, 189, 189, 53, 53, 53, 53, 53, 54,
	54, 54, 181, 181, 181, 181, 190, 190, 190, 190,
	190, 190, 55, 55, 55, 188, 188, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 183, 183, 228, 228, 230, 230, 8, 8, 56,
	56, 57, 57, 118, 118, 118, 118, 117, 199, 199,
	200, 200, 200, 201, 201, 201, 201, 201, 201, 201,
	197, 197, 198, 195, 195, 196, 196, 196, 196, 234,
	234, 116, 116, 60, 60, 204, 204, 204, 204, 202,
	202, 202, 202, 202, 205, 203, 206, 206, 206, 206,
	206, 146, 146, 146, 24, 7, 7, 100, 100, 64,
	64, 150, 150, 150, 65, 65, 151, 47, 47, 33,
	33, 33, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 101, 101, 102, 102, 16, 20, 23, 23, 23,
	23, 23, 236, 236, 44, 44, 44, 44, 45, 45,
	114, 114, 114, 114, 114, 39, 6, 6, 38, 38,
	14, 14, 14, 14, 14, 50, 50, 107, 107, 107,
	109, 109, 108, 108, 108, 87, 87, 25, 78, 78,
	79, 79, 157, 80, 80, 19, 19, 28, 28, 26,
	26, 26, 26, 26, 26, 27, 27, 29, 29, 29,
	29, 29, 29, 29, 212, 212, 212, 214, 214, 211,
	15, 15, 15, 15, 213, 213, 235, 235, 88, 88,
	88, 59, 58, 58, 62, 62, 61, 63, 63, 149,
	85, 85, 85, 85, 103, 104, 104, 105, 105, 106,
	106, 84, 84, 133, 133, 30, 30, 69, 69, 70,
	70, 124, 124, 125, 125, 123, 123, 123, 152, 152,
	152, 152, 153, 153, 153, 153, 153, 153, 147, 147,
	147, 147, 148, 148, 158, 158, 91, 91, 91, 91,
	89, 89, 90, 90, 154, 154, 154, 154, 86, 86,
	155, 155, 155, 119, 119, 161, 161, 161, 68, 68,
	68, 162, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 163, 163, 163, 163, 165, 165,
	165, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 166, 166, 173, 173, 174, 174,
	175, 176, 167, 167, 168, 168, 169, 170, 177, 177,
	177, 177, 179, 179, 171, 171, 171, 171, 171, 172,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 98, 98, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 207,
	207, 207, 207, 207, 207, 207, 209, 209, 210, 210,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 215, 215, 216, 216, 217,
	217, 218, 218, 220, 221, 221, 221, 222, 226, 226,
	219, 219, 223, 223, 223, 224, 224, 225, 225, 225,
	225, 225, 137, 137, 137, 138, 138, 139, 75, 75,
	135, 135, 134, 134, 134, 136, 136, 92, 178, 178,
	178, 178, 178, 178, 178, 93, 93, 99, 94, 94,
	95, 95, 95, 95, 95, 95, 130, 131, 96, 96,
	96, 132, 132, 140, 144, 144, 143, 142, 142, 141,
	141, 122, 122, 122, 122, 121, 120, 81, 81, 237,
	237, 145, 145, 82, 82, 83, 77, 77, 156, 156,
	156, 156, 71, 71, 52, 52, 72, 72, 48, 48,
	51, 49, 49, 49, 49, 66, 66, 67, 67, 46,
	46, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 180, 180, 180, 41, 41, 41, 42, 42,
	43, 43, 186, 186, 186, 187, 187, 187, 187, 185,
	185, 185, 185, 185, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 193, 193,
	193, 193, 193, 193, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 3, 6,
	3, 1, 3, 2, 1, 1, 1, 3, 3, 2,
	3, 3, 3, 3, 1, 3, 3, 2, 1, 1,
	3, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 0, 1, 1, 2, 2, 4,
	2, 4, 4, 4, 4, 3, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 2, 0, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 2, 0,
	3, 1, 2, 2, 1, 1, 2, 4, 2, 5,
	6, 7, 5, 3, 1, 4, 5, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 10, 13, 1, 0, 1,
	3, 3, 3, 5, 1, 3, 1, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 2, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 4, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 2, 2, 1, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -213, 84, 91, 106, 193,
	200, -26, -28, 208, -115, 209, 29, 217, 53, 87,
	195, 190, 237, 59, -212, -29, -27, 283, 258, 264,
	203, -30, 224, 251, 286, 224, 71, 117, 79, 121,
	245, 244, 71, 117, 224, -12, 283, -19, -5, -10,
	-4, -14, -25, -9, -11, 19, -231, 18, -232, -233,
	59, 84, 106, 203, 121, 79, 244, -231, -45, 200,
	-41, 4, -191, -193, 16, 17, 19, 28, 29, 34,
	38, 41, 52, 53, 54, 56, 58, 61, 62, 69,
	70, 71, 72, 74, 79, 83, 84, 86, 91, 96,
	97, 100, 102, 107, 112, 113, 118, 121, 129, 131,
	132, 137, 140, 143, 145, 146, 147, 148, 149, 151,
	152, 154, 156, 153, 159, 161, 162, 168, 171, 174,
	175, 178, 181, 182, 183, 185, 186, 190, 188, 189,
	191, 193, 195, 196, 198, 201, 202, 205, 206, 208,
	209, 211, 214, 216, 217, 220, 218, 223, 225, 226,
	233, 237, 238, 239, 240, 243, 244, 245, 248, 249,
	250, 254, 259, 260, 261, 262, 30, 31, 32, 33,
	35, 36, 39, 40, 44, 45, 46, 48, 73, 75,
	76, 90, 92, 98, 108, 110, 114, 115, 122, 123,
	124, 126, 135, 158, 160, 169, 173, 177, 179, 184,
	197, 204, 212, 213, 219, 221, 228, 229, 230, 234,
	235, 251, 252, -111, 140, 206, 70, 233, -112, -110,
	-184, 228, 149, -73, -41, 200, 4, 71, 52, 72,
	107, 117, 118, 132, 225, 228, 233, 18, 59, -236,
	233, 233, -236, -236, -44, 233, 231, -45, -235, 224,
	224, -100, 71, 242, -27, -29, -28, -61, -62, 241,
	125, 89, 167, -26, -28, -212, -214, 185, -211, -41,
	-214, -58, -59, 18, 81, 287, -154, -48, 165, -41,
	-83, 283, -3, -154, 114, -41, -51, 114, -48, 104,
	127, 127, -155, -154, -41, 114, -52, 114, -51, -74,
	114, -73, -160, -159, -187, 4, -191, -193, -192, 251,
	50, 60, 105, 120, 128, 130, 136, 138, 150, 170,
	172, 194, 210, 224, 164, 287, 164, -41, -111, 46,
	-111, -75, -126, -128, 274, 275, 280, 155, 263, -137,
	-48, -129, 9, 283, -140, -209, -28, 90, 24, -138,
	-139, 197, -41, 7, 8, 5, 6, -46, -163, -172,
	236, 93, 157, 42, -207, -208, 4, -191, -186, -164,
	-174, -168, -171, 126, 50, 64, 67, 65, 68, 207,
	246, 43, 92, 173, 177, 221, 234, 235, 114, 158,
	115, 48, 108, 135, 83, 31, 33, 35, 36, 44,
	45, 73, 75, 76, 98, 122, 123, 124, 160, 184,
	212, 219, 229, 230, 252, -192, -175, -176, -169, -170,
	-177, -113, -39, -40, 129, 181, 231, 268, 104, 262,
	-55, 5, 77, -76, 285, 104, -228, 164, 104, 104,
	104, -183, 104, 262, 129, 181, 224, -114, -39, -40,
	-114, 231, -45, -86, -154, -73, 114, 117, -41, 114,
	-61, -62, -85, -103, -104, 139, 163, -88, 18, 81,
	-88, -88, 38, 284, 284, 287, -214, -67, 283, -77,
	-156, -126, 276, -77, -83, 276, -48, 283, -81, -122,
	-121, -120, 281, 285, -82, -145, -126, 77, -35, 188,
	-34, 17, 19, 84, 249, 90, 188, 188, 90, 288,
	-155, -50, -48, -50, 208, -41, 25, 90, -37, 287,
	41, 191, 90, -37, 287, 90, 284, 287, -154, 114,
	-227, -72, 224, 71, -49, -41, 276, -233, -227, 25,
	287, 10, 49, 28, 274, 275, 276, 277, 99, 278,
	271, 272, 273, 270, 266, 267, 268, 55, 144, 199,
	12, 13, 14, 22, 166, 138, 263, 210, 128, 30,
	116, -126, -126, -126, -126, -126, 172, -28, -126, -75,
	-81, -28, -134, 281, 283, -81, 283, 5, 5, 283,
	-141, -126, -215, 259, 101, 283, 283, 283, 283, 283,
	283, 283, 283, 283, 283, 283, 283, 283, 283, 283,
	179, -179, 254, -179, -179, -165, 283, -165, -166, 283,
	-165, 260, 264, 283, 287, 287, 137, -54, 143, 154,
	112, -182, 77, -189, -181, -146, 9, 236, 93, 164,
	-188, 8, 275, -180, -187, 5, 7, 274, -182, 77,
	62, -190, 5, 4, -172, -146, 77, 140, 126, 285,
	-185, 4, -191, -193, -192, -194, 18, 20, 21, 22,
	23, 24, 25, 26, 27, 37, 42, 43, 47, 49,
	51, 57, 59, 63, 64, 65, 66, 67, 68, 77,
	78, 80, 81, 82, 85, 87, 89, 93, 94, 95,
	101, 103, 104, 106, 109, 111, 116, 117, 119, 125,
	127, 133, 134, 139, 141, 142, 155, 157, 163, 164,
	165, 166, 167, 176, 180, 187, 192, 203, 207, 215,
	222, 224, 227, 231, 232, 236, 241, 242, 246, 247,
	253, 255, 256, 257, 258, -184, -230, 101, -227, -184,
	-184, -184, -184, 137, -184, 287, 287, -45, -37, 287,
	283, 155, -42, 114, -41, -38, 86, 155, -85, -104,
	-103, -105, -126, 18, -126, -128, -27, -27, -27, -63,
	-149, -126, -211, 25, -66, -41, -69, 287, 104, 25,
	4, -69, -48, -122, -126, -185, 276, 287, 284, 287,
	231, -101, 57, 51, -117, 114, 51, -195, -41, 57,
	-196, 47, 242, 180, 103, -101, 57, -101, 57, 57,
	-154, 231, 231, -51, -41, -119, 256, -107, -19, 283,
	77, 25, -107, -78, -79, -157, -80, -48, 283, -41,
	-41, -51, -52, -73, -74, -12, -159, 90, 231, 287,
	-72, -66, -121, -120, 104, 233, -126, -161, -162, -164,
	-173, -167, -171, -172, 34, 40, 39, 226, 204, 213,
	32, 122, 123, 124, 212, 31, 184, 98, 83, 76,
	75, 160, 36, 35, -175, -176, -169, -170, 73, 229,
	230, 33, 45, 44, 252, 219, -73, 228, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	138, 210, 30, 116, 231, 157, 155, 236, 93, 243,
	81, 161, -237, 222, 27, -132, -28, 283, -137, 197,
	283, 284, 287, -75, -136, 282, -134, -75, 284, 284,
	-75, 253, 18, 81, 276, -97, 261, 147, 74, 113,
	146, -98, 202, 7, -144, -143, 255, -216, 96, 109,
	283, 284, 284, -126, -92, -178, 4, 261, 147, 74,
	113, 146, 202, -93, -126, -94, -127, -128, 274, 275,
	280, 283, 197, -95, -126, -75, -126, 37, 134, 232,
	-96, -126, 104, -75, -126, -126, -126, -75, -75, -75,
	283, 7, 7, 228, 228, 7, -40, -39, -53, 183,
	214, 189, 205, 287, 8, 7, 7, 5, -185, -229,
	-41, -40, -39, -154, -56, -57, -118, -117, -197, -198,
	-195, 117, 242, 94, 90, 164, 155, 268, 90, -106,
	197, 198, 287, -33, 26, 80, 283, 287, 284, -119,
	-156, -70, -152, -154, -28, -153, 283, -185, -119, 284,
	282, 291, -145, -34, -48, -41, -41, 155, -117, 114,
	-161, -41, 283, 283, 131, 131, -41, -41, 114, -41,
	114, -41, -41, -35, 188, -41, -41, 188, -87, 192,
	-126, -87, -109, 164, -71, -48, 251, -41, 192, -69,
	287, 268, -71, -37, -37, -154, -229, -49, -229, -39,
	-68, 24, -97, 283, 262, -126, 231, -237, 222, -132,
	-126, 157, 236, 93, 243, 81, 161, 104, 283, -127,
	-127, -75, 283, -75, -126, 282, 282, 287, 284, -62,
	287, -61, -126, -75, -75, 284, 231, 231, 231, 231,
	283, 284, -142, -143, 85, -126, -221, 171, 283, 283,
	-126, 25, 284, 104, 284, -99, 176, 284, 10, 274,
	275, 276, 277, 99, 278, 271, 272, 273, 270, 266,
	267, 268, 55, 144, 199, 12, 13, 14, 128, 116,
	-127, -127, -127, -75, 283, 284, -130, -131, 104, 101,
	25, -96, -96, -96, 284, 104, -75, 287, 287, 287,
	284, 284, 284, 7, 284, 287, 284, 262, 262, 284,
	240, 54, 183, -189, -97, 287, 284, 287, -42, 117,
	-42, -73, -48, 90, 5, -41, -149, -15, -19, -14,
	-25, -9, -41, -84, 109, 287, 60, -91, 130, 150,
	105, 136, 194, 120, -123, 288, -148, -147, 25, -41,
	-28, -153, -152, -84, -126, 231, 231, 90, 155, -199,
	-196, -126, -66, 283, 283, -32, 84, 208, -102, 90,
	-37, 90, -37, 231, -101, 57, 231, -77, 192, 56,
	284, 287, -77, -119, -79, -145, 284, 281, 281, 7,
	-126, -126, -127, -127, 104, 283, -126, -135, -161, 22,
	22, 284, -75, 284, 287, 284, -134, 284, 253, -62,
	-62, -62, 147, 113, 146, -98, 146, -98, -98, 7,
	5, 87, -126, 227, -222, -41, 283, 256, -61, 284,
	-161, -126, -130, -126, -161, -127, -127, -127, -127, -127,
	-127, -127, -127, -127, -127, -127, -127, -127, -127, -127,
	-127, -127, -127, -127, 81, 155, 161, -127, 287, -75,
	284, -131, -130, -126, -126, -161, 284, 284, 284, -75,
	-126, -126, -126, 284, 7, -41, -118, 283, -42, 283,
	283, 283, -41, -38, 284, -133, 111, 38, -152, 130,
	130, -152, -91, 130, -89, 170, -89, -89, -148, -185,
	289, -41, 283, 284, -133, 282, -41, -41, -117, 90,
	-200, 57, -201, 49, 155, 157, 242, 180, 47, 77,
	187, 284, 284, -66, -66, 155, 77, 155, 77, 70,
	238, -41, -41, -48, -41, -41, -41, -77, -108, 283,
	164, -19, -48, -87, 268, 282, 7, 7, 284, 22,
	22, -126, -135, 284, 287, -126, -126, 284, -126, 5,
	-126, 284, 284, 284, 284, -126, -226, -41, -126, 284,
	284, -131, 104, 81, 161, 283, -126, 284, 284, 287,
	284, 284, 284, -64, -150, -41, -210, 283, -207, -208,
	-46, 283, -65, -151, -41, -56, -64, 164, -217, 257,
	-126, -75, -152, -152, -90, 247, 164, 130, -152, -158,
	265, -125, -124, 102, 153, 283, -66, -147, -217, -117,
	-41, -73, 157, 131, 283, -127, -48, -116, -234, 58,
	220, 284, 284, 157, 157, -126, -161, -37, -37, 231,
	231, 82, -66, 57, -83, -28, 283, 282, 282, -126,
	-126, 284, -161, 284, -62, -219, 175, 284, -127, 104,
	283, -135, 284, -126, 284, 287, -47, -81, 49, -47,
	-126, 283, -64, 284, 287, 284, 284, -48, -218, -220,
	-41, -90, 283, -126, -152, 161, 287, 290, 268, -66,
	284, -201, -126, -43, 283, 283, 187, -36, 49, -41,
	-41, 244, 156, 284, -41, 284, -62, 38, -127, -135,
	284, 284, -116, -150, -33, -73, -33, 284, -75, 284,
	-151, -116, 283, 287, 25, -66, 223, -124, -185, 284,
	284, -204, 145, -41, -66, -48, -31, 247, -73, 208,
	-119, -223, 182, 198, -75, 284, -47, -62, -116, -64,
	-220, -222, 284, 228, -202, -205, -203, 164, 105, 174,
	211, 284, 284, -60, 283, -126, -78, 284, -224, -225,
	30, 239, 62, -126, -224, -33, 284, 284, 5, -203,
	164, -205, 164, 244, 79, -204, -66, -119, -225, 178,
	100, 197, 178, 100, -116, -206, 152, 191, 41, 208,
	-206, -202, 284, 22, 16, 157, 77, -225,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 335, 0, 0,
	0, 305, -2, 0, 101, 0, 263, 0, 263, 263,
	267, 0, 337, 228, 334, -2, 345, 0, 0, 0,
	343, 319, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 68, 69, 70,
	71, 72, 73, 74, 75, 0, 0, 84, 85, 86,
	88, 89, 90, 91, 92, 93, 94, 0, 256, 845,
	269, 755, 756, 757, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 97, 812, 849, 790, 861, 104, 114,
	0, 917, -2, 118, 62, 845, 147, 148, 0, 150,
	164, 0, 0, 0, 162, 0, 0, 159, 0, 274,
	262, 274, 259, 260, 261, 264, 0, 255, 0, 336,
	0, 0, 0, 227, -2, 315, 316, -2, 0, 340,
	340, 340, 0, 0, 316, 0, 324, 835, 327, 738,
	325, 0, 0, 342, 341, 0, 320, 404, 0, 728,
	365, 0, 2, 0, 897, 0, 0, 897, 0, 0,
	0, 0, 0, 410, 54, 897, 45, 897, 724, 45,
	897, 60, 0, 76, 78, 765, 766, 767, 768, 922,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 0, 0, 0, 0, 268, 98, 887,
	100, 102, 658, 496, 0, 0, 0, 0, 0, 0,
	577, 578, 579, 0, 581, 582, 583, 892, 0, 587,
	588, 911, 728, 741, 742, 743, 744, 0, 0, 0,
	749, 750, 751, 700, 626, 597, -2, -2, 739, 434,
	435, 436, 437, -2, 924, 601, 603, 605, 606, 607,
	608, 0, 893, 907, 908, 916, 920, 921, 897, 904,
	898, 888, 895, 903, 795, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 764, 458, 459, 464, 465,
	467, 103, 105, 106, 0, 0, 0, 0, 0, 0,
	117, 142, 143, 63, 0, 0, 166, 0, 0, 0,
	0, 155, 0, 156, 0, 158, 0, 257, 270, 271,
	258, 0, 266, 45, 408, 0, 897, 759, 279, 897,
	-2, 0, 311, 352, 353, 0, 0, 0, 338, 339,
	0, 0, 0, 307, 308, 0, 326, 0, 0, 368,
	716, 720, 721, 368, 366, 405, 406, 0, 729, 707,
	701, 702, 0, 0, 0, 713, 711, 712, 22, 252,
	24, 0, 252, 252, 0, 0, 0, 0, 0, 0,
	414, 0, 285, 0, 0, 411, 0, 0, 56, 0,
	43, 44, 0, 58, 0, 0, 335, 0, 0, 897,
	0, 81, 0, 791, 726, 731, 734, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 710,
	0, 500, 501, 502, 524, 525, 0, -2, 658, 0,
	584, 585, 586, 0, 0, -2, 0, 746, 493, 0,
	0, 699, 628, 0, 0, 0, 0, 0, 0, 0,
	679, 685, 0, 0, 0, 0, 0, 0, 0, 0,
	448, 461, 472, 469, 468, 450, 0, 449, 447, 0,
	451, 0, 0, 0, 0, 0, 0, 109, 129, 130,
	131, 110, 112, 119, 121, 122, 123, 132, 133, 134,
	135, 221, 0, 223, 145, 146, 752, 0, 111, 113,
	115, 116, 136, 137, 0, 139, 140, 141, 479, 0,
	64, 769, 770, 771, 772, 773, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 149, 151, 0, 163, 152,
	153, 154, 161, 157, 160, 0, 0, 265, 224, 0,
	170, 0, 0, 897, 758, 276, 0, 0, 314, 350,
	351, 354, 357, 358, 355, 496, 321, 322, 323, 346,
	347, 241, 328, 0, 0, 735, 414, 0, 0, 0,
	719, 414, 0, 708, 0, 705, 706, 0, 715, 0,
	0, 0, 0, 251, 26, 897, 0, 36, 0, 0,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 730, 296, 0, 296, 287, 0,
	0, 0, 283, 368, 298, 300, 301, 0, 0, 412,
	55, 725, 45, 61, 45, 67, 77, 0, 0, 0,
	82, 83, 732, 733, 0, 0, 659, 497, 420, 421,
	422, 423, 424, 493, 427, 428, 429, 430, 431, 432,
	433, 441, 442, 443, 444, 445, 446, 455, 0, 440,
	440, 440, 452, 453, 456, 457, 462, 463, 474, 475,
	477, 473, 473, 473, 470, 471, 498, 0, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, -2, -2,
	-2, 516, 517, 518, -2, -2, -2, 522, 523, -2,
	0, 0, 710, 0, 0, 530, 0, 533, 535, 537,
	0, 0, 0, 0, 709, 547, 691, 0, 532, 0,
	0, 580, 0, 0, 0, 664, 665, 0, -2, 589,
	345, 0, 0, 0, 0, 747, 480, 481, 482, 483,
	484, 485, 494, 0, 698, 694, 0, 636, 0, 0,
	0, 602, 604, 0, 0, 0, 668, 669, 670, 671,
	672, 673, 674, 0, 0, 0, 0, 549, 0, 0,
	0, 0, 911, 0, 658, 684, 0, 0, 0, 0,
	0, 658, 0, 690, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 108, 275, 0,
	126, 0, 128, 0, 222, 754, 753, 493, 65, 165,
	95, 272, 273, 409, 0, 169, 171, 173, 174, 175,
	176, 759, 0, 759, 0, 0, 0, 0, 0, 356,
	359, 360, 0, 349, 239, 240, 335, 0, 737, 362,
	717, 367, 369, 377, 393, 380, 0, 718, 362, 407,
	703, 0, 714, 25, 243, 0, 0, 0, 28, 897,
	179, 0, 0, 0, 0, 0, 254, 37, 897, 45,
	897, 45, 38, 23, 252, 242, 245, 0, 53, 0,
	413, 280, 281, 0, 0, 722, 289, 286, 0, 414,
	0, 0, 0, 57, 59, 0, 79, 727, 80, 99,
	415, 417, 425, 0, 0, -2, 0, 0, 0, 548,
	-2, 531, 534, 536, 538, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 659, 662, 663, 0, -2, 0,
	0, 344, 345, 345, 345, 595, 0, 0, 0, 0,
	0, 0, 0, 695, 0, 0, 596, 0, 0, 0,
	0, 0, 610, 0, 611, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	551, 552, 553, 0, 0, 613, 682, 683, 0, 0,
	0, 0, 0, 0, 618, 0, 689, 0, 0, 0,
	622, 623, 624, 0, 438, 0, 454, 476, 478, 466,
	124, 125, 127, 120, 138, 0, 167, 0, 0, 759,
	0, 0, 0, 0, 278, 279, 348, 0, 330, 331,
	332, 333, 736, 364, 0, 0, 0, 0, 0, 0,
	401, 401, 401, 399, 393, 0, 379, 392, 0, 391,
	-2, 380, 0, 364, 0, 0, 0, 0, 0, 177,
	193, 0, 0, 0, 0, 30, 0, 0, 0, 0,
	34, 0, 40, 0, 0, 0, 0, 295, 0, 294,
	0, 0, 284, 296, 299, 302, 0, 0, 0, 0,
	499, -2, 0, 0, 0, 0, -2, 0, 660, 0,
	0, 692, 0, 653, 0, -2, 666, 590, 0, 0,
	0, 0, 486, 487, 488, 489, 490, 491, 492, 0,
	748, 693, 697, 0, 634, 635, 639, 0, 0, 600,
	0, 667, 676, 677, 550, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, -2, -2, -2, 567, 568,
	569, -2, -2, -2, 0, 0, 0, 678, 0, 0,
	656, 680, 681, 686, 687, 0, 615, 616, 617, 688,
	0, 0, 0, 460, 0, 96, 172, 0, 0, 0,
	170, 0, 0, 277, 329, 630, 0, 0, 370, 0,
	0, 0, 0, 0, 396, 400, 397, 398, 395, 375,
	0, 389, 0, 382, 630, 704, 247, 249, 27, 0,
	178, 0, 181, 0, 0, 184, 185, 0, 0, 0,
	0, 195, 202, 0, 0, 0, 42, 0, 0, 253,
	0, 45, 45, 244, 0, 0, 246, 282, 0, 0,
	0, 288, 723, 297, 0, 418, 0, 0, 426, 0,
	0, -2, 0, 541, 0, -2, -2, 652, 659, 745,
	345, 591, 593, 594, 495, 696, 641, 638, 0, 625,
	609, 675, 0, 0, 0, 0, 659, 655, 614, 0,
	620, 621, 439, 0, 229, 238, 238, 0, 598, 599,
	0, 0, 0, 234, 236, 0, 0, 0, 317, 0,
	363, 361, 383, 0, 385, 0, 0, 0, 387, 378,
	0, 0, 373, 0, 372, 0, 0, 381, 318, 29,
	0, 182, 183, 186, 0, 188, 761, 196, 0, 199,
	200, 197, 0, 31, 32, 41, 47, 33, 39, 0,
	0, 0, 0, 0, 303, 304, 0, 419, 416, -2,
	-2, 542, 661, 654, 0, 345, 0, 627, -2, 0,
	0, 0, 657, 0, 202, 0, 241, 740, 0, 241,
	0, 0, 0, 192, 0, 168, 202, 0, 629, 631,
	0, 384, 0, 403, 386, 0, 0, 376, 0, 0,
	390, 180, 0, 208, 0, 0, 0, 49, 0, 248,
	250, 0, 291, 414, 293, 592, 644, 0, -2, 0,
	575, 619, 190, 230, 231, 237, 232, 238, 345, 202,
	235, 225, 0, 0, 0, 0, 0, 374, 371, 388,
	187, 213, 0, 0, 0, 204, 35, 0, 46, 0,
	292, 0, 0, 0, 640, 576, 241, 0, 191, 0,
	632, 633, 402, 0, 189, 209, 210, 0, 205, 206,
	207, 760, 201, 208, 0, 48, 414, 637, 642, 645,
	-2, 864, 788, 0, 643, 233, 590, 202, 394, 211,
	0, 212, 0, 0, 0, 213, 0, 290, 0, 647,
	648, 649, 650, 651, 226, 214, 0, 217, 218, 0,
	215, 198, 203, 0, 216, 219, 220, 646,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 272, 3, 278, 273, 3,
	283, 284, 276, 274, 287, 275, 285, 277, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 291, 286,
	266, 268, 267, 3, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 281, 3, 282, 271, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 289, 270, 290, 280,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 269, 57609, 279,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:686
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:692
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:698
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:728
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:738
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:802
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:811
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:857
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:861
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{ /* SKIP DOC */
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1028
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1087
		{ /* SKIP DOC */
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[3].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			unimplemented()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			unimplemented()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = Low
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = Normal
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = High
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1265
		{
			unimplemented()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1267
		{
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = []string(nil)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{ /* unimplemented */
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1549
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = []string(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = []string(nil)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1599
		{
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			unimplemented()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1609
		{
			unimplemented()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			unimplemented()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			unimplemented()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1612
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = true
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = false
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1712
		{
			sqlVAL.union.val = Ascending
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = Descending
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 242:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = true
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = false
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1775
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.str = ""
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.str = ""
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1888
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1912
		{
			unimplementedWithIssue(6637)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1919
		{
			unimplementedWithIssue(6637)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1965
		{
			unimplemented()
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = []string(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			unimplemented()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			unimplemented()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			unimplemented()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2220
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2232
		{
			unimplemented()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = true
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = false
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = false
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = true
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2360
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2459
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{ /* SKIP DOC */
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			unimplemented()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.str = astFullJoin
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.str = astLeftJoin
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2589
		{
			sqlVAL.str = astRightJoin
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.str = astInnerJoin
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2599
		{
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			unimplementedWithIssue(2115)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2691
		{
			unimplementedWithIssue(2115)
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			unimplementedWithIssue(2115)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2695
		{
			unimplementedWithIssue(2115)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2696
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2704
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2760
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = nil
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2904
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2944
		{
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2981
		{
			unimplemented()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2983
		{
			unimplemented()
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2984
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2985
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2992
		{
			unimplemented()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3019
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3020
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3403
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3404
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3440
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3445
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3465
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3486
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3530
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3531
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3535
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3539
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3543
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3556
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3568
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3580
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3582
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3586
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3592
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3594
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3595
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3922
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3923
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4079
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4115
		{
			unimplemented()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = DNull
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
