// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:38

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:267
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const END = 57427
const ESCAPE = 57428
const EXCEPT = 57429
const EXISTS = 57430
const EXPLAIN = 57431
const EXTRACT = 57432
const FALSE = 57433
const FETCH = 57434
const FILTER = 57435
const FIRST = 57436
const FLOAT = 57437
const FOLLOWING = 57438
const FOR = 57439
const FORCE_INDEX = 57440
const FOREIGN = 57441
const FROM = 57442
const FULL = 57443
const GRANT = 57444
const GRANTS = 57445
const GREATEST = 57446
const GROUP = 57447
const GROUPING = 57448
const HAVING = 57449
const HIGH = 57450
const HOUR = 57451
const IF = 57452
const IFNULL = 57453
const IN = 57454
const INDEX = 57455
const INDEXES = 57456
const INITIALLY = 57457
const INNER = 57458
const INSERT = 57459
const INT = 57460
const INT64 = 57461
const INTEGER = 57462
const INTERSECT = 57463
const INTERVAL = 57464
const INTO = 57465
const IS = 57466
const ISOLATION = 57467
const JOIN = 57468
const KEY = 57469
const KEYS = 57470
const LATERAL = 57471
const LEADING = 57472
const LEAST = 57473
const LEFT = 57474
const LEVEL = 57475
const LIKE = 57476
const LIMIT = 57477
const LOCAL = 57478
const LOCALTIME = 57479
const LOCALTIMESTAMP = 57480
const LOW = 57481
const LSHIFT = 57482
const MATCH = 57483
const MINUTE = 57484
const MONTH = 57485
const NAME = 57486
const NAMES = 57487
const NATURAL = 57488
const NEXT = 57489
const NO = 57490
const NO_INDEX_JOIN = 57491
const NORMAL = 57492
const NOT = 57493
const NOTHING = 57494
const NULL = 57495
const NULLIF = 57496
const NULLS = 57497
const NUMERIC = 57498
const OF = 57499
const OFF = 57500
const OFFSET = 57501
const ON = 57502
const ONLY = 57503
const OR = 57504
const ORDER = 57505
const ORDINALITY = 57506
const OUT = 57507
const OUTER = 57508
const OVER = 57509
const OVERLAPS = 57510
const OVERLAY = 57511
const PARTIAL = 57512
const PARTITION = 57513
const PLACING = 57514
const POSITION = 57515
const PRECEDING = 57516
const PRECISION = 57517
const PRIMARY = 57518
const PRIORITY = 57519
const RANGE = 57520
const READ = 57521
const REAL = 57522
const RECURSIVE = 57523
const REF = 57524
const REFERENCES = 57525
const RENAME = 57526
const REPEATABLE = 57527
const RELEASE = 57528
const RESTRICT = 57529
const RETURNING = 57530
const REVOKE = 57531
const RIGHT = 57532
const ROLLBACK = 57533
const ROLLUP = 57534
const ROW = 57535
const ROWS = 57536
const RSHIFT = 57537
const SAVEPOINT = 57538
const SEARCH = 57539
const SECOND = 57540
const SELECT = 57541
const SERIALIZABLE = 57542
const SESSION = 57543
const SESSION_USER = 57544
const SET = 57545
const SHOW = 57546
const SIMILAR = 57547
const SIMPLE = 57548
const SMALLINT = 57549
const SNAPSHOT = 57550
const SOME = 57551
const SQL = 57552
const START = 57553
const STRICT = 57554
const STRING = 57555
const STORING = 57556
const SUBSTRING = 57557
const SYMMETRIC = 57558
const TABLE = 57559
const TABLES = 57560
const TEXT = 57561
const THEN = 57562
const TIME = 57563
const TIMESTAMP = 57564
const TIMESTAMPTZ = 57565
const TO = 57566
const TRAILING = 57567
const TRANSACTION = 57568
const TREAT = 57569
const TRIM = 57570
const TRUE = 57571
const TRUNCATE = 57572
const TYPE = 57573
const UNBOUNDED = 57574
const UNCOMMITTED = 57575
const UNION = 57576
const UNIQUE = 57577
const UNKNOWN = 57578
const UPDATE = 57579
const UPSERT = 57580
const USER = 57581
const USING = 57582
const VALID = 57583
const VALIDATE = 57584
const VALUE = 57585
const VALUES = 57586
const VARCHAR = 57587
const VARIADIC = 57588
const VARYING = 57589
const WHEN = 57590
const WHERE = 57591
const WINDOW = 57592
const WITH = 57593
const WITHIN = 57594
const WITHOUT = 57595
const YEAR = 57596
const ZONE = 57597
const NOT_LA = 57598
const WITH_LA = 57599
const POSTFIXOP = 57600
const UMINUS = 57601

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4359

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	278, 21,
	-2, 320,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 291,
	160, 291,
	188, 291,
	276, 291,
	278, 291,
	-2, 301,
	-1, 44,
	1, 294,
	160, 294,
	188, 294,
	276, 294,
	278, 294,
	-2, 300,
	-1, 53,
	1, 21,
	278, 21,
	-2, 320,
	-1, 240,
	1, 138,
	278, 138,
	-2, 792,
	-1, 272,
	135, 330,
	159, 330,
	-2, 297,
	-1, 275,
	135, 329,
	159, 329,
	-2, 295,
	-1, 387,
	135, 329,
	159, 329,
	-2, 298,
	-1, 443,
	275, 737,
	-2, 732,
	-1, 444,
	275, 738,
	-2, 733,
	-1, 450,
	5, 458,
	275, 458,
	-2, 874,
	-1, 472,
	5, 425,
	-2, 851,
	-1, 473,
	5, 453,
	275, 453,
	-2, 852,
	-1, 474,
	5, 433,
	-2, 853,
	-1, 475,
	5, 432,
	-2, 854,
	-1, 476,
	5, 453,
	275, 453,
	-2, 857,
	-1, 477,
	5, 453,
	275, 453,
	-2, 858,
	-1, 478,
	5, 454,
	-2, 861,
	-1, 479,
	5, 420,
	-2, 862,
	-1, 480,
	5, 420,
	-2, 863,
	-1, 481,
	5, 435,
	-2, 866,
	-1, 482,
	5, 421,
	-2, 871,
	-1, 483,
	5, 422,
	-2, 872,
	-1, 484,
	5, 423,
	-2, 873,
	-1, 485,
	5, 420,
	-2, 877,
	-1, 486,
	5, 426,
	-2, 882,
	-1, 487,
	5, 424,
	-2, 884,
	-1, 488,
	5, 451,
	275, 451,
	-2, 885,
	-1, 489,
	5, 455,
	-2, 888,
	-1, 490,
	5, 456,
	-2, 889,
	-1, 491,
	5, 450,
	275, 450,
	-2, 893,
	-1, 751,
	87, 301,
	121, 301,
	135, 301,
	159, 301,
	163, 301,
	234, 301,
	-2, 560,
	-1, 759,
	275, 717,
	-2, 706,
	-1, 956,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 491,
	-1, 957,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 492,
	-1, 958,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 493,
	-1, 962,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 497,
	-1, 963,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 498,
	-1, 964,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 499,
	-1, 967,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 504,
	-1, 998,
	168, 630,
	-2, 633,
	-1, 1152,
	87, 301,
	121, 301,
	135, 301,
	159, 301,
	163, 301,
	234, 301,
	-2, 378,
	-1, 1160,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 505,
	-1, 1165,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 506,
	-1, 1184,
	168, 629,
	-2, 632,
	-1, 1328,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 507,
	-1, 1333,
	124, 0,
	-2, 517,
	-1, 1342,
	168, 631,
	-2, 634,
	-1, 1382,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 541,
	-1, 1383,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 542,
	-1, 1384,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 543,
	-1, 1388,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 547,
	-1, 1389,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 548,
	-1, 1390,
	12, 0,
	13, 0,
	14, 0,
	258, 0,
	259, 0,
	260, 0,
	-2, 549,
	-1, 1488,
	124, 0,
	-2, 518,
	-1, 1492,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 521,
	-1, 1493,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 523,
	-1, 1575,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 522,
	-1, 1576,
	30, 0,
	112, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 524,
	-1, 1584,
	124, 0,
	-2, 550,
	-1, 1623,
	124, 0,
	-2, 551,
	-1, 1668,
	30, 0,
	134, 0,
	205, 0,
	256, 0,
	-2, 850,
}

const sqlNprod = 985
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 19981

var sqlAct = [...]int{

	995, 1667, 1650, 831, 1688, 1651, 1628, 1652, 1666, 839,
	1529, 1592, 1562, 1362, 1420, 1551, 442, 441, 1476, 1452,
	1453, 1464, 895, 1470, 434, 533, 1334, 1242, 276, 298,
	31, 588, 1149, 504, 241, 1305, 1241, 754, 879, 904,
	1095, 1187, 1011, 1148, 756, 881, 882, 87, 1314, 1139,
	689, 14, 406, 510, 983, 816, 494, 980, 840, 1015,
	20, 1135, 789, 10, 785, 1005, 907, 1050, 705, 283,
	43, 6, 561, 375, 1100, 874, 513, 281, 807, 66,
	711, 515, 546, 416, 407, 376, 543, 275, 68, 64,
	321, 67, 505, 317, 572, 905, 281, 43, 319, 69,
	506, 884, 492, 286, 44, 314, 390, 389, 82, 391,
	238, 563, 73, 325, 45, 559, 542, 833, 284, 310,
	280, 316, 1568, 43, 832, 1569, 280, 1008, 535, 535,
	1664, 394, 526, 1550, 1180, 1658, 1657, 836, 899, 899,
	1649, 1644, 1625, 1491, 899, 1491, 1182, 294, 273, 265,
	301, 1183, 1619, 1147, 1106, 899, 311, 524, 272, 1611,
	322, 1335, 1550, 1009, 1614, 713, 1602, 288, 326, 899,
	1577, 1572, 1559, 1491, 899, 1550, 1549, 49, 304, 1550,
	714, 712, 732, 733, 734, 1534, 1533, 1514, 899, 899,
	1180, 1494, 735, 713, 1180, 51, 1010, 1007, 716, 1490,
	741, 1430, 1491, 436, 899, 1338, 1296, 1291, 1180, 1292,
	1292, 1259, 493, 1257, 1260, 1395, 1180, 1256, 715, 1341,
	1180, 1053, 52, 1255, 729, 1184, 1180, 709, 1180, 47,
	900, 804, 1181, 899, 803, 48, 1186, 1180, 540, 1119,
	1553, 541, 1180, 805, 49, 1137, 1121, 899, 854, 538,
	991, 894, 1012, 46, 507, 868, 402, 401, 508, 683,
	49, 682, 51, 553, 552, 342, 293, 53, 508, 1214,
	507, 1230, 1231, 1232, 508, 536, 536, 587, 51, 361,
	49, 1487, 742, 1665, 1663, 1620, 1558, 1519, 1515, 52,
	408, 408, 1507, 1506, 740, 1501, 47, 444, 51, 1500,
	511, 388, 48, 382, 737, 52, 1499, 1498, 1006, 349,
	730, 1485, 47, 1227, 387, 1410, 449, 496, 48, 1405,
	65, 350, 1404, 499, 1403, 52, 1345, 1323, 86, 1158,
	1123, 86, 736, 1304, 1447, 503, 835, 988, 86, 1263,
	1261, 1483, 1249, 498, 1106, 86, 86, 1240, 1213, 86,
	1210, 1208, 86, 86, 86, 1197, 46, 1593, 86, 86,
	86, 86, 381, 324, 1214, 731, 1191, 534, 686, 757,
	1120, 1066, 712, 379, 1022, 739, 1021, 762, 401, 400,
	1364, 86, 1613, 1233, 1594, 1586, 1565, 1556, 273, 1548,
	1526, 1512, 1479, 697, 699, 1460, 1332, 1322, 272, 1228,
	706, 325, 325, 311, 403, 1302, 685, 1301, 1299, 591,
	397, 398, 745, 746, 747, 748, 749, 1275, 1274, 989,
	1239, 752, 1205, 1204, 1196, 1177, 738, 525, 726, 727,
	728, 1173, 725, 722, 723, 724, 717, 718, 719, 720,
	721, 765, 528, 985, 1067, 1570, 790, 793, 714, 1446,
	1080, 281, 1079, 1068, 1229, 549, 326, 326, 1060, 1020,
	550, 898, 796, 495, 592, 507, 716, 759, 583, 508,
	576, 783, 782, 672, 781, 780, 676, 677, 678, 779,
	679, 675, 778, 777, 681, 1214, 715, 684, 776, 775,
	774, 773, 1080, 772, 1228, 1214, 693, 771, 695, 273,
	694, 770, 273, 273, 769, 760, 707, 758, 800, 701,
	46, 687, 702, 703, 299, 405, 1574, 1224, 1225, 1226,
	1573, 1223, 1220, 1221, 1222, 1215, 1216, 1217, 1218, 1219,
	1325, 86, 86, 1324, 500, 1451, 1214, 799, 1107, 374,
	801, 787, 788, 791, 795, 1262, 1159, 370, 794, 1229,
	355, 356, 714, 767, 1465, 832, 591, 1365, 1016, 786,
	582, 1102, 86, 810, 86, 1634, 86, 1677, 86, 1601,
	716, 1438, 860, 849, 319, 1200, 258, 259, 834, 797,
	834, 1115, 1542, 86, 516, 1541, 517, 1678, 1287, 325,
	715, 264, 66, 263, 86, 1267, 821, 823, 1266, 1195,
	516, 68, 517, 1194, 67, 86, 86, 86, 1482, 86,
	43, 592, 69, 1193, 1192, 1228, 826, 232, 813, 873,
	1215, 1216, 1217, 1218, 1219, 1161, 817, 862, 972, 853,
	851, 855, 852, 850, 417, 591, 322, 446, 861, 86,
	857, 86, 753, 848, 326, 829, 838, 763, 858, 828,
	518, 324, 324, 827, 1600, 714, 847, 378, 270, 590,
	86, 1063, 86, 86, 86, 86, 518, 86, 946, 982,
	1229, 86, 373, 716, 353, 809, 86, 267, 1026, 820,
	1636, 1286, 86, 529, 1531, 1012, 295, 1277, 809, 295,
	592, 306, 982, 715, 808, 295, 1646, 306, 1214, 729,
	86, 892, 893, 86, 717, 718, 719, 720, 721, 57,
	354, 1096, 1647, 408, 1354, 901, 61, 1685, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 1016,
	1222, 1215, 1216, 1217, 1218, 1219, 1677, 1029, 58, 55,
	945, 1215, 1216, 1217, 1218, 1219, 819, 877, 516, 62,
	517, 1114, 1654, 1094, 1595, 410, 522, 1091, 876, 521,
	1012, 934, 1023, 856, 1034, 986, 1044, 1046, 1051, 1054,
	1055, 1056, 878, 1030, 1116, 730, 1036, 352, 799, 784,
	1582, 591, 56, 799, 1217, 1218, 1219, 902, 351, 377,
	86, 1065, 996, 1214, 511, 268, 590, 1278, 371, 519,
	719, 720, 721, 535, 86, 818, 1031, 1028, 86, 1684,
	1008, 86, 86, 271, 518, 519, 750, 86, 1228, 86,
	86, 1655, 86, 1097, 987, 86, 86, 86, 1203, 324,
	731, 1532, 86, 86, 1315, 280, 592, 1227, 279, 1284,
	352, 345, 347, 1653, 1676, 1674, 1009, 1069, 1163, 1075,
	372, 1463, 806, 63, 1099, 888, 281, 1656, 60, 59,
	392, 934, 1032, 74, 1109, 364, 909, 343, 341, 1104,
	393, 981, 278, 1229, 1536, 590, 1535, 1070, 1170, 1010,
	1007, 1524, 970, 79, 393, 706, 54, 1683, 75, 1168,
	1269, 295, 1074, 1090, 889, 692, 688, 725, 722, 723,
	724, 717, 718, 719, 720, 721, 325, 76, 915, 1108,
	1105, 1510, 1124, 1391, 280, 514, 1350, 933, 1027, 1110,
	1691, 501, 78, 1228, 1113, 1112, 1122, 1111, 1118, 281,
	1437, 1117, 295, 527, 527, 1012, 1698, 1436, 1154, 392,
	1130, 1220, 1221, 1222, 1215, 1216, 1217, 1218, 1219, 1132,
	536, 1166, 1131, 1128, 1434, 1171, 1629, 1138, 43, 1160,
	1133, 326, 86, 1165, 971, 1153, 1077, 1351, 680, 992,
	997, 1157, 1000, 519, 86, 86, 554, 1525, 1229, 351,
	1082, 791, 1179, 794, 1392, 277, 968, 1045, 1511, 1081,
	1393, 1006, 1188, 1057, 1058, 1059, 788, 787, 1473, 1142,
	1352, 86, 1310, 86, 77, 1309, 281, 1201, 915, 978,
	1477, 1206, 1435, 1697, 1145, 309, 1164, 933, 1162, 1185,
	976, 914, 936, 308, 1140, 278, 384, 1167, 1689, 1433,
	1143, 590, 752, 1306, 1169, 1136, 1019, 1585, 1051, 1051,
	1051, 1509, 80, 1243, 1141, 1223, 1220, 1221, 1222, 1215,
	1216, 1217, 1218, 1219, 1142, 1331, 1012, 969, 1472, 1265,
	864, 1478, 281, 1209, 1199, 1172, 866, 1690, 859, 1145,
	1272, 369, 581, 580, 367, 574, 569, 558, 366, 1313,
	974, 867, 973, 1692, 365, 1143, 979, 408, 1144, 865,
	362, 307, 1244, 768, 86, 86, 86, 674, 511, 1293,
	86, 1018, 1281, 86, 1283, 1246, 1247, 1248, 556, 86,
	86, 86, 86, 86, 1417, 86, 86, 1264, 1282, 557,
	1280, 914, 936, 86, 1271, 86, 1268, 798, 1126, 1289,
	890, 887, 86, 539, 537, 532, 523, 520, 1471, 1288,
	1359, 86, 86, 1144, 584, 295, 1543, 86, 306, 700,
	1327, 1295, 1328, 896, 843, 1294, 324, 1298, 975, 306,
	1285, 395, 306, 1333, 1300, 977, 1678, 1308, 935, 1319,
	1311, 1343, 578, 86, 291, 86, 86, 1343, 86, 1545,
	1318, 1312, 1316, 1317, 358, 591, 809, 86, 825, 809,
	586, 1360, 824, 1290, 86, 822, 86, 1176, 3, 1553,
	1369, 1178, 1597, 1371, 585, 1622, 897, 1347, 1348, 1349,
	1307, 714, 399, 714, 1189, 1190, 70, 1615, 1344, 837,
	934, 708, 551, 396, 257, 1214, 1353, 1355, 1356, 716,
	1156, 1695, 1696, 714, 1400, 1401, 292, 1366, 1370, 429,
	592, 870, 869, 1407, 1408, 1409, 81, 1484, 1426, 715,
	1421, 715, 300, 1238, 934, 359, 1411, 1357, 1419, 1398,
	1496, 934, 260, 261, 1251, 266, 1326, 1258, 935, 1399,
	84, 1064, 1062, 242, 1061, 1013, 71, 871, 1427, 1358,
	84, 872, 761, 1530, 72, 673, 363, 287, 287, 1503,
	1412, 297, 934, 1645, 297, 303, 297, 1466, 1273, 1426,
	297, 312, 297, 242, 1202, 1416, 1458, 1457, 1581, 1458,
	1457, 295, 1462, 1561, 1459, 1017, 74, 1459, 766, 25,
	1455, 422, 1488, 344, 1450, 1418, 1270, 1492, 1493, 1427,
	1461, 883, 1495, 1448, 575, 570, 79, 1497, 295, 1468,
	1469, 75, 911, 1474, 593, 1138, 1481, 579, 568, 1489,
	445, 368, 1502, 1422, 562, 1423, 1505, 571, 1025, 1368,
	76, 497, 447, 912, 448, 913, 1372, 915, 86, 792,
	435, 910, 320, 841, 1014, 78, 933, 1198, 1425, 934,
	764, 421, 427, 426, 993, 1428, 1513, 1142, 1508, 1339,
	418, 1475, 1146, 348, 86, 236, 237, 1402, 1098, 1445,
	891, 915, 1145, 696, 1422, 1279, 1423, 86, 915, 86,
	933, 86, 1140, 269, 86, 1211, 1043, 933, 1143, 1035,
	1033, 1024, 380, 509, 1520, 86, 842, 1537, 86, 1425,
	360, 1071, 1141, 903, 86, 590, 1428, 1424, 86, 915,
	86, 1155, 911, 404, 704, 290, 1523, 1555, 933, 289,
	880, 1396, 357, 555, 1521, 1539, 1540, 77, 863, 262,
	1101, 1554, 1406, 1566, 1596, 1214, 1276, 1458, 1457, 1101,
	1557, 1546, 1633, 242, 242, 1459, 1144, 1575, 1576, 50,
	914, 936, 1552, 1564, 19, 934, 17, 16, 1424, 15,
	13, 86, 1431, 1432, 12, 80, 11, 18, 1129, 9,
	8, 7, 24, 1567, 84, 23, 297, 1589, 242, 22,
	385, 5, 4, 1125, 914, 936, 1580, 1591, 2, 1467,
	1, 914, 936, 0, 0, 287, 915, 1590, 0, 1587,
	1037, 0, 0, 295, 0, 933, 297, 0, 934, 511,
	1480, 0, 0, 0, 0, 0, 0, 297, 297, 297,
	1604, 530, 914, 936, 86, 86, 86, 1458, 1457, 934,
	1612, 1605, 86, 86, 1606, 1459, 0, 1608, 86, 281,
	86, 0, 86, 86, 86, 86, 799, 1617, 1607, 0,
	86, 547, 0, 547, 0, 0, 0, 0, 0, 86,
	1538, 0, 1618, 0, 0, 1228, 1637, 86, 86, 0,
	1621, 86, 242, 1624, 547, 242, 242, 242, 591, 242,
	86, 86, 1640, 242, 0, 1638, 0, 1642, 84, 1643,
	1458, 1457, 1635, 1641, 691, 1660, 0, 935, 1459, 1639,
	0, 0, 915, 934, 1659, 0, 1661, 1671, 1671, 914,
	936, 933, 287, 1578, 0, 710, 1672, 0, 1675, 1673,
	1229, 1662, 86, 0, 0, 1680, 1679, 0, 0, 1671,
	1682, 935, 0, 592, 1544, 1681, 0, 0, 935, 0,
	0, 0, 1694, 1693, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 915, 1671, 1699, 0, 0,
	0, 0, 714, 0, 933, 0, 0, 1571, 0, 935,
	0, 0, 0, 0, 0, 86, 915, 86, 0, 86,
	716, 0, 0, 0, 0, 933, 86, 1223, 1220, 1221,
	1222, 1215, 1216, 1217, 1218, 1219, 0, 0, 0, 0,
	715, 843, 0, 0, 86, 0, 1037, 1037, 0, 0,
	0, 0, 297, 0, 0, 914, 936, 0, 0, 0,
	0, 86, 0, 86, 0, 0, 814, 1174, 1175, 0,
	297, 86, 295, 297, 830, 295, 0, 86, 1610, 297,
	0, 845, 846, 0, 297, 0, 0, 297, 242, 242,
	915, 0, 0, 1616, 547, 710, 935, 0, 0, 933,
	0, 0, 0, 0, 1037, 1037, 1037, 0, 914, 936,
	0, 911, 0, 423, 32, 0, 0, 0, 0, 0,
	0, 1630, 1631, 0, 0, 1235, 1236, 1237, 0, 914,
	936, 0, 730, 0, 0, 0, 0, 0, 0, 86,
	86, 32, 0, 86, 1648, 911, 0, 0, 0, 0,
	0, 86, 911, 0, 0, 0, 0, 274, 0, 0,
	282, 0, 0, 86, 0, 0, 0, 32, 590, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 911, 0, 0, 0, 731, 0, 0,
	0, 86, 86, 86, 0, 86, 0, 0, 0, 0,
	0, 0, 935, 914, 936, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 1441,
	0, 0, 0, 0, 875, 0, 0, 1449, 1037, 1037,
	0, 0, 0, 0, 86, 0, 297, 814, 0, 0,
	0, 0, 0, 0, 295, 295, 0, 0, 295, 1329,
	1330, 0, 0, 0, 0, 935, 0, 724, 717, 718,
	719, 720, 721, 297, 0, 242, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 0,
	1037, 0, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	0, 1394, 714, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 0, 0, 297, 1072, 1073, 0,
	715, 0, 814, 1528, 0, 1078, 0, 0, 0, 0,
	0, 1083, 1084, 1086, 1088, 1089, 911, 1092, 1093, 0,
	0, 0, 0, 0, 0, 297, 0, 1103, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 274, 1560, 0,
	0, 0, 0, 875, 547, 0, 0, 0, 295, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 691, 0, 242, 297, 0,
	1127, 0, 0, 0, 0, 0, 0, 0, 0, 1134,
	911, 0, 730, 0, 0, 0, 1151, 0, 297, 0,
	714, 0, 732, 733, 734, 0, 0, 0, 714, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 716, 0,
	741, 0, 0, 0, 0, 714, 716, 732, 733, 734,
	0, 0, 0, 1037, 0, 0, 0, 735, 715, 0,
	0, 0, 0, 716, 729, 741, 715, 731, 274, 0,
	0, 274, 274, 0, 1527, 0, 0, 0, 0, 0,
	0, 0, 0, 715, 911, 0, 0, 0, 0, 729,
	1632, 0, 0, 0, 751, 0, 0, 0, 755, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 0, 1230,
	1231, 1232, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 742, 0, 0, 0, 0, 0, 0, 0,
	0, 843, 0, 0, 740, 1037, 0, 0, 717, 718,
	719, 720, 721, 0, 737, 0, 0, 742, 0, 0,
	730, 1227, 0, 0, 0, 0, 1584, 0, 730, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 737,
	0, 0, 736, 0, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	710, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	32, 0, 32, 0, 714, 731, 732, 733, 734, 0,
	0, 1037, 0, 731, 32, 739, 297, 0, 0, 0,
	0, 1233, 716, 714, 741, 732, 733, 734, 0, 1297,
	731, 814, 1623, 691, 0, 735, 1303, 1228, 0, 0,
	739, 716, 715, 741, 0, 0, 0, 297, 729, 0,
	297, 0, 0, 0, 0, 0, 1151, 0, 0, 0,
	1321, 715, 1151, 0, 0, 0, 738, 729, 726, 727,
	728, 0, 725, 722, 723, 724, 717, 718, 719, 720,
	721, 722, 723, 724, 717, 718, 719, 720, 721, 1516,
	0, 738, 1229, 726, 727, 728, 0, 725, 722, 723,
	724, 717, 718, 719, 720, 721, 742, 0, 714, 0,
	0, 0, 0, 1363, 1254, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 742, 716, 0, 737, 0,
	0, 0, 0, 0, 730, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 715, 737, 0, 0,
	0, 0, 0, 730, 0, 1224, 1225, 1226, 0, 1223,
	1220, 1221, 1222, 1215, 1216, 1217, 1218, 1219, 0, 0,
	0, 0, 0, 0, 0, 736, 1414, 1415, 814, 0,
	0, 0, 0, 0, 710, 710, 0, 906, 0, 731,
	1439, 0, 1440, 0, 297, 1442, 1443, 1444, 0, 739,
	0, 244, 297, 0, 0, 0, 0, 0, 731, 1454,
	0, 814, 1454, 0, 0, 255, 984, 0, 739, 297,
	297, 0, 0, 297, 0, 0, 0, 0, 0, 0,
	0, 0, 710, 1151, 0, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 246, 0,
	738, 0, 726, 727, 728, 256, 725, 722, 723, 724,
	717, 718, 719, 720, 721, 0, 0, 245, 247, 738,
	0, 726, 727, 728, 1504, 725, 722, 723, 724, 717,
	718, 719, 720, 721, 714, 0, 732, 733, 734, 0,
	0, 0, 1253, 731, 0, 0, 735, 0, 0, 0,
	248, 0, 716, 0, 741, 0, 0, 0, 0, 282,
	249, 250, 0, 0, 714, 0, 732, 733, 734, 0,
	0, 0, 715, 0, 0, 251, 735, 814, 729, 1522,
	0, 242, 716, 0, 741, 0, 0, 0, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 0, 0, 0, 710, 0, 729, 0,
	725, 722, 723, 724, 717, 718, 719, 720, 721, 0,
	1454, 0, 32, 297, 0, 1563, 0, 0, 0, 0,
	0, 0, 1152, 297, 0, 0, 742, 0, 0, 710,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 730, 252, 742, 21, 253, 0,
	0, 0, 0, 254, 0, 0, 0, 35, 740, 0,
	0, 0, 0, 0, 0, 0, 736, 0, 737, 0,
	0, 0, 0, 0, 730, 984, 0, 0, 0, 0,
	37, 1598, 1599, 0, 0, 1603, 42, 0, 0, 751,
	1454, 0, 0, 242, 0, 0, 736, 0, 0, 731,
	0, 0, 0, 0, 0, 710, 0, 0, 0, 739,
	0, 26, 0, 38, 0, 0, 0, 27, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	28, 0, 0, 710, 710, 297, 0, 242, 0, 739,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	0, 0, 0, 1454, 1563, 0, 0, 0, 0, 0,
	738, 0, 726, 727, 728, 0, 725, 722, 723, 724,
	717, 718, 719, 720, 721, 0, 297, 0, 0, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 0,
	738, 0, 726, 727, 728, 0, 725, 722, 723, 724,
	717, 718, 719, 720, 721, 0, 0, 0, 0, 0,
	1627, 0, 0, 0, 40, 0, 0, 29, 0, 39,
	0, 0, 0, 0, 30, 0, 0, 49, 0, 0,
	0, 33, 34, 0, 0, 0, 0, 0, 0, 36,
	0, 906, 0, 0, 906, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 0, 0, 0, 0, 0, 0, 47,
	0, 0, 0, 85, 0, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 46, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 207,
	208, 0, 0, 119, 0, 32, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 906, 906, 125, 0, 906, 126, 0,
	127, 128, 129, 130, 131, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	296, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 49, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 51, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 327, 231, 0, 183, 0, 0, 0,
	47, 184, 185, 186, 187, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 908, 1547, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	589, 0, 0, 0, 0, 0, 0, 906, 0, 0,
	0, 0, 88, 89, 594, 90, 595, 596, 597, 598,
	599, 600, 601, 602, 91, 92, 188, 189, 190, 93,
	191, 192, 603, 94, 193, 194, 95, 604, 605, 195,
	196, 197, 606, 198, 607, 328, 608, 96, 97, 98,
	0, 99, 609, 100, 610, 329, 101, 102, 611, 612,
	613, 614, 615, 616, 103, 104, 105, 106, 199, 107,
	200, 201, 617, 618, 108, 619, 620, 621, 109, 110,
	622, 623, 751, 624, 202, 111, 203, 625, 626, 112,
	113, 204, 114, 627, 115, 628, 629, 330, 630, 116,
	205, 631, 206, 632, 117, 118, 207, 208, 633, 634,
	119, 635, 331, 120, 209, 210, 211, 636, 212, 637,
	332, 121, 333, 122, 123, 638, 639, 213, 334, 124,
	335, 640, 125, 641, 642, 126, 0, 127, 128, 129,
	130, 131, 336, 132, 133, 136, 134, 643, 135, 644,
	214, 137, 215, 138, 139, 645, 646, 647, 648, 649,
	140, 216, 337, 141, 338, 217, 142, 143, 650, 218,
	144, 219, 651, 145, 146, 147, 220, 148, 149, 652,
	151, 152, 150, 153, 653, 154, 339, 155, 156, 221,
	157, 0, 243, 158, 159, 654, 160, 161, 655, 162,
	163, 340, 164, 222, 165, 656, 166, 167, 169, 223,
	168, 224, 657, 658, 170, 171, 659, 225, 226, 227,
	660, 661, 172, 228, 229, 662, 173, 174, 175, 176,
	663, 664, 177, 178, 179, 665, 666, 180, 181, 182,
	230, 231, 667, 183, 668, 669, 670, 671, 184, 185,
	186, 187, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 589, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1320, 88, 89,
	594, 90, 595, 596, 597, 598, 599, 600, 601, 602,
	91, 92, 188, 189, 190, 93, 191, 192, 603, 94,
	193, 194, 95, 604, 605, 195, 196, 197, 606, 198,
	607, 328, 608, 96, 97, 98, 0, 99, 609, 100,
	610, 329, 101, 102, 611, 612, 613, 614, 615, 616,
	103, 104, 105, 106, 199, 107, 200, 201, 617, 618,
	108, 619, 620, 621, 109, 110, 622, 623, 0, 624,
	202, 111, 203, 625, 626, 112, 113, 204, 114, 627,
	115, 628, 629, 330, 630, 116, 205, 631, 206, 632,
	117, 118, 207, 208, 633, 634, 119, 635, 331, 120,
	209, 210, 211, 636, 212, 637, 332, 121, 333, 122,
	123, 638, 639, 213, 334, 124, 335, 640, 125, 641,
	642, 126, 0, 127, 128, 129, 130, 131, 336, 132,
	133, 136, 134, 643, 135, 644, 214, 137, 215, 138,
	139, 645, 646, 647, 648, 649, 140, 216, 337, 141,
	338, 217, 142, 143, 650, 218, 144, 219, 651, 145,
	146, 147, 220, 148, 149, 652, 151, 152, 150, 153,
	653, 154, 339, 155, 156, 221, 157, 0, 243, 158,
	159, 654, 160, 161, 655, 162, 163, 340, 164, 222,
	165, 656, 166, 167, 169, 223, 168, 224, 657, 658,
	170, 171, 659, 225, 226, 227, 660, 661, 172, 228,
	229, 662, 173, 174, 175, 176, 663, 664, 177, 178,
	179, 665, 666, 180, 181, 182, 230, 231, 667, 183,
	668, 669, 670, 671, 184, 185, 186, 187, 0, 589,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	802, 88, 89, 594, 90, 595, 596, 597, 598, 599,
	600, 601, 602, 91, 92, 188, 189, 190, 93, 191,
	192, 603, 94, 193, 194, 95, 604, 605, 195, 196,
	197, 606, 198, 607, 328, 608, 96, 97, 98, 0,
	99, 609, 100, 610, 329, 101, 102, 611, 612, 613,
	614, 615, 616, 103, 104, 105, 106, 199, 107, 200,
	201, 617, 618, 108, 619, 620, 621, 109, 110, 622,
	623, 0, 624, 202, 111, 203, 625, 626, 112, 113,
	204, 114, 627, 115, 628, 629, 330, 630, 116, 205,
	631, 206, 632, 117, 118, 207, 208, 633, 634, 119,
	635, 331, 120, 209, 210, 211, 636, 212, 637, 332,
	121, 333, 122, 123, 638, 639, 213, 334, 124, 335,
	640, 125, 641, 642, 126, 0, 127, 128, 129, 130,
	131, 336, 132, 133, 136, 134, 643, 135, 644, 214,
	137, 215, 138, 139, 645, 646, 647, 648, 649, 140,
	216, 337, 141, 338, 217, 142, 143, 650, 218, 144,
	219, 651, 145, 146, 147, 220, 148, 149, 652, 151,
	152, 150, 153, 653, 154, 339, 155, 156, 221, 157,
	0, 243, 158, 159, 654, 160, 161, 655, 162, 163,
	340, 164, 222, 165, 656, 166, 167, 169, 223, 168,
	224, 657, 658, 170, 171, 659, 225, 226, 227, 660,
	661, 172, 228, 229, 662, 173, 174, 175, 176, 663,
	664, 177, 178, 179, 665, 666, 180, 181, 182, 230,
	231, 667, 183, 668, 669, 670, 671, 184, 185, 186,
	187, 443, 432, 433, 430, 431, 419, 0, 0, 0,
	0, 0, 0, 88, 89, 1002, 90, 0, 0, 0,
	0, 425, 0, 0, 0, 91, 92, 188, 472, 473,
	93, 474, 475, 0, 94, 193, 194, 95, 440, 458,
	476, 477, 197, 0, 468, 0, 451, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 329, 101, 102, 0,
	452, 454, 0, 453, 455, 103, 104, 105, 106, 478,
	107, 479, 480, 0, 0, 108, 0, 1003, 0, 471,
	110, 0, 0, 0, 0, 424, 111, 459, 438, 0,
	112, 113, 481, 114, 0, 115, 0, 0, 330, 0,
	116, 469, 0, 206, 0, 117, 118, 465, 467, 0,
	0, 119, 0, 331, 120, 482, 483, 484, 0, 450,
	0, 332, 121, 333, 122, 123, 0, 0, 470, 334,
	124, 335, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 336, 132, 133, 136, 134, 414, 135,
	439, 466, 137, 485, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 337, 141, 338, 460, 142, 143, 0,
	461, 144, 219, 0, 145, 146, 147, 486, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 339, 155, 156,
	428, 157, 0, 243, 158, 159, 0, 160, 161, 456,
	162, 163, 340, 164, 487, 165, 0, 166, 167, 169,
	488, 168, 462, 0, 0, 170, 171, 0, 225, 489,
	490, 0, 0, 172, 463, 464, 437, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 457, 0, 180, 181,
	182, 230, 491, 1001, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 415, 0, 443, 432, 433, 430, 431,
	419, 0, 0, 411, 412, 1004, 0, 88, 89, 413,
	90, 0, 420, 999, 0, 425, 0, 0, 0, 91,
	92, 188, 472, 473, 93, 474, 475, 0, 94, 193,
	194, 95, 440, 458, 476, 477, 197, 0, 468, 0,
	451, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 452, 454, 0, 453, 455, 103,
	104, 105, 106, 478, 107, 479, 480, 512, 0, 108,
	0, 0, 0, 471, 110, 0, 0, 0, 0, 424,
	111, 459, 438, 0, 112, 113, 481, 114, 0, 115,
	0, 0, 330, 0, 116, 469, 0, 206, 0, 117,
	118, 465, 467, 0, 0, 119, 0, 331, 120, 482,
	483, 484, 0, 450, 0, 332, 121, 333, 122, 123,
	0, 0, 470, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 414, 135, 439, 466, 137, 485, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 337, 141, 338,
	460, 142, 143, 0, 461, 144, 219, 0, 145, 146,
	147, 486, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 428, 157, 0, 243, 158, 159,
	49, 160, 161, 456, 162, 163, 340, 164, 487, 165,
	0, 166, 167, 169, 488, 168, 462, 0, 51, 170,
	171, 0, 225, 489, 490, 0, 0, 172, 463, 464,
	437, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	457, 0, 180, 181, 182, 327, 491, 0, 183, 0,
	0, 0, 47, 184, 185, 186, 187, 415, 48, 443,
	432, 433, 430, 431, 419, 0, 0, 411, 412, 0,
	0, 88, 89, 413, 90, 0, 420, 0, 0, 425,
	0, 0, 0, 91, 92, 188, 472, 473, 93, 474,
	475, 0, 94, 193, 194, 95, 440, 458, 476, 477,
	197, 0, 468, 0, 451, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 329, 101, 102, 0, 452, 454,
	0, 453, 455, 103, 104, 105, 106, 478, 107, 479,
	480, 0, 0, 108, 0, 0, 0, 471, 110, 0,
	0, 0, 0, 424, 111, 459, 438, 0, 112, 113,
	481, 114, 0, 115, 0, 0, 330, 0, 116, 469,
	0, 206, 0, 117, 118, 465, 467, 0, 0, 119,
	0, 331, 120, 482, 483, 484, 0, 450, 0, 332,
	121, 333, 122, 123, 0, 0, 470, 334, 124, 335,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 336, 132, 133, 136, 134, 414, 135, 439, 466,
	137, 485, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 337, 141, 338, 460, 142, 143, 0, 461, 144,
	219, 0, 145, 146, 147, 486, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 339, 155, 156, 428, 157,
	0, 243, 158, 159, 49, 160, 161, 456, 162, 163,
	340, 164, 487, 165, 0, 166, 167, 169, 488, 168,
	462, 0, 51, 170, 171, 0, 225, 489, 490, 0,
	0, 172, 463, 464, 437, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 457, 0, 180, 181, 182, 327,
	491, 0, 183, 0, 0, 0, 47, 184, 185, 186,
	187, 415, 48, 443, 432, 433, 430, 431, 419, 0,
	0, 411, 412, 0, 0, 88, 89, 413, 90, 0,
	420, 0, 0, 425, 0, 0, 0, 91, 92, 188,
	472, 473, 93, 474, 475, 1047, 94, 193, 194, 95,
	440, 458, 476, 477, 197, 0, 468, 0, 451, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	102, 0, 452, 454, 0, 453, 455, 103, 104, 105,
	106, 478, 107, 479, 480, 0, 0, 108, 0, 0,
	0, 471, 110, 0, 0, 0, 0, 424, 111, 459,
	438, 0, 112, 113, 481, 114, 0, 115, 0, 1052,
	330, 0, 116, 469, 0, 206, 0, 117, 118, 465,
	467, 0, 0, 119, 0, 331, 120, 482, 483, 484,
	0, 450, 0, 332, 121, 333, 122, 123, 0, 1048,
	470, 334, 124, 335, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	414, 135, 439, 466, 137, 485, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 337, 141, 338, 460, 142,
	143, 0, 461, 144, 219, 0, 145, 146, 147, 486,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 428, 157, 0, 243, 158, 159, 0, 160,
	161, 456, 162, 163, 340, 164, 487, 165, 0, 166,
	167, 169, 488, 168, 462, 0, 0, 170, 171, 0,
	225, 489, 490, 0, 1049, 172, 463, 464, 437, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 457, 0,
	180, 181, 182, 230, 491, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 415, 0, 443, 432, 433,
	430, 431, 419, 0, 0, 411, 412, 0, 0, 88,
	89, 413, 90, 0, 420, 0, 0, 425, 0, 0,
	0, 91, 92, 188, 472, 473, 93, 474, 475, 0,
	94, 193, 194, 95, 440, 458, 476, 477, 197, 0,
	468, 0, 451, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 329, 101, 102, 0, 452, 454, 0, 453,
	455, 103, 104, 105, 106, 478, 107, 479, 480, 0,
	0, 108, 0, 0, 0, 471, 110, 0, 0, 0,
	0, 424, 111, 459, 438, 0, 112, 113, 481, 114,
	0, 115, 0, 0, 330, 0, 116, 469, 0, 206,
	0, 117, 118, 465, 467, 0, 0, 119, 0, 331,
	120, 482, 483, 484, 0, 450, 0, 332, 121, 333,
	122, 123, 0, 0, 470, 334, 124, 335, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 336,
	132, 133, 136, 134, 414, 135, 439, 466, 137, 485,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 337,
	141, 338, 460, 142, 143, 0, 461, 144, 219, 0,
	145, 146, 147, 486, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 339, 155, 156, 428, 157, 0, 243,
	158, 159, 0, 160, 161, 456, 162, 163, 340, 164,
	487, 165, 0, 166, 167, 169, 488, 168, 462, 0,
	0, 170, 171, 0, 225, 489, 490, 0, 0, 172,
	463, 464, 437, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 457, 0, 180, 181, 182, 230, 491, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 415,
	0, 443, 432, 433, 430, 431, 419, 0, 0, 411,
	412, 0, 0, 88, 89, 413, 90, 0, 420, 1397,
	0, 425, 0, 0, 0, 91, 92, 188, 472, 473,
	93, 474, 475, 0, 94, 193, 194, 95, 440, 458,
	476, 477, 197, 0, 468, 0, 451, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 329, 101, 102, 0,
	452, 454, 0, 453, 455, 103, 104, 105, 106, 478,
	107, 479, 480, 0, 0, 108, 0, 0, 0, 471,
	110, 0, 0, 0, 0, 424, 111, 459, 438, 0,
	112, 113, 481, 114, 0, 115, 0, 0, 330, 0,
	116, 469, 0, 206, 0, 117, 118, 465, 467, 0,
	0, 119, 0, 331, 120, 482, 483, 484, 0, 450,
	0, 332, 121, 333, 122, 123, 0, 0, 470, 334,
	124, 335, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 336, 132, 133, 136, 134, 414, 135,
	439, 466, 137, 485, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 337, 141, 338, 460, 142, 143, 0,
	461, 144, 219, 0, 145, 146, 147, 486, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 339, 155, 156,
	428, 157, 0, 243, 158, 159, 0, 160, 161, 456,
	162, 163, 340, 164, 487, 165, 0, 166, 167, 169,
	488, 168, 462, 0, 0, 170, 171, 0, 225, 489,
	490, 0, 0, 172, 463, 464, 437, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 457, 0, 180, 181,
	182, 230, 491, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 415, 0, 443, 432, 433, 430, 431,
	419, 0, 0, 411, 412, 0, 0, 88, 89, 413,
	90, 0, 420, 1340, 0, 425, 0, 0, 0, 91,
	92, 188, 472, 473, 93, 474, 475, 0, 94, 193,
	194, 95, 440, 458, 476, 477, 197, 0, 468, 0,
	451, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 452, 454, 0, 453, 455, 103,
	104, 105, 106, 478, 107, 479, 480, 0, 0, 108,
	0, 0, 0, 471, 110, 0, 0, 0, 0, 424,
	111, 459, 438, 0, 112, 113, 481, 114, 0, 115,
	0, 0, 330, 0, 116, 469, 0, 206, 0, 117,
	118, 465, 467, 0, 0, 119, 0, 331, 120, 482,
	483, 484, 0, 450, 0, 332, 121, 333, 122, 123,
	0, 0, 470, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 414, 135, 439, 466, 137, 485, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 337, 141, 338,
	460, 142, 143, 0, 461, 144, 219, 0, 145, 146,
	147, 486, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 428, 157, 0, 243, 158, 159,
	0, 160, 161, 456, 162, 163, 340, 164, 487, 165,
	0, 166, 167, 169, 488, 168, 462, 0, 0, 170,
	171, 0, 225, 489, 490, 0, 0, 172, 463, 464,
	437, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	457, 0, 180, 181, 182, 230, 491, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 415, 0, 443,
	432, 433, 430, 431, 419, 0, 0, 411, 412, 0,
	0, 88, 89, 413, 90, 0, 420, 998, 0, 425,
	0, 0, 0, 91, 92, 188, 472, 473, 93, 474,
	475, 0, 94, 193, 194, 95, 440, 458, 476, 477,
	197, 0, 468, 0, 451, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 329, 101, 102, 0, 452, 454,
	0, 453, 455, 103, 104, 105, 106, 478, 107, 479,
	480, 0, 0, 108, 0, 0, 0, 471, 110, 0,
	0, 0, 0, 424, 111, 459, 438, 0, 112, 113,
	481, 114, 0, 115, 0, 0, 330, 0, 116, 469,
	0, 206, 0, 117, 118, 465, 467, 0, 0, 119,
	0, 331, 120, 482, 483, 484, 0, 450, 0, 332,
	121, 333, 122, 123, 0, 0, 470, 334, 124, 335,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 336, 132, 133, 136, 134, 414, 135, 439, 466,
	137, 485, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 337, 141, 338, 460, 142, 143, 0, 461, 144,
	219, 0, 145, 146, 147, 486, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 339, 155, 156, 428, 157,
	0, 243, 158, 159, 0, 160, 161, 456, 162, 163,
	340, 164, 487, 165, 0, 166, 167, 169, 488, 168,
	462, 0, 0, 170, 171, 0, 225, 489, 490, 0,
	0, 172, 463, 464, 437, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 457, 0, 180, 181, 182, 230,
	491, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 415, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 411, 412, 0, 0, 0, 0, 413, 757, 994,
	420, 443, 432, 433, 430, 431, 419, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 425, 0, 0, 0, 91, 92, 188, 472, 473,
	93, 474, 475, 0, 94, 193, 194, 95, 440, 458,
	476, 477, 197, 0, 468, 0, 451, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 329, 101, 102, 0,
	452, 454, 0, 453, 455, 103, 104, 105, 106, 478,
	107, 479, 480, 0, 0, 108, 0, 0, 0, 471,
	110, 0, 0, 0, 0, 424, 111, 459, 438, 0,
	112, 113, 481, 114, 0, 115, 0, 0, 330, 0,
	116, 469, 0, 206, 0, 117, 118, 465, 467, 0,
	0, 119, 0, 331, 120, 482, 483, 484, 0, 450,
	0, 332, 121, 333, 122, 123, 0, 0, 470, 334,
	124, 335, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 336, 132, 133, 136, 134, 414, 135,
	439, 466, 137, 485, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 337, 141, 338, 460, 142, 143, 0,
	461, 144, 219, 0, 145, 146, 147, 486, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 339, 155, 156,
	428, 157, 0, 243, 158, 159, 0, 160, 161, 456,
	162, 163, 340, 164, 487, 165, 0, 166, 167, 169,
	488, 168, 462, 0, 0, 170, 171, 0, 225, 489,
	490, 0, 0, 172, 463, 464, 437, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 457, 0, 180, 181,
	182, 230, 491, 1346, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 415, 0, 443, 432, 433, 430, 431,
	419, 0, 0, 411, 412, 0, 0, 88, 89, 413,
	90, 0, 420, 0, 0, 425, 0, 0, 0, 91,
	92, 188, 472, 473, 93, 474, 475, 0, 94, 193,
	194, 95, 440, 458, 476, 477, 197, 0, 468, 0,
	451, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 452, 454, 0, 453, 455, 103,
	104, 105, 106, 478, 107, 479, 480, 512, 0, 108,
	0, 0, 0, 471, 110, 0, 0, 0, 0, 424,
	111, 459, 438, 0, 112, 113, 481, 114, 0, 115,
	0, 0, 330, 0, 116, 469, 0, 206, 0, 117,
	118, 465, 467, 0, 0, 119, 0, 331, 120, 482,
	483, 484, 0, 450, 0, 332, 121, 333, 122, 123,
	0, 0, 470, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 414, 135, 439, 466, 137, 485, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 337, 141, 338,
	460, 142, 143, 0, 461, 144, 219, 0, 145, 146,
	147, 486, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 428, 157, 0, 243, 158, 159,
	0, 160, 161, 456, 162, 163, 340, 164, 487, 165,
	0, 166, 167, 169, 488, 168, 462, 0, 0, 170,
	171, 0, 225, 489, 490, 0, 0, 172, 463, 464,
	437, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	457, 0, 180, 181, 182, 230, 491, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 415, 0, 443,
	432, 433, 430, 431, 419, 0, 0, 411, 412, 0,
	0, 88, 89, 413, 90, 0, 420, 0, 0, 425,
	0, 0, 0, 91, 92, 188, 472, 473, 93, 474,
	475, 0, 94, 193, 194, 95, 440, 458, 476, 477,
	197, 0, 468, 0, 451, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 329, 101, 102, 0, 452, 454,
	0, 453, 455, 103, 104, 105, 106, 478, 107, 479,
	480, 0, 0, 108, 0, 0, 0, 471, 110, 0,
	0, 0, 0, 424, 111, 459, 438, 0, 112, 113,
	481, 114, 0, 115, 0, 0, 330, 0, 116, 469,
	0, 206, 0, 117, 118, 465, 467, 0, 0, 119,
	0, 331, 120, 482, 483, 484, 0, 450, 0, 332,
	121, 333, 122, 123, 0, 0, 470, 334, 124, 335,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 336, 132, 133, 136, 134, 414, 135, 439, 466,
	137, 485, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 337, 141, 338, 460, 142, 143, 0, 461, 144,
	219, 0, 145, 146, 147, 486, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 339, 155, 156, 428, 157,
	0, 243, 158, 159, 0, 160, 161, 456, 162, 163,
	340, 164, 487, 165, 0, 166, 167, 169, 488, 168,
	462, 0, 0, 170, 171, 0, 225, 489, 490, 0,
	0, 172, 463, 464, 437, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 457, 0, 180, 181, 182, 230,
	491, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 415, 0, 443, 432, 433, 430, 431, 419, 0,
	0, 411, 412, 409, 0, 88, 89, 413, 90, 0,
	420, 0, 0, 425, 0, 0, 0, 91, 92, 188,
	472, 473, 93, 474, 475, 0, 94, 193, 194, 95,
	440, 458, 476, 477, 197, 0, 468, 0, 451, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	102, 0, 452, 454, 0, 453, 455, 103, 104, 105,
	106, 478, 107, 479, 480, 0, 0, 108, 0, 0,
	0, 471, 110, 0, 0, 0, 0, 424, 111, 459,
	438, 0, 112, 113, 481, 114, 0, 115, 0, 1052,
	330, 0, 116, 469, 0, 206, 0, 117, 118, 465,
	467, 0, 0, 119, 0, 331, 120, 482, 483, 484,
	0, 450, 0, 332, 121, 333, 122, 123, 0, 0,
	470, 334, 124, 335, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	414, 135, 439, 466, 137, 485, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 337, 141, 338, 460, 142,
	143, 0, 461, 144, 219, 0, 145, 146, 147, 486,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 428, 157, 0, 243, 158, 159, 0, 160,
	161, 456, 162, 163, 340, 164, 487, 165, 0, 166,
	167, 169, 488, 168, 462, 0, 0, 170, 171, 0,
	225, 489, 490, 0, 0, 172, 463, 464, 437, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 457, 0,
	180, 181, 182, 230, 491, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 415, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 411, 412, 0, 0, 0,
	0, 413, 0, 0, 420, 443, 432, 433, 430, 431,
	419, 0, 0, 0, 0, 0, 0, 88, 89, 698,
	90, 0, 0, 0, 0, 425, 0, 0, 0, 91,
	92, 188, 472, 473, 93, 474, 475, 0, 94, 193,
	194, 95, 440, 458, 476, 477, 197, 0, 468, 0,
	451, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 452, 454, 0, 453, 455, 103,
	104, 105, 106, 478, 107, 479, 480, 0, 0, 108,
	0, 0, 0, 471, 110, 0, 0, 0, 0, 424,
	111, 459, 438, 0, 112, 113, 481, 114, 0, 115,
	0, 0, 330, 0, 116, 469, 0, 206, 0, 117,
	118, 465, 467, 0, 0, 119, 0, 331, 120, 482,
	483, 484, 0, 450, 0, 332, 121, 333, 122, 123,
	0, 0, 470, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 414, 135, 439, 466, 137, 485, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 337, 141, 338,
	460, 142, 143, 0, 461, 144, 219, 0, 145, 146,
	147, 486, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 428, 157, 0, 243, 158, 159,
	0, 160, 161, 456, 162, 163, 340, 164, 487, 165,
	0, 166, 167, 169, 488, 168, 462, 0, 0, 170,
	171, 0, 225, 489, 490, 0, 0, 172, 463, 464,
	437, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	457, 0, 180, 181, 182, 230, 491, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 415, 0, 443,
	432, 433, 430, 431, 419, 0, 0, 411, 412, 0,
	0, 88, 89, 413, 90, 0, 420, 0, 0, 425,
	0, 0, 0, 91, 92, 188, 472, 473, 93, 474,
	475, 0, 94, 193, 194, 95, 440, 458, 476, 477,
	197, 0, 468, 0, 451, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 329, 101, 1670, 0, 452, 454,
	0, 453, 455, 103, 104, 105, 106, 478, 107, 479,
	480, 0, 0, 108, 0, 0, 0, 471, 110, 0,
	0, 0, 0, 424, 111, 459, 438, 0, 112, 113,
	481, 114, 0, 115, 0, 0, 330, 0, 116, 469,
	0, 206, 0, 117, 118, 465, 467, 0, 0, 119,
	0, 331, 120, 482, 483, 484, 0, 450, 0, 332,
	121, 333, 122, 123, 0, 0, 470, 334, 124, 335,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 336, 132, 133, 136, 134, 414, 135, 439, 466,
	137, 485, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 337, 141, 338, 460, 142, 143, 0, 461, 144,
	219, 0, 145, 146, 147, 486, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 339, 155, 156, 428, 157,
	0, 243, 158, 159, 0, 160, 161, 456, 162, 163,
	340, 164, 487, 165, 0, 166, 167, 169, 488, 168,
	462, 0, 0, 170, 171, 0, 225, 489, 490, 0,
	0, 172, 463, 464, 437, 173, 174, 1669, 176, 0,
	0, 177, 178, 179, 457, 0, 180, 181, 182, 230,
	491, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 415, 0, 443, 432, 433, 430, 431, 419, 0,
	0, 411, 412, 0, 0, 88, 89, 413, 90, 0,
	420, 0, 0, 425, 0, 0, 0, 91, 92, 1668,
	472, 473, 93, 474, 475, 0, 94, 193, 194, 95,
	440, 458, 476, 477, 197, 0, 468, 0, 451, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	1670, 0, 452, 454, 0, 453, 455, 103, 104, 105,
	106, 478, 107, 479, 480, 0, 0, 108, 0, 0,
	0, 471, 110, 0, 0, 0, 0, 424, 111, 459,
	438, 0, 112, 113, 481, 114, 0, 115, 0, 0,
	330, 0, 116, 469, 0, 206, 0, 117, 118, 465,
	467, 0, 0, 119, 0, 331, 120, 482, 483, 484,
	0, 450, 0, 332, 121, 333, 122, 123, 0, 0,
	470, 334, 124, 335, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	414, 135, 439, 466, 137, 485, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 337, 141, 338, 460, 142,
	143, 0, 461, 144, 219, 0, 145, 146, 147, 486,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 428, 157, 0, 243, 158, 159, 0, 160,
	161, 456, 162, 163, 340, 164, 487, 165, 0, 166,
	167, 169, 488, 168, 462, 0, 0, 170, 171, 0,
	225, 489, 490, 0, 0, 172, 463, 464, 437, 173,
	174, 1669, 176, 0, 0, 177, 178, 179, 457, 0,
	180, 181, 182, 230, 491, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 415, 0, 443, 432, 433,
	430, 431, 419, 0, 0, 411, 412, 0, 0, 88,
	89, 413, 90, 0, 420, 0, 0, 425, 0, 0,
	0, 91, 92, 188, 472, 473, 93, 474, 475, 0,
	94, 193, 194, 95, 440, 458, 476, 477, 197, 0,
	468, 0, 451, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 329, 101, 102, 0, 452, 454, 0, 453,
	455, 103, 104, 105, 106, 478, 107, 479, 480, 0,
	0, 108, 0, 0, 0, 471, 110, 0, 0, 0,
	0, 424, 111, 459, 438, 0, 112, 113, 481, 114,
	0, 115, 0, 0, 330, 0, 116, 469, 0, 206,
	0, 117, 118, 465, 467, 0, 0, 119, 0, 331,
	120, 482, 483, 484, 0, 450, 0, 332, 121, 333,
	122, 123, 0, 0, 470, 334, 124, 335, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 336,
	132, 133, 136, 134, 414, 135, 439, 466, 137, 485,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 337,
	141, 338, 460, 142, 143, 0, 461, 144, 219, 0,
	145, 146, 147, 486, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 339, 155, 156, 428, 157, 0, 243,
	158, 159, 0, 160, 161, 456, 162, 163, 340, 164,
	487, 165, 0, 166, 167, 169, 488, 168, 462, 0,
	0, 170, 171, 0, 225, 489, 490, 0, 0, 172,
	463, 464, 437, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 457, 0, 180, 181, 182, 230, 491, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 415,
	0, 443, 432, 433, 430, 431, 419, 0, 0, 411,
	412, 0, 0, 88, 89, 413, 90, 0, 420, 0,
	0, 425, 0, 0, 0, 91, 92, 188, 472, 473,
	93, 474, 475, 0, 94, 193, 194, 95, 440, 458,
	476, 477, 197, 0, 468, 0, 451, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 329, 101, 102, 0,
	452, 454, 0, 453, 455, 103, 104, 105, 106, 478,
	107, 479, 480, 0, 0, 108, 0, 0, 0, 471,
	110, 0, 0, 0, 0, 424, 111, 459, 438, 0,
	112, 113, 481, 114, 0, 115, 0, 0, 330, 0,
	116, 469, 0, 206, 0, 117, 118, 465, 467, 0,
	0, 119, 0, 331, 120, 482, 483, 484, 0, 450,
	0, 332, 121, 333, 122, 123, 0, 0, 470, 334,
	124, 335, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 336, 132, 133, 136, 134, 0, 135,
	439, 466, 137, 485, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 337, 141, 338, 460, 142, 143, 0,
	461, 144, 219, 0, 145, 146, 147, 486, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 339, 155, 156,
	1042, 157, 0, 243, 158, 159, 0, 160, 161, 456,
	162, 163, 340, 164, 487, 165, 0, 166, 167, 169,
	488, 168, 462, 0, 0, 170, 171, 0, 225, 489,
	490, 0, 0, 172, 463, 464, 437, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 457, 0, 180, 181,
	182, 230, 491, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 443, 432, 433, 430, 431, 419, 0,
	0, 0, 0, 1038, 1039, 88, 89, 0, 90, 1040,
	0, 0, 1041, 425, 0, 0, 0, 91, 92, 0,
	472, 473, 93, 474, 475, 0, 94, 193, 194, 95,
	440, 458, 476, 477, 197, 0, 468, 0, 451, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	1670, 0, 452, 454, 0, 453, 455, 103, 104, 105,
	106, 478, 107, 479, 480, 0, 0, 108, 0, 0,
	0, 471, 110, 0, 0, 0, 0, 424, 111, 459,
	438, 0, 112, 113, 481, 114, 0, 115, 0, 0,
	330, 0, 116, 469, 0, 206, 0, 117, 118, 465,
	467, 0, 0, 119, 0, 331, 120, 482, 483, 484,
	0, 450, 0, 0, 121, 333, 122, 123, 0, 0,
	470, 334, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	414, 135, 439, 466, 137, 485, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 337, 141, 338, 460, 142,
	143, 0, 461, 144, 219, 0, 145, 146, 147, 486,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 428, 157, 0, 243, 158, 159, 0, 160,
	161, 456, 162, 163, 0, 164, 487, 165, 0, 166,
	167, 169, 488, 168, 462, 0, 0, 170, 171, 0,
	225, 489, 490, 0, 0, 172, 463, 464, 437, 173,
	174, 1669, 176, 0, 0, 177, 178, 179, 457, 0,
	180, 181, 182, 230, 491, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 411, 412, 88, 89, 0,
	90, 413, 0, 0, 420, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 458, 195, 196, 197, 0, 468, 0,
	451, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 452, 454, 0, 453, 455, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 459, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 330, 0, 116, 469, 0, 206, 0, 117,
	118, 465, 467, 0, 0, 119, 0, 331, 120, 209,
	210, 211, 0, 212, 0, 332, 121, 333, 122, 123,
	0, 0, 470, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 0, 135, 0, 466, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 337, 141, 338,
	460, 142, 143, 0, 461, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 456, 162, 163, 340, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 462, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 463, 464,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	457, 0, 180, 181, 182, 230, 231, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 1456, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 328, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 329, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 330, 0, 116, 205, 0, 206,
	0, 117, 118, 207, 208, 0, 0, 119, 0, 331,
	120, 209, 210, 211, 0, 212, 0, 332, 121, 333,
	122, 123, 0, 0, 213, 334, 124, 335, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 336,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 337,
	141, 338, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 339, 155, 156, 221, 157, 0, 243,
	158, 159, 49, 160, 161, 0, 162, 163, 340, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	51, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 327, 231, 0,
	183, 0, 0, 0, 47, 184, 185, 186, 187, 0,
	48, 323, 573, 0, 574, 569, 564, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 46, 0,
	0, 0, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 328, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 329, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 577, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 566, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 330, 0,
	116, 205, 0, 206, 0, 117, 118, 207, 208, 0,
	0, 119, 0, 331, 120, 209, 210, 211, 0, 212,
	0, 332, 121, 333, 122, 123, 0, 0, 213, 334,
	124, 335, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 336, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 567, 0, 0,
	0, 140, 216, 337, 141, 338, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 339, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 340, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 565, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 323, 573, 0, 574, 569, 564, 0,
	0, 0, 0, 575, 570, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 328, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 560, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	566, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	330, 0, 116, 205, 0, 206, 0, 117, 118, 207,
	208, 0, 0, 119, 0, 331, 120, 209, 210, 211,
	0, 212, 0, 332, 121, 333, 122, 123, 0, 0,
	213, 334, 124, 335, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 567,
	0, 0, 0, 140, 216, 337, 141, 338, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 340, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 565, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 323, 573, 0, 574, 569,
	564, 0, 0, 0, 0, 575, 570, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	328, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	329, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 566, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 330, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 331, 120, 209,
	210, 211, 0, 212, 0, 332, 121, 333, 122, 123,
	0, 0, 213, 334, 124, 335, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 336, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 567, 0, 0, 0, 140, 216, 337, 141, 338,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 339, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 340, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	565, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 575, 570, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 207, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 49, 160, 161, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	51, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 327, 231, 0,
	183, 0, 0, 0, 47, 184, 185, 186, 187, 85,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 46, 0,
	1150, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 207, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 401, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 207, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 296, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 908, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 207,
	208, 0, 0, 119, 0, 0, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 844, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 1364, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 207, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 161, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 502, 0,
	0, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 545, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 207, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 544, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 85, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 548, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 207, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 323, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 548, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 328, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 329, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	330, 0, 116, 205, 0, 206, 0, 117, 118, 207,
	208, 0, 0, 119, 0, 331, 120, 209, 210, 211,
	0, 212, 0, 332, 121, 333, 122, 123, 0, 0,
	213, 334, 124, 335, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 336, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 337, 141, 338, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 339,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 340, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 85, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 817, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 815, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	820, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 885, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 819, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	0, 173, 174, 175, 176, 0, 886, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 817,
	198, 0, 0, 812, 96, 97, 98, 0, 99, 815,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 820, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 811, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 819,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 161, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 818, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 85,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	1150, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 207, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 85, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 207, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 296, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 85, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 302,
	208, 0, 0, 119, 0, 0, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	296, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 85, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 1087, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 161, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 85,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 1085, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 85, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 1076, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 85, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 690,
	208, 0, 0, 119, 0, 0, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 85, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 83, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 531, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 207, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 161, 0, 0, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 85,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 386, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 85, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 383, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 85, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 346, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 207,
	208, 0, 0, 119, 0, 0, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 240, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	239, 226, 227, 0, 0, 235, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 85, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 240, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 239, 226, 227, 0, 0, 235, 228, 229,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 318, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 125,
	0, 0, 126, 0, 127, 128, 129, 130, 131, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 161, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 225, 226, 227, 0, 0, 172,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 85,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 315, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 143, 0, 218, 144,
	219, 0, 145, 146, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 157,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 85, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 188, 189, 190,
	93, 191, 192, 0, 94, 193, 194, 95, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 199,
	107, 200, 201, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 0, 0, 0, 202, 111, 203, 0, 0,
	112, 113, 204, 114, 0, 115, 0, 0, 0, 0,
	116, 205, 0, 206, 0, 117, 118, 313, 208, 0,
	0, 119, 0, 0, 120, 209, 210, 211, 0, 212,
	0, 0, 121, 0, 122, 123, 0, 0, 213, 0,
	124, 0, 0, 125, 0, 0, 126, 0, 127, 128,
	129, 130, 131, 0, 132, 133, 136, 134, 0, 135,
	0, 214, 137, 215, 138, 139, 0, 0, 0, 0,
	0, 140, 216, 0, 141, 0, 217, 142, 143, 0,
	218, 144, 219, 0, 145, 146, 147, 220, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	221, 157, 0, 243, 158, 159, 0, 160, 161, 0,
	162, 163, 0, 164, 222, 165, 0, 166, 167, 169,
	223, 168, 224, 0, 0, 170, 171, 0, 225, 226,
	227, 0, 0, 172, 228, 229, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 230, 231, 85, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 188,
	189, 190, 93, 191, 192, 0, 94, 193, 194, 95,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 199, 107, 200, 201, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 0, 0, 0, 202, 111, 203,
	0, 0, 112, 113, 204, 114, 0, 115, 0, 0,
	0, 0, 116, 205, 0, 206, 0, 117, 118, 305,
	208, 0, 0, 119, 0, 0, 120, 209, 210, 211,
	0, 212, 0, 0, 121, 0, 122, 123, 0, 0,
	213, 0, 124, 0, 0, 125, 0, 0, 126, 0,
	127, 128, 129, 130, 131, 0, 132, 133, 136, 134,
	0, 135, 0, 214, 137, 215, 138, 139, 0, 0,
	0, 0, 0, 140, 216, 0, 141, 0, 217, 142,
	143, 0, 218, 144, 219, 0, 145, 146, 147, 220,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 221, 157, 0, 243, 158, 159, 0, 160,
	161, 0, 162, 163, 0, 164, 222, 165, 0, 166,
	167, 169, 223, 168, 224, 0, 0, 170, 171, 0,
	225, 226, 227, 0, 0, 172, 228, 229, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 230, 231, 85, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 188, 189, 190, 93, 191, 192, 0, 94, 193,
	194, 95, 0, 0, 195, 196, 197, 0, 198, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 199, 107, 200, 201, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 0, 0, 0, 202,
	111, 203, 0, 0, 112, 113, 204, 114, 0, 115,
	0, 0, 0, 0, 116, 205, 0, 206, 0, 117,
	118, 207, 208, 0, 0, 119, 0, 0, 120, 209,
	210, 211, 0, 212, 0, 0, 121, 0, 122, 123,
	0, 0, 213, 0, 124, 0, 0, 125, 0, 0,
	126, 0, 127, 128, 129, 130, 131, 0, 132, 133,
	136, 134, 0, 135, 0, 214, 137, 215, 138, 139,
	0, 0, 0, 0, 0, 140, 216, 0, 141, 0,
	217, 142, 143, 0, 218, 144, 219, 0, 145, 146,
	147, 220, 285, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 221, 157, 0, 243, 158, 159,
	0, 160, 161, 0, 162, 163, 0, 164, 222, 165,
	0, 166, 167, 169, 223, 168, 224, 0, 0, 170,
	171, 0, 225, 226, 227, 0, 0, 172, 228, 229,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 230, 231, 85, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 188, 189, 190, 93, 191, 192, 0,
	94, 193, 194, 95, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 199, 107, 200, 201, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 202, 111, 203, 0, 0, 112, 113, 204, 114,
	0, 115, 0, 0, 0, 0, 116, 205, 0, 206,
	0, 117, 118, 207, 208, 0, 0, 119, 0, 0,
	120, 209, 210, 211, 0, 212, 0, 0, 121, 0,
	122, 123, 0, 0, 213, 0, 124, 0, 0, 233,
	0, 0, 126, 0, 127, 128, 129, 130, 240, 0,
	132, 133, 136, 134, 0, 135, 0, 214, 137, 215,
	138, 139, 0, 0, 0, 0, 0, 140, 216, 0,
	141, 0, 217, 142, 143, 0, 218, 144, 219, 0,
	145, 146, 147, 220, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 221, 157, 0, 243,
	158, 159, 0, 160, 234, 0, 162, 163, 0, 164,
	222, 165, 0, 166, 167, 169, 223, 168, 224, 0,
	0, 170, 171, 0, 239, 226, 227, 0, 0, 235,
	228, 229, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 230, 231, 85,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 188, 189, 190, 93, 191,
	192, 0, 94, 193, 194, 95, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 199, 107, 200,
	201, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	0, 0, 0, 202, 111, 203, 0, 0, 112, 113,
	204, 114, 0, 115, 0, 0, 0, 0, 116, 205,
	0, 206, 0, 117, 118, 207, 208, 0, 0, 119,
	0, 0, 120, 209, 210, 211, 0, 212, 0, 0,
	121, 0, 122, 123, 0, 0, 213, 0, 124, 0,
	0, 125, 0, 0, 126, 0, 127, 128, 129, 130,
	131, 0, 132, 133, 136, 134, 0, 135, 0, 214,
	137, 215, 138, 139, 0, 0, 0, 0, 0, 140,
	216, 0, 141, 0, 217, 142, 0, 0, 218, 144,
	219, 0, 145, 0, 147, 220, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 221, 0,
	0, 243, 158, 159, 0, 160, 161, 0, 162, 163,
	0, 164, 222, 165, 0, 166, 167, 169, 223, 168,
	224, 0, 0, 170, 171, 0, 225, 226, 227, 0,
	0, 172, 228, 229, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 230,
	231, 714, 183, 732, 733, 734, 0, 184, 185, 186,
	187, 0, 0, 735, 0, 0, 0, 0, 0, 716,
	714, 741, 732, 733, 734, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 716, 715,
	741, 0, 0, 0, 0, 729, 0, 714, 0, 732,
	733, 734, 0, 0, 0, 0, 0, 0, 715, 735,
	0, 0, 0, 0, 729, 716, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 715, 714, 0, 732, 733,
	734, 729, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 742, 716, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 0, 0,
	0, 0, 742, 0, 715, 737, 0, 0, 0, 0,
	729, 730, 0, 0, 740, 0, 0, 0, 0, 924,
	940, 916, 932, 931, 737, 0, 918, 917, 0, 742,
	730, 942, 941, 736, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 737, 736, 0, 0, 0, 0, 730, 0, 0,
	937, 0, 929, 928, 0, 0, 731, 0, 742, 0,
	927, 0, 0, 0, 0, 0, 739, 0, 0, 736,
	740, 0, 0, 926, 0, 731, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 739, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 921, 922, 0,
	586, 0, 731, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 739, 0, 0, 0, 0, 738, 0, 726,
	727, 728, 0, 725, 722, 723, 724, 717, 718, 719,
	720, 721, 0, 0, 930, 0, 738, 1626, 726, 727,
	728, 731, 725, 722, 723, 724, 717, 718, 719, 720,
	721, 739, 0, 0, 0, 0, 1609, 0, 925, 0,
	0, 0, 0, 738, 0, 726, 727, 728, 0, 725,
	722, 723, 724, 717, 718, 719, 720, 721, 0, 0,
	0, 0, 0, 1588, 0, 923, 1214, 0, 1230, 1231,
	1232, 944, 0, 0, 0, 0, 0, 919, 1337, 0,
	938, 939, 738, 0, 726, 727, 728, 0, 725, 722,
	723, 724, 717, 718, 719, 720, 721, 714, 0, 732,
	733, 734, 1583, 943, 0, 0, 0, 0, 0, 735,
	1227, 0, 0, 0, 0, 716, 714, 741, 732, 733,
	734, 0, 0, 0, 0, 0, 0, 0, 735, 0,
	0, 0, 0, 0, 716, 715, 741, 0, 0, 0,
	0, 729, 0, 714, 0, 732, 733, 734, 0, 0,
	0, 0, 0, 0, 715, 735, 0, 0, 0, 0,
	729, 716, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1233, 715, 714, 0, 732, 733, 734, 729, 0, 0,
	0, 0, 0, 0, 735, 0, 1228, 0, 0, 742,
	716, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 0, 0, 0, 742, 0,
	715, 737, 0, 0, 0, 0, 729, 730, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 742, 730, 0, 0, 736,
	0, 1229, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 737, 736, 0,
	0, 0, 0, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 742, 0, 0, 0, 0, 0,
	0, 0, 739, 0, 0, 736, 740, 0, 0, 0,
	0, 731, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 739, 730, 0, 1224, 1225, 1226, 0, 1223, 1220,
	1221, 1222, 1215, 1216, 1217, 1218, 1219, 0, 731, 0,
	0, 0, 0, 0, 736, 0, 0, 0, 739, 0,
	0, 0, 0, 738, 0, 726, 727, 728, 0, 725,
	722, 723, 724, 717, 718, 719, 720, 721, 0, 0,
	0, 0, 738, 1579, 726, 727, 728, 731, 725, 722,
	723, 724, 717, 718, 719, 720, 721, 739, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 738,
	0, 726, 727, 728, 0, 725, 722, 723, 724, 717,
	718, 719, 720, 721, 0, 0, 0, 0, 0, 1517,
	0, 0, 1214, 0, 1230, 1231, 1232, 0, 0, 0,
	0, 0, 0, 0, 1336, 0, 0, 0, 738, 0,
	726, 727, 728, 0, 725, 722, 723, 724, 717, 718,
	719, 720, 721, 714, 0, 732, 733, 734, 1429, 0,
	0, 0, 0, 0, 0, 735, 1227, 0, 0, 0,
	0, 716, 714, 741, 732, 733, 734, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	716, 715, 741, 0, 0, 0, 0, 729, 0, 714,
	0, 732, 733, 734, 0, 0, 0, 0, 0, 0,
	715, 735, 0, 0, 0, 0, 729, 716, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1233, 715, 714, 0,
	732, 733, 734, 729, 0, 0, 0, 0, 0, 0,
	735, 0, 1228, 0, 0, 742, 716, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 0, 742, 0, 715, 737, 0, 0,
	0, 0, 729, 730, 0, 0, 740, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 742, 730, 0, 0, 736, 0, 1229, 0, 0,
	0, 0, 0, 740, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 737, 736, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	742, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 736, 740, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 739, 730, 0,
	1224, 1225, 1226, 0, 1223, 1220, 1221, 1222, 1215, 1216,
	1217, 1218, 1219, 0, 731, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 739, 0, 0, 0, 0, 738,
	0, 726, 727, 728, 0, 725, 722, 723, 724, 717,
	718, 719, 720, 721, 0, 0, 0, 0, 738, 1367,
	726, 727, 728, 731, 725, 722, 723, 724, 717, 718,
	719, 720, 721, 739, 0, 0, 0, 0, 1342, 0,
	0, 0, 0, 0, 0, 738, 0, 726, 727, 728,
	0, 725, 722, 723, 724, 717, 718, 719, 720, 721,
	0, 0, 0, 0, 0, 990, 0, 0, 0, 0,
	1214, 0, 1230, 1231, 1232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 726, 727, 728, 0,
	725, 722, 723, 724, 717, 718, 719, 720, 721, 0,
	0, 714, 1413, 732, 733, 734, 0, 0, 0, 0,
	0, 0, 0, 735, 1227, 0, 0, 0, 0, 716,
	714, 741, 732, 733, 734, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 716, 715,
	741, 0, 0, 0, 0, 729, 0, 714, 0, 732,
	733, 734, 0, 0, 0, 0, 0, 0, 715, 735,
	0, 0, 0, 896, 729, 716, 0, 741, 0, 0,
	0, 0, 1234, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 1233, 715, 714, 1687, 732, 733,
	734, 729, 0, 0, 0, 0, 0, 0, 735, 0,
	1228, 743, 0, 742, 716, 0, 741, 1244, 0, 0,
	1243, 0, 0, 0, 0, 740, 897, 0, 0, 0,
	0, 0, 742, 0, 715, 737, 0, 0, 0, 0,
	729, 730, 0, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 742,
	730, 0, 0, 736, 0, 1229, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 1686, 0, 0, 0, 0,
	0, 737, 736, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 742, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 0, 736,
	740, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 739, 730, 0, 1224, 1225,
	1226, 0, 1223, 1220, 1221, 1222, 1215, 1216, 1217, 1218,
	1219, 0, 731, 0, 0, 0, 0, 0, 736, 0,
	0, 0, 739, 0, 0, 0, 0, 738, 0, 726,
	727, 728, 0, 725, 722, 723, 724, 717, 718, 719,
	720, 721, 0, 0, 0, 0, 738, 0, 726, 727,
	728, 731, 725, 722, 723, 724, 717, 718, 719, 720,
	721, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 726, 727, 728, 0, 725,
	722, 723, 724, 717, 718, 719, 720, 721, 0, 714,
	0, 732, 733, 734, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 716, 0, 741,
	0, 0, 738, 0, 726, 727, 728, 0, 725, 722,
	723, 724, 717, 718, 719, 720, 721, 715, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 0, 0, 0,
	0, 714, 0, 732, 733, 734, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 716,
	0, 741, 0, 0, 0, 0, 0, 0, 714, 0,
	732, 733, 734, 0, 0, 0, 0, 0, 0, 715,
	735, 0, 0, 0, 0, 729, 716, 0, 741, 0,
	0, 742, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 0, 0, 715, 0, 0, 0,
	0, 0, 729, 737, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 280, 742, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 1250, 0,
	0, 0, 0, 0, 0, 737, 0, 0, 0, 0,
	742, 730, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 740, 0, 739, 0, 0, 0, 0, 0,
	0, 0, 737, 736, 0, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 731, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 739, 726, 727, 728,
	0, 725, 722, 723, 724, 717, 718, 719, 720, 721,
	0, 1361, 0, 731, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 714, 0, 732, 733, 734, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 1245,
	0, 0, 716, 0, 741, 0, 0, 738, 0, 726,
	727, 728, 0, 725, 722, 723, 724, 717, 718, 719,
	720, 721, 715, 0, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 738, 0, 726, 727, 728, 0,
	725, 722, 723, 724, 717, 718, 719, 720, 721, 0,
	714, 0, 732, 733, 734, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 0, 0, 0, 716, 714,
	741, 732, 733, 734, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 1207, 0, 742, 716, 715, 741,
	0, 0, 0, 0, 729, 0, 0, 0, 740, 714,
	0, 732, 733, 734, 0, 0, 0, 715, 737, 0,
	0, 735, 0, 729, 730, 0, 0, 716, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 715, 0, 0,
	0, 0, 0, 729, 0, 0, 0, 714, 0, 732,
	733, 734, 742, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 740, 716, 0, 741, 0, 731,
	0, 742, 0, 0, 737, 0, 0, 0, 0, 739,
	730, 0, 0, 740, 1214, 715, 1230, 1231, 1232, 0,
	0, 729, 0, 737, 0, 0, 0, 0, 0, 730,
	0, 742, 736, 0, 0, 0, 1214, 0, 1230, 1231,
	1232, 0, 1212, 740, 0, 0, 0, 0, 0, 0,
	0, 736, 0, 737, 0, 0, 0, 0, 1227, 730,
	738, 0, 726, 727, 728, 731, 725, 722, 723, 724,
	717, 718, 719, 720, 721, 739, 0, 0, 0, 742,
	1227, 736, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 739, 0, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 738, 0, 726, 727,
	728, 0, 725, 722, 723, 724, 717, 718, 719, 720,
	721, 0, 0, 0, 1228, 738, 0, 726, 727, 728,
	1233, 725, 722, 723, 724, 717, 718, 719, 720, 721,
	0, 0, 731, 0, 0, 0, 1228, 0, 0, 0,
	0, 0, 739, 714, 0, 738, 0, 726, 727, 728,
	0, 725, 722, 723, 724, 717, 718, 719, 720, 721,
	0, 716, 0, 741, 0, 0, 0, 0, 0, 1229,
	714, 0, 732, 733, 734, 0, 0, 0, 0, 0,
	0, 715, 0, 0, 0, 0, 0, 729, 716, 0,
	741, 1229, 0, 738, 0, 726, 727, 728, 0, 725,
	722, 723, 724, 717, 718, 719, 720, 721, 715, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1224, 1225, 1226, 0, 1223, 1220, 1221, 1222,
	1215, 1216, 1217, 1218, 1219, 742, 0, 0, 0, 0,
	0, 0, 0, 0, 1224, 1225, 1226, 0, 1223, 1220,
	1221, 1222, 1215, 1216, 1217, 1218, 1219, 737, 0, 0,
	0, 0, 742, 730, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	730, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 731, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 725, 722, 723, 724, 717,
	718, 719, 720, 721, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 726, 727,
	728, 0, 725, 722, 723, 724, 717, 718, 719, 720,
	721,
}
var sqlPact = [...]int{

	2738, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 679, -1000, -1000, -1000, 631, 646, 45, 1268, 1268,
	14561, -1000, -1000, 17223, 2537, 350, 351, 350, 350, 367,
	14561, 460, 588, 81, -1000, 761, -22, 16981, 13351, 1166,
	-13, 12867, 239, 2738, 13109, 13351, 16739, 1001, 910, 902,
	12867, 16497, 16255, 16013, -1000, 8903, -1000, -1000, -1000, -1000,
	718, -1000, -14, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 717, -1000, 13351, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 15771, 15529, 673, -1000, -1000, 450, 296,
	1189, -1000, 2, -1000, -1000, -1000, 1000, -1000, 715, 994,
	988, 984, 981, 292, 683, -1000, 455, 673, -1000, 673,
	-1000, -1000, -1000, 433, 14561, -1000, 12867, -1000, 15287, 923,
	15045, -1000, 761, -1000, -1000, -1000, 735, 1153, 1153, 1153,
	1185, 103, 102, 81, -23, 13351, -1000, 240, -23, 6605,
	6605, -1000, -1000, 239, -1000, 266, 11163, -3, -1000, 6351,
	-1000, 741, 1059, 585, 582, 1058, -123, 12867, 13351, 13351,
	480, 14803, -1000, 1057, 88, 1056, -1000, -30, 1055, -1000,
	-38, -1000, -1000, -1000, -1000, -1000, -1000, 239, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 11415, 815, 11415, -1000, -1000, 1207, -1000, -1000, -15,
	-16, 853, 979, 9409, 9157, 1121, 1078, -1000, -1000, -1000,
	0, 3795, 13351, 1010, 11415, 13351, 13351, 13351, -1000, 13351,
	-1000, 845, -1000, 13351, -1000, -18, -20, -1000, 14561, -1000,
	89, -1000, 236, 755, 14319, -1000, 754, -1000, 735, -1000,
	721, 814, 7131, 7893, 81, -1000, -1000, 81, 81, 7893,
	-1000, -1000, 13351, -23, 1206, 13351, 93, -1000, 18826, -1000,
	-1000, 7893, 7893, 7893, 7893, 7893, 658, -1000, -1000, -1000,
	4555, -1000, -1000, -3, 235, 96, -1000, -1000, 232, -3,
	-1000, -1000, -1000, -1000, 230, 1287, 372, -1000, -1000, -1000,
	7893, 301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1006, 229, 226, -1000, -1000, -1000, -1000, 222, 218,
	216, 215, 214, 213, 208, 207, 204, 200, 199, 197,
	196, 614, -1000, 312, -1000, -1000, 312, 312, -1000, 171,
	171, 172, -1000, -1000, -1000, 171, -1000, -1000, -1000, 287,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 187, 93, -1000,
	-1000, -1000, 13351, -3, -1000, -1000, -1000, 7893, 3542, -45,
	-1000, 19439, -1000, -36, 638, -1000, 12383, 1149, 1146, 1142,
	12867, 429, 425, 13351, 13351, 306, 61, 1204, 61, 10659,
	-1000, 13351, 13351, -1000, 13351, -1000, -1000, 13351, 13351, 13351,
	-22, 11899, 405, -31, 11657, 13351, -1000, -9, -1000, -1000,
	978, 346, 610, 864, 891, -1000, -1000, -1000, -1000, -24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1244, -1000, -1000, -1000, -1000, 1280, -24, -1000, -1000, -1000,
	-1000, -1000, 1286, -1000, -1000, -1000, -1000, 3795, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13351, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 610, 864, -1000, -1000, 12867, 12141, 1053, 705,
	753, -1000, 1052, -1000, -1000, -1000, -1000, 19439, -1000, 19439,
	508, 914, -1000, 914, -28, -1000, 18787, -1000, 186, -46,
	-1000, 306, 6605, 10407, 17818, 13351, 447, 7893, 7893, 7893,
	7893, 7893, 7893, 7893, 7893, 7893, 7893, 7893, 7893, 7893,
	7893, 7893, 7893, 7893, 7893, 7893, 7893, 7893, 862, 404,
	939, 665, 168, 3795, -1000, 1233, 1233, 1233, 2334, 2334,
	144, -19, 18439, -29, -3, -1000, -1000, 5825, 5571, -3,
	4047, -1000, 747, 1278, 310, 19439, 1018, 941, 184, 100,
	98, 7893, 674, 7893, 8147, 7893, 7893, 4809, 7893, 7893,
	7893, 7893, 7893, 7893, -1000, 183, -1000, -1000, -1000, -1000,
	1277, -1000, -1000, 1275, -1000, 440, 1274, 306, 95, -1000,
	170, -1000, -1000, 6351, -1000, 567, 13351, 13351, 13351, -1000,
	-1000, 751, 14077, -1000, 17818, 13351, -1000, 177, 175, 872,
	863, 13351, 13351, 13835, 13593, 13351, 583, 13351, 13351, 579,
	-1000, 523, 7893, 704, -1000, 9903, 317, 13351, 523, 65,
	-1000, -1000, -1000, 278, 13351, -1000, -1000, -1000, 88, -1000,
	-30, -1000, -1000, 13351, 11657, -31, -32, -1000, -1000, 13351,
	864, -1000, -1000, -1000, 528, -1000, 605, -1000, 9661, -1000,
	-1000, -1000, 747, -1000, -40, -1000, -1000, -1000, -1000, 94,
	-33, -1000, -1000, -1000, -1000, 13351, 217, 13351, 13351, 1050,
	13351, -1000, -1000, -1000, 7893, -1000, -1000, -1000, -22, 13351,
	-1000, 940, -1000, -34, 1296, -127, 12625, -1000, 2989, -1000,
	1216, -1000, -1000, -1000, -1000, 54, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 172, 614, 171, 171,
	171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 287, -1000,
	312, 312, 312, -1000, -1000, -1000, 291, 542, 542, 1211,
	1211, 1211, 1692, 1692, 2012, 2158, 19683, 19683, 19683, 2438,
	438, 438, 19683, 19683, 19683, 2334, 19487, 645, 7893, 401,
	642, 168, 7893, -1000, 808, -1000, -1000, -1000, 975, 156,
	8147, 8147, -1000, -1000, -1000, 4555, -1000, -1000, 150, 7893,
	-1000, 7893, -42, -128, -1000, 19439, -1000, -51, -1000, -1000,
	-43, 7893, 7893, 7893, 90, -1000, 390, -1000, 389, 379,
	375, -1000, 149, 79, 491, -1000, 7893, 671, 148, 147,
	7893, -1000, -1000, 19409, 75, 973, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 74, 19390, 72, 18710, -1000, 8147, 8147,
	8147, 4555, 145, 71, 18760, -145, 19324, 6859, 6859, 6859,
	66, 19128, 7893, -145, 2614, 2353, 2175, -53, -59, -63,
	1270, -65, 64, 290, 63, 940, -1000, -1000, 7893, -1000,
	-1000, -1000, 374, 371, 1048, -1000, 749, -1000, 580, 7893,
	13351, 143, 142, 604, -1000, 1042, 773, 1040, 773, -1000,
	-36, 625, -1000, -1000, 364, -1000, 6605, 19439, 523, 1148,
	-69, -1000, -1000, -1000, -1000, 306, 10659, 6351, -70, -1000,
	-40, -1000, -40, -1000, -1000, -1000, -1000, -1000, -1000, 13351,
	-1000, 12141, 133, 13351, 132, 130, 13351, -1000, -1000, 57,
	-1000, -1000, -1000, -1000, -1000, 936, 1183, 10407, 889, 886,
	10407, 963, 678, 678, 678, -1000, 12625, 3276, -1000, -1000,
	13351, 122, 10155, 51, 1296, 260, 257, -1000, 1269, 7893,
	645, 7893, 8147, 8147, -1000, 645, -1000, -1000, -1000, -1000,
	965, 121, 7893, 17818, 18362, 18016, -71, 5317, -60, 18412,
	7893, -1000, -1000, 96, -1000, 50, 6097, -1000, 19049, -37,
	-37, -1000, 783, 868, 572, 487, 1260, 1284, 1065, -1000,
	7893, 19101, -1000, 10911, 308, 682, 18393, 17818, -1000, 7893,
	-1000, 953, 7893, -1000, 17818, 8147, 8147, 8147, 8147, 8147,
	8147, 8147, 8147, 8147, 8147, 8147, 8147, 8147, 8147, 8147,
	8147, 8147, 8147, 843, 8147, 1225, 1225, 1225, -64, 5063,
	-1000, 1005, 953, 7893, 7893, 17818, 48, 46, 43, -1000,
	7893, -145, 7893, 7893, 7893, -1000, -1000, -1000, 39, -1000,
	1259, -1000, -1000, -1000, 936, 18478, 13351, 13351, 13351, 1036,
	1212, -1000, 18132, -75, 13351, 13351, -1000, 888, 871, 340,
	13351, -1000, 13351, -1000, 13351, 13351, 13351, 13351, -98, -1000,
	174, -22, 13351, 523, -1000, -1000, 275, -1000, -1000, 8651,
	120, 12141, 8651, 701, -1000, 304, 7893, 7893, 1296, 10407,
	10407, 908, 882, 10407, -1000, -1000, -1000, -1000, -1000, -1000,
	922, 117, 13351, 12625, 334, 1250, 35, 1213, 645, 2237,
	259, 7893, 17818, 19710, -77, -1000, 7893, 7893, -1000, -85,
	-1000, 7893, -1000, 19439, -1000, 1265, 7893, 31, 30, 23,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 19, -1000, -1000,
	19439, 7893, -1000, -1000, 17465, 7893, 17, -1000, 16, 19439,
	1005, 19439, -1000, 526, 526, 1225, 1225, 1225, 475, 475,
	354, 688, 793, 793, 793, 1465, 485, 485, 793, 793,
	793, 951, 841, 116, 19546, 7893, -89, -1000, -1000, -1000,
	19439, 19439, 12, -1000, -1000, -1000, -145, 2150, 18093, 18066,
	-1000, 11, 304, -1000, -1000, -1000, -1000, 13351, -1000, 13351,
	-1000, 13351, 738, -1000, -1000, 860, 115, 8147, 13351, -1000,
	627, -90, -91, 733, -1000, 731, 7893, -1000, 17818, 773,
	773, -1000, 361, 358, -1000, 1075, 13351, 1133, -1000, -1000,
	-1000, 114, -100, -1000, 192, 1161, 7893, -1000, -1000, 112,
	8651, 10, -104, 13351, -1000, 13351, 19439, -145, -1000, 908,
	-1000, 111, 7893, 10407, -1000, -157, -1000, 185, -1000, 13351,
	-105, -1000, -1000, 246, 242, -1000, 7893, 7893, 19710, -106,
	-1000, 17818, 645, 645, -1000, 18047, -1000, 19049, -1000, -1000,
	-1000, -1000, 19439, 619, -1000, 17786, -1000, -1000, -1000, 8147,
	947, 110, 17818, 17747, -1000, -1000, 7893, -1000, -1000, -1000,
	-1000, -1000, 1263, -1000, -1000, -1000, 7893, 19546, 82, -1000,
	109, -1000, -1000, -1000, 581, -1000, -1000, 19439, 1164, -1000,
	-1000, 13351, 13351, 417, -110, 13351, -1000, -1000, 4301, 627,
	8651, 1137, -3, 13351, 1137, 17720, 4047, -117, -1000, 627,
	107, -115, -1000, 1202, -1000, 13351, 19439, -1000, 922, -1000,
	3795, -124, -1000, -1000, -1000, 645, 645, -1000, -1000, -1000,
	9, 682, 1178, -1000, 19524, 8147, 17818, -134, -1000, 17701,
	-1000, 2644, 825, 13351, 13351, 13351, 325, 13351, -1000, -1000,
	477, -1000, 306, -1000, -1000, -1000, -1000, -1000, -1000, 1161,
	-43, 627, -1000, 8651, 13351, 105, -135, -1000, -1000, -1000,
	-1000, 518, 7893, 19524, -136, -1000, -1000, -1000, 693, 661,
	-140, -141, 82, -1000, 7893, -1000, 10659, -1000, 1137, 8,
	-1000, -146, -1000, -1000, -1000, 7, 7639, 7639, -145, -1000,
	-1000, 695, 694, 509, -1000, -1000, -1000, -1000, -1000, 825,
	19439, -125, -1000, -1000, 627, -1000, -1000, -1000, 8399, 723,
	524, 18741, -1000, -1000, 1098, -1000, 330, 890, 890, 693,
	-1000, -1000, 1219, -1000, -1000, -1000, -1000, -1000, -1000, 1226,
	-1000, -1000, 870, -1000, -1000, 7385, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1530, 1528, 1208, 1522, 1521, 1519, 1515, 1512, 71,
	1511, 1510, 89, 1509, 63, 1508, 1507, 1506, 1504, 51,
	1500, 1499, 1497, 1496, 1494, 60, 30, 114, 1813, 104,
	1489, 1482, 1476, 22, 81, 76, 1474, 25, 73, 85,
	1249, 50, 1469, 108, 24, 15, 634, 82, 132, 121,
	105, 1468, 1463, 1462, 38, 1460, 1459, 1455, 11, 41,
	28, 1454, 19, 227, 1453, 1451, 80, 1443, 74, 86,
	34, 93, 221, 1440, 52, 9, 58, 1436, 37, 1433,
	29, 61, 107, 1432, 40, 131, 48, 23, 49, 1431,
	1430, 1429, 1426, 67, 65, 42, 1425, 1423, 78, 1415,
	106, 109, 1413, 1410, 117, 1409, 1408, 1406, 617, 1405,
	1403, 539, 10, 46, 45, 3, 100, 92, 33, 1402,
	18, 1401, 0, 786, 765, 1400, 36, 27, 54, 35,
	44, 26, 1394, 83, 1393, 1392, 1391, 1390, 1387, 59,
	1384, 53, 111, 32, 43, 68, 20, 39, 66, 95,
	119, 84, 1383, 90, 1382, 161, 1381, 1380, 637, 62,
	1379, 1375, 1374, 463, 317, 316, 203, 1373, 1372, 212,
	56, 1371, 1368, 64, 1367, 1364, 115, 1361, 110, 31,
	1360, 94, 1358, 72, 1357, 297, 102, 47, 1354, 101,
	55, 1341, 1336, 1335, 14, 2, 7, 6, 5, 4,
	17, 16, 1331, 1330, 103, 69, 1329, 118, 1328, 1325,
	21, 1323, 1318, 12, 1314, 13, 1303, 8, 1, 1299,
	116, 1296, 75, 1295, 1226, 1294, 112, 1293, 1275, 1234,
	57,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	71, 71, 70, 70, 73, 73, 11, 11, 12, 12,
	12, 12, 154, 154, 153, 13, 18, 220, 220, 220,
	224, 224, 225, 225, 226, 226, 226, 226, 226, 226,
	226, 222, 222, 21, 21, 21, 21, 108, 108, 110,
	110, 110, 110, 39, 107, 107, 107, 107, 109, 109,
	109, 109, 178, 176, 176, 183, 183, 183, 51, 51,
	51, 51, 51, 52, 52, 52, 175, 175, 175, 175,
	184, 184, 184, 184, 184, 184, 53, 53, 53, 182,
	182, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 177, 177, 221, 221, 223,
	223, 8, 8, 54, 54, 55, 55, 114, 114, 114,
	113, 192, 192, 193, 193, 193, 194, 194, 194, 194,
	194, 194, 194, 191, 191, 189, 189, 190, 190, 190,
	190, 227, 227, 112, 112, 58, 58, 197, 197, 197,
	197, 195, 195, 195, 195, 195, 198, 196, 199, 199,
	199, 199, 199, 142, 142, 142, 24, 7, 7, 97,
	97, 62, 62, 146, 146, 146, 45, 45, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	98, 98, 99, 99, 16, 20, 23, 23, 23, 23,
	23, 229, 229, 42, 42, 42, 42, 43, 43, 111,
	111, 111, 111, 111, 38, 6, 6, 14, 14, 48,
	48, 104, 104, 104, 106, 106, 106, 105, 105, 105,
	84, 84, 25, 75, 75, 76, 76, 152, 77, 77,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 205,
	205, 205, 207, 207, 204, 15, 15, 15, 15, 206,
	206, 228, 228, 85, 85, 85, 57, 56, 56, 60,
	60, 59, 61, 61, 145, 82, 82, 82, 82, 100,
	101, 101, 102, 102, 103, 103, 81, 81, 129, 129,
	30, 30, 66, 66, 67, 67, 120, 120, 121, 121,
	119, 119, 119, 147, 147, 147, 147, 148, 148, 148,
	148, 148, 148, 143, 143, 143, 143, 144, 144, 88,
	88, 88, 88, 86, 86, 87, 87, 149, 149, 149,
	149, 83, 83, 150, 150, 150, 115, 115, 155, 155,
	155, 65, 65, 65, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 157, 157, 157, 157, 159, 159,
	159, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 160, 160, 167, 167, 168, 168,
	169, 170, 161, 161, 162, 162, 163, 164, 171, 171,
	171, 171, 173, 173, 165, 165, 165, 165, 166, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 95, 95, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 200, 200, 200, 200,
	200, 200, 200, 202, 202, 203, 203, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 208, 208, 209, 209, 210, 210, 211, 211,
	213, 214, 214, 214, 215, 219, 219, 212, 212, 216,
	216, 216, 217, 217, 218, 218, 218, 218, 218, 133,
	133, 133, 134, 134, 135, 72, 72, 131, 131, 130,
	130, 130, 132, 132, 89, 172, 172, 172, 172, 172,
	172, 172, 90, 90, 96, 91, 91, 92, 92, 92,
	92, 92, 92, 126, 127, 93, 93, 93, 128, 128,
	136, 140, 140, 139, 138, 138, 137, 137, 118, 118,
	118, 118, 117, 116, 78, 78, 230, 230, 141, 141,
	79, 79, 80, 74, 74, 151, 151, 151, 151, 68,
	68, 50, 50, 69, 69, 46, 46, 49, 47, 47,
	47, 47, 63, 63, 64, 64, 44, 44, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 174,
	174, 174, 40, 40, 40, 41, 41, 180, 180, 180,
	181, 181, 181, 181, 179, 179, 179, 179, 179, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	187, 187, 187, 187, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 3, 6, 7, 6, 1,
	3, 1, 4, 2, 8, 5, 0, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 4, 5, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 1, 1, 3, 1, 1,
	1, 2, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 1, 1, 1, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 2,
	2, 1, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -206, 83, 89, 102, 189,
	196, -26, -28, 203, 204, 29, 211, 52, 85, 191,
	186, 230, 58, -205, -29, -27, 275, 251, 257, 199,
	-30, 217, 244, 278, 217, 70, 113, 78, 117, 238,
	237, 70, 113, 217, -12, 275, -19, -14, -25, -9,
	-224, 18, -225, -226, 58, 83, 102, 199, 117, 78,
	237, -224, -43, 196, -40, 4, -185, -187, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 89, 93, 94, 96, 98, 103, 108, 109, 114,
	117, 125, 127, 128, 133, 136, 139, 141, 142, 143,
	144, 145, 147, 148, 150, 152, 149, 155, 157, 158,
	164, 167, 170, 171, 174, 177, 178, 179, 181, 182,
	186, 184, 185, 187, 189, 191, 192, 194, 197, 198,
	200, 201, 203, 204, 206, 208, 210, 211, 214, 212,
	218, 219, 226, 230, 231, 232, 233, 236, 237, 238,
	241, 242, 243, 247, 252, 253, 254, 255, 30, 31,
	32, 34, 35, 38, 39, 43, 44, 45, 47, 72,
	74, 75, 88, 90, 95, 104, 106, 110, 111, 118,
	119, 120, 122, 131, 154, 156, 165, 169, 173, 175,
	180, 193, 207, 213, 215, 221, 222, 223, 227, 228,
	244, 245, -108, 136, 201, 226, -109, -107, -178, 221,
	145, -70, -40, 196, 4, 70, 51, 71, 103, 113,
	114, 128, 218, 221, 226, 18, 58, -229, 226, 226,
	-229, -229, -42, 226, 224, -43, -228, 217, 217, -97,
	70, 235, -27, -29, -28, -59, -60, 234, 121, 87,
	163, -26, -28, -205, -207, 181, -204, -40, -207, -56,
	-57, 18, 80, 279, -149, -46, 161, -40, -80, 275,
	-3, -149, 110, -40, -49, 110, -46, 100, 123, 123,
	-150, -149, -40, 110, -50, 110, -49, -71, 110, -70,
	-154, -153, -181, 4, -185, -187, -186, 244, 49, 59,
	101, 116, 124, 126, 132, 134, 146, 166, 168, 190,
	205, 160, 279, 160, -40, -108, 45, -108, -110, -38,
	-39, 125, 177, 224, 260, 100, 255, -53, 5, 76,
	-73, 277, 100, -221, 160, 100, 100, 100, -177, 100,
	255, 125, 177, 217, -111, -38, -39, -111, 224, -43,
	-83, -149, -70, 110, 113, -40, 110, -59, -60, -82,
	-100, -101, 135, 159, -85, 18, 80, -85, -85, 37,
	276, 276, 279, -207, -64, 275, -74, -151, -122, 268,
	-124, 266, 267, 272, 151, 256, -133, -46, -125, 9,
	275, -136, -202, -28, 88, 24, -134, -135, 193, -40,
	7, 8, 5, 6, -44, -157, -166, 229, 91, 153,
	41, -200, -201, 4, -185, -180, -158, -168, -162, -165,
	122, 49, 63, 66, 64, 67, 202, 239, 42, 90,
	169, 173, 215, 227, 228, 110, 154, 111, 47, 104,
	131, 82, 31, 32, 34, 35, 43, 44, 72, 74,
	75, 95, 118, 119, 120, 156, 180, 207, 213, 222,
	223, 245, -186, -169, -170, -163, -164, -171, -74, -80,
	268, -46, 275, -78, -118, -117, -116, 273, 277, -79,
	-141, -122, 76, -35, 184, -34, 17, 19, 83, 242,
	88, 184, 184, 88, 280, -150, -48, -46, -48, 203,
	-40, 25, 88, -37, 279, 40, 187, 88, 279, 88,
	276, 279, -220, -69, 217, 70, -47, -40, 268, -226,
	-220, 25, 279, 279, 133, -52, 139, 150, 108, -176,
	76, -183, -175, -142, 9, 229, 91, 160, -182, 8,
	267, -174, -181, 5, 7, 266, -176, 76, 61, -184,
	5, 4, -166, -142, 76, 136, 122, 277, -179, 4,
	-185, -187, -186, -188, 18, 20, 21, 22, 23, 24,
	25, 26, 27, 36, 41, 42, 46, 48, 50, 56,
	58, 62, 63, 64, 65, 66, 67, 76, 77, 79,
	80, 81, 84, 85, 87, 91, 92, 97, 99, 100,
	102, 105, 107, 112, 113, 115, 121, 123, 129, 130,
	135, 137, 138, 151, 153, 159, 160, 161, 162, 163,
	172, 176, 183, 188, 199, 202, 209, 216, 217, 220,
	224, 225, 229, 234, 235, 239, 240, 246, 248, 249,
	250, 251, -178, -223, 97, -220, -178, -178, -178, -178,
	133, -178, 279, 279, -43, -37, 279, 275, 151, -41,
	110, -40, 151, -82, -101, -100, -102, -122, 18, -122,
	-124, -27, -27, -27, -61, -145, -122, -204, 25, -63,
	-40, -66, 279, 100, 10, 48, 28, 266, 267, 268,
	269, 270, 263, 264, 265, 262, 258, 259, 260, 54,
	140, 195, 12, 13, 14, 22, 162, 134, 256, 205,
	124, 30, 112, 25, 4, -122, -122, -122, -122, -122,
	168, -28, -122, -72, -78, -28, -130, 273, 275, -78,
	275, 5, 5, 275, -137, -122, -208, 252, 97, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 175, -173, 247, -173, -173, -159,
	275, -159, -160, 275, -159, 257, 275, -66, -46, -118,
	-122, -179, 268, 279, 276, 279, 224, -98, 56, 50,
	-113, 110, 50, -189, -40, 56, -190, 46, 235, 176,
	99, -98, 56, -98, 56, 56, -149, 224, 224, -49,
	-40, -115, 249, -104, -19, 275, 76, 25, -104, -75,
	-76, -152, -77, -46, 275, -40, -40, -49, -50, -70,
	-71, -12, -153, 224, 279, -69, -63, -117, -116, 100,
	226, -39, -38, -51, 179, 208, 185, 200, 279, 8,
	7, 7, 5, -179, -222, -40, -39, -38, -149, -54,
	-55, -114, -113, -191, -189, 113, 235, 88, 160, 151,
	88, -103, 193, 194, 279, -33, 26, 79, 275, 279,
	276, -115, -151, -67, -147, -149, -28, -148, 275, -155,
	-156, -158, -167, -161, -165, -166, 33, 39, 38, 219,
	118, 119, 120, 207, 31, 180, 95, 82, 75, 74,
	156, 35, 34, -169, -170, -163, -164, 72, 222, 223,
	32, 44, 43, 245, 213, -70, 221, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, -122, -122,
	-122, -122, -122, -122, -122, -122, -122, -122, 134, 205,
	30, 112, 224, 153, 151, 229, 91, 236, 80, 157,
	-230, 216, 27, -128, -28, 275, -179, -133, 193, 275,
	276, 279, -72, -132, 274, -122, -130, -72, 276, 276,
	-72, 246, 18, 80, 268, -94, 254, 143, 73, 109,
	142, -95, 198, 7, -140, -139, 248, -209, 93, 105,
	275, 276, 276, -122, -89, -172, 4, 254, 143, 73,
	109, 142, 198, -90, -122, -91, -123, -124, 266, 267,
	272, 275, 193, -92, -122, -72, -122, 36, 130, 225,
	-93, -122, 100, -72, -122, -122, -122, -72, -72, -72,
	275, 7, 7, 221, 7, -115, 276, 274, 283, -141,
	-34, -46, -40, -40, 151, -113, 110, -155, -40, 275,
	275, 127, 127, -40, -40, 110, -40, 110, -40, -40,
	-35, 184, -40, -40, 184, -84, 188, -122, -106, 160,
	-68, -46, 244, -40, -84, -66, 279, 260, -68, -37,
	-222, -47, -222, -38, 233, 53, 179, -183, -94, 279,
	276, 279, -41, 113, -70, -46, 88, -40, -145, -15,
	-19, -14, -25, -9, -40, -81, 105, 279, 59, -88,
	126, 146, 101, 132, 190, 116, -119, 280, -144, -143,
	25, -40, -28, -148, -147, -65, 24, -94, 275, 255,
	-122, 224, -230, 216, -128, -122, 153, 229, 91, 236,
	80, 157, 100, 275, -123, -123, -72, 275, -72, -122,
	279, 274, 274, 279, 276, -60, 279, -59, -122, -72,
	-72, 276, 224, 224, 224, 224, 275, 276, -138, -139,
	84, -122, -214, 167, 275, 275, -122, 25, 276, 100,
	276, -96, 172, 276, 10, 266, 267, 268, 269, 270,
	263, 264, 265, 262, 258, 259, 260, 54, 140, 195,
	12, 13, 14, 124, 112, -123, -123, -123, -72, 275,
	276, -126, -127, 100, 97, 25, -93, -93, -93, 276,
	100, -72, 279, 279, 279, 276, 276, 276, 7, 276,
	279, 276, 255, 276, -81, -122, 224, 224, 88, 151,
	-192, -190, -122, -63, 275, 275, -32, 83, 203, -99,
	88, -37, 88, -37, 224, -98, 56, 224, -74, -84,
	55, 276, 279, -115, -76, -141, 276, -40, -114, 275,
	-41, 275, 275, -40, 276, -129, 107, 37, -147, 126,
	126, -147, -88, 126, -86, 166, -86, -86, -144, -179,
	281, -40, 275, 276, 273, 273, 7, -122, -122, -123,
	-123, 100, 275, -122, -131, -155, 22, 22, 276, -72,
	276, 279, 276, -122, -130, 276, 246, -60, -60, -60,
	143, 109, 142, -95, 142, -95, -95, 7, 5, 85,
	-122, 220, -215, -40, 275, 249, -59, 276, -155, -122,
	-126, -122, -155, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, 80, 151, 157, -123, 279, -72, 276, -127, -126,
	-122, -122, -155, 276, 276, 276, -72, -122, -122, -122,
	276, 7, -129, 274, -40, -40, -113, 88, -193, 56,
	-194, 48, 151, 153, 235, 176, 46, 76, 183, 276,
	276, -63, -63, 151, 76, 151, 76, 69, 231, -40,
	-40, -46, -40, -40, -40, -105, 275, 160, -19, -46,
	-84, 260, -62, -146, -40, -203, 275, -200, -201, -44,
	275, -54, -62, 160, -210, 250, -122, -72, -147, -147,
	-87, 240, 160, 126, -147, -121, -120, 98, 149, 275,
	-63, -143, 274, 7, 7, 276, 22, 22, -122, -131,
	276, 279, -122, -122, 276, -122, 5, -122, 276, 276,
	276, 276, -122, -219, -40, -122, 276, 276, -127, 100,
	80, 157, 275, -122, 276, 276, 279, 276, 276, 276,
	-210, -113, -40, -70, 153, 127, 275, -123, -46, -112,
	-227, 57, 214, 276, 276, 153, 153, -122, -155, -37,
	-37, 224, 224, 81, -63, 56, -80, -28, 275, 276,
	279, -45, -78, 48, -45, -122, 275, -62, 276, 276,
	-46, -211, -213, -40, -87, 275, -122, -147, 279, 282,
	260, -63, 276, 274, 274, -122, -122, 276, -155, 276,
	-60, -212, 171, 276, -123, 100, 275, -131, 276, -122,
	-194, -122, -58, 275, 275, 183, -36, 48, -40, -40,
	237, 152, 276, -40, -112, -146, -33, -70, -33, 276,
	-72, 276, -112, 275, 279, 25, -63, -120, -179, 276,
	276, -60, 37, -123, -131, 276, 276, 276, -197, 141,
	-63, -63, -46, -31, 240, -70, 203, -115, -45, -60,
	-112, -62, -213, -215, 276, -216, 178, 194, -72, 276,
	-195, -198, -196, 160, 101, 170, 206, 276, 276, -58,
	-122, -75, -33, 276, 276, 276, -217, -218, 30, 232,
	61, -122, -217, -196, 160, -198, 160, 237, 78, -197,
	-115, -112, -218, 174, 96, 193, 174, 96, -199, 148,
	187, 40, 203, -199, -195, 22, 16, 153, 76, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 320, 0, 0,
	0, 290, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 322, 220, 319, -2, 330, 0, 0, 0, 328,
	304, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 819, 258, 732, 733, 734, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 767, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 93, 786, 823, 834, 98, 108, 0, 887,
	-2, 112, 62, 819, 141, 142, 0, 144, 158, 0,
	0, 0, 156, 0, 0, 153, 0, 263, 251, 263,
	248, 249, 250, 253, 0, 244, 0, 321, 0, 0,
	0, 219, -2, 300, 301, -2, 0, 325, 325, 325,
	0, 0, 301, 0, 309, 809, 312, 715, 310, 0,
	0, 327, 326, 0, 305, 387, 0, 705, 350, 0,
	2, 0, 869, 0, 0, 869, 0, 0, 0, 0,
	0, 393, 54, 869, 45, 869, 701, 58, 869, 60,
	0, 72, 74, 740, 741, 742, 743, 892, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 0, 0, 0, 257, 94, 859, 96, 97, 99,
	100, 0, 0, 0, 0, 0, 0, 111, 136, 137,
	63, 0, 0, 160, 0, 0, 0, 0, 149, 0,
	150, 0, 152, 0, 246, 259, 260, 247, 0, 255,
	45, 391, 0, 869, 736, 265, 869, -2, 0, 296,
	337, 338, 0, 0, 0, 323, 324, 0, 0, 0,
	292, 293, 0, 311, 0, 0, 353, 693, 697, 698,
	475, 0, 0, 0, 0, 0, 0, 554, 555, 556,
	0, 558, 559, 560, 864, 0, 564, 565, 883, 705,
	718, 719, 720, 721, 0, 0, 0, 726, 727, 728,
	677, 603, 574, -2, -2, 716, 414, 415, 416, 417,
	-2, 894, 578, 580, 582, 583, 584, 585, 0, 865,
	879, 880, 886, 890, 891, 869, 876, 870, 860, 867,
	875, 770, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 739, 438, 439, 444, 445, 447, 353, 351,
	388, 389, 0, 706, 684, 678, 679, 0, 0, 0,
	690, 688, 689, 22, 241, 24, 0, 241, 241, 0,
	0, 0, 0, 0, 0, 397, 0, 269, 0, 0,
	394, 0, 0, 56, 0, 43, 44, 0, 0, 0,
	320, 0, 0, 77, 0, 766, 703, 708, 711, 83,
	0, 0, 0, 0, 0, 103, 123, 124, 125, 104,
	106, 113, 115, 116, 117, 126, 127, 128, 129, 213,
	0, 215, 139, 140, 729, 0, 105, 107, 109, 110,
	130, 131, 0, 133, 134, 135, 458, 0, 64, 744,
	745, 746, 747, 748, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 956, 957, 958, 959, 960, 961, 962,
	963, 964, 965, 966, 967, 968, 969, 970, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 143, 145, 0, 157, 146, 147, 148, 155,
	151, 154, 0, 0, 254, 216, 0, 164, 0, 0,
	869, 735, 0, 299, 335, 336, 339, 342, 343, 340,
	475, 306, 307, 308, 331, 332, 230, 313, 0, 0,
	712, 397, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 687, 0, 0, 696, 479, 480, 481, 502, 503,
	0, -2, 635, 0, 561, 562, 563, 0, 0, -2,
	0, 723, 472, 0, 0, 676, 605, 0, 0, 0,
	0, 0, 0, 0, 656, 662, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 441, 452, 449, 448, 430,
	0, 429, 427, 0, 431, 0, 0, 397, 0, 685,
	0, 682, 683, 0, 692, 0, 0, 0, 0, 240,
	26, 869, 0, 36, 0, 0, 186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 281, 0, 276, 271, 0, 0, 0, 281, 353,
	283, 285, 286, 0, 0, 395, 55, 702, 45, 61,
	59, 67, 73, 0, 0, 78, 79, 709, 710, 0,
	0, 101, 102, 264, 0, 120, 0, 122, 0, 214,
	731, 730, 472, 65, 159, 91, 261, 262, 392, 0,
	163, 165, 167, 168, 169, 736, 0, 0, 0, 0,
	0, 341, 344, 345, 0, 334, 228, 229, 320, 0,
	714, 347, 694, 352, 354, 362, 378, 365, 0, 476,
	403, 404, 405, 406, 407, 472, 410, 411, 412, 413,
	421, 422, 423, 424, 425, 426, 435, 0, 420, 420,
	420, 432, 433, 436, 437, 442, 443, 454, 455, 456,
	453, 453, 453, 450, 451, 477, 0, 482, 483, 484,
	485, 486, 487, 488, 489, 490, -2, -2, -2, 494,
	495, 496, -2, -2, -2, 500, 501, -2, 0, 0,
	687, 0, 0, 508, 0, 511, 513, 515, 0, 0,
	0, 0, 686, 525, 668, 0, 695, 510, 0, 0,
	557, 0, 0, 0, 641, 635, 642, 0, -2, 566,
	330, 0, 0, 0, 0, 724, 459, 460, 461, 462,
	463, 464, 473, 0, 675, 671, 0, 613, 0, 0,
	0, 579, 581, 0, 0, 0, 645, 646, 647, 648,
	649, 650, 651, 0, 0, 0, 0, 527, 0, 0,
	0, 0, 883, 0, 635, 661, 0, 0, 0, 0,
	0, 635, 0, 667, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 347, 390, 680, 0, 691,
	25, 232, 0, 0, 0, 28, 869, 172, 0, 0,
	0, 0, 0, 243, 37, 869, 45, 869, 45, 38,
	23, 241, 231, 234, 0, 53, 0, 396, 281, 0,
	0, 699, 273, 270, 268, 397, 0, 0, 0, 57,
	75, 704, 76, 95, 118, 119, 121, 114, 132, 0,
	161, 0, 0, 736, 0, 0, 0, 266, 333, 0,
	315, 316, 317, 318, 713, 349, 0, 0, 0, 0,
	0, 0, 384, 384, 384, 382, 378, 0, 364, 377,
	0, 376, -2, 365, 0, 398, 400, 408, 0, 0,
	-2, 0, 0, 0, 526, -2, 509, 512, 514, 516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 636,
	0, 639, 640, 0, -2, 0, 0, 329, 330, 330,
	330, 572, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 573, 0, 0, 0, 0, 0, 587, 0,
	588, 0, 0, 589, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 530, 531, 0, 0,
	590, 659, 660, 0, 0, 0, 0, 0, 0, 595,
	0, 666, 0, 0, 0, 599, 600, 601, 0, 418,
	0, 434, 457, 446, 349, 0, 0, 0, 0, 0,
	170, 185, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 34, 0, 40, 0, 0, 0, 0, 280, 267,
	279, 0, 0, 281, 284, 287, 0, 92, 166, 0,
	0, 164, 0, 0, 314, 607, 0, 0, 355, 0,
	0, 0, 0, 0, 379, 383, 380, 381, 363, 360,
	0, 374, 0, 367, 0, 0, 0, 478, -2, 0,
	0, 0, 0, -2, 0, 637, 0, 0, 669, 0,
	630, 0, -2, 636, 643, 567, 0, 0, 0, 0,
	465, 466, 467, 468, 469, 470, 471, 0, 725, 670,
	674, 0, 611, 612, 616, 0, 0, 577, 0, 644,
	653, 654, 528, 532, 533, 534, 535, 536, 537, 538,
	539, 540, -2, -2, -2, 544, 545, 546, -2, -2,
	-2, 0, 0, 0, 655, 0, 0, 633, 657, 658,
	663, 664, 0, 592, 593, 594, 665, 0, 0, 0,
	440, 0, 607, 681, 236, 238, 27, 0, 171, 0,
	174, 0, 0, 177, 178, 0, 0, 0, 0, 187,
	194, 0, 0, 0, 42, 0, 0, 242, 0, 45,
	45, 233, 0, 0, 235, 0, 0, 0, 272, 700,
	282, 0, 0, 221, 227, 227, 0, 575, 576, 0,
	0, 0, 0, 0, 302, 0, 348, 346, 368, 0,
	370, 0, 0, 0, 372, 0, 358, 0, 357, 0,
	0, 366, 401, 0, 0, 409, 0, 0, -2, 0,
	519, 0, -2, -2, 629, 636, 722, 330, 568, 570,
	571, 474, 673, 618, 615, 0, 602, 586, 652, 0,
	0, 0, 0, 636, 632, 591, 0, 597, 598, 419,
	303, 29, 0, 175, 176, 179, 0, 181, 196, 188,
	0, 191, 192, 189, 0, 31, 32, 41, 47, 33,
	39, 0, 0, 0, 0, 0, 288, 289, 0, 194,
	0, 230, 717, 0, 230, 0, 0, 0, 162, 194,
	0, 606, 608, 0, 369, 0, 386, 371, 0, 361,
	0, 0, 375, 402, 399, -2, -2, 520, 638, 631,
	0, 330, 0, 604, -2, 0, 0, 0, 634, 0,
	173, 0, 200, 0, 0, 0, 49, 0, 237, 239,
	0, 275, 397, 278, 183, 222, 223, 226, 224, 227,
	330, 194, 217, 0, 0, 0, 0, 359, 356, 373,
	569, 621, 0, -2, 0, 552, 596, 180, 205, 0,
	0, 0, 196, 35, 0, 46, 0, 277, 230, 0,
	184, 0, 609, 610, 385, 0, 0, 0, 617, 553,
	182, 201, 202, 0, 197, 198, 199, 195, 193, 200,
	48, 397, 225, 567, 194, 614, 619, 622, -2, 837,
	763, 0, 620, 203, 0, 204, 0, 0, 0, 205,
	274, 218, 0, 624, 625, 626, 627, 628, 206, 0,
	209, 210, 0, 207, 190, 0, 208, 211, 212, 623,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 264, 3, 270, 265, 3,
	275, 276, 268, 266, 279, 267, 277, 269, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 283, 278,
	258, 260, 259, 3, 280, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 273, 3, 274, 263, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 281, 262, 282, 272,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 261, 57601, 271, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:656
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:662
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:668
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:688
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:704
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:708
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:725
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:754
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:772
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:781
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:803
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:834
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:835
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1117
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1240
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1322
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1445
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1482
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1502
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1541
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1552
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1558
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1565
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1641
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1645
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1712
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1872
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = (*OnConflict)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1880
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = nil
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			unimplemented()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			unimplemented()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2152
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = true
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = false
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = false
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = true
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2180
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.str = astFullJoin
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.str = astLeftJoin
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = astRightJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.str = astInnerJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2599
		{
			unimplemented()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			unimplemented()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2604
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			unimplemented()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = nil
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2774
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			unimplemented()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			unimplemented()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2877
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3288
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3289
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			unimplemented()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3347
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3371
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			unimplemented()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3416
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3441
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3457
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3467
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3471
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3479
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3808
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4000
		{
			unimplemented()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = DNull
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
