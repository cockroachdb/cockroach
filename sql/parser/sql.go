// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:287
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIGSERIAL = 57374
const BIT = 57375
const BLOB = 57376
const BOOL = 57377
const BOOLEAN = 57378
const BOTH = 57379
const BY = 57380
const BYTEA = 57381
const BYTES = 57382
const CASCADE = 57383
const CASE = 57384
const CAST = 57385
const CHAR = 57386
const CHARACTER = 57387
const CHARACTERISTICS = 57388
const CHECK = 57389
const COALESCE = 57390
const COLLATE = 57391
const COLLATION = 57392
const COLUMN = 57393
const COLUMNS = 57394
const COMMIT = 57395
const COMMITTED = 57396
const CONCAT = 57397
const CONFLICT = 57398
const CONSTRAINT = 57399
const COVERING = 57400
const CREATE = 57401
const CROSS = 57402
const CUBE = 57403
const CURRENT = 57404
const CURRENT_CATALOG = 57405
const CURRENT_DATE = 57406
const CURRENT_ROLE = 57407
const CURRENT_TIME = 57408
const CURRENT_TIMESTAMP = 57409
const CURRENT_USER = 57410
const CYCLE = 57411
const DATA = 57412
const DATABASE = 57413
const DATABASES = 57414
const DATE = 57415
const DAY = 57416
const DEC = 57417
const DECIMAL = 57418
const DEFAULT = 57419
const DEFERRABLE = 57420
const DELETE = 57421
const DESC = 57422
const DISTINCT = 57423
const DO = 57424
const DOUBLE = 57425
const DROP = 57426
const ELSE = 57427
const ENCODING = 57428
const END = 57429
const ESCAPE = 57430
const EXCEPT = 57431
const EXISTS = 57432
const EXPLAIN = 57433
const EXTRACT = 57434
const FALSE = 57435
const FAMILY = 57436
const FETCH = 57437
const FILTER = 57438
const FIRST = 57439
const FLOAT = 57440
const FLOORDIV = 57441
const FOLLOWING = 57442
const FOR = 57443
const FORCE_INDEX = 57444
const FOREIGN = 57445
const FROM = 57446
const FULL = 57447
const GRANT = 57448
const GRANTS = 57449
const GREATEST = 57450
const GROUP = 57451
const GROUPING = 57452
const HAVING = 57453
const HIGH = 57454
const HOUR = 57455
const IF = 57456
const IFNULL = 57457
const IN = 57458
const INDEX = 57459
const INDEXES = 57460
const INITIALLY = 57461
const INNER = 57462
const INSERT = 57463
const INT = 57464
const INT64 = 57465
const INTEGER = 57466
const INTERSECT = 57467
const INTERVAL = 57468
const INTO = 57469
const IS = 57470
const ISOLATION = 57471
const JOIN = 57472
const KEY = 57473
const KEYS = 57474
const LATERAL = 57475
const LEADING = 57476
const LEAST = 57477
const LEFT = 57478
const LEVEL = 57479
const LIKE = 57480
const LIMIT = 57481
const LOCAL = 57482
const LOCALTIME = 57483
const LOCALTIMESTAMP = 57484
const LOW = 57485
const LSHIFT = 57486
const MATCH = 57487
const MINUTE = 57488
const MONTH = 57489
const NAME = 57490
const NAMES = 57491
const NATURAL = 57492
const NEXT = 57493
const NO = 57494
const NO_INDEX_JOIN = 57495
const NORMAL = 57496
const NOT = 57497
const NOTHING = 57498
const NULL = 57499
const NULLIF = 57500
const NULLS = 57501
const NUMERIC = 57502
const OF = 57503
const OFF = 57504
const OFFSET = 57505
const ON = 57506
const ONLY = 57507
const OR = 57508
const ORDER = 57509
const ORDINALITY = 57510
const OUT = 57511
const OUTER = 57512
const OVER = 57513
const OVERLAPS = 57514
const OVERLAY = 57515
const PARTIAL = 57516
const PARTITION = 57517
const PLACING = 57518
const POSITION = 57519
const PRECEDING = 57520
const PRECISION = 57521
const PRIMARY = 57522
const PRIORITY = 57523
const RANGE = 57524
const READ = 57525
const REAL = 57526
const RECURSIVE = 57527
const REF = 57528
const REFERENCES = 57529
const RENAME = 57530
const REPEATABLE = 57531
const RELEASE = 57532
const RESTRICT = 57533
const RETURNING = 57534
const REVOKE = 57535
const RIGHT = 57536
const ROLLBACK = 57537
const ROLLUP = 57538
const ROW = 57539
const ROWS = 57540
const RSHIFT = 57541
const SAVEPOINT = 57542
const SEARCH = 57543
const SECOND = 57544
const SELECT = 57545
const SERIAL = 57546
const SERIALIZABLE = 57547
const SESSION = 57548
const SESSION_USER = 57549
const SET = 57550
const SHOW = 57551
const SIMILAR = 57552
const SIMPLE = 57553
const SMALLINT = 57554
const SMALLSERIAL = 57555
const SNAPSHOT = 57556
const SOME = 57557
const SQL = 57558
const START = 57559
const STRICT = 57560
const STRING = 57561
const STORING = 57562
const SUBSTRING = 57563
const SYMMETRIC = 57564
const TABLE = 57565
const TABLES = 57566
const TEXT = 57567
const THEN = 57568
const TIME = 57569
const TIMESTAMP = 57570
const TIMESTAMPTZ = 57571
const TO = 57572
const TRAILING = 57573
const TRANSACTION = 57574
const TREAT = 57575
const TRIM = 57576
const TRUE = 57577
const TRUNCATE = 57578
const TYPE = 57579
const UNBOUNDED = 57580
const UNCOMMITTED = 57581
const UNION = 57582
const UNIQUE = 57583
const UNKNOWN = 57584
const UPDATE = 57585
const UPSERT = 57586
const USER = 57587
const USING = 57588
const VALID = 57589
const VALIDATE = 57590
const VALUE = 57591
const VALUES = 57592
const VARCHAR = 57593
const VARIADIC = 57594
const VARYING = 57595
const WHEN = 57596
const WHERE = 57597
const WINDOW = 57598
const WITH = 57599
const WITHIN = 57600
const WITHOUT = 57601
const YEAR = 57602
const ZONE = 57603
const NOT_LA = 57604
const WITH_LA = 57605
const POSTFIXOP = 57606
const UMINUS = 57607

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4471

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	284, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	164, 301,
	192, 301,
	282, 301,
	284, 301,
	-2, 311,
	-1, 44,
	1, 304,
	164, 304,
	192, 304,
	282, 304,
	284, 304,
	-2, 310,
	-1, 53,
	1, 21,
	284, 21,
	-2, 330,
	-1, 245,
	1, 139,
	284, 139,
	-2, 811,
	-1, 277,
	139, 340,
	163, 340,
	-2, 307,
	-1, 280,
	139, 339,
	163, 339,
	-2, 305,
	-1, 392,
	139, 339,
	163, 339,
	-2, 308,
	-1, 448,
	281, 755,
	-2, 748,
	-1, 449,
	281, 756,
	-2, 749,
	-1, 455,
	5, 472,
	281, 472,
	-2, 894,
	-1, 477,
	5, 438,
	-2, 870,
	-1, 478,
	5, 466,
	281, 466,
	-2, 872,
	-1, 479,
	5, 446,
	-2, 873,
	-1, 480,
	5, 445,
	-2, 874,
	-1, 481,
	5, 466,
	281, 466,
	-2, 877,
	-1, 482,
	5, 466,
	281, 466,
	-2, 878,
	-1, 483,
	5, 467,
	-2, 881,
	-1, 484,
	5, 433,
	-2, 882,
	-1, 485,
	5, 433,
	-2, 883,
	-1, 486,
	5, 448,
	-2, 886,
	-1, 487,
	5, 434,
	-2, 891,
	-1, 488,
	5, 435,
	-2, 892,
	-1, 489,
	5, 436,
	-2, 893,
	-1, 490,
	5, 433,
	-2, 897,
	-1, 491,
	5, 439,
	-2, 902,
	-1, 492,
	5, 437,
	-2, 905,
	-1, 493,
	5, 464,
	281, 464,
	-2, 907,
	-1, 494,
	5, 468,
	-2, 910,
	-1, 495,
	5, 470,
	-2, 911,
	-1, 496,
	5, 463,
	281, 463,
	-2, 915,
	-1, 761,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	240, 311,
	-2, 576,
	-1, 769,
	281, 733,
	-2, 722,
	-1, 974,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 506,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 507,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 508,
	-1, 980,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 512,
	-1, 981,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 513,
	-1, 982,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 514,
	-1, 985,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 519,
	-1, 1016,
	172, 646,
	-2, 649,
	-1, 1175,
	89, 311,
	125, 311,
	139, 311,
	163, 311,
	167, 311,
	240, 311,
	-2, 388,
	-1, 1183,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 520,
	-1, 1188,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 521,
	-1, 1207,
	172, 645,
	-2, 648,
	-1, 1356,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 522,
	-1, 1361,
	128, 0,
	-2, 532,
	-1, 1370,
	172, 647,
	-2, 650,
	-1, 1411,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 557,
	-1, 1412,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 558,
	-1, 1413,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 559,
	-1, 1417,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 563,
	-1, 1418,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 564,
	-1, 1419,
	12, 0,
	13, 0,
	14, 0,
	264, 0,
	265, 0,
	266, 0,
	-2, 565,
	-1, 1521,
	128, 0,
	-2, 533,
	-1, 1525,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 536,
	-1, 1526,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 538,
	-1, 1610,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 537,
	-1, 1611,
	30, 0,
	116, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 539,
	-1, 1619,
	128, 0,
	-2, 566,
	-1, 1659,
	128, 0,
	-2, 567,
	-1, 1705,
	30, 0,
	138, 0,
	210, 0,
	262, 0,
	-2, 869,
}

const sqlNprod = 1008
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20735

var sqlAct = [...]int{

	449, 1704, 1686, 1562, 1726, 842, 1664, 1687, 1703, 909,
	1688, 447, 850, 1390, 718, 1597, 1492, 281, 446, 1482,
	439, 31, 1584, 1509, 509, 918, 1449, 1483, 1503, 764,
	594, 87, 1497, 890, 87, 1362, 303, 893, 246, 88,
	1114, 87, 1172, 1266, 411, 1333, 1210, 1363, 87, 87,
	1171, 1342, 87, 441, 497, 87, 87, 87, 766, 1162,
	1265, 87, 87, 87, 87, 699, 329, 696, 286, 1029,
	892, 515, 818, 851, 827, 998, 1033, 1158, 14, 1001,
	795, 799, 1023, 921, 20, 87, 714, 286, 1068, 288,
	43, 10, 280, 567, 552, 6, 1120, 380, 421, 885,
	720, 538, 324, 518, 326, 330, 66, 520, 412, 381,
	510, 511, 68, 919, 578, 422, 549, 43, 319, 67,
	331, 896, 8, 69, 64, 396, 322, 395, 291, 844,
	321, 394, 83, 415, 243, 569, 565, 74, 531, 315,
	548, 289, 1603, 43, 1071, 1604, 1733, 540, 540, 913,
	70, 540, 843, 847, 44, 1701, 1026, 1694, 1583, 1685,
	913, 45, 1524, 1680, 285, 299, 913, 300, 306, 1170,
	300, 27, 311, 270, 316, 723, 300, 722, 311, 529,
	327, 1661, 1126, 1655, 1524, 1646, 913, 309, 1583, 1637,
	293, 1612, 913, 725, 1524, 1027, 1607, 1594, 278, 913,
	1583, 1591, 285, 1582, 1592, 277, 1583, 1237, 722, 1254,
	1255, 1256, 1567, 1566, 724, 913, 913, 1203, 723, 1520,
	739, 1547, 27, 1527, 1203, 1650, 1203, 1523, 1028, 1025,
	1524, 499, 721, 49, 1459, 498, 725, 913, 1366, 87,
	87, 1203, 1322, 1316, 1283, 1317, 1317, 1284, 1281, 1205,
	1424, 1203, 1251, 51, 1206, 1280, 1279, 724, 1203, 1203,
	1207, 1204, 914, 1203, 730, 913, 1203, 1369, 815, 1586,
	87, 814, 87, 1140, 87, 546, 87, 816, 547, 49,
	52, 1160, 1209, 49, 1030, 1142, 913, 47, 865, 399,
	1009, 87, 908, 48, 879, 393, 1242, 541, 541, 51,
	407, 541, 87, 51, 690, 689, 559, 730, 558, 740,
	347, 46, 387, 87, 87, 87, 298, 87, 512, 512,
	1203, 406, 513, 513, 392, 1257, 52, 723, 53, 513,
	52, 49, 508, 47, 49, 504, 593, 47, 354, 48,
	503, 1252, 1024, 48, 366, 725, 1702, 87, 1700, 87,
	355, 51, 740, 1693, 51, 1237, 1656, 846, 1126, 329,
	329, 46, 1696, 1181, 741, 1593, 724, 596, 87, 1552,
	87, 87, 87, 87, 1548, 87, 1540, 1539, 52, 87,
	1534, 52, 1533, 1532, 87, 386, 1144, 300, 47, 721,
	87, 544, 539, 1531, 48, 693, 1253, 1518, 330, 330,
	1477, 1439, 384, 1434, 1433, 1432, 597, 741, 87, 46,
	1006, 87, 65, 331, 331, 588, 730, 506, 1373, 1351,
	1332, 598, 1237, 1288, 543, 1285, 316, 1273, 300, 532,
	532, 1264, 408, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 1236, 278, 1242, 1237, 1233, 286, 1231, 1220,
	277, 1214, 530, 533, 1141, 454, 501, 1085, 1040, 1039,
	772, 1248, 1249, 1250, 769, 1247, 1244, 1245, 1246, 1238,
	1239, 1240, 1241, 1243, 406, 405, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 555, 1392, 692, 1649, 556,
	1251, 1629, 1628, 1621, 1007, 1600, 582, 589, 1589, 512,
	1581, 1609, 679, 513, 1559, 683, 684, 685, 87, 686,
	682, 1242, 1545, 688, 596, 1512, 691, 1476, 1516, 1490,
	1360, 703, 87, 1350, 704, 702, 87, 1329, 1328, 87,
	87, 1327, 709, 810, 1242, 87, 716, 87, 87, 1325,
	87, 1300, 1299, 87, 812, 87, 87, 1263, 329, 1228,
	1099, 87, 87, 597, 278, 1227, 1252, 278, 278, 821,
	1219, 710, 797, 798, 711, 712, 867, 801, 598, 1200,
	763, 1196, 804, 402, 403, 1003, 800, 803, 1099, 1252,
	1098, 500, 1078, 860, 324, 1038, 912, 330, 807, 726,
	727, 728, 729, 731, 596, 832, 834, 793, 767, 792,
	451, 791, 331, 790, 808, 789, 788, 787, 786, 785,
	845, 1253, 845, 784, 783, 782, 781, 1238, 1239, 1240,
	1241, 1243, 780, 809, 884, 66, 1608, 723, 779, 770,
	768, 68, 46, 597, 1253, 694, 43, 304, 67, 837,
	410, 300, 69, 824, 311, 725, 1353, 1352, 598, 505,
	854, 1605, 863, 1481, 1127, 311, 1054, 873, 311, 840,
	360, 859, 327, 849, 868, 869, 724, 866, 872, 70,
	858, 862, 861, 903, 805, 379, 843, 1287, 806, 1286,
	1182, 375, 87, 1246, 1238, 1239, 1240, 1241, 1243, 361,
	777, 1223, 1498, 1393, 87, 87, 1034, 796, 521, 1122,
	522, 1714, 1670, 1247, 1244, 1245, 1246, 1238, 1239, 1240,
	1241, 1243, 1715, 828, 1636, 1467, 730, 723, 434, 284,
	1193, 723, 269, 87, 268, 87, 915, 871, 263, 264,
	57, 1575, 1191, 1574, 1237, 725, 773, 1136, 1312, 725,
	1292, 820, 587, 586, 1291, 580, 575, 1311, 1218, 85,
	1217, 1216, 247, 1215, 596, 283, 724, 1184, 275, 85,
	724, 740, 521, 962, 522, 523, 292, 292, 990, 831,
	302, 923, 58, 302, 308, 302, 521, 929, 522, 302,
	317, 302, 247, 1237, 1004, 864, 358, 839, 888, 810,
	838, 1515, 383, 597, 810, 1082, 1189, 285, 1081, 887,
	1194, 1635, 963, 349, 378, 272, 730, 889, 598, 300,
	730, 237, 1564, 1672, 1084, 590, 741, 534, 87, 87,
	87, 1000, 359, 1242, 87, 1030, 1014, 87, 1723, 523,
	916, 1000, 1302, 87, 87, 87, 87, 87, 300, 87,
	87, 1382, 1682, 523, 820, 1115, 830, 87, 1314, 87,
	819, 740, 906, 907, 1124, 1119, 87, 1113, 1683, 1005,
	1034, 1094, 527, 540, 592, 87, 87, 526, 286, 1110,
	282, 87, 1242, 1096, 1190, 1630, 1714, 1026, 591, 929,
	329, 1192, 1137, 1115, 75, 1117, 1088, 357, 734, 726,
	727, 728, 729, 731, 60, 59, 794, 1030, 87, 760,
	87, 87, 87, 1617, 80, 87, 741, 829, 61, 76,
	273, 1226, 1010, 1015, 87, 1018, 1027, 1252, 1055, 330,
	1309, 87, 1135, 87, 1089, 1343, 1689, 285, 276, 524,
	1063, 77, 1237, 1090, 331, 1713, 1075, 1076, 1077, 1146,
	382, 1109, 1711, 55, 286, 1496, 79, 519, 1177, 1028,
	1025, 1125, 1128, 1690, 62, 951, 1303, 247, 247, 950,
	1132, 1129, 1121, 1130, 1131, 1143, 1139, 1145, 1729, 1134,
	1133, 1121, 1253, 1138, 1565, 1722, 732, 733, 734, 726,
	727, 728, 729, 731, 1455, 728, 729, 731, 85, 56,
	302, 1153, 247, 524, 390, 1151, 901, 1155, 1240, 1241,
	1243, 398, 43, 356, 1154, 1030, 1176, 524, 1156, 292,
	581, 576, 1180, 541, 1456, 369, 1186, 1147, 376, 348,
	302, 1242, 1691, 817, 346, 286, 999, 801, 78, 804,
	397, 302, 302, 302, 988, 535, 1208, 72, 300, 798,
	797, 1247, 1244, 1245, 1246, 1238, 1239, 1240, 1241, 1243,
	350, 352, 875, 1721, 398, 357, 1420, 951, 877, 1692,
	63, 950, 1569, 1024, 1185, 553, 1252, 553, 81, 1187,
	377, 1543, 1568, 1737, 878, 1557, 1294, 397, 75, 1727,
	1463, 286, 1378, 876, 1093, 902, 247, 701, 553, 247,
	247, 247, 1451, 247, 1452, 54, 695, 247, 80, 1466,
	87, 1665, 85, 76, 1379, 687, 1465, 560, 698, 1222,
	1558, 1101, 1510, 1165, 1298, 1100, 1506, 1454, 1728, 1338,
	989, 1253, 1337, 356, 1457, 77, 292, 87, 1168, 719,
	1421, 1319, 1055, 1055, 314, 1730, 1422, 1380, 1341, 313,
	79, 87, 986, 87, 1166, 87, 564, 283, 1199, 87,
	389, 1544, 1201, 1736, 1270, 1271, 1272, 1334, 1462, 1159,
	1313, 87, 1289, 1511, 87, 1212, 1213, 1037, 1620, 1318,
	87, 596, 1296, 1542, 87, 1267, 87, 562, 1453, 928,
	953, 1359, 1232, 1310, 1464, 1195, 1336, 870, 563, 1339,
	1055, 1055, 1055, 1030, 1238, 1239, 1240, 1241, 1243, 1321,
	1320, 1347, 1167, 374, 1262, 372, 371, 1306, 370, 1308,
	597, 367, 1326, 1324, 987, 1275, 1331, 312, 1344, 1345,
	1346, 1268, 78, 778, 1340, 598, 302, 87, 681, 1375,
	1376, 1377, 1036, 1446, 1307, 1305, 1293, 1148, 904, 900,
	825, 545, 854, 542, 302, 537, 528, 302, 841, 525,
	929, 1387, 700, 302, 1576, 856, 857, 1715, 302, 400,
	363, 302, 81, 247, 247, 1372, 584, 296, 820, 553,
	719, 910, 1578, 836, 835, 1394, 300, 820, 1396, 300,
	1315, 928, 953, 833, 929, 1400, 1381, 1383, 1384, 3,
	1658, 929, 87, 87, 87, 1398, 1586, 723, 1335, 1632,
	87, 87, 404, 71, 1651, 952, 87, 848, 87, 1427,
	87, 87, 87, 87, 1460, 1461, 723, 1431, 87, 1055,
	1055, 1044, 401, 929, 925, 911, 717, 1428, 87, 87,
	297, 1445, 364, 82, 725, 1441, 724, 1488, 87, 87,
	557, 1488, 87, 305, 1487, 1367, 1489, 1179, 1487, 1495,
	1489, 87, 87, 1013, 1734, 724, 1735, 1237, 723, 1474,
	1480, 1517, 1494, 1501, 1502, 1513, 1440, 1507, 881, 880,
	1385, 262, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
	1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
	1055, 1047, 1055, 87, 1514, 1478, 1522, 1354, 1282, 1083,
	886, 1080, 1079, 1031, 882, 996, 1529, 952, 1425, 265,
	266, 1386, 302, 825, 929, 1149, 883, 994, 771, 1435,
	271, 1563, 1161, 73, 680, 1470, 925, 368, 951, 1536,
	1048, 1681, 950, 1479, 1225, 1616, 1596, 1035, 776, 25,
	1485, 302, 1541, 247, 427, 1447, 1295, 87, 895, 87,
	894, 87, 599, 300, 300, 585, 574, 300, 87, 450,
	373, 568, 951, 1049, 1046, 577, 950, 1165, 1043, 951,
	502, 452, 926, 950, 1553, 453, 927, 87, 802, 992,
	1500, 991, 1168, 440, 1554, 997, 924, 325, 852, 1556,
	1032, 1577, 1163, 1221, 774, 426, 432, 87, 1166, 87,
	431, 951, 1488, 1011, 423, 950, 1508, 87, 1587, 1487,
	1590, 1489, 1164, 87, 1585, 1571, 1169, 353, 1579, 1050,
	241, 929, 242, 1118, 1475, 905, 1505, 1606, 705, 1304,
	274, 1599, 1602, 1234, 1061, 1053, 302, 1091, 1092, 1051,
	1042, 385, 825, 514, 853, 1097, 365, 917, 1615, 1178,
	409, 1102, 1103, 1105, 1107, 1108, 1167, 1111, 1112, 993,
	1491, 713, 1695, 295, 294, 302, 995, 1123, 891, 362,
	1572, 1573, 1613, 1561, 302, 87, 87, 1045, 929, 87,
	561, 1622, 1625, 886, 553, 874, 1639, 87, 267, 886,
	1055, 1627, 951, 87, 1641, 1488, 950, 1643, 1648, 929,
	1631, 87, 1487, 286, 1489, 1301, 596, 1669, 1504, 1647,
	810, 1640, 1595, 50, 19, 1652, 698, 17, 698, 247,
	302, 16, 300, 1150, 15, 1642, 13, 1653, 12, 87,
	87, 87, 1157, 87, 1657, 11, 1654, 18, 1152, 1174,
	9, 302, 7, 1673, 1667, 597, 24, 23, 413, 413,
	1676, 87, 928, 953, 22, 1197, 1198, 1660, 516, 5,
	598, 1488, 4, 1675, 2, 1679, 1678, 1674, 1487, 1677,
	1489, 1671, 1, 87, 0, 929, 1055, 1161, 0, 0,
	0, 0, 0, 0, 1699, 1698, 928, 953, 0, 0,
	0, 1237, 1709, 928, 953, 0, 1712, 87, 1710, 951,
	723, 0, 1716, 950, 1718, 1719, 0, 1720, 0, 0,
	0, 1717, 0, 1259, 1260, 1261, 0, 0, 725, 1732,
	1731, 0, 1165, 0, 0, 928, 953, 0, 0, 0,
	0, 0, 0, 0, 1645, 0, 1738, 1168, 0, 724,
	0, 0, 0, 0, 0, 0, 1668, 1163, 428, 32,
	0, 706, 708, 1166, 1055, 0, 951, 0, 715, 0,
	950, 0, 0, 0, 0, 0, 0, 1164, 0, 0,
	755, 756, 757, 758, 759, 0, 32, 951, 952, 762,
	1242, 950, 0, 0, 0, 0, 0, 0, 854, 730,
	0, 0, 279, 0, 0, 287, 0, 925, 0, 775,
	0, 0, 32, 1684, 0, 0, 0, 0, 0, 0,
	0, 1167, 952, 0, 287, 0, 928, 953, 719, 952,
	0, 0, 0, 0, 0, 1252, 0, 0, 0, 0,
	0, 925, 0, 0, 740, 0, 0, 0, 925, 1455,
	0, 1450, 1357, 1358, 0, 302, 0, 0, 0, 1448,
	0, 952, 0, 951, 0, 0, 0, 950, 0, 1323,
	0, 825, 0, 698, 0, 0, 811, 1330, 0, 1456,
	925, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	1253, 0, 302, 0, 0, 0, 0, 0, 1174, 741,
	0, 0, 1349, 0, 1174, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 0, 1423, 0, 0, 0, 0,
	0, 0, 0, 928, 953, 1237, 0, 1254, 1255, 1256,
	0, 0, 0, 0, 0, 0, 0, 1519, 0, 0,
	0, 0, 952, 0, 0, 1391, 0, 1451, 0, 1452,
	1244, 1245, 1246, 1238, 1239, 1240, 1241, 1243, 0, 0,
	0, 925, 726, 727, 728, 729, 731, 0, 0, 0,
	1251, 0, 1454, 0, 0, 0, 0, 0, 0, 1457,
	928, 953, 1237, 0, 1254, 1255, 1256, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 953, 0, 0, 0, 249, 0, 0, 0,
	1443, 1444, 825, 0, 1242, 0, 0, 0, 719, 719,
	260, 0, 0, 0, 1468, 0, 1469, 1251, 302, 1471,
	1472, 1473, 0, 1453, 0, 0, 302, 279, 0, 0,
	0, 0, 0, 1257, 1484, 0, 1493, 825, 1484, 952,
	0, 0, 0, 0, 251, 0, 302, 302, 0, 1252,
	302, 261, 0, 0, 0, 0, 0, 0, 925, 719,
	1174, 1242, 0, 250, 252, 413, 0, 928, 953, 0,
	964, 965, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 0, 0, 0, 0, 952, 0, 0, 253,
	0, 1537, 0, 1560, 1253, 0, 1252, 0, 0, 254,
	255, 0, 0, 0, 0, 925, 0, 952, 0, 0,
	0, 0, 0, 0, 256, 1041, 0, 1052, 0, 1062,
	1064, 1069, 1072, 1073, 1074, 0, 925, 0, 279, 0,
	0, 279, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 1555, 516, 247,
	0, 1253, 0, 0, 761, 0, 302, 0, 765, 1248,
	1249, 1250, 0, 1247, 1244, 1245, 1246, 1238, 1239, 1240,
	1241, 1243, 0, 0, 0, 719, 0, 1116, 0, 1619,
	0, 0, 0, 952, 0, 0, 0, 0, 0, 1484,
	0, 0, 0, 0, 0, 302, 0, 1598, 0, 0,
	0, 0, 925, 0, 0, 302, 257, 0, 0, 258,
	0, 719, 0, 0, 259, 0, 1248, 1249, 1250, 0,
	1247, 1244, 1245, 1246, 1238, 1239, 1240, 1241, 1243, 0,
	0, 0, 0, 723, 0, 742, 743, 744, 0, 0,
	0, 0, 715, 0, 0, 745, 0, 0, 0, 0,
	0, 725, 0, 751, 0, 0, 0, 1659, 0, 0,
	32, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 724, 1633, 1634, 32, 0, 1638, 739, 0,
	0, 0, 1484, 0, 0, 247, 0, 0, 0, 0,
	0, 1493, 0, 0, 0, 0, 0, 0, 0, 719,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1183, 0, 730, 0, 1188, 0, 0, 1666, 719, 302,
	0, 247, 0, 0, 723, 0, 742, 743, 744, 752,
	0, 0, 0, 1202, 0, 0, 745, 0, 1484, 1598,
	0, 750, 725, 1211, 751, 0, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 0, 0, 740, 1224, 0,
	0, 302, 1229, 724, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 762, 0, 719, 0, 0, 0, 1069,
	1069, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1290, 741, 730, 0, 0, 723, 0, 742, 743,
	744, 0, 1297, 749, 0, 0, 0, 0, 745, 0,
	752, 0, 0, 0, 725, 0, 751, 0, 0, 413,
	0, 920, 750, 0, 0, 0, 0, 0, 413, 0,
	0, 516, 747, 0, 0, 724, 0, 0, 740, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 0, 0, 0, 748, 0, 736, 737, 738,
	746, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 0, 0, 730, 1355, 0, 1356, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 1361,
	0, 0, 752, 0, 749, 0, 0, 1371, 0, 0,
	0, 0, 0, 1371, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 1388, 0, 0,
	740, 0, 0, 0, 0, 0, 1397, 0, 0, 1399,
	0, 0, 0, 0, 0, 287, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 748, 0, 736, 737,
	738, 0, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 1429, 1430, 0, 0, 0, 0, 0, 0, 1549,
	1436, 1437, 1438, 0, 0, 741, 723, 0, 742, 743,
	744, 0, 0, 0, 0, 0, 749, 0, 745, 0,
	0, 0, 0, 0, 725, 0, 751, 0, 0, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 413, 0,
	0, 1175, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 0, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 1521, 0, 0, 0, 0, 1525, 1526,
	0, 1278, 0, 1528, 0, 730, 0, 0, 1530, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 1002, 742,
	743, 744, 752, 1535, 0, 0, 0, 1538, 0, 745,
	0, 0, 761, 0, 750, 725, 0, 751, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 724, 0, 1546, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1570,
	0, 0, 0, 0, 0, 741, 730, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	1588, 0, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 0, 0, 1601,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 740, 0, 1610, 1611, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	736, 737, 738, 746, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 1624, 0, 0, 0, 0, 0, 920,
	0, 1277, 920, 1626, 0, 0, 723, 0, 742, 743,
	744, 0, 0, 0, 0, 0, 741, 0, 745, 0,
	0, 0, 0, 0, 725, 516, 751, 749, 0, 723,
	0, 742, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 724, 0, 725, 0, 751,
	0, 739, 1237, 0, 1254, 1255, 1256, 0, 0, 0,
	0, 0, 0, 0, 1365, 0, 0, 0, 724, 0,
	0, 0, 0, 0, 739, 0, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 730, 0, 1251, 0, 0,
	0, 0, 1276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 752, 0, 1697, 0, 0, 0, 730, 0,
	0, 0, 0, 0, 750, 0, 1708, 1708, 0, 0,
	0, 0, 0, 0, 747, 752, 0, 0, 0, 0,
	740, 1242, 0, 0, 0, 0, 0, 750, 0, 1708,
	0, 0, 0, 0, 0, 32, 0, 747, 0, 0,
	0, 0, 746, 740, 0, 0, 0, 0, 0, 0,
	1257, 0, 0, 0, 0, 0, 920, 920, 1708, 0,
	920, 0, 0, 0, 0, 746, 1252, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1253, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 0, 1663, 0,
	0, 748, 0, 736, 737, 738, 0, 735, 732, 733,
	734, 726, 727, 728, 729, 731, 0, 0, 0, 0,
	0, 1662, 0, 0, 0, 0, 1248, 1249, 1250, 0,
	1247, 1244, 1245, 1246, 1238, 1239, 1240, 1241, 1243, 0,
	1580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 920, 0, 0, 89, 90,
	600, 91, 601, 602, 603, 604, 605, 606, 607, 608,
	92, 93, 190, 191, 192, 193, 94, 194, 195, 609,
	95, 196, 197, 96, 610, 611, 198, 199, 200, 612,
	201, 613, 333, 614, 97, 98, 99, 0, 100, 615,
	101, 616, 334, 102, 103, 617, 618, 619, 620, 621,
	622, 104, 105, 106, 107, 202, 108, 203, 204, 623,
	624, 109, 625, 626, 627, 110, 111, 628, 112, 629,
	761, 630, 205, 113, 206, 631, 632, 633, 114, 115,
	207, 0, 116, 634, 117, 635, 636, 335, 637, 118,
	208, 638, 209, 639, 119, 120, 210, 211, 640, 641,
	121, 642, 336, 122, 212, 213, 214, 643, 215, 644,
	337, 123, 338, 124, 125, 645, 646, 216, 339, 126,
	340, 647, 127, 648, 649, 128, 0, 129, 130, 131,
	132, 133, 341, 134, 135, 138, 136, 650, 137, 651,
	217, 139, 218, 140, 141, 652, 653, 654, 655, 656,
	142, 219, 342, 143, 343, 220, 144, 145, 657, 221,
	146, 222, 658, 147, 148, 149, 223, 150, 151, 659,
	153, 154, 152, 155, 660, 156, 344, 157, 158, 224,
	159, 0, 248, 160, 161, 661, 225, 162, 163, 662,
	164, 165, 345, 166, 226, 227, 167, 663, 168, 169,
	171, 228, 170, 229, 664, 665, 172, 173, 666, 230,
	231, 232, 667, 668, 174, 233, 234, 669, 175, 176,
	177, 178, 670, 671, 179, 180, 181, 672, 673, 182,
	183, 184, 235, 236, 674, 185, 675, 676, 677, 678,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1348,
	89, 90, 600, 91, 601, 602, 603, 604, 605, 606,
	607, 608, 92, 93, 190, 191, 192, 193, 94, 194,
	195, 609, 95, 196, 197, 96, 610, 611, 198, 199,
	200, 612, 201, 613, 333, 614, 97, 98, 99, 0,
	100, 615, 101, 616, 334, 102, 103, 617, 618, 619,
	620, 621, 622, 104, 105, 106, 107, 202, 108, 203,
	204, 623, 624, 109, 625, 626, 627, 110, 111, 628,
	112, 629, 0, 630, 205, 113, 206, 631, 632, 633,
	114, 115, 207, 0, 116, 634, 117, 635, 636, 335,
	637, 118, 208, 638, 209, 639, 119, 120, 210, 211,
	640, 641, 121, 642, 336, 122, 212, 213, 214, 643,
	215, 644, 337, 123, 338, 124, 125, 645, 646, 216,
	339, 126, 340, 647, 127, 648, 649, 128, 0, 129,
	130, 131, 132, 133, 341, 134, 135, 138, 136, 650,
	137, 651, 217, 139, 218, 140, 141, 652, 653, 654,
	655, 656, 142, 219, 342, 143, 343, 220, 144, 145,
	657, 221, 146, 222, 658, 147, 148, 149, 223, 150,
	151, 659, 153, 154, 152, 155, 660, 156, 344, 157,
	158, 224, 159, 0, 248, 160, 161, 661, 225, 162,
	163, 662, 164, 165, 345, 166, 226, 227, 167, 663,
	168, 169, 171, 228, 170, 229, 664, 665, 172, 173,
	666, 230, 231, 232, 667, 668, 174, 233, 234, 669,
	175, 176, 177, 178, 670, 671, 179, 180, 181, 672,
	673, 182, 183, 184, 235, 236, 674, 185, 675, 676,
	677, 678, 186, 187, 188, 189, 0, 595, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 813, 89,
	90, 600, 91, 601, 602, 603, 604, 605, 606, 607,
	608, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	609, 95, 196, 197, 96, 610, 611, 198, 199, 200,
	612, 201, 613, 333, 614, 97, 98, 99, 0, 100,
	615, 101, 616, 334, 102, 103, 617, 618, 619, 620,
	621, 622, 104, 105, 106, 107, 202, 108, 203, 204,
	623, 624, 109, 625, 626, 627, 110, 111, 628, 112,
	629, 0, 630, 205, 113, 206, 631, 632, 633, 114,
	115, 207, 0, 116, 634, 117, 635, 636, 335, 637,
	118, 208, 638, 209, 639, 119, 120, 210, 211, 640,
	641, 121, 642, 336, 122, 212, 213, 214, 643, 215,
	644, 337, 123, 338, 124, 125, 645, 646, 216, 339,
	126, 340, 647, 127, 648, 649, 128, 0, 129, 130,
	131, 132, 133, 341, 134, 135, 138, 136, 650, 137,
	651, 217, 139, 218, 140, 141, 652, 653, 654, 655,
	656, 142, 219, 342, 143, 343, 220, 144, 145, 657,
	221, 146, 222, 658, 147, 148, 149, 223, 150, 151,
	659, 153, 154, 152, 155, 660, 156, 344, 157, 158,
	224, 159, 0, 248, 160, 161, 661, 225, 162, 163,
	662, 164, 165, 345, 166, 226, 227, 167, 663, 168,
	169, 171, 228, 170, 229, 664, 665, 172, 173, 666,
	230, 231, 232, 667, 668, 174, 233, 234, 669, 175,
	176, 177, 178, 670, 671, 179, 180, 181, 672, 673,
	182, 183, 184, 235, 236, 674, 185, 675, 676, 677,
	678, 186, 187, 188, 189, 448, 437, 438, 435, 436,
	424, 0, 0, 0, 0, 0, 0, 89, 90, 1020,
	91, 0, 0, 0, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 1021, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 1019, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 1022, 0, 89, 90, 418,
	91, 0, 425, 1017, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 517, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 49, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 51, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 332, 496, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 420, 48, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 0, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 49, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 51, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 332, 496, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 420, 48, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 0, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 1065, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 1070, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 1066, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 1067, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 0, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 1426, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 1368, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 448, 437, 438, 435, 436,
	424, 0, 0, 416, 417, 0, 0, 89, 90, 418,
	91, 0, 425, 1016, 0, 430, 0, 0, 0, 92,
	93, 190, 477, 192, 478, 94, 479, 480, 0, 95,
	196, 197, 96, 445, 463, 481, 482, 200, 0, 473,
	0, 456, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 457, 459, 0, 458, 460,
	104, 105, 106, 107, 483, 108, 484, 485, 0, 0,
	109, 0, 0, 0, 476, 111, 0, 112, 0, 0,
	0, 429, 113, 464, 443, 0, 0, 114, 115, 486,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 474,
	0, 209, 0, 119, 120, 470, 472, 0, 0, 121,
	0, 336, 122, 487, 488, 489, 0, 455, 0, 337,
	123, 338, 124, 125, 0, 0, 475, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 419, 137, 444, 471,
	139, 490, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 465, 144, 145, 0, 466, 146,
	222, 0, 147, 148, 149, 491, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 433, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 461, 164,
	165, 345, 166, 492, 227, 167, 0, 168, 169, 171,
	493, 170, 467, 0, 0, 172, 173, 0, 230, 494,
	495, 0, 0, 174, 468, 469, 442, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 462, 0, 182, 183,
	184, 235, 496, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 416, 417, 0, 0, 0, 0, 418,
	767, 1012, 425, 448, 437, 438, 435, 436, 424, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 430, 0, 0, 0, 92, 93, 190,
	477, 192, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 445, 463, 481, 482, 200, 0, 473, 0, 456,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 334,
	102, 103, 0, 457, 459, 0, 458, 460, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 429,
	113, 464, 443, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 335, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 336,
	122, 487, 488, 489, 0, 455, 0, 337, 123, 338,
	124, 125, 0, 0, 475, 339, 126, 340, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 341,
	134, 135, 138, 136, 419, 137, 444, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 342,
	143, 343, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 344, 157, 158, 433, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 461, 164, 165, 345,
	166, 492, 227, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 230, 494, 495, 0,
	0, 174, 468, 469, 442, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 462, 0, 182, 183, 184, 235,
	496, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 420, 0, 448, 437, 438, 435, 436, 424, 0,
	0, 416, 417, 414, 0, 89, 90, 418, 91, 0,
	425, 0, 0, 430, 0, 0, 0, 92, 93, 190,
	477, 192, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 445, 463, 481, 482, 200, 0, 473, 0, 456,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 334,
	102, 103, 0, 457, 459, 0, 458, 460, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 429,
	113, 464, 443, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 335, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 336,
	122, 487, 488, 489, 0, 455, 0, 337, 123, 338,
	124, 125, 0, 0, 475, 339, 126, 340, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 341,
	134, 135, 138, 136, 419, 137, 444, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 342,
	143, 343, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 344, 157, 158, 433, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 461, 164, 165, 345,
	166, 492, 227, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 230, 494, 495, 0,
	0, 174, 468, 469, 442, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 462, 0, 182, 183, 184, 235,
	496, 1374, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 420, 0, 448, 437, 438, 435, 436, 424, 0,
	0, 416, 417, 0, 0, 89, 90, 418, 91, 0,
	425, 0, 0, 430, 0, 0, 0, 92, 93, 190,
	477, 192, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 445, 463, 481, 482, 200, 0, 473, 0, 456,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 334,
	102, 103, 0, 457, 459, 0, 458, 460, 104, 105,
	106, 107, 483, 108, 484, 485, 517, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 429,
	113, 464, 443, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 0, 335, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 336,
	122, 487, 488, 489, 0, 455, 0, 337, 123, 338,
	124, 125, 0, 0, 475, 339, 126, 340, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 341,
	134, 135, 138, 136, 419, 137, 444, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 342,
	143, 343, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 344, 157, 158, 433, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 461, 164, 165, 345,
	166, 492, 227, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 230, 494, 495, 0,
	0, 174, 468, 469, 442, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 462, 0, 182, 183, 184, 235,
	496, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 420, 0, 448, 437, 438, 435, 436, 424, 0,
	0, 416, 417, 0, 0, 89, 90, 418, 91, 0,
	425, 0, 0, 430, 0, 0, 0, 92, 93, 190,
	477, 192, 478, 94, 479, 480, 0, 95, 196, 197,
	96, 445, 463, 481, 482, 200, 0, 473, 0, 456,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 334,
	102, 103, 0, 457, 459, 0, 458, 460, 104, 105,
	106, 107, 483, 108, 484, 485, 0, 0, 109, 0,
	0, 0, 476, 111, 0, 112, 0, 0, 0, 429,
	113, 464, 443, 0, 0, 114, 115, 486, 0, 116,
	0, 117, 0, 1070, 335, 0, 118, 474, 0, 209,
	0, 119, 120, 470, 472, 0, 0, 121, 0, 336,
	122, 487, 488, 489, 0, 455, 0, 337, 123, 338,
	124, 125, 0, 0, 475, 339, 126, 340, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 341,
	134, 135, 138, 136, 419, 137, 444, 471, 139, 490,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 342,
	143, 343, 465, 144, 145, 0, 466, 146, 222, 0,
	147, 148, 149, 491, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 344, 157, 158, 433, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 461, 164, 165, 345,
	166, 492, 227, 167, 0, 168, 169, 171, 493, 170,
	467, 0, 0, 172, 173, 0, 230, 494, 495, 0,
	0, 174, 468, 469, 442, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 462, 0, 182, 183, 184, 235,
	496, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 416, 417, 0, 0, 0, 0, 418, 0, 0,
	425, 448, 437, 438, 435, 436, 424, 0, 0, 0,
	0, 0, 0, 89, 90, 707, 91, 0, 0, 0,
	0, 430, 0, 0, 0, 92, 93, 190, 477, 192,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 445,
	463, 481, 482, 200, 0, 473, 0, 456, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 103,
	0, 457, 459, 0, 458, 460, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 429, 113, 464,
	443, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 336, 122, 487,
	488, 489, 0, 455, 0, 337, 123, 338, 124, 125,
	0, 0, 475, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 419, 137, 444, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 433, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 461, 164, 165, 345, 166, 492,
	227, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 230, 494, 495, 0, 0, 174,
	468, 469, 442, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 462, 0, 182, 183, 184, 235, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 420,
	0, 448, 437, 438, 435, 436, 424, 0, 0, 416,
	417, 0, 0, 89, 90, 418, 91, 0, 425, 0,
	0, 430, 0, 0, 0, 92, 93, 190, 477, 192,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 445,
	463, 481, 482, 200, 0, 473, 0, 456, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 1707,
	0, 457, 459, 0, 458, 460, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 429, 113, 464,
	443, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 336, 122, 487,
	488, 489, 0, 455, 0, 337, 123, 338, 124, 125,
	0, 0, 475, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 419, 137, 444, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 433, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 461, 164, 165, 345, 166, 492,
	227, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 230, 494, 495, 0, 0, 174,
	468, 469, 442, 175, 176, 1706, 178, 0, 0, 179,
	180, 181, 462, 0, 182, 183, 184, 235, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 420,
	0, 448, 437, 438, 435, 436, 424, 0, 0, 416,
	417, 0, 0, 89, 90, 418, 91, 0, 425, 0,
	0, 430, 0, 0, 0, 92, 93, 1705, 477, 192,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 445,
	463, 481, 482, 200, 0, 473, 0, 456, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 1707,
	0, 457, 459, 0, 458, 460, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 429, 113, 464,
	443, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 336, 122, 487,
	488, 489, 0, 455, 0, 337, 123, 338, 124, 125,
	0, 0, 475, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 419, 137, 444, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 433, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 461, 164, 165, 345, 166, 492,
	227, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 230, 494, 495, 0, 0, 174,
	468, 469, 442, 175, 176, 1706, 178, 0, 0, 179,
	180, 181, 462, 0, 182, 183, 184, 235, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 420,
	0, 448, 437, 438, 435, 436, 424, 0, 0, 416,
	417, 0, 0, 89, 90, 418, 91, 0, 425, 0,
	0, 430, 0, 0, 0, 92, 93, 190, 477, 192,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 445,
	463, 481, 482, 200, 0, 473, 0, 456, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 103,
	0, 457, 459, 0, 458, 460, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 429, 113, 464,
	443, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 336, 122, 487,
	488, 489, 0, 455, 0, 337, 123, 338, 124, 125,
	0, 0, 475, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 419, 137, 444, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 433, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 461, 164, 165, 345, 166, 492,
	227, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 230, 494, 495, 0, 0, 174,
	468, 469, 442, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 462, 0, 182, 183, 184, 235, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 420,
	0, 448, 437, 438, 435, 436, 424, 0, 0, 416,
	417, 0, 0, 89, 90, 418, 91, 0, 425, 0,
	0, 430, 0, 0, 0, 92, 93, 190, 477, 192,
	478, 94, 479, 480, 0, 95, 196, 197, 96, 445,
	463, 481, 482, 200, 0, 473, 0, 456, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 103,
	0, 457, 459, 0, 458, 460, 104, 105, 106, 107,
	483, 108, 484, 485, 0, 0, 109, 0, 0, 0,
	476, 111, 0, 112, 0, 0, 0, 429, 113, 464,
	443, 0, 0, 114, 115, 486, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 474, 0, 209, 0, 119,
	120, 470, 472, 0, 0, 121, 0, 336, 122, 487,
	488, 489, 0, 455, 0, 337, 123, 338, 124, 125,
	0, 0, 475, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 0, 137, 444, 471, 139, 490, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	465, 144, 145, 0, 466, 146, 222, 0, 147, 148,
	149, 491, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 1060, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 461, 164, 165, 345, 166, 492,
	227, 167, 0, 168, 169, 171, 493, 170, 467, 0,
	0, 172, 173, 0, 230, 494, 495, 0, 0, 174,
	468, 469, 442, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 462, 0, 182, 183, 184, 235, 496, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 448,
	437, 438, 435, 436, 424, 0, 0, 0, 0, 1056,
	1057, 89, 90, 0, 91, 1058, 0, 0, 1059, 430,
	0, 0, 0, 92, 93, 0, 477, 192, 478, 94,
	479, 480, 0, 95, 196, 197, 96, 445, 463, 481,
	482, 200, 0, 473, 0, 456, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 334, 102, 1707, 0, 457,
	459, 0, 458, 460, 104, 105, 106, 107, 483, 108,
	484, 485, 0, 0, 109, 0, 0, 0, 476, 111,
	0, 112, 0, 0, 0, 429, 113, 464, 443, 0,
	0, 114, 115, 486, 0, 116, 0, 117, 0, 0,
	335, 0, 118, 474, 0, 209, 0, 119, 120, 470,
	472, 0, 0, 121, 0, 336, 122, 487, 488, 489,
	0, 455, 0, 0, 123, 338, 124, 125, 0, 0,
	475, 339, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 341, 134, 135, 138, 136,
	419, 137, 444, 471, 139, 490, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 342, 143, 343, 465, 144,
	145, 0, 466, 146, 222, 0, 147, 148, 149, 491,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 344,
	157, 158, 433, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 461, 164, 165, 0, 166, 492, 227, 167,
	0, 168, 169, 171, 493, 170, 467, 0, 0, 172,
	173, 0, 230, 494, 495, 0, 0, 174, 468, 469,
	442, 175, 176, 1706, 178, 0, 0, 179, 180, 181,
	462, 0, 182, 183, 184, 235, 496, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 448, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 416, 417, 89,
	90, 0, 91, 418, 0, 0, 425, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 463, 198, 199, 200,
	0, 473, 0, 456, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 334, 102, 103, 0, 457, 459, 0,
	458, 460, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 464, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 335, 0,
	118, 474, 0, 209, 0, 119, 120, 470, 472, 0,
	0, 121, 0, 336, 122, 212, 213, 214, 0, 215,
	0, 337, 123, 338, 124, 125, 0, 0, 475, 339,
	126, 340, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 341, 134, 135, 138, 136, 0, 137,
	0, 471, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 342, 143, 343, 465, 144, 145, 0,
	466, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 344, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	461, 164, 165, 345, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 467, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 468, 469, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 462, 0,
	182, 183, 184, 235, 236, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 328, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 1486, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 333, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 336, 122, 212, 213, 214, 0, 215, 0, 337,
	123, 338, 124, 125, 0, 0, 216, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 342, 143, 343, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 224, 159,
	0, 248, 160, 161, 49, 225, 162, 163, 0, 164,
	165, 345, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 51, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 332, 236, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 0, 48, 328, 579, 0, 580, 575,
	570, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 46, 0, 0, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 333, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 334, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 583, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 572, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 335, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 336, 122, 212, 213, 214, 0, 215, 0, 337,
	123, 338, 124, 125, 0, 0, 216, 339, 126, 340,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 341, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 573, 0, 0, 0, 142,
	219, 342, 143, 343, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 344, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 345, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 571, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 328, 579, 0, 580, 575, 570, 0,
	0, 0, 0, 581, 576, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 333,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 334,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 566, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 572, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 335, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 336,
	122, 212, 213, 214, 0, 215, 0, 337, 123, 338,
	124, 125, 0, 0, 216, 339, 126, 340, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 341,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 573, 0, 0, 0, 142, 219, 342,
	143, 343, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 344, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 345,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 571, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 328, 579, 0, 580, 575, 570, 0, 0, 0,
	0, 581, 576, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 333, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	572, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 336, 122, 212,
	213, 214, 0, 215, 0, 337, 123, 338, 124, 125,
	0, 0, 216, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 573, 0, 0, 0, 142, 219, 342, 143, 343,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 345, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 571, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 581,
	576, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	301, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 49, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 51, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 332, 236, 0, 185, 0,
	0, 0, 47, 186, 187, 188, 189, 86, 48, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 922, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 49, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 51, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 332, 236, 0, 185, 0, 0, 0,
	47, 186, 187, 188, 189, 86, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 46, 0, 1173, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 406, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 301, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	922, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 855, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 1392, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 507, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 551, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 550, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 554, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 328, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 554, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 333, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 334, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 335, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 336, 122, 212,
	213, 214, 0, 215, 0, 337, 123, 338, 124, 125,
	0, 0, 216, 339, 126, 340, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 341, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 342, 143, 343,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 344, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 345, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 828, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 826, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 899,
	0, 114, 115, 207, 0, 116, 0, 117, 831, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 897, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 830, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 898, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	828, 201, 0, 0, 823, 97, 98, 99, 0, 100,
	826, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 831, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 822, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 830, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 829, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 1173, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 210, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 301, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 307, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 301, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 1106, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 1104, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 1095, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 697, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 84, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 536, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	0, 0, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 391, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 388, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 351, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 210, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 245, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 244, 231, 232, 0, 0, 240,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 245, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 244, 231, 232, 0, 0, 240, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 323, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 127, 0, 0, 128, 0, 129, 130,
	131, 132, 133, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 163,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	230, 231, 232, 0, 0, 174, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 320, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 145, 0, 221, 146,
	222, 0, 147, 148, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 159,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 86, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 89, 90, 0, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 190,
	191, 192, 193, 94, 194, 195, 0, 95, 196, 197,
	96, 0, 0, 198, 199, 200, 0, 201, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 202, 108, 203, 204, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 205,
	113, 206, 0, 0, 0, 114, 115, 207, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 208, 0, 209,
	0, 119, 120, 318, 211, 0, 0, 121, 0, 0,
	122, 212, 213, 214, 0, 215, 0, 0, 123, 0,
	124, 125, 0, 0, 216, 0, 126, 0, 0, 127,
	0, 0, 128, 0, 129, 130, 131, 132, 133, 0,
	134, 135, 138, 136, 0, 137, 0, 217, 139, 218,
	140, 141, 0, 0, 0, 0, 0, 142, 219, 0,
	143, 0, 220, 144, 145, 0, 221, 146, 222, 0,
	147, 148, 149, 223, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 224, 159, 0, 248,
	160, 161, 0, 225, 162, 163, 0, 164, 165, 0,
	166, 226, 227, 167, 0, 168, 169, 171, 228, 170,
	229, 0, 0, 172, 173, 0, 230, 231, 232, 0,
	0, 174, 233, 234, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 235,
	236, 86, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 92, 93, 190, 191, 192,
	193, 94, 194, 195, 0, 95, 196, 197, 96, 0,
	0, 198, 199, 200, 0, 201, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	202, 108, 203, 204, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 205, 113, 206,
	0, 0, 0, 114, 115, 207, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 208, 0, 209, 0, 119,
	120, 310, 211, 0, 0, 121, 0, 0, 122, 212,
	213, 214, 0, 215, 0, 0, 123, 0, 124, 125,
	0, 0, 216, 0, 126, 0, 0, 127, 0, 0,
	128, 0, 129, 130, 131, 132, 133, 0, 134, 135,
	138, 136, 0, 137, 0, 217, 139, 218, 140, 141,
	0, 0, 0, 0, 0, 142, 219, 0, 143, 0,
	220, 144, 145, 0, 221, 146, 222, 0, 147, 148,
	149, 223, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 224, 159, 0, 248, 160, 161,
	0, 225, 162, 163, 0, 164, 165, 0, 166, 226,
	227, 167, 0, 168, 169, 171, 228, 170, 229, 0,
	0, 172, 173, 0, 230, 231, 232, 0, 0, 174,
	233, 234, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 235, 236, 86,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 190, 191, 192, 193, 94,
	194, 195, 0, 95, 196, 197, 96, 0, 0, 198,
	199, 200, 0, 201, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 202, 108,
	203, 204, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 112, 0, 0, 0, 205, 113, 206, 0, 0,
	0, 114, 115, 207, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 208, 0, 209, 0, 119, 120, 210,
	211, 0, 0, 121, 0, 0, 122, 212, 213, 214,
	0, 215, 0, 0, 123, 0, 124, 125, 0, 0,
	216, 0, 126, 0, 0, 127, 0, 0, 128, 0,
	129, 130, 131, 132, 133, 0, 134, 135, 138, 136,
	0, 137, 0, 217, 139, 218, 140, 141, 0, 0,
	0, 0, 0, 142, 219, 0, 143, 0, 220, 144,
	145, 0, 221, 146, 222, 0, 147, 148, 149, 223,
	290, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 224, 159, 0, 248, 160, 161, 0, 225,
	162, 163, 0, 164, 165, 0, 166, 226, 227, 167,
	0, 168, 169, 171, 228, 170, 229, 0, 0, 172,
	173, 0, 230, 231, 232, 0, 0, 174, 233, 234,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 235, 236, 86, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 190, 191, 192, 193, 94, 194, 195,
	0, 95, 196, 197, 96, 0, 0, 198, 199, 200,
	0, 201, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 202, 108, 203, 204,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 112,
	0, 0, 0, 205, 113, 206, 0, 0, 0, 114,
	115, 207, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 208, 0, 209, 0, 119, 120, 210, 211, 0,
	0, 121, 0, 0, 122, 212, 213, 214, 0, 215,
	0, 0, 123, 0, 124, 125, 0, 0, 216, 0,
	126, 0, 0, 238, 0, 0, 128, 0, 129, 130,
	131, 132, 245, 0, 134, 135, 138, 136, 0, 137,
	0, 217, 139, 218, 140, 141, 0, 0, 0, 0,
	0, 142, 219, 0, 143, 0, 220, 144, 145, 0,
	221, 146, 222, 0, 147, 148, 149, 223, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	224, 159, 0, 248, 160, 161, 0, 225, 162, 239,
	0, 164, 165, 0, 166, 226, 227, 167, 0, 168,
	169, 171, 228, 170, 229, 0, 0, 172, 173, 0,
	244, 231, 232, 0, 0, 240, 233, 234, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 235, 236, 86, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 190, 191, 192, 193, 94, 194, 195, 0, 95,
	196, 197, 96, 0, 0, 198, 199, 200, 0, 201,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 202, 108, 203, 204, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 205, 113, 206, 0, 0, 0, 114, 115, 207,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 208,
	0, 209, 0, 119, 120, 210, 211, 0, 0, 121,
	0, 0, 122, 212, 213, 214, 0, 215, 0, 0,
	123, 0, 124, 125, 0, 0, 216, 0, 126, 0,
	0, 127, 0, 0, 128, 0, 129, 130, 131, 132,
	133, 0, 134, 135, 138, 136, 0, 137, 0, 217,
	139, 218, 140, 141, 0, 0, 0, 0, 0, 142,
	219, 0, 143, 0, 220, 144, 0, 0, 221, 146,
	222, 0, 147, 0, 149, 223, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 224, 0,
	0, 248, 160, 161, 0, 225, 162, 163, 0, 164,
	165, 0, 166, 226, 227, 167, 0, 168, 169, 171,
	228, 170, 229, 0, 0, 172, 173, 0, 230, 231,
	232, 0, 0, 174, 233, 234, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 235, 236, 723, 185, 742, 743, 744, 0, 186,
	187, 188, 189, 0, 0, 745, 0, 0, 0, 0,
	0, 725, 0, 751, 0, 0, 723, 0, 742, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 724, 0, 725, 0, 751, 0, 739, 723,
	0, 742, 743, 744, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 0, 0, 724, 0, 725, 0, 751,
	0, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 723, 0, 742, 743, 744, 724, 0,
	0, 0, 730, 0, 739, 745, 0, 0, 0, 0,
	0, 725, 0, 751, 0, 0, 0, 0, 0, 752,
	0, 0, 0, 0, 0, 730, 0, 0, 0, 0,
	0, 750, 724, 0, 0, 0, 0, 0, 739, 0,
	0, 747, 752, 0, 0, 0, 0, 740, 730, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 747, 752, 0, 0, 0, 746,
	740, 0, 0, 0, 0, 0, 0, 750, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 746, 740, 0, 0, 0, 0, 0, 752,
	0, 0, 741, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 749, 0, 746, 0, 0, 0, 0,
	0, 747, 0, 0, 0, 741, 0, 740, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 741, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 748, 0, 736, 737, 738,
	0, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 741, 0, 0, 1644, 0, 0, 748, 0,
	736, 737, 738, 749, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 0, 1623, 0,
	0, 748, 0, 736, 737, 738, 0, 735, 732, 733,
	734, 726, 727, 728, 729, 731, 0, 0, 0, 0,
	0, 1618, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 748, 0, 736, 737, 738,
	0, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	723, 0, 742, 743, 744, 1614, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 0, 0, 725, 0,
	751, 0, 0, 723, 0, 742, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 724,
	0, 725, 0, 751, 0, 739, 723, 0, 742, 743,
	744, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 724, 0, 725, 0, 751, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	723, 0, 742, 743, 744, 724, 0, 0, 0, 730,
	0, 739, 745, 0, 0, 0, 0, 0, 725, 0,
	751, 0, 0, 0, 0, 0, 752, 0, 0, 0,
	0, 0, 730, 0, 0, 0, 0, 0, 750, 724,
	0, 0, 0, 0, 0, 739, 0, 0, 747, 752,
	0, 0, 0, 0, 740, 730, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 747, 752, 0, 0, 0, 746, 740, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 746,
	740, 0, 0, 0, 0, 0, 752, 0, 0, 741,
	0, 0, 0, 0, 0, 0, 0, 0, 750, 0,
	749, 0, 746, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 741, 0, 740, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 746, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 748, 0, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 0, 0, 741,
	0, 0, 1551, 0, 0, 748, 0, 736, 737, 738,
	749, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 0, 0, 0, 1550, 0, 0, 748, 0,
	736, 737, 738, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 0, 0, 0, 1458, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 0, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 723, 0, 742,
	743, 744, 1395, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 0, 0, 0, 725, 0, 751, 0, 0,
	723, 0, 742, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 0, 724, 0, 725, 0,
	751, 0, 739, 723, 0, 742, 743, 744, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 724,
	0, 725, 0, 751, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 723, 0, 742,
	743, 744, 724, 0, 0, 0, 730, 0, 739, 745,
	0, 0, 0, 0, 0, 725, 0, 751, 0, 0,
	0, 0, 0, 752, 0, 0, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 750, 724, 0, 0, 0,
	0, 0, 739, 0, 0, 747, 752, 0, 0, 0,
	0, 740, 730, 0, 0, 0, 0, 0, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 752,
	0, 0, 0, 746, 740, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 730, 1725, 0, 0,
	0, 747, 0, 0, 0, 0, 746, 740, 0, 0,
	0, 0, 0, 752, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 749, 0, 746,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 741,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 746, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 1724, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 0, 0, 741, 0, 0, 1370,
	0, 0, 748, 0, 736, 737, 738, 749, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 0, 0, 0,
	0, 0, 1008, 0, 0, 748, 0, 736, 737, 738,
	0, 735, 732, 733, 734, 726, 727, 728, 729, 731,
	0, 0, 0, 1442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 723, 0, 742, 743, 744, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 725, 0, 751, 0, 0, 0, 0, 0,
	723, 0, 742, 743, 744, 0, 0, 0, 0, 0,
	0, 0, 745, 724, 0, 0, 910, 0, 725, 739,
	751, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 730, 0, 1268, 0, 0, 1267, 0,
	911, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	0, 754, 750, 0, 0, 0, 0, 723, 0, 742,
	743, 744, 747, 0, 0, 0, 752, 0, 740, 745,
	0, 0, 753, 0, 0, 725, 0, 751, 750, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	746, 0, 0, 0, 740, 0, 724, 0, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 723, 0,
	742, 743, 744, 0, 0, 0, 730, 0, 0, 741,
	745, 0, 0, 0, 0, 0, 725, 0, 751, 0,
	749, 0, 0, 752, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 750, 0, 724, 0, 0,
	0, 0, 0, 739, 0, 747, 748, 0, 736, 737,
	738, 740, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 748, 746, 736, 737, 738, 0, 735, 732,
	733, 734, 726, 727, 728, 729, 731, 730, 0, 0,
	0, 0, 0, 0, 0, 723, 0, 742, 743, 744,
	0, 0, 0, 0, 752, 0, 741, 745, 0, 0,
	0, 0, 0, 725, 0, 751, 750, 749, 0, 0,
	0, 723, 0, 742, 743, 744, 747, 0, 0, 0,
	0, 0, 740, 745, 724, 0, 0, 0, 0, 725,
	739, 751, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 746, 285, 0, 0, 0, 0,
	724, 0, 0, 0, 0, 0, 739, 0, 0, 748,
	0, 736, 737, 738, 0, 735, 732, 733, 734, 726,
	727, 728, 729, 731, 730, 0, 0, 741, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	730, 0, 0, 750, 0, 1274, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 752, 0, 740,
	0, 0, 0, 0, 1237, 0, 1254, 1255, 1256, 750,
	0, 0, 0, 0, 0, 0, 1364, 0, 0, 747,
	748, 746, 736, 737, 738, 740, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 1251,
	0, 0, 0, 0, 741, 723, 0, 742, 743, 744,
	0, 0, 0, 0, 0, 749, 0, 745, 0, 0,
	1269, 0, 0, 725, 0, 751, 0, 0, 0, 0,
	741, 1389, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 749, 0, 1242, 724, 723, 0, 742, 743, 744,
	739, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 0, 725, 0, 751, 0, 748, 0, 736,
	737, 738, 1257, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 0, 0, 724, 0, 0, 0, 1252, 0,
	739, 0, 0, 748, 730, 736, 737, 738, 0, 735,
	732, 733, 734, 726, 727, 728, 729, 731, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 730, 0, 0, 0, 0, 740,
	0, 0, 0, 1253, 723, 0, 742, 743, 744, 0,
	0, 752, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 746, 725, 750, 751, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 724, 723, 0, 742, 743, 744, 739,
	0, 0, 0, 0, 741, 0, 745, 0, 0, 1230,
	0, 746, 725, 0, 751, 749, 0, 0, 1248, 1249,
	1250, 1235, 1247, 1244, 1245, 1246, 1238, 1239, 1240, 1241,
	1243, 0, 0, 724, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 730, 741, 723, 0, 742, 743, 744,
	0, 0, 0, 0, 0, 749, 0, 745, 0, 0,
	752, 0, 0, 725, 0, 751, 0, 748, 0, 736,
	737, 738, 750, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 747, 730, 724, 0, 0, 0, 740, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	752, 0, 0, 0, 0, 0, 0, 748, 0, 736,
	737, 738, 750, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 747, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 730, 723, 0, 742, 743, 744,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	746, 752, 0, 725, 749, 751, 0, 0, 723, 0,
	742, 743, 744, 750, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 747, 724, 0, 725, 0, 751, 740,
	739, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 724, 0, 0,
	0, 746, 0, 739, 0, 0, 748, 0, 736, 737,
	738, 0, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 0, 0, 0, 730, 0, 1237, 0, 1254, 1255,
	1256, 0, 0, 0, 741, 0, 0, 0, 0, 0,
	0, 752, 0, 0, 0, 749, 748, 730, 736, 737,
	738, 0, 735, 732, 733, 734, 726, 727, 728, 729,
	731, 0, 21, 747, 752, 0, 0, 0, 0, 740,
	0, 1251, 35, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 740, 0, 0, 0, 37, 748, 0, 736,
	737, 738, 42, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 0, 0, 1237, 1242, 1254, 1255, 1256, 0,
	0, 0, 0, 0, 741, 0, 0, 26, 0, 0,
	38, 0, 1258, 0, 27, 749, 723, 0, 0, 0,
	0, 0, 0, 0, 1257, 0, 0, 741, 0, 28,
	0, 0, 0, 0, 725, 0, 751, 0, 749, 1251,
	1252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 0, 0, 0, 0,
	0, 739, 0, 0, 0, 0, 0, 748, 0, 736,
	737, 738, 0, 735, 732, 733, 734, 726, 727, 728,
	729, 731, 0, 1242, 0, 0, 0, 0, 0, 0,
	748, 0, 736, 737, 738, 1253, 735, 732, 733, 734,
	726, 727, 728, 729, 731, 730, 0, 0, 0, 0,
	0, 0, 1257, 40, 0, 0, 29, 0, 39, 0,
	0, 0, 752, 30, 0, 0, 49, 0, 1252, 0,
	0, 33, 34, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 747, 0, 51, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	1248, 1249, 1250, 0, 1247, 1244, 1245, 1246, 1238, 1239,
	1240, 1241, 1243, 52, 0, 0, 0, 0, 0, 0,
	47, 0, 0, 1253, 0, 0, 48, 0, 0, 0,
	0, 0, 0, 0, 941, 936, 957, 930, 949, 948,
	0, 0, 932, 931, 46, 741, 0, 959, 958, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 954, 0, 946, 945,
	0, 0, 0, 0, 0, 0, 944, 0, 1248, 1249,
	1250, 0, 1247, 1244, 1245, 1246, 1238, 1239, 1240, 1241,
	1243, 943, 0, 0, 0, 0, 0, 0, 748, 0,
	0, 0, 0, 0, 735, 732, 733, 734, 726, 727,
	728, 729, 731, 0, 0, 937, 938, 939, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 940, 935, 0, 0, 0,
	0, 0, 961, 0, 0, 0, 0, 0, 933, 0,
	0, 955, 956, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 960,
}
var sqlPact = [...]int{

	20243, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 872, -1000, -1000, -1000, 651, 837, 131, 1019, 1019,
	15055, -1000, -1000, 17783, 2002, 496, 497, 496, 496, 492,
	15055, 582, 687, 128, -1000, 630, 30, 17535, 13815, 1249,
	31, 13319, 356, 20243, 13567, 13815, 17287, 1113, 1012, 1007,
	13319, 17039, 16791, 16543, -1000, 9001, -1000, -1000, -1000, -1000,
	-1000, 860, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 855, -1000, 13815, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16295, 16047,
	874, -1000, -1000, 556, 428, 1255, -1000, 61, -1000, -1000,
	-1000, 1107, -1000, 851, 1104, 1102, 1101, 1099, 420, 889,
	-1000, 581, 874, -1000, 874, -1000, -1000, -1000, 562, 15055,
	-1000, 13319, -1000, 15799, 1033, 15551, -1000, 630, -1000, -1000,
	-1000, 891, 1241, 1241, 1241, 1264, 193, 192, 128, 15,
	13815, -1000, 359, 15, 6129, 6129, -1000, -1000, 356, -1000,
	375, 11573, 40, -1000, 6649, -1000, 759, 1159, 679, 674,
	1156, -107, 13319, 13815, 13815, 609, 15303, -1000, 1155, 107,
	1153, -1000, 106, 1151, -1000, -7, -1000, -1000, -1000, -1000,
	-1000, -1000, 356, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11831, 825, 11831, -1000,
	-1000, 1315, -1000, -1000, 23, 21, 970, 1034, 9519, 9261,
	1204, 738, -1000, -1000, -1000, 53, 3773, 13815, 1127, 11831,
	13815, 13815, 13815, -1000, 13815, -1000, 968, -1000, 13815, -1000,
	20, 19, -1000, 15055, -1000, 110, -1000, 354, 941, 14807,
	1166, 932, -1000, 891, -1000, 838, 938, 7187, 7967, 128,
	-1000, -1000, 128, 128, 7967, -1000, -1000, 13815, 15, 1301,
	13815, 104, -1000, 19437, -1000, -1000, 7967, 7967, 7967, 7967,
	7967, 727, -1000, -1000, -1000, 4551, -1000, -1000, 40, 351,
	319, -1000, -1000, 349, 40, -1000, -1000, -1000, -1000, 348,
	1413, 455, -1000, -1000, -1000, 7967, 432, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1122, 347, 341, -1000,
	-1000, -1000, -1000, 335, 334, 333, 332, 328, 327, 326,
	325, 324, 322, 320, 318, 316, 717, -1000, 444, -1000,
	-1000, 444, 444, -1000, 295, 295, 296, -1000, -1000, -1000,
	295, -1000, -1000, -1000, 415, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 307, 104, -1000, -1000, -1000, 13815, 40, -1000,
	-1000, -1000, 7967, 3514, -14, -1000, 20035, -1000, -8, 793,
	-1000, 12823, 1226, 1217, 1216, 13319, 560, 557, 13815, 13815,
	421, 76, 1282, 76, 11057, -1000, 13815, 13815, -1000, 13815,
	-1000, -1000, 13815, -1000, 13815, 13815, 80, 12327, 555, 3,
	12079, 13815, -1000, 46, -1000, -1000, 1083, 495, 706, 994,
	869, -1000, -1000, -1000, -1000, 9, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1361, -1000, -1000, -1000,
	-1000, 1397, 9, -1000, -1000, -1000, -1000, -1000, 1411, -1000,
	-1000, -1000, -1000, 3773, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13815, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 706,
	994, -1000, -1000, 13319, 12575, 1149, 832, 930, -1000, -1000,
	407, 1148, -1000, -1000, -1000, -1000, 20035, -1000, 20035, 655,
	1022, -1000, 1022, 7, -1000, 19340, -1000, 305, -20, -1000,
	421, 6129, 10799, 20483, 13815, 575, 7967, 7967, 7967, 7967,
	7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967,
	7967, 7967, 7967, 7967, 7967, 7967, 7967, 7967, 1004, 538,
	1324, 804, 294, 3773, -1000, 1348, 1348, 1348, 20148, 20148,
	213, 39, 18990, 5, 40, -1000, -1000, 5851, 5591, 40,
	4031, -1000, 803, 1396, 442, 20035, 1136, 1058, 304, 177,
	176, 7967, 1317, 7967, 8227, 7967, 7967, 4811, 7967, 7967,
	7967, 7967, 7967, 7967, -1000, 301, -1000, -1000, -1000, -1000,
	1395, -1000, -1000, 1394, -1000, 571, 568, 1392, 421, 175,
	-1000, 2243, -1000, -1000, 6649, -1000, 745, 13815, 13815, 13815,
	-1000, -1000, 929, 14559, -1000, 20483, 13815, -1000, 299, 297,
	984, 980, 13815, 13815, 14311, 14063, 13815, 681, 13815, 13815,
	669, -1000, 653, 7967, 691, -1000, 10283, 449, 13815, 662,
	73, -1000, -1000, -1000, 388, 13815, -1000, -1000, -1000, 107,
	-1000, 106, -1000, -1000, 13815, 12079, 3, 1, -1000, -1000,
	13815, 994, -1000, -1000, -1000, 683, -1000, 699, -1000, 9777,
	-1000, -1000, -1000, 803, -1000, -12, -1000, -1000, -1000, -1000,
	172, 0, -1000, -1000, -1000, -1000, -1000, 13815, 269, 13815,
	13815, 13815, 1147, 1410, 13815, -1000, -1000, -1000, 7967, -1000,
	-1000, -1000, 30, 13815, -1000, 1050, -1000, -4, 1617, -117,
	13071, -1000, 10025, -1000, 1323, -1000, -1000, -1000, -1000, 82,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 296, 717, 295, 295, 295, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 415, -1000, 444, 444, 444,
	-1000, -1000, -1000, 419, 711, 711, 1306, 1306, 1306, 1306,
	617, 617, 1690, 707, 20326, 20326, 20326, 208, 317, 317,
	20326, 20326, 20326, 20148, 19944, 165, 7967, 527, 794, 294,
	7967, -1000, 639, -1000, -1000, -1000, 1081, 290, 8227, 8227,
	-1000, -1000, -1000, 4551, -1000, -1000, 288, 7967, -1000, 7967,
	-19, -31, -1000, 20035, -1000, -22, -1000, -1000, -3, 7967,
	7967, 7967, 169, -1000, 523, -1000, 521, 520, 518, -1000,
	279, 167, 606, -1000, 7967, 740, 274, 268, 7967, -1000,
	-1000, 19984, 166, 1078, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 164, 19845, 160, 20216, -1000, 8227, 8227, 8227, 4551,
	266, 149, 19314, -68, 19805, 6909, 6909, 6909, 145, 19641,
	7967, -68, 2727, 2626, 2436, -26, -27, -34, 1391, -38,
	143, 418, 416, 141, 1050, -1000, -1000, 7967, -1000, -1000,
	-1000, 514, 510, 1146, -1000, 921, -1000, 666, 7967, 13815,
	261, 260, 748, -1000, 1145, 822, 1144, 822, -1000, -8,
	690, -1000, -1000, 508, -1000, 6129, 20035, -1000, 656, 1224,
	-39, -1000, -1000, -1000, 6129, 421, 11057, 6649, -40, -1000,
	-1000, -12, -1000, -12, -1000, -1000, -1000, -1000, -1000, -1000,
	13815, -1000, 12575, 258, 13815, 250, 247, 246, 13815, -1000,
	1166, -1000, 138, -1000, -1000, -1000, -1000, -1000, 1046, 1260,
	10799, 992, 989, 10799, 1008, 755, 755, 755, -1000, 13071,
	3242, -1000, -1000, 13815, 242, 10541, 137, 1617, 368, 367,
	-1000, 1390, 7967, 165, 7967, 8227, 8227, -1000, 165, -1000,
	-1000, -1000, -1000, 1077, 239, 7967, 20483, 19754, 2952, -44,
	5331, -18, 18967, 7967, -1000, -1000, 319, -1000, 136, 6389,
	-1000, 19518, 35, 35, -1000, 935, 991, 695, 623, 1363,
	1406, 1164, -1000, 7967, 19615, -1000, 11315, 438, 760, 18700,
	20483, -1000, 7967, -1000, 1071, 7967, -1000, 20483, 8227, 8227,
	8227, 8227, 8227, 8227, 8227, 8227, 8227, 8227, 8227, 8227,
	8227, 8227, 8227, 8227, 8227, 8227, 8227, 975, 8227, 1347,
	1347, 1347, -35, 5071, -1000, 1120, 1071, 7967, 7967, 20483,
	123, 122, 121, -1000, 7967, -68, 7967, 7967, 7967, -1000,
	-1000, -1000, 119, -1000, 1359, -1000, -1000, -1000, -1000, 1046,
	19013, 13815, 13815, 13815, 1143, 1792, -1000, 18666, -48, 13815,
	13815, -1000, 1003, 1029, 478, 13815, -1000, 13815, -1000, 13815,
	13815, 13815, 13815, -53, 6129, 236, 30, 13815, -53, 653,
	-1000, -1000, 387, -1000, -1000, 8743, 238, 13815, 12575, 8743,
	781, -1000, -1000, 436, 7967, 7967, 1617, 10799, 10799, 1362,
	986, 10799, -1000, -1000, -1000, -1000, -1000, -1000, 1010, 234,
	13815, 13071, 511, 1354, 115, 1287, 165, 1915, 197, 7967,
	20483, 20125, -55, -1000, 7967, 7967, -1000, -59, -1000, 7967,
	-1000, 20035, -1000, 1401, 7967, 111, 101, 100, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 98, -1000, -1000, 20035, 7967,
	-1000, -1000, 18031, 7967, 95, -1000, 94, 20035, 1120, 20035,
	-1000, 724, 724, 1347, 1347, 1347, 1347, 412, 412, 922,
	1681, 435, 435, 435, 773, 345, 345, 435, 435, 435,
	1069, 990, 231, 20304, 7967, -61, -1000, -1000, -1000, 20035,
	20035, 92, -1000, -1000, -1000, -68, 2344, 18643, 18620, -1000,
	87, 436, -1000, -1000, -1000, -1000, 13815, -1000, 13815, -1000,
	13815, 918, -1000, -1000, 979, 223, 8227, 13815, -1000, 754,
	-69, -70, 915, -1000, 905, 7967, -1000, 20483, 822, 822,
	-1000, 503, 501, -1000, -53, 1172, 13815, 1215, -1000, -1000,
	-1000, 219, -79, -1000, 220, 1247, 7967, -1000, -1000, 217,
	8743, -81, -1000, -1000, 83, -85, 13815, -1000, 13815, 20035,
	-68, -1000, 1362, -1000, 214, 7967, 10799, -1000, -143, -1000,
	385, -1000, 13815, -86, -1000, -1000, 346, 221, -1000, 7967,
	7967, 20125, -91, -1000, 20483, 165, 165, -1000, 18353, -1000,
	19518, -1000, -1000, -1000, -1000, 20035, 728, -1000, 18319, -1000,
	-1000, -1000, 8227, 1064, 212, 20483, 18296, -1000, -1000, 7967,
	-1000, -1000, -1000, -1000, -1000, 937, -1000, -1000, -1000, 7967,
	20304, 211, -1000, 210, -1000, -1000, -1000, 688, -1000, -1000,
	20035, 1250, -1000, -1000, 13815, 13815, 558, -93, 13815, -1000,
	-1000, 4291, 754, 8743, 1245, 40, 13815, 1245, 18273, 4031,
	-97, -1000, 13815, -1000, 754, 207, -60, -1000, 1279, -1000,
	13815, 20035, -1000, 1010, -1000, 3773, -99, -1000, -1000, -1000,
	165, 165, -1000, -1000, -1000, 74, 760, 1252, -1000, 1972,
	8227, 20483, -101, -1000, 2929, -1000, 2906, 956, 13815, 13815,
	13815, 456, 13815, -1000, -1000, 605, -1000, 421, -1000, -1000,
	-1000, -1000, -1000, -1000, 1247, -3, 754, -1000, -1000, 8743,
	13815, 205, -119, -1000, -1000, -1000, -1000, 660, 7967, 1972,
	-123, -1000, -1000, -1000, 762, 848, 71, -125, 81, -1000,
	7967, -1000, 11057, -1000, 1245, 66, -1000, -127, -1000, -1000,
	-1000, 64, 7707, 7707, -68, -1000, -1000, 778, 771, 633,
	-1000, -1000, -1000, -1000, -1000, 956, 13815, 20035, -103, -1000,
	-1000, 754, -1000, -1000, -1000, 8485, 875, 631, 19047, -1000,
	-1000, 1178, -1000, 458, 927, 927, 762, -136, -1000, -1000,
	1332, -1000, -1000, -1000, -1000, -1000, -1000, 1340, -1000, -1000,
	996, -1000, -1000, -1000, 7447, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1672, 1664, 1289, 1662, 1659, 1654, 1647, 1646, 95,
	1642, 122, 124, 1640, 91, 1638, 1637, 1635, 1628, 78,
	1626, 1624, 1621, 1617, 1614, 84, 21, 161, 1748, 154,
	1613, 1607, 1605, 9, 107, 103, 1600, 101, 65, 97,
	109, 718, 67, 1591, 1588, 132, 20, 22, 115, 94,
	138, 130, 118, 1585, 1580, 1569, 33, 1568, 1564, 1563,
	1562, 46, 17, 1561, 19, 1560, 14, 1550, 1549, 100,
	1547, 96, 116, 38, 126, 144, 1546, 44, 12, 73,
	1544, 29, 1543, 36, 77, 131, 1541, 40, 289, 51,
	28, 59, 1540, 1539, 1535, 1534, 88, 82, 69, 1533,
	1530, 72, 1529, 127, 125, 1528, 1525, 129, 1524, 1523,
	1522, 811, 1520, 1517, 675, 3, 37, 70, 5, 111,
	110, 24, 1516, 23, 1506, 1353, 656, 133, 1504, 60,
	43, 79, 45, 58, 35, 1503, 98, 1500, 1496, 1495,
	1494, 1493, 76, 1490, 71, 135, 42, 50, 86, 27,
	16, 25, 83, 113, 139, 108, 1488, 104, 1487, 47,
	1486, 1483, 600, 81, 1478, 1476, 1475, 581, 456, 455,
	53, 1472, 1471, 235, 231, 1470, 1468, 80, 1465, 1461,
	136, 1460, 134, 30, 1459, 114, 1456, 93, 1455, 0,
	54, 39, 1452, 121, 74, 1450, 1448, 1446, 1445, 26,
	2, 10, 6, 7, 4, 18, 11, 1444, 1440, 128,
	89, 1439, 141, 1438, 1437, 32, 1436, 1435, 15, 1434,
	13, 1431, 8, 1, 1429, 140, 1427, 99, 1424, 1303,
	1423, 137, 1421, 1420, 1371, 75,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 12, 158, 158, 157, 13, 18, 225, 225,
	225, 229, 229, 230, 230, 231, 231, 231, 231, 231,
	231, 231, 227, 227, 21, 21, 21, 21, 111, 111,
	113, 113, 113, 113, 40, 110, 110, 110, 110, 112,
	112, 112, 112, 182, 180, 180, 187, 187, 187, 53,
	53, 53, 53, 53, 54, 54, 54, 179, 179, 179,
	179, 188, 188, 188, 188, 188, 188, 55, 55, 55,
	186, 186, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 181, 181, 226, 226,
	228, 228, 8, 8, 56, 56, 57, 57, 117, 117,
	117, 117, 116, 197, 197, 198, 198, 198, 199, 199,
	199, 199, 199, 199, 199, 195, 195, 196, 193, 193,
	194, 194, 194, 194, 232, 232, 115, 115, 60, 60,
	202, 202, 202, 202, 200, 200, 200, 200, 200, 203,
	201, 204, 204, 204, 204, 204, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 234, 234, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 210,
	210, 210, 212, 212, 209, 15, 15, 15, 15, 211,
	211, 233, 233, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 91,
	91, 91, 91, 89, 89, 90, 90, 153, 153, 153,
	153, 86, 86, 154, 154, 154, 118, 118, 159, 159,
	159, 68, 68, 68, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 161, 161, 161,
	161, 163, 163, 163, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 162, 162, 164, 164, 171,
	171, 172, 172, 173, 174, 165, 165, 166, 166, 167,
	168, 175, 175, 175, 175, 177, 177, 169, 169, 169,
	169, 169, 170, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 98, 98, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 205, 205, 205, 205, 205, 205, 205, 207,
	207, 208, 208, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 213, 213,
	214, 214, 215, 215, 216, 216, 218, 219, 219, 219,
	220, 224, 224, 217, 217, 221, 221, 221, 222, 222,
	223, 223, 223, 223, 223, 136, 136, 136, 137, 137,
	138, 75, 75, 134, 134, 133, 133, 133, 135, 135,
	92, 176, 176, 176, 176, 176, 176, 176, 93, 93,
	99, 94, 94, 95, 95, 95, 95, 95, 95, 129,
	130, 96, 96, 96, 131, 131, 139, 143, 143, 142,
	141, 141, 140, 140, 121, 121, 121, 121, 120, 119,
	81, 81, 235, 235, 144, 144, 82, 82, 83, 77,
	77, 155, 155, 155, 155, 71, 71, 52, 52, 72,
	72, 48, 48, 51, 49, 49, 49, 49, 66, 66,
	67, 67, 46, 46, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 178, 178, 178, 41, 41,
	41, 42, 42, 43, 43, 184, 184, 184, 185, 185,
	185, 185, 183, 183, 183, 183, 183, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 190, 190, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 3, 1, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	3, 3, 4, 3, 2, 4, 2, 0, 2, 0,
	2, 0, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 2, 0, 3, 1, 2, 2, 1,
	1, 2, 4, 2, 5, 6, 7, 5, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 4, 5, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 1, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 1, 1, 3, 1, 1, 1, 2, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 4, 3,
	2, 3, 0, 3, 3, 2, 2, 1, 0, 2,
	2, 3, 2, 1, 1, 3, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 1, 3, 5, 2, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 2, 2, 1, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 84, 91, 106, 193,
	200, -26, -28, 208, 209, 29, 217, 53, 87, 195,
	190, 236, 59, -210, -29, -27, 281, 257, 263, 203,
	-30, 223, 250, 284, 223, 71, 117, 79, 121, 244,
	243, 71, 117, 223, -12, 281, -19, -14, -25, -9,
	-11, -229, 18, -230, -231, 59, 84, 106, 203, 121,
	79, 243, -229, -45, 200, -41, 4, -189, -191, 16,
	17, 19, 28, 29, 34, 38, 41, 52, 53, 54,
	56, 58, 61, 62, 69, 70, 71, 72, 74, 79,
	83, 84, 86, 91, 96, 97, 100, 102, 107, 112,
	113, 118, 121, 129, 131, 132, 137, 140, 143, 145,
	146, 147, 148, 149, 151, 152, 154, 156, 153, 159,
	161, 162, 168, 171, 174, 175, 178, 181, 182, 183,
	185, 186, 190, 188, 189, 191, 193, 195, 196, 198,
	201, 202, 205, 206, 208, 209, 211, 214, 216, 217,
	220, 218, 224, 225, 232, 236, 237, 238, 239, 242,
	243, 244, 247, 248, 249, 253, 258, 259, 260, 261,
	30, 31, 32, 33, 35, 36, 39, 40, 44, 45,
	46, 48, 73, 75, 76, 90, 92, 98, 108, 110,
	114, 115, 122, 123, 124, 126, 135, 158, 160, 169,
	173, 177, 179, 184, 197, 204, 212, 213, 219, 221,
	227, 228, 229, 233, 234, 250, 251, -111, 140, 206,
	232, -112, -110, -182, 227, 149, -73, -41, 200, 4,
	71, 52, 72, 107, 117, 118, 132, 224, 227, 232,
	18, 59, -234, 232, 232, -234, -234, -44, 232, 230,
	-45, -233, 223, 223, -100, 71, 241, -27, -29, -28,
	-61, -62, 240, 125, 89, 167, -26, -28, -210, -212,
	185, -209, -41, -212, -58, -59, 18, 81, 285, -153,
	-48, 165, -41, -83, 281, -3, -153, 114, -41, -51,
	114, -48, 104, 127, 127, -154, -153, -41, 114, -52,
	114, -51, -74, 114, -73, -158, -157, -185, 4, -189,
	-191, -190, 250, 50, 60, 105, 120, 128, 130, 136,
	138, 150, 170, 172, 194, 210, 164, 285, 164, -41,
	-111, 46, -111, -113, -39, -40, 129, 181, 230, 266,
	104, 261, -55, 5, 77, -76, 283, 104, -226, 164,
	104, 104, 104, -181, 104, 261, 129, 181, 223, -114,
	-39, -40, -114, 230, -45, -86, -153, -73, 114, 117,
	-41, 114, -61, -62, -85, -103, -104, 139, 163, -88,
	18, 81, -88, -88, 38, 282, 282, 285, -212, -67,
	281, -77, -155, -125, 274, -127, 272, 273, 278, 155,
	262, -136, -48, -128, 9, 281, -139, -207, -28, 90,
	24, -137, -138, 197, -41, 7, 8, 5, 6, -46,
	-161, -170, 235, 93, 157, 42, -205, -206, 4, -189,
	-184, -162, -172, -166, -169, 126, 50, 64, 67, 65,
	68, 207, 245, 43, 92, 173, 177, 221, 233, 234,
	114, 158, 115, 48, 108, 135, 83, 31, 33, 35,
	36, 44, 45, 73, 75, 76, 98, 122, 123, 124,
	160, 184, 212, 219, 228, 229, 251, -190, -173, -174,
	-167, -168, -175, -77, -83, 274, -48, 281, -81, -121,
	-120, -119, 279, 283, -82, -144, -125, 77, -35, 188,
	-34, 17, 19, 84, 248, 90, 188, 188, 90, 286,
	-154, -50, -48, -50, 208, -41, 25, 90, -37, 285,
	41, 191, 90, -37, 285, 90, 282, 285, -225, -72,
	223, 71, -49, -41, 274, -231, -225, 25, 285, 285,
	137, -54, 143, 154, 112, -180, 77, -187, -179, -145,
	9, 235, 93, 164, -186, 8, 273, -178, -185, 5,
	7, 272, -180, 77, 62, -188, 5, 4, -170, -145,
	77, 140, 126, 283, -183, 4, -189, -191, -190, -192,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 37,
	42, 43, 47, 49, 51, 57, 59, 63, 64, 65,
	66, 67, 68, 77, 78, 80, 81, 82, 85, 87,
	89, 93, 94, 95, 101, 103, 104, 106, 109, 111,
	116, 117, 119, 125, 127, 133, 134, 139, 141, 142,
	155, 157, 163, 164, 165, 166, 167, 176, 180, 187,
	192, 203, 207, 215, 222, 223, 226, 230, 231, 235,
	240, 241, 245, 246, 252, 254, 255, 256, 257, -182,
	-228, 101, -225, -182, -182, -182, -182, 137, -182, 285,
	285, -45, -37, 285, 281, 155, -42, 114, -41, -38,
	86, 155, -85, -104, -103, -105, -125, 18, -125, -127,
	-27, -27, -27, -63, -148, -125, -209, 25, -66, -41,
	-69, 285, 104, 10, 49, 28, 272, 273, 274, 275,
	99, 276, 269, 270, 271, 268, 264, 265, 266, 55,
	144, 199, 12, 13, 14, 22, 166, 138, 262, 210,
	128, 30, 116, 25, 4, -125, -125, -125, -125, -125,
	172, -28, -125, -75, -81, -28, -133, 279, 281, -81,
	281, 5, 5, 281, -140, -125, -213, 258, 101, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 179, -177, 253, -177, -177, -163,
	281, -163, -164, 281, -163, 259, 263, 281, -69, -48,
	-121, -125, -183, 274, 285, 282, 285, 230, -101, 57,
	51, -116, 114, 51, -193, -41, 57, -194, 47, 241,
	180, 103, -101, 57, -101, 57, 57, -153, 230, 230,
	-51, -41, -118, 255, -107, -19, 281, 77, 25, -107,
	-78, -79, -156, -80, -48, 281, -41, -41, -51, -52,
	-73, -74, -12, -157, 230, 285, -72, -66, -120, -119,
	104, 232, -40, -39, -53, 183, 214, 189, 205, 285,
	8, 7, 7, 5, -183, -227, -41, -40, -39, -153,
	-56, -57, -117, -116, -195, -196, -193, 117, 241, 94,
	90, 164, 155, 266, 90, -106, 197, 198, 285, -33,
	26, 80, 281, 285, 282, -118, -155, -70, -151, -153,
	-28, -152, 281, -159, -160, -162, -171, -165, -169, -170,
	34, 40, 39, 225, 204, 213, 32, 122, 123, 124,
	212, 31, 184, 98, 83, 76, 75, 160, 36, 35,
	-173, -174, -167, -168, 73, 228, 229, 33, 45, 44,
	251, 219, -73, 227, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, 138, 210, 30, 116,
	230, 157, 155, 235, 93, 242, 81, 161, -235, 222,
	27, -131, -28, 281, -183, -136, 197, 281, 282, 285,
	-75, -135, 280, -125, -133, -75, 282, 282, -75, 252,
	18, 81, 274, -97, 260, 147, 74, 113, 146, -98,
	202, 7, -143, -142, 254, -214, 96, 109, 281, 282,
	282, -125, -92, -176, 4, 260, 147, 74, 113, 146,
	202, -93, -125, -94, -126, -127, 272, 273, 278, 281,
	197, -95, -125, -75, -125, 37, 134, 231, -96, -125,
	104, -75, -125, -125, -125, -75, -75, -75, 281, 7,
	7, 227, 227, 7, -118, 282, 280, 289, -144, -34,
	-48, -41, -41, 155, -116, 114, -159, -41, 281, 281,
	131, 131, -41, -41, 114, -41, 114, -41, -41, -35,
	188, -41, -41, 188, -87, 192, -125, -87, -109, 164,
	-71, -48, 250, -41, 192, -69, 285, 266, -71, -37,
	-37, -227, -49, -227, -39, 239, 54, 183, -187, -97,
	285, 282, 285, -42, 117, -42, -73, -48, 90, 5,
	-41, -148, -15, -19, -14, -25, -9, -41, -84, 109,
	285, 60, -91, 130, 150, 105, 136, 194, 120, -122,
	286, -147, -146, 25, -41, -28, -152, -151, -68, 24,
	-97, 281, 261, -125, 230, -235, 222, -131, -125, 157,
	235, 93, 242, 81, 161, 104, 281, -126, -126, -75,
	281, -75, -125, 285, 280, 280, 285, 282, -62, 285,
	-61, -125, -75, -75, 282, 230, 230, 230, 230, 281,
	282, -141, -142, 85, -125, -219, 171, 281, 281, -125,
	25, 282, 104, 282, -99, 176, 282, 10, 272, 273,
	274, 275, 99, 276, 269, 270, 271, 268, 264, 265,
	266, 55, 144, 199, 12, 13, 14, 128, 116, -126,
	-126, -126, -75, 281, 282, -129, -130, 104, 101, 25,
	-96, -96, -96, 282, 104, -75, 285, 285, 285, 282,
	282, 282, 7, 282, 285, 282, 261, 261, 282, -84,
	-125, 230, 230, 90, 155, -197, -194, -125, -66, 281,
	281, -32, 84, 208, -102, 90, -37, 90, -37, 230,
	-101, 57, 230, -77, 192, 56, 282, 285, -77, -118,
	-79, -144, 282, -41, -117, 281, -42, 281, 281, 281,
	-41, -38, 282, -132, 111, 38, -151, 130, 130, -151,
	-91, 130, -89, 170, -89, -89, -147, -183, 287, -41,
	281, 282, 279, 279, 7, -125, -125, -126, -126, 104,
	281, -125, -134, -159, 22, 22, 282, -75, 282, 285,
	282, -125, -133, 282, 252, -62, -62, -62, 147, 113,
	146, -98, 146, -98, -98, 7, 5, 87, -125, 226,
	-220, -41, 281, 255, -61, 282, -159, -125, -129, -125,
	-159, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	81, 155, 161, -126, 285, -75, 282, -130, -129, -125,
	-125, -159, 282, 282, 282, -75, -125, -125, -125, 282,
	7, -132, 280, -41, -41, -116, 90, -198, 57, -199,
	49, 155, 157, 241, 180, 47, 77, 187, 282, 282,
	-66, -66, 155, 77, 155, 77, 70, 237, -41, -41,
	-48, -41, -41, -41, -77, -108, 281, 164, -19, -48,
	-87, 266, -64, -149, -41, -208, 281, -205, -206, -46,
	281, -65, -150, -41, -56, -64, 164, -215, 256, -125,
	-75, -151, -151, -90, 246, 164, 130, -151, -124, -123,
	102, 153, 281, -66, -146, 280, 7, 7, 282, 22,
	22, -125, -134, 282, 285, -125, -125, 282, -125, 5,
	-125, 282, 282, 282, 282, -125, -224, -41, -125, 282,
	282, -130, 104, 81, 161, 281, -125, 282, 282, 285,
	282, 282, 282, -215, -116, -41, -73, 157, 131, 281,
	-126, -48, -115, -232, 58, 220, 282, 282, 157, 157,
	-125, -159, -37, -37, 230, 230, 82, -66, 57, -83,
	-28, 281, 282, 285, -47, -81, 49, -47, -125, 281,
	-64, 282, 285, 282, 282, -48, -216, -218, -41, -90,
	281, -125, -151, 285, 288, 266, -66, 282, 280, 280,
	-125, -125, 282, -159, 282, -62, -217, 175, 282, -126,
	104, 281, -134, 282, -125, -199, -125, -43, 281, 281,
	187, -36, 49, -41, -41, 243, 156, 282, -41, -115,
	-149, -33, -73, -33, 282, -75, 282, -150, -115, 281,
	285, 25, -66, -123, -183, 282, 282, -62, 38, -126,
	-134, 282, 282, 282, -202, 145, -41, -66, -48, -31,
	246, -73, 208, -118, -47, -62, -115, -64, -218, -220,
	282, -221, 182, 198, -75, 282, -200, -203, -201, 164,
	105, 174, 211, 282, 282, -60, 281, -125, -78, -33,
	282, 282, 282, -222, -223, 30, 238, 62, -125, -222,
	-201, 164, -203, 164, 243, 79, -202, -66, -118, -115,
	-223, 178, 100, 197, 178, 100, -204, 152, 191, 41,
	208, -204, -200, 282, 22, 16, 157, 77, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	72, 0, 81, 82, 83, 85, 86, 87, 88, 89,
	90, 91, 0, 251, 838, 264, 748, 749, 750, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 94, 805, 842,
	853, 99, 109, 0, 909, -2, 113, 62, 838, 142,
	143, 0, 145, 159, 0, 0, 0, 157, 0, 0,
	154, 0, 269, 257, 269, 254, 255, 256, 259, 0,
	250, 0, 331, 0, 0, 0, 222, -2, 310, 311,
	-2, 0, 335, 335, 335, 0, 0, 311, 0, 319,
	828, 322, 731, 320, 0, 0, 337, 336, 0, 315,
	397, 0, 721, 360, 0, 2, 0, 889, 0, 0,
	889, 0, 0, 0, 0, 0, 403, 54, 889, 45,
	889, 717, 45, 889, 60, 0, 73, 75, 758, 759,
	760, 761, 914, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 0, 0, 0, 263,
	95, 879, 97, 98, 100, 101, 0, 0, 0, 0,
	0, 0, 112, 137, 138, 63, 0, 0, 161, 0,
	0, 0, 0, 150, 0, 151, 0, 153, 0, 252,
	265, 266, 253, 0, 261, 45, 401, 0, 889, 752,
	274, 889, -2, 0, 306, 347, 348, 0, 0, 0,
	333, 334, 0, 0, 0, 302, 303, 0, 321, 0,
	0, 363, 709, 713, 714, 489, 0, 0, 0, 0,
	0, 0, 570, 571, 572, 0, 574, 575, 576, 884,
	0, 580, 581, 903, 721, 734, 735, 736, 737, 0,
	0, 0, 742, 743, 744, 693, 619, 590, -2, -2,
	732, 427, 428, 429, 430, -2, 916, 594, 596, 598,
	599, 600, 601, 0, 885, 899, 900, 908, 912, 913,
	889, 896, 890, 880, 887, 895, 788, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 757, 451, 452,
	457, 458, 460, 363, 361, 398, 399, 0, 722, 700,
	694, 695, 0, 0, 0, 706, 704, 705, 22, 247,
	24, 0, 247, 247, 0, 0, 0, 0, 0, 0,
	407, 0, 280, 0, 0, 404, 0, 0, 56, 0,
	43, 44, 0, 58, 0, 0, 330, 0, 0, 78,
	0, 784, 719, 724, 727, 84, 0, 0, 0, 0,
	0, 104, 124, 125, 126, 105, 107, 114, 116, 117,
	118, 127, 128, 129, 130, 216, 0, 218, 140, 141,
	745, 0, 106, 108, 110, 111, 131, 132, 0, 134,
	135, 136, 472, 0, 64, 762, 763, 764, 765, 766,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 144,
	146, 0, 158, 147, 148, 149, 156, 152, 155, 0,
	0, 260, 219, 0, 165, 0, 0, 889, 751, 271,
	0, 0, 309, 345, 346, 349, 352, 353, 350, 489,
	316, 317, 318, 341, 342, 236, 323, 0, 0, 728,
	407, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 703, 0, 0, 712, 493, 494, 495, 517, 518,
	0, -2, 651, 0, 577, 578, 579, 0, 0, -2,
	0, 739, 486, 0, 0, 692, 621, 0, 0, 0,
	0, 0, 0, 0, 672, 678, 0, 0, 0, 0,
	0, 0, 0, 0, 441, 454, 465, 462, 461, 443,
	0, 442, 440, 0, 444, 0, 0, 0, 407, 0,
	701, 0, 698, 699, 0, 708, 0, 0, 0, 0,
	246, 26, 889, 0, 36, 0, 0, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 723, 291, 0, 291, 282, 0, 0, 0, 278,
	363, 293, 295, 296, 0, 0, 405, 55, 718, 45,
	61, 45, 67, 74, 0, 0, 79, 80, 725, 726,
	0, 0, 102, 103, 270, 0, 121, 0, 123, 0,
	217, 747, 746, 486, 65, 160, 92, 267, 268, 402,
	0, 164, 166, 168, 169, 170, 171, 752, 0, 752,
	0, 0, 0, 0, 0, 351, 354, 355, 0, 344,
	234, 235, 330, 0, 730, 357, 710, 362, 364, 372,
	388, 375, 0, 490, 413, 414, 415, 416, 417, 486,
	420, 421, 422, 423, 424, 425, 426, 434, 435, 436,
	437, 438, 439, 448, 0, 433, 433, 433, 445, 446,
	449, 450, 455, 456, 467, 468, 470, 466, 466, 466,
	463, 464, 491, 0, 496, 497, 498, 499, 500, 501,
	502, 503, 504, 505, -2, -2, -2, 509, 510, 511,
	-2, -2, -2, 515, 516, -2, 0, 0, 703, 0,
	0, 523, 0, 526, 528, 530, 0, 0, 0, 0,
	702, 540, 684, 0, 711, 525, 0, 0, 573, 0,
	0, 0, 657, 651, 658, 0, -2, 582, 340, 0,
	0, 0, 0, 740, 473, 474, 475, 476, 477, 478,
	487, 0, 691, 687, 0, 629, 0, 0, 0, 595,
	597, 0, 0, 0, 661, 662, 663, 664, 665, 666,
	667, 0, 0, 0, 0, 542, 0, 0, 0, 0,
	903, 0, 651, 677, 0, 0, 0, 0, 0, 651,
	0, 683, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 400, 696, 0, 707, 25,
	238, 0, 0, 0, 28, 889, 174, 0, 0, 0,
	0, 0, 249, 37, 889, 45, 889, 45, 38, 23,
	247, 237, 240, 0, 53, 0, 406, 275, 276, 0,
	0, 715, 284, 281, 0, 407, 0, 0, 0, 57,
	59, 76, 720, 77, 96, 119, 120, 122, 115, 133,
	0, 162, 0, 0, 752, 0, 0, 0, 0, 273,
	274, 343, 0, 325, 326, 327, 328, 729, 359, 0,
	0, 0, 0, 0, 0, 394, 394, 394, 392, 388,
	0, 374, 387, 0, 386, -2, 375, 0, 408, 410,
	418, 0, 0, -2, 0, 0, 0, 541, -2, 524,
	527, 529, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 652, 0, 655, 656, 0, -2, 0, 0,
	339, 340, 340, 340, 588, 0, 0, 0, 0, 0,
	0, 0, 688, 0, 0, 589, 0, 0, 0, 0,
	0, 603, 0, 604, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 544,
	545, 546, 0, 0, 606, 675, 676, 0, 0, 0,
	0, 0, 0, 611, 0, 682, 0, 0, 0, 615,
	616, 617, 0, 431, 0, 447, 469, 471, 459, 359,
	0, 0, 0, 0, 0, 172, 188, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 34, 0, 40, 0,
	0, 0, 0, 290, 0, 289, 0, 0, 279, 291,
	294, 297, 0, 93, 167, 0, 0, 0, 165, 0,
	0, 272, 324, 623, 0, 0, 365, 0, 0, 0,
	0, 0, 389, 393, 390, 391, 373, 370, 0, 384,
	0, 377, 0, 0, 0, 492, -2, 0, 0, 0,
	0, -2, 0, 653, 0, 0, 685, 0, 646, 0,
	-2, 652, 659, 583, 0, 0, 0, 0, 479, 480,
	481, 482, 483, 484, 485, 0, 741, 686, 690, 0,
	627, 628, 632, 0, 0, 593, 0, 660, 669, 670,
	543, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, -2, -2, -2, 560, 561, 562, -2, -2, -2,
	0, 0, 0, 671, 0, 0, 649, 673, 674, 679,
	680, 0, 608, 609, 610, 681, 0, 0, 0, 453,
	0, 623, 697, 242, 244, 27, 0, 173, 0, 176,
	0, 0, 179, 180, 0, 0, 0, 0, 190, 197,
	0, 0, 0, 42, 0, 0, 248, 0, 45, 45,
	239, 0, 0, 241, 277, 0, 0, 0, 283, 716,
	292, 0, 0, 224, 233, 233, 0, 591, 592, 0,
	0, 0, 229, 231, 0, 0, 0, 312, 0, 358,
	356, 378, 0, 380, 0, 0, 0, 382, 0, 368,
	0, 367, 0, 0, 376, 411, 0, 0, 419, 0,
	0, -2, 0, 534, 0, -2, -2, 645, 652, 738,
	340, 584, 586, 587, 488, 689, 634, 631, 0, 618,
	602, 668, 0, 0, 0, 0, 652, 648, 607, 0,
	613, 614, 432, 313, 29, 0, 177, 178, 181, 0,
	183, 754, 191, 0, 194, 195, 192, 0, 31, 32,
	41, 47, 33, 39, 0, 0, 0, 0, 0, 298,
	299, 0, 197, 0, 236, 733, 0, 236, 0, 0,
	0, 187, 0, 163, 197, 0, 622, 624, 0, 379,
	0, 396, 381, 0, 371, 0, 0, 385, 412, 409,
	-2, -2, 535, 654, 647, 0, 340, 0, 620, -2,
	0, 0, 0, 650, 0, 175, 0, 203, 0, 0,
	0, 49, 0, 243, 245, 0, 286, 407, 288, 185,
	225, 226, 232, 227, 233, 340, 197, 230, 220, 0,
	0, 0, 0, 369, 366, 383, 585, 637, 0, -2,
	0, 568, 612, 182, 208, 0, 0, 0, 199, 35,
	0, 46, 0, 287, 236, 0, 186, 0, 625, 626,
	395, 0, 0, 0, 633, 569, 184, 204, 205, 0,
	200, 201, 202, 753, 196, 203, 0, 48, 407, 228,
	583, 197, 630, 635, 638, -2, 856, 781, 0, 636,
	206, 0, 207, 0, 0, 0, 208, 0, 285, 221,
	0, 640, 641, 642, 643, 644, 209, 0, 212, 213,
	0, 210, 193, 198, 0, 211, 214, 215, 639,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 270, 3, 276, 271, 3,
	281, 282, 274, 272, 285, 273, 283, 275, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 289, 284,
	264, 266, 265, 3, 286, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 279, 3, 280, 269, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 287, 268, 288, 278,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 267, 57607, 277, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:682
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:688
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:694
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:724
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:734
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:761
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:766
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:780
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:798
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:805
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:807
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:852
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:853
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:857
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{ /* SKIP DOC */
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			unimplemented()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			unimplemented()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = Low
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = Normal
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = High
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			unimplemented()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = []string(nil)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1388
		{ /* unimplemented */
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = NamedColumnQualification{Name: sqlDollar[2].str, Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1535
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1574
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1585
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1674
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1694
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1761
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1804
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1898
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1905
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1947
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1951
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2170
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2206
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2219
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2222
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2247
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2305
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.str = astFullJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.str = astLeftJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.str = astRightJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.str = astInnerJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2581
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2582
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2672
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2676
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2677
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2678
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2686
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2733
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2742
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = nil
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2809
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2859
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2959
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2961
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2964
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2965
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			unimplemented()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2969
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2970
		{
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2973
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			unimplemented()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3002
		{
			unimplemented()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3385
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3386
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3422
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			unimplemented()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3427
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			unimplemented()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			unimplemented()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3468
		{
			unimplemented()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3512
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3513
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3516
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3529
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3534
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3538
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3554
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3564
		{
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3574
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3575
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3576
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3578
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4061
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4097
		{
			unimplemented()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = DNull
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.str = ""
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
