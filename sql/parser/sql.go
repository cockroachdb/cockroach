// Code generated by go yacc.
//line sql.y:21
package parser

import __yyfmt__ "fmt"

//line sql.y:21
import "github.com/cockroachdb/cockroach/sql/privilege"

func unimplemented() {
	panic("TODO(pmattis): unimplemented")
}

//line sql.y:29
type sqlSymType struct {
	yys            int
	id             int
	pos            int
	empty          struct{}
	ival           IntVal
	boolVal        bool
	str            string
	strs           []string
	qname          *QualifiedName
	qnames         QualifiedNames
	indirectElem   IndirectionElem
	indirect       Indirection
	stmt           Statement
	stmts          []Statement
	selectStmt     SelectStatement
	colDef         *ColumnTableDef
	constraintDef  ConstraintTableDef
	tblDef         TableDef
	tblDefs        []TableDef
	colQual        ColumnQualification
	colQuals       []ColumnQualification
	colType        ColumnType
	colTypes       []ColumnType
	expr           Expr
	exprs          Exprs
	selExpr        SelectExpr
	selExprs       SelectExprs
	tblExpr        TableExpr
	tblExprs       TableExprs
	joinCond       JoinCond
	when           *When
	whens          []*When
	updateExpr     *UpdateExpr
	updateExprs    []*UpdateExpr
	limit          *Limit
	targetList     TargetList
	targetListPtr  *TargetList
	privilegeType  privilege.Kind
	privilegeList  privilege.List
	orderBy        OrderBy
	orders         []*Order
	order          *Order
	groupBy        GroupBy
	dir            Direction
	alterTableCmd  AlterTableCmd
	alterTableCmds AlterTableCmds
	isoLevel       IsolationLevel
	idxElem        IndexElem
	idxElems       IndexElemList
}

const IDENT = 57346
const FCONST = 57347
const SCONST = 57348
const BCONST = 57349
const ICONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTES = 57380
const CASCADE = 57381
const CASE = 57382
const CAST = 57383
const CHAR = 57384
const CHARACTER = 57385
const CHECK = 57386
const COALESCE = 57387
const COLLATE = 57388
const COLLATION = 57389
const COLUMN = 57390
const COLUMNS = 57391
const COMMIT = 57392
const COMMITTED = 57393
const CONCAT = 57394
const CONFLICT = 57395
const CONSTRAINT = 57396
const COVERING = 57397
const CREATE = 57398
const CROSS = 57399
const CUBE = 57400
const CURRENT = 57401
const CURRENT_CATALOG = 57402
const CURRENT_DATE = 57403
const CURRENT_ROLE = 57404
const CURRENT_TIME = 57405
const CURRENT_TIMESTAMP = 57406
const CURRENT_USER = 57407
const CYCLE = 57408
const DATA = 57409
const DATABASE = 57410
const DATABASES = 57411
const DATE = 57412
const DAY = 57413
const DEC = 57414
const DECIMAL = 57415
const DEFAULT = 57416
const DEFERRABLE = 57417
const DELETE = 57418
const DESC = 57419
const DISTINCT = 57420
const DO = 57421
const DOUBLE = 57422
const DROP = 57423
const ELSE = 57424
const END = 57425
const ESCAPE = 57426
const EXCEPT = 57427
const EXISTS = 57428
const EXPLAIN = 57429
const EXTRACT = 57430
const FALSE = 57431
const FETCH = 57432
const FILTER = 57433
const FIRST = 57434
const FLOAT = 57435
const FOLLOWING = 57436
const FOR = 57437
const FOREIGN = 57438
const FROM = 57439
const FULL = 57440
const GRANT = 57441
const GRANTS = 57442
const GREATEST = 57443
const GROUP = 57444
const GROUPING = 57445
const HAVING = 57446
const HOUR = 57447
const IF = 57448
const IFNULL = 57449
const IN = 57450
const INDEX = 57451
const INITIALLY = 57452
const INNER = 57453
const INSERT = 57454
const INT = 57455
const INT64 = 57456
const INTEGER = 57457
const INTERSECT = 57458
const INTERVAL = 57459
const INTO = 57460
const IS = 57461
const ISOLATION = 57462
const JOIN = 57463
const KEY = 57464
const LATERAL = 57465
const LEADING = 57466
const LEAST = 57467
const LEFT = 57468
const LEVEL = 57469
const LIKE = 57470
const LIMIT = 57471
const LOCAL = 57472
const LOCALTIME = 57473
const LOCALTIMESTAMP = 57474
const LSHIFT = 57475
const MATCH = 57476
const MINUTE = 57477
const MONTH = 57478
const NAME = 57479
const NAMES = 57480
const NATURAL = 57481
const NEXT = 57482
const NO = 57483
const NOT = 57484
const NOTHING = 57485
const NULL = 57486
const NULLIF = 57487
const NULLS = 57488
const NUMERIC = 57489
const OF = 57490
const OFF = 57491
const OFFSET = 57492
const ON = 57493
const ONLY = 57494
const OR = 57495
const ORDER = 57496
const ORDINALITY = 57497
const OUT = 57498
const OUTER = 57499
const OVER = 57500
const OVERLAPS = 57501
const OVERLAY = 57502
const PARTIAL = 57503
const PARTITION = 57504
const PLACING = 57505
const POSITION = 57506
const PRECEDING = 57507
const PRECISION = 57508
const PRIMARY = 57509
const RANGE = 57510
const READ = 57511
const REAL = 57512
const RECURSIVE = 57513
const REF = 57514
const REFERENCES = 57515
const RENAME = 57516
const REPEATABLE = 57517
const RESTRICT = 57518
const RETURNING = 57519
const REVOKE = 57520
const RIGHT = 57521
const ROLLBACK = 57522
const ROLLUP = 57523
const ROW = 57524
const ROWS = 57525
const RSHIFT = 57526
const SEARCH = 57527
const SECOND = 57528
const SELECT = 57529
const SERIALIZABLE = 57530
const SESSION = 57531
const SESSION_USER = 57532
const SET = 57533
const SHOW = 57534
const SIMILAR = 57535
const SIMPLE = 57536
const SMALLINT = 57537
const SNAPSHOT = 57538
const SOME = 57539
const SQL = 57540
const STRICT = 57541
const STRING = 57542
const STORING = 57543
const SUBSTRING = 57544
const SYMMETRIC = 57545
const TABLE = 57546
const TABLES = 57547
const TEXT = 57548
const THEN = 57549
const TIME = 57550
const TIMESTAMP = 57551
const TO = 57552
const TRAILING = 57553
const TRANSACTION = 57554
const TREAT = 57555
const TRIM = 57556
const TRUE = 57557
const TRUNCATE = 57558
const TYPE = 57559
const UNBOUNDED = 57560
const UNCOMMITTED = 57561
const UNION = 57562
const UNIQUE = 57563
const UNKNOWN = 57564
const UPDATE = 57565
const USER = 57566
const USING = 57567
const VALID = 57568
const VALIDATE = 57569
const VALUE = 57570
const VALUES = 57571
const VARCHAR = 57572
const VARIADIC = 57573
const VARYING = 57574
const WHEN = 57575
const WHERE = 57576
const WINDOW = 57577
const WITH = 57578
const WITHIN = 57579
const WITHOUT = 57580
const YEAR = 57581
const ZONE = 57582
const NOT_LA = 57583
const WITH_LA = 57584
const POSTFIXOP = 57585
const UMINUS = 57586

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:3780

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 19,
	263, 19,
	-2, 289,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 29,
	1, 260,
	151, 260,
	261, 260,
	263, 260,
	-2, 270,
	-1, 38,
	1, 263,
	151, 263,
	261, 263,
	263, 263,
	-2, 269,
	-1, 47,
	1, 19,
	263, 19,
	-2, 289,
	-1, 83,
	1, 127,
	263, 127,
	-2, 738,
	-1, 234,
	129, 299,
	150, 299,
	-2, 266,
	-1, 237,
	129, 298,
	150, 298,
	-2, 264,
	-1, 339,
	129, 298,
	150, 298,
	-2, 267,
	-1, 396,
	260, 688,
	-2, 683,
	-1, 397,
	260, 689,
	-2, 684,
	-1, 403,
	6, 417,
	260, 417,
	-2, 811,
	-1, 425,
	6, 387,
	-2, 790,
	-1, 426,
	6, 414,
	260, 414,
	-2, 791,
	-1, 427,
	6, 395,
	-2, 792,
	-1, 428,
	6, 394,
	-2, 793,
	-1, 429,
	6, 414,
	260, 414,
	-2, 795,
	-1, 430,
	6, 414,
	260, 414,
	-2, 796,
	-1, 431,
	6, 415,
	-2, 798,
	-1, 432,
	6, 382,
	-2, 799,
	-1, 433,
	6, 382,
	-2, 800,
	-1, 434,
	6, 397,
	-2, 803,
	-1, 435,
	6, 383,
	-2, 808,
	-1, 436,
	6, 384,
	-2, 809,
	-1, 437,
	6, 385,
	-2, 810,
	-1, 438,
	6, 382,
	-2, 814,
	-1, 439,
	6, 388,
	-2, 819,
	-1, 440,
	6, 386,
	-2, 821,
	-1, 441,
	6, 416,
	-2, 825,
	-1, 442,
	6, 412,
	260, 412,
	-2, 829,
	-1, 683,
	85, 270,
	116, 270,
	129, 270,
	150, 270,
	154, 270,
	220, 270,
	-2, 519,
	-1, 691,
	260, 668,
	-2, 662,
	-1, 876,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 450,
	-1, 877,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 451,
	-1, 878,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 452,
	-1, 882,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 456,
	-1, 883,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 457,
	-1, 884,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 458,
	-1, 887,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 463,
	-1, 918,
	159, 589,
	-2, 592,
	-1, 1064,
	85, 270,
	116, 270,
	129, 270,
	150, 270,
	154, 270,
	220, 270,
	-2, 340,
	-1, 1072,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 464,
	-1, 1077,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 465,
	-1, 1096,
	159, 588,
	-2, 591,
	-1, 1233,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 466,
	-1, 1238,
	119, 0,
	-2, 476,
	-1, 1247,
	159, 590,
	-2, 593,
	-1, 1287,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 500,
	-1, 1288,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 501,
	-1, 1289,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 502,
	-1, 1293,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 506,
	-1, 1294,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 507,
	-1, 1295,
	12, 0,
	13, 0,
	14, 0,
	243, 0,
	244, 0,
	245, 0,
	-2, 508,
	-1, 1387,
	119, 0,
	-2, 477,
	-1, 1391,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 480,
	-1, 1392,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 482,
	-1, 1471,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 481,
	-1, 1472,
	30, 0,
	108, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 483,
	-1, 1480,
	119, 0,
	-2, 509,
	-1, 1517,
	119, 0,
	-2, 510,
	-1, 1562,
	30, 0,
	128, 0,
	193, 0,
	241, 0,
	-2, 789,
}

const sqlNprod = 921
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 18131

var sqlAct = [...]int{

	915, 1561, 1544, 1428, 1582, 1522, 1546, 1545, 769, 1560,
	817, 1488, 1267, 1356, 1325, 395, 1450, 1461, 1373, 686,
	1355, 394, 1239, 804, 1060, 238, 1240, 265, 762, 1367,
	455, 1213, 1154, 1099, 801, 688, 1153, 243, 28, 1222,
	1052, 84, 621, 803, 481, 460, 387, 770, 739, 748,
	970, 1048, 935, 903, 721, 825, 900, 13, 925, 1063,
	828, 499, 637, 28, 717, 643, 245, 37, 931, 463,
	18, 491, 465, 237, 526, 641, 369, 360, 10, 6,
	826, 806, 510, 59, 286, 28, 798, 57, 248, 282,
	38, 341, 37, 81, 342, 490, 61, 39, 284, 343,
	66, 501, 275, 1452, 60, 62, 928, 483, 397, 497,
	242, 1092, 458, 88, 37, 353, 456, 458, 973, 457,
	242, 456, 483, 763, 457, 644, 261, 279, 235, 268,
	1558, 1094, 767, 1449, 276, 234, 1095, 1510, 19, 87,
	929, 287, 1552, 1551, 1543, 821, 821, 1390, 32, 1538,
	87, 87, 821, 1021, 87, 443, 1093, 87, 87, 87,
	644, 1092, 87, 87, 87, 87, 1300, 289, 1246, 33,
	930, 927, 290, 1519, 1513, 36, 1390, 821, 1507, 1498,
	1473, 1449, 1449, 1390, 1468, 87, 87, 821, 1458, 1032,
	1448, 1449, 389, 1449, 1433, 1432, 1413, 821, 821, 1092,
	24, 1393, 1389, 737, 1092, 1390, 25, 1335, 1243, 1204,
	821, 1092, 482, 1200, 291, 1050, 482, 1034, 26, 1171,
	1098, 932, 1172, 1169, 1168, 1167, 1092, 1092, 1092, 1096,
	1092, 43, 1092, 822, 736, 488, 821, 735, 489, 821,
	482, 486, 911, 816, 484, 43, 792, 645, 45, 354,
	307, 260, 47, 525, 321, 1559, 1557, 361, 361, 484,
	340, 1514, 45, 1457, 1418, 43, 1414, 461, 339, 1406,
	1405, 1400, 334, 46, 926, 1399, 1398, 1397, 646, 1384,
	41, 1315, 45, 1352, 454, 1310, 42, 46, 450, 694,
	1309, 1308, 1021, 1250, 41, 1070, 648, 27, 1228, 34,
	42, 1212, 1174, 1173, 40, 1036, 43, 46, 43, 333,
	30, 31, 1161, 1152, 647, 458, 1125, 1122, 766, 456,
	1120, 1109, 457, 45, 1489, 45, 1103, 645, 1033, 908,
	985, 942, 482, 941, 353, 35, 235, 87, 40, 87,
	352, 87, 1269, 234, 1509, 629, 631, 618, 46, 1490,
	46, 1482, 638, 1464, 276, 41, 87, 41, 1455, 1447,
	1425, 42, 1411, 42, 1378, 677, 678, 679, 680, 681,
	1382, 1363, 87, 646, 684, 1237, 474, 617, 1227, 40,
	1210, 58, 87, 87, 1209, 87, 1207, 1126, 445, 1186,
	444, 648, 1351, 1185, 697, 1151, 1117, 1116, 1108, 1126,
	1089, 662, 691, 1085, 495, 905, 722, 909, 494, 647,
	725, 999, 998, 980, 940, 87, 610, 87, 521, 614,
	613, 615, 289, 289, 514, 820, 727, 290, 290, 1139,
	528, 87, 625, 87, 87, 529, 87, 235, 627, 646,
	235, 235, 626, 639, 633, 87, 715, 634, 635, 714,
	713, 712, 663, 711, 710, 709, 999, 648, 708, 734,
	707, 706, 705, 87, 704, 703, 87, 702, 701, 291,
	291, 692, 690, 40, 402, 647, 619, 530, 266, 357,
	1470, 1469, 689, 1230, 1229, 730, 451, 1354, 723, 359,
	742, 1022, 685, 726, 719, 720, 662, 1071, 246, 328,
	1126, 316, 1142, 1143, 1144, 1368, 699, 346, 763, 520,
	1140, 1270, 1386, 28, 936, 728, 753, 755, 656, 649,
	650, 651, 652, 653, 1112, 447, 28, 1126, 779, 284,
	718, 731, 733, 765, 1018, 1528, 311, 1571, 1572, 1497,
	232, 255, 1139, 695, 1343, 51, 59, 663, 745, 225,
	446, 758, 1028, 241, 749, 37, 1126, 778, 1441, 61,
	1440, 1141, 87, 1198, 784, 528, 528, 60, 62, 785,
	529, 529, 287, 866, 782, 87, 781, 780, 315, 87,
	1178, 52, 87, 1177, 240, 1107, 87, 229, 87, 87,
	1106, 87, 1105, 741, 87, 87, 87, 1104, 289, 1197,
	797, 87, 87, 290, 741, 1073, 752, 892, 399, 1145,
	740, 783, 530, 530, 649, 650, 651, 652, 653, 1496,
	760, 1381, 242, 1140, 1135, 1132, 1133, 1134, 1127, 1128,
	1129, 1130, 1131, 466, 528, 467, 759, 928, 902, 529,
	1127, 1128, 1129, 1130, 1131, 291, 361, 1530, 902, 477,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 929, 823, 831, 1141, 936, 230, 751, 1259, 1140,
	932, 530, 651, 652, 653, 1571, 814, 815, 239, 865,
	1430, 313, 53, 233, 363, 1548, 1188, 468, 466, 800,
	467, 930, 927, 1540, 943, 1585, 954, 1579, 964, 966,
	971, 974, 975, 976, 1126, 1013, 472, 730, 1541, 956,
	1027, 87, 730, 830, 483, 916, 314, 87, 87, 932,
	1141, 750, 471, 1136, 1137, 1138, 461, 1135, 1132, 1133,
	1134, 1127, 1128, 1129, 1130, 1131, 355, 449, 349, 350,
	906, 646, 932, 87, 1491, 1195, 87, 984, 1549, 907,
	1029, 331, 468, 466, 1014, 467, 738, 646, 994, 648,
	1129, 1130, 1131, 996, 54, 49, 716, 682, 1115, 1478,
	1223, 988, 242, 1547, 528, 648, 345, 647, 1578, 529,
	1010, 1550, 1570, 1135, 1132, 1133, 1134, 1127, 1128, 1129,
	1130, 1131, 1568, 647, 1366, 926, 1189, 1583, 912, 917,
	989, 920, 1016, 810, 1075, 55, 50, 638, 324, 344,
	308, 306, 1256, 1024, 901, 1180, 965, 468, 1009, 1339,
	1435, 530, 977, 978, 979, 1020, 1431, 1140, 1017, 837,
	345, 1434, 1584, 469, 1409, 1296, 1023, 87, 87, 87,
	1035, 1037, 1257, 87, 1030, 1031, 87, 1586, 28, 1577,
	1126, 484, 87, 87, 87, 87, 87, 1423, 87, 87,
	1025, 993, 811, 1026, 662, 87, 624, 87, 1043, 1041,
	620, 1255, 1523, 87, 946, 1066, 1059, 37, 1141, 1072,
	1065, 1045, 87, 1077, 344, 87, 1069, 1338, 616, 1044,
	1046, 289, 496, 932, 1592, 723, 290, 726, 469, 1297,
	56, 48, 1091, 1424, 1410, 1298, 87, 1001, 87, 87,
	464, 87, 1100, 788, 1000, 663, 370, 720, 719, 790,
	87, 1376, 1218, 1217, 312, 87, 87, 1113, 87, 837,
	329, 1118, 791, 274, 240, 1076, 1097, 1074, 291, 336,
	789, 949, 1132, 1133, 1134, 1127, 1128, 1129, 1130, 1131,
	1214, 1049, 684, 519, 507, 518, 939, 512, 971, 971,
	971, 1342, 262, 469, 1591, 262, 1481, 271, 1341, 1408,
	262, 1155, 281, 1140, 890, 950, 1236, 1111, 1176, 654,
	655, 656, 649, 650, 651, 652, 653, 1121, 1084, 1183,
	786, 67, 644, 327, 325, 322, 273, 1156, 649, 650,
	651, 652, 653, 700, 612, 951, 948, 938, 1158, 1159,
	1160, 72, 1322, 461, 1088, 1193, 68, 1191, 1090, 64,
	1179, 1264, 1039, 522, 1141, 856, 1175, 855, 812, 809,
	632, 1101, 1102, 487, 69, 1082, 1340, 1182, 1126, 1201,
	1192, 485, 1194, 1572, 480, 473, 1080, 71, 1055, 1196,
	470, 1442, 891, 818, 347, 516, 952, 67, 1203, 1202,
	318, 1058, 1232, 258, 1233, 1184, 524, 741, 1206, 1208,
	1150, 1221, 888, 756, 741, 1238, 1056, 72, 1444, 523,
	754, 1163, 68, 1248, 757, 1220, 1224, 1225, 1199, 1248,
	1134, 1127, 1128, 1129, 1130, 1131, 1216, 1452, 87, 1219,
	69, 1078, 1493, 1265, 819, 1083, 646, 1516, 75, 947,
	1215, 836, 1274, 71, 348, 1276, 1252, 1253, 1254, 3,
	87, 1249, 70, 259, 648, 856, 351, 855, 319, 1057,
	1511, 87, 646, 87, 768, 87, 1273, 889, 87, 640,
	1068, 1271, 647, 1277, 1590, 262, 1305, 1306, 224, 87,
	1275, 1589, 87, 382, 1126, 1312, 1313, 1314, 73, 646,
	87, 1140, 858, 87, 1258, 1260, 1261, 267, 647, 1383,
	793, 1316, 1079, 794, 1307, 1262, 1303, 1231, 63, 1081,
	452, 1304, 226, 227, 85, 309, 310, 857, 70, 1395,
	262, 476, 1170, 1321, 983, 249, 249, 1317, 1244, 264,
	513, 508, 264, 270, 264, 1369, 74, 264, 277, 264,
	85, 836, 1141, 1361, 87, 982, 1361, 981, 933, 1360,
	795, 1365, 1360, 281, 73, 281, 1263, 1387, 28, 796,
	85, 85, 1391, 1392, 1364, 693, 228, 1394, 1429, 65,
	611, 281, 1396, 1380, 1362, 833, 323, 1362, 1353, 1402,
	1388, 1336, 1337, 1539, 1114, 1477, 1460, 1401, 937, 898,
	1301, 1404, 858, 1371, 1372, 698, 23, 1377, 837, 1358,
	896, 1311, 375, 1323, 1181, 805, 87, 87, 87, 1127,
	1128, 1129, 1130, 1131, 87, 87, 531, 857, 517, 506,
	87, 1412, 87, 1379, 87, 87, 87, 87, 1407, 398,
	326, 500, 837, 509, 945, 448, 400, 834, 87, 837,
	401, 835, 724, 388, 832, 285, 87, 87, 771, 934,
	87, 1110, 696, 894, 1370, 893, 87, 87, 374, 899,
	380, 379, 1436, 913, 371, 79, 1420, 1419, 80, 1015,
	837, 1350, 764, 813, 628, 833, 1190, 231, 1123, 963,
	1454, 955, 953, 944, 332, 459, 772, 1361, 1422, 358,
	1437, 320, 1443, 1360, 824, 1453, 1465, 1451, 87, 1361,
	729, 1067, 1445, 356, 1456, 1360, 1471, 1472, 636, 1438,
	1439, 1463, 264, 257, 85, 256, 337, 262, 1362, 802,
	761, 957, 317, 787, 773, 475, 895, 330, 1492, 777,
	1362, 249, 281, 897, 1527, 1051, 1485, 1474, 1187, 281,
	44, 17, 1476, 16, 15, 14, 1487, 264, 12, 11,
	837, 87, 1466, 87, 1483, 87, 1486, 264, 264, 1042,
	478, 9, 87, 8, 7, 22, 21, 20, 461, 5,
	4, 2, 1500, 1, 1467, 0, 1055, 0, 0, 0,
	0, 1502, 1508, 1501, 1504, 1361, 0, 0, 0, 1058,
	264, 1360, 264, 0, 856, 87, 855, 87, 0, 1053,
	0, 0, 730, 0, 1056, 87, 85, 87, 264, 85,
	0, 85, 0, 0, 1503, 0, 1362, 1054, 0, 0,
	623, 0, 0, 1515, 0, 1518, 0, 0, 856, 0,
	855, 1534, 0, 0, 0, 856, 0, 855, 249, 0,
	0, 642, 1532, 0, 1537, 1361, 0, 1531, 1536, 1554,
	1535, 1360, 1533, 0, 0, 1529, 837, 1057, 1553, 1555,
	1512, 1565, 1565, 1556, 0, 262, 856, 0, 855, 87,
	87, 1566, 1567, 87, 1569, 0, 1362, 0, 0, 1573,
	836, 87, 1575, 1565, 1576, 1524, 1525, 0, 0, 0,
	0, 262, 0, 87, 1506, 0, 1588, 1587, 0, 0,
	0, 0, 0, 837, 1574, 0, 0, 0, 0, 0,
	1565, 1593, 0, 0, 836, 957, 957, 0, 87, 87,
	87, 836, 87, 0, 837, 0, 0, 0, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 264, 0, 87,
	1086, 1087, 1051, 0, 0, 0, 856, 0, 855, 1331,
	746, 0, 836, 0, 264, 1542, 857, 264, 0, 87,
	0, 264, 0, 775, 776, 858, 264, 376, 29, 264,
	85, 85, 858, 957, 957, 957, 264, 642, 0, 1332,
	0, 0, 0, 1055, 0, 990, 0, 0, 0, 0,
	857, 0, 0, 29, 0, 837, 1058, 857, 1147, 1148,
	1149, 0, 0, 858, 0, 236, 1053, 0, 244, 0,
	0, 1056, 0, 281, 833, 29, 0, 0, 0, 0,
	0, 281, 0, 0, 1054, 0, 244, 0, 857, 0,
	0, 0, 836, 0, 0, 0, 1375, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 833, 1328,
	0, 0, 856, 0, 855, 833, 0, 1038, 0, 0,
	0, 0, 0, 0, 1057, 1331, 0, 1326, 0, 0,
	0, 0, 1330, 0, 0, 1324, 262, 0, 1333, 0,
	0, 0, 0, 858, 0, 0, 833, 0, 0, 957,
	957, 0, 0, 0, 0, 1332, 799, 0, 0, 856,
	0, 855, 264, 746, 0, 0, 0, 0, 857, 0,
	1374, 0, 0, 0, 1234, 1235, 0, 0, 0, 0,
	856, 0, 855, 0, 0, 0, 1329, 0, 264, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 836, 0,
	0, 0, 957, 957, 957, 957, 957, 957, 957, 957,
	957, 957, 957, 957, 957, 957, 957, 957, 957, 957,
	0, 957, 0, 1327, 0, 1328, 833, 1278, 1279, 1280,
	1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
	1291, 1292, 1293, 1294, 1295, 836, 1299, 0, 1330, 858,
	0, 856, 0, 855, 1333, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 214, 0, 236, 857, 0, 0, 0, 0, 0,
	0, 0, 264, 991, 992, 223, 0, 0, 746, 0,
	0, 997, 0, 0, 0, 0, 858, 1002, 1003, 1005,
	1007, 1008, 1329, 1011, 1012, 0, 0, 646, 0, 0,
	264, 0, 1019, 0, 0, 0, 216, 858, 264, 0,
	0, 857, 0, 0, 0, 648, 0, 799, 773, 0,
	799, 0, 833, 0, 0, 215, 217, 836, 0, 0,
	0, 0, 857, 647, 0, 0, 0, 0, 0, 661,
	0, 623, 0, 85, 264, 0, 1040, 262, 0, 0,
	262, 0, 0, 0, 0, 1047, 0, 218, 0, 0,
	1062, 1062, 0, 264, 236, 0, 219, 236, 236, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 646, 0, 664, 665, 666, 0, 0, 0,
	833, 683, 0, 0, 667, 687, 0, 957, 0, 0,
	648, 0, 673, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 647, 0,
	662, 0, 1426, 0, 661, 0, 0, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1126, 648, 1142, 1143, 1144, 0,
	0, 0, 0, 0, 0, 0, 1385, 0, 0, 0,
	0, 833, 220, 647, 0, 221, 0, 0, 0, 222,
	0, 663, 0, 957, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 1139, 0, 0, 0,
	0, 672, 1346, 29, 0, 0, 0, 0, 1480, 0,
	669, 0, 0, 0, 0, 662, 29, 0, 0, 0,
	0, 0, 0, 0, 262, 262, 0, 0, 262, 0,
	0, 0, 0, 0, 0, 668, 0, 0, 0, 0,
	0, 0, 0, 642, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 0, 0, 0, 957, 0, 0, 0,
	662, 0, 0, 1145, 0, 264, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 1205, 1140, 746, 0,
	623, 1517, 0, 1211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 0, 264, 0, 0,
	0, 0, 0, 0, 0, 1226, 0, 0, 1062, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 670, 0, 658, 659, 660, 1141, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 0, 0,
	1427, 986, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1268,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 1459, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 262, 0, 0, 0, 1136, 1137, 1138,
	0, 1135, 1132, 1133, 1134, 1127, 1128, 1129, 1130, 1131,
	0, 0, 904, 0, 0, 0, 0, 646, 0, 664,
	665, 666, 0, 0, 0, 0, 0, 0, 0, 667,
	0, 1319, 1320, 746, 0, 648, 0, 673, 0, 642,
	642, 0, 0, 0, 0, 1344, 0, 1345, 0, 264,
	1347, 1348, 1349, 647, 0, 0, 0, 0, 0, 661,
	0, 1357, 0, 746, 1357, 0, 0, 0, 0, 0,
	0, 264, 264, 0, 0, 264, 0, 0, 0, 0,
	0, 642, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 646, 0, 664, 665, 666, 0, 0, 0,
	0, 0, 0, 0, 244, 0, 0, 0, 1526, 0,
	648, 0, 673, 0, 0, 674, 0, 1126, 0, 1142,
	1143, 1144, 0, 1403, 0, 0, 672, 0, 647, 1242,
	0, 0, 0, 0, 661, 669, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 0, 0, 773, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 1139,
	668, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 1421, 0,
	85, 0, 0, 0, 0, 0, 0, 264, 0, 0,
	674, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 672, 0, 0, 0, 1357, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 662, 0, 1357, 0, 0,
	264, 0, 1462, 0, 0, 0, 1145, 0, 0, 904,
	264, 0, 642, 0, 0, 0, 0, 0, 0, 0,
	1140, 0, 0, 683, 0, 0, 0, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 0, 0, 0, 663, 0, 0, 0,
	0, 1415, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1141, 0, 0, 1494, 1495, 0, 0, 1499, 683,
	0, 0, 0, 1357, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 0,
	0, 0, 0, 670, 0, 658, 659, 660, 0, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 0, 0,
	0, 0, 0, 642, 642, 264, 0, 85, 0, 0,
	1136, 1137, 1138, 0, 1135, 1132, 1133, 1134, 1127, 1128,
	1129, 1130, 1131, 1357, 1462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 264, 0, 0, 0, 827, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 396,
	384, 385, 386, 383, 372, 0, 0, 0, 0, 0,
	0, 89, 90, 922, 91, 0, 0, 0, 0, 378,
	0, 0, 0, 92, 93, 174, 425, 426, 94, 427,
	428, 0, 95, 179, 96, 393, 411, 429, 430, 0,
	421, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 431, 108, 432, 433, 0,
	0, 109, 0, 923, 0, 424, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 434, 115,
	0, 0, 0, 295, 0, 116, 422, 0, 190, 0,
	117, 418, 420, 0, 0, 0, 296, 118, 435, 436,
	437, 0, 403, 0, 297, 119, 298, 120, 0, 0,
	423, 299, 121, 300, 0, 250, 0, 0, 29, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 392,
	419, 129, 438, 130, 131, 827, 827, 0, 0, 827,
	132, 200, 302, 133, 303, 413, 134, 135, 0, 414,
	136, 203, 0, 137, 138, 439, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 381, 147, 0,
	148, 149, 0, 150, 252, 409, 151, 152, 305, 153,
	440, 154, 0, 155, 157, 207, 156, 415, 0, 0,
	158, 159, 0, 254, 441, 0, 0, 253, 416, 417,
	390, 160, 161, 162, 163, 0, 0, 164, 165, 410,
	0, 166, 167, 168, 212, 442, 921, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 364, 365, 924, 0,
	0, 0, 366, 0, 0, 373, 919, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 527, 0, 0, 0, 0,
	0, 0, 0, 0, 827, 0, 0, 89, 90, 532,
	91, 533, 534, 535, 536, 537, 538, 539, 540, 92,
	93, 174, 175, 176, 94, 177, 178, 541, 95, 179,
	96, 542, 543, 180, 181, 544, 182, 545, 293, 546,
	97, 98, 99, 0, 100, 547, 101, 548, 294, 102,
	103, 549, 550, 551, 552, 553, 554, 104, 105, 106,
	107, 183, 108, 184, 185, 555, 556, 109, 557, 558,
	559, 110, 111, 560, 561, 683, 562, 186, 112, 187,
	563, 564, 113, 114, 188, 115, 565, 566, 567, 295,
	568, 116, 189, 569, 190, 570, 117, 191, 192, 571,
	572, 573, 296, 118, 193, 194, 195, 574, 196, 575,
	297, 119, 298, 120, 576, 577, 197, 299, 121, 300,
	578, 250, 579, 580, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 581, 128, 582, 198, 129, 199, 130,
	131, 583, 584, 585, 586, 587, 132, 200, 302, 133,
	303, 201, 134, 135, 588, 202, 136, 203, 589, 137,
	138, 204, 139, 140, 590, 141, 142, 143, 591, 144,
	304, 145, 146, 205, 147, 0, 148, 149, 592, 150,
	252, 593, 151, 152, 305, 153, 206, 154, 594, 155,
	157, 207, 156, 208, 595, 596, 158, 159, 597, 254,
	209, 598, 599, 253, 210, 211, 600, 160, 161, 162,
	163, 601, 602, 164, 165, 603, 604, 166, 167, 168,
	212, 213, 605, 169, 606, 607, 608, 609, 170, 171,
	172, 173, 0, 527, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 732, 89, 90, 532, 91, 533,
	534, 535, 536, 537, 538, 539, 540, 92, 93, 174,
	175, 176, 94, 177, 178, 541, 95, 179, 96, 542,
	543, 180, 181, 544, 182, 545, 293, 546, 97, 98,
	99, 0, 100, 547, 101, 548, 294, 102, 103, 549,
	550, 551, 552, 553, 554, 104, 105, 106, 107, 183,
	108, 184, 185, 555, 556, 109, 557, 558, 559, 110,
	111, 560, 561, 0, 562, 186, 112, 187, 563, 564,
	113, 114, 188, 115, 565, 566, 567, 295, 568, 116,
	189, 569, 190, 570, 117, 191, 192, 571, 572, 573,
	296, 118, 193, 194, 195, 574, 196, 575, 297, 119,
	298, 120, 576, 577, 197, 299, 121, 300, 578, 250,
	579, 580, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 581, 128, 582, 198, 129, 199, 130, 131, 583,
	584, 585, 586, 587, 132, 200, 302, 133, 303, 201,
	134, 135, 588, 202, 136, 203, 589, 137, 138, 204,
	139, 140, 590, 141, 142, 143, 591, 144, 304, 145,
	146, 205, 147, 0, 148, 149, 592, 150, 252, 593,
	151, 152, 305, 153, 206, 154, 594, 155, 157, 207,
	156, 208, 595, 596, 158, 159, 597, 254, 209, 598,
	599, 253, 210, 211, 600, 160, 161, 162, 163, 601,
	602, 164, 165, 603, 604, 166, 167, 168, 212, 213,
	605, 169, 606, 607, 608, 609, 170, 171, 172, 173,
	396, 384, 385, 386, 383, 372, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 0,
	378, 0, 0, 0, 92, 93, 174, 425, 426, 94,
	427, 428, 0, 95, 179, 96, 393, 411, 429, 430,
	0, 421, 0, 404, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 405, 407, 0,
	406, 408, 104, 105, 106, 107, 431, 108, 432, 433,
	462, 0, 109, 0, 0, 0, 424, 111, 0, 0,
	0, 0, 377, 112, 412, 391, 0, 113, 114, 434,
	115, 0, 0, 0, 295, 0, 116, 422, 0, 190,
	0, 117, 418, 420, 0, 0, 0, 296, 118, 435,
	436, 437, 0, 403, 0, 297, 119, 298, 120, 0,
	0, 423, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	392, 419, 129, 438, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 413, 134, 135, 0,
	414, 136, 203, 0, 137, 138, 439, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 381, 147,
	0, 148, 149, 43, 150, 252, 409, 151, 152, 305,
	153, 440, 154, 0, 155, 157, 207, 156, 415, 0,
	45, 158, 159, 0, 254, 441, 0, 0, 253, 416,
	417, 390, 160, 161, 162, 163, 0, 0, 164, 165,
	410, 0, 166, 167, 168, 292, 442, 0, 169, 0,
	0, 0, 41, 170, 171, 172, 173, 368, 42, 396,
	384, 385, 386, 383, 372, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 373, 0, 0, 378,
	0, 0, 0, 92, 93, 174, 425, 426, 94, 427,
	428, 0, 95, 179, 96, 393, 411, 429, 430, 0,
	421, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 431, 108, 432, 433, 0,
	0, 109, 0, 0, 0, 424, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 434, 115,
	0, 0, 0, 295, 0, 116, 422, 0, 190, 0,
	117, 418, 420, 0, 0, 0, 296, 118, 435, 436,
	437, 0, 403, 0, 297, 119, 298, 120, 0, 0,
	423, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 392,
	419, 129, 438, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 413, 134, 135, 0, 414,
	136, 203, 0, 137, 138, 439, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 381, 147, 0,
	148, 149, 43, 150, 252, 409, 151, 152, 305, 153,
	440, 154, 0, 155, 157, 207, 156, 415, 0, 45,
	158, 159, 0, 254, 441, 0, 0, 253, 416, 417,
	390, 160, 161, 162, 163, 0, 0, 164, 165, 410,
	0, 166, 167, 168, 292, 442, 0, 169, 0, 0,
	0, 41, 170, 171, 172, 173, 368, 42, 396, 384,
	385, 386, 383, 372, 0, 0, 364, 365, 0, 0,
	89, 90, 366, 91, 0, 373, 0, 0, 378, 0,
	0, 0, 92, 93, 174, 425, 426, 94, 427, 428,
	967, 95, 179, 96, 393, 411, 429, 430, 0, 421,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 431, 108, 432, 433, 0, 0,
	109, 0, 0, 0, 424, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 434, 115, 0,
	0, 972, 295, 0, 116, 422, 0, 190, 0, 117,
	418, 420, 0, 0, 0, 296, 118, 435, 436, 437,
	0, 403, 0, 297, 119, 298, 120, 0, 968, 423,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 392, 419,
	129, 438, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 413, 134, 135, 0, 414, 136,
	203, 0, 137, 138, 439, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 381, 147, 0, 148,
	149, 0, 150, 252, 409, 151, 152, 305, 153, 440,
	154, 0, 155, 157, 207, 156, 415, 0, 0, 158,
	159, 0, 254, 441, 0, 969, 253, 416, 417, 390,
	160, 161, 162, 163, 0, 0, 164, 165, 410, 0,
	166, 167, 168, 212, 442, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 368, 0, 396, 384, 385,
	386, 383, 372, 0, 0, 364, 365, 0, 0, 89,
	90, 366, 91, 0, 373, 0, 0, 378, 0, 0,
	0, 92, 93, 174, 425, 426, 94, 427, 428, 0,
	95, 179, 96, 393, 411, 429, 430, 0, 421, 0,
	404, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	294, 102, 103, 0, 405, 407, 0, 406, 408, 104,
	105, 106, 107, 431, 108, 432, 433, 0, 0, 109,
	0, 0, 0, 424, 111, 0, 0, 0, 0, 377,
	112, 412, 391, 0, 113, 114, 434, 115, 0, 0,
	0, 295, 0, 116, 422, 0, 190, 0, 117, 418,
	420, 0, 0, 0, 296, 118, 435, 436, 437, 0,
	403, 0, 297, 119, 298, 120, 0, 0, 423, 299,
	121, 300, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 301, 126, 127, 367, 128, 392, 419, 129,
	438, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	302, 133, 303, 413, 134, 135, 0, 414, 136, 203,
	0, 137, 138, 439, 139, 140, 0, 141, 142, 143,
	0, 144, 304, 145, 146, 381, 147, 0, 148, 149,
	0, 150, 252, 409, 151, 152, 305, 153, 440, 154,
	0, 155, 157, 207, 156, 415, 0, 0, 158, 159,
	0, 254, 441, 0, 0, 253, 416, 417, 390, 160,
	161, 162, 163, 0, 0, 164, 165, 410, 0, 166,
	167, 168, 212, 442, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 368, 0, 396, 384, 385, 386,
	383, 372, 0, 0, 364, 365, 0, 0, 89, 90,
	366, 91, 0, 373, 1302, 0, 378, 0, 0, 0,
	92, 93, 174, 425, 426, 94, 427, 428, 0, 95,
	179, 96, 393, 411, 429, 430, 0, 421, 0, 404,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 294,
	102, 103, 0, 405, 407, 0, 406, 408, 104, 105,
	106, 107, 431, 108, 432, 433, 0, 0, 109, 0,
	0, 0, 424, 111, 0, 0, 0, 0, 377, 112,
	412, 391, 0, 113, 114, 434, 115, 0, 0, 0,
	295, 0, 116, 422, 0, 190, 0, 117, 418, 420,
	0, 0, 0, 296, 118, 435, 436, 437, 0, 403,
	0, 297, 119, 298, 120, 0, 0, 423, 299, 121,
	300, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 301, 126, 127, 367, 128, 392, 419, 129, 438,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 302,
	133, 303, 413, 134, 135, 0, 414, 136, 203, 0,
	137, 138, 439, 139, 140, 0, 141, 142, 143, 0,
	144, 304, 145, 146, 381, 147, 0, 148, 149, 0,
	150, 252, 409, 151, 152, 305, 153, 440, 154, 0,
	155, 157, 207, 156, 415, 0, 0, 158, 159, 0,
	254, 441, 0, 0, 253, 416, 417, 390, 160, 161,
	162, 163, 0, 0, 164, 165, 410, 0, 166, 167,
	168, 212, 442, 0, 169, 0, 0, 0, 0, 170,
	171, 172, 173, 368, 0, 396, 384, 385, 386, 383,
	372, 0, 0, 364, 365, 0, 0, 89, 90, 366,
	91, 0, 373, 1245, 0, 378, 0, 0, 0, 92,
	93, 174, 425, 426, 94, 427, 428, 0, 95, 179,
	96, 393, 411, 429, 430, 0, 421, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 431, 108, 432, 433, 0, 0, 109, 0, 0,
	0, 424, 111, 0, 0, 0, 0, 377, 112, 412,
	391, 0, 113, 114, 434, 115, 0, 0, 0, 295,
	0, 116, 422, 0, 190, 0, 117, 418, 420, 0,
	0, 0, 296, 118, 435, 436, 437, 0, 403, 0,
	297, 119, 298, 120, 0, 0, 423, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 392, 419, 129, 438, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 413, 134, 135, 0, 414, 136, 203, 0, 137,
	138, 439, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 381, 147, 0, 148, 149, 0, 150,
	252, 409, 151, 152, 305, 153, 440, 154, 0, 155,
	157, 207, 156, 415, 0, 0, 158, 159, 0, 254,
	441, 0, 0, 253, 416, 417, 390, 160, 161, 162,
	163, 0, 0, 164, 165, 410, 0, 166, 167, 168,
	212, 442, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 368, 0, 396, 384, 385, 386, 383, 372,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 373, 918, 0, 378, 0, 0, 0, 92, 93,
	174, 425, 426, 94, 427, 428, 0, 95, 179, 96,
	393, 411, 429, 430, 0, 421, 0, 404, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 103,
	0, 405, 407, 0, 406, 408, 104, 105, 106, 107,
	431, 108, 432, 433, 0, 0, 109, 0, 0, 0,
	424, 111, 0, 0, 0, 0, 377, 112, 412, 391,
	0, 113, 114, 434, 115, 0, 0, 0, 295, 0,
	116, 422, 0, 190, 0, 117, 418, 420, 0, 0,
	0, 296, 118, 435, 436, 437, 0, 403, 0, 297,
	119, 298, 120, 0, 0, 423, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 392, 419, 129, 438, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	413, 134, 135, 0, 414, 136, 203, 0, 137, 138,
	439, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 381, 147, 0, 148, 149, 0, 150, 252,
	409, 151, 152, 305, 153, 440, 154, 0, 155, 157,
	207, 156, 415, 0, 0, 158, 159, 0, 254, 441,
	0, 0, 253, 416, 417, 390, 160, 161, 162, 163,
	0, 0, 164, 165, 410, 0, 166, 167, 168, 212,
	442, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 364, 365, 0, 0, 0, 0, 366, 689, 914,
	373, 396, 384, 385, 386, 383, 372, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	0, 378, 0, 0, 0, 92, 93, 174, 425, 426,
	94, 427, 428, 0, 95, 179, 96, 393, 411, 429,
	430, 0, 421, 0, 404, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 405, 407,
	0, 406, 408, 104, 105, 106, 107, 431, 108, 432,
	433, 0, 0, 109, 0, 0, 0, 424, 111, 0,
	0, 0, 0, 377, 112, 412, 391, 0, 113, 114,
	434, 115, 0, 0, 0, 295, 0, 116, 422, 0,
	190, 0, 117, 418, 420, 0, 0, 0, 296, 118,
	435, 436, 437, 0, 403, 0, 297, 119, 298, 120,
	0, 0, 423, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 367,
	128, 392, 419, 129, 438, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 413, 134, 135,
	0, 414, 136, 203, 0, 137, 138, 439, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 381,
	147, 0, 148, 149, 0, 150, 252, 409, 151, 152,
	305, 153, 440, 154, 0, 155, 157, 207, 156, 415,
	0, 0, 158, 159, 0, 254, 441, 0, 0, 253,
	416, 417, 390, 160, 161, 162, 163, 0, 0, 164,
	165, 410, 0, 166, 167, 168, 212, 442, 1251, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 368, 0,
	396, 384, 385, 386, 383, 372, 0, 0, 364, 365,
	0, 0, 89, 90, 366, 91, 0, 373, 0, 0,
	378, 0, 0, 0, 92, 93, 174, 425, 426, 94,
	427, 428, 0, 95, 179, 96, 393, 411, 429, 430,
	0, 421, 0, 404, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 294, 102, 103, 0, 405, 407, 0,
	406, 408, 104, 105, 106, 107, 431, 108, 432, 433,
	462, 0, 109, 0, 0, 0, 424, 111, 0, 0,
	0, 0, 377, 112, 412, 391, 0, 113, 114, 434,
	115, 0, 0, 0, 295, 0, 116, 422, 0, 190,
	0, 117, 418, 420, 0, 0, 0, 296, 118, 435,
	436, 437, 0, 403, 0, 297, 119, 298, 120, 0,
	0, 423, 299, 121, 300, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 301, 126, 127, 367, 128,
	392, 419, 129, 438, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 302, 133, 303, 413, 134, 135, 0,
	414, 136, 203, 0, 137, 138, 439, 139, 140, 0,
	141, 142, 143, 0, 144, 304, 145, 146, 381, 147,
	0, 148, 149, 0, 150, 252, 409, 151, 152, 305,
	153, 440, 154, 0, 155, 157, 207, 156, 415, 0,
	0, 158, 159, 0, 254, 441, 0, 0, 253, 416,
	417, 390, 160, 161, 162, 163, 0, 0, 164, 165,
	410, 0, 166, 167, 168, 212, 442, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 368, 0, 396,
	384, 385, 386, 383, 372, 0, 0, 364, 365, 0,
	0, 89, 90, 366, 91, 0, 373, 0, 0, 378,
	0, 0, 0, 92, 93, 174, 425, 426, 94, 427,
	428, 0, 95, 179, 96, 393, 411, 429, 430, 0,
	421, 0, 404, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 294, 102, 103, 0, 405, 407, 0, 406,
	408, 104, 105, 106, 107, 431, 108, 432, 433, 0,
	0, 109, 0, 0, 0, 424, 111, 0, 0, 0,
	0, 377, 112, 412, 391, 0, 113, 114, 434, 115,
	0, 0, 972, 295, 0, 116, 422, 0, 190, 0,
	117, 418, 420, 0, 0, 0, 296, 118, 435, 436,
	437, 0, 403, 0, 297, 119, 298, 120, 0, 0,
	423, 299, 121, 300, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 301, 126, 127, 367, 128, 392,
	419, 129, 438, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 302, 133, 303, 413, 134, 135, 0, 414,
	136, 203, 0, 137, 138, 439, 139, 140, 0, 141,
	142, 143, 0, 144, 304, 145, 146, 381, 147, 0,
	148, 149, 0, 150, 252, 409, 151, 152, 305, 153,
	440, 154, 0, 155, 157, 207, 156, 415, 0, 0,
	158, 159, 0, 254, 441, 0, 0, 253, 416, 417,
	390, 160, 161, 162, 163, 0, 0, 164, 165, 410,
	0, 166, 167, 168, 212, 442, 0, 169, 0, 0,
	0, 0, 170, 171, 172, 173, 368, 0, 396, 384,
	385, 386, 383, 372, 0, 0, 364, 365, 0, 0,
	89, 90, 366, 91, 0, 373, 0, 0, 378, 0,
	0, 0, 92, 93, 174, 425, 426, 94, 427, 428,
	0, 95, 179, 96, 393, 411, 429, 430, 0, 421,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 431, 108, 432, 433, 0, 0,
	109, 0, 0, 0, 424, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 434, 115, 0,
	0, 0, 295, 0, 116, 422, 0, 190, 0, 117,
	418, 420, 0, 0, 0, 296, 118, 435, 436, 437,
	0, 403, 0, 297, 119, 298, 120, 0, 0, 423,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 392, 419,
	129, 438, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 413, 134, 135, 0, 414, 136,
	203, 0, 137, 138, 439, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 381, 147, 0, 148,
	149, 0, 150, 252, 409, 151, 152, 305, 153, 440,
	154, 0, 155, 157, 207, 156, 415, 0, 0, 158,
	159, 0, 254, 441, 0, 0, 253, 416, 417, 390,
	160, 161, 162, 163, 0, 0, 164, 165, 410, 0,
	166, 167, 168, 212, 442, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 368, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 365, 362, 0, 0,
	0, 366, 0, 0, 373, 396, 384, 385, 386, 383,
	372, 0, 0, 0, 0, 0, 0, 89, 90, 630,
	91, 0, 0, 0, 0, 378, 0, 0, 0, 92,
	93, 174, 425, 426, 94, 427, 428, 0, 95, 179,
	96, 393, 411, 429, 430, 0, 421, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 431, 108, 432, 433, 0, 0, 109, 0, 0,
	0, 424, 111, 0, 0, 0, 0, 377, 112, 412,
	391, 0, 113, 114, 434, 115, 0, 0, 0, 295,
	0, 116, 422, 0, 190, 0, 117, 418, 420, 0,
	0, 0, 296, 118, 435, 436, 437, 0, 403, 0,
	297, 119, 298, 120, 0, 0, 423, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 367, 128, 392, 419, 129, 438, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 413, 134, 135, 0, 414, 136, 203, 0, 137,
	138, 439, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 381, 147, 0, 148, 149, 0, 150,
	252, 409, 151, 152, 305, 153, 440, 154, 0, 155,
	157, 207, 156, 415, 0, 0, 158, 159, 0, 254,
	441, 0, 0, 253, 416, 417, 390, 160, 161, 162,
	163, 0, 0, 164, 165, 410, 0, 166, 167, 168,
	212, 442, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 368, 0, 396, 384, 385, 386, 383, 372,
	0, 0, 364, 365, 0, 0, 89, 90, 366, 91,
	0, 373, 0, 0, 378, 0, 0, 0, 92, 93,
	174, 425, 426, 94, 427, 428, 0, 95, 179, 96,
	393, 411, 429, 430, 0, 421, 0, 404, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 294, 102, 1564,
	0, 405, 407, 0, 406, 408, 104, 105, 106, 107,
	431, 108, 432, 433, 0, 0, 109, 0, 0, 0,
	424, 111, 0, 0, 0, 0, 377, 112, 412, 391,
	0, 113, 114, 434, 115, 0, 0, 0, 295, 0,
	116, 422, 0, 190, 0, 117, 418, 420, 0, 0,
	0, 296, 118, 435, 436, 437, 0, 403, 0, 297,
	119, 298, 120, 0, 0, 423, 299, 121, 300, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 301,
	126, 127, 367, 128, 392, 419, 129, 438, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 302, 133, 303,
	413, 134, 135, 0, 414, 136, 203, 0, 137, 138,
	439, 139, 140, 0, 141, 142, 143, 0, 144, 304,
	145, 146, 381, 147, 0, 148, 149, 0, 150, 252,
	409, 151, 152, 305, 153, 440, 154, 0, 155, 157,
	207, 156, 415, 0, 0, 158, 159, 0, 254, 441,
	0, 0, 253, 416, 417, 390, 160, 161, 1563, 163,
	0, 0, 164, 165, 410, 0, 166, 167, 168, 212,
	442, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 368, 0, 396, 384, 385, 386, 383, 372, 0,
	0, 364, 365, 0, 0, 89, 90, 366, 91, 0,
	373, 0, 0, 378, 0, 0, 0, 92, 93, 1562,
	425, 426, 94, 427, 428, 0, 95, 179, 96, 393,
	411, 429, 430, 0, 421, 0, 404, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 294, 102, 1564, 0,
	405, 407, 0, 406, 408, 104, 105, 106, 107, 431,
	108, 432, 433, 0, 0, 109, 0, 0, 0, 424,
	111, 0, 0, 0, 0, 377, 112, 412, 391, 0,
	113, 114, 434, 115, 0, 0, 0, 295, 0, 116,
	422, 0, 190, 0, 117, 418, 420, 0, 0, 0,
	296, 118, 435, 436, 437, 0, 403, 0, 297, 119,
	298, 120, 0, 0, 423, 299, 121, 300, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 301, 126,
	127, 367, 128, 392, 419, 129, 438, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 302, 133, 303, 413,
	134, 135, 0, 414, 136, 203, 0, 137, 138, 439,
	139, 140, 0, 141, 142, 143, 0, 144, 304, 145,
	146, 381, 147, 0, 148, 149, 0, 150, 252, 409,
	151, 152, 305, 153, 440, 154, 0, 155, 157, 207,
	156, 415, 0, 0, 158, 159, 0, 254, 441, 0,
	0, 253, 416, 417, 390, 160, 161, 1563, 163, 0,
	0, 164, 165, 410, 0, 166, 167, 168, 212, 442,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	368, 0, 396, 384, 385, 386, 383, 372, 0, 0,
	364, 365, 0, 0, 89, 90, 366, 91, 0, 373,
	0, 0, 378, 0, 0, 0, 92, 93, 174, 425,
	426, 94, 427, 428, 0, 95, 179, 96, 393, 411,
	429, 430, 0, 421, 0, 404, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 103, 0, 405,
	407, 0, 406, 408, 104, 105, 106, 107, 431, 108,
	432, 433, 0, 0, 109, 0, 0, 0, 424, 111,
	0, 0, 0, 0, 377, 112, 412, 391, 0, 113,
	114, 434, 115, 0, 0, 0, 295, 0, 116, 422,
	0, 190, 0, 117, 418, 420, 0, 0, 0, 296,
	118, 435, 436, 437, 0, 403, 0, 297, 119, 298,
	120, 0, 0, 423, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	367, 128, 392, 419, 129, 438, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 413, 134,
	135, 0, 414, 136, 203, 0, 137, 138, 439, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	381, 147, 0, 148, 149, 0, 150, 252, 409, 151,
	152, 305, 153, 440, 154, 0, 155, 157, 207, 156,
	415, 0, 0, 158, 159, 0, 254, 441, 0, 0,
	253, 416, 417, 390, 160, 161, 162, 163, 0, 0,
	164, 165, 410, 0, 166, 167, 168, 212, 442, 0,
	169, 0, 0, 0, 0, 170, 171, 172, 173, 368,
	0, 396, 384, 385, 386, 383, 372, 0, 0, 364,
	365, 0, 0, 89, 90, 366, 91, 0, 373, 0,
	0, 378, 0, 0, 0, 92, 93, 174, 425, 426,
	94, 427, 428, 0, 95, 179, 96, 393, 411, 429,
	430, 0, 421, 0, 404, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 405, 407,
	0, 406, 408, 104, 105, 106, 107, 431, 108, 432,
	433, 0, 0, 109, 0, 0, 0, 424, 111, 0,
	0, 0, 0, 377, 112, 412, 391, 0, 113, 114,
	434, 115, 0, 0, 0, 295, 0, 116, 422, 0,
	190, 0, 117, 418, 420, 0, 0, 0, 296, 118,
	435, 436, 437, 0, 403, 0, 297, 119, 298, 120,
	0, 0, 423, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 0,
	128, 392, 419, 129, 438, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 413, 134, 135,
	0, 414, 136, 203, 0, 137, 138, 439, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 962,
	147, 0, 148, 149, 0, 150, 252, 409, 151, 152,
	305, 153, 440, 154, 0, 155, 157, 207, 156, 415,
	0, 0, 158, 159, 0, 254, 441, 0, 0, 253,
	416, 417, 390, 160, 161, 162, 163, 0, 0, 164,
	165, 410, 0, 166, 167, 168, 212, 442, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 396, 384,
	385, 386, 383, 372, 0, 0, 0, 0, 958, 959,
	89, 90, 0, 91, 960, 0, 0, 961, 378, 0,
	0, 0, 92, 93, 0, 425, 426, 94, 427, 428,
	0, 95, 179, 96, 393, 411, 429, 430, 0, 421,
	0, 404, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 1564, 0, 405, 407, 0, 406, 408,
	104, 105, 106, 107, 431, 108, 432, 433, 0, 0,
	109, 0, 0, 0, 424, 111, 0, 0, 0, 0,
	377, 112, 412, 391, 0, 113, 114, 434, 115, 0,
	0, 0, 295, 0, 116, 422, 0, 190, 0, 117,
	418, 420, 0, 0, 0, 296, 118, 435, 436, 437,
	0, 403, 0, 0, 119, 298, 120, 0, 0, 423,
	299, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 367, 128, 392, 419,
	129, 438, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 302, 133, 303, 413, 134, 135, 0, 414, 136,
	203, 0, 137, 138, 439, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 381, 147, 0, 148,
	149, 0, 150, 252, 409, 151, 152, 0, 153, 440,
	154, 0, 155, 157, 207, 156, 415, 0, 0, 158,
	159, 0, 254, 441, 0, 0, 253, 416, 417, 390,
	160, 161, 1563, 163, 0, 0, 164, 165, 410, 0,
	166, 167, 168, 212, 442, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 364, 365, 89, 90, 0,
	91, 366, 0, 0, 373, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 411, 180, 181, 0, 421, 0, 404, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 405, 407, 0, 406, 408, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 412,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 295,
	0, 116, 422, 0, 190, 0, 117, 418, 420, 0,
	0, 0, 296, 118, 193, 194, 195, 0, 196, 0,
	297, 119, 298, 120, 0, 0, 423, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 0, 128, 0, 419, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 302, 133,
	303, 413, 134, 135, 0, 414, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 409, 151, 152, 305, 153, 206, 154, 0, 155,
	157, 207, 156, 415, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 416, 417, 0, 160, 161, 162,
	163, 0, 0, 164, 165, 410, 0, 166, 167, 168,
	212, 213, 0, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 288, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 1359, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 293, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 294, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 295, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 296,
	118, 193, 194, 195, 0, 196, 0, 297, 119, 298,
	120, 0, 0, 197, 299, 121, 300, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 301, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 302, 133, 303, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 304, 145, 146,
	205, 147, 0, 148, 149, 43, 150, 252, 0, 151,
	152, 305, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 45, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 0,
	164, 165, 0, 0, 166, 167, 168, 292, 213, 0,
	169, 0, 0, 0, 41, 170, 171, 172, 173, 0,
	42, 288, 507, 511, 0, 512, 502, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 40, 0,
	0, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 293, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 515, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 504, 0, 113, 114,
	188, 115, 0, 0, 0, 295, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 296, 118,
	193, 194, 195, 0, 196, 0, 297, 119, 298, 120,
	0, 0, 197, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 505, 0,
	0, 0, 132, 200, 302, 133, 303, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	305, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 503, 160, 161, 162, 163, 0, 0, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	0, 0, 0, 0, 170, 171, 172, 173, 288, 507,
	511, 0, 512, 502, 0, 0, 0, 0, 513, 508,
	89, 90, 0, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 293, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 294, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 498, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 504, 0, 113, 114, 188, 115, 0,
	0, 0, 295, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 296, 118, 193, 194, 195,
	0, 196, 0, 297, 119, 298, 120, 0, 0, 197,
	299, 121, 300, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 301, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 505, 0, 0, 0, 132,
	200, 302, 133, 303, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 304, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 305, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 503,
	160, 161, 162, 163, 0, 0, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 288, 507, 511, 0, 512,
	502, 0, 0, 0, 0, 513, 508, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 293, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 294, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	504, 0, 113, 114, 188, 115, 0, 0, 0, 295,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 296, 118, 193, 194, 195, 0, 196, 0,
	297, 119, 298, 120, 0, 0, 197, 299, 121, 300,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	301, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 505, 0, 0, 0, 132, 200, 302, 133,
	303, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	304, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 305, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 503, 160, 161, 162,
	163, 0, 0, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 86, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 513, 508, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	263, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 43, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 45, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 0,
	164, 165, 0, 0, 166, 167, 168, 292, 213, 0,
	169, 0, 0, 0, 41, 170, 171, 172, 173, 86,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 0, 91, 0, 0, 0, 829, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 43, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 45,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 0, 164, 165, 0,
	0, 166, 167, 168, 292, 213, 0, 169, 0, 0,
	0, 41, 170, 171, 172, 173, 86, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	0, 91, 0, 0, 0, 40, 0, 1061, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 353, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 191, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 263, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	0, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 0, 0, 0, 0, 170, 171, 172, 173,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 0, 91, 0, 0, 0, 829,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 0, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 0,
	0, 0, 0, 170, 171, 172, 173, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	90, 0, 91, 0, 0, 0, 774, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 191,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 0, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 0, 0, 0, 0,
	170, 171, 172, 173, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 0, 91,
	0, 0, 0, 1269, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 191, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 0, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 0, 0, 0, 0, 170, 171, 172,
	173, 288, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 90, 0, 91, 0, 0, 0,
	453, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 293, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 294, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 295, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 296, 118,
	193, 194, 195, 0, 196, 0, 297, 119, 298, 120,
	0, 0, 197, 299, 121, 300, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 301, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 302, 133, 303, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 304, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	305, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 749, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 747, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	752, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 807, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 751, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 808, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 86, 169, 0, 0, 0,
	0, 170, 171, 172, 173, 0, 0, 89, 90, 0,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 749, 182, 0, 0, 744,
	97, 98, 99, 0, 100, 747, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 752, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 743, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 751, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 750, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 86, 169, 0, 0, 0, 0, 170, 171,
	172, 173, 0, 0, 89, 90, 0, 91, 0, 0,
	0, 0, 0, 1061, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 191, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 191, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 263, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	493, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	251, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 492, 158, 159, 0,
	254, 209, 0, 0, 253, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 269, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 263, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 191, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 1006,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 1004, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 995, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 139, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	622, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 250, 0, 0, 0, 122, 123,
	124, 125, 251, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 252, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 254, 209, 0, 0, 253, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 479, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 135, 0, 202, 136, 203, 0, 137,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 147, 0, 148, 149, 0, 150,
	252, 0, 0, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 86, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 0, 169, 89, 90, 0, 91, 170, 171,
	172, 173, 0, 0, 0, 0, 92, 93, 174, 175,
	176, 94, 177, 178, 0, 95, 179, 96, 0, 0,
	180, 181, 0, 182, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 106, 107, 183, 108,
	184, 185, 0, 0, 109, 0, 0, 0, 110, 111,
	0, 0, 0, 0, 186, 112, 187, 0, 0, 113,
	114, 188, 115, 0, 0, 0, 0, 0, 116, 189,
	0, 190, 0, 117, 338, 192, 0, 0, 0, 0,
	118, 193, 194, 195, 0, 196, 0, 0, 119, 0,
	120, 0, 0, 197, 0, 121, 0, 0, 250, 0,
	0, 0, 122, 123, 124, 125, 251, 0, 126, 127,
	0, 128, 0, 198, 129, 199, 130, 131, 0, 0,
	0, 0, 0, 132, 200, 0, 133, 0, 201, 134,
	135, 0, 202, 136, 203, 0, 137, 138, 204, 139,
	140, 0, 141, 142, 143, 0, 144, 0, 145, 146,
	205, 147, 0, 148, 149, 0, 150, 252, 0, 151,
	152, 0, 153, 206, 154, 0, 155, 157, 207, 156,
	208, 0, 0, 158, 159, 0, 254, 209, 0, 0,
	253, 210, 211, 0, 160, 161, 162, 163, 0, 86,
	164, 165, 0, 0, 166, 167, 168, 212, 213, 0,
	169, 89, 90, 0, 91, 170, 171, 172, 173, 0,
	0, 0, 0, 92, 93, 174, 175, 176, 94, 177,
	178, 0, 95, 179, 96, 0, 0, 180, 181, 0,
	182, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 0, 0, 102, 103, 0, 0, 0, 0, 0,
	0, 104, 105, 106, 107, 183, 108, 184, 185, 0,
	0, 109, 0, 0, 0, 110, 111, 0, 0, 0,
	0, 186, 112, 187, 0, 0, 113, 114, 188, 115,
	0, 0, 0, 0, 0, 116, 189, 0, 190, 0,
	117, 335, 192, 0, 0, 0, 0, 118, 193, 194,
	195, 0, 196, 0, 0, 119, 0, 120, 0, 0,
	197, 0, 121, 0, 0, 250, 0, 0, 0, 122,
	123, 124, 125, 251, 0, 126, 127, 0, 128, 0,
	198, 129, 199, 130, 131, 0, 0, 0, 0, 0,
	132, 200, 0, 133, 0, 201, 134, 135, 0, 202,
	136, 203, 0, 137, 138, 204, 139, 140, 0, 141,
	142, 143, 0, 144, 0, 145, 146, 205, 147, 0,
	148, 149, 0, 150, 252, 0, 151, 152, 0, 153,
	206, 154, 0, 155, 157, 207, 156, 208, 0, 0,
	158, 159, 0, 254, 209, 0, 0, 253, 210, 211,
	0, 160, 161, 162, 163, 0, 86, 164, 165, 0,
	0, 166, 167, 168, 212, 213, 0, 169, 89, 90,
	0, 91, 170, 171, 172, 173, 0, 0, 0, 0,
	92, 93, 174, 175, 176, 94, 177, 178, 0, 95,
	179, 96, 0, 0, 180, 181, 0, 182, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	106, 107, 183, 108, 184, 185, 0, 0, 109, 0,
	0, 0, 110, 111, 0, 0, 0, 0, 186, 112,
	187, 0, 0, 113, 114, 188, 115, 0, 0, 0,
	0, 0, 116, 189, 0, 190, 0, 117, 191, 192,
	0, 0, 0, 0, 118, 193, 194, 195, 0, 196,
	0, 0, 119, 0, 120, 0, 0, 197, 0, 121,
	0, 0, 250, 0, 0, 0, 122, 123, 124, 125,
	83, 0, 126, 127, 0, 128, 0, 198, 129, 199,
	130, 131, 0, 0, 0, 0, 0, 132, 200, 0,
	133, 0, 201, 134, 135, 0, 202, 136, 203, 0,
	137, 138, 204, 139, 140, 0, 141, 142, 143, 0,
	144, 0, 145, 146, 205, 147, 0, 148, 149, 0,
	150, 252, 0, 151, 152, 0, 153, 206, 154, 0,
	155, 157, 207, 156, 208, 0, 0, 158, 159, 0,
	82, 209, 0, 0, 78, 210, 211, 0, 160, 161,
	162, 163, 0, 86, 164, 165, 0, 0, 166, 167,
	168, 212, 213, 0, 169, 89, 90, 0, 91, 170,
	171, 172, 173, 0, 0, 0, 0, 92, 93, 174,
	175, 176, 94, 177, 178, 0, 95, 179, 96, 0,
	0, 180, 181, 0, 182, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 0, 0, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 106, 107, 183,
	108, 184, 185, 0, 0, 109, 0, 0, 0, 110,
	111, 0, 0, 0, 0, 186, 112, 187, 0, 0,
	113, 114, 188, 115, 0, 0, 0, 0, 0, 116,
	189, 0, 190, 0, 117, 283, 192, 0, 0, 0,
	0, 118, 193, 194, 195, 0, 196, 0, 0, 119,
	0, 120, 0, 0, 197, 0, 121, 0, 0, 250,
	0, 0, 0, 122, 123, 124, 125, 251, 0, 126,
	127, 0, 128, 0, 198, 129, 199, 130, 131, 0,
	0, 0, 0, 0, 132, 200, 0, 133, 0, 201,
	134, 135, 0, 202, 136, 203, 0, 137, 138, 204,
	139, 140, 0, 141, 142, 143, 0, 144, 0, 145,
	146, 205, 147, 0, 148, 149, 0, 150, 252, 0,
	151, 152, 0, 153, 206, 154, 0, 155, 157, 207,
	156, 208, 0, 0, 158, 159, 0, 254, 209, 0,
	0, 253, 210, 211, 0, 160, 161, 162, 163, 0,
	86, 164, 165, 0, 0, 166, 167, 168, 212, 213,
	0, 169, 89, 90, 0, 91, 170, 171, 172, 173,
	0, 0, 0, 0, 92, 93, 174, 175, 176, 94,
	177, 178, 0, 95, 179, 96, 0, 0, 180, 181,
	0, 182, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 106, 107, 183, 108, 184, 185,
	0, 0, 109, 0, 0, 0, 110, 111, 0, 0,
	0, 0, 186, 112, 187, 0, 0, 113, 114, 188,
	115, 0, 0, 0, 0, 0, 116, 189, 0, 190,
	0, 117, 280, 192, 0, 0, 0, 0, 118, 193,
	194, 195, 0, 196, 0, 0, 119, 0, 120, 0,
	0, 197, 0, 121, 0, 0, 250, 0, 0, 0,
	122, 123, 124, 125, 251, 0, 126, 127, 0, 128,
	0, 198, 129, 199, 130, 131, 0, 0, 0, 0,
	0, 132, 200, 0, 133, 0, 201, 134, 135, 0,
	202, 136, 203, 0, 137, 138, 204, 139, 140, 0,
	141, 142, 143, 0, 144, 0, 145, 146, 205, 147,
	0, 148, 149, 0, 150, 252, 0, 151, 152, 0,
	153, 206, 154, 0, 155, 157, 207, 156, 208, 0,
	0, 158, 159, 0, 254, 209, 0, 0, 253, 210,
	211, 0, 160, 161, 162, 163, 0, 86, 164, 165,
	0, 0, 166, 167, 168, 212, 213, 0, 169, 89,
	90, 0, 91, 170, 171, 172, 173, 0, 0, 0,
	0, 92, 93, 174, 175, 176, 94, 177, 178, 0,
	95, 179, 96, 0, 0, 180, 181, 0, 182, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 0,
	0, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 106, 107, 183, 108, 184, 185, 0, 0, 109,
	0, 0, 0, 110, 111, 0, 0, 0, 0, 186,
	112, 187, 0, 0, 113, 114, 188, 115, 0, 0,
	0, 0, 0, 116, 189, 0, 190, 0, 117, 278,
	192, 0, 0, 0, 0, 118, 193, 194, 195, 0,
	196, 0, 0, 119, 0, 120, 0, 0, 197, 0,
	121, 0, 0, 250, 0, 0, 0, 122, 123, 124,
	125, 251, 0, 126, 127, 0, 128, 0, 198, 129,
	199, 130, 131, 0, 0, 0, 0, 0, 132, 200,
	0, 133, 0, 201, 134, 135, 0, 202, 136, 203,
	0, 137, 138, 204, 139, 140, 0, 141, 142, 143,
	0, 144, 0, 145, 146, 205, 147, 0, 148, 149,
	0, 150, 252, 0, 151, 152, 0, 153, 206, 154,
	0, 155, 157, 207, 156, 208, 0, 0, 158, 159,
	0, 254, 209, 0, 0, 253, 210, 211, 0, 160,
	161, 162, 163, 0, 86, 164, 165, 0, 0, 166,
	167, 168, 212, 213, 0, 169, 89, 90, 0, 91,
	170, 171, 172, 173, 0, 0, 0, 0, 92, 93,
	174, 175, 176, 94, 177, 178, 0, 95, 179, 96,
	0, 0, 180, 181, 0, 182, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 106, 107,
	183, 108, 184, 185, 0, 0, 109, 0, 0, 0,
	110, 111, 0, 0, 0, 0, 186, 112, 187, 0,
	0, 113, 114, 188, 115, 0, 0, 0, 0, 0,
	116, 189, 0, 190, 0, 117, 272, 192, 0, 0,
	0, 0, 118, 193, 194, 195, 0, 196, 0, 0,
	119, 0, 120, 0, 0, 197, 0, 121, 0, 0,
	250, 0, 0, 0, 122, 123, 124, 125, 251, 0,
	126, 127, 0, 128, 0, 198, 129, 199, 130, 131,
	0, 0, 0, 0, 0, 132, 200, 0, 133, 0,
	201, 134, 135, 0, 202, 136, 203, 0, 137, 138,
	204, 139, 140, 0, 141, 142, 143, 0, 144, 0,
	145, 146, 205, 147, 0, 148, 149, 0, 150, 252,
	0, 151, 152, 0, 153, 206, 154, 0, 155, 157,
	207, 156, 208, 0, 0, 158, 159, 0, 254, 209,
	0, 0, 253, 210, 211, 0, 160, 161, 162, 163,
	0, 86, 164, 165, 0, 0, 166, 167, 168, 212,
	213, 0, 169, 89, 90, 0, 91, 170, 171, 172,
	173, 0, 0, 0, 0, 92, 93, 174, 175, 176,
	94, 177, 178, 0, 95, 179, 96, 0, 0, 180,
	181, 0, 182, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 0, 0, 102, 103, 0, 0, 0,
	0, 0, 0, 104, 105, 106, 107, 183, 108, 184,
	185, 0, 0, 109, 0, 0, 0, 110, 111, 0,
	0, 0, 0, 186, 112, 187, 0, 0, 113, 114,
	188, 115, 0, 0, 0, 0, 0, 116, 189, 0,
	190, 0, 117, 191, 192, 0, 0, 0, 0, 118,
	193, 194, 195, 0, 196, 0, 0, 119, 0, 120,
	0, 0, 197, 0, 121, 0, 0, 250, 0, 0,
	0, 122, 123, 124, 125, 251, 0, 126, 127, 0,
	128, 0, 198, 129, 199, 130, 131, 0, 0, 0,
	0, 0, 132, 200, 0, 133, 0, 201, 134, 135,
	0, 202, 136, 203, 0, 137, 138, 204, 247, 140,
	0, 141, 142, 143, 0, 144, 0, 145, 146, 205,
	147, 0, 148, 149, 0, 150, 252, 0, 151, 152,
	0, 153, 206, 154, 0, 155, 157, 207, 156, 208,
	0, 0, 158, 159, 0, 254, 209, 0, 0, 253,
	210, 211, 0, 160, 161, 162, 163, 0, 86, 164,
	165, 0, 0, 166, 167, 168, 212, 213, 0, 169,
	89, 90, 0, 91, 170, 171, 172, 173, 0, 0,
	0, 0, 92, 93, 174, 175, 176, 94, 177, 178,
	0, 95, 179, 96, 0, 0, 180, 181, 0, 182,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 106, 107, 183, 108, 184, 185, 0, 0,
	109, 0, 0, 0, 110, 111, 0, 0, 0, 0,
	186, 112, 187, 0, 0, 113, 114, 188, 115, 0,
	0, 0, 0, 0, 116, 189, 0, 190, 0, 117,
	191, 192, 0, 0, 0, 0, 118, 193, 194, 195,
	0, 196, 0, 0, 119, 0, 120, 0, 0, 197,
	0, 121, 0, 0, 76, 0, 0, 0, 122, 123,
	124, 125, 83, 0, 126, 127, 0, 128, 0, 198,
	129, 199, 130, 131, 0, 0, 0, 0, 0, 132,
	200, 0, 133, 0, 201, 134, 135, 0, 202, 136,
	203, 0, 137, 138, 204, 139, 140, 0, 141, 142,
	143, 0, 144, 0, 145, 146, 205, 147, 0, 148,
	149, 0, 150, 77, 0, 151, 152, 0, 153, 206,
	154, 0, 155, 157, 207, 156, 208, 0, 0, 158,
	159, 0, 82, 209, 0, 0, 78, 210, 211, 0,
	160, 161, 162, 163, 0, 86, 164, 165, 0, 0,
	166, 167, 168, 212, 213, 0, 169, 89, 90, 0,
	91, 170, 171, 172, 173, 0, 0, 0, 0, 92,
	93, 174, 175, 176, 94, 177, 178, 0, 95, 179,
	96, 0, 0, 180, 181, 0, 182, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 0, 0, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 106,
	107, 183, 108, 184, 185, 0, 0, 109, 0, 0,
	0, 110, 111, 0, 0, 0, 0, 186, 112, 187,
	0, 0, 113, 114, 188, 115, 0, 0, 0, 0,
	0, 116, 189, 0, 190, 0, 117, 191, 192, 0,
	0, 0, 0, 118, 193, 194, 195, 0, 196, 0,
	0, 119, 0, 120, 0, 0, 197, 0, 121, 0,
	0, 250, 0, 0, 0, 122, 123, 124, 125, 251,
	0, 126, 127, 0, 128, 0, 198, 129, 199, 130,
	131, 0, 0, 0, 0, 0, 132, 200, 0, 133,
	0, 201, 134, 0, 0, 202, 136, 203, 0, 0,
	138, 204, 139, 140, 0, 141, 142, 143, 0, 144,
	0, 145, 146, 205, 0, 0, 148, 149, 0, 150,
	252, 0, 151, 152, 0, 153, 206, 154, 0, 155,
	157, 207, 156, 208, 0, 0, 158, 159, 0, 254,
	209, 0, 0, 253, 210, 211, 0, 160, 161, 162,
	163, 0, 0, 164, 165, 0, 0, 166, 167, 168,
	212, 213, 646, 169, 664, 665, 666, 0, 170, 171,
	172, 173, 0, 0, 667, 0, 0, 0, 0, 0,
	648, 0, 673, 0, 0, 0, 0, 0, 646, 0,
	664, 665, 666, 0, 0, 0, 0, 0, 647, 0,
	667, 0, 0, 0, 661, 0, 648, 0, 673, 0,
	0, 0, 0, 0, 0, 646, 0, 664, 665, 666,
	0, 0, 0, 0, 647, 0, 0, 667, 0, 0,
	661, 0, 0, 648, 0, 673, 0, 0, 0, 0,
	0, 646, 0, 664, 665, 666, 0, 0, 0, 0,
	0, 647, 0, 667, 0, 0, 0, 661, 0, 648,
	674, 673, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 647, 0, 0,
	669, 0, 0, 661, 0, 662, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 0, 668, 669, 0, 0, 0,
	0, 662, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
	0, 668, 0, 669, 0, 0, 663, 0, 662, 674,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	672, 0, 0, 0, 0, 0, 0, 0, 668, 669,
	0, 0, 663, 0, 662, 0, 0, 0, 0, 0,
	0, 671, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 668, 0, 0, 0, 0, 663,
	0, 0, 0, 670, 0, 658, 659, 660, 671, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 0, 0,
	0, 0, 0, 0, 0, 663, 1166, 0, 0, 670,
	0, 658, 659, 660, 671, 657, 654, 655, 656, 649,
	650, 651, 652, 653, 0, 0, 0, 0, 0, 0,
	0, 0, 1165, 0, 0, 0, 670, 0, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	0, 0, 670, 0, 658, 659, 660, 0, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 646, 0, 664,
	665, 666, 1521, 0, 0, 0, 0, 0, 0, 667,
	0, 0, 0, 0, 0, 648, 646, 673, 664, 665,
	666, 0, 0, 0, 0, 0, 0, 0, 667, 0,
	0, 0, 0, 647, 648, 0, 673, 0, 0, 661,
	0, 0, 0, 646, 0, 664, 665, 666, 0, 0,
	0, 0, 647, 0, 0, 667, 0, 0, 661, 0,
	0, 648, 0, 673, 0, 0, 0, 0, 0, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 0, 647,
	0, 667, 0, 0, 0, 661, 0, 648, 0, 673,
	0, 0, 0, 0, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 672, 0, 0, 0,
	0, 661, 0, 0, 674, 669, 0, 0, 0, 0,
	662, 0, 0, 0, 0, 672, 0, 0, 0, 0,
	0, 0, 0, 0, 669, 0, 0, 0, 0, 662,
	668, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 0, 0, 668,
	0, 669, 0, 0, 0, 0, 662, 674, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 672, 0,
	671, 0, 0, 0, 0, 0, 668, 669, 0, 0,
	663, 0, 662, 0, 0, 0, 0, 0, 0, 671,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 668, 0, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 663, 0, 0, 0, 670, 1520, 658,
	659, 660, 671, 657, 654, 655, 656, 649, 650, 651,
	652, 653, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 0,
	0, 0, 0, 0, 1484, 0, 0, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 646, 0, 664, 665, 666,
	1479, 0, 0, 0, 0, 0, 0, 667, 0, 0,
	0, 0, 0, 648, 646, 673, 664, 665, 666, 0,
	0, 0, 0, 0, 0, 0, 667, 0, 0, 0,
	0, 647, 648, 0, 673, 0, 0, 661, 0, 0,
	0, 646, 0, 664, 665, 666, 0, 0, 0, 0,
	647, 0, 0, 667, 0, 0, 661, 0, 0, 648,
	0, 673, 0, 0, 0, 0, 0, 646, 0, 664,
	665, 666, 0, 0, 0, 0, 0, 647, 0, 667,
	0, 0, 0, 661, 0, 648, 0, 673, 0, 0,
	0, 0, 0, 674, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 647, 672, 0, 0, 0, 0, 661,
	0, 0, 674, 669, 0, 0, 0, 0, 662, 0,
	0, 0, 0, 672, 0, 0, 0, 0, 0, 0,
	0, 0, 669, 0, 0, 0, 0, 662, 668, 674,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 0, 0, 0, 0, 0, 668, 0, 669,
	0, 0, 0, 0, 662, 674, 0, 0, 0, 663,
	0, 0, 0, 0, 0, 0, 672, 0, 671, 0,
	0, 0, 0, 0, 668, 669, 0, 0, 663, 0,
	662, 0, 0, 0, 0, 0, 0, 671, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 0, 0, 663, 0, 0, 0, 0,
	0, 0, 0, 0, 671, 0, 670, 0, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 663, 0, 0, 0, 670, 1475, 658, 659, 660,
	671, 657, 654, 655, 656, 649, 650, 651, 652, 653,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 670, 0, 658, 659, 660, 0, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 0, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 646, 0, 664, 665, 666, 1334, 0,
	0, 0, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 648, 646, 673, 664, 665, 666, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 647,
	648, 0, 673, 0, 0, 661, 0, 0, 0, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 647, 0,
	0, 667, 0, 0, 661, 0, 0, 648, 0, 673,
	0, 0, 0, 0, 0, 646, 0, 664, 665, 666,
	0, 0, 0, 0, 0, 647, 0, 667, 0, 0,
	0, 661, 0, 648, 0, 673, 0, 0, 0, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 647, 672, 0, 0, 0, 0, 661, 0, 0,
	674, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 662, 668, 674, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 668, 0, 669, 0, 0,
	0, 0, 662, 674, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 672, 0, 671, 0, 0, 0,
	0, 0, 668, 669, 0, 0, 663, 0, 662, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 668, 0,
	0, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 663,
	0, 0, 0, 670, 1272, 658, 659, 660, 671, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 0, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 1126, 0, 1142, 1143, 1144,
	910, 0, 0, 0, 0, 0, 670, 1241, 658, 659,
	660, 0, 657, 654, 655, 656, 649, 650, 651, 652,
	653, 0, 0, 646, 1318, 664, 665, 666, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 1139, 0, 0,
	0, 648, 646, 673, 664, 665, 666, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 647,
	648, 0, 673, 0, 0, 661, 0, 0, 0, 0,
	646, 0, 664, 665, 666, 0, 0, 0, 647, 0,
	0, 0, 667, 0, 661, 0, 818, 0, 648, 0,
	673, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 0, 647, 1581, 0, 0,
	0, 0, 661, 0, 0, 0, 0, 0, 1140, 0,
	0, 674, 0, 0, 0, 0, 0, 1156, 0, 1155,
	0, 0, 672, 0, 0, 0, 0, 819, 0, 0,
	674, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 662, 668, 0, 674, 1141,
	0, 0, 0, 0, 0, 0, 0, 0, 1580, 672,
	0, 0, 0, 0, 0, 668, 0, 0, 669, 0,
	0, 0, 0, 662, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 0, 0, 671, 0, 0, 0,
	0, 0, 0, 668, 0, 0, 663, 0, 0, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 1136, 1137,
	1138, 0, 1135, 1132, 1133, 1134, 1127, 1128, 1129, 1130,
	1131, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 0,
	0, 0, 0, 670, 0, 658, 659, 660, 0, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 1126, 0,
	1142, 1143, 1144, 0, 0, 0, 0, 0, 0, 0,
	0, 670, 0, 658, 659, 660, 0, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 676, 0, 0, 0,
	0, 0, 646, 0, 664, 665, 666, 0, 0, 0,
	1139, 0, 0, 0, 667, 0, 0, 675, 0, 0,
	648, 646, 673, 664, 665, 666, 0, 0, 0, 0,
	0, 0, 0, 667, 0, 0, 0, 0, 647, 648,
	0, 673, 0, 0, 661, 0, 0, 0, 646, 0,
	664, 665, 666, 0, 0, 0, 0, 647, 0, 0,
	667, 0, 0, 661, 0, 0, 648, 0, 673, 0,
	0, 0, 0, 0, 646, 0, 664, 665, 666, 0,
	0, 0, 0, 0, 647, 0, 667, 0, 0, 0,
	661, 1140, 648, 0, 673, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	647, 672, 0, 0, 0, 0, 661, 0, 0, 674,
	669, 0, 0, 0, 0, 662, 0, 0, 0, 0,
	672, 0, 0, 0, 0, 1162, 0, 0, 0, 669,
	0, 0, 1141, 0, 662, 668, 674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 672, 0, 0,
	0, 0, 0, 0, 668, 242, 669, 0, 0, 0,
	0, 662, 674, 0, 0, 0, 663, 0, 0, 0,
	0, 0, 0, 672, 0, 671, 0, 0, 0, 0,
	0, 668, 669, 0, 0, 663, 0, 662, 0, 0,
	0, 1136, 1137, 1138, 671, 1135, 1132, 1133, 1134, 1127,
	1128, 1129, 1130, 1131, 0, 0, 0, 668, 0, 0,
	0, 0, 663, 0, 0, 0, 0, 0, 0, 0,
	0, 671, 0, 670, 0, 658, 659, 660, 0, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 663, 0,
	0, 0, 670, 0, 658, 659, 660, 671, 657, 654,
	655, 656, 649, 650, 651, 652, 653, 0, 0, 0,
	0, 1266, 0, 0, 0, 0, 0, 0, 0, 670,
	0, 658, 659, 660, 0, 657, 654, 655, 656, 649,
	650, 651, 652, 653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 670, 0, 658, 659, 660,
	0, 657, 654, 655, 656, 649, 650, 651, 652, 653,
	646, 0, 664, 665, 666, 0, 0, 0, 0, 0,
	0, 0, 667, 0, 0, 1157, 0, 0, 648, 646,
	673, 664, 665, 666, 0, 0, 0, 0, 0, 0,
	0, 667, 0, 0, 0, 0, 647, 648, 0, 673,
	0, 0, 661, 0, 0, 0, 0, 646, 0, 664,
	665, 666, 0, 0, 0, 647, 0, 0, 0, 667,
	0, 661, 1119, 0, 0, 648, 0, 673, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 647, 0, 0, 0, 0, 0, 661,
	0, 0, 0, 0, 0, 0, 0, 0, 674, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 672,
	0, 0, 0, 0, 0, 0, 0, 674, 669, 0,
	0, 0, 0, 662, 0, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 0, 662, 668, 0, 674, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 672, 0, 0, 0,
	0, 0, 668, 0, 0, 669, 0, 0, 0, 0,
	662, 0, 1124, 0, 663, 0, 0, 0, 0, 0,
	0, 0, 0, 671, 0, 0, 0, 0, 0, 0,
	668, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 0, 0, 0, 0, 0, 0, 0, 0,
	671, 670, 0, 658, 659, 660, 0, 657, 654, 655,
	656, 649, 650, 651, 652, 653, 0, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 1126, 0, 1142, 1143, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 670, 0,
	658, 659, 660, 0, 657, 654, 655, 656, 649, 650,
	651, 652, 653, 646, 0, 664, 665, 666, 0, 0,
	0, 0, 0, 0, 0, 667, 0, 1139, 0, 0,
	0, 648, 646, 673, 664, 665, 666, 0, 0, 0,
	0, 0, 0, 0, 667, 0, 0, 0, 0, 647,
	648, 0, 673, 0, 0, 661, 0, 0, 0, 646,
	0, 664, 665, 666, 0, 0, 0, 0, 647, 0,
	0, 0, 0, 0, 661, 0, 0, 648, 0, 673,
	0, 0, 0, 1146, 0, 1126, 0, 1142, 1143, 1144,
	0, 0, 0, 0, 1145, 647, 0, 0, 0, 0,
	0, 661, 0, 0, 0, 0, 0, 0, 1140, 0,
	0, 674, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 672, 0, 0, 0, 0, 1139, 0, 0,
	674, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	0, 672, 0, 0, 0, 0, 0, 0, 0, 0,
	669, 0, 0, 0, 0, 662, 668, 674, 0, 1141,
	0, 0, 0, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 669, 0, 0,
	0, 648, 662, 673, 0, 0, 0, 663, 0, 0,
	0, 0, 0, 0, 1145, 0, 671, 0, 0, 647,
	0, 0, 0, 0, 0, 661, 663, 0, 1140, 0,
	0, 0, 0, 0, 0, 671, 0, 0, 1136, 1137,
	1138, 0, 1135, 1132, 1133, 1134, 1127, 1128, 1129, 1130,
	1131, 0, 0, 663, 0, 0, 0, 0, 0, 0,
	0, 0, 671, 0, 670, 0, 658, 659, 660, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 1141,
	0, 674, 0, 670, 0, 658, 659, 660, 0, 657,
	654, 655, 656, 649, 650, 651, 652, 653, 0, 0,
	0, 669, 0, 0, 0, 0, 662, 0, 0, 0,
	670, 0, 658, 659, 660, 0, 657, 654, 655, 656,
	649, 650, 651, 652, 653, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1136, 1137,
	1138, 0, 1135, 1132, 1133, 1134, 1127, 1128, 1129, 1130,
	1131, 846, 861, 838, 854, 853, 0, 663, 839, 0,
	0, 0, 863, 862, 0, 0, 671, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	859, 0, 851, 850, 0, 0, 0, 0, 0, 0,
	849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 670, 0, 0, 0, 0, 0,
	657, 654, 655, 656, 649, 650, 651, 652, 653, 0,
	0, 0, 0, 842, 843, 844, 0, 524, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 840, 0, 0, 860,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864,
}
var sqlPact = [...]int{

	119, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 707,
	-1000, -1000, -1000, 469, 706, 121, 1011, 1011, -1000, -1000,
	14974, 1887, 337, 337, 337, 383, 472, 78, -1000, 468,
	44, 14757, 11936, 1055, -13, 11285, 218, 119, 11719, 11936,
	14540, 909, 825, 11285, 14323, 14106, 13889, -1000, 7818, -1000,
	-1000, -1000, -1000, 670, -1000, -14, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 669, -1000, 13672, 13672, 814, -1000,
	-1000, 481, 261, 1064, -1000, -8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 908, -1000, 667, 907,
	906, 259, 820, -1000, 814, -1000, -1000, -1000, 11285, -1000,
	13455, 840, 13238, -1000, 468, -1000, -1000, -1000, 690, 1046,
	1046, 1046, 1099, 79, 73, 78, -15, 11936, -1000, 219,
	-1000, -1000, -1000, -1000, -1000, -15, 5894, 5894, -1000, -1000,
	218, -1000, 233, 10160, -141, -1000, 5416, -1000, 746, 974,
	558, 542, 969, 11285, 11936, 458, 13021, -1000, 968, 68,
	965, -1000, -23, 957, -1000, -26, -1000, -1000, -1000, -1000,
	-1000, -1000, 218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 11502, 945, 11502, -1000,
	-1000, -1000, 775, 8294, 8057, 1006, 959, -1000, -1000, -1000,
	-9, 3249, 11936, 919, 11502, 11936, -1000, 11936, -1000, 771,
	-1000, -1000, 83, -1000, 216, 738, 12804, -1000, 734, -1000,
	690, -1000, 636, 765, 6151, 6868, 78, -1000, -1000, 78,
	78, 6868, -1000, -1000, 11936, -15, 1124, 11936, 905, -17,
	-1000, 16992, -1000, -1000, 6868, 6868, 6868, 6868, 6868, 618,
	-1000, -1000, -1000, 3725, -1000, -1000, -141, 213, 224, -1000,
	-1000, 212, -141, -1000, -1000, -1000, -1000, 211, 1239, 283,
	-1000, -1000, -1000, 6868, 269, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 918, 208, 207, -1000, -1000, -1000,
	-1000, 205, 204, 202, 201, 200, 198, 195, 194, 193,
	191, 190, 189, 186, 610, -1000, 298, -1000, -1000, 298,
	298, -1000, 146, 146, 150, -1000, -1000, -1000, 146, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 166, 63,
	-1000, -1000, -1000, 11936, -141, -1000, 3011, 3249, 6868, -27,
	-1000, 17603, -1000, -61, 556, -1000, 10841, 1036, 1029, 1040,
	11285, 426, 410, 11936, 274, 58, 1119, 9686, -1000, 11936,
	11936, -1000, 11936, -1000, -1000, 11936, 11936, 11936, 44, 10397,
	401, -24, 11936, 11936, -1000, 903, 754, -18, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1175, -1000,
	-1000, -1000, -1000, 1222, -18, -1000, -1000, -1000, -1000, -1000,
	1233, -1000, -1000, -1000, -1000, 3249, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11936, -1000, -1000, -1000, -1000, -1000, 11285, 10614,
	953, 662, 730, -1000, 952, -1000, -1000, -1000, -1000, 17603,
	-1000, 17603, 504, 828, -1000, 828, -21, -1000, 16740, -1000,
	165, -28, -1000, 274, 9449, 5894, 17900, 11936, 365, 6868,
	6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868,
	6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868, 6868,
	954, 397, 1191, 621, 145, 3249, -1000, 1159, 1159, 1159,
	2392, 2392, 147, -146, 16419, -22, -141, -1000, -1000, 4920,
	4681, -141, 2715, -1000, 566, 1220, 281, 17603, 926, 864,
	154, 72, 70, 6868, 880, 6868, 7107, 6868, 6868, 3964,
	6868, 6868, 6868, 6868, 6868, 6868, -1000, 153, -1000, -1000,
	-1000, -1000, 1219, -1000, -1000, 1217, -1000, 1196, 274, 69,
	-1000, -1000, -1000, -1000, 2002, 5416, -1000, 681, 11936, 11936,
	11936, -1000, -1000, 729, 12587, -1000, 17900, 11936, -1000, 152,
	151, 802, 795, 11936, 11936, 12370, 12153, 11936, 616, 11936,
	11936, 541, -1000, 6868, 661, -1000, 8995, 305, 11936, 28,
	-1000, -1000, -1000, 246, 11936, -1000, -1000, -1000, 68, -1000,
	-23, -1000, -1000, 11936, -24, -25, 11936, -1000, 501, -1000,
	591, -1000, 8531, -1000, -1000, -1000, 566, -1000, -75, -1000,
	-1000, 67, -47, -1000, -1000, -1000, -1000, 11936, 196, 11936,
	11936, 946, 11936, -1000, -1000, -1000, 6868, -1000, -1000, -1000,
	44, 11936, -1000, 859, -49, 1358, 11068, 11068, -1000, 8758,
	-1000, -1000, 1126, -1000, -1000, -1000, -1000, 35, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 150, 610,
	146, 146, 146, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 298, 298, 298, -1000, -1000, 257, 429, 429, 1106,
	1106, 1106, 268, 268, 363, 741, 17753, 17753, 17753, 2047,
	757, 757, 17753, 17753, 17753, 2392, 17622, 1917, 6868, 395,
	611, 145, 6868, -1000, 967, -1000, -1000, -1000, 901, 143,
	7107, 7107, -1000, -1000, -1000, 3725, -1000, -1000, 140, 6868,
	-1000, 6868, -103, -128, -1000, 17603, -1000, -32, -1000, -1000,
	-44, 6868, 6868, 6868, 65, -1000, 387, -1000, 382, 380,
	375, -1000, 138, 60, 442, -1000, 6868, 620, 137, 136,
	6868, -1000, -1000, 17357, 59, 900, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 56, 17329, 55, 17575, -1000, 7107, 7107,
	7107, 3725, 135, 52, 16712, -153, 17310, 5655, 5655, 5655,
	51, 17038, 6868, -153, 15465, 15438, 15412, -36, -37, -38,
	1194, -42, 42, 41, 859, -1000, -1000, 6868, -1000, -1000,
	-1000, 373, 370, 944, -1000, 683, -1000, 510, 6868, 11936,
	133, 129, 615, -1000, 941, 685, 939, 685, -1000, -61,
	545, -1000, -1000, 353, 17603, -1000, 1045, -48, -1000, -1000,
	274, 9686, 5416, -52, -1000, -75, -75, -1000, -1000, -1000,
	-1000, -1000, 11936, -1000, 10614, 126, 11936, 124, 120, 11936,
	-1000, -1000, 40, -1000, -1000, -1000, -1000, -1000, 856, 1083,
	9449, 812, 811, 9449, 960, 623, 623, 623, -1000, -1000,
	-1000, 11936, 118, -1000, 9232, 37, 1358, 226, 225, -1000,
	1179, 6868, 1917, 6868, 7107, 7107, -1000, 1917, -1000, -1000,
	-1000, -1000, 889, 115, 6868, 17900, 16665, 2417, -53, 4442,
	-96, 16392, 6868, -1000, -1000, 224, -1000, 32, 5177, -1000,
	17011, -34, -34, -1000, 745, 717, 543, 494, 1177, 1230,
	948, -1000, 6868, 17064, -1000, 9923, 277, 628, 16373, 17900,
	-1000, 6868, -1000, 884, 6868, -1000, 17900, 7107, 7107, 7107,
	7107, 7107, 7107, 7107, 7107, 7107, 7107, 7107, 7107, 7107,
	7107, 7107, 7107, 7107, 7107, 767, 7107, 1154, 1154, 1154,
	-98, 4203, -1000, 912, 884, 6868, 6868, 17900, 30, 29,
	24, -1000, 6868, -153, 6868, 6868, 6868, -1000, -1000, -1000,
	20, -1000, 1173, -1000, -1000, 856, 16445, 11936, 11936, 11936,
	936, 1701, -1000, 16127, -54, 11936, 11936, -1000, 755, 904,
	327, 11936, -1000, 11936, -1000, 11936, 11936, 11936, 11936, 132,
	44, -1000, -1000, -1000, 242, -1000, -1000, 7581, 111, 10614,
	7581, 653, -1000, 270, 6868, 6868, 1358, 9449, 9449, 1565,
	810, 9449, -1000, -1000, -1000, -1000, 104, 11936, 11068, 362,
	1171, 18, 1132, 1917, 2064, 490, 6868, 17900, 17649, -59,
	-1000, 6868, 6868, -1000, -60, -1000, 6868, -1000, 17603, -1000,
	1193, 6868, 16, 15, 14, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10, -1000, -1000, 17603, 6868, -1000, -1000, 15191,
	6868, 9, -1000, 8, 17603, 912, 17603, -1000, 517, 517,
	1154, 1154, 1154, 850, 850, 1038, 704, 377, 377, 377,
	546, 389, 389, 377, 377, 377, 882, 766, 102, 17675,
	6868, -65, -1000, -1000, -1000, 17603, 17603, 5, -1000, -1000,
	-1000, -153, 2317, 16101, 16074, -1000, 3, 270, -1000, -1000,
	-1000, -1000, 11936, -1000, 11936, -1000, 11936, 723, -1000, -1000,
	791, 100, 7107, 11936, -1000, 635, -66, -67, 697, -1000,
	686, 6868, -1000, 17900, 685, 685, -1000, 350, 348, -1000,
	982, 7581, 1034, -1000, 99, -71, -1000, 57, 1061, 6868,
	-1000, -1000, 98, 7581, 2, -73, 11936, -1000, 11936, 17603,
	-153, -1000, 1565, -1000, 93, 6868, 9449, -1000, 11936, -77,
	-1000, -1000, 222, 221, -1000, 6868, 6868, 17649, -81, -1000,
	17900, 1917, 1917, -1000, 16055, -1000, 17011, -1000, -1000, -1000,
	-1000, 17603, 617, -1000, 15809, -1000, -1000, -1000, 7107, 879,
	91, 17900, 15783, -1000, -1000, 6868, -1000, -1000, -1000, -1000,
	-1000, 1585, -1000, -1000, -1000, 6868, 17675, 64, -1000, 89,
	-1000, -1000, -1000, 581, -1000, -1000, 17603, 1066, -1000, -1000,
	11936, 11936, 396, -82, 11936, -1000, -1000, 3486, 635, 7581,
	1037, -141, 11936, 1037, 15756, 2715, -83, -1000, 635, 84,
	-127, -1000, 1115, -1000, 11936, 17603, -1000, -87, -1000, -1000,
	-1000, 1917, 1917, -1000, -1000, -1000, 0, 628, 1080, -1000,
	16958, 7107, 17900, -88, -1000, 15737, -1000, 15491, 748, 11936,
	11936, 11936, 310, 11936, -1000, -1000, 456, -1000, 274, -1000,
	-1000, -1000, -1000, -1000, -1000, 1061, -44, 635, -1000, 7581,
	11936, 82, -112, -1000, -1000, 535, 6868, 16958, -117, -1000,
	-1000, -1000, 632, 597, -118, -119, 64, -1000, 6868, -1000,
	9686, -1000, 1037, -5, -1000, -131, -1000, -1000, -1000, -6,
	6629, 6629, -153, -1000, -1000, 651, 641, 462, -1000, -1000,
	-1000, -1000, -1000, 748, 17603, -111, -1000, -1000, 635, -1000,
	-1000, -1000, 7344, 694, 525, 16693, -1000, -1000, 977, -1000,
	314, 666, 666, 632, -1000, -1000, 1139, -1000, -1000, -1000,
	-1000, -1000, -1000, 1138, -1000, -1000, 830, -1000, -1000, 6390,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1453, 1451, 1129, 1450, 1449, 1447, 1446, 1445, 79,
	1444, 1443, 87, 1441, 78, 1439, 1429, 1428, 57, 1425,
	1424, 1423, 1421, 70, 37, 1647, 97, 90, 1420, 1418,
	1414, 10, 72, 69, 1408, 44, 1407, 536, 1163, 42,
	46, 16, 926, 1405, 1403, 1402, 34, 1399, 1395, 1393,
	11, 33, 25, 1388, 20, 75, 1383, 1381, 65, 1374,
	71, 41, 89, 118, 1371, 489, 1369, 8, 47, 1366,
	19, 1365, 27, 51, 91, 1364, 507, 39, 18, 40,
	1363, 1362, 1361, 1359, 50, 58, 68, 1358, 1357, 48,
	1356, 94, 99, 1354, 1353, 1352, 1351, 1349, 1348, 1118,
	1345, 3, 23, 43, 28, 30, 0, 719, 694, 1344,
	36, 32, 53, 31, 35, 22, 1343, 76, 1341, 1340,
	1338, 1332, 1331, 52, 1329, 45, 101, 24, 59, 62,
	13, 55, 60, 80, 102, 77, 1328, 84, 1325, 26,
	1324, 1323, 608, 54, 1322, 1321, 1320, 550, 525, 474,
	192, 1317, 1316, 390, 388, 1315, 1314, 64, 1313, 1311,
	109, 1310, 93, 74, 1309, 82, 1299, 61, 1298, 108,
	155, 113, 1296, 81, 49, 1285, 1284, 1283, 14, 2,
	6, 5, 7, 4, 21, 15, 1282, 1279, 88, 66,
	1276, 498, 1275, 1268, 29, 1266, 1265, 17, 1264, 12,
	1263, 9, 1, 1259, 95, 1256, 86, 1250, 1188, 1249,
	100, 1248, 1246, 1158, 56,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 33, 33, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 29,
	29, 35, 35, 35, 34, 34, 30, 30, 5, 5,
	5, 9, 10, 10, 10, 10, 10, 10, 62, 62,
	61, 61, 64, 64, 11, 11, 12, 12, 12, 12,
	138, 138, 137, 13, 17, 204, 204, 204, 208, 208,
	209, 209, 210, 210, 210, 210, 210, 210, 210, 206,
	206, 19, 19, 19, 99, 99, 98, 98, 98, 98,
	100, 100, 100, 100, 162, 160, 160, 167, 167, 167,
	44, 44, 44, 44, 44, 159, 159, 159, 159, 168,
	168, 168, 168, 168, 168, 45, 45, 45, 166, 166,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	161, 161, 205, 205, 207, 207, 8, 8, 46, 46,
	47, 47, 103, 103, 103, 102, 176, 176, 177, 177,
	177, 178, 178, 178, 178, 178, 178, 178, 175, 175,
	173, 173, 174, 174, 174, 174, 211, 211, 101, 101,
	50, 50, 181, 181, 181, 181, 179, 179, 179, 179,
	179, 182, 180, 183, 183, 183, 183, 183, 126, 126,
	126, 22, 7, 7, 88, 88, 54, 54, 130, 130,
	130, 41, 41, 31, 31, 31, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 89, 89, 90, 90, 21,
	21, 21, 213, 213, 36, 36, 37, 6, 6, 14,
	43, 43, 95, 95, 95, 97, 97, 97, 96, 96,
	96, 23, 67, 67, 68, 68, 136, 69, 69, 18,
	18, 25, 25, 24, 24, 24, 24, 24, 24, 26,
	26, 27, 27, 27, 27, 27, 27, 27, 189, 189,
	189, 191, 191, 188, 15, 15, 15, 15, 190, 190,
	212, 212, 76, 76, 76, 49, 48, 48, 52, 52,
	51, 53, 53, 129, 74, 74, 74, 74, 91, 92,
	92, 93, 93, 94, 94, 73, 73, 113, 113, 28,
	28, 58, 58, 59, 59, 131, 131, 131, 131, 132,
	132, 132, 132, 132, 132, 127, 127, 127, 127, 128,
	128, 79, 79, 79, 79, 77, 77, 78, 78, 133,
	133, 133, 133, 75, 75, 134, 134, 134, 104, 104,
	139, 139, 139, 57, 57, 57, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 141, 141, 141, 141,
	143, 143, 143, 142, 142, 142, 142, 142, 142, 142,
	142, 142, 142, 142, 142, 142, 144, 144, 151, 151,
	152, 152, 153, 154, 145, 145, 146, 146, 147, 148,
	155, 155, 155, 157, 157, 149, 149, 150, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 86, 86, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 106, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 108, 184, 184, 184, 184, 184,
	184, 184, 186, 186, 187, 187, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 185, 185, 185, 185, 185, 185, 185, 185, 185,
	185, 192, 192, 193, 193, 194, 194, 195, 195, 197,
	198, 198, 198, 199, 203, 203, 196, 196, 200, 200,
	200, 201, 201, 202, 202, 202, 202, 202, 117, 117,
	117, 118, 118, 119, 63, 63, 115, 115, 114, 114,
	114, 116, 116, 80, 156, 156, 156, 156, 156, 156,
	156, 81, 81, 87, 82, 82, 83, 83, 83, 83,
	83, 83, 110, 111, 84, 84, 84, 112, 112, 120,
	124, 124, 123, 122, 122, 121, 121, 105, 105, 105,
	105, 105, 70, 70, 214, 214, 125, 125, 71, 71,
	72, 66, 66, 65, 65, 135, 135, 135, 135, 60,
	60, 42, 42, 55, 55, 56, 56, 40, 40, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	158, 158, 158, 38, 38, 38, 39, 39, 164, 164,
	164, 165, 165, 165, 165, 163, 163, 163, 163, 163,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 172, 172, 172, 172,
	172,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 2, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 1, 1,
	1, 5, 3, 5, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 3, 1, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 3, 2, 1, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 4, 2, 4, 4, 3, 3, 4, 2,
	2, 0, 2, 0, 2, 0, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 3, 2, 0, 3, 1,
	2, 2, 1, 1, 2, 4, 2, 5, 6, 7,
	3, 1, 4, 5, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 10, 13, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 3,
	2, 2, 1, 0, 1, 0, 3, 3, 6, 6,
	1, 3, 1, 4, 2, 8, 5, 0, 4, 3,
	0, 7, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 1, 1, 1, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 2, 0, 1, 3, 2, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 4, 5, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 1, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 2, 2, 2,
	3, 5, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 2, 1, 3, 3, 0, 1, 2, 1,
	1, 1, 1, 6, 2, 3, 5, 1, 1, 1,
	1, 2, 2, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -16, -17, -18, -19, -20, -21, -22, -23, 19,
	-6, -7, -8, -190, 81, 87, 99, 178, -24, -25,
	191, 192, 29, 50, 180, 216, 56, -189, -27, -26,
	260, 236, 242, 187, -28, 204, 229, 263, 204, 68,
	109, 76, 112, 223, 68, 109, 204, -12, 260, -18,
	-14, -23, -9, -208, 18, -209, -210, 56, 81, 99,
	187, 112, 76, 223, -208, -99, 130, 189, 212, -100,
	-98, -162, 208, 138, -61, -38, 4, -169, -171, 16,
	17, 19, 28, 29, 33, 37, 39, 49, 50, 51,
	53, 55, 58, 59, 66, 67, 68, 69, 71, 76,
	80, 81, 87, 91, 92, 94, 100, 105, 112, 120,
	122, 127, 134, 135, 136, 137, 140, 141, 143, 146,
	148, 149, 155, 158, 161, 162, 165, 168, 169, 171,
	172, 174, 175, 176, 178, 180, 181, 183, 185, 186,
	188, 191, 192, 194, 196, 198, 201, 199, 205, 206,
	216, 217, 218, 219, 222, 223, 226, 227, 228, 232,
	237, 238, 239, 240, 30, 31, 32, 34, 35, 38,
	42, 43, 45, 70, 72, 73, 86, 88, 93, 101,
	103, 106, 107, 113, 114, 115, 117, 125, 145, 147,
	156, 160, 164, 166, 170, 182, 195, 200, 202, 209,
	213, 214, 229, 230, 4, 68, 49, 69, 100, 109,
	205, 208, 212, 18, -213, 212, -213, -213, -212, 204,
	204, -88, 68, 221, -26, -27, -25, -51, -52, 220,
	116, 85, 154, -24, -25, -189, -191, 171, -188, -38,
	130, 138, 189, 212, 208, -191, -48, -49, 18, 78,
	264, -133, -42, 152, -38, -72, 260, -3, -133, 106,
	-38, -42, 106, 97, 118, -134, -133, -38, 106, -60,
	106, -42, -62, 106, -61, -138, -137, -165, 4, -169,
	-171, -170, 229, 47, 57, 98, 111, 119, 121, 126,
	128, 139, 157, 159, 179, 193, 151, 264, 151, -99,
	-99, -37, 120, 210, 245, 97, 240, -45, 6, 74,
	-64, 262, 97, -205, 151, 97, -161, 97, 240, 120,
	-36, -37, -75, -133, -61, 106, 109, -38, 106, -51,
	-52, -74, -91, -92, 129, 150, -76, 18, 78, -76,
	-76, 37, 261, 261, 264, -191, -56, 260, -66, -65,
	-135, -106, 253, -108, 251, 252, 257, 142, 241, -117,
	-42, -109, 9, 260, -120, -186, -25, 86, 24, -118,
	-119, 182, -38, 8, 5, 6, 7, -40, -141, -150,
	215, 89, 144, 40, -184, -185, 4, -169, -164, -142,
	-152, -146, -149, 117, 47, 61, 64, 62, 65, 190,
	224, 41, 88, 160, 164, 202, 213, 214, 106, 145,
	107, 45, 101, 125, 80, 31, 32, 34, 35, 42,
	43, 70, 72, 73, 93, 113, 114, 115, 147, 170,
	195, 209, 230, -170, -153, -154, -147, -148, -155, -65,
	-72, 253, -42, 260, -70, -105, 262, 265, 258, -71,
	-125, -106, 74, -33, 174, -32, 17, 19, 81, 227,
	86, 174, 174, 86, -134, -43, -42, 191, -38, 25,
	86, -35, 264, 39, 176, 86, 264, 86, 261, 264,
	-204, -60, 204, 68, -210, -204, 127, -160, 74, -167,
	-159, -126, 9, 215, 89, 151, -166, 5, 252, -158,
	-165, 6, 8, 251, -160, 74, 59, -168, 6, 4,
	-150, -126, 74, 130, 117, 262, -163, 4, -169, -171,
	-170, -172, 18, 20, 21, 22, 23, 24, 25, 26,
	27, 36, 40, 41, 44, 46, 48, 54, 56, 60,
	61, 62, 63, 64, 65, 74, 75, 77, 78, 79,
	82, 83, 85, 89, 90, 95, 96, 97, 99, 102,
	104, 108, 109, 110, 116, 118, 123, 124, 129, 131,
	132, 142, 144, 150, 151, 152, 153, 154, 163, 167,
	173, 177, 187, 190, 197, 203, 204, 207, 210, 211,
	215, 220, 221, 224, 225, 231, 233, 234, 235, 236,
	-162, -207, 95, -204, -162, -162, 127, -35, 264, 260,
	142, -39, 106, -38, 142, -74, -92, -91, -93, -106,
	18, -106, -108, -26, -26, -26, -53, -129, -106, -188,
	25, -55, -38, -58, 97, 264, 10, 46, 28, 251,
	252, 253, 254, 255, 248, 249, 250, 247, 243, 244,
	245, 52, 133, 184, 12, 13, 14, 22, 153, 128,
	241, 193, 119, 30, 108, 25, 4, -106, -106, -106,
	-106, -106, 159, -25, -106, -63, -70, -25, -114, 258,
	260, -70, 260, 6, 6, 260, -121, -106, -192, 237,
	95, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 166, -157, 232, -157,
	-157, -143, 260, -143, -144, 260, -143, 260, -58, -42,
	-105, -163, 253, -163, -106, 264, 261, 264, 210, -89,
	54, 48, -102, 106, 48, -173, -38, 54, -174, 44,
	221, 167, 96, -89, 54, -89, 54, 54, -133, 210,
	210, -42, -104, 234, -95, -18, 260, 74, 25, -67,
	-68, -136, -69, -42, 260, -38, -38, -42, -60, -61,
	-62, -12, -137, 210, -60, -55, 97, -44, 169, 196,
	175, 188, 264, 5, 8, 8, 6, -163, -206, -38,
	-133, -46, -47, -103, -102, -175, -173, 109, 221, 86,
	151, 142, 86, -94, 182, 183, 264, -31, 26, 77,
	260, 264, 261, -104, -59, -131, -133, -25, -132, 260,
	-135, -139, -140, -142, -151, -145, -149, -150, 33, 38,
	206, 200, 113, 114, 115, 195, 31, 170, 93, 80,
	73, 72, 147, 35, 34, -153, -154, -147, -148, 70,
	209, 32, 43, 42, 230, -61, 208, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, -106, -106,
	-106, -106, -106, -106, -106, -106, -106, -106, 128, 193,
	30, 108, 210, 144, 142, 215, 89, 222, 78, 148,
	-214, 203, 27, -112, -25, 260, -163, -117, 182, 260,
	261, 264, -63, -116, 259, -106, -114, -63, 261, 261,
	-63, 231, 18, 78, 253, -85, 239, 136, 71, 105,
	135, -86, 186, 8, -124, -123, 233, -193, 91, 102,
	260, 261, 261, -106, -80, -156, 4, 239, 136, 71,
	105, 135, 186, -81, -106, -82, -107, -108, 251, 252,
	257, 260, 182, -83, -106, -63, -106, 36, 124, 211,
	-84, -106, 97, -63, -106, -106, -106, -63, -63, -63,
	260, 8, 8, 8, -104, 261, 259, 266, -125, -32,
	-42, -38, -38, 142, -102, 106, -139, -38, 260, 260,
	122, 122, -38, -38, 106, -38, 106, -38, -38, -33,
	174, -38, -38, 174, -106, -97, 151, -60, 229, -38,
	-58, 264, 245, -60, -35, -206, -206, 219, 51, 169,
	-167, -85, 264, 261, 264, -39, 109, -61, -42, 86,
	-38, -129, -15, -18, -14, -23, -9, -38, -73, 102,
	264, 57, -79, 121, 139, 98, 126, 179, 111, -128,
	-127, 25, -38, -128, -25, -132, -131, -57, 24, -85,
	260, 240, -106, 210, -214, 203, -112, -106, 144, 215,
	89, 222, 78, 148, 97, 260, -107, -107, -63, 260,
	-63, -106, 264, 259, 259, 264, 261, -52, 264, -51,
	-106, -63, -63, 261, 210, 210, 210, 210, 260, 261,
	-122, -123, 82, -106, -198, 158, 260, 260, -106, 25,
	261, 97, 261, -87, 163, 261, 10, 251, 252, 253,
	254, 255, 248, 249, 250, 247, 243, 244, 245, 52,
	133, 184, 12, 13, 14, 119, 108, -107, -107, -107,
	-63, 260, 261, -110, -111, 97, 95, 25, -84, -84,
	-84, 261, 97, -63, 264, 264, 264, 261, 261, 261,
	8, 261, 264, 261, 261, -73, -106, 210, 210, 86,
	142, -176, -174, -106, -55, 260, 260, -29, 81, 191,
	-90, 86, -35, 86, -35, 210, -89, 54, 210, 53,
	261, -104, -68, -125, 261, -38, -103, 260, -39, 260,
	260, -38, 261, -113, 104, 37, -131, 121, 121, -131,
	-79, 121, -77, 157, -77, -77, -38, 260, 261, 258,
	258, 8, -106, -106, -107, -107, 97, 260, -106, -115,
	-139, 22, 22, 261, -63, 261, 264, 261, -106, -114,
	261, 231, -52, -52, -52, 136, 105, 135, -86, 135,
	-86, -86, 8, 6, 83, -106, 207, -199, -38, 260,
	234, -51, 261, -139, -106, -110, -106, -139, -107, -107,
	-107, -107, -107, -107, -107, -107, -107, -107, -107, -107,
	-107, -107, -107, -107, -107, -107, 78, 142, 148, -107,
	264, -63, 261, -111, -110, -106, -106, -139, 261, 261,
	261, -63, -106, -106, -106, 261, 8, -113, 259, -38,
	-38, -102, 86, -177, 54, -178, 46, 142, 144, 221,
	167, 44, 74, 173, 261, 261, -55, -55, 142, 74,
	142, 74, 67, 217, -38, -38, -42, -38, -38, -38,
	-96, 260, 151, -18, 245, -54, -130, -38, -187, 260,
	-184, -185, -40, 260, -46, -54, 151, -194, 235, -106,
	-63, -131, -131, -78, 225, 151, 121, -131, 260, -55,
	-127, 259, 8, 8, 261, 22, 22, -106, -115, 261,
	264, -106, -106, 261, -106, 6, -106, 261, 261, 261,
	261, -106, -203, -38, -106, 261, 261, -111, 97, 78,
	148, 260, -106, 261, 261, 264, 261, 261, 261, -194,
	-102, -38, -61, 144, 122, 260, -107, -42, -101, -211,
	55, 201, 261, 261, 144, 144, -106, -139, -35, -35,
	210, 210, 79, -54, 54, -72, -25, 260, 261, 264,
	-41, -70, 46, -41, -106, 260, -54, 261, 261, -42,
	-195, -197, -38, -78, 260, -106, -131, -55, 261, 259,
	259, -106, -106, 261, -139, 261, -52, -196, 162, 261,
	-107, 97, 260, -115, 261, -106, -178, -106, -50, 260,
	260, 173, -34, 46, -38, -38, 223, 143, 261, -38,
	-101, -130, -31, -61, -31, 261, -63, 261, -101, 260,
	264, 25, -55, 261, 261, -52, 37, -107, -115, 261,
	261, 261, -181, 134, -55, -55, -42, -30, 225, -61,
	191, -104, -41, -52, -101, -54, -197, -199, 261, -200,
	168, 183, -63, 261, -179, -182, -180, 151, 98, 161,
	194, 261, 261, -50, -106, -67, -31, 261, 261, 261,
	-201, -202, 30, 218, 59, -106, -201, -180, 151, -182,
	151, 223, 76, -181, -104, -101, -202, 165, 94, 182,
	165, 94, -183, 141, 176, 39, 191, -183, -179, 22,
	16, 144, 74, -202,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	48, 49, 50, 0, 0, 289, 0, 0, 259, -2,
	0, 0, 233, 233, 233, 291, 205, 288, -2, 299,
	0, 0, 0, 297, 273, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 66,
	67, 68, 69, 0, 78, 79, 80, 82, 83, 84,
	85, 86, 87, 88, 0, 91, 733, 764, 774, 95,
	100, 0, 824, -2, 104, 60, 683, 684, 685, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 734, 735, 736, 737, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 825,
	826, 827, 828, 829, 130, 131, 0, 133, 143, 0,
	141, 0, 0, 139, 235, 232, 230, 231, 0, 290,
	0, 0, 0, 204, -2, 269, 270, -2, 0, 294,
	294, 294, 0, 0, 270, 0, 278, 752, 281, 666,
	733, 738, 764, 774, 824, 279, 652, 0, 296, 295,
	0, 274, 349, 0, 661, 319, 0, 2, 0, 806,
	0, 0, 806, 0, 0, 0, 355, 52, 806, 43,
	806, 659, 56, 806, 58, 0, 70, 72, 691, 692,
	693, 694, 828, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 0, 0, 0, 92,
	93, 94, 0, 0, 0, 0, 0, 103, 125, 126,
	61, 0, 0, 145, 0, 0, 136, 0, 137, 0,
	229, 234, 43, 353, 0, 806, 687, 237, 806, -2,
	0, 265, 306, 307, 0, 0, 0, 292, 293, 0,
	0, 0, 261, 262, 0, 280, 0, 0, 322, 651,
	653, 657, 658, 434, 0, 0, 0, 0, 0, 0,
	513, 514, 515, 0, 517, 518, 519, 801, 0, 523,
	524, 820, 661, 669, 670, 671, 672, 0, 0, 0,
	677, 678, 679, 636, 562, 533, -2, -2, 667, 376,
	377, 378, 379, -2, 830, 537, 539, 541, 542, 543,
	544, 0, 802, 816, 817, 823, 826, 827, 806, 813,
	807, 797, 804, 812, 721, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 690, 400, 401, 406, 407, 409, 322,
	320, 350, 351, 0, 662, 642, 0, 0, 0, 0,
	648, 646, 647, 20, 226, 22, 0, 226, 226, 0,
	0, 0, 0, 0, 359, 0, 240, 0, 356, 0,
	0, 54, 0, 41, 42, 0, 0, 0, 289, 0,
	0, 75, 0, 717, 81, 0, 0, 96, 98, 105,
	107, 108, 109, 115, 116, 117, 118, 198, 0, 200,
	128, 129, 680, 0, 97, 99, 101, 102, 119, 120,
	0, 122, 123, 124, 417, 0, 62, 695, 696, 697,
	698, 699, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	132, 134, 0, 142, 135, 140, 138, 201, 0, 149,
	0, 0, 806, 686, 0, 268, 304, 305, 308, 311,
	312, 309, 434, 275, 276, 277, 300, 301, 215, 282,
	0, 0, 663, 359, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 645, 0, 0, 656, 438, 439, 440,
	461, 462, 0, -2, 594, 0, 520, 521, 522, 0,
	0, -2, 0, 674, 431, 0, 0, 635, 564, 0,
	0, 0, 0, 0, 0, 0, 615, 621, 0, 0,
	0, 0, 0, 0, 0, 0, 390, 403, 413, 411,
	410, 392, 0, 391, 389, 0, 393, 0, 359, 0,
	643, 637, 638, 639, 0, 0, 650, 0, 0, 0,
	0, 225, 24, 806, 0, 34, 0, 0, 171, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 0, 247, 242, 0, 0, 0, 322,
	252, 254, 255, 0, 0, 357, 53, 660, 43, 59,
	57, 65, 71, 0, 76, 77, 0, 236, 0, 112,
	0, 114, 0, 199, 682, 681, 431, 63, 144, 89,
	354, 0, 148, 150, 152, 153, 154, 687, 0, 0,
	0, 0, 0, 310, 313, 314, 0, 303, 213, 214,
	289, 0, 665, 316, 321, 323, 340, 340, 327, 0,
	654, 435, 365, 366, 367, 368, 369, 431, 372, 373,
	374, 375, 383, 384, 385, 386, 387, 388, 397, 0,
	382, 382, 382, 394, 395, 398, 399, 404, 405, 415,
	416, 414, 414, 414, 412, 436, 0, 441, 442, 443,
	444, 445, 446, 447, 448, 449, -2, -2, -2, 453,
	454, 455, -2, -2, -2, 459, 460, -2, 0, 0,
	645, 0, 0, 467, 0, 470, 472, 474, 0, 0,
	0, 0, 644, 484, 627, 0, 655, 469, 0, 0,
	516, 0, 0, 0, 600, 594, 601, 0, -2, 525,
	299, 0, 0, 0, 0, 675, 418, 419, 420, 421,
	422, 423, 432, 0, 634, 630, 0, 572, 0, 0,
	0, 538, 540, 0, 0, 0, 604, 605, 606, 607,
	608, 609, 610, 0, 0, 0, 0, 486, 0, 0,
	0, 0, 820, 0, 594, 620, 0, 0, 0, 0,
	0, 594, 0, 626, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 316, 352, 640, 0, 649, 23,
	217, 0, 0, 0, 26, 806, 157, 0, 0, 0,
	0, 0, 228, 35, 806, 43, 806, 43, 36, 21,
	226, 216, 219, 0, 358, 239, 0, 0, 244, 241,
	359, 0, 0, 0, 55, 73, 74, 110, 111, 113,
	106, 121, 0, 146, 0, 0, 687, 0, 0, 0,
	238, 302, 0, 284, 285, 286, 287, 664, 318, 0,
	0, 0, 0, 0, 0, 346, 346, 346, 344, 325,
	339, 0, 338, 326, -2, 327, 0, 360, 362, 370,
	0, 0, -2, 0, 0, 0, 485, -2, 468, 471,
	473, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 595, 0, 598, 599, 0, -2, 0, 0, 298,
	299, 299, 299, 531, 0, 0, 0, 0, 0, 0,
	0, 631, 0, 0, 532, 0, 0, 0, 0, 0,
	546, 0, 547, 0, 0, 548, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 489, 490,
	0, 0, 549, 618, 619, 0, 0, 0, 0, 0,
	0, 554, 0, 625, 0, 0, 0, 558, 559, 560,
	0, 380, 0, 396, 408, 318, 0, 0, 0, 0,
	0, 155, 170, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 32, 0, 38, 0, 0, 0, 0, 250,
	0, 251, 253, 256, 0, 90, 151, 0, 0, 149,
	0, 0, 283, 566, 0, 0, 324, 0, 0, 0,
	0, 0, 341, 345, 342, 343, 336, 0, 329, 0,
	0, 0, 437, -2, 0, 0, 0, 0, -2, 0,
	596, 0, 0, 628, 0, 589, 0, -2, 595, 602,
	526, 0, 0, 0, 0, 424, 425, 426, 427, 428,
	429, 430, 0, 676, 629, 633, 0, 570, 571, 575,
	0, 0, 536, 0, 603, 612, 613, 487, 491, 492,
	493, 494, 495, 496, 497, 498, 499, -2, -2, -2,
	503, 504, 505, -2, -2, -2, 0, 0, 0, 614,
	0, 0, 592, 616, 617, 622, 623, 0, 551, 552,
	553, 624, 0, 0, 0, 402, 0, 566, 641, 221,
	223, 25, 0, 156, 0, 159, 0, 0, 162, 163,
	0, 0, 0, 0, 172, 179, 0, 0, 0, 40,
	0, 0, 227, 0, 43, 43, 218, 0, 0, 220,
	0, 0, 0, 243, 0, 0, 206, 212, 212, 0,
	534, 535, 0, 0, 0, 0, 0, 271, 0, 317,
	315, 330, 0, 332, 0, 0, 0, 334, 0, 0,
	328, 363, 0, 0, 371, 0, 0, -2, 0, 478,
	0, -2, -2, 588, 595, 673, 299, 527, 529, 530,
	433, 632, 577, 574, 0, 561, 545, 611, 0, 0,
	0, 0, 595, 591, 550, 0, 556, 557, 381, 272,
	27, 0, 160, 161, 164, 0, 166, 181, 173, 0,
	176, 177, 174, 0, 29, 30, 39, 45, 31, 37,
	0, 0, 0, 0, 0, 257, 258, 0, 179, 0,
	215, 668, 0, 215, 0, 0, 0, 147, 179, 0,
	565, 567, 0, 331, 0, 348, 333, 0, 337, 364,
	361, -2, -2, 479, 597, 590, 0, 299, 0, 563,
	-2, 0, 0, 0, 593, 0, 158, 0, 185, 0,
	0, 0, 47, 0, 222, 224, 0, 246, 359, 249,
	168, 207, 208, 211, 209, 212, 299, 179, 202, 0,
	0, 0, 0, 335, 528, 580, 0, -2, 0, 511,
	555, 165, 190, 0, 0, 0, 181, 33, 0, 44,
	0, 248, 215, 0, 169, 0, 568, 569, 347, 0,
	0, 0, 576, 512, 167, 186, 187, 0, 182, 183,
	184, 180, 178, 185, 46, 359, 210, 526, 179, 573,
	578, 581, -2, 777, 714, 0, 579, 188, 0, 189,
	0, 0, 0, 190, 245, 203, 0, 583, 584, 585,
	586, 587, 191, 0, 194, 195, 0, 192, 175, 0,
	193, 196, 197, 582,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 249, 3, 255, 250, 3,
	260, 261, 253, 251, 264, 252, 262, 254, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 266, 263,
	243, 245, 244, 3, 265, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 258, 3, 259, 248, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 247, 3, 257,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 246, 256,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:444
		{
			sqllex.(*scanner).stmts = sqlDollar[1].stmts
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:450
		{
			if sqlDollar[3].stmt != nil {
				sqlVAL.stmts = append(sqlDollar[1].stmts, sqlDollar[3].stmt)
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:456
		{
			if sqlDollar[1].stmt != nil {
				sqlVAL.stmts = []Statement{sqlDollar[1].stmt}
			} else {
				sqlVAL.stmts = nil
			}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:475
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 19:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:484
		{
			sqlVAL.stmt = nil
		}
	case 20:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:490
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[3].qname, IfExists: false, Cmds: sqlDollar[4].alterTableCmds}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:494
		{
			sqlVAL.stmt = &AlterTable{Table: sqlDollar[5].qname, IfExists: true, Cmds: sqlDollar[6].alterTableCmds}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:500
		{
			sqlVAL.alterTableCmds = AlterTableCmds{sqlDollar[1].alterTableCmd}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:504
		{
			sqlVAL.alterTableCmds = append(sqlDollar[1].alterTableCmds, sqlDollar[3].alterTableCmd)
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:511
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].colDef}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:516
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].colDef}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:521
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].colDef}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:526
		{
			sqlVAL.alterTableCmd = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].colDef}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:530
		{
			unimplemented()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:532
		{
			unimplemented()
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:534
		{
			unimplemented()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:537
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: true, Column: sqlDollar[5].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:542
		{
			sqlVAL.alterTableCmd = &AlterTableDropColumn{columnKeyword: sqlDollar[2].boolVal, IfExists: false, Column: sqlDollar[3].str}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:547
		{
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:550
		{
			sqlVAL.alterTableCmd = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].constraintDef}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:554
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:556
		{
			unimplemented()
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:559
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: true, Constraint: sqlDollar[5].str}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:564
		{
			sqlVAL.alterTableCmd = &AlterTableDropConstraint{IfExists: false, Constraint: sqlDollar[3].str}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:569
		{
			unimplemented()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:570
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:573
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:574
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:575
		{
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:578
		{
			unimplemented()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:579
		{
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:582
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:583
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:594
		{
			sqlVAL.stmt = &Delete{Table: sqlDollar[4].tblExpr, Where: newWhere(astWhere, sqlDollar[5].expr)}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:601
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:605
		{
			sqlVAL.stmt = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:609
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:613
		{
			sqlVAL.stmt = &DropIndex{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:617
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[3].qnames, IfExists: false}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:621
		{
			sqlVAL.stmt = &DropTable{Names: sqlDollar[5].qnames, IfExists: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:627
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:631
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:637
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:641
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:647
		{
			sqlVAL.indirect = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:651
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, NameIndirection(sqlDollar[3].str))
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:658
		{
			sqlVAL.stmt = &Explain{Statement: sqlDollar[2].stmt}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:662
		{
			sqlVAL.stmt = &Explain{Options: sqlDollar[3].strs, Statement: sqlDollar[5].stmt}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:668
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:677
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:691
		{
			sqlVAL.stmt = &Grant{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.stmt = &Revoke{Privileges: sqlDollar[2].privilegeList, Grantees: NameList(sqlDollar[6].strs), Targets: sqlDollar[4].targetList}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:705
		{
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[1].qnames)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:709
		{
			// TODO(marc): this is postgres' grammar, but do we really need
			// both "x" and "TABLE X"?
			sqlVAL.targetList = TargetList{Tables: QualifiedNames(sqlDollar[2].qnames)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:715
		{
			sqlVAL.targetList = TargetList{Databases: NameList(sqlDollar[2].strs)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:722
		{
			sqlVAL.privilegeList = privilege.List{privilege.ALL}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			sqlVAL.privilegeList = privilege.List{sqlDollar[1].privilegeType}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.privilegeList = append(sqlDollar[1].privilegeList, sqlDollar[3].privilegeType)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.privilegeType = privilege.CREATE
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.privilegeType = privilege.DROP
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.privilegeType = privilege.GRANT
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.privilegeType = privilege.SELECT
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.privilegeType = privilege.INSERT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:760
		{
			sqlVAL.privilegeType = privilege.DELETE
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.privilegeType = privilege.UPDATE
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 91:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.stmt = sqlDollar[2].stmt
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.stmt = sqlDollar[3].stmt
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.stmt = &SetTransaction{Isolation: sqlDollar[2].isoLevel}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname, Values: sqlDollar[3].exprs}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:813
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.stmt = &Set{Name: sqlDollar[1].qname}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:824
		{
			unimplemented()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.stmt = &SetTimeZone{Value: sqlDollar[3].expr}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:855
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.isoLevel = SnapshotIsolation
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:869
		{
			// Mapped to the closest supported isolation level.
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.isoLevel = SerializableIsolation
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.expr = DBool(true)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.expr = DBool(false)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:911
		{
			// TODO(pmattis): support opt_interval?
			expr := &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
			// Use an empty EvalContext.
			var ctx EvalContext
			d, err := expr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type")
				return 1
			}
			if _, ok := d.(DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.expr = d
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:928
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			unimplemented()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:938
		{
			unimplemented()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:939
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.stmt = &Show{Name: sqlDollar[2].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.stmt = &ShowColumns{Table: sqlDollar[4].qname}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.stmt = &ShowDatabases{}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.stmt = &ShowGrants{Targets: sqlDollar[3].targetListPtr, Grantees: sqlDollar[4].strs}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.stmt = &ShowIndex{Table: sqlDollar[4].qname}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.stmt = &ShowTables{Name: sqlDollar[3].qname}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.stmt = &Show{Name: "TIME ZONE"}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.stmt = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.stmt = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.qname = nil
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			tmp := sqlDollar[2].targetList
			sqlVAL.targetListPtr = &tmp
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.targetListPtr = nil
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 145:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.strs = nil
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[3].qname, IfNotExists: false, Defs: sqlDollar[5].tblDefs}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.stmt = &CreateTable{Table: sqlDollar[6].qname, IfNotExists: true, Defs: sqlDollar[8].tblDefs}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.tblDefs = nil
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.tblDefs = TableDefs{sqlDollar[1].tblDef}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.tblDefs = append(sqlDollar[1].tblDefs, sqlDollar[3].tblDef)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.tblDef = sqlDollar[1].colDef
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.tblDef = sqlDollar[1].constraintDef
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.colDef = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].colType, sqlDollar[3].colQuals)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.colQuals = append(sqlDollar[1].colQuals, sqlDollar[2].colQual)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.colQuals = nil
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1081
		{
			// TODO(pmattis): Handle constraint name.
			sqlVAL.colQual = sqlDollar[3].colQual
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.colQual = NotNullConstraint{}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.colQual = NullConstraint{}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.colQual = UniqueConstraint{}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.colQual = PrimaryKeyConstraint{}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			unimplemented()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1119
		{
			if ContainsVars(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a variable")
				return 1
			}
			if containsSubquery(sqlDollar[2].expr) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.colQual = &ColumnDefault{Expr: sqlDollar[2].expr}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1130
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.tblDef = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].idxElems,
				Storing: sqlDollar[6].strs,
			}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.tblDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].idxElems,
					Storing: sqlDollar[7].strs,
				},
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.constraintDef = sqlDollar[3].constraintDef
			sqlVAL.constraintDef.setName(Name(sqlDollar[2].str))
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.constraintDef = sqlDollar[1].constraintDef
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1167
		{
			unimplemented()
		}
	case 173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].strs),
					Storing: sqlDollar[5].strs,
				},
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.constraintDef = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].strs),
				},
				PrimaryKey: true,
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1187
		{
			unimplemented()
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.strs = sqlDollar[3].strs
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.strs = nil
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.strs = nil
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			unimplemented()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			unimplemented()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1226
		{
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1233
		{
			unimplemented()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			unimplemented()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			unimplemented()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1237
		{
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			unimplemented()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1246
		{
			unimplemented()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			unimplemented()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.expr = NumVal("-" + sqlDollar[2].str)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.expr = DInt(sqlDollar[1].ival.Val)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.stmt = &Truncate{Tables: sqlDollar[3].qnames}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.stmt = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].qname,
				Unique:  sqlDollar[2].boolVal,
				Columns: sqlDollar[8].idxElems,
				Storing: sqlDollar[10].strs,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.stmt = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].qname,
				Unique:      sqlDollar[2].boolVal,
				IfNotExists: true,
				Columns:     sqlDollar[11].idxElems,
				Storing:     sqlDollar[13].strs,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.boolVal = true
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.boolVal = false
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.idxElems = IndexElemList{sqlDollar[1].idxElem}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.idxElems = append(sqlDollar[1].idxElems, sqlDollar[3].idxElem)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.idxElem = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].dir}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1326
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.dir = Ascending
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.dir = Descending
		}
	case 215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.dir = DefaultDirection
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.stmt = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[3].qname, NewName: sqlDollar[6].qname, IfExists: false}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.stmt = &RenameTable{Name: sqlDollar[5].qname, NewName: sqlDollar[8].qname, IfExists: true}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[3].qname, NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.stmt = &RenameIndex{Name: sqlDollar[5].qname, NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[3].qname, Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.stmt = &RenameColumn{Table: sqlDollar[5].qname, Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.stmt = nil
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.stmt = nil
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.boolVal = true
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.boolVal = false
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.stmt = &BeginTransaction{Isolation: sqlDollar[3].isoLevel}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.stmt = &CommitTransaction{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.stmt = &RollbackTransaction{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1416
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.isoLevel = UnspecifiedIsolation
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.isoLevel = sqlDollar[3].isoLevel
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.stmt = &CreateDatabase{Name: Name(sqlDollar[3].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.stmt = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str)}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.stmt = sqlDollar[5].stmt
			sqlVAL.stmt.(*Insert).Table = sqlDollar[4].qname
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.stmt = &Insert{Rows: sqlDollar[1].selectStmt}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.stmt = &Insert{Columns: sqlDollar[2].qnames, Rows: sqlDollar[4].selectStmt}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.stmt = &Insert{}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1474
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1475
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1476
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1481
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.stmt = &Update{Table: sqlDollar[3].tblExpr, Exprs: sqlDollar[5].updateExprs, Where: newWhere(astWhere, sqlDollar[7].expr)}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.updateExprs = UpdateExprs{sqlDollar[1].updateExpr}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.updateExprs = append(sqlDollar[1].updateExprs, sqlDollar[3].updateExpr)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.updateExpr = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].qname}, Expr: sqlDollar[3].expr}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: Tuple(sqlDollar[5].exprs)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.updateExpr = &UpdateExpr{Tuple: true, Names: sqlDollar[2].qnames, Expr: &Subquery{Select: sqlDollar[5].selectStmt}}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.selectStmt = &ParenSelect{Select: sqlDollar[2].selectStmt}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.selectStmt = sqlDollar[1].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[2].orderBy
				s.Limit = sqlDollar[3].limit
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.selectStmt = sqlDollar[2].selectStmt
			if s, ok := sqlVAL.selectStmt.(*Select); ok {
				s.OrderBy = sqlDollar[3].orderBy
				s.Limit = sqlDollar[4].limit
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.selectStmt = &Select{
				Exprs:   sqlDollar[3].selExprs,
				From:    sqlDollar[4].tblExprs,
				Where:   newWhere(astWhere, sqlDollar[5].expr),
				GroupBy: sqlDollar[6].groupBy,
				Having:  newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.selectStmt = &Select{
				Distinct: sqlDollar[2].boolVal,
				Exprs:    sqlDollar[3].selExprs,
				From:     sqlDollar[4].tblExprs,
				Where:    newWhere(astWhere, sqlDollar[5].expr),
				GroupBy:  sqlDollar[6].groupBy,
				Having:   newWhere(astHaving, sqlDollar[7].expr),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.selectStmt = &Select{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].qname}},
				tableSelect: true,
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.selectStmt = &Union{
				Type:  astUnion,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.selectStmt = &Union{
				Type:  astIntersect,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.selectStmt = &Union{
				Type:  astExcept,
				Left:  sqlDollar[1].selectStmt,
				Right: sqlDollar[4].selectStmt,
				All:   sqlDollar[3].boolVal,
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1722
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			unimplemented()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.stmt = sqlDollar[1].selectStmt
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1743
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1747
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.boolVal = true
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.boolVal = false
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1759
		{
			sqlVAL.boolVal = false
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.boolVal = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1770
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.orderBy = sqlDollar[1].orderBy
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.orderBy = nil
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.orderBy = OrderBy(sqlDollar[3].orders)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.orders = []*Order{sqlDollar[1].order}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.orders = append(sqlDollar[1].orders, sqlDollar[3].order)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.order = &Order{Expr: sqlDollar[1].expr, Direction: sqlDollar[2].dir}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			if sqlDollar[1].limit == nil {
				sqlVAL.limit = sqlDollar[2].limit
			} else {
				sqlVAL.limit = sqlDollar[1].limit
				sqlVAL.limit.Offset = sqlDollar[2].limit.Offset
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.limit = sqlDollar[1].limit
			if sqlDollar[2].limit != nil {
				sqlVAL.limit.Count = sqlDollar[2].limit.Count
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			if sqlDollar[2].expr == nil {
				sqlVAL.limit = nil
			} else {
				sqlVAL.limit = &Limit{Count: sqlDollar[2].expr}
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.limit = &Limit{Offset: sqlDollar[2].expr}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.expr = nil
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.groupBy = GroupBy(sqlDollar[3].exprs)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.groupBy = nil
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.expr = nil
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.selectStmt = Values{Tuple(sqlDollar[2].exprs)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.selectStmt = append(sqlDollar[1].selectStmt.(Values), Tuple(sqlDollar[3].exprs))
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.tblExprs = sqlDollar[2].tblExprs
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.tblExprs = nil
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.tblExprs = TableExprs{sqlDollar[1].tblExpr}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.tblExprs = append(sqlDollar[1].tblExprs, sqlDollar[3].tblExpr)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].selectStmt}, As: Name(sqlDollar[2].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1960
		{
			unimplemented()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.tblExpr = &ParenTableExpr{Expr: sqlDollar[2].tblExpr}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr, Cond: sqlDollar[5].joinCond}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[3].tblExpr, Cond: sqlDollar[4].joinCond}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[5].tblExpr}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.tblExpr = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].tblExpr, Right: sqlDollar[4].tblExpr}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			unimplemented()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2008
		{
			unimplemented()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.str = ""
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.str = astFullJoin
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.str = astLeftJoin
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.str = astRightJoin
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.str = astInnerJoin
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2042
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.joinCond = &UsingJoinCond{Cols: NameList(sqlDollar[3].strs)}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.joinCond = &OnJoinCond{Expr: sqlDollar[2].expr}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			// TODO(pmattis): Handle the "*".
			sqlVAL.qname = sqlDollar[1].qname
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[2].qname
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2077
		{
			// TODO(pmattis): Support ONLY.
			sqlVAL.qname = sqlDollar[3].qname
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[2].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.tblExpr = &AliasedTableExpr{Expr: sqlDollar[1].qname, As: Name(sqlDollar[3].str)}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.expr = nil
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2135
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2139
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2140
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2141
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2149
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.colType = &BytesType{Name: "BLOB"}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.colType = &BytesType{Name: "BYTES"}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.colType = &StringType{Name: "TEXT"}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.colType = &StringType{Name: "STRING"}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val)}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.colType = &DecimalType{Prec: int(sqlDollar[2].ival.Val), Scale: int(sqlDollar[4].ival.Val)}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.colType = &DecimalType{}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.colType = &IntType{Name: "INT"}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.colType = &IntType{Name: "INT64"}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.colType = &IntType{Name: "INTEGER"}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.colType = &IntType{Name: "SMALLINT"}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.colType = &IntType{Name: "BIGINT"}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.colType = &FloatType{Name: "REAL"}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.colType = &FloatType{Name: "FLOAT", Prec: int(sqlDollar[2].ival.Val)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.colType = &FloatType{Name: "DOUBLE PRECISION"}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DECIMAL"
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "DEC"
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.colType = sqlDollar[2].colType
			sqlVAL.colType.(*DecimalType).Name = "NUMERIC"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.colType = &BoolType{Name: "BOOLEAN"}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.colType = &BoolType{Name: "BOOL"}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.ival = IntVal{}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.colType = &IntType{Name: "BIT", N: int(sqlDollar[4].ival.Val)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.colType = &IntType{Name: "BIT"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.colType = sqlDollar[1].colType
			sqlVAL.colType.(*StringType).N = int(sqlDollar[3].ival.Val)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.colType = sqlDollar[1].colType
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.colType = &StringType{Name: "CHAR"}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.colType = &StringType{Name: "VARCHAR"}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2326
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2327
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.colType = &DateType{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.colType = &TimestampType{}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.colType = &IntervalType{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2346
		{
			unimplemented()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2347
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
			unimplemented()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
			unimplemented()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2351
		{
			unimplemented()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			unimplemented()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			unimplemented()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2354
		{
			unimplemented()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2355
		{
			unimplemented()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			unimplemented()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			unimplemented()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2362
		{
			unimplemented()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			unimplemented()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2391
		{
			unimplemented()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2456
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.expr = &AndExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.expr = &OrExpr{Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.expr = &NotExpr{Expr: sqlDollar[2].expr}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2508
		{
			sqlVAL.expr = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(true)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DBool(false)}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			sqlVAL.expr = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].expr, Right: DNull}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.expr = &RangeCond{Left: sqlDollar[1].expr, From: sqlDollar[4].expr, To: sqlDollar[6].expr}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.expr = &RangeCond{Not: true, Left: sqlDollar[1].expr, From: sqlDollar[5].expr, To: sqlDollar[7].expr}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.expr = &ComparisonExpr{Operator: In, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].expr, Right: sqlDollar[4].expr}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[1].expr, Type: sqlDollar[3].colType}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].expr}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].expr}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.expr = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].expr}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.expr = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.expr = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.expr = &BinaryExpr{Operator: Div, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.expr = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2638
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.expr = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.expr = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2666
		{
			sqlVAL.expr = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.expr = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.expr = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.expr = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.expr = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.expr = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].expr, Right: sqlDollar[3].expr}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[5].expr}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.expr = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].expr, Right: sqlDollar[6].expr}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.expr = &IsOfTypeExpr{Expr: sqlDollar[1].expr, Types: sqlDollar[5].colTypes}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.expr = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].expr, Types: sqlDollar[6].colTypes}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.expr = sqlDollar[1].qname
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.expr = ValArg{name: sqlDollar[1].str}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.expr = &ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.expr = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].selectStmt}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2763
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: sqlDollar[3].exprs}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2767
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2768
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2770
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: All, Exprs: sqlDollar[4].exprs}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2775
		{
			// TODO(pmattis): Support opt_sort_clause or remove it?
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Type: Distinct, Exprs: sqlDollar[4].exprs}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.expr = &FuncExpr{Name: sqlDollar[1].qname, Exprs: Exprs{StarExpr()}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2793
		{
			// TODO(pmattis): Support within_group_clause, filter_clause and
			// over_clause?
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2809
		{
			unimplemented()
		}
	case 536:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			unimplemented()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2830
		{
			unimplemented()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			unimplemented()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			unimplemented()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			unimplemented()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.expr = &CastExpr{Expr: sqlDollar[3].expr, Type: sqlDollar[5].colType}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.expr = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].exprs}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2851
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2854
		{
			unimplemented()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].exprs}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].exprs}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.expr = &IfExpr{Cond: sqlDollar[3].expr, True: sqlDollar[5].expr, Else: sqlDollar[7].expr}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.expr = &NullIfExpr{Expr1: sqlDollar[3].expr, Expr2: sqlDollar[5].expr}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.expr = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].expr, sqlDollar[5].expr}}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.expr = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].exprs}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.expr = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].exprs}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2898
		{
			unimplemented()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2899
		{
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2902
		{
			unimplemented()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2903
		{
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			unimplemented()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2908
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			unimplemented()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2915
		{
			unimplemented()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2924
		{
			unimplemented()
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			unimplemented()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2936
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2939
		{
			unimplemented()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2940
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2950
		{
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			unimplemented()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.expr = Row(nil)
		}
	case 590:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.expr = Row(sqlDollar[3].exprs)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.expr = Row(nil)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.expr = Tuple(append(sqlDollar[2].exprs, sqlDollar[4].expr))
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.colTypes = []ColumnType{sqlDollar[1].colType}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.colTypes = append(sqlDollar[1].colTypes, sqlDollar[3].colType)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.expr = Array(sqlDollar[2].exprs)
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.expr = Array(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.exprs = Exprs{DString(sqlDollar[1].str), sqlDollar[3].expr}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr, sqlDollar[4].expr}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.exprs = Exprs{sqlDollar[3].expr, sqlDollar[1].expr}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.exprs = nil
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr, sqlDollar[3].expr}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[3].expr, sqlDollar[2].expr}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, sqlDollar[2].expr}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.exprs = Exprs{sqlDollar[1].expr, DInt(1), sqlDollar[2].expr}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.exprs = nil
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.exprs = append(sqlDollar[3].exprs, sqlDollar[1].expr)
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.exprs = sqlDollar[1].exprs
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.expr = &Subquery{Select: sqlDollar[1].selectStmt}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.expr = Tuple(sqlDollar[2].exprs)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.expr = &CaseExpr{Expr: sqlDollar[2].expr, Whens: sqlDollar[3].whens, Else: sqlDollar[4].expr}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.whens = []*When{sqlDollar[1].when}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.whens = append(sqlDollar[1].whens, sqlDollar[2].when)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.when = &When{Cond: sqlDollar[2].expr, Val: sqlDollar[4].expr}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.expr = nil
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.expr = nil
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.indirectElem = NameIndirection(sqlDollar[2].str)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.indirectElem = qualifiedStar
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.indirectElem = IndexIndirection(sqlDollar[2].str)
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.indirectElem = &ArrayIndirection{Begin: sqlDollar[2].expr, End: sqlDollar[4].expr}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.indirect = Indirection{sqlDollar[1].indirectElem}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.indirect = append(sqlDollar[1].indirect, sqlDollar[2].indirectElem)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3283
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.expr = DefaultVal{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.exprs = []Expr{sqlDollar[1].expr}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.exprs = append(sqlDollar[1].exprs, sqlDollar[3].expr)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.exprs = sqlDollar[2].exprs
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3319
		{
			sqlVAL.selExprs = nil
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.selExprs = SelectExprs{sqlDollar[1].selExpr}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.selExprs = append(sqlDollar[1].selExprs, sqlDollar[3].selExpr)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[3].str)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr, As: Name(sqlDollar[2].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.selExpr = SelectExpr{Expr: sqlDollar[1].expr}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.selExpr = starSelectExpr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.qnames = QualifiedNames{sqlDollar[1].qname}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.qnames = append(sqlDollar[1].qnames, sqlDollar[3].qname)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.strs = []string{sqlDollar[1].str}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.strs = append(sqlDollar[1].strs, sqlDollar[3].str)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.strs = sqlDollar[2].strs
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3398
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.qname = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].indirect}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.expr = &IntVal{Val: sqlDollar[1].ival.Val, Str: sqlDollar[1].ival.Str}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.expr = NumVal(sqlDollar[1].str)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.expr = DString(sqlDollar[1].str)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.expr = DBytes(sqlDollar[1].str)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3434
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			// TODO(pmattis): support opt_interval?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[2].str), Type: sqlDollar[1].colType}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3445
		{
			// TODO(pmattis): Support the precision specification?
			sqlVAL.expr = &CastExpr{Expr: DString(sqlDollar[5].str), Type: sqlDollar[1].colType}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.expr = DBool(true)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.expr = DBool(false)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.expr = DNull
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.ival = sqlDollar[2].ival
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.ival = IntVal{Val: -sqlDollar[2].ival.Val, Str: "-" + sqlDollar[2].ival.Str}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
