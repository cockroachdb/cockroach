// Code generated by go yacc.
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

//line sql.y:38

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if strVal, ok := u.val.(*StrVal); ok {
		return strVal
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:270
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PARAM = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FETCH = 57435
const FILTER = 57436
const FIRST = 57437
const FLOAT = 57438
const FOLLOWING = 57439
const FOR = 57440
const FORCE_INDEX = 57441
const FOREIGN = 57442
const FROM = 57443
const FULL = 57444
const GRANT = 57445
const GRANTS = 57446
const GREATEST = 57447
const GROUP = 57448
const GROUPING = 57449
const HAVING = 57450
const HIGH = 57451
const HOUR = 57452
const IF = 57453
const IFNULL = 57454
const IN = 57455
const INDEX = 57456
const INDEXES = 57457
const INITIALLY = 57458
const INNER = 57459
const INSERT = 57460
const INT = 57461
const INT64 = 57462
const INTEGER = 57463
const INTERSECT = 57464
const INTERVAL = 57465
const INTO = 57466
const IS = 57467
const ISOLATION = 57468
const JOIN = 57469
const KEY = 57470
const KEYS = 57471
const LATERAL = 57472
const LEADING = 57473
const LEAST = 57474
const LEFT = 57475
const LEVEL = 57476
const LIKE = 57477
const LIMIT = 57478
const LOCAL = 57479
const LOCALTIME = 57480
const LOCALTIMESTAMP = 57481
const LOW = 57482
const LSHIFT = 57483
const MATCH = 57484
const MINUTE = 57485
const MONTH = 57486
const NAME = 57487
const NAMES = 57488
const NATURAL = 57489
const NEXT = 57490
const NO = 57491
const NO_INDEX_JOIN = 57492
const NORMAL = 57493
const NOT = 57494
const NOTHING = 57495
const NULL = 57496
const NULLIF = 57497
const NULLS = 57498
const NUMERIC = 57499
const OF = 57500
const OFF = 57501
const OFFSET = 57502
const ON = 57503
const ONLY = 57504
const OR = 57505
const ORDER = 57506
const ORDINALITY = 57507
const OUT = 57508
const OUTER = 57509
const OVER = 57510
const OVERLAPS = 57511
const OVERLAY = 57512
const PARTIAL = 57513
const PARTITION = 57514
const PLACING = 57515
const POSITION = 57516
const PRECEDING = 57517
const PRECISION = 57518
const PRIMARY = 57519
const PRIORITY = 57520
const RANGE = 57521
const READ = 57522
const REAL = 57523
const RECURSIVE = 57524
const REF = 57525
const REFERENCES = 57526
const RENAME = 57527
const REPEATABLE = 57528
const RELEASE = 57529
const RESTRICT = 57530
const RETURNING = 57531
const REVOKE = 57532
const RIGHT = 57533
const ROLLBACK = 57534
const ROLLUP = 57535
const ROW = 57536
const ROWS = 57537
const RSHIFT = 57538
const SAVEPOINT = 57539
const SEARCH = 57540
const SECOND = 57541
const SELECT = 57542
const SERIALIZABLE = 57543
const SESSION = 57544
const SESSION_USER = 57545
const SET = 57546
const SHOW = 57547
const SIMILAR = 57548
const SIMPLE = 57549
const SMALLINT = 57550
const SNAPSHOT = 57551
const SOME = 57552
const SQL = 57553
const START = 57554
const STRICT = 57555
const STRING = 57556
const STORING = 57557
const SUBSTRING = 57558
const SYMMETRIC = 57559
const TABLE = 57560
const TABLES = 57561
const TEXT = 57562
const THEN = 57563
const TIME = 57564
const TIMESTAMP = 57565
const TIMESTAMPTZ = 57566
const TO = 57567
const TRAILING = 57568
const TRANSACTION = 57569
const TREAT = 57570
const TRIM = 57571
const TRUE = 57572
const TRUNCATE = 57573
const TYPE = 57574
const UNBOUNDED = 57575
const UNCOMMITTED = 57576
const UNION = 57577
const UNIQUE = 57578
const UNKNOWN = 57579
const UPDATE = 57580
const UPSERT = 57581
const USER = 57582
const USING = 57583
const VALID = 57584
const VALIDATE = 57585
const VALUE = 57586
const VALUES = 57587
const VARCHAR = 57588
const VARIADIC = 57589
const VARYING = 57590
const WHEN = 57591
const WHERE = 57592
const WINDOW = 57593
const WITH = 57594
const WITHIN = 57595
const WITHOUT = 57596
const YEAR = 57597
const ZONE = 57598
const NOT_LA = 57599
const WITH_LA = 57600
const POSTFIXOP = 57601
const UMINUS = 57602

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4360

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	279, 21,
	-2, 322,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 293,
	161, 293,
	189, 293,
	277, 293,
	279, 293,
	-2, 303,
	-1, 44,
	1, 296,
	161, 296,
	189, 296,
	277, 296,
	279, 296,
	-2, 302,
	-1, 53,
	1, 21,
	279, 21,
	-2, 322,
	-1, 241,
	1, 138,
	279, 138,
	-2, 795,
	-1, 273,
	136, 332,
	160, 332,
	-2, 299,
	-1, 276,
	136, 331,
	160, 331,
	-2, 297,
	-1, 388,
	136, 331,
	160, 331,
	-2, 300,
	-1, 444,
	276, 739,
	-2, 734,
	-1, 445,
	276, 740,
	-2, 735,
	-1, 451,
	5, 460,
	276, 460,
	-2, 877,
	-1, 473,
	5, 427,
	-2, 854,
	-1, 474,
	5, 455,
	276, 455,
	-2, 855,
	-1, 475,
	5, 435,
	-2, 856,
	-1, 476,
	5, 434,
	-2, 857,
	-1, 477,
	5, 455,
	276, 455,
	-2, 860,
	-1, 478,
	5, 455,
	276, 455,
	-2, 861,
	-1, 479,
	5, 456,
	-2, 864,
	-1, 480,
	5, 422,
	-2, 865,
	-1, 481,
	5, 422,
	-2, 866,
	-1, 482,
	5, 437,
	-2, 869,
	-1, 483,
	5, 423,
	-2, 874,
	-1, 484,
	5, 424,
	-2, 875,
	-1, 485,
	5, 425,
	-2, 876,
	-1, 486,
	5, 422,
	-2, 880,
	-1, 487,
	5, 428,
	-2, 885,
	-1, 488,
	5, 426,
	-2, 887,
	-1, 489,
	5, 453,
	276, 453,
	-2, 888,
	-1, 490,
	5, 457,
	-2, 891,
	-1, 491,
	5, 458,
	-2, 892,
	-1, 492,
	5, 452,
	276, 452,
	-2, 896,
	-1, 754,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	235, 303,
	-2, 562,
	-1, 762,
	276, 719,
	-2, 708,
	-1, 960,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 493,
	-1, 961,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 494,
	-1, 962,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 495,
	-1, 966,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 499,
	-1, 967,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 500,
	-1, 968,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 501,
	-1, 971,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 506,
	-1, 1002,
	169, 632,
	-2, 635,
	-1, 1157,
	88, 303,
	122, 303,
	136, 303,
	160, 303,
	164, 303,
	235, 303,
	-2, 380,
	-1, 1165,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 507,
	-1, 1170,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 508,
	-1, 1189,
	169, 631,
	-2, 634,
	-1, 1335,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 509,
	-1, 1340,
	125, 0,
	-2, 519,
	-1, 1349,
	169, 633,
	-2, 636,
	-1, 1389,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 543,
	-1, 1390,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 544,
	-1, 1391,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 545,
	-1, 1395,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 549,
	-1, 1396,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 550,
	-1, 1397,
	12, 0,
	13, 0,
	14, 0,
	259, 0,
	260, 0,
	261, 0,
	-2, 551,
	-1, 1495,
	125, 0,
	-2, 520,
	-1, 1499,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 523,
	-1, 1500,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 525,
	-1, 1582,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 524,
	-1, 1583,
	30, 0,
	113, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 526,
	-1, 1591,
	125, 0,
	-2, 552,
	-1, 1630,
	125, 0,
	-2, 553,
	-1, 1675,
	30, 0,
	135, 0,
	206, 0,
	257, 0,
	-2, 853,
}

const sqlNprod = 988
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20125

var sqlAct = [...]int{

	999, 1674, 1657, 1536, 1695, 1635, 1658, 1673, 1659, 842,
	899, 1599, 1558, 443, 1483, 442, 589, 435, 1459, 1569,
	1369, 1477, 1341, 31, 1427, 1460, 757, 834, 1342, 1471,
	418, 277, 299, 505, 1247, 1154, 1312, 1015, 885, 759,
	1057, 242, 882, 87, 1246, 1321, 1099, 1153, 493, 693,
	843, 884, 534, 690, 908, 14, 1144, 712, 407, 511,
	810, 1192, 1140, 819, 1054, 987, 1019, 984, 788, 1009,
	282, 20, 792, 911, 562, 284, 43, 708, 10, 547,
	6, 877, 296, 66, 714, 296, 376, 307, 514, 282,
	417, 296, 516, 307, 408, 506, 507, 1102, 64, 68,
	544, 909, 318, 43, 573, 320, 67, 276, 69, 326,
	377, 322, 437, 315, 327, 887, 287, 1104, 391, 836,
	392, 239, 44, 317, 390, 564, 82, 543, 560, 43,
	73, 311, 527, 45, 285, 1575, 536, 536, 1576, 1012,
	1671, 835, 1665, 1557, 395, 903, 1664, 1656, 1651, 903,
	1498, 903, 1185, 295, 281, 839, 302, 1632, 1626, 1152,
	1498, 903, 312, 525, 281, 1618, 274, 266, 1557, 1609,
	323, 1110, 1557, 716, 716, 1584, 1013, 273, 1498, 495,
	305, 1579, 1566, 289, 903, 1557, 1556, 1541, 1540, 1557,
	903, 903, 1521, 1501, 1621, 1185, 1185, 21, 1497, 49,
	1437, 1498, 1345, 903, 715, 1185, 1402, 35, 1302, 1014,
	1011, 1297, 1296, 1264, 1187, 1297, 1265, 51, 1262, 1188,
	1261, 1185, 494, 1185, 1260, 1189, 1186, 1185, 1185, 904,
	37, 1185, 903, 1560, 807, 541, 42, 806, 542, 1348,
	1123, 450, 49, 808, 52, 1142, 1125, 903, 857, 539,
	995, 47, 508, 898, 871, 402, 509, 48, 509, 403,
	51, 26, 684, 683, 38, 1016, 554, 553, 27, 343,
	1191, 294, 508, 53, 588, 46, 509, 1127, 1672, 49,
	1185, 28, 362, 1670, 537, 537, 1627, 52, 1565, 1526,
	1522, 409, 409, 1514, 47, 1513, 1508, 51, 296, 1507,
	48, 512, 1506, 1505, 1492, 389, 1417, 1412, 497, 1411,
	1410, 383, 49, 1454, 1352, 1330, 1311, 1219, 65, 765,
	1268, 1010, 1266, 350, 52, 504, 1254, 500, 502, 1245,
	51, 47, 1218, 496, 1215, 388, 1213, 48, 1202, 296,
	528, 528, 1163, 1490, 1196, 1124, 1070, 351, 1026, 717,
	499, 1025, 1110, 715, 402, 838, 992, 52, 401, 1600,
	1371, 1232, 1620, 1601, 1593, 40, 1572, 719, 29, 382,
	39, 1563, 1577, 760, 1555, 30, 535, 687, 49, 1533,
	1519, 1486, 33, 34, 1467, 1339, 1329, 718, 46, 1308,
	36, 1307, 380, 1305, 700, 702, 51, 1280, 326, 326,
	1279, 709, 1244, 327, 327, 1210, 592, 274, 1219, 41,
	312, 593, 1209, 748, 749, 750, 751, 752, 273, 1201,
	1182, 404, 755, 52, 398, 399, 1178, 989, 1453, 1219,
	47, 1235, 1236, 1237, 686, 793, 48, 717, 993, 1084,
	526, 1494, 768, 529, 447, 282, 1219, 796, 1233, 717,
	1084, 1083, 1064, 1024, 46, 719, 902, 762, 799, 508,
	786, 1581, 756, 509, 785, 784, 783, 719, 782, 781,
	583, 780, 551, 1232, 550, 718, 779, 778, 777, 776,
	733, 775, 774, 584, 577, 673, 773, 718, 677, 678,
	679, 772, 680, 676, 763, 761, 682, 46, 688, 300,
	406, 1580, 1332, 1234, 1331, 501, 685, 1219, 1458, 803,
	1111, 698, 697, 893, 696, 356, 798, 375, 274, 1267,
	710, 274, 274, 1164, 371, 357, 804, 770, 1472, 704,
	1012, 835, 705, 706, 801, 734, 1372, 1205, 802, 1233,
	1020, 789, 1106, 1641, 1238, 1445, 790, 791, 517, 1608,
	518, 1685, 296, 592, 794, 307, 813, 1684, 593, 797,
	1233, 846, 820, 233, 1119, 863, 307, 1013, 259, 307,
	1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223, 1224, 824,
	826, 852, 320, 837, 800, 837, 326, 517, 260, 518,
	766, 327, 1549, 265, 1234, 264, 271, 66, 57, 1548,
	1014, 1011, 1292, 1272, 859, 876, 720, 721, 722, 723,
	724, 1489, 812, 68, 519, 1234, 823, 43, 1291, 1271,
	67, 374, 69, 829, 1200, 517, 1219, 518, 1235, 1236,
	1237, 1199, 592, 816, 1607, 1198, 812, 593, 58, 354,
	854, 865, 811, 853, 860, 861, 858, 323, 832, 841,
	1197, 1166, 851, 519, 855, 976, 1016, 856, 831, 850,
	830, 268, 379, 1067, 864, 1220, 1221, 1222, 1223, 1224,
	1232, 950, 1643, 986, 986, 355, 61, 1016, 1229, 1230,
	1231, 1538, 1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223,
	1224, 519, 1661, 822, 720, 721, 722, 723, 724, 530,
	1282, 1692, 1020, 1220, 1221, 1222, 1223, 1224, 722, 723,
	724, 1684, 1010, 896, 897, 1098, 409, 1030, 296, 536,
	62, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 905, 1219, 269, 1118, 913, 296, 55, 1100,
	974, 523, 821, 1361, 522, 1095, 1602, 1233, 60, 59,
	949, 1662, 272, 990, 1175, 411, 1222, 1223, 1224, 582,
	581, 880, 575, 570, 520, 1027, 1173, 1038, 378, 1048,
	1050, 1055, 1058, 1059, 1060, 1120, 1033, 1289, 787, 881,
	592, 802, 56, 515, 879, 593, 802, 1663, 346, 348,
	1000, 996, 1001, 353, 1004, 1589, 352, 512, 71, 1016,
	906, 809, 1234, 520, 1691, 1322, 1653, 1358, 372, 1049,
	1208, 1283, 1219, 1034, 63, 1061, 1062, 1063, 1069, 753,
	919, 867, 1654, 975, 281, 982, 1101, 869, 1171, 1539,
	1075, 585, 1176, 1660, 991, 1698, 1081, 980, 74, 1219,
	1359, 520, 870, 394, 1079, 972, 1035, 1032, 353, 1683,
	868, 1681, 282, 1168, 985, 1470, 1073, 537, 79, 1105,
	373, 280, 1103, 75, 1233, 1229, 1230, 1231, 1105, 1228,
	1225, 1226, 1227, 1220, 1221, 1222, 1223, 1224, 587, 891,
	365, 344, 1690, 76, 1517, 1040, 54, 938, 342, 709,
	445, 1074, 586, 1543, 1113, 279, 1016, 978, 78, 977,
	1398, 393, 1036, 983, 1172, 326, 1705, 1542, 1094, 1441,
	327, 1174, 1129, 1531, 1274, 1078, 973, 1109, 892, 1234,
	919, 86, 1128, 695, 86, 394, 282, 1115, 1114, 1108,
	937, 86, 1126, 296, 1116, 1122, 1121, 281, 86, 86,
	1117, 689, 86, 1233, 1696, 86, 86, 86, 1135, 918,
	1484, 86, 86, 86, 86, 1112, 325, 1159, 1031, 1357,
	1636, 393, 1518, 1165, 1137, 681, 1133, 1170, 43, 555,
	1233, 1136, 1399, 1138, 86, 979, 1158, 1532, 1400, 1162,
	77, 1086, 981, 1697, 1704, 1440, 1184, 938, 1085, 1227,
	1220, 1221, 1222, 1223, 1224, 794, 1193, 797, 1234, 1699,
	1444, 1485, 1480, 282, 791, 790, 1317, 1443, 278, 559,
	1316, 1206, 352, 310, 309, 1211, 940, 279, 80, 385,
	1181, 1313, 576, 571, 1183, 1234, 1190, 1141, 1023, 1592,
	937, 1169, 1167, 1516, 1248, 1338, 755, 1194, 1195, 1214,
	557, 939, 1055, 1055, 1055, 1177, 862, 370, 368, 918,
	367, 558, 366, 363, 308, 1249, 771, 675, 1022, 282,
	1143, 1424, 1287, 1270, 74, 1228, 1225, 1226, 1227, 1220,
	1221, 1222, 1223, 1224, 1277, 1204, 1243, 1285, 1273, 1130,
	894, 890, 540, 1442, 79, 538, 1147, 1256, 533, 75,
	1366, 409, 524, 1225, 1226, 1227, 1220, 1221, 1222, 1223,
	1224, 1150, 512, 1147, 521, 694, 1251, 1252, 1253, 76,
	1550, 1320, 396, 1685, 579, 812, 940, 1148, 1150, 292,
	1552, 827, 1269, 359, 78, 86, 86, 1299, 1145, 828,
	900, 846, 1278, 1286, 1148, 1288, 1276, 812, 1295, 1294,
	717, 939, 1702, 825, 3, 1298, 1290, 1560, 1146, 1293,
	703, 1300, 915, 1604, 1629, 1334, 86, 1335, 86, 1326,
	86, 1301, 86, 296, 1314, 400, 296, 1304, 1340, 1622,
	840, 1306, 1310, 258, 397, 1149, 1350, 86, 718, 70,
	711, 293, 1350, 901, 1323, 1324, 592, 1315, 86, 1325,
	1318, 593, 1149, 1319, 360, 1433, 1367, 552, 301, 86,
	86, 86, 1161, 86, 717, 1376, 77, 1703, 1378, 81,
	1219, 261, 262, 1346, 717, 1354, 1355, 1356, 1351, 873,
	872, 1491, 719, 1418, 1364, 1434, 1360, 1362, 1363, 1333,
	1263, 1375, 1068, 86, 1066, 86, 1065, 1017, 1379, 1407,
	1408, 874, 718, 1503, 80, 325, 325, 1365, 1414, 1415,
	1416, 1377, 915, 591, 86, 1131, 86, 86, 86, 86,
	875, 86, 1373, 764, 267, 86, 1537, 72, 674, 1409,
	86, 1405, 364, 1510, 1652, 1403, 86, 1207, 1588, 1568,
	1021, 919, 1406, 769, 25, 1462, 1413, 423, 1425, 1275,
	886, 594, 580, 569, 86, 446, 1419, 86, 369, 563,
	572, 1429, 1423, 1430, 1473, 1029, 498, 448, 916, 1465,
	1448, 1464, 1465, 1466, 1464, 919, 1466, 1469, 1456, 449,
	917, 795, 919, 436, 914, 321, 1432, 1438, 1439, 1495,
	844, 1018, 1203, 1435, 1499, 1500, 1457, 296, 296, 1502,
	1468, 296, 1455, 767, 1504, 1474, 422, 428, 938, 427,
	997, 419, 1496, 919, 1482, 1151, 1488, 349, 237, 1509,
	238, 1475, 1476, 1512, 1452, 1481, 1433, 895, 1428, 699,
	1284, 270, 1216, 1047, 1039, 1037, 1426, 1487, 1028, 381,
	510, 845, 938, 361, 907, 1431, 1160, 405, 707, 938,
	291, 937, 290, 1520, 86, 883, 1434, 358, 556, 866,
	591, 263, 1515, 1603, 1281, 1640, 50, 19, 86, 17,
	918, 16, 86, 15, 13, 86, 86, 12, 11, 18,
	938, 86, 1134, 86, 86, 937, 86, 9, 8, 86,
	86, 86, 937, 325, 1544, 7, 86, 86, 24, 1527,
	23, 22, 919, 5, 918, 4, 2, 1, 0, 0,
	0, 918, 0, 1528, 1562, 0, 1535, 1465, 0, 1464,
	1530, 1466, 1551, 937, 1545, 1561, 0, 0, 0, 0,
	1573, 1465, 1429, 1464, 1430, 1466, 1564, 940, 1559, 591,
	0, 1553, 918, 0, 1582, 1583, 0, 0, 1571, 1546,
	1547, 1567, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 296, 939, 0, 1435, 0, 0, 0, 0, 938,
	0, 940, 0, 0, 1596, 0, 0, 1585, 940, 0,
	0, 0, 0, 0, 1598, 1574, 1587, 0, 0, 0,
	0, 0, 1594, 1041, 1578, 0, 939, 0, 0, 0,
	0, 430, 0, 939, 1597, 0, 512, 0, 919, 940,
	1611, 0, 937, 0, 0, 0, 1431, 0, 0, 1613,
	1619, 1465, 1615, 1464, 0, 1466, 86, 0, 0, 282,
	0, 918, 84, 1612, 939, 243, 0, 0, 86, 86,
	1624, 0, 84, 802, 1625, 0, 0, 0, 0, 288,
	288, 0, 1614, 298, 1617, 0, 298, 304, 298, 0,
	0, 919, 298, 313, 298, 243, 1631, 86, 0, 86,
	1628, 592, 1647, 915, 0, 938, 593, 0, 0, 1645,
	1623, 0, 919, 1639, 1465, 345, 1464, 1644, 1466, 1648,
	0, 1649, 1667, 1650, 0, 0, 1642, 591, 940, 1646,
	0, 1666, 0, 1668, 1678, 1678, 1669, 915, 1637, 1638,
	0, 0, 1679, 0, 915, 0, 1682, 1680, 937, 0,
	1655, 0, 1686, 939, 846, 1688, 1678, 1689, 938, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 1701,
	1700, 0, 0, 0, 1143, 915, 1687, 0, 0, 938,
	0, 0, 0, 1678, 1706, 0, 919, 0, 0, 0,
	86, 86, 86, 0, 0, 717, 86, 0, 0, 86,
	0, 937, 0, 0, 0, 86, 86, 86, 86, 86,
	0, 86, 86, 719, 0, 744, 0, 1147, 0, 86,
	918, 86, 937, 0, 0, 0, 0, 0, 86, 0,
	1041, 1041, 1150, 718, 940, 0, 0, 86, 86, 732,
	0, 918, 1145, 86, 0, 0, 0, 0, 1148, 0,
	0, 0, 325, 938, 0, 0, 0, 0, 0, 939,
	0, 0, 1146, 0, 915, 0, 243, 243, 0, 86,
	0, 86, 86, 0, 0, 86, 1479, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 940, 1041, 1041,
	1041, 86, 0, 86, 0, 0, 937, 84, 745, 298,
	0, 243, 0, 386, 0, 0, 1149, 0, 940, 0,
	0, 0, 939, 0, 0, 918, 0, 0, 288, 0,
	740, 0, 0, 0, 0, 0, 733, 0, 0, 298,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	298, 298, 298, 0, 531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1478, 0, 0, 0,
	1179, 1180, 0, 0, 0, 717, 0, 0, 0, 0,
	915, 0, 0, 0, 548, 0, 548, 424, 32, 0,
	0, 734, 940, 719, 0, 0, 0, 0, 0, 0,
	717, 742, 735, 736, 737, 243, 0, 548, 243, 243,
	243, 0, 243, 718, 0, 32, 243, 939, 719, 732,
	744, 84, 0, 1041, 1041, 0, 0, 692, 1240, 1241,
	1242, 275, 0, 915, 283, 0, 0, 0, 718, 0,
	0, 32, 0, 0, 732, 288, 0, 0, 713, 0,
	0, 0, 741, 283, 915, 0, 0, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 1041, 1041, 1041, 1041,
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
	1041, 1041, 1041, 1041, 0, 1041, 0, 0, 0, 0,
	0, 86, 0, 745, 0, 0, 733, 0, 0, 717,
	0, 0, 0, 0, 86, 743, 86, 717, 86, 0,
	0, 86, 0, 0, 0, 740, 0, 719, 915, 0,
	0, 733, 0, 86, 0, 719, 86, 0, 0, 0,
	0, 0, 86, 591, 0, 298, 86, 718, 86, 0,
	0, 0, 0, 1336, 1337, 718, 0, 0, 0, 817,
	0, 734, 0, 298, 0, 0, 298, 833, 0, 0,
	0, 0, 298, 0, 848, 849, 0, 298, 0, 0,
	298, 243, 243, 0, 0, 0, 734, 548, 713, 0,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 0, 1401, 0, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 0, 0, 0,
	733, 0, 0, 0, 0, 0, 0, 741, 733, 729,
	730, 731, 0, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 86, 86, 86, 0, 0, 0, 0, 0,
	86, 86, 275, 0, 0, 0, 86, 0, 86, 0,
	86, 86, 86, 86, 0, 0, 0, 0, 86, 0,
	1041, 0, 0, 0, 0, 734, 0, 0, 86, 0,
	0, 0, 0, 734, 0, 0, 0, 86, 86, 0,
	0, 86, 0, 0, 0, 0, 0, 878, 0, 0,
	86, 86, 0, 0, 0, 0, 0, 0, 0, 298,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 0,
	243, 0, 86, 725, 726, 727, 720, 721, 722, 723,
	724, 0, 1041, 727, 720, 721, 722, 723, 724, 0,
	0, 0, 0, 275, 0, 0, 275, 275, 0, 0,
	0, 0, 0, 0, 717, 0, 735, 736, 737, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 754,
	0, 0, 719, 758, 744, 86, 0, 86, 717, 86,
	1534, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 718, 0, 0, 0, 719, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1041, 0,
	0, 298, 1076, 1077, 0, 0, 718, 817, 0, 0,
	1082, 86, 0, 86, 0, 0, 1087, 1088, 1090, 1092,
	1093, 86, 1096, 1097, 0, 0, 0, 86, 0, 0,
	298, 0, 1107, 0, 0, 0, 0, 0, 0, 298,
	0, 0, 0, 0, 0, 0, 0, 745, 878, 548,
	0, 0, 1591, 0, 878, 0, 245, 0, 0, 743,
	0, 0, 0, 0, 0, 32, 0, 32, 0, 740,
	256, 0, 0, 0, 0, 733, 0, 0, 0, 32,
	692, 0, 243, 298, 0, 0, 1132, 0, 0, 86,
	86, 0, 0, 86, 0, 1139, 0, 739, 0, 733,
	0, 86, 1156, 247, 298, 0, 0, 0, 0, 0,
	257, 0, 0, 86, 0, 0, 0, 0, 591, 0,
	0, 0, 246, 248, 0, 0, 0, 0, 1630, 0,
	734, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	742, 86, 86, 86, 738, 86, 0, 0, 0, 0,
	719, 0, 744, 0, 734, 0, 249, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 250, 251, 0, 0,
	718, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 252, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 910, 0, 0, 740, 0, 0,
	0, 0, 0, 733, 0, 0, 0, 0, 0, 0,
	0, 253, 0, 0, 254, 0, 713, 0, 0, 255,
	0, 0, 0, 988, 0, 739, 0, 0, 0, 0,
	0, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 0, 298, 0, 738, 0, 0, 0, 0, 0,
	719, 0, 744, 0, 0, 1303, 0, 817, 734, 692,
	0, 717, 1309, 735, 736, 737, 0, 0, 742, 0,
	718, 0, 0, 738, 298, 0, 732, 298, 0, 719,
	0, 744, 0, 1156, 0, 0, 0, 1328, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 283, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 745, 0, 0, 0, 0,
	1370, 0, 1523, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	0, 0, 0, 733, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	32, 0, 0, 0, 0, 739, 740, 0, 0, 0,
	1157, 0, 733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1421, 1422, 817, 0, 0, 0, 0,
	0, 713, 713, 0, 739, 0, 0, 1446, 734, 1447,
	0, 298, 1449, 1450, 1451, 0, 0, 0, 742, 298,
	0, 0, 0, 0, 0, 0, 0, 1461, 0, 817,
	1461, 0, 0, 0, 0, 0, 0, 734, 298, 298,
	0, 0, 298, 988, 0, 0, 717, 742, 735, 736,
	737, 713, 1156, 0, 0, 0, 0, 754, 738, 0,
	0, 0, 0, 0, 719, 0, 744, 0, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 718, 0, 0, 0, 0, 0,
	732, 0, 1259, 1511, 0, 0, 0, 0, 741, 0,
	729, 730, 731, 0, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 754, 0, 0, 0, 0, 0, 0,
	0, 1258, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	719, 0, 744, 0, 0, 0, 817, 0, 1529, 745,
	243, 0, 717, 0, 735, 736, 737, 298, 0, 0,
	718, 743, 0, 0, 738, 0, 732, 0, 0, 0,
	719, 740, 744, 0, 0, 1461, 0, 733, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1461,
	718, 0, 298, 0, 1570, 0, 732, 0, 0, 739,
	0, 0, 298, 0, 0, 0, 0, 0, 713, 0,
	910, 0, 0, 910, 1219, 0, 1235, 1236, 1237, 0,
	0, 0, 0, 0, 0, 745, 1493, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 1219, 743, 1235, 1236,
	1237, 0, 742, 0, 0, 0, 0, 740, 1344, 0,
	0, 0, 0, 733, 0, 745, 0, 0, 1232, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	1605, 1606, 0, 0, 1610, 739, 0, 740, 0, 1461,
	1232, 0, 243, 733, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 741, 713, 729, 730, 731, 0, 728,
	725, 726, 727, 720, 721, 722, 723, 724, 734, 0,
	0, 0, 0, 0, 0, 0, 1257, 0, 742, 0,
	0, 0, 713, 713, 298, 0, 243, 0, 0, 1238,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 1461, 1570, 0, 1233, 0, 0, 742, 0,
	0, 1238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 298, 0, 1233, 0, 741,
	0, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 910, 910, 0, 0, 910, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 741,
	1234, 729, 730, 731, 0, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 0, 0, 0, 0, 0,
	0, 0, 1234, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1229, 1230, 1231, 0, 1228, 1225, 1226,
	1227, 1220, 1221, 1222, 1223, 1224, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 1230, 1231, 0, 1228,
	1225, 1226, 1227, 1220, 1221, 1222, 1223, 1224, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	590, 0, 0, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 88, 89, 595, 90, 596, 597, 598, 599,
	600, 601, 602, 603, 91, 92, 189, 190, 191, 93,
	192, 193, 604, 94, 194, 195, 95, 605, 606, 196,
	197, 198, 607, 199, 608, 329, 609, 96, 97, 98,
	0, 99, 610, 100, 611, 330, 101, 102, 612, 613,
	614, 615, 616, 617, 103, 104, 105, 106, 200, 107,
	201, 202, 618, 619, 108, 620, 621, 622, 109, 110,
	623, 111, 624, 754, 625, 203, 112, 204, 626, 627,
	113, 114, 205, 115, 628, 116, 629, 630, 331, 631,
	117, 206, 632, 207, 633, 118, 119, 208, 209, 634,
	635, 120, 636, 332, 121, 210, 211, 212, 637, 213,
	638, 333, 122, 334, 123, 124, 639, 640, 214, 335,
	125, 336, 641, 126, 642, 643, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 644, 136,
	645, 215, 138, 216, 139, 140, 646, 647, 648, 649,
	650, 141, 217, 338, 142, 339, 218, 143, 144, 651,
	219, 145, 220, 652, 146, 147, 148, 221, 149, 150,
	653, 152, 153, 151, 154, 654, 155, 340, 156, 157,
	222, 158, 0, 244, 159, 160, 655, 161, 162, 656,
	163, 164, 341, 165, 223, 166, 657, 167, 168, 170,
	224, 169, 225, 658, 659, 171, 172, 660, 226, 227,
	228, 661, 662, 173, 229, 230, 663, 174, 175, 176,
	177, 664, 665, 178, 179, 180, 666, 667, 181, 182,
	183, 231, 232, 668, 184, 669, 670, 671, 672, 185,
	186, 187, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 88,
	89, 595, 90, 596, 597, 598, 599, 600, 601, 602,
	603, 91, 92, 189, 190, 191, 93, 192, 193, 604,
	94, 194, 195, 95, 605, 606, 196, 197, 198, 607,
	199, 608, 329, 609, 96, 97, 98, 0, 99, 610,
	100, 611, 330, 101, 102, 612, 613, 614, 615, 616,
	617, 103, 104, 105, 106, 200, 107, 201, 202, 618,
	619, 108, 620, 621, 622, 109, 110, 623, 111, 624,
	0, 625, 203, 112, 204, 626, 627, 113, 114, 205,
	115, 628, 116, 629, 630, 331, 631, 117, 206, 632,
	207, 633, 118, 119, 208, 209, 634, 635, 120, 636,
	332, 121, 210, 211, 212, 637, 213, 638, 333, 122,
	334, 123, 124, 639, 640, 214, 335, 125, 336, 641,
	126, 642, 643, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 644, 136, 645, 215, 138,
	216, 139, 140, 646, 647, 648, 649, 650, 141, 217,
	338, 142, 339, 218, 143, 144, 651, 219, 145, 220,
	652, 146, 147, 148, 221, 149, 150, 653, 152, 153,
	151, 154, 654, 155, 340, 156, 157, 222, 158, 0,
	244, 159, 160, 655, 161, 162, 656, 163, 164, 341,
	165, 223, 166, 657, 167, 168, 170, 224, 169, 225,
	658, 659, 171, 172, 660, 226, 227, 228, 661, 662,
	173, 229, 230, 663, 174, 175, 176, 177, 664, 665,
	178, 179, 180, 666, 667, 181, 182, 183, 231, 232,
	668, 184, 669, 670, 671, 672, 185, 186, 187, 188,
	0, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 805, 88, 89, 595, 90, 596, 597, 598,
	599, 600, 601, 602, 603, 91, 92, 189, 190, 191,
	93, 192, 193, 604, 94, 194, 195, 95, 605, 606,
	196, 197, 198, 607, 199, 608, 329, 609, 96, 97,
	98, 0, 99, 610, 100, 611, 330, 101, 102, 612,
	613, 614, 615, 616, 617, 103, 104, 105, 106, 200,
	107, 201, 202, 618, 619, 108, 620, 621, 622, 109,
	110, 623, 111, 624, 0, 625, 203, 112, 204, 626,
	627, 113, 114, 205, 115, 628, 116, 629, 630, 331,
	631, 117, 206, 632, 207, 633, 118, 119, 208, 209,
	634, 635, 120, 636, 332, 121, 210, 211, 212, 637,
	213, 638, 333, 122, 334, 123, 124, 639, 640, 214,
	335, 125, 336, 641, 126, 642, 643, 127, 0, 128,
	129, 130, 131, 132, 337, 133, 134, 137, 135, 644,
	136, 645, 215, 138, 216, 139, 140, 646, 647, 648,
	649, 650, 141, 217, 338, 142, 339, 218, 143, 144,
	651, 219, 145, 220, 652, 146, 147, 148, 221, 149,
	150, 653, 152, 153, 151, 154, 654, 155, 340, 156,
	157, 222, 158, 0, 244, 159, 160, 655, 161, 162,
	656, 163, 164, 341, 165, 223, 166, 657, 167, 168,
	170, 224, 169, 225, 658, 659, 171, 172, 660, 226,
	227, 228, 661, 662, 173, 229, 230, 663, 174, 175,
	176, 177, 664, 665, 178, 179, 180, 666, 667, 181,
	182, 183, 231, 232, 668, 184, 669, 670, 671, 672,
	185, 186, 187, 188, 444, 433, 434, 431, 432, 420,
	0, 0, 0, 0, 0, 0, 88, 89, 1006, 90,
	0, 0, 0, 0, 426, 0, 0, 0, 91, 92,
	189, 473, 474, 93, 475, 476, 0, 94, 194, 195,
	95, 441, 459, 477, 478, 198, 0, 469, 0, 452,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 102, 0, 453, 455, 0, 454, 456, 103, 104,
	105, 106, 479, 107, 480, 481, 0, 0, 108, 0,
	1007, 0, 472, 110, 0, 111, 0, 0, 0, 425,
	112, 460, 439, 0, 113, 114, 482, 115, 0, 116,
	0, 0, 331, 0, 117, 470, 0, 207, 0, 118,
	119, 466, 468, 0, 0, 120, 0, 332, 121, 483,
	484, 485, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 1005, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 1008,
	0, 88, 89, 414, 90, 0, 421, 1003, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 513, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 451, 0,
	333, 122, 334, 123, 124, 0, 0, 471, 335, 125,
	336, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 337, 133, 134, 137, 135, 415, 136, 440,
	467, 138, 486, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 338, 142, 339, 461, 143, 144, 0, 462,
	145, 220, 0, 146, 147, 148, 487, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 340, 156, 157, 429,
	158, 0, 244, 159, 160, 49, 161, 162, 457, 163,
	164, 341, 165, 488, 166, 0, 167, 168, 170, 489,
	169, 463, 0, 51, 171, 172, 0, 226, 490, 491,
	0, 0, 173, 464, 465, 438, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 458, 0, 181, 182, 183,
	328, 492, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 416, 48, 444, 433, 434, 431, 432, 420,
	0, 0, 412, 413, 0, 0, 88, 89, 414, 90,
	0, 421, 0, 0, 426, 0, 0, 0, 91, 92,
	189, 473, 474, 93, 475, 476, 0, 94, 194, 195,
	95, 441, 459, 477, 478, 198, 0, 469, 0, 452,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 102, 0, 453, 455, 0, 454, 456, 103, 104,
	105, 106, 479, 107, 480, 481, 0, 0, 108, 0,
	0, 0, 472, 110, 0, 111, 0, 0, 0, 425,
	112, 460, 439, 0, 113, 114, 482, 115, 0, 116,
	0, 0, 331, 0, 117, 470, 0, 207, 0, 118,
	119, 466, 468, 0, 0, 120, 0, 332, 121, 483,
	484, 485, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	49, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 51, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 328, 492, 0, 184, 0,
	0, 0, 47, 185, 186, 187, 188, 416, 48, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 0, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 1051, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 1056, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 451, 0,
	333, 122, 334, 123, 124, 0, 1052, 471, 335, 125,
	336, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 337, 133, 134, 137, 135, 415, 136, 440,
	467, 138, 486, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 338, 142, 339, 461, 143, 144, 0, 462,
	145, 220, 0, 146, 147, 148, 487, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 340, 156, 157, 429,
	158, 0, 244, 159, 160, 0, 161, 162, 457, 163,
	164, 341, 165, 488, 166, 0, 167, 168, 170, 489,
	169, 463, 0, 0, 171, 172, 0, 226, 490, 491,
	0, 1053, 173, 464, 465, 438, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 458, 0, 181, 182, 183,
	231, 492, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 416, 0, 444, 433, 434, 431, 432, 420,
	0, 0, 412, 413, 0, 0, 88, 89, 414, 90,
	0, 421, 0, 0, 426, 0, 0, 0, 91, 92,
	189, 473, 474, 93, 475, 476, 0, 94, 194, 195,
	95, 441, 459, 477, 478, 198, 0, 469, 0, 452,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 102, 0, 453, 455, 0, 454, 456, 103, 104,
	105, 106, 479, 107, 480, 481, 0, 0, 108, 0,
	0, 0, 472, 110, 0, 111, 0, 0, 0, 425,
	112, 460, 439, 0, 113, 114, 482, 115, 0, 116,
	0, 0, 331, 0, 117, 470, 0, 207, 0, 118,
	119, 466, 468, 0, 0, 120, 0, 332, 121, 483,
	484, 485, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 1404, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 451, 0,
	333, 122, 334, 123, 124, 0, 0, 471, 335, 125,
	336, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 337, 133, 134, 137, 135, 415, 136, 440,
	467, 138, 486, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 338, 142, 339, 461, 143, 144, 0, 462,
	145, 220, 0, 146, 147, 148, 487, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 340, 156, 157, 429,
	158, 0, 244, 159, 160, 0, 161, 162, 457, 163,
	164, 341, 165, 488, 166, 0, 167, 168, 170, 489,
	169, 463, 0, 0, 171, 172, 0, 226, 490, 491,
	0, 0, 173, 464, 465, 438, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 458, 0, 181, 182, 183,
	231, 492, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 416, 0, 444, 433, 434, 431, 432, 420,
	0, 0, 412, 413, 0, 0, 88, 89, 414, 90,
	0, 421, 1347, 0, 426, 0, 0, 0, 91, 92,
	189, 473, 474, 93, 475, 476, 0, 94, 194, 195,
	95, 441, 459, 477, 478, 198, 0, 469, 0, 452,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 102, 0, 453, 455, 0, 454, 456, 103, 104,
	105, 106, 479, 107, 480, 481, 0, 0, 108, 0,
	0, 0, 472, 110, 0, 111, 0, 0, 0, 425,
	112, 460, 439, 0, 113, 114, 482, 115, 0, 116,
	0, 0, 331, 0, 117, 470, 0, 207, 0, 118,
	119, 466, 468, 0, 0, 120, 0, 332, 121, 483,
	484, 485, 0, 451, 0, 333, 122, 334, 123, 124,
	0, 0, 471, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 415, 136, 440, 467, 138, 486, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 338, 142, 339,
	461, 143, 144, 0, 462, 145, 220, 0, 146, 147,
	148, 487, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 429, 158, 0, 244, 159, 160,
	0, 161, 162, 457, 163, 164, 341, 165, 488, 166,
	0, 167, 168, 170, 489, 169, 463, 0, 0, 171,
	172, 0, 226, 490, 491, 0, 0, 173, 464, 465,
	438, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	458, 0, 181, 182, 183, 231, 492, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 416, 0, 444,
	433, 434, 431, 432, 420, 0, 0, 412, 413, 0,
	0, 88, 89, 414, 90, 0, 421, 1002, 0, 426,
	0, 0, 0, 91, 92, 189, 473, 474, 93, 475,
	476, 0, 94, 194, 195, 95, 441, 459, 477, 478,
	198, 0, 469, 0, 452, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 453, 455,
	0, 454, 456, 103, 104, 105, 106, 479, 107, 480,
	481, 0, 0, 108, 0, 0, 0, 472, 110, 0,
	111, 0, 0, 0, 425, 112, 460, 439, 0, 113,
	114, 482, 115, 0, 116, 0, 0, 331, 0, 117,
	470, 0, 207, 0, 118, 119, 466, 468, 0, 0,
	120, 0, 332, 121, 483, 484, 485, 0, 451, 0,
	333, 122, 334, 123, 124, 0, 0, 471, 335, 125,
	336, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 337, 133, 134, 137, 135, 415, 136, 440,
	467, 138, 486, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 338, 142, 339, 461, 143, 144, 0, 462,
	145, 220, 0, 146, 147, 148, 487, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 340, 156, 157, 429,
	158, 0, 244, 159, 160, 0, 161, 162, 457, 163,
	164, 341, 165, 488, 166, 0, 167, 168, 170, 489,
	169, 463, 0, 0, 171, 172, 0, 226, 490, 491,
	0, 0, 173, 464, 465, 438, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 458, 0, 181, 182, 183,
	231, 492, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 416, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 413, 0, 0, 0, 0, 414, 760,
	998, 421, 444, 433, 434, 431, 432, 420, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 426, 0, 0, 0, 91, 92, 189, 473,
	474, 93, 475, 476, 0, 94, 194, 195, 95, 441,
	459, 477, 478, 198, 0, 469, 0, 452, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 330, 101, 102,
	0, 453, 455, 0, 454, 456, 103, 104, 105, 106,
	479, 107, 480, 481, 0, 0, 108, 0, 0, 0,
	472, 110, 0, 111, 0, 0, 0, 425, 112, 460,
	439, 0, 113, 114, 482, 115, 0, 116, 0, 0,
	331, 0, 117, 470, 0, 207, 0, 118, 119, 466,
	468, 0, 0, 120, 0, 332, 121, 483, 484, 485,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 1353, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 416, 0, 444, 433, 434,
	431, 432, 420, 0, 0, 412, 413, 0, 0, 88,
	89, 414, 90, 0, 421, 0, 0, 426, 0, 0,
	0, 91, 92, 189, 473, 474, 93, 475, 476, 0,
	94, 194, 195, 95, 441, 459, 477, 478, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 479, 107, 480, 481, 513,
	0, 108, 0, 0, 0, 472, 110, 0, 111, 0,
	0, 0, 425, 112, 460, 439, 0, 113, 114, 482,
	115, 0, 116, 0, 0, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 483, 484, 485, 0, 451, 0, 333, 122,
	334, 123, 124, 0, 0, 471, 335, 125, 336, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 415, 136, 440, 467, 138,
	486, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	338, 142, 339, 461, 143, 144, 0, 462, 145, 220,
	0, 146, 147, 148, 487, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 340, 156, 157, 429, 158, 0,
	244, 159, 160, 0, 161, 162, 457, 163, 164, 341,
	165, 488, 166, 0, 167, 168, 170, 489, 169, 463,
	0, 0, 171, 172, 0, 226, 490, 491, 0, 0,
	173, 464, 465, 438, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 458, 0, 181, 182, 183, 231, 492,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	416, 0, 444, 433, 434, 431, 432, 420, 0, 0,
	412, 413, 0, 0, 88, 89, 414, 90, 0, 421,
	0, 0, 426, 0, 0, 0, 91, 92, 189, 473,
	474, 93, 475, 476, 0, 94, 194, 195, 95, 441,
	459, 477, 478, 198, 0, 469, 0, 452, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 330, 101, 102,
	0, 453, 455, 0, 454, 456, 103, 104, 105, 106,
	479, 107, 480, 481, 0, 0, 108, 0, 0, 0,
	472, 110, 0, 111, 0, 0, 0, 425, 112, 460,
	439, 0, 113, 114, 482, 115, 0, 116, 0, 0,
	331, 0, 117, 470, 0, 207, 0, 118, 119, 466,
	468, 0, 0, 120, 0, 332, 121, 483, 484, 485,
	0, 451, 0, 333, 122, 334, 123, 124, 0, 0,
	471, 335, 125, 336, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 337, 133, 134, 137, 135,
	415, 136, 440, 467, 138, 486, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 338, 142, 339, 461, 143,
	144, 0, 462, 145, 220, 0, 146, 147, 148, 487,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 340,
	156, 157, 429, 158, 0, 244, 159, 160, 0, 161,
	162, 457, 163, 164, 341, 165, 488, 166, 0, 167,
	168, 170, 489, 169, 463, 0, 0, 171, 172, 0,
	226, 490, 491, 0, 0, 173, 464, 465, 438, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 458, 0,
	181, 182, 183, 231, 492, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 416, 0, 444, 433, 434,
	431, 432, 420, 0, 0, 412, 413, 410, 0, 88,
	89, 414, 90, 0, 421, 0, 0, 426, 0, 0,
	0, 91, 92, 189, 473, 474, 93, 475, 476, 0,
	94, 194, 195, 95, 441, 459, 477, 478, 198, 0,
	469, 0, 452, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 453, 455, 0, 454,
	456, 103, 104, 105, 106, 479, 107, 480, 481, 0,
	0, 108, 0, 0, 0, 472, 110, 0, 111, 0,
	0, 0, 425, 112, 460, 439, 0, 113, 114, 482,
	115, 0, 116, 0, 1056, 331, 0, 117, 470, 0,
	207, 0, 118, 119, 466, 468, 0, 0, 120, 0,
	332, 121, 483, 484, 485, 0, 451, 0, 333, 122,
	334, 123, 124, 0, 0, 471, 335, 125, 336, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 415, 136, 440, 467, 138,
	486, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	338, 142, 339, 461, 143, 144, 0, 462, 145, 220,
	0, 146, 147, 148, 487, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 340, 156, 157, 429, 158, 0,
	244, 159, 160, 0, 161, 162, 457, 163, 164, 341,
	165, 488, 166, 0, 167, 168, 170, 489, 169, 463,
	0, 0, 171, 172, 0, 226, 490, 491, 0, 0,
	173, 464, 465, 438, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 458, 0, 181, 182, 183, 231, 492,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	416, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 413, 0, 0, 0, 0, 414, 0, 0, 421,
	444, 433, 434, 431, 432, 420, 0, 0, 0, 0,
	0, 0, 88, 89, 701, 90, 0, 0, 0, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 1677, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 451, 0, 333, 122, 334, 123,
	124, 0, 0, 471, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 415, 136, 440, 467, 138, 486, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 338, 142,
	339, 461, 143, 144, 0, 462, 145, 220, 0, 146,
	147, 148, 487, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 429, 158, 0, 244, 159,
	160, 0, 161, 162, 457, 163, 164, 341, 165, 488,
	166, 0, 167, 168, 170, 489, 169, 463, 0, 0,
	171, 172, 0, 226, 490, 491, 0, 0, 173, 464,
	465, 438, 174, 175, 1676, 177, 0, 0, 178, 179,
	180, 458, 0, 181, 182, 183, 231, 492, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 416, 0,
	444, 433, 434, 431, 432, 420, 0, 0, 412, 413,
	0, 0, 88, 89, 414, 90, 0, 421, 0, 0,
	426, 0, 0, 0, 91, 92, 1675, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 1677, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 415, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	429, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 1676,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 416, 0, 444, 433, 434, 431, 432,
	420, 0, 0, 412, 413, 0, 0, 88, 89, 414,
	90, 0, 421, 0, 0, 426, 0, 0, 0, 91,
	92, 189, 473, 474, 93, 475, 476, 0, 94, 194,
	195, 95, 441, 459, 477, 478, 198, 0, 469, 0,
	452, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	330, 101, 102, 0, 453, 455, 0, 454, 456, 103,
	104, 105, 106, 479, 107, 480, 481, 0, 0, 108,
	0, 0, 0, 472, 110, 0, 111, 0, 0, 0,
	425, 112, 460, 439, 0, 113, 114, 482, 115, 0,
	116, 0, 0, 331, 0, 117, 470, 0, 207, 0,
	118, 119, 466, 468, 0, 0, 120, 0, 332, 121,
	483, 484, 485, 0, 451, 0, 333, 122, 334, 123,
	124, 0, 0, 471, 335, 125, 336, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 337, 133,
	134, 137, 135, 415, 136, 440, 467, 138, 486, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 338, 142,
	339, 461, 143, 144, 0, 462, 145, 220, 0, 146,
	147, 148, 487, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 340, 156, 157, 429, 158, 0, 244, 159,
	160, 0, 161, 162, 457, 163, 164, 341, 165, 488,
	166, 0, 167, 168, 170, 489, 169, 463, 0, 0,
	171, 172, 0, 226, 490, 491, 0, 0, 173, 464,
	465, 438, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 458, 0, 181, 182, 183, 231, 492, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 416, 0,
	444, 433, 434, 431, 432, 420, 0, 0, 412, 413,
	0, 0, 88, 89, 414, 90, 0, 421, 0, 0,
	426, 0, 0, 0, 91, 92, 189, 473, 474, 93,
	475, 476, 0, 94, 194, 195, 95, 441, 459, 477,
	478, 198, 0, 469, 0, 452, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 453,
	455, 0, 454, 456, 103, 104, 105, 106, 479, 107,
	480, 481, 0, 0, 108, 0, 0, 0, 472, 110,
	0, 111, 0, 0, 0, 425, 112, 460, 439, 0,
	113, 114, 482, 115, 0, 116, 0, 0, 331, 0,
	117, 470, 0, 207, 0, 118, 119, 466, 468, 0,
	0, 120, 0, 332, 121, 483, 484, 485, 0, 451,
	0, 333, 122, 334, 123, 124, 0, 0, 471, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 0, 136,
	440, 467, 138, 486, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 461, 143, 144, 0,
	462, 145, 220, 0, 146, 147, 148, 487, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	1046, 158, 0, 244, 159, 160, 0, 161, 162, 457,
	163, 164, 341, 165, 488, 166, 0, 167, 168, 170,
	489, 169, 463, 0, 0, 171, 172, 0, 226, 490,
	491, 0, 0, 173, 464, 465, 438, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 458, 0, 181, 182,
	183, 231, 492, 0, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 444, 433, 434, 431, 432, 420, 0,
	0, 0, 0, 1042, 1043, 88, 89, 0, 90, 1044,
	0, 0, 1045, 426, 0, 0, 0, 91, 92, 0,
	473, 474, 93, 475, 476, 0, 94, 194, 195, 95,
	441, 459, 477, 478, 198, 0, 469, 0, 452, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 330, 101,
	1677, 0, 453, 455, 0, 454, 456, 103, 104, 105,
	106, 479, 107, 480, 481, 0, 0, 108, 0, 0,
	0, 472, 110, 0, 111, 0, 0, 0, 425, 112,
	460, 439, 0, 113, 114, 482, 115, 0, 116, 0,
	0, 331, 0, 117, 470, 0, 207, 0, 118, 119,
	466, 468, 0, 0, 120, 0, 332, 121, 483, 484,
	485, 0, 451, 0, 0, 122, 334, 123, 124, 0,
	0, 471, 335, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 337, 133, 134, 137,
	135, 415, 136, 440, 467, 138, 486, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 338, 142, 339, 461,
	143, 144, 0, 462, 145, 220, 0, 146, 147, 148,
	487, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	340, 156, 157, 429, 158, 0, 244, 159, 160, 0,
	161, 162, 457, 163, 164, 0, 165, 488, 166, 0,
	167, 168, 170, 489, 169, 463, 0, 0, 171, 172,
	0, 226, 490, 491, 0, 0, 173, 464, 465, 438,
	174, 175, 1676, 177, 0, 0, 178, 179, 180, 458,
	0, 181, 182, 183, 231, 492, 0, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 413, 88, 89,
	0, 90, 414, 0, 0, 421, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 459, 196, 197, 198, 0, 469,
	0, 452, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 330, 101, 102, 0, 453, 455, 0, 454, 456,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 460, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 331, 0, 117, 470, 0, 207,
	0, 118, 119, 466, 468, 0, 0, 120, 0, 332,
	121, 210, 211, 212, 0, 213, 0, 333, 122, 334,
	123, 124, 0, 0, 471, 335, 125, 336, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 337,
	133, 134, 137, 135, 0, 136, 0, 467, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 338,
	142, 339, 461, 143, 144, 0, 462, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 340, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 457, 163, 164, 341, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 463, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	464, 465, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 458, 0, 181, 182, 183, 231, 232, 0,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 324,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 1463, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 329, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 330, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 331, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 332, 121, 210, 211, 212, 0, 213, 0,
	333, 122, 334, 123, 124, 0, 0, 214, 335, 125,
	336, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 337, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 338, 142, 339, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 340, 156, 157, 222,
	158, 0, 244, 159, 160, 49, 161, 162, 0, 163,
	164, 341, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 51, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	328, 232, 0, 184, 0, 0, 0, 47, 185, 186,
	187, 188, 0, 48, 324, 574, 0, 575, 570, 565,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 46, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 329,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 330,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 578, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 567, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 331, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 332, 121, 210,
	211, 212, 0, 213, 0, 333, 122, 334, 123, 124,
	0, 0, 214, 335, 125, 336, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 337, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 568, 0, 0, 0, 141, 217, 338, 142, 339,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 340, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 341, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	566, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 0, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 324, 574, 0,
	575, 570, 565, 0, 0, 0, 0, 576, 571, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 329, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 330, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 561,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 567, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 331, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	332, 121, 210, 211, 212, 0, 213, 0, 333, 122,
	334, 123, 124, 0, 0, 214, 335, 125, 336, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	337, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 568, 0, 0, 0, 141, 217,
	338, 142, 339, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 340, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 163, 164, 341,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 566, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	0, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	324, 574, 0, 575, 570, 565, 0, 0, 0, 0,
	576, 571, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 329, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 567, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 331, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 332, 121, 210, 211, 212, 0, 213,
	0, 333, 122, 334, 123, 124, 0, 0, 214, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 568, 0, 0,
	0, 141, 217, 338, 142, 339, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 341, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 566, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 576, 571, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 297, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 49,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 51, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 328, 232, 0, 184, 0, 0,
	0, 47, 185, 186, 187, 188, 85, 48, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 912, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 49, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	51, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 328, 232, 0,
	184, 0, 0, 0, 47, 185, 186, 187, 188, 85,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 46, 0,
	1155, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 0, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 402, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	297, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 0, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 912, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 0, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 847, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 0, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	1371, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 208, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	213, 0, 0, 122, 0, 123, 124, 0, 0, 214,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 0, 142, 0, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 0, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 0, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 0, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 503, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	546, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 208, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 545, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 549,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 208, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	324, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 549, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 329, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 330, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 331, 0,
	117, 206, 0, 207, 0, 118, 119, 208, 209, 0,
	0, 120, 0, 332, 121, 210, 211, 212, 0, 213,
	0, 333, 122, 334, 123, 124, 0, 0, 214, 335,
	125, 336, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 337, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 338, 142, 339, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 340, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 341, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 820, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 818, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 823,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 888, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 822, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 889, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 820, 199,
	0, 0, 815, 96, 97, 98, 0, 99, 818, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 823, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 814, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 822,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 821, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	1155, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 208,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	297, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 198, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 303, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 297, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 226, 227, 228, 0, 0, 173, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 226, 227, 228, 0,
	0, 173, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 1091, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	213, 0, 0, 122, 0, 123, 124, 0, 0, 214,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 0, 142, 0, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 0, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 0, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 1089, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 1080, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 691, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 149, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 83, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 532, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 126,
	0, 0, 127, 0, 128, 129, 130, 131, 132, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 162, 0, 0, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 226, 227, 228, 0, 0, 173,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 387, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 144, 0, 219,
	145, 220, 0, 146, 147, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	158, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 85, 184, 0, 0, 0, 0, 185, 186,
	187, 188, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 91, 92, 189, 190,
	191, 93, 192, 193, 0, 94, 194, 195, 95, 0,
	0, 196, 197, 198, 0, 199, 0, 0, 0, 96,
	97, 98, 0, 99, 0, 100, 0, 0, 101, 102,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 106,
	200, 107, 201, 202, 0, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 203, 112, 204,
	0, 0, 113, 114, 205, 115, 0, 116, 0, 0,
	0, 0, 117, 206, 0, 207, 0, 118, 119, 384,
	209, 0, 0, 120, 0, 0, 121, 210, 211, 212,
	0, 213, 0, 0, 122, 0, 123, 124, 0, 0,
	214, 0, 125, 0, 0, 126, 0, 0, 127, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 137, 135,
	0, 136, 0, 215, 138, 216, 139, 140, 0, 0,
	0, 0, 0, 141, 217, 0, 142, 0, 218, 143,
	144, 0, 219, 145, 220, 0, 146, 147, 148, 221,
	149, 150, 0, 152, 153, 151, 154, 0, 155, 0,
	156, 157, 222, 158, 0, 244, 159, 160, 0, 161,
	162, 0, 163, 164, 0, 165, 223, 166, 0, 167,
	168, 170, 224, 169, 225, 0, 0, 171, 172, 0,
	226, 227, 228, 0, 0, 173, 229, 230, 0, 174,
	175, 176, 177, 0, 0, 178, 179, 180, 0, 0,
	181, 182, 183, 231, 232, 85, 184, 0, 0, 0,
	0, 185, 186, 187, 188, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 189, 190, 191, 93, 192, 193, 0, 94, 194,
	195, 95, 0, 0, 196, 197, 347, 0, 199, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 200, 107, 201, 202, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	203, 112, 204, 0, 0, 113, 114, 205, 115, 0,
	116, 0, 0, 0, 0, 117, 206, 0, 207, 0,
	118, 119, 208, 209, 0, 0, 120, 0, 0, 121,
	210, 211, 212, 0, 213, 0, 0, 122, 0, 123,
	124, 0, 0, 214, 0, 125, 0, 0, 126, 0,
	0, 127, 0, 128, 129, 130, 131, 241, 0, 133,
	134, 137, 135, 0, 136, 0, 215, 138, 216, 139,
	140, 0, 0, 0, 0, 0, 141, 217, 0, 142,
	0, 218, 143, 144, 0, 219, 145, 220, 0, 146,
	147, 148, 221, 149, 150, 0, 152, 153, 151, 154,
	0, 155, 0, 156, 157, 222, 158, 0, 244, 159,
	160, 0, 161, 162, 0, 163, 164, 0, 165, 223,
	166, 0, 167, 168, 170, 224, 169, 225, 0, 0,
	171, 172, 0, 240, 227, 228, 0, 0, 236, 229,
	230, 0, 174, 175, 176, 177, 0, 0, 178, 179,
	180, 0, 0, 181, 182, 183, 231, 232, 85, 184,
	0, 0, 0, 0, 185, 186, 187, 188, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 0, 0,
	0, 0, 91, 92, 189, 190, 191, 93, 192, 193,
	0, 94, 194, 195, 95, 0, 0, 196, 197, 198,
	0, 199, 0, 0, 0, 96, 97, 98, 0, 99,
	0, 100, 0, 0, 101, 102, 0, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 200, 107, 201, 202,
	0, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 203, 112, 204, 0, 0, 113, 114,
	205, 115, 0, 116, 0, 0, 0, 0, 117, 206,
	0, 207, 0, 118, 119, 208, 209, 0, 0, 120,
	0, 0, 121, 210, 211, 212, 0, 213, 0, 0,
	122, 0, 123, 124, 0, 0, 214, 0, 125, 0,
	0, 126, 0, 0, 127, 0, 128, 129, 130, 131,
	241, 0, 133, 134, 137, 135, 0, 136, 0, 215,
	138, 216, 139, 140, 0, 0, 0, 0, 0, 141,
	217, 0, 142, 0, 218, 143, 144, 0, 219, 145,
	220, 0, 146, 147, 148, 221, 149, 150, 0, 152,
	153, 151, 154, 0, 155, 0, 156, 157, 222, 158,
	0, 244, 159, 160, 0, 161, 162, 0, 163, 164,
	0, 165, 223, 166, 0, 167, 168, 170, 224, 169,
	225, 0, 0, 171, 172, 0, 240, 227, 228, 0,
	0, 236, 229, 230, 0, 174, 175, 176, 177, 0,
	0, 178, 179, 180, 0, 0, 181, 182, 183, 231,
	232, 85, 184, 0, 0, 0, 0, 185, 186, 187,
	188, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 189, 190, 191,
	93, 192, 193, 0, 94, 194, 195, 95, 0, 0,
	196, 197, 198, 0, 199, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 200,
	107, 201, 202, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 203, 112, 204, 0,
	0, 113, 114, 205, 115, 0, 116, 0, 0, 0,
	0, 117, 206, 0, 207, 0, 118, 119, 319, 209,
	0, 0, 120, 0, 0, 121, 210, 211, 212, 0,
	213, 0, 0, 122, 0, 123, 124, 0, 0, 214,
	0, 125, 0, 0, 126, 0, 0, 127, 0, 128,
	129, 130, 131, 132, 0, 133, 134, 137, 135, 0,
	136, 0, 215, 138, 216, 139, 140, 0, 0, 0,
	0, 0, 141, 217, 0, 142, 0, 218, 143, 144,
	0, 219, 145, 220, 0, 146, 147, 148, 221, 149,
	150, 0, 152, 153, 151, 154, 0, 155, 0, 156,
	157, 222, 158, 0, 244, 159, 160, 0, 161, 162,
	0, 163, 164, 0, 165, 223, 166, 0, 167, 168,
	170, 224, 169, 225, 0, 0, 171, 172, 0, 226,
	227, 228, 0, 0, 173, 229, 230, 0, 174, 175,
	176, 177, 0, 0, 178, 179, 180, 0, 0, 181,
	182, 183, 231, 232, 85, 184, 0, 0, 0, 0,
	185, 186, 187, 188, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 92,
	189, 190, 191, 93, 192, 193, 0, 94, 194, 195,
	95, 0, 0, 196, 197, 198, 0, 199, 0, 0,
	0, 96, 97, 98, 0, 99, 0, 100, 0, 0,
	101, 102, 0, 0, 0, 0, 0, 0, 103, 104,
	105, 106, 200, 107, 201, 202, 0, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 203,
	112, 204, 0, 0, 113, 114, 205, 115, 0, 116,
	0, 0, 0, 0, 117, 206, 0, 207, 0, 118,
	119, 316, 209, 0, 0, 120, 0, 0, 121, 210,
	211, 212, 0, 213, 0, 0, 122, 0, 123, 124,
	0, 0, 214, 0, 125, 0, 0, 126, 0, 0,
	127, 0, 128, 129, 130, 131, 132, 0, 133, 134,
	137, 135, 0, 136, 0, 215, 138, 216, 139, 140,
	0, 0, 0, 0, 0, 141, 217, 0, 142, 0,
	218, 143, 144, 0, 219, 145, 220, 0, 146, 147,
	148, 221, 149, 150, 0, 152, 153, 151, 154, 0,
	155, 0, 156, 157, 222, 158, 0, 244, 159, 160,
	0, 161, 162, 0, 163, 164, 0, 165, 223, 166,
	0, 167, 168, 170, 224, 169, 225, 0, 0, 171,
	172, 0, 226, 227, 228, 0, 0, 173, 229, 230,
	0, 174, 175, 176, 177, 0, 0, 178, 179, 180,
	0, 0, 181, 182, 183, 231, 232, 85, 184, 0,
	0, 0, 0, 185, 186, 187, 188, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 189, 190, 191, 93, 192, 193, 0,
	94, 194, 195, 95, 0, 0, 196, 197, 198, 0,
	199, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 200, 107, 201, 202, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 203, 112, 204, 0, 0, 113, 114, 205,
	115, 0, 116, 0, 0, 0, 0, 117, 206, 0,
	207, 0, 118, 119, 314, 209, 0, 0, 120, 0,
	0, 121, 210, 211, 212, 0, 213, 0, 0, 122,
	0, 123, 124, 0, 0, 214, 0, 125, 0, 0,
	126, 0, 0, 127, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 137, 135, 0, 136, 0, 215, 138,
	216, 139, 140, 0, 0, 0, 0, 0, 141, 217,
	0, 142, 0, 218, 143, 144, 0, 219, 145, 220,
	0, 146, 147, 148, 221, 149, 150, 0, 152, 153,
	151, 154, 0, 155, 0, 156, 157, 222, 158, 0,
	244, 159, 160, 0, 161, 162, 0, 163, 164, 0,
	165, 223, 166, 0, 167, 168, 170, 224, 169, 225,
	0, 0, 171, 172, 0, 226, 227, 228, 0, 0,
	173, 229, 230, 0, 174, 175, 176, 177, 0, 0,
	178, 179, 180, 0, 0, 181, 182, 183, 231, 232,
	85, 184, 0, 0, 0, 0, 185, 186, 187, 188,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 92, 189, 190, 191, 93,
	192, 193, 0, 94, 194, 195, 95, 0, 0, 196,
	197, 198, 0, 199, 0, 0, 0, 96, 97, 98,
	0, 99, 0, 100, 0, 0, 101, 102, 0, 0,
	0, 0, 0, 0, 103, 104, 105, 106, 200, 107,
	201, 202, 0, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 203, 112, 204, 0, 0,
	113, 114, 205, 115, 0, 116, 0, 0, 0, 0,
	117, 206, 0, 207, 0, 118, 119, 306, 209, 0,
	0, 120, 0, 0, 121, 210, 211, 212, 0, 213,
	0, 0, 122, 0, 123, 124, 0, 0, 214, 0,
	125, 0, 0, 126, 0, 0, 127, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 137, 135, 0, 136,
	0, 215, 138, 216, 139, 140, 0, 0, 0, 0,
	0, 141, 217, 0, 142, 0, 218, 143, 144, 0,
	219, 145, 220, 0, 146, 147, 148, 221, 149, 150,
	0, 152, 153, 151, 154, 0, 155, 0, 156, 157,
	222, 158, 0, 244, 159, 160, 0, 161, 162, 0,
	163, 164, 0, 165, 223, 166, 0, 167, 168, 170,
	224, 169, 225, 0, 0, 171, 172, 0, 226, 227,
	228, 0, 0, 173, 229, 230, 0, 174, 175, 176,
	177, 0, 0, 178, 179, 180, 0, 0, 181, 182,
	183, 231, 232, 85, 184, 0, 0, 0, 0, 185,
	186, 187, 188, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 189,
	190, 191, 93, 192, 193, 0, 94, 194, 195, 95,
	0, 0, 196, 197, 198, 0, 199, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 200, 107, 201, 202, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 203, 112,
	204, 0, 0, 113, 114, 205, 115, 0, 116, 0,
	0, 0, 0, 117, 206, 0, 207, 0, 118, 119,
	208, 209, 0, 0, 120, 0, 0, 121, 210, 211,
	212, 0, 213, 0, 0, 122, 0, 123, 124, 0,
	0, 214, 0, 125, 0, 0, 126, 0, 0, 127,
	0, 128, 129, 130, 131, 132, 0, 133, 134, 137,
	135, 0, 136, 0, 215, 138, 216, 139, 140, 0,
	0, 0, 0, 0, 141, 217, 0, 142, 0, 218,
	143, 144, 0, 219, 145, 220, 0, 146, 147, 148,
	221, 286, 150, 0, 152, 153, 151, 154, 0, 155,
	0, 156, 157, 222, 158, 0, 244, 159, 160, 0,
	161, 162, 0, 163, 164, 0, 165, 223, 166, 0,
	167, 168, 170, 224, 169, 225, 0, 0, 171, 172,
	0, 226, 227, 228, 0, 0, 173, 229, 230, 0,
	174, 175, 176, 177, 0, 0, 178, 179, 180, 0,
	0, 181, 182, 183, 231, 232, 85, 184, 0, 0,
	0, 0, 185, 186, 187, 188, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 92, 189, 190, 191, 93, 192, 193, 0, 94,
	194, 195, 95, 0, 0, 196, 197, 198, 0, 199,
	0, 0, 0, 96, 97, 98, 0, 99, 0, 100,
	0, 0, 101, 102, 0, 0, 0, 0, 0, 0,
	103, 104, 105, 106, 200, 107, 201, 202, 0, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 203, 112, 204, 0, 0, 113, 114, 205, 115,
	0, 116, 0, 0, 0, 0, 117, 206, 0, 207,
	0, 118, 119, 208, 209, 0, 0, 120, 0, 0,
	121, 210, 211, 212, 0, 213, 0, 0, 122, 0,
	123, 124, 0, 0, 214, 0, 125, 0, 0, 234,
	0, 0, 127, 0, 128, 129, 130, 131, 241, 0,
	133, 134, 137, 135, 0, 136, 0, 215, 138, 216,
	139, 140, 0, 0, 0, 0, 0, 141, 217, 0,
	142, 0, 218, 143, 144, 0, 219, 145, 220, 0,
	146, 147, 148, 221, 149, 150, 0, 152, 153, 151,
	154, 0, 155, 0, 156, 157, 222, 158, 0, 244,
	159, 160, 0, 161, 235, 0, 163, 164, 0, 165,
	223, 166, 0, 167, 168, 170, 224, 169, 225, 0,
	0, 171, 172, 0, 240, 227, 228, 0, 0, 236,
	229, 230, 0, 174, 175, 176, 177, 0, 0, 178,
	179, 180, 0, 0, 181, 182, 183, 231, 232, 85,
	184, 0, 0, 0, 0, 185, 186, 187, 188, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 189, 190, 191, 93, 192,
	193, 0, 94, 194, 195, 95, 0, 0, 196, 197,
	198, 0, 199, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 200, 107, 201,
	202, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 203, 112, 204, 0, 0, 113,
	114, 205, 115, 0, 116, 0, 0, 0, 0, 117,
	206, 0, 207, 0, 118, 119, 208, 209, 0, 0,
	120, 0, 0, 121, 210, 211, 212, 0, 213, 0,
	0, 122, 0, 123, 124, 0, 0, 214, 0, 125,
	0, 0, 126, 0, 0, 127, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 137, 135, 0, 136, 0,
	215, 138, 216, 139, 140, 0, 0, 0, 0, 0,
	141, 217, 0, 142, 0, 218, 143, 0, 0, 219,
	145, 220, 0, 146, 0, 148, 221, 149, 150, 0,
	152, 153, 151, 154, 0, 155, 0, 156, 157, 222,
	0, 0, 244, 159, 160, 0, 161, 162, 0, 163,
	164, 0, 165, 223, 166, 0, 167, 168, 170, 224,
	169, 225, 0, 0, 171, 172, 0, 226, 227, 228,
	0, 0, 173, 229, 230, 0, 174, 175, 176, 177,
	0, 0, 178, 179, 180, 0, 0, 181, 182, 183,
	231, 232, 717, 184, 735, 736, 737, 0, 185, 186,
	187, 188, 0, 0, 738, 0, 0, 0, 0, 0,
	719, 717, 744, 735, 736, 737, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 719,
	718, 744, 0, 0, 0, 0, 732, 0, 717, 0,
	735, 736, 737, 0, 0, 0, 0, 0, 0, 718,
	738, 0, 0, 0, 0, 732, 719, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 718, 0, 0, 0,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 740, 0, 0,
	0, 0, 0, 733, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 745, 733, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 740, 739, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 742, 0,
	0, 739, 0, 0, 0, 0, 0, 734, 0, 0,
	717, 0, 735, 736, 737, 0, 0, 742, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 719, 0,
	744, 0, 0, 0, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 718, 741,
	0, 729, 730, 731, 732, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 0, 0, 0, 0, 741, 1633,
	729, 730, 731, 0, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 0, 0, 0, 0, 0, 1616, 0,
	0, 0, 0, 0, 0, 741, 0, 729, 730, 731,
	0, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	0, 0, 0, 745, 0, 1595, 0, 0, 0, 0,
	717, 0, 735, 736, 737, 743, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 740, 0, 0, 719, 0,
	744, 733, 0, 0, 0, 0, 0, 717, 0, 735,
	736, 737, 0, 0, 0, 0, 0, 0, 718, 738,
	0, 0, 0, 739, 732, 719, 0, 744, 0, 0,
	0, 0, 717, 0, 735, 736, 737, 0, 0, 0,
	0, 0, 0, 0, 738, 718, 0, 0, 0, 0,
	719, 732, 744, 0, 0, 0, 734, 0, 0, 717,
	0, 735, 736, 737, 0, 0, 742, 0, 0, 0,
	718, 738, 0, 0, 0, 0, 732, 719, 0, 744,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 743, 0, 718, 0, 0,
	0, 0, 0, 732, 0, 740, 0, 0, 0, 0,
	745, 733, 0, 0, 0, 0, 0, 741, 0, 729,
	730, 731, 743, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 740, 739, 0, 745, 0, 1590, 733, 0,
	0, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 740, 0, 0,
	739, 0, 745, 733, 0, 0, 734, 0, 0, 717,
	0, 735, 736, 737, 743, 0, 742, 0, 0, 0,
	0, 738, 0, 0, 740, 739, 0, 719, 0, 744,
	733, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 718, 0, 0,
	0, 0, 739, 732, 0, 0, 0, 0, 734, 0,
	0, 0, 0, 0, 0, 0, 0, 741, 742, 729,
	730, 731, 0, 728, 725, 726, 727, 720, 721, 722,
	723, 724, 0, 0, 0, 734, 0, 1586, 0, 0,
	0, 0, 0, 0, 741, 742, 729, 730, 731, 0,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 0,
	0, 0, 745, 0, 1525, 0, 0, 0, 0, 741,
	0, 729, 730, 731, 743, 728, 725, 726, 727, 720,
	721, 722, 723, 724, 740, 0, 0, 0, 0, 1524,
	733, 0, 0, 0, 0, 0, 741, 0, 729, 730,
	731, 0, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 0, 739, 0, 0, 0, 1436, 0, 717, 0,
	735, 736, 737, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 719, 0, 744, 717,
	0, 735, 736, 737, 0, 734, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 742, 718, 719, 0, 744,
	0, 0, 732, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 718, 0, 0,
	0, 0, 0, 732, 717, 0, 735, 736, 737, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 719, 0, 744, 0, 741, 0, 729, 730,
	731, 0, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 745, 718, 0, 0, 0, 1374, 0, 732, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 740, 0, 0, 0, 0, 0, 733,
	0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 740, 0, 0, 0, 0, 0,
	733, 739, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 739, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 734, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 742, 733, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 739, 0, 0,
	0, 0, 0, 717, 0, 735, 736, 737, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 719, 0, 744, 0, 741, 0, 729, 730, 731,
	734, 728, 725, 726, 727, 720, 721, 722, 723, 724,
	742, 718, 0, 0, 0, 1349, 741, 732, 729, 730,
	731, 0, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 0, 0, 0, 0, 0, 994, 0, 0, 717,
	0, 735, 736, 737, 0, 0, 0, 0, 0, 0,
	0, 738, 1219, 0, 1235, 1236, 1237, 719, 0, 744,
	1694, 741, 0, 729, 730, 731, 0, 728, 725, 726,
	727, 720, 721, 722, 723, 724, 745, 718, 0, 1420,
	0, 0, 0, 732, 0, 0, 0, 717, 743, 735,
	736, 737, 0, 0, 0, 0, 1232, 0, 740, 738,
	0, 0, 0, 900, 733, 719, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 718, 739, 1249, 0, 0,
	1248, 732, 0, 0, 0, 0, 0, 0, 1693, 0,
	0, 0, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 1239, 901, 0, 0, 734,
	0, 0, 0, 0, 740, 0, 0, 1238, 0, 742,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 0, 0, 0, 0, 0, 0,
	745, 0, 739, 0, 0, 747, 0, 0, 0, 0,
	0, 717, 743, 735, 736, 737, 0, 0, 0, 0,
	0, 0, 740, 738, 0, 0, 746, 0, 733, 719,
	741, 744, 729, 730, 731, 734, 728, 725, 726, 727,
	720, 721, 722, 723, 724, 742, 0, 0, 1234, 718,
	739, 0, 0, 0, 0, 732, 0, 717, 0, 735,
	736, 737, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 719, 0, 744, 0, 0,
	0, 0, 0, 734, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 718, 741, 0, 729, 730,
	731, 732, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 1229, 1230, 1231, 745, 1228, 1225, 1226, 1227, 1220,
	1221, 1222, 1223, 1224, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740, 0, 0, 0,
	0, 0, 733, 0, 741, 0, 729, 730, 731, 0,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 0,
	745, 0, 0, 0, 739, 0, 0, 0, 0, 0,
	0, 717, 743, 735, 736, 737, 0, 0, 0, 0,
	0, 0, 740, 738, 0, 0, 0, 0, 733, 719,
	0, 744, 0, 0, 0, 0, 0, 734, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 718,
	739, 281, 0, 0, 0, 732, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 717, 0, 735,
	736, 737, 0, 734, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 742, 0, 719, 0, 744, 741, 0,
	729, 730, 731, 0, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 0, 745, 718, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 717, 743, 735, 736, 737,
	0, 0, 0, 0, 0, 0, 740, 738, 0, 0,
	1250, 0, 733, 719, 741, 744, 729, 730, 731, 0,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 0,
	0, 0, 0, 718, 739, 0, 0, 0, 1255, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	745, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 717, 743, 735, 736, 737, 0, 734, 0, 0,
	0, 0, 740, 738, 0, 0, 0, 742, 733, 719,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1368, 0, 0, 0, 0, 0, 745, 718,
	739, 0, 0, 0, 0, 732, 0, 0, 0, 717,
	743, 735, 736, 737, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 0, 733, 719, 741, 744,
	729, 730, 731, 734, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 742, 0, 0, 0, 718, 739, 0,
	0, 0, 0, 732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 717, 743, 735, 736, 737,
	0, 734, 0, 0, 0, 0, 740, 738, 0, 0,
	1212, 742, 733, 719, 741, 744, 729, 730, 731, 0,
	728, 725, 726, 727, 720, 721, 722, 723, 724, 0,
	0, 0, 745, 718, 739, 0, 0, 0, 0, 732,
	0, 0, 0, 717, 1217, 735, 736, 737, 0, 0,
	0, 0, 0, 0, 740, 738, 0, 0, 0, 0,
	733, 719, 741, 744, 729, 730, 731, 734, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 742, 0, 0,
	1219, 718, 1235, 1236, 1237, 0, 0, 732, 0, 0,
	0, 0, 1343, 0, 0, 0, 0, 0, 745, 1219,
	0, 1235, 1236, 1237, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 734, 0, 0, 0, 0,
	740, 0, 0, 0, 1232, 742, 733, 0, 741, 0,
	729, 730, 731, 0, 728, 725, 726, 727, 720, 721,
	722, 723, 724, 1232, 0, 0, 745, 0, 739, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 740, 0,
	0, 0, 0, 0, 733, 0, 741, 0, 729, 730,
	731, 734, 728, 725, 726, 727, 720, 721, 722, 723,
	724, 742, 0, 0, 0, 1238, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 0, 0, 1238, 0, 0, 0, 0, 928,
	944, 920, 936, 935, 0, 0, 922, 921, 0, 734,
	1233, 946, 945, 0, 0, 0, 0, 0, 0, 742,
	0, 0, 741, 0, 729, 730, 731, 0, 728, 725,
	726, 727, 720, 721, 722, 723, 724, 0, 0, 0,
	941, 0, 933, 932, 0, 0, 1234, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 930, 1234, 0, 0, 0, 0,
	741, 0, 729, 730, 731, 0, 728, 725, 726, 727,
	720, 721, 722, 723, 724, 0, 0, 924, 925, 926,
	0, 587, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1229,
	1230, 1231, 0, 1228, 1225, 1226, 1227, 1220, 1221, 1222,
	1223, 1224, 0, 0, 0, 934, 0, 0, 1229, 1230,
	1231, 0, 1228, 1225, 1226, 1227, 1220, 1221, 1222, 1223,
	1224, 0, 0, 0, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 948, 0, 0, 0, 0, 0, 923, 0,
	0, 942, 943, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 947,
}
var sqlPact = [...]int{

	178, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 678, -1000, -1000, -1000, 520, 606, 42, 790, 790,
	14949, -1000, -1000, 17622, 2412, 341, 361, 341, 341, 368,
	14949, 443, 526, 112, -1000, 783, -1, 17379, 13734, 1111,
	-9, 13248, 223, 178, 13491, 13734, 17136, 963, 900, 899,
	13248, 16893, 16650, 16407, -1000, 9015, -1000, -1000, -1000, -1000,
	737, -1000, -11, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 730, -1000, 13734, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 16164, 15921, 680, -1000, -1000, 414,
	269, 1128, -1000, 4, -1000, -1000, -1000, 962, -1000, 729,
	961, 959, 957, 956, 268, 692, -1000, 403, 680, -1000,
	680, -1000, -1000, -1000, 437, 14949, -1000, 13248, -1000, 15678,
	915, 15435, -1000, 783, -1000, -1000, -1000, 775, 1104, 1104,
	1104, 1138, 81, 77, 112, -21, 13734, -1000, 224, -21,
	6708, 6708, -1000, -1000, 223, -1000, 236, 11537, -2, -1000,
	6453, -1000, 608, 1025, 569, 566, 1013, -118, 13248, 13734,
	13734, 495, 15192, -1000, 1009, 96, 1006, -1000, -31, 1003,
	-1000, -42, -1000, -1000, -1000, -1000, -1000, -1000, 223, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 11790, 1016, 11790, -1000, -1000, 1182, -1000, -1000,
	-13, -14, 845, 910, 9523, 9270, 1063, 765, -1000, -1000,
	-1000, -4, 3887, 13734, 969, 11790, 13734, 13734, 13734, -1000,
	13734, -1000, 841, -1000, 13734, -1000, -17, -18, -1000, 14949,
	-1000, 97, -1000, 222, 799, 14706, 1030, 781, -1000, 775,
	-1000, 693, 835, 7236, 8001, 112, -1000, -1000, 112, 112,
	8001, -1000, -1000, 13734, -21, 1165, 13734, 73, -1000, 19221,
	-1000, -1000, 8001, 8001, 8001, 8001, 8001, 660, -1000, -1000,
	-1000, 4650, -1000, -1000, -2, 221, 99, -1000, -1000, 219,
	-2, -1000, -1000, -1000, -1000, 218, 1268, 314, -1000, -1000,
	-1000, 8001, 274, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 968, 215, 210, -1000, -1000, -1000, -1000, 206,
	205, 203, 202, 201, 200, 195, 193, 192, 190, 189,
	188, 184, 612, -1000, 293, -1000, -1000, 293, 293, -1000,
	159, 159, 171, -1000, -1000, -1000, 159, -1000, -1000, -1000,
	258, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 182, 73,
	-1000, -1000, -1000, 13734, -2, -1000, -1000, -1000, 8001, 3633,
	-43, -1000, 19723, -1000, -37, 586, -1000, 12762, 1097, 1075,
	1083, 13248, 435, 433, 13734, 13734, 281, 79, 1155, 79,
	11031, -1000, 13734, 13734, -1000, 13734, -1000, -1000, 13734, 13734,
	13734, -1, 12276, 432, -32, 12033, 13734, -1000, -20, -1000,
	-1000, 955, 338, 625, 896, 651, -1000, -1000, -1000, -1000,
	-26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1222, -1000, -1000, -1000, -1000, 1244, -26, -1000, -1000,
	-1000, -1000, -1000, 1265, -1000, -1000, -1000, -1000, 3887, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13734, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 625, 896, -1000, -1000, 13248, 12519, 1002,
	728, 776, -1000, -1000, 252, 1001, -1000, -1000, -1000, -1000,
	19723, -1000, 19723, 519, 905, -1000, 905, -27, -1000, 19107,
	-1000, 180, -48, -1000, 281, 6708, 10778, 19878, 13734, 449,
	8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001,
	8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001, 8001,
	8001, 720, 430, 755, 647, 151, 3887, -1000, 1214, 1214,
	1214, 1900, 1900, 162, -22, 18789, -30, -2, -1000, -1000,
	5925, 5670, -2, 4140, -1000, 457, 1240, 291, 19723, 974,
	932, 177, 74, 71, 8001, 713, 8001, 8256, 8001, 8001,
	4905, 8001, 8001, 8001, 8001, 8001, 8001, -1000, 176, -1000,
	-1000, -1000, -1000, 1239, -1000, -1000, 1237, -1000, 441, 1235,
	281, 69, -1000, 2294, -1000, -1000, 6453, -1000, 531, 13734,
	13734, 13734, -1000, -1000, 773, 14463, -1000, 19878, 13734, -1000,
	175, 174, 870, 863, 13734, 13734, 14220, 13977, 13734, 570,
	13734, 13734, 530, -1000, 560, 8001, 711, -1000, 10272, 297,
	13734, 711, 72, -1000, -1000, -1000, 249, 13734, -1000, -1000,
	-1000, 96, -1000, -31, -1000, -1000, 13734, 12033, -32, -33,
	-1000, -1000, 13734, 896, -1000, -1000, -1000, 511, -1000, 605,
	-1000, 9776, -1000, -1000, -1000, 457, -1000, -40, -1000, -1000,
	-1000, -1000, 68, -34, -1000, -1000, -1000, -1000, 13734, 163,
	13734, 13734, 1000, 1260, 13734, -1000, -1000, -1000, 8001, -1000,
	-1000, -1000, -1, 13734, -1000, 931, -1000, -35, 1011, -122,
	13005, -1000, 10019, -1000, 1188, -1000, -1000, -1000, -1000, 66,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	171, 612, 159, 159, 159, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 258, -1000, 293, 293, 293, -1000, -1000, -1000,
	267, 439, 439, 1204, 1204, 1204, 2017, 2017, 339, 2009,
	1705, 1705, 1705, 2318, 427, 427, 1705, 1705, 1705, 1900,
	2972, 1875, 8001, 426, 646, 151, 8001, -1000, 684, -1000,
	-1000, -1000, 954, 150, 8256, 8256, -1000, -1000, -1000, 4650,
	-1000, -1000, 144, 8001, -1000, 8001, -49, -61, -1000, 19723,
	-1000, -52, -1000, -1000, -10, 8001, 8001, 8001, 67, -1000,
	425, -1000, 410, 406, 399, -1000, 143, 61, 453, -1000,
	8001, 652, 136, 129, 8001, -1000, -1000, 19675, 59, 948,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 57, 19561, 55,
	19072, -1000, 8256, 8256, 8256, 4650, 126, 52, 19059, -128,
	19495, 6963, 6963, 6963, 49, 19447, 8001, -128, 2866, 2671,
	2642, -53, -57, -59, 1233, -64, 45, 263, 43, 931,
	-1000, -1000, 8001, -1000, -1000, -1000, 394, 378, 999, -1000,
	772, -1000, 516, 8001, 13734, 124, 121, 617, -1000, 998,
	679, 983, 679, -1000, -37, 562, -1000, -1000, 377, -1000,
	6708, 19723, 560, 1093, -65, -1000, -1000, -1000, 560, 281,
	11031, 6453, -69, -1000, -40, -1000, -40, -1000, -1000, -1000,
	-1000, -1000, -1000, 13734, -1000, 12519, 117, 13734, 115, 113,
	13734, -1000, 1030, -1000, 39, -1000, -1000, -1000, -1000, -1000,
	923, 1137, 10778, 893, 889, 10778, 994, 648, 648, 648,
	-1000, 13005, 3366, -1000, -1000, 13734, 110, 10525, 38, 1011,
	230, 228, -1000, 1232, 8001, 1875, 8001, 8256, 8256, -1000,
	1875, -1000, -1000, -1000, -1000, 944, 109, 8001, 19878, 19760,
	3056, -75, 5415, -41, 18768, 8001, -1000, -1000, 99, -1000,
	37, 6198, -1000, 19267, 0, 0, -1000, 825, 707, 610,
	478, 1227, 1252, 1014, -1000, 8001, 19381, -1000, 11284, 286,
	670, 18609, 19878, -1000, 8001, -1000, 943, 8001, -1000, 19878,
	8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256,
	8256, 8256, 8256, 8256, 8256, 8256, 8256, 8256, 830, 8256,
	1210, 1210, 1210, -74, 5160, -1000, 967, 943, 8001, 8001,
	19878, 33, 32, 30, -1000, 8001, -128, 8001, 8001, 8001,
	-1000, -1000, -1000, 29, -1000, 1226, -1000, -1000, -1000, 923,
	18834, 13734, 13734, 13734, 982, 1330, -1000, 18499, -77, 13734,
	13734, -1000, 843, 941, 313, 13734, -1000, 13734, -1000, 13734,
	13734, 13734, 13734, -76, -1000, 152, -1, 13734, -1000, 560,
	-1000, -1000, 247, -1000, -1000, 8762, 108, 12519, 8762, 704,
	-1000, -1000, 277, 8001, 8001, 1011, 10778, 10778, 1635, 885,
	10778, -1000, -1000, -1000, -1000, -1000, -1000, 861, 105, 13734,
	13005, 336, 1224, 27, 1140, 1875, 3034, 419, 8001, 19878,
	19609, -79, -1000, 8001, 8001, -1000, -84, -1000, 8001, -1000,
	19723, -1000, 1248, 8001, 26, 25, 22, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 19, -1000, -1000, 19723, 8001, -1000,
	-1000, 17865, 8001, 18, -1000, 16, 19723, 967, 19723, -1000,
	497, 497, 1210, 1210, 1210, 733, 733, 398, 839, 307,
	307, 307, 812, 436, 436, 307, 307, 307, 942, 814,
	104, 19779, 8001, -85, -1000, -1000, -1000, 19723, 19723, 13,
	-1000, -1000, -1000, -128, 2482, 18472, 18447, -1000, 12, 277,
	-1000, -1000, -1000, -1000, 13734, -1000, 13734, -1000, 13734, 769,
	-1000, -1000, 859, 103, 8256, 13734, -1000, 624, -89, -90,
	763, -1000, 749, 8001, -1000, 19878, 679, 679, -1000, 374,
	367, -1000, 1039, 8762, 1074, -1000, -1000, -1000, 98, -91,
	-1000, 185, 1109, 8001, -1000, -1000, 95, 8762, 11, -95,
	13734, -1000, 13734, 19723, -128, -1000, 1635, -1000, 90, 8001,
	10778, -1000, -145, -1000, 111, -1000, 13734, -96, -1000, -1000,
	226, 186, -1000, 8001, 8001, 19609, -102, -1000, 19878, 1875,
	1875, -1000, 18420, -1000, 19267, -1000, -1000, -1000, -1000, 19723,
	633, -1000, 18310, -1000, -1000, -1000, 8256, 938, 88, 19878,
	18148, -1000, -1000, 8001, -1000, -1000, -1000, -1000, -1000, 1159,
	-1000, -1000, -1000, 8001, 19779, 83, -1000, 87, -1000, -1000,
	-1000, 572, -1000, -1000, 19723, 1115, -1000, -1000, 13734, 13734,
	396, -108, 13734, -1000, -1000, 4395, 624, 8762, 1114, -2,
	13734, 1114, 18121, 4140, -112, -1000, 624, 86, -86, -1000,
	1154, -1000, 13734, 19723, -1000, 861, -1000, 3887, -119, -1000,
	-1000, -1000, 1875, 1875, -1000, -1000, -1000, 9, 670, 1127,
	-1000, 616, 8256, 19878, -120, -1000, 18102, -1000, 2942, 828,
	13734, 13734, 13734, 302, 13734, -1000, -1000, 468, -1000, 281,
	-1000, -1000, -1000, -1000, -1000, -1000, 1109, -10, 624, -1000,
	8762, 13734, 84, -129, -1000, -1000, -1000, -1000, 637, 8001,
	616, -130, -1000, -1000, -1000, 682, 590, -131, -135, 83,
	-1000, 8001, -1000, 11031, -1000, 1114, 6, -1000, -137, -1000,
	-1000, -1000, 1, 7746, 7746, -128, -1000, -1000, 700, 698,
	473, -1000, -1000, -1000, -1000, -1000, 828, 19723, -109, -1000,
	-1000, 624, -1000, -1000, -1000, 8509, 717, 507, 18993, -1000,
	-1000, 1045, -1000, 319, 805, 805, 682, -1000, -1000, 1130,
	-1000, -1000, -1000, -1000, -1000, -1000, 1201, -1000, -1000, 840,
	-1000, -1000, 7491, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1457, 1456, 1154, 1455, 1453, 1451, 1450, 1448, 80,
	1445, 1438, 98, 1437, 78, 1432, 1429, 1428, 1427, 55,
	1424, 1423, 1421, 1419, 1417, 71, 23, 133, 1897, 122,
	1416, 1415, 1414, 10, 92, 88, 1413, 52, 49, 86,
	110, 1551, 53, 1411, 126, 17, 12, 30, 79, 132,
	123, 113, 1409, 1408, 1407, 42, 1405, 1402, 1400, 11,
	61, 31, 1398, 18, 57, 1397, 1396, 84, 1394, 117,
	100, 41, 102, 40, 1393, 58, 9, 50, 1391, 26,
	1390, 32, 62, 124, 1389, 46, 144, 45, 21, 56,
	1388, 1385, 1384, 1383, 64, 69, 37, 1382, 1381, 60,
	1380, 118, 120, 1379, 1377, 119, 1374, 97, 1370, 563,
	1368, 1367, 517, 3, 38, 51, 27, 96, 95, 33,
	1365, 14, 1364, 0, 895, 765, 1361, 44, 34, 65,
	36, 39, 22, 1360, 90, 1359, 1357, 1356, 1353, 1342,
	66, 1341, 59, 125, 35, 47, 77, 25, 54, 73,
	101, 131, 94, 1340, 111, 1335, 28, 1334, 1333, 444,
	72, 1331, 1330, 1329, 333, 308, 241, 112, 1318, 1317,
	222, 179, 1316, 1315, 68, 1310, 1309, 128, 1308, 121,
	16, 1305, 104, 1303, 74, 1302, 900, 48, 43, 1301,
	115, 63, 1300, 1299, 1298, 24, 2, 8, 5, 6,
	4, 15, 13, 1297, 1295, 116, 75, 1294, 134, 1293,
	1290, 29, 1289, 1288, 19, 1287, 20, 1284, 7, 1,
	1283, 127, 1282, 81, 1278, 1189, 1277, 130, 1276, 1274,
	1183, 67,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	72, 72, 71, 71, 74, 74, 11, 11, 12, 12,
	12, 12, 155, 155, 154, 13, 18, 221, 221, 221,
	225, 225, 226, 226, 227, 227, 227, 227, 227, 227,
	227, 223, 223, 21, 21, 21, 21, 109, 109, 111,
	111, 111, 111, 40, 108, 108, 108, 108, 110, 110,
	110, 110, 179, 177, 177, 184, 184, 184, 52, 52,
	52, 52, 52, 53, 53, 53, 176, 176, 176, 176,
	185, 185, 185, 185, 185, 185, 54, 54, 54, 183,
	183, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 178, 178, 222, 222, 224,
	224, 8, 8, 55, 55, 56, 56, 115, 115, 115,
	114, 193, 193, 194, 194, 194, 195, 195, 195, 195,
	195, 195, 195, 192, 192, 190, 190, 191, 191, 191,
	191, 228, 228, 113, 113, 59, 59, 198, 198, 198,
	198, 196, 196, 196, 196, 196, 199, 197, 200, 200,
	200, 200, 200, 143, 143, 143, 24, 7, 7, 98,
	98, 63, 63, 147, 147, 147, 46, 46, 33, 33,
	33, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	99, 99, 100, 100, 16, 20, 23, 23, 23, 23,
	23, 230, 230, 43, 43, 43, 43, 44, 44, 112,
	112, 112, 112, 112, 39, 6, 6, 38, 38, 14,
	14, 49, 49, 105, 105, 105, 107, 107, 107, 106,
	106, 106, 85, 85, 25, 76, 76, 77, 77, 153,
	78, 78, 19, 19, 28, 28, 26, 26, 26, 26,
	26, 26, 27, 27, 29, 29, 29, 29, 29, 29,
	29, 206, 206, 206, 208, 208, 205, 15, 15, 15,
	15, 207, 207, 229, 229, 86, 86, 86, 58, 57,
	57, 61, 61, 60, 62, 62, 146, 83, 83, 83,
	83, 101, 102, 102, 103, 103, 104, 104, 82, 82,
	130, 130, 30, 30, 67, 67, 68, 68, 121, 121,
	122, 122, 120, 120, 120, 148, 148, 148, 148, 149,
	149, 149, 149, 149, 149, 144, 144, 144, 144, 145,
	145, 89, 89, 89, 89, 87, 87, 88, 88, 150,
	150, 150, 150, 84, 84, 151, 151, 151, 116, 116,
	156, 156, 156, 66, 66, 66, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 158, 158, 158, 158,
	160, 160, 160, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 161, 161, 168, 168,
	169, 169, 170, 171, 162, 162, 163, 163, 164, 165,
	172, 172, 172, 172, 174, 174, 166, 166, 166, 166,
	167, 95, 95, 95, 95, 95, 95, 95, 95, 95,
	95, 95, 95, 95, 95, 96, 96, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 124, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 201, 201,
	201, 201, 201, 201, 201, 203, 203, 204, 204, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 209, 209, 210, 210, 211, 211,
	212, 212, 214, 215, 215, 215, 216, 220, 220, 213,
	213, 217, 217, 217, 218, 218, 219, 219, 219, 219,
	219, 134, 134, 134, 135, 135, 136, 73, 73, 132,
	132, 131, 131, 131, 133, 133, 90, 173, 173, 173,
	173, 173, 173, 173, 91, 91, 97, 92, 92, 93,
	93, 93, 93, 93, 93, 127, 128, 94, 94, 94,
	129, 129, 137, 141, 141, 140, 139, 139, 138, 138,
	119, 119, 119, 119, 118, 117, 79, 79, 231, 231,
	142, 142, 80, 80, 81, 75, 75, 152, 152, 152,
	152, 69, 69, 51, 51, 70, 70, 47, 47, 50,
	48, 48, 48, 48, 64, 64, 65, 65, 45, 45,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 175, 175, 175, 41, 41, 41, 42, 42, 181,
	181, 181, 182, 182, 182, 182, 180, 180, 180, 180,
	180, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 187, 187, 187,
	187, 187, 187, 187, 187, 187, 187, 187, 187, 187,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 3, 5,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	3, 2, 0, 3, 1, 2, 2, 1, 1, 2,
	4, 2, 5, 6, 7, 3, 1, 4, 5, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 10, 13, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 7,
	7, 1, 3, 1, 4, 2, 8, 5, 0, 4,
	3, 0, 2, 0, 8, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 1, 1, 8, 8, 1, 2, 4, 4,
	4, 2, 2, 3, 1, 3, 6, 1, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 2, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 2, 2, 1, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -207, 83, 90, 103, 190,
	197, -26, -28, 204, 205, 29, 212, 52, 86, 192,
	187, 231, 58, -206, -29, -27, 276, 252, 258, 200,
	-30, 218, 245, 279, 218, 70, 114, 78, 118, 239,
	238, 70, 114, 218, -12, 276, -19, -14, -25, -9,
	-225, 18, -226, -227, 58, 83, 103, 200, 118, 78,
	238, -225, -44, 197, -41, 4, -186, -188, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 94, 95, 97, 99, 104, 109, 110,
	115, 118, 126, 128, 129, 134, 137, 140, 142, 143,
	144, 145, 146, 148, 149, 151, 153, 150, 156, 158,
	159, 165, 168, 171, 172, 175, 178, 179, 180, 182,
	183, 187, 185, 186, 188, 190, 192, 193, 195, 198,
	199, 201, 202, 204, 205, 207, 209, 211, 212, 215,
	213, 219, 220, 227, 231, 232, 233, 234, 237, 238,
	239, 242, 243, 244, 248, 253, 254, 255, 256, 30,
	31, 32, 34, 35, 38, 39, 43, 44, 45, 47,
	72, 74, 75, 89, 91, 96, 105, 107, 111, 112,
	119, 120, 121, 123, 132, 155, 157, 166, 170, 174,
	176, 181, 194, 208, 214, 216, 222, 223, 224, 228,
	229, 245, 246, -109, 137, 202, 227, -110, -108, -179,
	222, 146, -71, -41, 197, 4, 70, 51, 71, 104,
	114, 115, 129, 219, 222, 227, 18, 58, -230, 227,
	227, -230, -230, -43, 227, 225, -44, -229, 218, 218,
	-98, 70, 236, -27, -29, -28, -60, -61, 235, 122,
	88, 164, -26, -28, -206, -208, 182, -205, -41, -208,
	-57, -58, 18, 80, 280, -150, -47, 162, -41, -81,
	276, -3, -150, 111, -41, -50, 111, -47, 101, 124,
	124, -151, -150, -41, 111, -51, 111, -50, -72, 111,
	-71, -155, -154, -182, 4, -186, -188, -187, 245, 49,
	59, 102, 117, 125, 127, 133, 135, 147, 167, 169,
	191, 206, 161, 280, 161, -41, -109, 45, -109, -111,
	-39, -40, 126, 178, 225, 261, 101, 256, -54, 5,
	76, -74, 278, 101, -222, 161, 101, 101, 101, -178,
	101, 256, 126, 178, 218, -112, -39, -40, -112, 225,
	-44, -84, -150, -71, 111, 114, -41, 111, -60, -61,
	-83, -101, -102, 136, 160, -86, 18, 80, -86, -86,
	37, 277, 277, 280, -208, -65, 276, -75, -152, -123,
	269, -125, 267, 268, 273, 152, 257, -134, -47, -126,
	9, 276, -137, -203, -28, 89, 24, -135, -136, 194,
	-41, 7, 8, 5, 6, -45, -158, -167, 230, 92,
	154, 41, -201, -202, 4, -186, -181, -159, -169, -163,
	-166, 123, 49, 63, 66, 64, 67, 203, 240, 42,
	91, 170, 174, 216, 228, 229, 111, 155, 112, 47,
	105, 132, 82, 31, 32, 34, 35, 43, 44, 72,
	74, 75, 96, 119, 120, 121, 157, 181, 208, 214,
	223, 224, 246, -187, -170, -171, -164, -165, -172, -75,
	-81, 269, -47, 276, -79, -119, -118, -117, 274, 278,
	-80, -142, -123, 76, -35, 185, -34, 17, 19, 83,
	243, 89, 185, 185, 89, 281, -151, -49, -47, -49,
	204, -41, 25, 89, -37, 280, 40, 188, 89, 280,
	89, 277, 280, -221, -70, 218, 70, -48, -41, 269,
	-227, -221, 25, 280, 280, 134, -53, 140, 151, 109,
	-177, 76, -184, -176, -143, 9, 230, 92, 161, -183,
	8, 268, -175, -182, 5, 7, 267, -177, 76, 61,
	-185, 5, 4, -167, -143, 76, 137, 123, 278, -180,
	4, -186, -188, -187, -189, 18, 20, 21, 22, 23,
	24, 25, 26, 27, 36, 41, 42, 46, 48, 50,
	56, 58, 62, 63, 64, 65, 66, 67, 76, 77,
	79, 80, 81, 84, 86, 88, 92, 93, 98, 100,
	101, 103, 106, 108, 113, 114, 116, 122, 124, 130,
	131, 136, 138, 139, 152, 154, 160, 161, 162, 163,
	164, 173, 177, 184, 189, 200, 203, 210, 217, 218,
	221, 225, 226, 230, 235, 236, 240, 241, 247, 249,
	250, 251, 252, -179, -224, 98, -221, -179, -179, -179,
	-179, 134, -179, 280, 280, -44, -37, 280, 276, 152,
	-42, 111, -41, -38, 85, 152, -83, -102, -101, -103,
	-123, 18, -123, -125, -27, -27, -27, -62, -146, -123,
	-205, 25, -64, -41, -67, 280, 101, 10, 48, 28,
	267, 268, 269, 270, 271, 264, 265, 266, 263, 259,
	260, 261, 54, 141, 196, 12, 13, 14, 22, 163,
	135, 257, 206, 125, 30, 113, 25, 4, -123, -123,
	-123, -123, -123, 169, -28, -123, -73, -79, -28, -131,
	274, 276, -79, 276, 5, 5, 276, -138, -123, -209,
	253, 98, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 176, -174, 248,
	-174, -174, -160, 276, -160, -161, 276, -160, 258, 276,
	-67, -47, -119, -123, -180, 269, 280, 277, 280, 225,
	-99, 56, 50, -114, 111, 50, -190, -41, 56, -191,
	46, 236, 177, 100, -99, 56, -99, 56, 56, -150,
	225, 225, -50, -41, -116, 250, -105, -19, 276, 76,
	25, -105, -76, -77, -153, -78, -47, 276, -41, -41,
	-50, -51, -71, -72, -12, -154, 225, 280, -70, -64,
	-118, -117, 101, 227, -40, -39, -52, 180, 209, 186,
	201, 280, 8, 7, 7, 5, -180, -223, -41, -40,
	-39, -150, -55, -56, -115, -114, -192, -190, 114, 236,
	89, 161, 152, 261, 89, -104, 194, 195, 280, -33,
	26, 79, 276, 280, 277, -116, -152, -68, -148, -150,
	-28, -149, 276, -156, -157, -159, -168, -162, -166, -167,
	33, 39, 38, 220, 119, 120, 121, 208, 31, 181,
	96, 82, 75, 74, 157, 35, 34, -170, -171, -164,
	-165, 72, 223, 224, 32, 44, 43, 246, 214, -71,
	222, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, -123, -123, -123, -123, -123, -123, -123, -123,
	-123, -123, 135, 206, 30, 113, 225, 154, 152, 230,
	92, 237, 80, 158, -231, 217, 27, -129, -28, 276,
	-180, -134, 194, 276, 277, 280, -73, -133, 275, -123,
	-131, -73, 277, 277, -73, 247, 18, 80, 269, -95,
	255, 144, 73, 110, 143, -96, 199, 7, -141, -140,
	249, -210, 94, 106, 276, 277, 277, -123, -90, -173,
	4, 255, 144, 73, 110, 143, 199, -91, -123, -92,
	-124, -125, 267, 268, 273, 276, 194, -93, -123, -73,
	-123, 36, 131, 226, -94, -123, 101, -73, -123, -123,
	-123, -73, -73, -73, 276, 7, 7, 222, 7, -116,
	277, 275, 284, -142, -34, -47, -41, -41, 152, -114,
	111, -156, -41, 276, 276, 128, 128, -41, -41, 111,
	-41, 111, -41, -41, -35, 185, -41, -41, 185, -85,
	189, -123, -107, 161, -69, -47, 245, -41, -107, -67,
	280, 261, -69, -37, -223, -48, -223, -39, 234, 53,
	180, -184, -95, 280, 277, 280, -42, 114, -71, -47,
	89, 5, -41, -146, -15, -19, -14, -25, -9, -41,
	-82, 106, 280, 59, -89, 127, 147, 102, 133, 191,
	117, -120, 281, -145, -144, 25, -41, -28, -149, -148,
	-66, 24, -95, 276, 256, -123, 225, -231, 217, -129,
	-123, 154, 230, 92, 237, 80, 158, 101, 276, -124,
	-124, -73, 276, -73, -123, 280, 275, 275, 280, 277,
	-61, 280, -60, -123, -73, -73, 277, 225, 225, 225,
	225, 276, 277, -139, -140, 84, -123, -215, 168, 276,
	276, -123, 25, 277, 101, 277, -97, 173, 277, 10,
	267, 268, 269, 270, 271, 264, 265, 266, 263, 259,
	260, 261, 54, 141, 196, 12, 13, 14, 125, 113,
	-124, -124, -124, -73, 276, 277, -127, -128, 101, 98,
	25, -94, -94, -94, 277, 101, -73, 280, 280, 280,
	277, 277, 277, 7, 277, 280, 277, 256, 277, -82,
	-123, 225, 225, 89, 152, -193, -191, -123, -64, 276,
	276, -32, 83, 204, -100, 89, -37, 89, -37, 225,
	-99, 56, 225, -75, -85, 55, 277, 280, -85, -116,
	-77, -142, 277, -41, -115, 276, -42, 276, 276, -41,
	-38, 277, -130, 108, 37, -148, 127, 127, -148, -89,
	127, -87, 167, -87, -87, -145, -180, 282, -41, 276,
	277, 274, 274, 7, -123, -123, -124, -124, 101, 276,
	-123, -132, -156, 22, 22, 277, -73, 277, 280, 277,
	-123, -131, 277, 247, -61, -61, -61, 144, 110, 143,
	-96, 143, -96, -96, 7, 5, 86, -123, 221, -216,
	-41, 276, 250, -60, 277, -156, -123, -127, -123, -156,
	-124, -124, -124, -124, -124, -124, -124, -124, -124, -124,
	-124, -124, -124, -124, -124, -124, -124, -124, 80, 152,
	158, -124, 280, -73, 277, -128, -127, -123, -123, -156,
	277, 277, 277, -73, -123, -123, -123, 277, 7, -130,
	275, -41, -41, -114, 89, -194, 56, -195, 48, 152,
	154, 236, 177, 46, 76, 184, 277, 277, -64, -64,
	152, 76, 152, 76, 69, 232, -41, -41, -47, -41,
	-41, -41, -106, 276, 161, -19, -47, -85, 261, -63,
	-147, -41, -204, 276, -201, -202, -45, 276, -55, -63,
	161, -211, 251, -123, -73, -148, -148, -88, 241, 161,
	127, -148, -122, -121, 99, 150, 276, -64, -144, 275,
	7, 7, 277, 22, 22, -123, -132, 277, 280, -123,
	-123, 277, -123, 5, -123, 277, 277, 277, 277, -123,
	-220, -41, -123, 277, 277, -128, 101, 80, 158, 276,
	-123, 277, 277, 280, 277, 277, 277, -211, -114, -41,
	-71, 154, 128, 276, -124, -47, -113, -228, 57, 215,
	277, 277, 154, 154, -123, -156, -37, -37, 225, 225,
	81, -63, 56, -81, -28, 276, 277, 280, -46, -79,
	48, -46, -123, 276, -63, 277, 277, -47, -212, -214,
	-41, -88, 276, -123, -148, 280, 283, 261, -64, 277,
	275, 275, -123, -123, 277, -156, 277, -61, -213, 172,
	277, -124, 101, 276, -132, 277, -123, -195, -123, -59,
	276, 276, 184, -36, 48, -41, -41, 238, 153, 277,
	-41, -113, -147, -33, -71, -33, 277, -73, 277, -113,
	276, 280, 25, -64, -121, -180, 277, 277, -61, 37,
	-124, -132, 277, 277, 277, -198, 142, -64, -64, -47,
	-31, 241, -71, 204, -116, -46, -61, -113, -63, -214,
	-216, 277, -217, 179, 195, -73, 277, -196, -199, -197,
	161, 102, 171, 207, 277, 277, -59, -123, -76, -33,
	277, 277, 277, -218, -219, 30, 233, 61, -123, -218,
	-197, 161, -199, 161, 238, 78, -198, -116, -113, -219,
	175, 97, 194, 175, 97, -200, 149, 188, 40, 204,
	-200, -196, 22, 16, 154, 76, -219,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 322, 0, 0,
	0, 292, -2, 0, 0, 252, 0, 252, 252, 256,
	0, 324, 220, 321, -2, 332, 0, 0, 0, 330,
	306, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 245, 822, 258, 734, 735, 736, 751, 752,
	753, 754, 755, 756, 757, 758, 759, 760, 761, 762,
	763, 764, 765, 766, 767, 768, 769, 770, 771, 772,
	773, 774, 775, 776, 777, 778, 779, 780, 781, 782,
	783, 784, 785, 786, 787, 788, 789, 790, 791, 792,
	793, 794, 795, 796, 797, 798, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 823,
	824, 825, 826, 827, 828, 829, 830, 831, 832, 833,
	834, 835, 836, 837, 838, 839, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, 869, 870, 871, 872, 873,
	874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
	884, 885, 886, 887, 888, 889, 890, 891, 892, 893,
	894, 895, 896, 93, 789, 826, 837, 98, 108, 0,
	890, -2, 112, 62, 822, 141, 142, 0, 144, 158,
	0, 0, 0, 156, 0, 0, 153, 0, 263, 251,
	263, 248, 249, 250, 253, 0, 244, 0, 323, 0,
	0, 0, 219, -2, 302, 303, -2, 0, 327, 327,
	327, 0, 0, 303, 0, 311, 812, 314, 717, 312,
	0, 0, 329, 328, 0, 307, 389, 0, 707, 352,
	0, 2, 0, 872, 0, 0, 872, 0, 0, 0,
	0, 0, 395, 54, 872, 45, 872, 703, 58, 872,
	60, 0, 72, 74, 742, 743, 744, 745, 895, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 0, 0, 0, 257, 94, 862, 96, 97,
	99, 100, 0, 0, 0, 0, 0, 0, 111, 136,
	137, 63, 0, 0, 160, 0, 0, 0, 0, 149,
	0, 150, 0, 152, 0, 246, 259, 260, 247, 0,
	255, 45, 393, 0, 872, 738, 268, 872, -2, 0,
	298, 339, 340, 0, 0, 0, 325, 326, 0, 0,
	0, 294, 295, 0, 313, 0, 0, 355, 695, 699,
	700, 477, 0, 0, 0, 0, 0, 0, 556, 557,
	558, 0, 560, 561, 562, 867, 0, 566, 567, 886,
	707, 720, 721, 722, 723, 0, 0, 0, 728, 729,
	730, 679, 605, 576, -2, -2, 718, 416, 417, 418,
	419, -2, 897, 580, 582, 584, 585, 586, 587, 0,
	868, 882, 883, 889, 893, 894, 872, 879, 873, 863,
	870, 878, 772, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 741, 440, 441, 446, 447, 449, 355,
	353, 390, 391, 0, 708, 686, 680, 681, 0, 0,
	0, 692, 690, 691, 22, 241, 24, 0, 241, 241,
	0, 0, 0, 0, 0, 0, 399, 0, 271, 0,
	0, 396, 0, 0, 56, 0, 43, 44, 0, 0,
	0, 322, 0, 0, 77, 0, 768, 705, 710, 713,
	83, 0, 0, 0, 0, 0, 103, 123, 124, 125,
	104, 106, 113, 115, 116, 117, 126, 127, 128, 129,
	213, 0, 215, 139, 140, 731, 0, 105, 107, 109,
	110, 130, 131, 0, 133, 134, 135, 460, 0, 64,
	746, 747, 748, 749, 750, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 143, 145, 0, 157, 146, 147, 148,
	155, 151, 154, 0, 0, 254, 216, 0, 164, 0,
	0, 872, 737, 265, 0, 0, 301, 337, 338, 341,
	344, 345, 342, 477, 308, 309, 310, 333, 334, 230,
	315, 0, 0, 714, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 689, 0, 0, 698, 481, 482,
	483, 504, 505, 0, -2, 637, 0, 563, 564, 565,
	0, 0, -2, 0, 725, 474, 0, 0, 678, 607,
	0, 0, 0, 0, 0, 0, 0, 658, 664, 0,
	0, 0, 0, 0, 0, 0, 0, 430, 443, 454,
	451, 450, 432, 0, 431, 429, 0, 433, 0, 0,
	399, 0, 687, 0, 684, 685, 0, 694, 0, 0,
	0, 0, 240, 26, 872, 0, 36, 0, 0, 186,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 709, 283, 0, 278, 273, 0, 0,
	0, 278, 355, 285, 287, 288, 0, 0, 397, 55,
	704, 45, 61, 59, 67, 73, 0, 0, 78, 79,
	711, 712, 0, 0, 101, 102, 264, 0, 120, 0,
	122, 0, 214, 733, 732, 474, 65, 159, 91, 261,
	262, 394, 0, 163, 165, 167, 168, 169, 738, 0,
	0, 0, 0, 0, 0, 343, 346, 347, 0, 336,
	228, 229, 322, 0, 716, 349, 696, 354, 356, 364,
	380, 367, 0, 478, 405, 406, 407, 408, 409, 474,
	412, 413, 414, 415, 423, 424, 425, 426, 427, 428,
	437, 0, 422, 422, 422, 434, 435, 438, 439, 444,
	445, 456, 457, 458, 455, 455, 455, 452, 453, 479,
	0, 484, 485, 486, 487, 488, 489, 490, 491, 492,
	-2, -2, -2, 496, 497, 498, -2, -2, -2, 502,
	503, -2, 0, 0, 689, 0, 0, 510, 0, 513,
	515, 517, 0, 0, 0, 0, 688, 527, 670, 0,
	697, 512, 0, 0, 559, 0, 0, 0, 643, 637,
	644, 0, -2, 568, 332, 0, 0, 0, 0, 726,
	461, 462, 463, 464, 465, 466, 475, 0, 677, 673,
	0, 615, 0, 0, 0, 581, 583, 0, 0, 0,
	647, 648, 649, 650, 651, 652, 653, 0, 0, 0,
	0, 529, 0, 0, 0, 0, 886, 0, 637, 663,
	0, 0, 0, 0, 0, 637, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 349,
	392, 682, 0, 693, 25, 232, 0, 0, 0, 28,
	872, 172, 0, 0, 0, 0, 0, 243, 37, 872,
	45, 872, 45, 38, 23, 241, 231, 234, 0, 53,
	0, 398, 283, 0, 0, 701, 275, 272, 283, 399,
	0, 0, 0, 57, 75, 706, 76, 95, 118, 119,
	121, 114, 132, 0, 161, 0, 0, 738, 0, 0,
	0, 267, 268, 335, 0, 317, 318, 319, 320, 715,
	351, 0, 0, 0, 0, 0, 0, 386, 386, 386,
	384, 380, 0, 366, 379, 0, 378, -2, 367, 0,
	400, 402, 410, 0, 0, -2, 0, 0, 0, 528,
	-2, 511, 514, 516, 518, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 641, 642, 0, -2,
	0, 0, 331, 332, 332, 332, 574, 0, 0, 0,
	0, 0, 0, 0, 674, 0, 0, 575, 0, 0,
	0, 0, 0, 589, 0, 590, 0, 0, 591, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	531, 532, 533, 0, 0, 592, 661, 662, 0, 0,
	0, 0, 0, 0, 597, 0, 668, 0, 0, 0,
	601, 602, 603, 0, 420, 0, 436, 459, 448, 351,
	0, 0, 0, 0, 0, 170, 185, 0, 0, 0,
	0, 30, 0, 0, 0, 0, 34, 0, 40, 0,
	0, 0, 0, 282, 269, 281, 0, 0, 270, 283,
	286, 289, 0, 92, 166, 0, 0, 164, 0, 0,
	266, 316, 609, 0, 0, 357, 0, 0, 0, 0,
	0, 381, 385, 382, 383, 365, 362, 0, 376, 0,
	369, 0, 0, 0, 480, -2, 0, 0, 0, 0,
	-2, 0, 639, 0, 0, 671, 0, 632, 0, -2,
	638, 645, 569, 0, 0, 0, 0, 467, 468, 469,
	470, 471, 472, 473, 0, 727, 672, 676, 0, 613,
	614, 618, 0, 0, 579, 0, 646, 655, 656, 530,
	534, 535, 536, 537, 538, 539, 540, 541, 542, -2,
	-2, -2, 546, 547, 548, -2, -2, -2, 0, 0,
	0, 657, 0, 0, 635, 659, 660, 665, 666, 0,
	594, 595, 596, 667, 0, 0, 0, 442, 0, 609,
	683, 236, 238, 27, 0, 171, 0, 174, 0, 0,
	177, 178, 0, 0, 0, 0, 187, 194, 0, 0,
	0, 42, 0, 0, 242, 0, 45, 45, 233, 0,
	0, 235, 0, 0, 0, 274, 702, 284, 0, 0,
	221, 227, 227, 0, 577, 578, 0, 0, 0, 0,
	0, 304, 0, 350, 348, 370, 0, 372, 0, 0,
	0, 374, 0, 360, 0, 359, 0, 0, 368, 403,
	0, 0, 411, 0, 0, -2, 0, 521, 0, -2,
	-2, 631, 638, 724, 332, 570, 572, 573, 476, 675,
	620, 617, 0, 604, 588, 654, 0, 0, 0, 0,
	638, 634, 593, 0, 599, 600, 421, 305, 29, 0,
	175, 176, 179, 0, 181, 196, 188, 0, 191, 192,
	189, 0, 31, 32, 41, 47, 33, 39, 0, 0,
	0, 0, 0, 290, 291, 0, 194, 0, 230, 719,
	0, 230, 0, 0, 0, 162, 194, 0, 608, 610,
	0, 371, 0, 388, 373, 0, 363, 0, 0, 377,
	404, 401, -2, -2, 522, 640, 633, 0, 332, 0,
	606, -2, 0, 0, 0, 636, 0, 173, 0, 200,
	0, 0, 0, 49, 0, 237, 239, 0, 277, 399,
	280, 183, 222, 223, 226, 224, 227, 332, 194, 217,
	0, 0, 0, 0, 361, 358, 375, 571, 623, 0,
	-2, 0, 554, 598, 180, 205, 0, 0, 0, 196,
	35, 0, 46, 0, 279, 230, 0, 184, 0, 611,
	612, 387, 0, 0, 0, 619, 555, 182, 201, 202,
	0, 197, 198, 199, 195, 193, 200, 48, 399, 225,
	569, 194, 616, 621, 624, -2, 840, 765, 0, 622,
	203, 0, 204, 0, 0, 0, 205, 276, 218, 0,
	626, 627, 628, 629, 630, 206, 0, 209, 210, 0,
	207, 190, 0, 208, 211, 212, 625,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 265, 3, 271, 266, 3,
	276, 277, 269, 267, 280, 268, 278, 270, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 284, 279,
	259, 261, 260, 3, 281, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 274, 3, 275, 264, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 282, 263, 283, 273,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 262, 57602, 272, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:661
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:667
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:673
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:693
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:703
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:709
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:713
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:730
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:735
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:740
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:745
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:750
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:755
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:777
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:786
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:808
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:835
		{
			unimplemented()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:836
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:840
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1116
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1214
		{
			expr := &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
			typedExpr, err := TypeCheck(expr, nil, NoTypePreference)
			if err != nil {
				sqllex.Error("cannot type check interval type: " + err.Error())
				return 1
			}
			var ctx EvalContext
			d, err := typedExpr.Eval(ctx)
			if err != nil {
				sqllex.Error("cannot evaluate to an interval type: " + err.Error())
				return 1
			}
			if _, ok := d.(*DInterval); !ok {
				panic("not an interval type")
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1243
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1245
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			unimplemented()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			unimplemented()
		}
	case 183:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			unimplemented()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1507
		{
			unimplemented()
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = []string(nil)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []string(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			unimplemented()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			unimplemented()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1546
		{
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1557
		{
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1563
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			unimplemented()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1569
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = true
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = false
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			unimplemented()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1646
		{
			unimplemented()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			unimplemented()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1650
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = Ascending
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = Descending
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = true
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = false
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.str = ""
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.str = ""
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retExprs()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1881
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1882
		{
			unimplemented()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1883
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1886
		{
			unimplemented()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			unimplemented()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1888
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			unimplemented()
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			unimplemented()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2132
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			unimplemented()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			unimplemented()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2152
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2156
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = true
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = false
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = false
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2180
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2251
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2279
		{
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 349:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2421
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.str = astFullJoin
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.str = astLeftJoin
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.str = astRightJoin
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.str = astInnerJoin
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2508
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2509
		{
		}
	case 387:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2530
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2599
		{
			unimplemented()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2600
		{
			unimplemented()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			unimplemented()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2604
		{
			unimplemented()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2613
		{
			unimplemented()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2648
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2657
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = nil
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2774
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2801
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			unimplemented()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			unimplemented()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			unimplemented()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			unimplemented()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			unimplemented()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2874
		{
			unimplemented()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			unimplemented()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			unimplemented()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2877
		{
			unimplemented()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2878
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2879
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2881
		{
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2884
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2913
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = ValArg{Name: sqlDollar[1].str}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3288
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3289
		{
			unimplemented()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3326
		{
			unimplemented()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3330
		{
			unimplemented()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3347
		{
			unimplemented()
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3348
		{
			unimplemented()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3349
		{
			unimplemented()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			unimplemented()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3371
		{
			unimplemented()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			unimplemented()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3416
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			unimplemented()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3420
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			unimplemented()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3428
		{
			unimplemented()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			unimplemented()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3441
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			unimplemented()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3457
		{
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			unimplemented()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3467
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3471
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3477
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3479
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3808
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3964
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4000
		{
			unimplemented()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = DNull
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
