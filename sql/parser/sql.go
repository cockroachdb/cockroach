// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:318
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VIEW = 57612
const VARYING = 57613
const WHEN = 57614
const WHERE = 57615
const WINDOW = 57616
const WITH = 57617
const WITHIN = 57618
const WITHOUT = 57619
const YEAR = 57620
const ZONE = 57621
const NOT_LA = 57622
const WITH_LA = 57623
const AS_LA = 57624
const POSTFIXOP = 57625
const UMINUS = 57626

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4836

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	303, 26,
	-2, 372,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 347,
	176, 347,
	206, 347,
	301, 347,
	303, 347,
	-2, 357,
	-1, 56,
	1, 350,
	176, 350,
	206, 350,
	301, 350,
	303, 350,
	-2, 356,
	-1, 65,
	1, 26,
	303, 26,
	-2, 372,
	-1, 283,
	1, 172,
	303, 172,
	-2, 870,
	-1, 317,
	151, 382,
	175, 382,
	-2, 353,
	-1, 320,
	151, 381,
	175, 381,
	-2, 351,
	-1, 453,
	151, 381,
	175, 381,
	-2, 354,
	-1, 509,
	300, 809,
	-2, 802,
	-1, 510,
	300, 810,
	-2, 803,
	-1, 516,
	5, 517,
	300, 517,
	-2, 960,
	-1, 539,
	5, 483,
	-2, 935,
	-1, 540,
	5, 511,
	300, 511,
	-2, 937,
	-1, 541,
	5, 491,
	-2, 938,
	-1, 542,
	5, 490,
	-2, 939,
	-1, 543,
	5, 511,
	300, 511,
	-2, 942,
	-1, 544,
	5, 511,
	300, 511,
	-2, 943,
	-1, 545,
	5, 512,
	-2, 946,
	-1, 546,
	5, 477,
	-2, 947,
	-1, 547,
	5, 477,
	-2, 948,
	-1, 548,
	5, 493,
	-2, 951,
	-1, 549,
	5, 478,
	-2, 956,
	-1, 550,
	5, 479,
	-2, 957,
	-1, 551,
	5, 480,
	-2, 958,
	-1, 552,
	5, 481,
	-2, 959,
	-1, 553,
	5, 477,
	-2, 963,
	-1, 554,
	5, 484,
	-2, 968,
	-1, 555,
	5, 482,
	-2, 971,
	-1, 556,
	5, 509,
	300, 509,
	-2, 973,
	-1, 557,
	5, 513,
	-2, 976,
	-1, 558,
	5, 515,
	-2, 977,
	-1, 559,
	5, 508,
	300, 508,
	-2, 981,
	-1, 889,
	97, 357,
	137, 357,
	151, 357,
	175, 357,
	179, 357,
	257, 357,
	-2, 629,
	-1, 897,
	300, 787,
	-2, 776,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 552,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 553,
	-1, 1098,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 554,
	-1, 1102,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 558,
	-1, 1103,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 559,
	-1, 1104,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 560,
	-1, 1107,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 565,
	-1, 1113,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 567,
	-1, 1116,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 572,
	-1, 1117,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 573,
	-1, 1118,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 574,
	-1, 1143,
	184, 700,
	-2, 703,
	-1, 1315,
	97, 357,
	137, 357,
	151, 357,
	175, 357,
	179, 357,
	257, 357,
	-2, 430,
	-1, 1319,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 566,
	-1, 1320,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 568,
	-1, 1325,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 569,
	-1, 1343,
	184, 699,
	-2, 702,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 570,
	-1, 1511,
	140, 0,
	-2, 584,
	-1, 1519,
	184, 701,
	-2, 704,
	-1, 1553,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 610,
	-1, 1554,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 611,
	-1, 1555,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 612,
	-1, 1559,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 616,
	-1, 1560,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 617,
	-1, 1561,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 618,
	-1, 1665,
	140, 0,
	-2, 585,
	-1, 1668,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 588,
	-1, 1669,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 590,
	-1, 1756,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 589,
	-1, 1757,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 591,
	-1, 1764,
	140, 0,
	-2, 619,
	-1, 1809,
	140, 0,
	-2, 620,
	-1, 1861,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 934,
}

const sqlNprod = 1076
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24687

var sqlAct = [...]int{

	510, 1860, 1841, 1473, 1883, 1815, 1842, 982, 1843, 1708,
	814, 508, 1068, 1530, 1859, 1731, 1744, 974, 1657, 1590,
	1630, 595, 355, 1651, 818, 284, 1631, 321, 72, 507,
	500, 892, 1399, 1312, 1644, 42, 1045, 72, 72, 72,
	1241, 1050, 72, 1485, 705, 72, 342, 1398, 1346, 1311,
	894, 1302, 821, 72, 1495, 575, 472, 1049, 943, 1014,
	72, 72, 952, 572, 72, 1076, 1046, 72, 72, 72,
	1296, 1153, 1189, 1129, 690, 983, 1126, 1080, 998, 328,
	55, 73, 1007, 769, 591, 836, 25, 1040, 440, 577,
	1192, 753, 560, 1078, 326, 482, 14, 7, 473, 356,
	441, 357, 354, 750, 9, 928, 320, 924, 780, 370,
	376, 1077, 1053, 367, 8, 55, 6, 976, 842, 4,
	18, 243, 250, 331, 456, 455, 281, 457, 271, 56,
	771, 369, 249, 251, 57, 749, 767, 262, 683, 329,
	252, 460, 363, 1751, 692, 55, 1752, 975, 1310, 325,
	247, 692, 246, 692, 587, 248, 245, 339, 1875, 1857,
	345, 1072, 1730, 1849, 325, 1839, 1072, 979, 1004, 1834,
	1811, 1011, 1072, 1004, 1805, 1300, 1795, 1072, 1252, 1730,
	1785, 309, 1253, 1072, 1758, 318, 502, 1004, 1755, 1741,
	317, 1072, 1730, 844, 845, 846, 61, 1299, 1738, 348,
	333, 1072, 1729, 1713, 1712, 1730, 1072, 1072, 1690, 1341,
	1670, 1017, 1012, 1017, 1342, 1667, 1017, 848, 1004, 63,
	1617, 1616, 1602, 1017, 1017, 1072, 1515, 1459, 1453, 1017,
	971, 971, 1416, 1414, 1413, 1417, 1017, 1017, 847, 72,
	72, 72, 72, 72, 1412, 379, 64, 1017, 1013, 1010,
	1799, 1340, 1343, 706, 59, 1017, 1017, 562, 72, 1281,
	60, 1073, 1072, 561, 1072, 1733, 1026, 372, 372, 1017,
	843, 1299, 1016, 72, 1345, 1017, 72, 72, 1003, 58,
	326, 1004, 970, 940, 700, 971, 939, 701, 1566, 1017,
	1518, 1279, 853, 941, 1282, 1072, 1019, 1137, 358, 1067,
	61, 467, 359, 693, 359, 1034, 1015, 483, 468, 72,
	693, 72, 693, 72, 72, 809, 72, 808, 761, 760,
	405, 338, 439, 63, 65, 358, 380, 1369, 1370, 359,
	794, 72, 364, 425, 1858, 69, 1855, 381, 447, 449,
	863, 1848, 72, 1806, 1739, 454, 1695, 1691, 1683, 1682,
	64, 1681, 373, 377, 72, 1676, 1675, 1674, 59, 1628,
	598, 72, 72, 72, 60, 72, 453, 413, 1009, 1622,
	61, 340, 1581, 1252, 347, 350, 1576, 593, 1575, 414,
	1574, 352, 1521, 978, 843, 567, 1504, 1484, 1463, 1421,
	1008, 1284, 566, 63, 1418, 1406, 1397, 864, 72, 1369,
	1370, 1368, 696, 1365, 446, 72, 1134, 72, 900, 691,
	1363, 812, 1351, 1350, 1280, 1206, 1160, 1159, 379, 379,
	64, 467, 466, 845, 846, 1375, 598, 72, 817, 72,
	72, 72, 72, 72, 72, 72, 1532, 444, 1825, 72,
	1798, 599, 1777, 1775, 72, 695, 848, 795, 698, 1766,
	1748, 72, 600, 58, 364, 1736, 1727, 1705, 318, 1688,
	816, 1660, 253, 317, 1638, 463, 464, 847, 1510, 72,
	469, 1503, 72, 1385, 857, 849, 850, 851, 852, 854,
	1481, 874, 1479, 1369, 1370, 1478, 1387, 1388, 1389, 1476,
	1461, 702, 747, 1621, 1433, 1135, 1432, 1375, 1396, 380,
	380, 685, 759, 682, 1359, 54, 1358, 599, 1337, 358,
	381, 381, 1333, 359, 1131, 1268, 1233, 1232, 600, 1220,
	811, 1219, 326, 1199, 1158, 1071, 929, 897, 932, 936,
	1386, 34, 922, 1384, 921, 920, 919, 918, 840, 35,
	917, 916, 757, 756, 1369, 1370, 340, 915, 350, 914,
	913, 791, 912, 796, 911, 784, 800, 801, 802, 803,
	804, 910, 909, 1220, 799, 807, 908, 907, 353, 898,
	896, 72, 810, 58, 813, 845, 846, 891, 343, 72,
	824, 1375, 826, 72, 825, 471, 712, 72, 72, 411,
	318, 401, 838, 318, 318, 832, 399, 1627, 833, 834,
	1626, 895, 1262, 1261, 568, 1753, 419, 790, 1371, 1372,
	1373, 1374, 1376, 1390, 845, 846, 515, 1625, 340, 847,
	946, 1254, 1062, 934, 1420, 1645, 442, 935, 1419, 1385,
	583, 1165, 1318, 435, 1011, 420, 905, 975, 957, 959,
	274, 1533, 1375, 1154, 845, 846, 925, 1354, 1248, 569,
	1427, 926, 927, 930, 1821, 1784, 61, 735, 1871, 933,
	578, 592, 579, 734, 578, 1872, 579, 848, 340, 684,
	684, 239, 1610, 1025, 302, 1012, 962, 315, 1275, 63,
	1371, 1372, 1373, 1374, 1376, 937, 1386, 72, 847, 72,
	72, 949, 72, 568, 862, 72, 303, 72, 72, 308,
	72, 307, 379, 901, 1721, 340, 64, 1720, 1168, 945,
	874, 1013, 1010, 1447, 59, 1444, 1424, 1423, 966, 1321,
	60, 240, 992, 372, 1267, 372, 1266, 945, 953, 1265,
	1746, 580, 1264, 944, 1648, 580, 1114, 1018, 968, 58,
	417, 965, 853, 443, 1203, 1202, 1085, 1783, 438, 1169,
	397, 311, 72, 72, 1448, 1237, 1381, 1382, 1383, 1128,
	1380, 1377, 1378, 1379, 1371, 1372, 1373, 1374, 1376, 1015,
	1128, 589, 585, 1845, 1823, 1015, 1710, 1435, 418, 686,
	55, 1242, 1460, 380, 55, 1170, 1167, 250, 956, 1451,
	863, 1001, 68, 1880, 381, 598, 1250, 249, 251, 72,
	584, 1000, 1002, 981, 977, 252, 977, 993, 991, 994,
	377, 1175, 996, 72, 72, 247, 1039, 246, 72, 1021,
	248, 245, 995, 990, 1836, 999, 1154, 1373, 1374, 1376,
	1778, 1009, 1886, 241, 1246, 930, 1598, 933, 1871, 312,
	1837, 1231, 67, 1171, 1465, 72, 1846, 864, 72, 1276,
	1028, 927, 926, 263, 1022, 1020, 1023, 316, 1065, 1066,
	1074, 1027, 874, 242, 1242, 235, 1235, 1891, 1599, 313,
	955, 253, 588, 1084, 268, 1274, 599, 416, 938, 264,
	1466, 1468, 598, 415, 1847, 1879, 692, 600, 789, 788,
	340, 782, 777, 476, 350, 923, 1762, 1496, 1043, 1728,
	1442, 874, 265, 1132, 581, 1166, 1044, 1436, 581, 1042,
	236, 1357, 845, 846, 54, 593, 408, 410, 942, 267,
	593, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	888, 874, 325, 1111, 954, 848, 260, 416, 1015, 1015,
	34, 436, 1075, 72, 72, 72, 1141, 1711, 35, 72,
	1884, 1594, 72, 1595, 66, 1205, 847, 1844, 72, 72,
	72, 72, 72, 599, 1870, 1323, 72, 1878, 792, 72,
	1868, 1643, 72, 578, 600, 579, 1127, 1060, 1597, 72,
	263, 72, 428, 1150, 1133, 1600, 1138, 1142, 72, 1145,
	1213, 1885, 406, 404, 986, 437, 1489, 459, 72, 350,
	1715, 268, 350, 1207, 266, 1184, 264, 1897, 1887, 1562,
	853, 1196, 1197, 1198, 326, 1714, 711, 1244, 1230, 72,
	72, 1030, 741, 1109, 1112, 72, 1892, 1032, 1703, 265,
	458, 1208, 712, 712, 1772, 379, 793, 1426, 238, 237,
	1216, 1212, 1596, 1033, 580, 693, 267, 269, 1108, 1609,
	324, 1464, 1031, 1606, 459, 72, 1608, 72, 1061, 72,
	766, 72, 1124, 1247, 72, 61, 1256, 823, 1257, 1258,
	815, 564, 1255, 72, 563, 1122, 1658, 1686, 1816, 1283,
	72, 1285, 72, 458, 1287, 1305, 806, 1563, 63, 762,
	323, 1259, 1896, 1564, 764, 362, 495, 1704, 1222, 1082,
	1083, 1221, 1308, 735, 735, 765, 1270, 361, 1654, 734,
	734, 1271, 1272, 1494, 1273, 64, 380, 326, 1277, 1306,
	340, 1278, 1110, 59, 70, 1301, 1491, 381, 1490, 60,
	1659, 266, 325, 254, 255, 256, 1605, 712, 273, 1607,
	1120, 285, 1119, 415, 323, 450, 1125, 1474, 244, 273,
	1294, 55, 340, 1293, 576, 1629, 332, 332, 1001, 1316,
	70, 1687, 512, 70, 70, 351, 1486, 326, 1000, 1002,
	1701, 1330, 1305, 1344, 269, 783, 778, 1297, 1286, 1307,
	1288, 1157, 1765, 1685, 1328, 1400, 1324, 1509, 1322, 1308,
	1702, 712, 999, 1317, 1364, 851, 852, 854, 1332, 874,
	1303, 1238, 1024, 969, 1217, 434, 1306, 433, 735, 432,
	322, 431, 430, 429, 734, 426, 326, 581, 360, 1401,
	1304, 72, 1336, 906, 1353, 1121, 1338, 798, 1156, 1840,
	1813, 1587, 1123, 1440, 1653, 712, 1438, 1425, 1348, 1349,
	1290, 1063, 1058, 997, 699, 697, 694, 689, 586, 582,
	1209, 1326, 1527, 72, 72, 1331, 822, 1722, 1260, 1403,
	1404, 1405, 735, 461, 336, 1069, 1307, 1872, 734, 1455,
	422, 1395, 786, 1724, 961, 1452, 1422, 3, 945, 1239,
	72, 1429, 1408, 72, 960, 72, 592, 1431, 945, 1733,
	1443, 72, 1780, 1808, 958, 592, 301, 1487, 1480, 1450,
	72, 1439, 1217, 1441, 72, 340, 735, 1454, 964, 1477,
	72, 598, 734, 465, 72, 1230, 72, 963, 1458, 1457,
	1800, 1652, 1070, 1445, 1446, 1467, 1469, 1470, 1456, 259,
	462, 337, 1500, 1641, 1327, 70, 365, 70, 285, 285,
	1475, 1329, 1059, 344, 1057, 1483, 304, 305, 980, 423,
	839, 758, 704, 831, 402, 1006, 1493, 1894, 72, 1499,
	1895, 1497, 1498, 1369, 1370, 845, 846, 1582, 1289, 407,
	270, 1471, 285, 285, 1462, 1523, 1524, 1525, 1512, 748,
	1036, 1035, 1415, 1263, 1204, 1201, 1200, 1151, 1037, 340,
	1801, 1672, 599, 1520, 1526, 1291, 1038, 899, 310, 1709,
	261, 797, 427, 600, 1835, 273, 1678, 70, 1534, 285,
	285, 1488, 451, 1356, 1539, 1492, 1743, 1761, 1155, 904,
	33, 1633, 488, 1588, 72, 72, 72, 332, 1516, 1428,
	1052, 1569, 1051, 72, 72, 601, 787, 776, 70, 72,
	511, 72, 770, 72, 72, 72, 779, 1570, 72, 1164,
	70, 565, 513, 709, 514, 710, 931, 70, 70, 70,
	501, 687, 711, 711, 707, 375, 1583, 1586, 1298, 984,
	1152, 737, 1352, 902, 736, 487, 493, 492, 1139, 72,
	72, 398, 484, 1656, 1309, 45, 412, 1567, 1636, 279,
	280, 72, 72, 1636, 70, 72, 1624, 1245, 1577, 1603,
	1604, 754, 1642, 754, 72, 72, 1635, 1637, 1619, 1620,
	1064, 1635, 1637, 827, 1437, 314, 1640, 1366, 400, 1182,
	712, 1174, 1172, 285, 1163, 754, 285, 285, 285, 285,
	285, 805, 445, 72, 571, 285, 985, 424, 1662, 1251,
	273, 1005, 470, 835, 335, 1639, 334, 820, 712, 712,
	1047, 421, 763, 1029, 306, 1666, 712, 712, 1774, 1215,
	986, 340, 708, 1890, 1779, 332, 1434, 711, 841, 1820,
	1661, 62, 1684, 24, 1623, 22, 21, 20, 1647, 19,
	17, 16, 15, 23, 13, 12, 11, 10, 72, 712,
	72, 735, 72, 72, 32, 31, 30, 734, 29, 28,
	5, 72, 1649, 1650, 2, 1, 1655, 340, 0, 0,
	0, 340, 0, 0, 0, 1536, 1537, 1699, 1696, 735,
	735, 711, 72, 1541, 1542, 734, 734, 735, 735, 1697,
	0, 0, 0, 734, 734, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 72, 0, 72, 0, 0, 1734,
	1636, 0, 0, 0, 0, 72, 1573, 0, 0, 1737,
	735, 72, 0, 0, 1732, 711, 734, 70, 1635, 1637,
	0, 0, 1725, 0, 1747, 950, 0, 1301, 0, 70,
	0, 0, 0, 70, 967, 0, 1718, 1719, 1723, 0,
	0, 0, 0, 0, 0, 0, 0, 712, 0, 0,
	0, 1760, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1776, 0, 474, 474, 0, 0, 1770, 1369,
	1370, 72, 72, 573, 1305, 72, 1771, 1754, 0, 72,
	0, 0, 0, 1767, 72, 0, 0, 0, 594, 1788,
	0, 1308, 1636, 1796, 1790, 0, 0, 1792, 0, 72,
	1613, 1797, 1303, 0, 598, 593, 0, 1789, 1306, 1791,
	1635, 1637, 1740, 326, 0, 0, 1750, 0, 735, 1384,
	1803, 0, 1304, 0, 734, 1804, 72, 0, 72, 72,
	0, 72, 0, 70, 0, 988, 989, 0, 70, 1807,
	0, 70, 1826, 285, 285, 0, 285, 712, 340, 340,
	72, 1830, 340, 1824, 0, 1829, 1822, 1176, 0, 1827,
	1636, 1810, 0, 0, 1833, 1802, 1832, 1375, 1307, 1831,
	0, 0, 1828, 0, 72, 0, 72, 1794, 1635, 1637,
	1850, 1852, 0, 1856, 0, 599, 0, 0, 828, 830,
	1854, 72, 0, 0, 1818, 837, 600, 0, 754, 841,
	1869, 1867, 1865, 0, 0, 0, 1873, 883, 884, 885,
	886, 887, 0, 1877, 1717, 1385, 890, 1876, 735, 0,
	1874, 0, 0, 0, 734, 712, 1889, 1888, 0, 0,
	1893, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	845, 846, 1853, 0, 0, 1041, 1898, 0, 0, 1838,
	0, 0, 0, 0, 0, 0, 0, 0, 1707, 70,
	1048, 0, 0, 848, 841, 0, 0, 737, 737, 0,
	736, 736, 1386, 0, 0, 845, 846, 0, 0, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 1334, 1335,
	0, 70, 0, 0, 285, 0, 735, 0, 848, 0,
	711, 1742, 734, 712, 0, 0, 0, 0, 0, 0,
	0, 0, 340, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 0, 0, 0, 0, 711, 711,
	0, 0, 0, 0, 0, 0, 711, 711, 853, 1392,
	1393, 1394, 0, 0, 0, 0, 1380, 1377, 1378, 1379,
	1371, 1372, 1373, 1374, 1376, 0, 0, 0, 708, 708,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 711,
	1176, 1176, 737, 853, 735, 736, 0, 0, 0, 0,
	734, 0, 0, 0, 0, 0, 863, 0, 0, 70,
	1210, 1211, 0, 0, 0, 950, 0, 0, 1218, 0,
	0, 0, 0, 0, 1223, 1224, 1226, 1228, 1229, 0,
	0, 0, 1234, 0, 0, 1236, 0, 0, 70, 0,
	0, 1176, 1176, 1176, 0, 70, 737, 1249, 0, 736,
	0, 0, 0, 0, 70, 0, 1819, 0, 0, 0,
	0, 0, 0, 864, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 708, 0, 1041, 754, 0, 0, 0,
	737, 1041, 0, 736, 0, 0, 0, 711, 0, 0,
	0, 986, 0, 0, 1507, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 820, 0, 820, 0, 285, 0, 70, 0, 0,
	1292, 0, 0, 0, 0, 0, 0, 708, 0, 1295,
	0, 849, 850, 851, 852, 854, 1314, 874, 70, 0,
	0, 0, 0, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
	1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
	1560, 1561, 0, 1565, 0, 0, 849, 850, 851, 852,
	854, 708, 874, 0, 0, 0, 1176, 1176, 1369, 1370,
	0, 0, 0, 474, 0, 0, 0, 711, 0, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
	1107, 0, 1113, 0, 1115, 1116, 1117, 1118, 0, 0,
	0, 0, 0, 0, 0, 1176, 1176, 1176, 1176, 1176,
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
	1176, 1176, 1176, 1176, 0, 1176, 0, 0, 0, 1161,
	1162, 0, 1173, 0, 1183, 1185, 1190, 1193, 1194, 1195,
	0, 0, 0, 0, 0, 711, 489, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 1375, 841, 0, 573,
	0, 0, 0, 0, 1369, 1370, 0, 0, 0, 0,
	0, 0, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 0, 0, 0, 0, 70,
	70, 0, 0, 1240, 0, 1243, 848, 0, 0, 0,
	0, 0, 319, 0, 1385, 327, 1369, 1370, 0, 1387,
	1388, 1389, 43, 0, 0, 0, 1472, 847, 0, 950,
	0, 820, 0, 711, 0, 0, 0, 1482, 0, 0,
	0, 0, 0, 0, 0, 0, 70, 1269, 0, 0,
	70, 0, 0, 0, 0, 737, 1314, 0, 736, 0,
	1502, 1706, 1314, 0, 0, 0, 1384, 0, 0, 0,
	0, 1386, 1375, 0, 0, 1369, 1370, 0, 0, 0,
	0, 853, 0, 737, 737, 0, 736, 736, 0, 0,
	0, 737, 737, 0, 736, 736, 0, 837, 0, 0,
	0, 0, 0, 0, 1531, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1375, 0, 0, 0, 0, 0,
	1385, 0, 0, 0, 737, 0, 0, 736, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 1320,
	0, 0, 0, 1176, 1325, 0, 708, 1764, 1379, 1371,
	1372, 1373, 1374, 1376, 0, 0, 0, 0, 0, 0,
	0, 0, 1385, 0, 0, 0, 0, 1339, 0, 0,
	1584, 1585, 950, 1375, 708, 708, 1347, 1386, 0, 841,
	841, 0, 708, 708, 1355, 1611, 864, 1612, 1360, 70,
	1614, 1615, 0, 0, 1618, 0, 0, 0, 0, 0,
	0, 327, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 708, 1190, 1190, 1190, 1386,
	0, 1385, 0, 1632, 0, 841, 1048, 1809, 1632, 1176,
	0, 0, 737, 0, 0, 736, 0, 70, 70, 0,
	0, 70, 0, 0, 0, 0, 0, 0, 0, 1430,
	841, 1314, 1377, 1378, 1379, 1371, 1372, 1373, 1374, 1376,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 0, 474, 0, 0, 0, 0, 0, 1386, 1679,
	474, 0, 0, 0, 573, 319, 0, 0, 0, 1381,
	1382, 1383, 0, 1380, 1377, 1378, 1379, 1371, 1372, 1373,
	1374, 1376, 0, 0, 0, 0, 0, 0, 0, 1176,
	0, 0, 1598, 0, 1591, 0, 0, 0, 0, 0,
	0, 0, 1589, 708, 0, 0, 1593, 0, 0, 0,
	0, 0, 737, 0, 950, 736, 1698, 0, 285, 1700,
	0, 0, 0, 0, 1599, 0, 0, 70, 1505, 0,
	0, 1506, 1380, 1377, 1378, 1379, 1371, 1372, 1373, 1374,
	1376, 0, 1511, 1592, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 0, 0, 1269, 0, 0, 0, 0,
	0, 0, 0, 0, 1528, 1632, 0, 0, 0, 0,
	70, 0, 1745, 0, 1538, 0, 0, 1540, 0, 0,
	0, 70, 0, 0, 0, 0, 0, 841, 0, 0,
	737, 0, 0, 736, 0, 0, 0, 319, 0, 0,
	319, 319, 0, 708, 0, 0, 0, 1594, 0, 1595,
	1571, 1572, 0, 0, 0, 0, 0, 0, 0, 1578,
	1579, 1580, 0, 889, 0, 0, 0, 893, 820, 0,
	0, 0, 0, 0, 1597, 0, 0, 0, 0, 0,
	0, 1600, 0, 0, 0, 0, 0, 1781, 1782, 1369,
	1370, 1786, 1387, 1388, 1389, 1787, 286, 1632, 0, 0,
	285, 474, 0, 0, 0, 1664, 0, 0, 737, 0,
	0, 736, 0, 0, 299, 841, 0, 0, 0, 0,
	0, 708, 0, 0, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 1646, 0, 1596, 1384,
	0, 868, 1817, 0, 841, 70, 0, 285, 848, 288,
	879, 0, 0, 0, 293, 294, 0, 0, 300, 1665,
	0, 0, 0, 1668, 1669, 1632, 1745, 0, 1671, 847,
	287, 289, 1673, 0, 0, 862, 0, 0, 0, 1677,
	0, 0, 0, 1680, 0, 0, 0, 1375, 0, 0,
	70, 0, 841, 0, 0, 0, 0, 0, 0, 708,
	0, 0, 0, 0, 0, 0, 0, 1866, 290, 0,
	0, 0, 0, 0, 0, 0, 1689, 0, 0, 1390,
	291, 292, 0, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1385, 295, 0, 0, 0,
	872, 880, 0, 0, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 878, 0, 0, 1716, 0,
	43, 868, 43, 0, 0, 870, 0, 0, 848, 0,
	879, 863, 0, 0, 0, 0, 0, 43, 845, 846,
	0, 43, 0, 0, 1735, 0, 0, 0, 0, 847,
	0, 0, 1386, 869, 0, 862, 0, 0, 0, 0,
	0, 848, 0, 1749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1756, 1757, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 296, 0, 0, 297, 0, 0, 873,
	0, 298, 1769, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1773, 0, 0, 0, 0,
	872, 880, 1381, 1382, 1383, 0, 1380, 1377, 1378, 1379,
	1371, 1372, 1373, 1374, 1376, 878, 853, 573, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 869, 972, 0, 0, 0, 0, 0,
	26, 1079, 0, 973, 863, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 845, 846, 0, 0, 0,
	0, 875, 876, 877, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 49, 0, 1130, 848, 873,
	879, 27, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 1851, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 864, 38, 0, 0, 862, 1864, 1864, 0, 34,
	0, 0, 50, 0, 0, 0, 37, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1864, 39, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 853, 0, 0, 0, 0, 0, 1692,
	0, 0, 0, 0, 1864, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 327, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 40, 0, 51, 0, 0, 0,
	0, 41, 0, 0, 61, 0, 0, 0, 0, 44,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 43, 0, 43, 63, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 873,
	53, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1130,
	0, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 0, 889, 0,
	0, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 0, 0, 0, 0, 0, 0,
	509, 498, 499, 496, 497, 485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 525, 491, 0, 889, 0, 77,
	78, 0, 539, 189, 540, 79, 541, 542, 0, 80,
	193, 194, 81, 506, 524, 543, 544, 197, 0, 535,
	0, 517, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 384, 89, 1863, 0, 518, 520, 0,
	519, 521, 91, 92, 93, 94, 545, 95, 546, 547,
	0, 96, 0, 97, 0, 0, 0, 538, 99, 0,
	100, 0, 0, 0, 490, 101, 102, 526, 504, 0,
	1079, 103, 104, 548, 0, 105, 0, 106, 0, 0,
	385, 0, 107, 536, 0, 206, 0, 108, 109, 532,
	534, 0, 0, 112, 0, 110, 0, 386, 111, 549,
	550, 551, 552, 0, 516, 0, 0, 113, 389, 114,
	115, 0, 0, 537, 390, 116, 1079, 0, 117, 0,
	1079, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 480, 127, 505, 533, 129, 553, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 393, 133,
	394, 527, 134, 135, 136, 0, 528, 137, 220, 138,
	0, 139, 140, 141, 554, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 395, 149, 150, 494, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 522, 157, 158,
	0, 159, 555, 225, 160, 0, 166, 161, 162, 163,
	165, 556, 164, 529, 0, 167, 0, 168, 169, 0,
	228, 557, 558, 0, 0, 170, 530, 531, 503, 171,
	172, 1862, 174, 0, 0, 175, 176, 177, 523, 0,
	178, 179, 180, 233, 559, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 725, 719, 742, 713,
	733, 732, 0, 0, 715, 714, 0, 477, 478, 744,
	743, 0, 0, 479, 0, 0, 486, 0, 0, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 730, 729, 0, 0, 0, 0, 0, 0,
	0, 728, 0, 0, 0, 0, 0, 1079, 1079, 0,
	0, 1079, 0, 0, 0, 0, 0, 727, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 720, 721, 722, 723, 0, 741, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 731, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 726, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 717, 0,
	0, 0, 0, 0, 0, 0, 724, 718, 0, 0,
	0, 0, 1726, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 716, 0, 0, 739, 740, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 745, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 597, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 602, 76, 603, 604,
	605, 606, 186, 607, 608, 609, 610, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 611, 80, 193, 194,
	81, 612, 613, 195, 196, 197, 614, 198, 615, 383,
	616, 82, 83, 84, 889, 85, 617, 86, 87, 88,
	618, 384, 89, 90, 619, 620, 621, 622, 623, 624,
	91, 92, 93, 94, 199, 95, 200, 201, 625, 96,
	626, 97, 627, 628, 629, 98, 99, 630, 100, 631,
	0, 632, 202, 101, 102, 203, 633, 634, 635, 103,
	104, 204, 0, 105, 636, 106, 637, 638, 385, 639,
	107, 205, 640, 206, 641, 108, 109, 207, 208, 387,
	642, 112, 643, 110, 644, 386, 111, 209, 210, 211,
	212, 645, 213, 646, 388, 113, 389, 114, 115, 647,
	648, 214, 390, 116, 391, 649, 117, 650, 651, 118,
	0, 119, 120, 121, 122, 123, 392, 124, 125, 128,
	126, 652, 127, 653, 215, 129, 216, 130, 131, 654,
	655, 656, 657, 658, 132, 217, 393, 133, 394, 218,
	134, 135, 136, 659, 219, 137, 220, 138, 660, 139,
	140, 141, 221, 142, 143, 661, 145, 146, 144, 147,
	662, 148, 395, 149, 150, 222, 151, 0, 152, 153,
	154, 663, 223, 155, 156, 664, 157, 158, 396, 159,
	224, 225, 160, 665, 166, 161, 162, 163, 165, 226,
	164, 227, 666, 167, 667, 168, 169, 668, 228, 229,
	230, 669, 670, 170, 231, 232, 671, 171, 172, 173,
	174, 672, 673, 175, 176, 177, 674, 675, 178, 179,
	180, 233, 234, 676, 677, 181, 678, 679, 680, 681,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1501, 74, 75, 602, 76, 603, 604, 605, 606, 186,
	607, 608, 609, 610, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 611, 80, 193, 194, 81, 612, 613,
	195, 196, 197, 614, 198, 615, 383, 616, 82, 83,
	84, 0, 85, 617, 86, 87, 88, 618, 384, 89,
	90, 619, 620, 621, 622, 623, 624, 91, 92, 93,
	94, 199, 95, 200, 201, 625, 96, 626, 97, 627,
	628, 629, 98, 99, 630, 100, 631, 0, 632, 202,
	101, 102, 203, 633, 634, 635, 103, 104, 204, 0,
	105, 636, 106, 637, 638, 385, 639, 107, 205, 640,
	206, 641, 108, 109, 207, 208, 387, 642, 112, 643,
	110, 644, 386, 111, 209, 210, 211, 212, 645, 213,
	646, 388, 113, 389, 114, 115, 647, 648, 214, 390,
	116, 391, 649, 117, 650, 651, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 652, 127,
	653, 215, 129, 216, 130, 131, 654, 655, 656, 657,
	658, 132, 217, 393, 133, 394, 218, 134, 135, 136,
	659, 219, 137, 220, 138, 660, 139, 140, 141, 221,
	142, 143, 661, 145, 146, 144, 147, 662, 148, 395,
	149, 150, 222, 151, 0, 152, 153, 154, 663, 223,
	155, 156, 664, 157, 158, 396, 159, 224, 225, 160,
	665, 166, 161, 162, 163, 165, 226, 164, 227, 666,
	167, 667, 168, 169, 668, 228, 229, 230, 669, 670,
	170, 231, 232, 671, 171, 172, 173, 174, 672, 673,
	175, 176, 177, 674, 675, 178, 179, 180, 233, 234,
	676, 677, 181, 678, 679, 680, 681, 182, 183, 184,
	185, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 596, 0, 0, 74, 75, 602,
	76, 603, 604, 605, 606, 186, 607, 608, 609, 610,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 611,
	80, 193, 194, 81, 612, 613, 195, 196, 197, 614,
	198, 615, 383, 616, 82, 83, 84, 0, 85, 617,
	86, 87, 88, 618, 384, 89, 90, 619, 620, 621,
	622, 623, 624, 91, 92, 93, 94, 199, 95, 200,
	201, 625, 96, 626, 97, 627, 628, 629, 98, 99,
	630, 100, 631, 0, 632, 202, 101, 102, 203, 633,
	634, 635, 103, 104, 204, 0, 105, 636, 106, 637,
	638, 385, 639, 107, 205, 640, 206, 641, 108, 109,
	207, 208, 387, 642, 112, 643, 110, 644, 386, 111,
	209, 210, 211, 212, 645, 213, 646, 388, 113, 389,
	114, 115, 647, 648, 214, 390, 116, 391, 649, 117,
	650, 651, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 652, 127, 653, 215, 129, 216,
	130, 131, 654, 655, 656, 657, 658, 132, 217, 393,
	133, 394, 218, 134, 135, 136, 659, 219, 137, 220,
	138, 660, 139, 140, 141, 221, 142, 143, 661, 145,
	146, 144, 147, 662, 148, 395, 149, 150, 222, 151,
	0, 152, 153, 154, 663, 223, 155, 156, 664, 157,
	158, 396, 159, 224, 225, 160, 665, 166, 161, 162,
	163, 165, 226, 164, 227, 666, 167, 667, 168, 169,
	668, 228, 229, 230, 669, 670, 170, 231, 232, 671,
	171, 172, 173, 174, 672, 673, 175, 176, 177, 674,
	675, 178, 179, 180, 233, 234, 676, 677, 181, 678,
	679, 680, 681, 182, 183, 184, 185, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 1147, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 187, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 0, 96, 0,
	97, 0, 1148, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 0, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	233, 559, 1146, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 478, 1149, 0, 0, 0,
	479, 0, 0, 486, 1144, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 187, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 574, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 61, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 63, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 382, 559,
	0, 0, 181, 0, 0, 0, 59, 182, 183, 184,
	185, 481, 60, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 479, 74,
	75, 486, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 187, 539, 189, 540, 79, 541,
	542, 0, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 90, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 0, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 387, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 388,
	113, 389, 114, 115, 0, 0, 537, 390, 116, 391,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 480, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	494, 151, 0, 152, 153, 154, 61, 223, 155, 156,
	522, 157, 158, 396, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 63,
	168, 169, 0, 228, 557, 558, 0, 0, 170, 530,
	531, 503, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 382, 559, 0, 0,
	181, 0, 0, 0, 59, 182, 183, 184, 185, 481,
	60, 509, 498, 499, 496, 497, 485, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 479, 74, 75, 486,
	76, 0, 0, 0, 0, 525, 491, 0, 0, 0,
	77, 78, 187, 539, 189, 540, 79, 541, 542, 1186,
	80, 193, 194, 81, 506, 524, 543, 544, 197, 0,
	535, 0, 517, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 384, 89, 90, 0, 518, 520,
	0, 519, 521, 91, 92, 93, 94, 545, 95, 546,
	547, 0, 96, 0, 97, 0, 0, 0, 538, 99,
	0, 100, 0, 0, 0, 490, 101, 102, 526, 504,
	0, 0, 103, 104, 548, 0, 105, 0, 106, 0,
	1191, 385, 0, 107, 536, 0, 206, 0, 108, 109,
	532, 534, 387, 0, 112, 0, 110, 0, 386, 111,
	549, 550, 551, 552, 0, 516, 0, 388, 113, 389,
	114, 115, 0, 1187, 537, 390, 116, 391, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 480, 127, 505, 533, 129, 553,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 393,
	133, 394, 527, 134, 135, 136, 0, 528, 137, 220,
	138, 0, 139, 140, 141, 554, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 395, 149, 150, 494, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 522, 157,
	158, 396, 159, 555, 225, 160, 0, 166, 161, 162,
	163, 165, 556, 164, 529, 0, 167, 0, 168, 169,
	0, 228, 557, 558, 0, 1188, 170, 530, 531, 503,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 523,
	0, 178, 179, 180, 233, 559, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 481, 0, 509,
	498, 499, 496, 497, 485, 0, 0, 0, 477, 478,
	0, 0, 0, 0, 479, 74, 75, 486, 76, 0,
	0, 0, 0, 525, 491, 0, 0, 0, 77, 78,
	187, 539, 189, 540, 79, 541, 542, 0, 80, 193,
	194, 81, 506, 524, 543, 544, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 545, 95, 546, 547, 0,
	96, 0, 97, 0, 0, 0, 538, 99, 0, 100,
	0, 0, 0, 490, 101, 102, 526, 504, 0, 0,
	103, 104, 548, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 549, 550,
	551, 552, 0, 516, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 480, 127, 505, 533, 129, 553, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 554, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 494, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 555, 225, 160, 0, 166, 161, 162, 163, 165,
	556, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	557, 558, 0, 0, 170, 530, 531, 503, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 559, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 479, 0, 0, 486, 1568, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 187, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 0, 96, 0,
	97, 0, 0, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 0, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	233, 559, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 481, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	479, 0, 0, 486, 1517, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 187, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 0, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 0, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 233, 559,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 479, 0,
	0, 486, 1143, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 187, 539, 189, 540, 79, 541,
	542, 0, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 90, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 0, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 387, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 388,
	113, 389, 114, 115, 0, 0, 537, 390, 116, 391,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 480, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	494, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	522, 157, 158, 396, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 0,
	168, 169, 0, 228, 557, 558, 0, 0, 170, 530,
	531, 503, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 233, 559, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 481,
	0, 0, 0, 0, 509, 498, 499, 496, 497, 485,
	477, 478, 0, 0, 0, 0, 479, 895, 1140, 486,
	74, 75, 0, 76, 0, 0, 0, 0, 525, 491,
	0, 0, 0, 77, 78, 187, 539, 189, 540, 79,
	541, 542, 0, 80, 193, 194, 81, 506, 524, 543,
	544, 197, 0, 535, 0, 517, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 384, 89, 90,
	0, 518, 520, 0, 519, 521, 91, 92, 93, 94,
	545, 95, 546, 547, 0, 96, 0, 97, 0, 0,
	0, 538, 99, 0, 100, 0, 0, 0, 490, 101,
	102, 526, 504, 0, 0, 103, 104, 548, 0, 105,
	0, 106, 0, 0, 385, 0, 107, 536, 0, 206,
	0, 108, 109, 532, 534, 387, 0, 112, 0, 110,
	0, 386, 111, 549, 550, 551, 552, 0, 516, 0,
	388, 113, 389, 114, 115, 0, 0, 537, 390, 116,
	391, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 392, 124, 125, 128, 126, 480, 127, 505,
	533, 129, 553, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 393, 133, 394, 527, 134, 135, 136, 0,
	528, 137, 220, 138, 0, 139, 140, 141, 554, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 395, 149,
	150, 494, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 522, 157, 158, 396, 159, 555, 225, 160, 0,
	166, 161, 162, 163, 165, 556, 164, 529, 0, 167,
	0, 168, 169, 0, 228, 557, 558, 0, 0, 170,
	530, 531, 503, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 523, 0, 178, 179, 180, 233, 559, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	481, 0, 509, 498, 499, 496, 497, 485, 0, 0,
	0, 477, 478, 475, 0, 0, 0, 479, 74, 75,
	486, 76, 0, 0, 0, 0, 525, 491, 0, 0,
	0, 77, 78, 187, 539, 189, 540, 79, 541, 542,
	0, 80, 193, 194, 81, 506, 524, 543, 544, 197,
	0, 535, 0, 517, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 384, 89, 90, 0, 518,
	520, 0, 519, 521, 91, 92, 93, 94, 545, 95,
	546, 547, 0, 96, 0, 97, 0, 0, 0, 538,
	99, 0, 100, 0, 0, 0, 490, 101, 102, 526,
	504, 0, 0, 103, 104, 548, 0, 105, 0, 106,
	0, 0, 385, 0, 107, 536, 0, 206, 0, 108,
	109, 532, 534, 387, 0, 112, 0, 110, 0, 386,
	111, 549, 550, 551, 552, 0, 516, 0, 388, 113,
	389, 114, 115, 0, 0, 537, 390, 116, 391, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	392, 124, 125, 128, 126, 480, 127, 505, 533, 129,
	553, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	393, 133, 394, 527, 134, 135, 136, 0, 528, 137,
	220, 138, 0, 139, 140, 141, 554, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 395, 149, 150, 494,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 522,
	157, 158, 396, 159, 555, 225, 160, 0, 166, 161,
	162, 163, 165, 556, 164, 529, 0, 167, 0, 168,
	169, 0, 228, 557, 558, 0, 0, 170, 530, 531,
	503, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	523, 0, 178, 179, 180, 233, 559, 1522, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 481, 0,
	509, 498, 499, 496, 497, 485, 0, 0, 0, 477,
	478, 0, 0, 0, 0, 479, 74, 75, 486, 76,
	0, 0, 0, 0, 525, 491, 0, 0, 0, 77,
	78, 187, 539, 189, 540, 79, 541, 542, 0, 80,
	193, 194, 81, 506, 524, 543, 544, 197, 0, 535,
	0, 517, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 384, 89, 90, 0, 518, 520, 0,
	519, 521, 91, 92, 93, 94, 545, 95, 546, 547,
	574, 96, 0, 97, 0, 0, 0, 538, 99, 0,
	100, 0, 0, 0, 490, 101, 102, 526, 504, 0,
	0, 103, 104, 548, 0, 105, 0, 106, 0, 0,
	385, 0, 107, 536, 0, 206, 0, 108, 109, 532,
	534, 387, 0, 112, 0, 110, 0, 386, 111, 549,
	550, 551, 552, 0, 516, 0, 388, 113, 389, 114,
	115, 0, 0, 537, 390, 116, 391, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 480, 127, 505, 533, 129, 553, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 393, 133,
	394, 527, 134, 135, 136, 0, 528, 137, 220, 138,
	0, 139, 140, 141, 554, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 395, 149, 150, 494, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 522, 157, 158,
	396, 159, 555, 225, 160, 0, 166, 161, 162, 163,
	165, 556, 164, 529, 0, 167, 0, 168, 169, 0,
	228, 557, 558, 0, 0, 170, 530, 531, 503, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 523, 0,
	178, 179, 180, 233, 559, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 481, 0, 509, 498,
	499, 496, 497, 485, 0, 0, 0, 477, 478, 0,
	0, 0, 0, 479, 74, 75, 486, 76, 0, 0,
	0, 0, 525, 491, 0, 0, 0, 77, 78, 187,
	539, 189, 540, 79, 541, 542, 0, 80, 193, 194,
	81, 506, 524, 543, 544, 197, 0, 535, 0, 517,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 384, 89, 90, 0, 518, 520, 0, 519, 521,
	91, 92, 93, 94, 545, 95, 546, 547, 0, 96,
	0, 97, 0, 0, 0, 538, 99, 0, 100, 0,
	0, 0, 490, 101, 102, 526, 504, 0, 0, 103,
	104, 548, 0, 105, 0, 106, 0, 1191, 385, 0,
	107, 536, 0, 206, 0, 108, 109, 532, 534, 387,
	0, 112, 0, 110, 0, 386, 111, 549, 550, 551,
	552, 0, 516, 0, 388, 113, 389, 114, 115, 0,
	0, 537, 390, 116, 391, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 392, 124, 125, 128,
	126, 480, 127, 505, 533, 129, 553, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 393, 133, 394, 527,
	134, 135, 136, 0, 528, 137, 220, 138, 0, 139,
	140, 141, 554, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 395, 149, 150, 494, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 522, 157, 158, 396, 159,
	555, 225, 160, 0, 166, 161, 162, 163, 165, 556,
	164, 529, 0, 167, 0, 168, 169, 0, 228, 557,
	558, 0, 0, 170, 530, 531, 503, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 523, 0, 178, 179,
	180, 233, 559, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 481, 0, 0, 0, 0, 509,
	498, 499, 496, 497, 485, 477, 478, 0, 0, 0,
	0, 479, 0, 0, 486, 74, 75, 829, 76, 0,
	0, 0, 0, 525, 491, 0, 0, 0, 77, 78,
	187, 539, 189, 540, 79, 541, 542, 0, 80, 193,
	194, 81, 506, 524, 543, 544, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 545, 95, 546, 547, 0,
	96, 0, 97, 0, 0, 0, 538, 99, 0, 100,
	0, 0, 0, 490, 101, 102, 526, 504, 0, 0,
	103, 104, 548, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 549, 550,
	551, 552, 0, 516, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 480, 127, 505, 533, 129, 553, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 554, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 494, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 555, 225, 160, 0, 166, 161, 162, 163, 165,
	556, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	557, 558, 0, 0, 170, 530, 531, 503, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 559, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 481, 0, 509, 498, 499,
	496, 497, 485, 0, 0, 0, 477, 478, 0, 0,
	0, 0, 479, 74, 75, 486, 76, 0, 0, 0,
	0, 525, 491, 0, 0, 0, 77, 78, 187, 539,
	189, 540, 79, 541, 542, 0, 80, 193, 194, 81,
	506, 524, 543, 544, 197, 0, 535, 0, 517, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 1863, 0, 518, 520, 0, 519, 521, 91,
	92, 93, 94, 545, 95, 546, 547, 0, 96, 0,
	97, 0, 0, 0, 538, 99, 0, 100, 0, 0,
	0, 490, 101, 102, 526, 504, 0, 0, 103, 104,
	548, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	536, 0, 206, 0, 108, 109, 532, 534, 387, 0,
	112, 0, 110, 0, 386, 111, 549, 550, 551, 552,
	0, 516, 0, 388, 113, 389, 114, 115, 0, 0,
	537, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	480, 127, 505, 533, 129, 553, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 527, 134,
	135, 136, 0, 528, 137, 220, 138, 0, 139, 140,
	141, 554, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 494, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 522, 157, 158, 396, 159, 555,
	225, 160, 0, 166, 161, 162, 163, 165, 556, 164,
	529, 0, 167, 0, 168, 169, 0, 228, 557, 558,
	0, 0, 170, 530, 531, 503, 171, 172, 1862, 174,
	0, 0, 175, 176, 177, 523, 0, 178, 179, 180,
	233, 559, 0, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 481, 0, 509, 498, 499, 496, 497,
	485, 0, 0, 0, 477, 478, 0, 0, 0, 0,
	479, 74, 75, 486, 76, 0, 0, 0, 0, 525,
	491, 0, 0, 0, 77, 78, 1861, 539, 189, 540,
	79, 541, 542, 0, 80, 193, 194, 81, 506, 524,
	543, 544, 197, 0, 535, 0, 517, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	1863, 0, 518, 520, 0, 519, 521, 91, 92, 93,
	94, 545, 95, 546, 547, 0, 96, 0, 97, 0,
	0, 0, 538, 99, 0, 100, 0, 0, 0, 490,
	101, 102, 526, 504, 0, 0, 103, 104, 548, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 536, 0,
	206, 0, 108, 109, 532, 534, 387, 0, 112, 0,
	110, 0, 386, 111, 549, 550, 551, 552, 0, 516,
	0, 388, 113, 389, 114, 115, 0, 0, 537, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 480, 127,
	505, 533, 129, 553, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 393, 133, 394, 527, 134, 135, 136,
	0, 528, 137, 220, 138, 0, 139, 140, 141, 554,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 494, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 522, 157, 158, 396, 159, 555, 225, 160,
	0, 166, 161, 162, 163, 165, 556, 164, 529, 0,
	167, 0, 168, 169, 0, 228, 557, 558, 0, 0,
	170, 530, 531, 503, 171, 172, 1862, 174, 0, 0,
	175, 176, 177, 523, 0, 178, 179, 180, 233, 559,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 481, 0, 509, 498, 499, 496, 497, 485, 0,
	0, 0, 477, 478, 0, 0, 0, 0, 479, 74,
	75, 486, 76, 0, 0, 0, 0, 525, 491, 0,
	0, 0, 77, 78, 187, 539, 189, 540, 79, 541,
	542, 0, 80, 193, 194, 81, 506, 524, 543, 544,
	197, 0, 535, 0, 517, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 384, 89, 90, 0,
	518, 520, 0, 519, 521, 91, 92, 93, 94, 545,
	95, 546, 547, 0, 96, 0, 97, 0, 0, 0,
	538, 99, 0, 100, 0, 0, 0, 490, 101, 102,
	526, 504, 0, 0, 103, 104, 548, 0, 105, 0,
	106, 0, 0, 385, 0, 107, 536, 0, 206, 0,
	108, 109, 532, 534, 387, 0, 112, 0, 110, 0,
	386, 111, 549, 550, 551, 552, 0, 516, 0, 388,
	113, 389, 114, 115, 0, 0, 537, 390, 116, 391,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 392, 124, 125, 128, 126, 480, 127, 505, 533,
	129, 553, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 393, 133, 394, 527, 134, 135, 136, 0, 528,
	137, 220, 138, 0, 139, 140, 141, 554, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 395, 149, 150,
	494, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	522, 157, 158, 396, 159, 555, 225, 160, 0, 166,
	161, 162, 163, 165, 556, 164, 529, 0, 167, 0,
	168, 169, 0, 228, 557, 558, 0, 0, 170, 530,
	531, 503, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 523, 0, 178, 179, 180, 233, 559, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 481,
	0, 509, 498, 499, 496, 497, 485, 0, 0, 0,
	477, 478, 0, 0, 0, 0, 479, 74, 75, 486,
	76, 0, 0, 0, 0, 525, 491, 0, 0, 0,
	77, 78, 187, 539, 189, 540, 79, 541, 542, 0,
	80, 193, 194, 81, 506, 524, 543, 544, 197, 0,
	535, 0, 517, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 384, 89, 90, 0, 518, 520,
	0, 519, 521, 91, 92, 93, 94, 545, 95, 546,
	547, 0, 96, 0, 97, 0, 0, 0, 538, 99,
	0, 100, 0, 0, 0, 490, 101, 102, 526, 504,
	0, 0, 103, 104, 548, 0, 105, 0, 106, 0,
	0, 385, 0, 107, 536, 0, 206, 0, 108, 109,
	532, 534, 387, 0, 112, 0, 110, 0, 386, 111,
	549, 550, 551, 552, 0, 516, 0, 388, 113, 389,
	114, 115, 0, 0, 537, 390, 116, 391, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 392,
	124, 125, 128, 126, 0, 127, 505, 533, 129, 553,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 393,
	133, 394, 527, 134, 135, 136, 0, 528, 137, 220,
	138, 0, 139, 140, 141, 554, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 395, 149, 150, 1181, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 522, 157,
	158, 396, 159, 555, 225, 160, 0, 166, 161, 162,
	163, 165, 556, 164, 529, 0, 167, 0, 168, 169,
	0, 228, 557, 558, 0, 0, 170, 530, 531, 503,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 523,
	0, 178, 179, 180, 233, 559, 0, 0, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 1177, 1178,
	0, 0, 0, 0, 1179, 74, 75, 1180, 76, 0,
	0, 0, 0, 525, 0, 0, 0, 0, 77, 78,
	187, 188, 189, 190, 79, 191, 192, 0, 80, 193,
	194, 81, 0, 524, 195, 196, 197, 0, 535, 0,
	517, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 384, 89, 90, 0, 518, 520, 0, 519,
	521, 91, 92, 93, 94, 199, 95, 200, 201, 0,
	96, 0, 97, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 202, 101, 102, 526, 0, 0, 0,
	103, 104, 204, 0, 105, 0, 106, 0, 0, 385,
	0, 107, 536, 0, 206, 0, 108, 109, 532, 534,
	387, 0, 112, 0, 110, 0, 386, 111, 209, 210,
	211, 212, 0, 213, 0, 388, 113, 389, 114, 115,
	0, 0, 537, 390, 116, 391, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 392, 124, 125,
	128, 126, 0, 127, 0, 533, 129, 216, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 393, 133, 394,
	527, 134, 135, 136, 0, 528, 137, 220, 138, 0,
	139, 140, 141, 221, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 395, 149, 150, 222, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 522, 157, 158, 396,
	159, 224, 225, 160, 0, 166, 161, 162, 163, 165,
	226, 164, 529, 0, 167, 0, 168, 169, 0, 228,
	229, 230, 0, 0, 170, 530, 531, 0, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 523, 0, 178,
	179, 180, 233, 234, 0, 0, 181, 378, 0, 0,
	0, 182, 183, 184, 185, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 1634, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 383, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	384, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 385, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 387, 0,
	112, 0, 110, 0, 386, 111, 209, 210, 211, 212,
	0, 213, 0, 388, 113, 389, 114, 115, 0, 0,
	214, 390, 116, 391, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 392, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 393, 133, 394, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 395, 149, 150, 222, 151, 0, 152, 153, 154,
	61, 223, 155, 156, 0, 157, 158, 396, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 63, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	382, 234, 0, 0, 181, 0, 0, 0, 59, 182,
	183, 184, 185, 0, 60, 378, 781, 0, 782, 777,
	772, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 58, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 383, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 785, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 774, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 387, 0, 112, 0,
	110, 0, 386, 111, 209, 210, 211, 212, 0, 213,
	0, 388, 113, 389, 114, 115, 0, 0, 214, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 775, 0, 0,
	0, 132, 217, 393, 133, 394, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 396, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 773, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	378, 781, 181, 782, 777, 772, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 783, 778, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 383, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 384, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	768, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 774, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	385, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 387, 0, 112, 0, 110, 0, 386, 111, 209,
	210, 211, 212, 0, 213, 0, 388, 113, 389, 114,
	115, 0, 0, 214, 390, 116, 391, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 392, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 775, 0, 0, 0, 132, 217, 393, 133,
	394, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 395, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	396, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 773, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 378, 781, 181, 782, 777,
	772, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 783, 778, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 383, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 384, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 774, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 385, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 387, 0, 112, 0,
	110, 0, 386, 111, 209, 210, 211, 212, 0, 213,
	0, 388, 113, 389, 114, 115, 0, 0, 214, 390,
	116, 391, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 392, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 775, 0, 0,
	0, 132, 217, 393, 133, 394, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 395,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 396, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 773, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	71, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 783, 778, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 341, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 61, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 63, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 382, 234, 0, 0, 181, 71, 0,
	0, 59, 182, 183, 184, 185, 0, 60, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 1081, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 61, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 63, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 382, 234, 0, 0, 181, 71, 0, 0, 59,
	182, 183, 184, 185, 0, 60, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 1313, 0, 58, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	93, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 0, 0, 112,
	0, 110, 0, 0, 111, 209, 210, 211, 212, 0,
	213, 0, 0, 113, 0, 114, 115, 0, 0, 214,
	0, 116, 0, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 0, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 0, 133, 0, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	0, 149, 150, 222, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 0, 157, 158, 0, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 0, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 0, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 233,
	234, 0, 0, 181, 0, 71, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 467, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 341, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 0, 181, 71, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 1081, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 0,
	181, 0, 71, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	590, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 0, 0, 181,
	71, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 987, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 0, 0, 181, 71, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 1532, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 0, 0, 181, 71, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	186, 0, 0, 0, 570, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 0, 80, 193, 194, 81, 0,
	0, 195, 196, 197, 0, 198, 0, 0, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 0,
	89, 90, 0, 0, 0, 0, 0, 0, 91, 92,
	752, 94, 199, 95, 200, 201, 0, 96, 0, 97,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	202, 101, 102, 203, 0, 0, 0, 103, 104, 204,
	0, 105, 0, 106, 0, 0, 0, 0, 107, 205,
	0, 206, 0, 108, 109, 207, 208, 0, 0, 112,
	0, 110, 0, 0, 111, 209, 210, 211, 212, 0,
	213, 0, 0, 113, 0, 114, 115, 0, 0, 214,
	0, 116, 0, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 0, 124, 125, 128, 126, 0,
	127, 0, 215, 129, 216, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 0, 133, 0, 218, 134, 135,
	136, 0, 219, 137, 220, 138, 0, 139, 140, 141,
	221, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	0, 149, 150, 222, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 0, 157, 158, 0, 159, 224, 225,
	160, 0, 166, 161, 162, 163, 165, 226, 164, 227,
	0, 167, 751, 168, 169, 0, 228, 229, 230, 0,
	0, 170, 231, 232, 0, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 0, 0, 178, 179, 180, 233,
	234, 0, 71, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 755, 186, 0, 0, 0,
	0, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 0, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 0, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 0, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 0, 0, 112, 0, 110, 0, 0,
	111, 209, 210, 211, 212, 0, 213, 0, 0, 113,
	0, 114, 115, 0, 0, 214, 0, 116, 0, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	0, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	0, 133, 0, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 0, 149, 150, 222,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 0,
	157, 158, 0, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 0, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 233, 234, 0, 378, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 755, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 383,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 384, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 385, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 387,
	0, 112, 0, 110, 0, 386, 111, 209, 210, 211,
	212, 0, 213, 0, 388, 113, 389, 114, 115, 0,
	0, 214, 390, 116, 391, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 392, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 393, 133, 394, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 395, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 396, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 953, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 951, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 1056, 0, 103, 104, 204, 0, 105, 0,
	106, 956, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 1054, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 955, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 1055, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 953, 198, 0, 0,
	948, 82, 83, 84, 0, 85, 951, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 956, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 947, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 955, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 954, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 1313,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 341, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 703, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 341, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 403, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 346, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 341, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 258, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 257, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 1227, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 1225, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 1214, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 819, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 272, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 688,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 0, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 452, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 448, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 409, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 283, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 282, 229,
	230, 0, 0, 278, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	283, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 282, 229, 230, 0, 0, 278, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 374, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 371, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 368, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 366, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 349, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 330, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 275, 0, 0, 118,
	0, 119, 120, 121, 122, 283, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 277, 151, 0, 152, 153,
	154, 0, 223, 155, 276, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 282, 229,
	230, 0, 0, 278, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 0, 0, 219,
	137, 220, 138, 0, 139, 0, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 0, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 848, 0, 879, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 847, 0, 0, 0, 0, 848, 862,
	879, 0, 0, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 847,
	868, 0, 0, 0, 0, 862, 0, 848, 0, 879,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 853, 847, 0,
	0, 0, 0, 0, 862, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	872, 880, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 869, 0, 872,
	880, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 870, 0, 0, 0, 0, 0,
	863, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 0, 0,
	0, 0, 0, 1411, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 0, 0, 0, 1369, 1370, 1410,
	1387, 1388, 1389, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 0, 845, 846, 1409, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 0, 0, 1384, 0, 848,
	0, 879, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	847, 0, 0, 0, 0, 848, 862, 879, 0, 0,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 1375, 847, 868, 0, 0,
	0, 0, 862, 0, 848, 0, 879, 0, 0, 0,
	0, 0, 0, 1391, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 853, 847, 0, 1390, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 872, 880, 1385, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 872, 880, 0,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 0, 869, 0, 872, 880, 863, 0,
	1386, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 870, 0, 0, 0, 0, 0, 863, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	1381, 1382, 1383, 0, 1380, 1377, 1378, 1379, 1371, 1372,
	1373, 1374, 1376, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 0, 0, 0, 0, 0, 0,
	1362, 0, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 1369, 1370, 1814, 1387, 1388, 1389, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 1663, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 0,
	845, 846, 1812, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 0, 0,
	0, 1384, 0, 848, 0, 879, 845, 846, 0, 865,
	866, 867, 875, 876, 877, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 847, 0, 0, 0, 0, 848,
	862, 879, 0, 0, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 1375,
	847, 868, 0, 0, 0, 0, 862, 0, 848, 0,
	879, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 853, 847,
	0, 1390, 0, 0, 0, 862, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 880, 1385, 0, 0,
	0, 0, 0, 0, 853, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 872, 880, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 870, 0, 869, 0,
	872, 880, 863, 0, 1386, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 869, 870, 0, 0, 0, 0,
	0, 863, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 1381, 1382, 1383, 0, 1380, 1377,
	1378, 1379, 1371, 1372, 1373, 1374, 1376, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 0,
	0, 1793, 0, 0, 0, 0, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 0, 1369, 1370, 1768, 1387, 1388,
	1389, 0, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 1514, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 845, 846, 1763, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 0, 1384, 0, 848, 0, 879,
	845, 846, 0, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 847, 0,
	0, 0, 0, 848, 862, 879, 0, 0, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 1375, 847, 868, 0, 0, 0, 0,
	862, 0, 848, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 853, 847, 0, 1390, 0, 0, 0, 862,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	880, 1385, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 872, 880, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 869, 0, 872, 880, 863, 0, 1386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 870,
	0, 0, 0, 0, 0, 863, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 1381, 1382,
	1383, 0, 1380, 1377, 1378, 1379, 1371, 1372, 1373, 1374,
	1376, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 1759, 0, 0, 0, 0,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 1369,
	1370, 1694, 1387, 1388, 1389, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 1513, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 845, 846,
	1693, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 1384,
	0, 848, 0, 879, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 847, 0, 0, 0, 0, 848, 862, 879,
	0, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 1375, 847, 868,
	0, 0, 0, 0, 862, 0, 848, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 847, 0, 1390,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 1385, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 872,
	880, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 869, 0, 872, 880,
	863, 0, 1386, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 870, 0, 0, 0, 0, 0, 863,
	0, 864, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 1381, 1382, 1383, 0, 1380, 1377, 1378, 1379,
	1371, 1372, 1373, 1374, 1376, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 0, 0, 1601,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 1535, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 0, 845, 846, 1519, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 848, 0, 879, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 847, 0, 0, 0,
	0, 848, 862, 879, 0, 0, 0, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 847, 868, 0, 0, 0, 0, 862, 0,
	848, 0, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 847, 0, 0, 0, 0, 0, 862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 872, 880, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 870, 872, 880, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 853, 1882, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 0,
	869, 0, 872, 880, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 869, 870, 0, 0,
	0, 0, 0, 863, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 1881, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 1136, 0, 0, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 848, 0,
	879, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 847,
	0, 0, 1069, 0, 848, 862, 879, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 847, 0, 0, 0, 0,
	0, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 1401, 0, 0, 1400, 1070,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 872, 880, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 869, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 873,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 864, 0, 0, 868, 0, 0,
	0, 881, 0, 0, 848, 873, 879, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 847, 0, 0, 0, 0,
	848, 862, 879, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 847, 874, 0, 0, 0, 0, 862, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 872, 880, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 869,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 325, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	864, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	848, 873, 879, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 847, 0, 0, 0, 0, 848, 862, 879, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 847, 874, 0,
	0, 0, 0, 862, 0, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874, 853, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 1407, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 872, 880,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 869, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 864, 0, 0, 868,
	1529, 0, 0, 1402, 0, 0, 848, 873, 879, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 847, 0, 0,
	0, 0, 848, 862, 879, 0, 0, 871, 0, 0,
	859, 860, 861, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 847, 874, 0, 0, 0, 0, 862,
	0, 0, 0, 871, 0, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 853, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 872, 880, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 869, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 1367, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 864, 0, 0, 868, 0, 0, 0, 1361,
	0, 0, 848, 873, 879, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 847, 0, 0, 0, 0, 848, 862,
	879, 0, 0, 871, 0, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 847,
	874, 0, 0, 0, 0, 862, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 853, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 880, 0, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	872, 880, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 869, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 864, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 848, 873,
	879, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	0, 0, 0, 0, 848, 862, 879, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 847, 874, 0, 0, 0,
	0, 862, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 872, 880, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 0, 0, 0, 0, 863, 0, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 879, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 847, 0, 0, 0, 0, 0, 862,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 871, 0, 853, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 872, 880, 0, 0, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 870,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874,
}
var sqlPact = [...]int{

	3127, -1000, 21, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 714, 16029, -1000, -1000,
	-1000, -1000, -1000, 778, 593, 848, 16029, 16029, 15764, 914,
	914, 17354, -1000, -1000, 20534, -1000, 2822, 425, 447, 425,
	425, 452, 17354, 511, 599, 153, -1000, 953, -21, 20269,
	16029, 1242, 17, 14704, 278, 3127, 15499, 20004, 16029, 268,
	27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1105, 968, 956, 14704, 19739,
	19474, 19209, 18944, -1000, 9893, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 510, 296, 291, -1000, 15234, -1000, 817,
	-1000, 16, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	816, -1000, 16029, -1000, -1000, 18679, 18414, 289, 742, -1000,
	-1000, 493, 356, 1265, -1000, 31, -1000, -1000, 1102, -1000,
	806, 1100, 1099, 1098, 1096, 1094, 1092, 354, 800, -1000,
	508, 742, -1000, 742, -1000, -1000, -1000, 496, 17354, -1000,
	14704, -1000, 18149, 16029, 1017, 17884, -1000, 953, -1000, -1000,
	-1000, 879, 1241, 1241, 1241, 1270, 121, 120, 153, 4,
	16029, -1000, 285, 4, 7120, 7120, -1000, -1000, 278, -1000,
	311, 12844, -1000, 7676, -1000, 952, 1151, 400, 570, 1150,
	-151, 670, 538, 12039, 27, -1000, -1000, -1000, 9069, 4261,
	14704, 16029, 16029, 557, 17619, -1000, 1149, 105, 1148, -1000,
	98, 1147, -1000, 98, 1146, -17, -1000, -1000, -1000, -1000,
	-1000, -1000, 278, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 14969, 1322, 3700,
	-1000, 9069, -1000, -1000, 13112, 787, 13112, -1000, -1000, 1321,
	-1000, 9069, -1000, 15, 14, 940, 939, 10436, 10171, 1203,
	884, -1000, -1000, -1000, 28, 4537, 16029, 1117, 13112, 16029,
	16029, 16029, 16029, 16029, 16029, -1000, 937, -1000, 16029, -1000,
	13, 11, -1000, 17354, -1000, 107, -1000, 274, 903, 128,
	17089, 1162, 900, -1000, 879, -1000, 822, 932, 8235, 9069,
	153, -1000, -1000, 153, 153, 9069, -1000, -1000, 16029, 4,
	1320, 16029, 80, -1000, 23351, -1000, -1000, 9069, 9069, 9069,
	9069, 9069, 746, -1000, -1000, -1000, 5389, -1000, -1000, 27,
	273, 303, -1000, -1000, 270, 27, -1000, -1000, -1000, -1000,
	269, 1392, 403, -1000, -1000, -1000, 9069, 360, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1113, 267, 266,
	-1000, -1000, -1000, -1000, 262, 261, 254, 252, 250, 249,
	247, 241, 240, 237, 236, 235, 234, 232, 703, -1000,
	375, -1000, -1000, 375, 375, -1000, 226, 226, 228, -1000,
	-1000, -1000, -1000, 226, -1000, -1000, -1000, 346, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 229, 80, -1000, -1000, -1000,
	16029, -18, -1000, 24025, -1000, -11, 671, -1000, 14174, 1232,
	1222, 1212, 14704, 1284, 1275, 494, 16029, 16029, 491, -1000,
	1090, -19, -1000, -1000, 2845, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 364, 83, 1318, 83, 12308, -1000, 16029, 16029,
	-1000, 16029, -1000, -1000, 16029, -1000, 16029, 16029, -1000, 16029,
	439, 13644, 643, 1145, -21, -23, -1000, 1326, -1000, -1000,
	-1000, -1000, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 228, 703, 226,
	226, 226, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 346,
	-1000, -1000, 375, 375, 375, -1000, -1000, -29, 24025, 490,
	-8, 13378, 16029, -1000, 2, -1000, -1000, 1089, 424, -35,
	682, 1002, 824, -1000, -1000, -1000, -1000, 1, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1373, -1000,
	-1000, -1000, -1000, 1381, 1, -1000, -1000, -1000, -1000, -1000,
	1391, -1000, -1000, -1000, 4537, -1000, -1000, -1000, 16029, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 682, 1002,
	-1000, -1000, 14704, 13909, 1314, 1144, 1312, 16029, 801, 891,
	-1000, -1000, 337, 1143, -1000, -1000, -1000, -1000, 24025, -1000,
	24025, 647, 1007, -1000, 1007, -5, -1000, 23161, -1000, 225,
	-40, -1000, 364, 7120, 11771, 3700, 3700, 16029, 502, 9069,
	9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069,
	9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069, 9069,
	9069, 898, 9069, 489, 9069, 9069, 9069, 9069, 973, 738,
	214, 4537, -1000, 604, 604, 604, 24241, 24241, 195, 0,
	22792, -7, 27, -1000, -1000, 6839, 6541, 27, 4813, -1000,
	553, 1380, 371, 24025, 1123, 1063, 224, 116, 115, 9069,
	9069, 627, 9069, 9347, 9069, 9069, 5667, 9069, 9069, 9069,
	9069, 9069, 9069, -1000, 223, -1000, -1000, -1000, -1000, 1379,
	-1000, -1000, 1378, -1000, 501, 500, 1377, 364, 114, 7676,
	-1000, 643, 16029, 16029, 16029, -1000, -1000, 874, 16824, 873,
	3700, 16029, -1000, 221, 219, 958, 955, 16029, 16029, 16559,
	16294, 16029, 639, 217, 216, 16029, 664, -1000, 16029, 522,
	1088, 16029, -1000, 9069, 575, 9069, 658, -1000, 11234, 381,
	16029, 590, 69, -1000, -1000, -1000, 336, 16029, -1000, -1000,
	-1000, 105, -1000, 98, 98, -1000, -1000, 14704, -1000, -1000,
	-1000, -1000, -1000, -1000, 3700, 305, 304, -1000, 1376, 485,
	-1000, 482, 479, 477, -1000, 215, -1000, 9069, 16029, 13378,
	-8, -9, -1000, -1000, 16029, 1002, -1000, -1000, -1000, -1000,
	619, -1000, 652, -1000, 10701, -1000, -1000, -1000, 553, -1000,
	-13, -1000, -1000, -1000, -1000, 113, -42, -10, 3700, -1000,
	-1000, -1000, -1000, -1000, 16029, 263, 16029, -21, 16029, -21,
	16029, 1142, 1390, 16029, -1000, -1000, -1000, 9069, -1000, -1000,
	-1000, -21, 16029, -1000, 1059, -1000, -107, 1610, -157, 14439,
	-1000, 10966, -1000, -1000, -1000, 353, 902, 902, 413, 413,
	413, 413, 184, 184, 1880, 2998, 3155, 3155, 3155, 2323,
	1915, 1915, 3155, 3155, 3155, 24241, 24215, 634, 9069, 9069,
	472, 727, 214, 634, 9069, 1355, 634, 634, 634, -1000,
	1082, -1000, -1000, -1000, 1085, 212, 9347, 9347, -1000, -1000,
	-1000, 5389, -1000, -1000, 208, 9069, -1000, 9069, -48, -90,
	-1000, -1000, -49, -1000, -1000, -30, 9069, 9069, 9069, 112,
	-1000, 111, 554, -1000, 9069, 728, 206, 204, 9069, -1000,
	-1000, 23999, 21416, 109, 1081, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 102, 23809, 100, 21387, -1000, 9347, 9347, 9347,
	5389, 198, 95, 23135, -88, 23783, 7954, 7954, 7954, 94,
	23593, 9069, -88, 21124, 21095, 21069, -57, -67, -68, 1375,
	-69, 93, 349, 345, 88, 1059, -1000, -1000, -1000, -1000,
	470, 469, 1139, -1000, 870, -1000, 386, -1000, 676, 9069,
	16029, 196, 194, 685, -1000, 1138, 840, 1135, 840, -1000,
	-11, 653, 9069, 9069, -1000, 466, -1000, -1000, 521, -1000,
	22818, -1000, 7120, 24025, -1000, 583, 1214, -73, -1000, -1000,
	7120, 364, 12308, 11771, 7676, -74, -1000, -1000, -1000, 643,
	-1000, 483, 1367, 87, 892, 722, 723, 559, 1364, 24025,
	-13, -1000, -13, -1000, -1000, -1000, -1000, -1000, -1000, 16029,
	1020, -1000, 13909, 189, 16029, 185, -1000, 182, -1000, 180,
	16029, -1000, 1162, -1000, 86, -1000, 1046, 1254, -1000, 11771,
	823, 986, 984, 11771, 971, 715, 715, 715, -1000, 14439,
	3974, -1000, -1000, 16029, 171, 11502, 85, 1610, 9069, 634,
	634, 9069, 9347, 9347, -1000, 634, -1000, -1000, -1000, -1000,
	1074, 168, 9069, 3700, 22419, 22075, -75, 6243, -14, 22503,
	-1000, -1000, 303, -1000, 81, 7398, -1000, 23377, -15, -15,
	-1000, 1389, 1157, -1000, 9069, 23567, -1000, 12576, 368, 753,
	22474, 3700, 3700, -1000, 9069, -1000, 1072, 9069, -1000, 3700,
	3700, 9347, 9347, 9347, 9347, 9347, 9347, 9347, 9347, 9347,
	9347, 9347, 9347, 9347, 9347, 9347, 9347, 9347, 9347, 9347,
	920, 9347, 1353, 1353, 1353, -16, 5945, -1000, 1109, 1072,
	9069, 9069, 3700, 79, 77, 75, -1000, 9069, -88, 9069,
	9069, 9069, -1000, -1000, -1000, 71, -1000, 1360, -1000, -1000,
	-1000, -1000, 1046, 16029, 16029, 16029, 1133, -1000, 2610, -1000,
	22448, -79, 16029, 16029, -1000, 969, 972, 418, 16029, -1000,
	16029, -1000, 16029, 16029, 16029, -80, -81, 16029, -1000, -1000,
	-34, 7120, 193, -21, -34, 575, -1000, -33, -1000, 332,
	-1000, 301, 298, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 58, -1000, -1000, 1029, -1000, 9625, 164, 16029, 13909,
	1303, 9625, 795, -1000, -1000, 351, 9069, 9069, 1610, 495,
	11771, 11771, 1058, 966, 11771, -1000, -1000, -1000, -1000, -1000,
	-1000, 965, 161, 16029, 14439, 565, 634, 21731, 2809, 9069,
	3700, 24389, -86, 9069, 9069, -1000, -91, -1000, 9069, -1000,
	-1000, 1386, 9069, 56, 55, 54, -1000, -1000, 24025, 9069,
	-1000, -1000, 20799, 9069, 50, -1000, 48, 47, 24025, 1109,
	24025, -1000, -1000, 534, 534, 1353, 1353, 1353, 1353, 2208,
	2208, 317, 2314, 1709, 1709, 1709, 2415, 389, 389, 1709,
	1709, 1709, 1070, 988, 159, 473, 9069, -93, -1000, -1000,
	-1000, 24025, 24025, 46, -1000, -1000, -1000, -88, 2965, 22159,
	22130, -1000, 45, 351, -1000, -1000, -1000, 16029, -1000, 16029,
	-1000, 16029, 16029, 1067, 859, -1000, -1000, 954, 157, 9347,
	16029, -1000, 711, -97, -98, 846, -1000, 831, 9069, -1000,
	3700, 840, 840, -1000, 460, 457, -1000, -1000, -1000, -34,
	1167, 16029, 1211, -1000, -1000, 156, -1000, -1000, -1000, 713,
	-99, -1000, 211, 1235, 9069, -1000, -1000, 155, 9625, -103,
	43, -21, -112, 16029, -1000, 16029, 24025, -88, 486, -1000,
	1058, -1000, 150, 9069, 11771, -1000, -161, -1000, 320, -1000,
	16029, -113, -1000, 9069, 9069, 24389, -117, -1000, 634, 634,
	-1000, 22104, -1000, 23377, -1000, -1000, -1000, 24025, 708, -1000,
	21815, -1000, -1000, -1000, -1000, 9347, 1069, 149, 3700, 21786,
	-1000, -1000, 9069, -1000, -1000, -1000, -1000, -1000, 784, -1000,
	-1000, 16029, 867, -1000, -1000, 9069, 473, 143, 1020, 142,
	-1000, -1000, -1000, 629, -1000, -1000, 24025, 1238, -1000, -1000,
	16029, 16029, 487, -121, 16029, -1000, -1000, 5111, 16029, 711,
	9625, 1234, 27, 16029, 1234, 21760, 4813, -125, -1000, 1020,
	-1000, 711, 140, -54, -1000, 1290, 1385, -1000, 16029, 24025,
	-1000, 965, -1000, 4537, -127, -1000, 634, 634, -1000, -1000,
	42, 753, 1250, -1000, 2356, 9347, 3700, -131, -1000, 21471,
	-1000, -1000, 1132, 21442, 921, 16029, -1000, 16029, 16029, 391,
	16029, -1000, -1000, 552, -1000, 364, -1000, 138, 1020, -1000,
	-1000, -1000, -1000, 1235, -30, 711, -1000, 1020, 9625, 16029,
	136, -1000, -132, -1000, -1000, -1000, -1000, 628, 9069, 2356,
	-136, -1000, -1000, 1126, -1000, 781, 659, 40, -138, 128,
	-1000, 9069, -1000, 12308, -1000, 16029, -1000, 1234, 35, 1020,
	-1000, -142, -1000, -1000, -1000, 33, 8791, 8791, -88, -1000,
	16029, -1000, 794, 788, 578, -1000, -1000, -1000, -1000, -1000,
	921, 24025, -126, -143, -1000, -1000, -1000, 711, -1000, -1000,
	-1000, 3456, 776, 582, 22847, -1000, -1000, -1000, 1180, -1000,
	398, 786, 786, 781, -1000, 821, 1020, 1331, -1000, -1000,
	-1000, -1000, -1000, -1000, 1340, -1000, -1000, 923, -1000, -1000,
	-1000, -1000, -1000, -1000, 8513, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1605, 1604, 1277, 119, 1600, 116, 1599, 1598, 1596,
	1595, 1594, 97, 114, 104, 121, 1587, 78, 1586, 1585,
	1584, 96, 1583, 1582, 1581, 120, 1580, 1579, 1577, 1576,
	1575, 1573, 86, 35, 134, 2306, 129, 1571, 1569, 1566,
	12, 89, 55, 1564, 74, 1563, 1559, 52, 88, 100,
	1096, 24, 1558, 1554, 128, 30, 15, 307, 91, 138,
	131, 113, 1553, 1552, 1551, 36, 1550, 3, 1546, 1544,
	10, 48, 27, 1543, 20, 66, 1542, 1541, 118, 1539,
	65, 84, 103, 25, 109, 90, 1537, 56, 7, 75,
	1536, 31, 1534, 46, 70, 125, 1532, 40, 141, 54,
	23, 51, 1524, 1522, 1521, 1519, 72, 1518, 82, 59,
	1517, 1515, 58, 1514, 124, 127, 1513, 1510, 117, 1509,
	1497, 1490, 640, 1489, 1486, 322, 1485, 9, 41, 57,
	17, 101, 99, 22, 1484, 18, 1483, 1379, 811, 893,
	1482, 47, 32, 73, 43, 50, 44, 1481, 1478, 95,
	1477, 1476, 1475, 1473, 1472, 71, 1470, 63, 130, 33,
	49, 85, 26, 111, 77, 93, 142, 98, 1469, 1468,
	110, 1465, 253, 1464, 1460, 1162, 105, 1456, 1455, 1454,
	1074, 1071, 616, 186, 1453, 1452, 263, 257, 1451, 1449,
	107, 1446, 1442, 136, 126, 21, 1440, 108, 1437, 83,
	1436, 0, 92, 81, 1435, 112, 62, 1432, 1430, 1429,
	1423, 19, 2, 8, 5, 6, 4, 29, 11, 1422,
	1421, 123, 79, 1420, 139, 1419, 1418, 1417, 34, 1416,
	16, 1413, 13, 1406, 1404, 14, 1, 135, 1402, 87,
	1401, 1329, 1400, 137, 1399, 1398, 1296, 76,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 46, 46, 43, 43, 38, 38, 5, 5, 5,
	6, 6, 6, 6, 6, 12, 13, 13, 13, 13,
	13, 13, 13, 13, 84, 84, 83, 83, 86, 86,
	14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	171, 171, 170, 16, 147, 147, 17, 17, 17, 17,
	18, 107, 107, 19, 19, 19, 19, 20, 24, 237,
	237, 237, 241, 241, 242, 242, 243, 243, 243, 243,
	243, 243, 243, 239, 239, 27, 27, 27, 27, 27,
	126, 122, 122, 124, 124, 124, 124, 49, 121, 121,
	121, 121, 123, 123, 123, 123, 194, 193, 193, 199,
	199, 199, 62, 62, 62, 62, 62, 63, 63, 63,
	192, 192, 192, 192, 200, 200, 200, 200, 200, 200,
	64, 64, 64, 198, 198, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 238, 238, 240, 240, 29, 29, 9, 9,
	10, 10, 65, 65, 66, 66, 129, 129, 129, 129,
	67, 67, 45, 45, 45, 128, 209, 209, 210, 210,
	210, 210, 210, 210, 211, 211, 211, 211, 211, 211,
	211, 207, 207, 208, 205, 205, 206, 206, 206, 206,
	244, 244, 127, 127, 70, 70, 214, 214, 214, 214,
	212, 212, 212, 212, 212, 215, 213, 216, 216, 216,
	216, 216, 158, 158, 158, 31, 11, 8, 8, 111,
	111, 74, 74, 162, 162, 162, 56, 56, 40, 40,
	40, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	112, 112, 113, 113, 22, 26, 30, 30, 30, 30,
	30, 246, 246, 53, 53, 53, 53, 54, 54, 125,
	125, 125, 125, 125, 48, 7, 7, 47, 47, 21,
	21, 21, 21, 21, 59, 59, 118, 118, 118, 120,
	120, 119, 119, 119, 97, 97, 32, 79, 79, 88,
	88, 89, 89, 168, 90, 90, 25, 25, 35, 35,
	33, 33, 33, 33, 33, 33, 34, 34, 36, 36,
	36, 36, 36, 36, 36, 222, 222, 222, 224, 224,
	221, 223, 223, 245, 245, 98, 98, 98, 69, 68,
	68, 72, 72, 71, 73, 73, 161, 95, 95, 95,
	95, 114, 115, 115, 116, 116, 117, 117, 94, 94,
	144, 144, 37, 37, 78, 78, 80, 80, 135, 135,
	136, 136, 134, 134, 134, 163, 163, 163, 163, 164,
	164, 164, 164, 164, 164, 159, 159, 159, 159, 160,
	160, 169, 169, 101, 101, 101, 101, 99, 99, 100,
	100, 165, 165, 165, 165, 96, 96, 166, 166, 166,
	130, 130, 172, 172, 172, 77, 77, 77, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 174, 174, 174, 174, 176, 176, 176, 175, 175,
	175, 175, 175, 175, 175, 175, 175, 175, 175, 175,
	175, 175, 177, 177, 184, 184, 185, 185, 186, 187,
	178, 178, 179, 179, 180, 181, 188, 188, 188, 188,
	190, 190, 182, 182, 182, 182, 182, 183, 108, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 109, 109, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 217, 217, 217, 217, 217,
	217, 217, 219, 219, 220, 220, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 225, 225, 226, 226, 228, 228, 229, 229,
	230, 231, 231, 231, 232, 233, 233, 227, 227, 234,
	234, 234, 235, 235, 236, 236, 236, 236, 236, 149,
	149, 149, 150, 150, 151, 85, 85, 146, 146, 145,
	145, 145, 148, 148, 102, 189, 189, 189, 189, 189,
	189, 189, 103, 103, 110, 104, 104, 105, 105, 105,
	105, 105, 105, 141, 142, 106, 106, 106, 143, 143,
	152, 156, 156, 155, 154, 154, 153, 153, 133, 133,
	133, 133, 132, 131, 91, 91, 247, 247, 157, 157,
	92, 92, 93, 87, 87, 167, 167, 167, 167, 81,
	81, 61, 61, 82, 82, 57, 57, 60, 58, 58,
	58, 58, 75, 75, 76, 76, 55, 55, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 191,
	191, 191, 50, 50, 50, 51, 51, 52, 52, 196,
	196, 196, 197, 197, 197, 197, 195, 195, 195, 195,
	195, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 6, 3, 5, 4, 6,
	4, 6, 4, 6, 1, 3, 1, 2, 2, 3,
	2, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	2, 4, 2, 0, 2, 0, 8, 8, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 4, 7, 3, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 2, 3, 1, 1, 1, 1, 3, 0,
	2, 0, 2, 3, 3, 0, 1, 3, 3, 1,
	1, 3, 2, 4, 0, 3, 2, 1, 4, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 1, 1, 3, 1, 1, 1,
	2, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 4, 1, 1, 1, 5, 1, 3, 1,
	3, 1, 1, 1, 1, 6, 6, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 1, 1,
	3, 5, 2, 2, 1, 2, 1, 0, 1, 1,
	1, 3, 3, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 1, 3, 1, 2, 3, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -223, 92, 100, 193, 99, 85, 115,
	207, 214, -33, -35, 222, -126, 223, 34, 232, 58,
	95, 209, 204, 253, 66, -222, -36, -34, 300, 275,
	281, 217, -37, 240, 267, 303, 240, 128, 78, -57,
	-50, 4, -201, -203, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	129, 132, 127, 141, 143, 144, 149, 152, 155, 157,
	158, 159, 160, 161, 163, 164, 166, 168, 165, 171,
	173, 174, 180, 183, 186, 187, 188, 191, 193, 195,
	196, 197, 199, 200, 204, 202, 203, 205, 207, 209,
	210, 212, 214, 215, 216, 219, 220, 222, 223, 225,
	228, 231, 232, 233, 236, 234, 230, 239, 241, 242,
	249, 253, 254, 255, 256, 259, 260, 261, 264, 265,
	266, 271, 276, 277, 278, 279, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 117, 119, 123, 124, 133,
	134, 135, 136, 138, 147, 170, 172, 181, 185, 190,
	192, 198, 211, 218, 226, 227, 235, 237, 244, 245,
	246, 250, 251, 267, 268, 87, 132, 261, 260, 78,
	128, 240, 270, -15, 300, -25, -6, -13, -4, -21,
	-32, -12, -14, 23, -50, -50, -50, 193, 22, -241,
	22, -242, -243, 66, 92, 115, 217, 132, 87, 260,
	-241, -54, 214, -50, -122, 152, 220, 211, 249, -123,
	-121, -194, 244, 161, -83, -50, 4, 78, 57, 79,
	116, 128, 129, 62, 63, 144, 241, 244, 249, 22,
	66, -246, 249, 249, -246, -246, -53, 249, 247, -54,
	-245, 240, 240, 270, -111, 78, 258, -34, -36, -35,
	-71, -72, 257, 137, 97, 179, -33, -35, -222, -224,
	199, -221, -50, -224, -68, -69, 22, 89, 304, -165,
	-57, 177, -93, 300, -3, -165, 123, -57, -60, 123,
	-57, -50, 113, 300, -91, -133, -132, -131, 298, 302,
	113, 139, 139, -166, -165, -50, 123, -61, 123, -60,
	-84, 123, -83, -84, 123, -171, -170, -197, 4, -201,
	-203, -202, 267, 55, 67, 114, 131, 125, 140, 142,
	148, 150, 162, 182, 184, 208, 224, 240, -147, 300,
	-107, 300, -50, 22, 176, 304, 176, -50, -122, 51,
	-122, 300, -124, -48, -49, 141, 195, 247, 285, 113,
	279, -64, 5, 84, -86, 302, 113, -238, 176, 113,
	113, 113, 113, 113, 113, 279, 141, 195, 240, -125,
	-48, -49, -125, 247, -54, -96, -165, -83, 123, -83,
	128, -50, 123, -71, -72, -95, -114, -115, 151, 175,
	-98, 22, 89, -98, -98, 43, 301, 301, 304, -224,
	-76, 300, -87, -167, -137, 293, -139, 291, 292, 297,
	167, 280, -149, -57, -140, 9, 300, -152, -219, -35,
	98, 29, -150, -151, 211, -50, 7, 8, 5, 6,
	-55, -174, -183, 252, 102, 169, 47, -217, -218, 4,
	-201, -196, -175, -185, -179, -182, 138, 55, 71, 74,
	72, 75, 221, 262, 48, 28, 101, 185, 190, 237,
	250, 251, 123, 170, 124, 53, 117, 147, 91, 36,
	38, 40, 41, 49, 50, 80, 82, 83, 107, 133,
	134, 135, 136, 172, 198, 226, 235, 245, 246, 268,
	-202, -186, -187, -180, -181, -188, -87, -93, 293, -57,
	300, -92, -157, -137, 84, -42, 202, -41, 21, 23,
	92, 265, 98, 230, 230, 202, 98, 305, 202, 233,
	301, -81, -57, -133, -137, -195, 293, 4, -201, -203,
	-202, -204, 22, 24, 25, 26, 27, 29, 30, 31,
	32, 42, 47, 48, 52, 54, 56, 62, 66, 70,
	71, 72, 73, 74, 75, 84, 86, 88, 89, 90,
	93, 95, 97, 102, 103, 104, 110, 112, 113, 115,
	118, 120, 126, 128, 130, 137, 139, 145, 146, 151,
	153, 154, 167, 169, 175, 176, 177, 178, 179, 189,
	194, 201, 206, 217, 221, 229, 238, 240, 243, 247,
	248, 252, 257, 258, 262, 263, 269, 270, 272, 273,
	274, 275, -166, -59, -57, -59, 222, -50, 30, 98,
	-44, 304, 46, 205, 98, -44, 304, 98, -44, 98,
	301, 304, -165, 123, 30, -146, -172, -173, -175, -184,
	-178, -182, -183, 39, 45, 44, 242, 218, 227, 37,
	133, 134, 135, 136, 226, 36, 198, 107, 91, 83,
	82, 172, 41, 40, -186, -187, -180, -181, 80, 245,
	246, 138, 38, 50, 49, 268, 235, -85, -137, -237,
	-82, 240, 78, -58, -50, 293, -243, -237, 30, -85,
	304, 304, 149, -63, 155, 166, 121, -193, 84, -199,
	-192, -158, 9, 252, 102, 176, -198, 8, 292, -191,
	-197, 5, 7, 291, -193, 84, 69, -200, 5, 4,
	-183, -158, 84, 152, 302, -195, -194, -240, 110, -237,
	-194, -194, -194, -194, -194, -50, 149, -194, 304, 304,
	-54, -44, 304, 300, -70, 167, -70, 300, -51, 123,
	-50, -47, 94, 167, -95, -115, -114, -116, -137, 22,
	-137, -139, -34, -34, -34, -73, -161, -137, -221, 30,
	-75, -50, -78, 304, 113, 10, 11, 54, 33, 291,
	292, 293, 294, 108, 295, 288, 289, 290, 287, 283,
	284, 285, 60, 156, 213, 13, 14, 15, 26, 178,
	150, 280, 125, 224, 297, 16, 17, 18, 140, 35,
	126, 30, 4, -137, -137, -137, -137, -137, 184, -35,
	-137, -85, -91, -35, -145, 298, 300, -91, 300, 5,
	5, 300, -153, -137, -225, 276, 110, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 192, -190, 271, -190, -190, -176, 300,
	-176, -177, 300, -176, 277, 281, 300, -78, -57, 304,
	301, 304, 247, -112, 62, 56, -128, 123, 56, -205,
	-50, 62, -206, 52, 258, 194, 112, -112, 62, -112,
	62, 62, -165, 33, 33, 247, -60, -50, 247, 113,
	301, 304, 299, 308, -130, 273, -118, -25, 300, 84,
	30, -118, -88, -89, -168, -90, -57, 300, -50, -50,
	-60, -61, -83, -84, -84, -15, -170, 98, -17, -25,
	-21, -32, -12, 301, 304, -77, 29, -108, 300, 278,
	159, 81, 122, 158, -109, 216, 301, 304, 247, 304,
	-82, -75, -132, -131, 113, 249, 301, -49, -48, -62,
	197, 228, 203, 219, 304, 8, 7, 7, 5, -195,
	-239, -50, -49, -48, -165, -65, -75, -66, -50, -129,
	-128, -207, -208, -205, 128, 258, 103, 30, 98, 30,
	176, 167, 285, 98, -117, 211, 212, 304, -40, 31,
	88, 300, 304, 301, -130, -167, -80, -163, -165, -35,
	-164, 300, -172, -172, -83, 244, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, 150, 125,
	224, 35, 126, -137, 247, -137, -137, -137, -137, 169,
	167, 252, 102, 259, 89, 173, -247, 238, 32, -143,
	-35, 300, -195, -149, 211, 300, 301, 304, -85, -148,
	299, -145, -85, 301, 301, -85, 269, 22, 89, 293,
	-108, 7, -156, -155, 272, -226, 105, 118, 300, 301,
	301, -137, -137, -102, -189, 4, 278, 159, 81, 122,
	158, 216, -103, -137, -104, -138, -139, 291, 292, 297,
	300, 211, -105, -137, -85, -137, 42, 146, 248, -106,
	-137, 113, -85, -137, -137, -137, -85, -85, -85, 300,
	7, 7, 244, 244, 7, -130, 301, -157, -41, -57,
	-50, -50, 167, -128, 123, -46, 167, -172, -50, 300,
	300, 143, 143, -50, -50, 123, -50, 123, -50, -50,
	-42, 202, 300, 300, -50, 202, -50, 233, 113, -57,
	-137, -97, 206, -137, -97, -120, 176, -81, 267, -50,
	206, -79, 304, 113, 285, -81, -44, -44, -44, -165,
	-172, 298, 298, 7, 247, 247, 247, 247, 300, -137,
	-239, -58, -239, -48, 256, 59, 197, -199, -108, 304,
	301, 301, 304, -51, 128, -51, -25, -83, -25, -57,
	98, 5, -50, -161, -17, -50, -94, 118, -169, 304,
	282, 67, -101, 142, 162, 114, 148, 208, 131, -134,
	305, -160, -159, 30, -50, -35, -164, -163, 279, -137,
	-137, 247, -247, 238, -143, -137, 169, 252, 102, 259,
	89, 173, 113, 300, -138, -138, -85, 300, -85, -137,
	299, 299, 304, 301, -72, 304, -71, -137, -85, -85,
	301, 301, -154, -155, 93, -137, -231, 183, 300, 300,
	-137, 30, 304, 301, 113, 301, -110, 189, 301, 10,
	11, 291, 292, 293, 294, 108, 295, 288, 289, 290,
	287, 283, 284, 285, 60, 156, 213, 13, 14, 15,
	140, 126, -138, -138, -138, -85, 300, 301, -141, -142,
	113, 110, 30, -106, -106, -106, 301, 113, -85, 304,
	304, 304, 301, 301, 301, 7, 301, 304, 301, 279,
	279, 301, -94, 247, 247, 98, 167, 264, -209, -206,
	-137, -75, 300, 300, -39, 92, 222, -113, 98, -44,
	98, -44, 247, -112, 62, -85, -85, 247, 233, 299,
	-87, 206, 61, 301, -87, -130, -89, -80, -157, 301,
	299, 7, 7, 301, 159, 122, 158, -109, 158, -109,
	-109, 7, -50, -67, 127, -129, 300, -51, 300, 300,
	-70, 300, -50, -47, 301, -144, 120, 43, -163, 173,
	142, 142, -163, -101, 142, -99, 182, -99, -99, -160,
	-195, 306, -50, 300, 301, -137, -137, -138, -138, 113,
	300, -137, -146, 26, 26, 301, -85, 301, 304, 301,
	-145, 301, 269, -72, -72, -72, 5, 95, -137, 243,
	-232, -50, 300, 273, -71, 301, -172, -172, -137, -141,
	-137, -172, -172, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, 89, 167, 173, -138, 304, -85, 301, -142,
	-141, -137, -137, -172, 301, 301, 301, -85, -137, -137,
	-137, 301, 7, -144, -50, -50, -128, 98, -210, 62,
	-211, 54, 103, 66, 167, 169, 258, 194, 52, 84,
	201, 301, 301, -75, -75, 167, 84, 167, 84, 77,
	254, -50, -50, -57, -50, -50, 301, 301, -50, -87,
	-119, 300, 176, -25, -97, 285, 299, 299, 301, 126,
	-74, -162, -50, -220, 300, -217, -218, -55, 300, -75,
	-65, 30, -74, 176, -228, 274, -137, -85, 239, -163,
	-163, -100, 263, 176, 142, -163, -136, -135, 111, 165,
	300, -75, -159, 26, 26, -137, -146, 301, -137, -137,
	301, -137, 5, -137, 301, 301, 301, -137, -233, -50,
	-137, 301, 301, 301, -142, 113, 89, 173, 300, -137,
	301, 301, 304, 301, 301, 301, -228, -128, -50, -83,
	-50, 103, 123, 169, 143, 300, -138, -57, -127, -244,
	65, 236, 301, 301, 169, 169, -137, -172, -44, -44,
	247, 247, 90, -75, 62, -93, -35, 300, 186, 301,
	304, -56, -91, 54, -56, -137, 300, -74, 301, 301,
	-25, 301, -57, -229, -230, -50, 244, -100, 300, -137,
	-163, 304, 307, 285, -75, 301, -137, -137, 301, 301,
	-72, -227, 188, 301, -138, 113, 300, -146, 301, -137,
	-211, -51, 167, -137, -52, 300, -67, 300, 201, -43,
	54, -50, -50, 260, 168, 301, -50, -50, -127, -162,
	-40, -83, -40, 301, -85, 301, -67, -127, 300, 304,
	30, 5, -75, -135, -195, 301, 301, -72, 43, -138,
	-146, 301, 301, 98, 301, -214, 157, -50, -75, -57,
	-38, 263, -83, 222, -130, 300, -67, -56, -72, -127,
	-67, -74, -230, -232, 301, -234, 196, 212, -85, 301,
	103, -212, -215, -213, 176, 114, 187, 225, 301, 301,
	-70, -137, -88, -75, -40, 301, -67, 301, 301, -235,
	-236, 35, 255, 69, -137, -235, -50, -213, 176, -215,
	176, 260, 87, -214, -130, 301, -127, -236, 191, 109,
	211, 191, 109, -216, 164, 205, 46, 222, -216, -212,
	-45, 46, 205, -67, 26, 20, 169, 84, -236,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 60, 61,
	62, 63, 64, 0, 0, 372, 0, 0, 0, 0,
	0, 0, 346, -2, 0, 129, 0, 302, 0, 302,
	302, 306, 0, 374, 270, 371, -2, 382, 0, 0,
	0, 380, 360, 0, 0, -2, 0, 0, 0, 0,
	775, 802, 803, 804, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 82, 83, 84, 85, 86,
	87, 88, 89, 0, 95, 102, 103, 885, 105, 0,
	112, 113, 114, 116, 117, 118, 119, 120, 121, 122,
	0, 295, 899, 308, 125, 864, 903, 969, 917, 132,
	142, 0, 975, -2, 146, 76, 175, 176, 0, 178,
	193, 0, 0, 0, 0, 0, 186, 0, 0, 190,
	0, 313, 301, 313, 298, 299, 300, 303, 0, 294,
	0, 373, 0, 0, 0, 0, 269, -2, 356, 357,
	-2, 0, 377, 377, 377, 0, 0, 357, 0, 365,
	889, 368, 785, 366, 0, 0, 379, 378, 0, 361,
	441, 0, 402, 0, 2, 0, 954, 441, 0, 954,
	0, 0, 0, 0, 776, 754, 748, 749, 0, 0,
	0, 0, 0, 0, 447, 66, 954, 50, 954, 771,
	50, 954, 74, 50, 954, 0, 90, 92, 812, 813,
	814, 815, 980, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 0, 0, 0,
	100, 0, 104, 106, 0, 0, 0, 307, 126, 944,
	128, 0, 131, 133, 134, 0, 0, 0, 0, 0,
	0, 145, 170, 171, 77, 0, 0, 195, 0, 0,
	0, 0, 0, 0, 0, 187, 0, 189, 0, 296,
	309, 310, 297, 0, 305, 50, 445, 245, 954, 245,
	806, 318, 954, -2, 0, 352, 389, 390, 0, 0,
	0, 375, 376, 0, 0, 0, 348, 349, 0, 367,
	0, 0, 405, 763, 767, 768, 534, 0, 0, 0,
	0, 0, 0, 623, 624, 625, 0, 627, 628, 629,
	949, 0, 633, 634, 969, 775, 788, 789, 790, 791,
	0, 0, 0, 796, 797, 798, 747, 673, 643, -2,
	-2, 786, 471, 472, 473, 474, -2, 982, 647, 649,
	651, 652, 653, 654, 0, 933, 950, 965, 966, 974,
	978, 979, 954, 962, 955, 945, 952, 961, 845, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	811, 496, 497, 502, 503, 505, 405, 403, 442, 443,
	0, 0, 760, 758, 759, 27, 291, 29, 0, 291,
	291, 0, 0, 0, 0, 0, 0, 0, 0, 57,
	0, 0, 769, 755, 0, 752, 753, 816, 817, 818,
	819, 820, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 451, 0, 324, 0, 0, 448, 0, 0,
	68, 0, 48, 49, 0, 70, 0, 0, 72, 0,
	372, 0, 0, 954, 372, 0, 707, 457, 458, 459,
	460, 461, 531, 464, 465, 466, 467, 468, 469, 470,
	478, 479, 480, 481, 482, 483, 484, 493, 0, 477,
	477, 477, 490, 491, 494, 495, 500, 501, 512, 513,
	515, 517, 511, 511, 511, 508, 509, 0, 705, 0,
	109, 0, 840, 773, 778, 779, 115, 0, 0, 0,
	0, 0, 0, 137, 157, 158, 159, 138, 140, 147,
	149, 150, 151, 160, 161, 162, 163, 262, 0, 264,
	173, 174, 799, 0, 139, 141, 143, 144, 164, 165,
	0, 167, 168, 169, 0, 78, 177, 179, 0, 192,
	180, 181, 182, 183, 184, 185, 188, 191, 0, 0,
	304, 265, 0, 203, 0, 0, 0, 0, 0, 954,
	805, 315, 0, 0, 355, 387, 388, 391, 394, 395,
	392, 534, 362, 363, 364, 383, 384, 280, 369, 0,
	0, 782, 451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 757,
	0, 0, 766, 539, 540, 541, 563, 564, 0, -2,
	705, 0, 630, 631, 632, 0, 0, -2, 0, 793,
	531, 0, 0, 746, 675, 0, 0, 0, 0, 0,
	0, 0, 0, 726, 732, 0, 0, 0, 0, 0,
	0, 0, 0, 486, 499, 510, 507, 506, 488, 0,
	487, 485, 0, 489, 0, 0, 0, 451, 0, 0,
	762, 0, 0, 0, 0, 290, 31, 954, 0, 52,
	0, 0, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 777, 0, 0,
	0, 0, 750, 0, 335, 0, 335, 326, 0, 0,
	0, 322, 338, 339, 341, 342, 0, 0, 449, 67,
	772, 50, 75, 50, 50, 81, 91, 0, 93, 96,
	97, 98, 99, 94, 0, 452, 454, 462, 0, 518,
	519, 520, 521, 522, 523, 532, 101, 0, 0, 0,
	110, 111, 780, 781, 0, 0, 130, 135, 136, 314,
	0, 154, 0, 156, 0, 263, 801, 800, 531, 79,
	194, 123, 311, 312, 446, 0, 0, 202, 782, 204,
	206, 207, 208, 209, 806, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 393, 396, 397, 0, 386, 278,
	279, 372, 0, 784, 399, 764, 432, 406, 414, 430,
	417, 0, 535, 536, 537, 0, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, -2, -2, -2, 555,
	556, 557, -2, -2, -2, 561, 562, -2, 0, 0,
	0, 757, 0, -2, 0, 571, -2, -2, -2, 575,
	0, 578, 580, 582, 0, 0, 0, 0, 756, 592,
	738, 0, 765, 577, 0, 0, 626, 0, 0, 0,
	711, 712, 0, -2, 635, 382, 0, 0, 0, 0,
	794, 0, 745, 741, 0, 683, 0, 0, 0, 648,
	650, 0, 0, 0, 0, 715, 716, 717, 718, 719,
	720, 721, 0, 0, 0, 0, 594, 0, 0, 0,
	0, 969, 0, 705, 731, 0, 0, 0, 0, 0,
	705, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 399, 444, 761, 30, 282,
	0, 0, 0, 33, 954, 41, 0, 217, 0, 0,
	0, 0, 0, 293, 42, 954, 50, 954, 50, 43,
	28, 291, 0, 0, 284, 0, 281, 58, 0, 770,
	0, 65, 0, 450, 319, 320, 0, 0, 328, 325,
	0, 451, 0, 0, 0, 0, 69, 71, 73, 0,
	708, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	107, 774, 108, 127, 152, 153, 155, 148, 166, 0,
	211, 244, 0, 0, 806, 0, 200, 245, 266, 0,
	0, 317, 318, 385, 0, 783, 401, 0, 404, 0,
	0, 0, 0, 0, 0, 438, 438, 438, 436, 430,
	0, 416, 429, 0, 428, -2, 417, 0, 0, -2,
	-2, 0, 0, 0, 593, -2, 576, 579, 581, 583,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 706,
	709, 710, 0, -2, 0, 0, 381, 382, 382, 382,
	641, 0, 0, 742, 0, 0, 642, 0, 0, 0,
	0, 0, 0, 657, 0, 658, 0, 0, 659, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 597, 598, 599, 0, 0, 660, 729, 730,
	0, 0, 0, 0, 0, 0, 665, 0, 736, 0,
	0, 0, 669, 670, 671, 0, 475, 0, 492, 514,
	516, 504, 401, 0, 0, 0, 0, 51, 215, 234,
	0, 0, 0, 0, 35, 0, 0, 0, 0, 39,
	0, 45, 0, 0, 0, 0, 0, 0, 59, 751,
	334, 0, 333, 0, 323, 335, 340, 337, 343, 0,
	455, 0, 0, 463, 524, 525, 526, 527, 528, 529,
	530, 0, 124, 198, 0, 205, 0, 0, 0, 203,
	0, 0, 0, 316, 370, 677, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 433, 437, 434, 435, 415,
	412, 0, 426, 0, 419, 538, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 739, 0, 700, 0, -2,
	713, 636, 0, 0, 0, 0, 795, 740, 744, 0,
	681, 682, 686, 0, 0, 646, 0, 0, 714, 723,
	724, 595, 596, 600, 601, 602, 603, 604, 605, 606,
	607, 608, 609, -2, -2, -2, 613, 614, 615, -2,
	-2, -2, 0, 0, 0, 725, 0, 0, 703, 727,
	728, 733, 734, 0, 662, 663, 664, 735, 0, 0,
	0, 498, 0, 677, 286, 288, 32, 0, 216, 0,
	219, 0, 0, 0, 0, 225, 226, 0, 0, 0,
	0, 236, 243, 0, 0, 0, 47, 0, 0, 292,
	0, 50, 50, 283, 0, 0, 196, 197, 285, 321,
	0, 0, 0, 327, 336, 0, 456, 453, 533, 0,
	0, 271, 277, 277, 0, 644, 645, 0, 0, 0,
	0, 0, 0, 0, 358, 0, 400, 398, 0, 420,
	0, 422, 0, 0, 0, 424, 0, 410, 0, 409,
	0, 0, 418, 0, 0, -2, 0, 586, -2, -2,
	699, 706, 792, 382, 637, 639, 640, 743, 688, 685,
	0, 672, 655, 656, 722, 0, 0, 0, 0, 706,
	702, 661, 0, 667, 668, 476, 359, 34, 0, 220,
	221, 806, 0, 224, 227, 0, 229, 808, 211, 0,
	240, 241, 238, 0, 36, 37, 46, 54, 38, 44,
	0, 0, 0, 0, 0, 344, 345, 0, 0, 243,
	0, 280, 787, 0, 280, 0, 0, 0, 233, 211,
	201, 243, 0, 676, 678, 0, 0, 421, 0, 440,
	423, 0, 413, 0, 0, 427, -2, -2, 587, 701,
	0, 382, 0, 674, -2, 0, 0, 0, 704, 0,
	218, 222, 0, 0, 249, 0, 237, 0, 0, 56,
	0, 287, 289, 0, 330, 451, 332, 0, 211, 272,
	273, 276, 274, 277, 382, 243, 199, 211, 0, 0,
	0, 431, 0, 411, 408, 425, 638, 691, 0, -2,
	0, 621, 666, 0, 228, 254, 0, 0, 0, 245,
	40, 0, 53, 0, 331, 0, 231, 280, 0, 211,
	267, 0, 679, 680, 439, 0, 0, 0, 687, 622,
	0, 230, 250, 251, 0, 246, 247, 248, 807, 242,
	249, 55, 451, 0, 275, 636, 232, 243, 684, 689,
	692, -2, 920, 837, 0, 690, 223, 252, 0, 253,
	0, 0, 0, 254, 329, 214, 211, 0, 694, 695,
	696, 697, 698, 255, 0, 258, 259, 0, 256, 239,
	210, 212, 213, 268, 0, 257, 260, 261, 693,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 289, 3, 295, 290, 3,
	300, 301, 293, 291, 304, 292, 302, 294, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 308, 303,
	283, 285, 284, 3, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 298, 3, 299, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 306, 287, 307, 297,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 286, 57626, 296, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:728
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:734
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:740
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:822
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:827
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:831
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:849
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:859
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			unimplementedWithIssue(2473)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:922
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			unimplemented()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:926
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1052
		{ /* SKIP DOC */
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 102:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{ /* SKIP DOC */
		}
	case 130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			unimplemented()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Low
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Normal
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = High
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			unimplemented()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			unimplemented()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1433
		{
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = DropDefault
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			unimplemented()
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1824
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1827
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1837
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1838
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1841
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1844
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			unimplemented()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			unimplemented()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = true
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = false
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			unimplemented()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1942
		{
			unimplemented()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			unimplemented()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1946
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = Ascending
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = Descending
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = true
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = false
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2056
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.str = ""
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = ""
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2150
		{
			unimplementedWithIssue(6637)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2157
		{
			unimplementedWithIssue(6637)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			unimplemented()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			unimplementedWithIssue(7841)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2229
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			unimplemented()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			unimplemented()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			unimplemented()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2465
		{
			unimplemented()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2468
		{
			unimplemented()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2472
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = true
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = false
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = false
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = true
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2496
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2497
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2555
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2597
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2647
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &From{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.str = astFullJoin
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.str = astLeftJoin
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astRightJoin
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astInnerJoin
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2842
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2932
		{
			unimplementedWithIssue(2115)
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			unimplementedWithIssue(2115)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2936
		{
			unimplementedWithIssue(2115)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2937
		{
			unimplementedWithIssue(2115)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2938
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2993
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3002
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = nil
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3073
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3123
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3155
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3195
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3230
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			unimplemented()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3243
		{
			unimplemented()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			unimplemented()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			unimplemented()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3686
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3687
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3710
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3730
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3747
		{
			unimplemented()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3775
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3819
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3820
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3823
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = Window(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.str = ""
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3911
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3912
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3917
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			unimplemented()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3924
		{
			unimplemented()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			unimplemented()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			unimplemented()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			unimplemented()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4256
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4412
		{
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4448
		{
			unimplemented()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = DNull
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.str = ""
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
