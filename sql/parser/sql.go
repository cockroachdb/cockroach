// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PLACING = 57533
const POSITION = 57534
const PRECEDING = 57535
const PRECISION = 57536
const PREPARE = 57537
const PRIMARY = 57538
const PRIORITY = 57539
const RANGE = 57540
const READ = 57541
const REAL = 57542
const RECURSIVE = 57543
const REF = 57544
const REFERENCES = 57545
const RENAME = 57546
const REPEATABLE = 57547
const RELEASE = 57548
const RESTRICT = 57549
const RETURNING = 57550
const REVOKE = 57551
const RIGHT = 57552
const ROLLBACK = 57553
const ROLLUP = 57554
const ROW = 57555
const ROWS = 57556
const RSHIFT = 57557
const SAVEPOINT = 57558
const SEARCH = 57559
const SECOND = 57560
const SELECT = 57561
const SERIAL = 57562
const SERIALIZABLE = 57563
const SESSION = 57564
const SESSION_USER = 57565
const SET = 57566
const SHOW = 57567
const SIMILAR = 57568
const SIMPLE = 57569
const SMALLINT = 57570
const SMALLSERIAL = 57571
const SNAPSHOT = 57572
const SOME = 57573
const SPLIT = 57574
const SQL = 57575
const START = 57576
const STDIN = 57577
const STRICT = 57578
const STRING = 57579
const STORING = 57580
const SUBSTRING = 57581
const SYMMETRIC = 57582
const SYSTEM = 57583
const TABLE = 57584
const TABLES = 57585
const TEXT = 57586
const THEN = 57587
const TIME = 57588
const TIMESTAMP = 57589
const TIMESTAMPTZ = 57590
const TO = 57591
const TRAILING = 57592
const TRANSACTION = 57593
const TREAT = 57594
const TRIM = 57595
const TRUE = 57596
const TRUNCATE = 57597
const TYPE = 57598
const UNBOUNDED = 57599
const UNCOMMITTED = 57600
const UNION = 57601
const UNIQUE = 57602
const UNKNOWN = 57603
const UPDATE = 57604
const UPSERT = 57605
const USER = 57606
const USING = 57607
const VALID = 57608
const VALIDATE = 57609
const VALUE = 57610
const VALUES = 57611
const VARCHAR = 57612
const VARIADIC = 57613
const VIEW = 57614
const VARYING = 57615
const WHEN = 57616
const WHERE = 57617
const WINDOW = 57618
const WITH = 57619
const WITHIN = 57620
const WITHOUT = 57621
const YEAR = 57622
const ZONE = 57623
const NOT_LA = 57624
const WITH_LA = 57625
const AS_LA = 57626
const POSTFIXOP = 57627
const UMINUS = 57628

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4860

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	305, 27,
	-2, 377,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 352,
	178, 352,
	208, 352,
	303, 352,
	305, 352,
	-2, 362,
	-1, 58,
	1, 355,
	178, 355,
	208, 355,
	303, 355,
	305, 355,
	-2, 361,
	-1, 67,
	1, 27,
	305, 27,
	-2, 377,
	-1, 388,
	1, 173,
	305, 173,
	-2, 879,
	-1, 422,
	153, 387,
	177, 387,
	-2, 358,
	-1, 425,
	153, 386,
	177, 386,
	-2, 356,
	-1, 547,
	153, 386,
	177, 386,
	-2, 359,
	-1, 603,
	302, 817,
	-2, 810,
	-1, 604,
	302, 818,
	-2, 811,
	-1, 610,
	5, 522,
	302, 522,
	-2, 970,
	-1, 634,
	5, 488,
	-2, 944,
	-1, 635,
	5, 516,
	302, 516,
	-2, 946,
	-1, 636,
	5, 496,
	-2, 947,
	-1, 637,
	5, 495,
	-2, 948,
	-1, 638,
	5, 516,
	302, 516,
	-2, 951,
	-1, 639,
	5, 516,
	302, 516,
	-2, 952,
	-1, 640,
	5, 517,
	-2, 955,
	-1, 641,
	5, 482,
	-2, 956,
	-1, 642,
	5, 482,
	-2, 957,
	-1, 643,
	5, 498,
	-2, 961,
	-1, 644,
	5, 483,
	-2, 966,
	-1, 645,
	5, 484,
	-2, 967,
	-1, 646,
	5, 485,
	-2, 968,
	-1, 647,
	5, 486,
	-2, 969,
	-1, 648,
	5, 482,
	-2, 973,
	-1, 649,
	5, 489,
	-2, 978,
	-1, 650,
	5, 487,
	-2, 981,
	-1, 651,
	5, 514,
	302, 514,
	-2, 983,
	-1, 652,
	5, 518,
	-2, 986,
	-1, 653,
	5, 520,
	-2, 987,
	-1, 654,
	5, 513,
	302, 513,
	-2, 991,
	-1, 902,
	97, 362,
	139, 362,
	153, 362,
	177, 362,
	181, 362,
	259, 362,
	-2, 634,
	-1, 910,
	302, 795,
	-2, 784,
	-1, 1112,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 557,
	-1, 1113,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 558,
	-1, 1114,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 559,
	-1, 1118,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 563,
	-1, 1119,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 564,
	-1, 1120,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 565,
	-1, 1123,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 570,
	-1, 1129,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 572,
	-1, 1132,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 577,
	-1, 1133,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 578,
	-1, 1134,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 579,
	-1, 1159,
	186, 706,
	-2, 709,
	-1, 1182,
	114, 722,
	302, 817,
	-2, 810,
	-1, 1183,
	114, 723,
	-2, 940,
	-1, 1184,
	114, 724,
	-2, 877,
	-1, 1185,
	114, 725,
	-2, 850,
	-1, 1186,
	114, 726,
	-2, 865,
	-1, 1187,
	114, 727,
	-2, 876,
	-1, 1188,
	114, 728,
	-2, 910,
	-1, 1336,
	97, 362,
	139, 362,
	153, 362,
	177, 362,
	181, 362,
	259, 362,
	-2, 435,
	-1, 1340,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 571,
	-1, 1341,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 573,
	-1, 1346,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 574,
	-1, 1364,
	186, 705,
	-2, 708,
	-1, 1529,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 575,
	-1, 1534,
	142, 0,
	-2, 589,
	-1, 1542,
	186, 707,
	-2, 710,
	-1, 1576,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 615,
	-1, 1577,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 616,
	-1, 1578,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 617,
	-1, 1582,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 621,
	-1, 1583,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 622,
	-1, 1584,
	13, 0,
	14, 0,
	15, 0,
	285, 0,
	286, 0,
	287, 0,
	-2, 623,
	-1, 1689,
	142, 0,
	-2, 590,
	-1, 1692,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 593,
	-1, 1693,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 595,
	-1, 1780,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 594,
	-1, 1781,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 596,
	-1, 1788,
	142, 0,
	-2, 624,
	-1, 1833,
	142, 0,
	-2, 625,
	-1, 1885,
	35, 0,
	127, 0,
	152, 0,
	226, 0,
	282, 0,
	-2, 943,
}

const sqlNprod = 1086
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25331

var sqlAct = [...]int{

	604, 1884, 1865, 1839, 1496, 1907, 1867, 1883, 1732, 990,
	827, 1553, 998, 1866, 1768, 426, 1084, 1654, 259, 1681,
	1613, 602, 389, 1093, 462, 905, 1668, 717, 1755, 75,
	44, 1655, 1675, 831, 1333, 1367, 76, 447, 261, 75,
	75, 75, 19, 1062, 75, 1061, 1262, 75, 1066, 1332,
	1508, 1323, 834, 1065, 566, 75, 999, 670, 1030, 1518,
	957, 1092, 75, 75, 667, 1317, 75, 966, 907, 75,
	75, 75, 75, 1142, 262, 601, 1421, 1169, 594, 250,
	570, 1145, 1096, 655, 1420, 1208, 26, 15, 577, 1023,
	781, 431, 849, 433, 57, 425, 534, 1094, 672, 461,
	7, 1014, 1056, 765, 688, 1179, 535, 576, 567, 463,
	464, 762, 938, 942, 792, 483, 474, 72, 992, 1069,
	477, 263, 9, 255, 254, 702, 855, 8, 6, 248,
	57, 4, 476, 436, 58, 550, 59, 256, 761, 551,
	783, 779, 367, 695, 386, 434, 376, 554, 549, 470,
	533, 704, 1775, 704, 445, 1776, 1027, 452, 455, 257,
	445, 57, 379, 444, 252, 251, 450, 704, 253, 457,
	430, 1899, 991, 995, 1088, 1881, 1873, 1863, 1754, 1088,
	1020, 1858, 1835, 258, 1088, 1020, 1829, 1819, 1809, 1088,
	1754, 1088, 423, 63, 422, 1782, 258, 1779, 1020, 1028,
	1088, 414, 453, 1273, 1765, 430, 1762, 1754, 438, 1088,
	1753, 1737, 1736, 1754, 1088, 1088, 65, 1714, 1694, 1691,
	1033, 1033, 1020, 1033, 1640, 1639, 56, 1033, 1033, 1625,
	1538, 1482, 1088, 1033, 987, 1029, 1026, 1476, 1438, 56,
	987, 1439, 1274, 66, 75, 75, 75, 75, 75, 1362,
	486, 61, 35, 1436, 1363, 1321, 1033, 62, 1211, 1435,
	36, 1434, 1033, 1364, 1033, 35, 1033, 1361, 1331, 479,
	479, 1302, 1033, 36, 1088, 1089, 60, 1320, 1088, 1042,
	431, 1032, 1033, 1823, 1033, 1019, 487, 986, 1020, 954,
	987, 857, 953, 1031, 712, 1366, 1757, 713, 67, 682,
	858, 859, 856, 1320, 1589, 1541, 1300, 955, 63, 1303,
	1088, 1035, 705, 1153, 705, 465, 1083, 1050, 561, 466,
	562, 466, 822, 861, 821, 773, 772, 498, 705, 443,
	1033, 65, 445, 488, 455, 465, 806, 63, 718, 466,
	518, 471, 1882, 1879, 860, 1872, 858, 859, 1830, 878,
	879, 880, 888, 889, 890, 1025, 1763, 1719, 66, 1715,
	65, 1707, 881, 75, 484, 1706, 61, 1705, 480, 861,
	1700, 892, 62, 1699, 1698, 1652, 1604, 1024, 75, 63,
	1599, 75, 75, 1646, 1598, 1597, 1544, 66, 1527, 1507,
	860, 994, 63, 1486, 1443, 1440, 875, 1428, 1419, 866,
	1390, 1387, 65, 1386, 1384, 1372, 1371, 1301, 1305, 1225,
	1150, 708, 1176, 703, 75, 65, 75, 1175, 75, 75,
	60, 75, 561, 913, 459, 560, 830, 825, 596, 66,
	858, 859, 858, 859, 1273, 1555, 75, 61, 548, 657,
	541, 543, 66, 62, 1849, 866, 1822, 75, 876, 1801,
	61, 1799, 1790, 861, 1772, 861, 62, 1760, 547, 1751,
	1729, 75, 60, 885, 893, 1712, 1684, 261, 75, 75,
	75, 1662, 75, 1533, 860, 249, 860, 1526, 891, 1651,
	506, 662, 1504, 856, 1502, 692, 690, 1501, 883, 1499,
	507, 75, 1391, 1392, 876, 661, 858, 859, 75, 1151,
	75, 1455, 1484, 262, 445, 877, 1454, 1645, 1418, 1380,
	1379, 486, 486, 540, 1358, 1354, 882, 1147, 1289, 261,
	75, 1252, 75, 75, 75, 75, 75, 75, 75, 866,
	1251, 1239, 75, 75, 1238, 664, 1218, 807, 75, 1174,
	860, 1087, 465, 501, 503, 75, 466, 487, 487, 689,
	263, 877, 943, 946, 829, 262, 445, 696, 696, 536,
	538, 950, 886, 75, 936, 471, 75, 656, 423, 935,
	422, 934, 933, 932, 931, 930, 557, 558, 929, 445,
	1239, 563, 870, 862, 863, 864, 865, 867, 714, 887,
	928, 1397, 1650, 609, 488, 488, 927, 926, 925, 924,
	923, 922, 263, 707, 921, 920, 710, 911, 909, 853,
	60, 431, 460, 697, 826, 910, 448, 694, 884, 858,
	859, 872, 873, 874, 565, 871, 868, 869, 870, 862,
	863, 864, 865, 867, 844, 887, 504, 988, 769, 494,
	492, 768, 861, 908, 1194, 1283, 989, 1282, 801, 800,
	663, 794, 789, 796, 803, 858, 859, 1777, 1649, 1275,
	811, 678, 1078, 860, 808, 824, 75, 812, 813, 814,
	815, 816, 1442, 1441, 75, 948, 819, 820, 75, 949,
	512, 1339, 75, 75, 823, 528, 75, 839, 513, 423,
	838, 845, 423, 423, 846, 847, 851, 837, 991, 75,
	1669, 75, 75, 918, 75, 1556, 1375, 75, 1170, 75,
	75, 939, 75, 531, 486, 864, 865, 867, 866, 887,
	914, 887, 960, 673, 663, 674, 1269, 1449, 804, 1845,
	420, 1008, 479, 1633, 479, 971, 973, 1895, 993, 1041,
	993, 1896, 1808, 532, 1296, 413, 1770, 412, 407, 408,
	487, 940, 941, 759, 952, 250, 944, 1745, 240, 1015,
	1744, 1470, 947, 771, 75, 75, 445, 876, 1469, 1446,
	455, 1445, 1391, 1392, 445, 976, 1342, 1395, 1396, 1398,
	1288, 1391, 1392, 984, 753, 887, 1287, 1002, 951, 1286,
	1285, 1130, 455, 963, 675, 455, 1483, 488, 805, 255,
	254, 1034, 1027, 1017, 1016, 241, 57, 261, 1037, 429,
	57, 75, 959, 256, 980, 510, 997, 1018, 1466, 983,
	982, 244, 979, 1007, 877, 1055, 75, 75, 484, 1012,
	1009, 75, 1010, 537, 1807, 257, 1006, 1222, 1221, 904,
	252, 251, 1011, 262, 253, 1028, 1101, 673, 490, 674,
	416, 428, 1672, 511, 673, 944, 674, 947, 75, 70,
	1734, 75, 1144, 858, 859, 1090, 967, 1471, 941, 940,
	1044, 1397, 1258, 245, 1144, 1036, 1038, 1039, 1351, 1043,
	1397, 1029, 1026, 1100, 686, 959, 861, 1170, 1847, 1457,
	263, 958, 1349, 430, 417, 261, 698, 1491, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 860, 887, 1031,
	1904, 69, 421, 1148, 445, 1869, 1895, 680, 675, 1059,
	1860, 724, 1267, 1060, 418, 675, 365, 970, 1058, 1407,
	690, 262, 747, 243, 242, 690, 1861, 795, 790, 1031,
	1081, 1082, 802, 1295, 887, 679, 445, 659, 1915, 658,
	1263, 1257, 1263, 1474, 704, 1031, 1271, 75, 75, 75,
	1347, 1224, 866, 75, 1352, 1091, 75, 1254, 684, 676,
	368, 427, 75, 75, 75, 75, 75, 1157, 263, 683,
	75, 1802, 1297, 75, 75, 246, 1408, 509, 75, 1870,
	1488, 373, 508, 529, 1910, 75, 369, 75, 937, 1140,
	1786, 1025, 901, 1166, 75, 1464, 1752, 1903, 1195, 1149,
	969, 1232, 1378, 1138, 75, 247, 1519, 430, 1226, 1868,
	370, 1458, 1894, 68, 1892, 431, 1489, 1871, 552, 1667,
	1250, 1189, 1076, 1735, 1249, 75, 75, 671, 372, 1265,
	521, 75, 499, 1348, 553, 1228, 509, 530, 497, 1512,
	1350, 486, 553, 71, 1227, 1393, 1394, 1395, 1396, 1398,
	746, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 1921,
	1344, 75, 1256, 75, 968, 75, 1260, 75, 956, 1136,
	75, 1135, 1143, 689, 1031, 1141, 723, 487, 1046, 75,
	1902, 1739, 689, 676, 1048, 1738, 75, 1308, 75, 1268,
	676, 368, 445, 1727, 1304, 1710, 1306, 606, 1276, 1916,
	1049, 1280, 1391, 1392, 1908, 705, 1307, 1840, 1309, 1047,
	1585, 1338, 373, 371, 1326, 1796, 1448, 369, 431, 1235,
	1015, 1629, 1231, 1277, 488, 1278, 1279, 1291, 1294, 1292,
	1077, 1298, 1329, 1293, 1299, 778, 862, 863, 864, 865,
	867, 370, 887, 1517, 1682, 1909, 1920, 836, 828, 1327,
	1487, 552, 818, 1127, 1137, 1310, 374, 1154, 1158, 372,
	1161, 1139, 1911, 589, 1017, 1016, 1314, 1365, 431, 776,
	1337, 57, 1728, 1181, 1181, 1192, 445, 1203, 1018, 1315,
	777, 1711, 1632, 1215, 1216, 1217, 774, 1098, 1099, 1631,
	1586, 1343, 73, 1241, 1240, 1678, 1587, 1514, 1513, 1683,
	1345, 1397, 359, 360, 361, 508, 1628, 378, 469, 1328,
	390, 468, 428, 1195, 1195, 544, 1497, 1653, 378, 1725,
	431, 1509, 1318, 1173, 1789, 437, 437, 1709, 1422, 73,
	75, 1532, 73, 73, 456, 73, 1374, 1385, 1353, 1259,
	1726, 1040, 985, 527, 371, 1125, 1128, 526, 525, 524,
	1407, 523, 522, 519, 467, 1423, 919, 810, 1172, 1864,
	1837, 1610, 1462, 1460, 75, 75, 1447, 1195, 1195, 1195,
	1124, 1311, 1478, 1453, 1630, 1079, 1074, 724, 724, 1013,
	1444, 1425, 1426, 1427, 711, 1322, 709, 374, 747, 747,
	706, 75, 701, 1236, 75, 1451, 75, 685, 681, 677,
	1550, 1465, 75, 835, 1746, 798, 555, 1408, 1473, 1503,
	1896, 75, 441, 515, 1085, 75, 1477, 1748, 959, 975,
	1479, 75, 261, 3, 974, 75, 1480, 75, 1249, 1500,
	1481, 1475, 1757, 1326, 1511, 1490, 1492, 1493, 1515, 1804,
	1523, 1832, 959, 1510, 1126, 406, 559, 1498, 972, 1281,
	978, 1329, 1002, 445, 977, 1824, 1506, 1665, 262, 1391,
	1392, 1461, 1324, 1463, 1075, 1073, 996, 1516, 1327, 75,
	1522, 1086, 1535, 556, 1546, 1547, 1548, 1520, 1521, 442,
	364, 852, 1325, 724, 1401, 1393, 1394, 1395, 1396, 1398,
	770, 449, 516, 1236, 747, 716, 1357, 409, 410, 445,
	1359, 1022, 1918, 445, 1919, 263, 1557, 73, 472, 73,
	390, 390, 1369, 1370, 1195, 1195, 746, 746, 1391, 1392,
	858, 859, 1543, 375, 1052, 1051, 1605, 1494, 1328, 1485,
	749, 1437, 748, 1284, 1223, 1220, 75, 75, 75, 724,
	1219, 1167, 723, 723, 1053, 75, 75, 1825, 1417, 1696,
	747, 75, 1549, 75, 1312, 75, 75, 75, 1397, 1430,
	75, 75, 1054, 1562, 1195, 1195, 1195, 1195, 1195, 1195,
	1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
	1195, 1195, 1195, 724, 1195, 1606, 1609, 1592, 1626, 1627,
	912, 415, 75, 75, 747, 1733, 1593, 366, 809, 520,
	1467, 1468, 1859, 1702, 75, 75, 1377, 1407, 75, 1647,
	1767, 1660, 1666, 1785, 1171, 1648, 1660, 75, 75, 1643,
	917, 34, 746, 1657, 582, 1611, 495, 1673, 1674, 1450,
	1068, 1679, 1067, 264, 799, 1663, 788, 605, 1664, 782,
	791, 500, 1180, 1636, 390, 390, 75, 660, 723, 1642,
	607, 1690, 1686, 721, 608, 722, 945, 595, 719, 482,
	1685, 1319, 1000, 1168, 1408, 1659, 1373, 915, 1661, 581,
	1659, 587, 586, 1661, 1155, 491, 578, 378, 746, 73,
	1680, 390, 390, 1330, 545, 47, 505, 384, 385, 1266,
	720, 1644, 445, 445, 1080, 840, 445, 1459, 419, 437,
	1388, 75, 493, 75, 723, 75, 75, 1539, 1201, 1193,
	73, 1190, 539, 666, 75, 1001, 517, 1272, 1021, 564,
	848, 440, 746, 1720, 73, 439, 1063, 1723, 514, 1708,
	775, 73, 73, 73, 1045, 699, 75, 411, 1402, 1399,
	1400, 1401, 1393, 1394, 1395, 1396, 1398, 1798, 723, 1721,
	1234, 1914, 1803, 1456, 73, 1844, 64, 25, 75, 23,
	75, 766, 22, 766, 21, 20, 18, 1590, 17, 75,
	1761, 16, 1756, 24, 1660, 75, 1758, 1749, 1600, 1747,
	14, 13, 12, 390, 11, 766, 390, 390, 390, 390,
	390, 817, 1774, 1195, 10, 390, 390, 1771, 1764, 33,
	32, 378, 1731, 1784, 31, 30, 29, 5, 833, 2,
	1, 1559, 1560, 0, 0, 0, 75, 0, 1778, 0,
	1564, 1565, 0, 0, 0, 0, 437, 1800, 1659, 854,
	1791, 1661, 0, 1794, 0, 75, 75, 0, 0, 75,
	0, 0, 0, 75, 0, 0, 1766, 0, 75, 1795,
	1742, 1743, 1812, 1596, 0, 0, 0, 445, 1820, 1671,
	0, 0, 1814, 75, 1821, 1816, 1660, 0, 261, 0,
	1815, 690, 431, 724, 0, 0, 1813, 1355, 1356, 0,
	1195, 0, 0, 0, 747, 1827, 1828, 1391, 1392, 0,
	75, 1831, 75, 75, 0, 75, 749, 749, 748, 748,
	0, 724, 724, 0, 262, 0, 1826, 1850, 1834, 1848,
	724, 724, 747, 747, 75, 0, 1854, 1846, 1853, 0,
	1659, 747, 747, 1661, 1852, 0, 1857, 0, 1856, 73,
	1855, 1414, 1415, 1416, 1660, 1842, 1851, 964, 75, 0,
	75, 73, 1621, 724, 1874, 73, 981, 0, 1880, 73,
	1876, 263, 0, 0, 747, 75, 0, 0, 1878, 1889,
	1195, 0, 73, 1891, 1004, 1005, 0, 73, 1897, 760,
	73, 1893, 390, 390, 1622, 390, 1898, 1901, 0, 0,
	1900, 1843, 0, 1877, 0, 0, 1397, 0, 1659, 0,
	1913, 1661, 1912, 0, 0, 1917, 0, 0, 0, 0,
	0, 0, 749, 0, 748, 0, 0, 0, 0, 0,
	1922, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1002, 766, 854, 0,
	0, 0, 1621, 0, 1614, 1407, 0, 0, 723, 0,
	746, 746, 1612, 0, 0, 0, 1616, 0, 0, 746,
	746, 0, 724, 0, 0, 0, 720, 720, 749, 1617,
	748, 1618, 1741, 747, 1622, 0, 723, 723, 0, 0,
	0, 0, 0, 0, 1057, 723, 723, 0, 1530, 1531,
	0, 0, 746, 0, 1615, 0, 1620, 0, 0, 73,
	1064, 0, 1408, 1623, 854, 0, 0, 0, 0, 0,
	0, 0, 749, 0, 748, 0, 0, 0, 723, 1818,
	0, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 390, 0, 0, 0, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 0, 1588, 1617,
	1619, 1618, 724, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 720, 747, 0, 0, 0, 0, 0, 0,
	1393, 1394, 1395, 1396, 1398, 0, 1620, 0, 1329, 0,
	0, 1862, 0, 1623, 0, 0, 0, 0, 0, 1324,
	0, 746, 0, 0, 0, 1327, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	0, 0, 0, 0, 0, 583, 45, 723, 720, 0,
	73, 1229, 1230, 1677, 0, 0, 964, 0, 0, 1237,
	0, 724, 0, 0, 0, 1242, 1243, 1245, 1247, 1248,
	1619, 0, 747, 1253, 0, 0, 1255, 73, 0, 0,
	0, 73, 45, 0, 0, 1328, 0, 0, 73, 0,
	1270, 0, 720, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 0, 424, 0, 0, 432, 73, 0, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 1057, 766,
	0, 0, 0, 0, 1057, 0, 0, 0, 0, 724,
	1676, 0, 0, 0, 0, 0, 0, 723, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 833, 0, 390, 0,
	73, 0, 0, 1313, 0, 0, 0, 0, 0, 0,
	1391, 1392, 1316, 1409, 1410, 1411, 0, 1730, 0, 1335,
	0, 73, 0, 0, 0, 0, 1688, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 1391, 1392, 0,
	1409, 1410, 1411, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 749, 1687, 748, 0, 723, 0, 0, 0,
	1406, 858, 859, 0, 0, 0, 0, 0, 0, 568,
	568, 0, 0, 858, 859, 0, 0, 0, 668, 0,
	749, 749, 748, 748, 861, 0, 0, 1406, 0, 749,
	749, 748, 748, 0, 0, 691, 861, 0, 0, 0,
	0, 0, 0, 0, 1788, 860, 0, 0, 746, 1397,
	0, 875, 0, 0, 0, 0, 0, 860, 0, 0,
	858, 859, 749, 0, 748, 432, 888, 889, 890, 0,
	0, 0, 0, 0, 723, 0, 1397, 0, 0, 0,
	0, 0, 1412, 861, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1407, 0,
	866, 0, 0, 854, 860, 0, 0, 0, 0, 1412,
	875, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 843, 1833, 1407, 0, 0, 0, 850,
	0, 0, 0, 0, 0, 0, 0, 73, 73, 0,
	0, 896, 897, 898, 899, 900, 0, 0, 0, 876,
	903, 0, 720, 0, 0, 1408, 0, 0, 0, 866,
	0, 876, 0, 0, 1495, 0, 0, 964, 0, 833,
	916, 749, 0, 748, 0, 1505, 0, 885, 893, 0,
	720, 720, 1408, 0, 73, 0, 0, 0, 73, 720,
	720, 0, 0, 0, 1335, 0, 0, 0, 1525, 0,
	1335, 0, 883, 0, 0, 0, 877, 0, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 720, 0, 0, 1403, 1404, 1405, 0, 1402,
	1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 0, 0,
	0, 0, 1554, 0, 0, 0, 0, 0, 0, 424,
	0, 0, 1403, 1404, 1405, 0, 1402, 1399, 1400, 1401,
	1393, 1394, 1395, 1396, 1398, 877, 0, 0, 858, 859,
	0, 749, 0, 748, 0, 0, 886, 0, 0, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 861, 0, 868, 869, 870, 862, 863, 864, 865,
	867, 0, 887, 0, 0, 0, 0, 0, 0, 1607,
	1608, 964, 860, 0, 1391, 1392, 0, 0, 854, 854,
	0, 0, 0, 0, 1634, 0, 1635, 0, 73, 1637,
	1638, 720, 884, 1641, 73, 0, 0, 0, 0, 871,
	868, 869, 870, 862, 863, 864, 865, 867, 0, 887,
	749, 0, 748, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1656, 1406, 854, 1064, 866, 1656, 0,
	424, 0, 0, 424, 424, 0, 0, 73, 73, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	854, 1335, 0, 0, 0, 0, 902, 0, 0, 0,
	906, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1397, 0, 0, 876, 0, 0, 1703,
	0, 0, 0, 0, 0, 0, 568, 0, 749, 0,
	748, 720, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 0, 1129, 0, 1131, 1132, 1133,
	1134, 0, 1407, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 964, 0, 1722, 0, 390, 1724,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 1177, 1178, 0, 0, 1191, 0, 1202, 1204,
	1209, 1212, 1213, 1214, 0, 0, 0, 0, 0, 854,
	720, 45, 0, 45, 0, 0, 391, 0, 0, 1408,
	0, 0, 0, 668, 0, 0, 1656, 0, 45, 0,
	0, 73, 45, 1769, 404, 0, 1391, 1392, 0, 1409,
	1410, 1411, 73, 0, 0, 0, 0, 0, 854, 0,
	0, 862, 863, 864, 865, 867, 0, 887, 0, 1261,
	0, 1264, 0, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 398, 399, 0, 0, 405, 0,
	0, 0, 0, 0, 0, 0, 1406, 0, 720, 833,
	392, 394, 0, 1402, 1399, 1400, 1401, 1393, 1394, 1395,
	1396, 1398, 0, 1290, 0, 0, 0, 0, 1805, 1806,
	0, 0, 1810, 0, 0, 0, 1811, 0, 1656, 0,
	0, 390, 0, 0, 0, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 0, 1397, 854, 0, 0, 0,
	0, 0, 396, 397, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 850, 0, 0, 0, 0, 400, 0,
	0, 0, 0, 1841, 0, 854, 73, 0, 390, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 0, 1656, 1769, 0, 0,
	0, 0, 0, 0, 1340, 1341, 0, 0, 0, 0,
	1346, 0, 0, 0, 0, 0, 0, 0, 0, 1146,
	0, 73, 0, 854, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1360, 0, 0, 0, 0, 1890, 0,
	0, 0, 1368, 0, 0, 0, 0, 0, 0, 0,
	1376, 1408, 0, 0, 1381, 858, 859, 0, 878, 879,
	880, 888, 889, 890, 0, 401, 0, 0, 402, 0,
	0, 881, 0, 403, 0, 0, 0, 0, 861, 903,
	892, 0, 0, 0, 0, 1209, 1209, 1209, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 0,
	432, 1403, 1404, 1405, 0, 1402, 1399, 1400, 1401, 1393,
	1394, 1395, 1396, 1398, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 568, 0, 0, 866, 668, 0, 0, 858, 859,
	0, 878, 879, 880, 888, 889, 890, 0, 0, 0,
	0, 0, 885, 893, 881, 0, 0, 0, 0, 0,
	0, 861, 0, 892, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 45,
	0, 45, 860, 876, 0, 0, 0, 0, 875, 0,
	0, 0, 0, 45, 0, 0, 0, 0, 0, 1528,
	0, 0, 1529, 1336, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 1534, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1290, 0, 0, 0,
	0, 0, 0, 0, 1146, 1551, 0, 866, 0, 0,
	877, 0, 0, 0, 0, 1561, 0, 0, 0, 1563,
	0, 886, 0, 902, 0, 885, 893, 0, 0, 1391,
	1392, 0, 1409, 1410, 1411, 0, 0, 0, 0, 0,
	891, 0, 0, 0, 0, 1537, 0, 0, 0, 0,
	883, 0, 1594, 1595, 0, 0, 876, 0, 0, 0,
	0, 1601, 1602, 1603, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 902, 0, 884, 882, 1406,
	872, 873, 874, 0, 871, 868, 869, 870, 862, 863,
	864, 865, 867, 0, 887, 0, 0, 0, 0, 0,
	0, 1716, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 858, 859, 1397, 878,
	879, 880, 888, 889, 890, 0, 0, 0, 0, 1670,
	0, 0, 881, 0, 0, 0, 0, 0, 0, 861,
	1095, 892, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1412, 1689, 0, 0, 0, 1692, 1693, 0, 0,
	860, 1695, 0, 0, 0, 1697, 875, 1407, 0, 0,
	884, 0, 1701, 872, 873, 874, 1704, 871, 868, 869,
	870, 862, 863, 864, 865, 867, 1095, 887, 0, 0,
	1095, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1713,
	0, 0, 0, 858, 859, 866, 878, 879, 880, 888,
	889, 890, 0, 0, 1408, 0, 0, 0, 0, 881,
	0, 0, 0, 885, 893, 0, 861, 0, 892, 0,
	0, 1391, 1392, 0, 1409, 1410, 1411, 0, 891, 0,
	0, 1740, 0, 0, 0, 0, 0, 860, 883, 0,
	0, 0, 0, 875, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1759, 0,
	0, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 1406, 0, 0, 1403, 1404, 1405, 1773, 1402, 1399,
	1400, 1401, 1393, 1394, 1395, 1396, 1398, 1780, 1781, 0,
	0, 0, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 893, 886, 0, 0, 0, 1793, 0, 0, 0,
	1397, 0, 45, 0, 0, 891, 0, 0, 0, 1797,
	0, 0, 0, 0, 0, 883, 0, 0, 0, 1413,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 668, 0, 1412, 0, 0, 0, 0, 0, 1095,
	1095, 0, 0, 1095, 0, 0, 0, 0, 884, 1407,
	0, 872, 873, 874, 0, 871, 868, 869, 870, 862,
	863, 864, 865, 867, 0, 887, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1408, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1875, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1888, 1888, 0, 0, 0, 884, 0, 0, 872, 873,
	874, 0, 871, 868, 869, 870, 862, 863, 864, 865,
	867, 0, 887, 0, 0, 1888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1750, 1403, 1404, 1405, 0,
	1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 1888, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 260, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 279,
	79, 280, 281, 282, 283, 190, 284, 285, 286, 287,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 288,
	83, 197, 198, 84, 289, 290, 199, 200, 201, 291,
	202, 292, 265, 293, 85, 86, 87, 902, 88, 294,
	89, 90, 91, 295, 266, 92, 93, 296, 297, 298,
	299, 300, 301, 94, 95, 96, 97, 203, 98, 204,
	205, 302, 99, 303, 100, 304, 305, 306, 101, 102,
	307, 103, 308, 0, 309, 206, 104, 105, 207, 208,
	310, 311, 312, 106, 107, 209, 0, 108, 313, 109,
	314, 315, 267, 316, 110, 210, 317, 211, 318, 111,
	112, 113, 212, 213, 269, 319, 116, 320, 114, 321,
	268, 115, 214, 215, 216, 217, 322, 218, 323, 270,
	117, 271, 118, 119, 324, 325, 219, 272, 120, 273,
	326, 121, 327, 328, 122, 0, 123, 124, 125, 126,
	127, 274, 128, 129, 132, 130, 329, 131, 330, 220,
	133, 221, 134, 135, 331, 332, 333, 334, 335, 136,
	222, 275, 137, 276, 223, 138, 139, 140, 336, 224,
	141, 225, 142, 337, 143, 144, 145, 226, 146, 147,
	338, 149, 150, 148, 151, 339, 152, 277, 153, 154,
	227, 155, 0, 156, 157, 158, 340, 228, 159, 160,
	341, 161, 162, 278, 163, 229, 230, 164, 342, 170,
	165, 166, 167, 169, 231, 168, 232, 343, 171, 344,
	172, 173, 345, 233, 234, 235, 346, 347, 174, 236,
	237, 348, 175, 176, 177, 178, 349, 350, 179, 180,
	181, 351, 352, 182, 183, 184, 238, 239, 353, 354,
	185, 355, 356, 357, 358, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1524, 77, 78, 279, 79,
	280, 281, 282, 283, 190, 284, 285, 286, 287, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 288, 83,
	197, 198, 84, 289, 290, 199, 200, 201, 291, 202,
	292, 265, 293, 85, 86, 87, 0, 88, 294, 89,
	90, 91, 295, 266, 92, 93, 296, 297, 298, 299,
	300, 301, 94, 95, 96, 97, 203, 98, 204, 205,
	302, 99, 303, 100, 304, 305, 306, 101, 102, 307,
	103, 308, 0, 309, 206, 104, 105, 207, 208, 310,
	311, 312, 106, 107, 209, 0, 108, 313, 109, 314,
	315, 267, 316, 110, 210, 317, 211, 318, 111, 112,
	113, 212, 213, 269, 319, 116, 320, 114, 321, 268,
	115, 214, 215, 216, 217, 322, 218, 323, 270, 117,
	271, 118, 119, 324, 325, 219, 272, 120, 273, 326,
	121, 327, 328, 122, 0, 123, 124, 125, 126, 127,
	274, 128, 129, 132, 130, 329, 131, 330, 220, 133,
	221, 134, 135, 331, 332, 333, 334, 335, 136, 222,
	275, 137, 276, 223, 138, 139, 140, 336, 224, 141,
	225, 142, 337, 143, 144, 145, 226, 146, 147, 338,
	149, 150, 148, 151, 339, 152, 277, 153, 154, 227,
	155, 0, 156, 157, 158, 340, 228, 159, 160, 341,
	161, 162, 278, 163, 229, 230, 164, 342, 170, 165,
	166, 167, 169, 231, 168, 232, 343, 171, 344, 172,
	173, 345, 233, 234, 235, 346, 347, 174, 236, 237,
	348, 175, 176, 177, 178, 349, 350, 179, 180, 181,
	351, 352, 182, 183, 184, 238, 239, 353, 354, 185,
	355, 356, 357, 358, 186, 187, 188, 189, 260, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 693, 0, 0, 77, 78, 279, 79, 280, 281,
	282, 283, 190, 284, 285, 286, 287, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 288, 83, 197, 198,
	84, 289, 290, 199, 200, 201, 291, 202, 292, 265,
	293, 85, 86, 87, 0, 88, 294, 89, 90, 91,
	295, 266, 92, 93, 296, 297, 298, 299, 300, 301,
	94, 95, 96, 97, 203, 98, 204, 205, 302, 99,
	303, 100, 304, 305, 306, 101, 102, 307, 103, 308,
	0, 309, 206, 104, 105, 207, 208, 310, 311, 312,
	106, 107, 209, 0, 108, 313, 109, 314, 315, 267,
	316, 110, 210, 317, 211, 318, 111, 112, 113, 212,
	213, 269, 319, 116, 320, 114, 321, 268, 115, 214,
	215, 216, 217, 322, 218, 323, 270, 117, 271, 118,
	119, 324, 325, 219, 272, 120, 273, 326, 121, 327,
	328, 122, 0, 123, 124, 125, 126, 127, 274, 128,
	129, 132, 130, 329, 131, 330, 220, 133, 221, 134,
	135, 331, 332, 333, 334, 335, 136, 222, 275, 137,
	276, 223, 138, 139, 140, 336, 224, 141, 225, 142,
	337, 143, 144, 145, 226, 146, 147, 338, 149, 150,
	148, 151, 339, 152, 277, 153, 154, 227, 155, 0,
	156, 157, 158, 340, 228, 159, 160, 341, 161, 162,
	278, 163, 229, 230, 164, 342, 170, 165, 166, 167,
	169, 231, 168, 232, 343, 171, 344, 172, 173, 345,
	233, 234, 235, 346, 347, 174, 236, 237, 348, 175,
	176, 177, 178, 349, 350, 179, 180, 181, 351, 352,
	182, 183, 184, 238, 239, 353, 354, 185, 355, 356,
	357, 358, 186, 187, 188, 189, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 1163, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 1164, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 1162, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 572, 1165, 0, 0,
	0, 573, 0, 0, 580, 1160, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 669, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 63, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 65, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 489, 654, 0, 0, 185, 0, 0, 0, 61,
	186, 187, 188, 189, 575, 62, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 77, 78, 580, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 63, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 65, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 489, 654, 0, 0, 185, 0, 0, 0, 61,
	186, 187, 188, 189, 575, 62, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 77, 78, 580, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 1205, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 1210, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	1206, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 1207, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 77, 78, 580, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 0, 0, 580, 1591, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 0, 0, 580, 1540, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 572, 0, 0, 0,
	0, 573, 0, 0, 580, 1159, 603, 592, 593, 590,
	591, 579, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	619, 585, 0, 0, 0, 80, 81, 191, 634, 193,
	635, 82, 636, 637, 0, 83, 197, 198, 84, 600,
	618, 638, 639, 201, 0, 630, 0, 611, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 612, 614, 0, 613, 615, 94, 95,
	96, 97, 640, 98, 641, 642, 0, 99, 0, 100,
	0, 0, 0, 633, 102, 0, 103, 0, 0, 0,
	584, 104, 105, 620, 621, 598, 0, 0, 106, 107,
	643, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	631, 0, 211, 0, 111, 112, 113, 627, 629, 269,
	0, 116, 0, 114, 0, 268, 115, 644, 645, 646,
	647, 0, 610, 0, 270, 117, 271, 118, 119, 0,
	0, 632, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 574, 131, 599, 628, 133, 648, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 275, 137, 276, 622,
	138, 139, 140, 0, 623, 141, 225, 142, 0, 143,
	144, 145, 649, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 588, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 616, 161, 162, 278, 163,
	650, 230, 164, 0, 170, 165, 166, 167, 169, 651,
	168, 624, 0, 171, 0, 172, 173, 0, 233, 652,
	653, 0, 0, 174, 625, 626, 597, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 617, 0, 182, 183,
	184, 238, 654, 0, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 575, 0, 0, 0, 0, 603,
	592, 593, 590, 591, 579, 571, 572, 0, 0, 0,
	0, 573, 908, 1156, 580, 77, 78, 0, 79, 0,
	0, 0, 0, 619, 585, 0, 0, 0, 80, 81,
	191, 634, 193, 635, 82, 636, 637, 0, 83, 197,
	198, 84, 600, 618, 638, 639, 201, 0, 630, 0,
	611, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 266, 92, 93, 0, 612, 614, 0, 613,
	615, 94, 95, 96, 97, 640, 98, 641, 642, 0,
	99, 0, 100, 0, 0, 0, 633, 102, 0, 103,
	0, 0, 0, 584, 104, 105, 620, 621, 598, 0,
	0, 106, 107, 643, 0, 108, 0, 109, 0, 0,
	267, 0, 110, 631, 0, 211, 0, 111, 112, 113,
	627, 629, 269, 0, 116, 0, 114, 0, 268, 115,
	644, 645, 646, 647, 0, 610, 0, 270, 117, 271,
	118, 119, 0, 0, 632, 272, 120, 273, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 274,
	128, 129, 132, 130, 574, 131, 599, 628, 133, 648,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 275,
	137, 276, 622, 138, 139, 140, 0, 623, 141, 225,
	142, 0, 143, 144, 145, 649, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 277, 153, 154, 588, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 616, 161,
	162, 278, 163, 650, 230, 164, 0, 170, 165, 166,
	167, 169, 651, 168, 624, 0, 171, 0, 172, 173,
	0, 233, 652, 653, 0, 0, 174, 625, 626, 597,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 617,
	0, 182, 183, 184, 238, 654, 0, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 575, 0, 603,
	592, 593, 590, 591, 579, 0, 0, 0, 571, 572,
	569, 0, 0, 0, 573, 77, 78, 580, 79, 0,
	0, 0, 0, 619, 585, 0, 0, 0, 80, 81,
	191, 634, 193, 635, 82, 636, 637, 0, 83, 197,
	198, 84, 600, 618, 638, 639, 201, 0, 630, 0,
	611, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 266, 92, 93, 0, 612, 614, 0, 613,
	615, 94, 95, 96, 97, 640, 98, 641, 642, 0,
	99, 0, 100, 0, 0, 0, 633, 102, 0, 103,
	0, 0, 0, 584, 104, 105, 620, 621, 598, 0,
	0, 106, 107, 643, 0, 108, 0, 109, 0, 0,
	267, 0, 110, 631, 0, 211, 0, 111, 112, 113,
	627, 629, 269, 0, 116, 0, 114, 0, 268, 115,
	644, 645, 646, 647, 0, 610, 0, 270, 117, 271,
	118, 119, 0, 0, 632, 272, 120, 273, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 274,
	128, 129, 132, 130, 574, 131, 599, 628, 133, 648,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 275,
	137, 276, 622, 138, 139, 140, 0, 623, 141, 225,
	142, 0, 143, 144, 145, 649, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 277, 153, 154, 588, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 616, 161,
	162, 278, 163, 650, 230, 164, 0, 170, 165, 166,
	167, 169, 651, 168, 624, 0, 171, 0, 172, 173,
	0, 233, 652, 653, 0, 0, 174, 625, 626, 597,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 617,
	0, 182, 183, 184, 238, 654, 1545, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 575, 0, 603,
	592, 593, 590, 591, 579, 0, 0, 0, 571, 572,
	0, 0, 0, 0, 573, 77, 78, 580, 79, 0,
	0, 0, 0, 619, 585, 0, 0, 0, 80, 81,
	191, 634, 193, 635, 82, 636, 637, 0, 83, 197,
	198, 84, 600, 618, 638, 639, 201, 0, 630, 0,
	611, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 266, 92, 93, 0, 612, 614, 0, 613,
	615, 94, 95, 96, 97, 640, 98, 641, 642, 669,
	99, 0, 100, 0, 0, 0, 633, 102, 0, 103,
	0, 0, 0, 584, 104, 105, 620, 621, 598, 0,
	0, 106, 107, 643, 0, 108, 0, 109, 0, 0,
	267, 0, 110, 631, 0, 211, 0, 111, 112, 113,
	627, 629, 269, 0, 116, 0, 114, 0, 268, 115,
	644, 645, 646, 647, 0, 610, 0, 270, 117, 271,
	118, 119, 0, 0, 632, 272, 120, 273, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 274,
	128, 129, 132, 130, 574, 131, 599, 628, 133, 648,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 275,
	137, 276, 622, 138, 139, 140, 0, 623, 141, 225,
	142, 0, 143, 144, 145, 649, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 277, 153, 154, 588, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 616, 161,
	162, 278, 163, 650, 230, 164, 0, 170, 165, 166,
	167, 169, 651, 168, 624, 0, 171, 0, 172, 173,
	0, 233, 652, 653, 0, 0, 174, 625, 626, 597,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 617,
	0, 182, 183, 184, 238, 654, 0, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 575, 0, 603,
	592, 593, 590, 591, 579, 0, 0, 0, 571, 572,
	0, 0, 0, 0, 573, 77, 78, 580, 79, 0,
	0, 0, 0, 619, 585, 0, 0, 0, 80, 81,
	191, 634, 193, 635, 82, 636, 637, 0, 83, 197,
	198, 84, 600, 618, 638, 639, 201, 0, 630, 0,
	611, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 266, 92, 93, 0, 612, 614, 0, 613,
	615, 94, 95, 96, 97, 640, 98, 641, 642, 0,
	99, 0, 100, 0, 0, 0, 633, 102, 0, 103,
	0, 0, 0, 584, 104, 105, 620, 621, 598, 0,
	0, 106, 107, 643, 0, 108, 0, 109, 0, 1210,
	267, 0, 110, 631, 0, 211, 0, 111, 112, 113,
	627, 629, 269, 0, 116, 0, 114, 0, 268, 115,
	644, 645, 646, 647, 0, 610, 0, 270, 117, 271,
	118, 119, 0, 0, 632, 272, 120, 273, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 274,
	128, 129, 132, 130, 574, 131, 599, 628, 133, 648,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 275,
	137, 276, 622, 138, 139, 140, 0, 623, 141, 225,
	142, 0, 143, 144, 145, 649, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 277, 153, 154, 588, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 616, 161,
	162, 278, 163, 650, 230, 164, 0, 170, 165, 166,
	167, 169, 651, 168, 624, 0, 171, 0, 172, 173,
	0, 233, 652, 653, 0, 0, 174, 625, 626, 597,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 617,
	0, 182, 183, 184, 238, 654, 0, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 575, 0, 0,
	0, 0, 603, 592, 593, 590, 591, 579, 571, 572,
	0, 0, 0, 0, 573, 0, 0, 580, 77, 78,
	842, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 191, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	575, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 191, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 1887, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 1886, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	575, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 1885, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 1887, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 1886, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	575, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 191, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	575, 0, 1182, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 191, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 1185,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 1186, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 1187, 1184,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 1188, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 1183, 189,
	575, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 191, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 0, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 1200, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 603, 592, 593, 590, 591, 579, 0, 0,
	0, 1196, 1197, 0, 0, 0, 0, 1198, 77, 78,
	1199, 79, 0, 0, 0, 0, 619, 585, 0, 0,
	0, 80, 81, 0, 634, 193, 635, 82, 636, 637,
	0, 83, 197, 198, 84, 600, 618, 638, 639, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 1887, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 640, 98,
	641, 642, 0, 99, 0, 100, 0, 0, 0, 633,
	102, 0, 103, 0, 0, 0, 584, 104, 105, 620,
	621, 598, 0, 0, 106, 107, 643, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 0, 0, 116, 0, 114,
	0, 268, 115, 644, 645, 646, 647, 0, 610, 0,
	0, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 574, 131, 599,
	628, 133, 648, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 649, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 588, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 0, 163, 650, 230, 164, 0,
	170, 165, 166, 167, 169, 651, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 652, 653, 0, 0, 174,
	625, 626, 597, 175, 176, 1886, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 654, 0,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 603, 0, 0, 0, 0, 0, 0, 0,
	0, 571, 572, 0, 0, 0, 0, 573, 77, 78,
	580, 79, 0, 0, 0, 0, 619, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 618, 199, 200, 201,
	0, 630, 0, 611, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 612,
	614, 0, 613, 615, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 620,
	621, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 631, 0, 211, 0,
	111, 112, 113, 627, 629, 269, 0, 116, 0, 114,
	0, 268, 115, 214, 215, 216, 217, 0, 218, 0,
	270, 117, 271, 118, 119, 0, 0, 632, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 0, 131, 0,
	628, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 622, 138, 139, 140, 0,
	623, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 616, 161, 162, 278, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 624, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	625, 626, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 617, 0, 182, 183, 184, 238, 239, 0,
	0, 185, 485, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	1658, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 265, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 269, 0, 116, 0, 114,
	0, 268, 115, 214, 215, 216, 217, 0, 218, 0,
	270, 117, 271, 118, 119, 0, 0, 219, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 275, 137, 276, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 227, 155, 0, 156, 157, 158, 63, 228, 159,
	160, 0, 161, 162, 278, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	65, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 489, 239, 0,
	0, 185, 0, 0, 0, 61, 186, 187, 188, 189,
	0, 62, 485, 793, 0, 794, 789, 784, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	60, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 265, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 266, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 797, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 786, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 267, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 269, 0, 116, 0, 114,
	0, 268, 115, 214, 215, 216, 217, 0, 218, 0,
	270, 117, 271, 118, 119, 0, 0, 219, 272, 120,
	273, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 274, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 787, 0, 0, 0,
	136, 222, 275, 137, 276, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 277, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 278, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 785, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 485,
	793, 185, 794, 789, 784, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 795, 790, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	265, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 266, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 780,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 786, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	267, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 269, 0, 116, 0, 114, 0, 268, 115,
	214, 215, 216, 217, 0, 218, 0, 270, 117, 271,
	118, 119, 0, 0, 219, 272, 120, 273, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 274,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 787, 0, 0, 0, 136, 222, 275,
	137, 276, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 277, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 278, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 785,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 485, 793, 185, 794,
	789, 784, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 795, 790,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 265, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 266,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 786, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 267, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 212, 213, 269,
	0, 116, 0, 114, 0, 268, 115, 214, 215, 216,
	217, 0, 218, 0, 270, 117, 271, 118, 119, 0,
	0, 219, 272, 120, 273, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 274, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	787, 0, 0, 0, 136, 222, 275, 137, 276, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 277, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 278, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 785, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 795, 790, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 446, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 63, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 65, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 489, 239,
	0, 0, 185, 74, 0, 0, 61, 186, 187, 188,
	189, 0, 62, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 190, 0, 0,
	0, 1097, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 63, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 65, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 489, 239,
	0, 0, 185, 74, 0, 0, 61, 186, 187, 188,
	189, 0, 62, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 190, 0, 1334,
	0, 60, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	0, 0, 185, 0, 74, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 561, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 212, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 446,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 0, 0, 185, 74, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 1097, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 212, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 0, 0, 185, 0, 74, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 687, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 212, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 0, 0, 185, 74, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 1003, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 212, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 0, 0, 185, 74, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 1555, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 212, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 0, 0, 185, 74, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 665, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 764,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 212, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 763, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 0, 74, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 767, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	0, 485, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 767, 190, 0, 0, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 265, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 266, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 267, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 212, 213, 269, 0, 116, 0, 114, 0,
	268, 115, 214, 215, 216, 217, 0, 218, 0, 270,
	117, 271, 118, 119, 0, 0, 219, 272, 120, 273,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 274, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 275, 137, 276, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 277, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 278, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 233, 234, 235, 0, 0, 174, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 967, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 965, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 1072, 0,
	106, 107, 209, 0, 108, 0, 109, 970, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 212,
	213, 0, 0, 116, 1070, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	969, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 1071, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 967, 202, 0, 0, 962, 85, 86,
	87, 0, 88, 965, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 970, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 961, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 969, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 968, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 1334, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 212, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	212, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 446, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 715, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 446, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 496, 79, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	74, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 458, 213, 0, 0, 116, 0, 114, 0, 0,
	115, 214, 215, 216, 217, 0, 218, 0, 0, 117,
	0, 118, 119, 0, 0, 219, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 446, 0, 0, 136, 222,
	0, 137, 0, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 0, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 233, 234, 235, 0, 0, 174, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 451, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 446, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 363, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 201, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 212, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 362, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 233, 234, 235, 0,
	0, 174, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 74, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 212, 213, 0, 0, 116, 0, 114, 0,
	0, 115, 214, 215, 216, 217, 0, 218, 0, 0,
	117, 0, 118, 119, 0, 0, 219, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 0, 137, 0, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 0, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 233, 234, 235, 0, 0, 174, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 1246,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 1244, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 1233, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	832, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 212, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 155, 0, 377, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 190, 0, 700,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 0, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	74, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 546, 213, 0, 0, 116, 0, 114, 0, 0,
	115, 214, 215, 216, 217, 0, 218, 0, 0, 117,
	0, 118, 119, 0, 0, 219, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	0, 137, 0, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 227,
	155, 0, 156, 157, 158, 0, 228, 159, 160, 0,
	161, 162, 0, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 233, 234, 235, 0, 0, 174, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 542, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 140, 0, 224, 141, 225, 142, 0,
	143, 144, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 155, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 74, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 190, 0,
	0, 0, 0, 80, 81, 191, 192, 193, 194, 82,
	195, 196, 0, 83, 197, 198, 84, 0, 0, 199,
	200, 502, 0, 202, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	203, 98, 204, 205, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 206, 104,
	105, 207, 208, 0, 0, 0, 106, 107, 209, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 210, 0,
	211, 0, 111, 112, 113, 212, 213, 0, 0, 116,
	0, 114, 0, 0, 115, 214, 215, 216, 217, 0,
	218, 0, 0, 117, 0, 118, 119, 0, 0, 219,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 388, 0, 128, 129, 132, 130, 0,
	131, 0, 220, 133, 221, 134, 135, 0, 0, 0,
	0, 0, 136, 222, 0, 137, 0, 223, 138, 139,
	140, 0, 224, 141, 225, 142, 0, 143, 144, 145,
	226, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 227, 155, 0, 156, 157, 158, 0,
	228, 159, 160, 0, 161, 162, 0, 163, 229, 230,
	164, 0, 170, 165, 166, 167, 169, 231, 168, 232,
	0, 171, 0, 172, 173, 0, 387, 234, 235, 0,
	0, 383, 236, 237, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 238,
	239, 74, 0, 185, 0, 0, 0, 0, 186, 187,
	188, 189, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 0, 190, 0, 0, 0, 0,
	80, 81, 191, 192, 193, 194, 82, 195, 196, 0,
	83, 197, 198, 84, 0, 0, 199, 200, 201, 0,
	202, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 203, 98, 204,
	205, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 206, 104, 105, 207, 208,
	0, 0, 0, 106, 107, 209, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 210, 0, 211, 0, 111,
	112, 113, 212, 213, 0, 0, 116, 0, 114, 0,
	0, 115, 214, 215, 216, 217, 0, 218, 0, 0,
	117, 0, 118, 119, 0, 0, 219, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	388, 0, 128, 129, 132, 130, 0, 131, 0, 220,
	133, 221, 134, 135, 0, 0, 0, 0, 0, 136,
	222, 0, 137, 0, 223, 138, 139, 140, 0, 224,
	141, 225, 142, 0, 143, 144, 145, 226, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	227, 155, 0, 156, 157, 158, 0, 228, 159, 160,
	0, 161, 162, 0, 163, 229, 230, 164, 0, 170,
	165, 166, 167, 169, 231, 168, 232, 0, 171, 0,
	172, 173, 0, 387, 234, 235, 0, 0, 383, 236,
	237, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 0, 182, 183, 184, 238, 239, 74, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 190, 0, 0, 0, 0, 80, 81, 191,
	192, 193, 194, 82, 195, 196, 0, 83, 197, 198,
	84, 0, 0, 199, 200, 201, 0, 202, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 203, 98, 204, 205, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 206, 104, 105, 207, 208, 0, 0, 0,
	106, 107, 209, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 210, 0, 211, 0, 111, 112, 113, 481,
	213, 0, 0, 116, 0, 114, 0, 0, 115, 214,
	215, 216, 217, 0, 218, 0, 0, 117, 0, 118,
	119, 0, 0, 219, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 220, 133, 221, 134,
	135, 0, 0, 0, 0, 0, 136, 222, 0, 137,
	0, 223, 138, 139, 140, 0, 224, 141, 225, 142,
	0, 143, 144, 145, 226, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 227, 155, 0,
	156, 157, 158, 0, 228, 159, 160, 0, 161, 162,
	0, 163, 229, 230, 164, 0, 170, 165, 166, 167,
	169, 231, 168, 232, 0, 171, 0, 172, 173, 0,
	233, 234, 235, 0, 0, 174, 236, 237, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 238, 239, 74, 0, 185, 0, 0,
	0, 0, 186, 187, 188, 189, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 0, 0, 0, 0, 190,
	0, 0, 0, 0, 80, 81, 191, 192, 193, 194,
	82, 195, 196, 0, 83, 197, 198, 84, 0, 0,
	199, 200, 201, 0, 202, 0, 0, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 0, 92,
	93, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	97, 203, 98, 204, 205, 0, 99, 0, 100, 0,
	0, 0, 101, 102, 0, 103, 0, 0, 0, 206,
	104, 105, 207, 208, 0, 0, 0, 106, 107, 209,
	0, 108, 0, 109, 0, 0, 0, 0, 110, 210,
	0, 211, 0, 111, 112, 113, 478, 213, 0, 0,
	116, 0, 114, 0, 0, 115, 214, 215, 216, 217,
	0, 218, 0, 0, 117, 0, 118, 119, 0, 0,
	219, 0, 120, 0, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 0, 128, 129, 132, 130,
	0, 131, 0, 220, 133, 221, 134, 135, 0, 0,
	0, 0, 0, 136, 222, 0, 137, 0, 223, 138,
	139, 140, 0, 224, 141, 225, 142, 0, 143, 144,
	145, 226, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 0, 153, 154, 227, 155, 0, 156, 157, 158,
	0, 228, 159, 160, 0, 161, 162, 0, 163, 229,
	230, 164, 0, 170, 165, 166, 167, 169, 231, 168,
	232, 0, 171, 0, 172, 173, 0, 233, 234, 235,
	0, 0, 174, 236, 237, 0, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 0, 0, 182, 183, 184,
	238, 239, 74, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 190, 0, 0, 0,
	0, 80, 81, 191, 192, 193, 194, 82, 195, 196,
	0, 83, 197, 198, 84, 0, 0, 199, 200, 201,
	0, 202, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 203, 98,
	204, 205, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 206, 104, 105, 207,
	208, 0, 0, 0, 106, 107, 209, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 210, 0, 211, 0,
	111, 112, 113, 475, 213, 0, 0, 116, 0, 114,
	0, 0, 115, 214, 215, 216, 217, 0, 218, 0,
	0, 117, 0, 118, 119, 0, 0, 219, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	220, 133, 221, 134, 135, 0, 0, 0, 0, 0,
	136, 222, 0, 137, 0, 223, 138, 139, 140, 0,
	224, 141, 225, 142, 0, 143, 144, 145, 226, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 227, 155, 0, 156, 157, 158, 0, 228, 159,
	160, 0, 161, 162, 0, 163, 229, 230, 164, 0,
	170, 165, 166, 167, 169, 231, 168, 232, 0, 171,
	0, 172, 173, 0, 233, 234, 235, 0, 0, 174,
	236, 237, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 238, 239, 74,
	0, 185, 0, 0, 0, 0, 186, 187, 188, 189,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 190, 0, 0, 0, 0, 80, 81,
	191, 192, 193, 194, 82, 195, 196, 0, 83, 197,
	198, 84, 0, 0, 199, 200, 201, 0, 202, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 203, 98, 204, 205, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 206, 104, 105, 207, 208, 0, 0,
	0, 106, 107, 209, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 210, 0, 211, 0, 111, 112, 113,
	473, 213, 0, 0, 116, 0, 114, 0, 0, 115,
	214, 215, 216, 217, 0, 218, 0, 0, 117, 0,
	118, 119, 0, 0, 219, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 220, 133, 221,
	134, 135, 0, 0, 0, 0, 0, 136, 222, 0,
	137, 0, 223, 138, 139, 140, 0, 224, 141, 225,
	142, 0, 143, 144, 145, 226, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 227, 155,
	0, 156, 157, 158, 0, 228, 159, 160, 0, 161,
	162, 0, 163, 229, 230, 164, 0, 170, 165, 166,
	167, 169, 231, 168, 232, 0, 171, 0, 172, 173,
	0, 233, 234, 235, 0, 0, 174, 236, 237, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	0, 182, 183, 184, 238, 239, 74, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 0, 0, 0, 0,
	190, 0, 0, 0, 0, 80, 81, 191, 192, 193,
	194, 82, 195, 196, 0, 83, 197, 198, 84, 0,
	0, 199, 200, 201, 0, 202, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 203, 98, 204, 205, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	206, 104, 105, 207, 208, 0, 0, 0, 106, 107,
	209, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	210, 0, 211, 0, 111, 112, 113, 454, 213, 0,
	0, 116, 0, 114, 0, 0, 115, 214, 215, 216,
	217, 0, 218, 0, 0, 117, 0, 118, 119, 0,
	0, 219, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 220, 133, 221, 134, 135, 0,
	0, 0, 0, 0, 136, 222, 0, 137, 0, 223,
	138, 139, 140, 0, 224, 141, 225, 142, 0, 143,
	144, 145, 226, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 227, 155, 0, 156, 157,
	158, 0, 228, 159, 160, 0, 161, 162, 0, 163,
	229, 230, 164, 0, 170, 165, 166, 167, 169, 231,
	168, 232, 0, 171, 0, 172, 173, 0, 233, 234,
	235, 0, 0, 174, 236, 237, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 238, 239, 74, 0, 185, 0, 0, 0, 0,
	186, 187, 188, 189, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 0, 0, 0, 0, 190, 0, 0,
	0, 0, 80, 81, 191, 192, 193, 194, 82, 195,
	196, 0, 83, 197, 198, 84, 0, 0, 199, 200,
	201, 0, 202, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 203,
	98, 204, 205, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 206, 104, 105,
	207, 208, 0, 0, 0, 106, 107, 209, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 210, 0, 211,
	0, 111, 112, 113, 212, 213, 0, 0, 116, 0,
	114, 0, 0, 115, 214, 215, 216, 217, 0, 218,
	0, 0, 117, 0, 118, 119, 0, 0, 219, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 220, 133, 221, 134, 135, 0, 0, 0, 0,
	0, 136, 222, 0, 137, 0, 223, 138, 139, 140,
	0, 224, 141, 225, 142, 0, 143, 144, 145, 226,
	435, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 227, 155, 0, 156, 157, 158, 0, 228,
	159, 160, 0, 161, 162, 0, 163, 229, 230, 164,
	0, 170, 165, 166, 167, 169, 231, 168, 232, 0,
	171, 0, 172, 173, 0, 233, 234, 235, 0, 0,
	174, 236, 237, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 0, 182, 183, 184, 238, 239,
	74, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 190, 0, 0, 0, 0, 80,
	81, 191, 192, 193, 194, 82, 195, 196, 0, 83,
	197, 198, 84, 0, 0, 199, 200, 201, 0, 202,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 203, 98, 204, 205,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 206, 104, 105, 207, 208, 0,
	0, 0, 106, 107, 209, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 210, 0, 211, 0, 111, 112,
	113, 212, 213, 0, 0, 116, 0, 114, 0, 0,
	115, 214, 215, 216, 217, 0, 218, 0, 0, 117,
	0, 118, 119, 0, 0, 219, 0, 120, 0, 0,
	380, 0, 0, 122, 0, 123, 124, 125, 126, 388,
	0, 128, 129, 132, 130, 0, 131, 0, 220, 133,
	221, 134, 135, 0, 0, 0, 0, 0, 136, 222,
	0, 137, 0, 223, 138, 139, 140, 0, 224, 141,
	225, 142, 0, 143, 144, 145, 226, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 382,
	155, 0, 156, 157, 158, 0, 228, 159, 381, 0,
	161, 162, 0, 163, 229, 230, 164, 0, 170, 165,
	166, 167, 169, 231, 168, 232, 0, 171, 0, 172,
	173, 0, 387, 234, 235, 0, 0, 383, 236, 237,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 238, 239, 74, 0, 185,
	0, 0, 0, 0, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 77, 78, 0, 79, 0, 0, 0,
	0, 190, 0, 0, 0, 0, 80, 81, 191, 192,
	193, 194, 82, 195, 196, 0, 83, 197, 198, 84,
	0, 0, 199, 200, 201, 0, 202, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 203, 98, 204, 205, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 206, 104, 105, 207, 208, 0, 0, 0, 106,
	107, 209, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 210, 0, 211, 0, 111, 112, 113, 212, 213,
	0, 0, 116, 0, 114, 0, 0, 115, 214, 215,
	216, 217, 0, 218, 0, 0, 117, 0, 118, 119,
	0, 0, 219, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 220, 133, 221, 134, 135,
	0, 0, 0, 0, 0, 136, 222, 0, 137, 0,
	223, 138, 139, 0, 0, 224, 141, 225, 142, 0,
	143, 0, 145, 226, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 227, 0, 0, 156,
	157, 158, 0, 228, 159, 160, 0, 161, 162, 0,
	163, 229, 230, 164, 0, 170, 165, 166, 167, 169,
	231, 168, 232, 0, 171, 0, 172, 173, 0, 233,
	234, 235, 0, 0, 174, 236, 237, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 0, 182,
	183, 184, 238, 239, 0, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 858, 859, 0, 878, 879,
	880, 888, 889, 890, 0, 0, 0, 0, 0, 0,
	0, 881, 0, 0, 0, 0, 0, 0, 861, 0,
	892, 858, 859, 0, 878, 879, 880, 888, 889, 890,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 860,
	0, 0, 0, 0, 861, 875, 892, 0, 0, 0,
	0, 0, 0, 858, 859, 0, 878, 879, 880, 888,
	889, 890, 0, 0, 0, 860, 0, 0, 0, 881,
	0, 875, 0, 0, 0, 0, 861, 0, 892, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 860, 0, 0,
	0, 0, 0, 875, 0, 0, 0, 0, 0, 0,
	0, 0, 885, 893, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 885, 893,
	0, 0, 0, 876, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 882, 0, 0, 0, 876,
	885, 893, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 882, 0, 0, 0, 883, 0, 0, 0, 0,
	877, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 882, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 886,
	872, 873, 874, 0, 871, 868, 869, 870, 862, 863,
	864, 865, 867, 0, 887, 0, 0, 0, 0, 0,
	0, 1431, 0, 884, 0, 0, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 0, 0, 0, 0, 0, 0, 1383, 1391, 1392,
	0, 1409, 1410, 1411, 0, 884, 0, 0, 872, 873,
	874, 0, 871, 868, 869, 870, 862, 863, 864, 865,
	867, 0, 887, 0, 858, 859, 1838, 878, 879, 880,
	888, 889, 890, 0, 0, 0, 0, 0, 0, 0,
	881, 0, 0, 0, 0, 0, 0, 861, 1406, 892,
	858, 859, 0, 878, 879, 880, 888, 889, 890, 0,
	0, 0, 0, 0, 0, 0, 881, 0, 860, 0,
	0, 0, 0, 861, 875, 892, 0, 0, 0, 0,
	0, 0, 858, 859, 0, 878, 879, 880, 888, 889,
	890, 0, 0, 0, 860, 0, 0, 1397, 881, 0,
	875, 0, 0, 0, 0, 861, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 860, 0, 0, 0,
	1412, 0, 875, 0, 0, 0, 0, 0, 0, 0,
	0, 885, 893, 0, 0, 0, 1407, 0, 0, 866,
	0, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 885, 893, 0,
	0, 0, 876, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 891, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 882, 0, 0, 0, 876, 885,
	893, 0, 0, 1408, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 883, 0, 0, 0, 0, 877,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 882, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 886, 0, 0, 0,
	0, 0, 0, 1403, 1404, 1405, 0, 1402, 1399, 1400,
	1401, 1393, 1394, 1395, 1396, 1398, 0, 877, 0, 0,
	0, 0, 0, 0, 0, 0, 884, 0, 886, 872,
	873, 874, 0, 871, 868, 869, 870, 862, 863, 864,
	865, 867, 0, 887, 0, 0, 0, 1836, 0, 0,
	0, 0, 884, 0, 0, 872, 873, 874, 0, 871,
	868, 869, 870, 862, 863, 864, 865, 867, 0, 887,
	0, 0, 0, 1817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 0, 872, 873, 874,
	0, 871, 868, 869, 870, 862, 863, 864, 865, 867,
	0, 887, 0, 858, 859, 1792, 878, 879, 880, 888,
	889, 890, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 0, 0, 861, 0, 892, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 860, 0, 0,
	0, 0, 861, 875, 892, 0, 0, 0, 0, 0,
	0, 858, 859, 0, 878, 879, 880, 888, 889, 890,
	0, 0, 0, 860, 0, 0, 0, 881, 0, 875,
	0, 0, 0, 0, 861, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 860, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 0,
	885, 893, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 885, 893, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 882, 0, 0, 0, 876, 885, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 882,
	0, 0, 0, 883, 0, 0, 0, 0, 877, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 886, 872, 873,
	874, 0, 871, 868, 869, 870, 862, 863, 864, 865,
	867, 0, 887, 0, 0, 0, 1787, 0, 0, 0,
	0, 884, 0, 0, 872, 873, 874, 0, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 0, 887, 0,
	0, 0, 1783, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 0, 858, 859, 1718, 878, 879, 880, 888, 889,
	890, 0, 0, 0, 0, 0, 0, 0, 881, 0,
	0, 0, 0, 0, 0, 861, 0, 892, 858, 859,
	0, 878, 879, 880, 888, 889, 890, 0, 0, 0,
	0, 0, 0, 0, 881, 0, 860, 0, 0, 0,
	0, 861, 875, 892, 0, 0, 0, 0, 0, 0,
	858, 859, 0, 878, 879, 880, 888, 889, 890, 0,
	0, 0, 860, 0, 0, 0, 881, 0, 875, 0,
	0, 0, 0, 861, 0, 892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 0, 860, 0, 0, 0, 0, 0,
	875, 0, 0, 0, 0, 0, 0, 0, 0, 885,
	893, 0, 0, 0, 0, 0, 0, 866, 0, 0,
	0, 0, 0, 0, 891, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 885, 893, 0, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	891, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 882, 0, 0, 0, 876, 885, 893, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 883, 0, 0, 0, 0, 877, 876, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 886, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	882, 0, 0, 877, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 886, 872, 873, 874,
	0, 871, 868, 869, 870, 862, 863, 864, 865, 867,
	0, 887, 0, 0, 0, 1717, 0, 0, 0, 0,
	884, 0, 0, 872, 873, 874, 0, 871, 868, 869,
	870, 862, 863, 864, 865, 867, 0, 887, 0, 0,
	0, 1624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 872, 873, 874, 0, 871,
	868, 869, 870, 862, 863, 864, 865, 867, 0, 887,
	0, 858, 859, 1558, 878, 879, 880, 888, 889, 890,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 861, 0, 892, 858, 859, 0,
	878, 879, 880, 888, 889, 890, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 860, 0, 0, 0, 0,
	861, 875, 892, 0, 0, 0, 0, 0, 0, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 860, 0, 0, 0, 881, 0, 875, 0, 0,
	0, 0, 861, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 860, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 893,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 885, 893, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 882, 0, 0, 0, 876, 885, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 883, 0, 0, 0, 0, 877, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 886, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 0, 0, 0, 1542, 0, 0, 0, 0, 884,
	0, 0, 872, 873, 874, 0, 871, 868, 869, 870,
	862, 863, 864, 865, 867, 0, 887, 0, 0, 0,
	1152, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 872, 873, 874, 0, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 0, 887, 0,
	1472, 858, 859, 0, 878, 879, 880, 888, 889, 890,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 861, 0, 892, 858, 859, 0,
	878, 879, 880, 888, 889, 890, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 860, 0, 0, 0, 0,
	861, 875, 892, 0, 0, 0, 0, 0, 0, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 860, 0, 0, 0, 881, 0, 875, 0, 0,
	1085, 0, 861, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 1906, 0, 860, 0, 0, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 893,
	0, 0, 0, 0, 0, 0, 866, 0, 1423, 0,
	0, 1422, 0, 891, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 883, 885, 893, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 882, 0, 0, 0, 876, 885, 893, 0, 0,
	0, 0, 0, 0, 1905, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 883, 0, 0, 0, 0, 877, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 886, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 872, 873, 874, 0, 871, 868, 869, 870,
	862, 863, 864, 865, 867, 0, 887, 0, 0, 0,
	0, 1391, 1392, 0, 1409, 1410, 1411, 0, 0, 0,
	0, 884, 0, 0, 872, 873, 874, 1536, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 895, 887, 0,
	0, 0, 0, 858, 859, 0, 878, 879, 880, 888,
	889, 890, 0, 0, 0, 0, 0, 0, 0, 881,
	0, 1406, 0, 894, 0, 0, 861, 0, 892, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 860, 0, 0,
	0, 0, 861, 875, 892, 0, 0, 0, 0, 0,
	0, 858, 859, 0, 878, 879, 880, 888, 889, 890,
	1397, 0, 0, 860, 0, 0, 0, 881, 0, 875,
	0, 0, 0, 0, 861, 0, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 1412, 0, 860, 0, 0, 0, 0,
	0, 875, 0, 0, 0, 0, 0, 0, 0, 1407,
	885, 893, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 0, 0, 891, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 885, 893, 0, 0,
	0, 876, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 882, 0, 0, 1408, 876, 885, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 882,
	430, 0, 0, 883, 0, 0, 0, 0, 877, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 886,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 882, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 1403, 1404, 1405, 0,
	1402, 1399, 1400, 1401, 1393, 1394, 1395, 1396, 1398, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 886, 872, 873,
	874, 0, 871, 868, 869, 870, 862, 863, 864, 865,
	867, 0, 887, 0, 0, 0, 1552, 0, 0, 0,
	0, 884, 0, 0, 872, 873, 874, 0, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 0, 887, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 858, 859, 0, 878, 879, 880, 888, 889, 890,
	0, 0, 0, 0, 0, 0, 0, 881, 0, 0,
	0, 0, 0, 0, 861, 0, 892, 858, 859, 0,
	878, 879, 880, 888, 889, 890, 0, 0, 0, 0,
	0, 0, 0, 881, 0, 860, 0, 1424, 0, 0,
	861, 875, 892, 0, 0, 0, 0, 0, 0, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 860, 0, 0, 0, 881, 0, 875, 0, 0,
	0, 0, 861, 0, 892, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 860, 0, 1429, 0, 0, 0, 875,
	0, 0, 0, 0, 0, 0, 0, 0, 885, 893,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 891, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 885, 893, 0, 0, 0, 876,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 891,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	0, 882, 0, 0, 0, 876, 885, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 882, 0, 0,
	0, 883, 0, 0, 0, 0, 877, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 886, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 882,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	1389, 0, 0, 886, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 886, 872, 873, 874, 0,
	871, 868, 869, 870, 862, 863, 864, 865, 867, 0,
	887, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 872, 873, 874, 0, 871, 868, 869, 870,
	862, 863, 864, 865, 867, 0, 887, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 0, 872, 873, 874, 0, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 0, 887, 858,
	859, 0, 878, 879, 880, 888, 889, 890, 0, 0,
	0, 0, 0, 0, 0, 881, 0, 0, 0, 1382,
	0, 0, 861, 0, 892, 858, 859, 0, 878, 879,
	880, 888, 889, 890, 0, 0, 0, 0, 0, 0,
	0, 881, 0, 860, 0, 0, 0, 0, 861, 875,
	892, 0, 0, 0, 0, 0, 0, 858, 859, 0,
	878, 879, 880, 888, 889, 890, 0, 0, 0, 860,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 0,
	861, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 860, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 0, 0, 0, 0, 0, 885, 893, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 885, 893, 0, 0, 0, 876, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 883, 0, 882,
	0, 0, 0, 876, 885, 893, 0, 0, 858, 859,
	0, 878, 879, 880, 888, 889, 890, 0, 0, 891,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 883,
	0, 861, 0, 892, 877, 876, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 0, 0, 0, 0,
	0, 0, 860, 0, 0, 0, 0, 0, 875, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 886, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 877, 0, 0, 0, 0, 0, 0, 0,
	0, 884, 0, 886, 872, 873, 874, 866, 871, 868,
	869, 870, 862, 863, 864, 865, 867, 0, 887, 0,
	0, 0, 0, 0, 0, 885, 893, 884, 0, 0,
	872, 873, 874, 0, 871, 868, 869, 870, 862, 863,
	864, 865, 867, 27, 887, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 49, 0, 876, 0, 0, 884,
	0, 0, 872, 873, 874, 0, 871, 868, 869, 870,
	862, 863, 864, 865, 867, 0, 887, 0, 51, 0,
	0, 0, 0, 0, 28, 0, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 35, 877, 0, 52, 0, 0, 0, 39,
	36, 0, 0, 0, 886, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 0, 37, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 737, 731, 754, 725,
	745, 744, 0, 0, 727, 726, 0, 0, 0, 756,
	755, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 872, 873, 874, 0, 871, 868, 869,
	870, 862, 863, 864, 865, 867, 0, 887, 0, 0,
	750, 0, 742, 741, 0, 0, 0, 0, 0, 0,
	0, 740, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 739, 42,
	0, 53, 0, 0, 0, 0, 43, 0, 0, 63,
	0, 0, 0, 0, 46, 48, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 732, 733, 734, 735, 0,
	753, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 66,
	0, 0, 0, 0, 743, 0, 0, 61, 0, 0,
	0, 0, 0, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 60, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	729, 0, 0, 0, 0, 0, 0, 0, 736, 730,
	0, 0, 0, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 0, 0, 728, 0, 0, 751, 752, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	757,
}
var sqlPact = [...]int{

	24960, -1000, -7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 781, 16787, -1000,
	-1000, -1000, -1000, -1000, 671, 743, 173, 4384, 16787, 16787,
	16520, 904, 904, 18122, -1000, -1000, 21326, -1000, 2822, 497,
	498, 497, 497, 496, 18122, 608, 652, 118, -1000, 712,
	-26, 21059, 16787, 1300, 23, 15185, 314, 24960, 16253, 20792,
	16787, 15986, 310, 35, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1150, 1080, 1077, 15185, 20525, 20258, 19991, 19724, -1000, 10338,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 606, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 338,
	337, -1000, 15719, -1000, 870, -1000, 21, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 864, -1000, 16787, -1000, -1000,
	19457, 19190, 334, 849, -1000, -1000, 566, 407, 1318, -1000,
	36, -1000, -1000, 1149, -1000, 862, 1148, 1147, 1145, 1144,
	1143, 1139, 404, 850, -1000, 471, 849, -1000, 849, -1000,
	-1000, -1000, 584, 18122, -1000, 15185, -1000, 18923, 16787, 1095,
	18656, -1000, 712, -1000, -1000, -1000, 875, 1294, 1294, 1294,
	1313, 122, 119, 118, 14, 16787, -1000, 322, 14, 6985,
	6985, -1000, -1000, 314, -1000, 355, 13311, -1000, 7545, -1000,
	833, 1211, 429, 713, 1210, -8, 775, 764, 1209, 649,
	12500, 35, -1000, -1000, -1000, 8948, 4106, 15185, 16787, 16787,
	672, 18389, -1000, 1204, 107, 1202, -1000, 105, 1198, -1000,
	105, 1196, -9, -1000, -1000, -1000, -1000, -1000, -1000, 314,
	15452, 1375, 25060, -1000, 8948, -1000, -1000, 13581, 1035, 13581,
	-1000, -1000, 1370, -1000, 8948, -1000, 20, 19, 1045, 1022,
	10885, 10618, 1246, 644, -1000, -1000, -1000, 32, 4384, 16787,
	1156, 13581, 16787, 16787, 16787, 16787, 16787, 16787, -1000, 1011,
	-1000, 16787, 16787, -1000, 18, 16, -1000, 18122, -1000, 121,
	-1000, 312, 989, 124, 17855, 1219, 988, -1000, 875, -1000,
	867, 1008, 8108, 8948, 118, -1000, -1000, 118, 118, 8948,
	-1000, -1000, 16787, 14, 1361, 16787, 177, -1000, 23963, -1000,
	-1000, 8948, 8948, 8948, 8948, 8948, 816, -1000, -1000, -1000,
	5242, -1000, -1000, 35, 308, 343, -1000, -1000, 306, 35,
	-1000, -1000, -1000, -1000, 305, 1495, 418, -1000, -1000, -1000,
	8948, 425, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1155, 303, 302, -1000, -1000, -1000, -1000, 299, 298,
	297, 296, 295, 294, 288, 276, 273, 272, 271, 270,
	269, 267, 262, 804, -1000, 438, -1000, -1000, 438, 438,
	-1000, 250, 250, 251, -1000, -1000, -1000, -1000, 250, -1000,
	-1000, -1000, 396, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	259, 177, -1000, -1000, -1000, 16787, -14, -1000, 24685, -1000,
	1, 829, -1000, 14651, 1296, 1272, 1267, 15185, 1331, 1327,
	573, 16787, 16787, 571, 570, 15185, -1000, 1138, -16, -1000,
	-1000, 336, -1000, -1000, 423, 89, 1346, 89, 12771, -1000,
	16787, 16787, -1000, 16787, -1000, -1000, 16787, -1000, 16787, 16787,
	-1000, 16787, 160, 14117, 702, 1191, -26, -18, -1000, 1382,
	-1000, -1000, -1000, -1000, 75, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 251,
	804, 250, 250, 250, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 396, -1000, -1000, 438, 438, 438, -1000, -1000, -22,
	24685, 552, 5, 13849, 16787, -1000, 17, -1000, -1000, 1137,
	488, -24, 790, 1072, 889, -1000, -1000, -1000, -1000, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1427, -1000, -1000, -1000, -1000, 1447, 11, -1000, -1000, -1000,
	-1000, -1000, 1467, -1000, -1000, -1000, 4384, -1000, -1000, -1000,
	16787, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 790, 1072, -1000, -1000, 15185, 14384, 1345, 1188, 1344,
	16787, 854, 971, -1000, -1000, 375, 1187, -1000, -1000, -1000,
	-1000, 24685, -1000, 24685, 727, 1083, -1000, 1083, 10, -1000,
	23669, -1000, 239, -28, -1000, 423, 6985, 12230, 25060, 25060,
	16787, 600, 8948, 8948, 8948, 8948, 8948, 8948, 8948, 8948,
	8948, 8948, 8948, 8948, 8948, 8948, 8948, 8948, 8948, 8948,
	8948, 8948, 8948, 8948, 1128, 8948, 542, 8948, 8948, 8948,
	8948, 910, 842, 215, 4384, -1000, 645, 645, 645, 24717,
	24717, 197, 15, 23287, 7, 35, -1000, -1000, 6702, 6402,
	35, 4662, -1000, 721, 1444, 434, 24685, 1162, 1114, 237,
	114, 109, 8948, 8948, 9228, 9228, 8948, 9508, 8948, 8948,
	5522, 8948, 8948, 8948, 8948, 8948, 8948, -1000, 234, -1000,
	-1000, -1000, -1000, 1443, -1000, -1000, 1438, -1000, 592, 591,
	1437, 423, 106, 7545, -1000, 702, 16787, 16787, 16787, -1000,
	-1000, 963, 17588, 960, 25060, 16787, -1000, 232, 229, 1059,
	1058, 16787, 16787, 17321, 17054, 16787, 826, 228, 219, 16787,
	763, -1000, 16787, 16787, 747, 637, 1135, 16787, -1000, 8948,
	742, 8948, 744, -1000, 11689, 457, 16787, 748, 128, -1000,
	-1000, -1000, 372, 16787, -1000, -1000, -1000, 107, -1000, 105,
	105, -1000, -1000, 15185, -1000, -1000, -1000, -1000, -1000, -1000,
	25060, 347, 345, -1000, 1436, 541, -1000, 540, 537, 531,
	-1000, 216, -1000, 8948, 16787, 13849, 5, 4, -1000, -1000,
	16787, 1072, -1000, -1000, -1000, -1000, 685, -1000, 783, -1000,
	11152, -1000, -1000, -1000, 721, -1000, 0, -1000, -1000, -1000,
	-1000, 104, -32, 3, 25060, -1000, -1000, -1000, -1000, -1000,
	16787, 278, 16787, -26, 16787, -26, 16787, 1183, 1459, 16787,
	-1000, -1000, -1000, 8948, -1000, -1000, -1000, -26, 16787, -1000,
	1113, -1000, -29, 1228, -39, 14918, -1000, 11419, -1000, -1000,
	-1000, 400, 420, 420, 422, 422, 422, 422, 290, 290,
	2568, 2313, 2360, 2360, 2360, 609, 853, 853, 2360, 2360,
	2360, 24717, 3463, 2301, 8948, 8948, 527, 830, 215, 2301,
	8948, 1420, 2301, 2301, 2301, -1000, 789, -1000, -1000, -1000,
	1134, 213, 9508, 9508, -1000, -1000, -1000, 5242, -1000, -1000,
	212, 8948, -1000, 8948, -34, -52, -1000, -1000, -40, -1000,
	-1000, -11, 8948, 8948, 8948, 103, -1000, 102, 613, -1000,
	8948, 827, 208, 207, 8948, -1000, -1000, 24659, 21891, 101,
	1133, -83, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 100,
	98, 24369, -83, 97, 3491, -1000, 9508, 9508, 9508, 5242,
	206, 95, 23637, -83, 24337, 7825, 7825, 7825, 94, 24311,
	8948, -83, 21865, 3366, 3148, -42, -44, -50, 1434, -65,
	92, 392, 391, 91, 1113, -1000, -1000, -1000, -1000, 522,
	520, 1178, -1000, 957, -1000, 461, -1000, 814, 8948, 16787,
	204, 199, 797, -1000, 1175, 908, 1174, 908, -1000, 1,
	756, 8948, 8948, -1000, 519, -1000, -1000, 512, -1000, 632,
	-1000, 23319, -1000, 6985, 24685, -1000, 745, 1280, -66, -1000,
	-1000, 6985, 423, 12771, 12230, 7545, -72, -1000, -1000, -1000,
	702, -1000, 495, 1432, 90, 999, 866, 737, 691, 1430,
	24685, 0, -1000, 0, -1000, -1000, -1000, -1000, -1000, -1000,
	16787, 1097, -1000, 14384, 187, 16787, 185, -1000, 182, -1000,
	180, 16787, -1000, 1219, -1000, 86, -1000, 1110, 1310, -1000,
	12230, 874, 1064, 1063, 12230, 1009, 832, 832, 832, -1000,
	14918, 3817, -1000, -1000, 16787, 175, 11959, 85, 1228, 8948,
	2301, 2301, 8948, 9508, 9508, -1000, 2301, -1000, -1000, -1000,
	-1000, 1127, 171, 8948, 25060, 23931, 3269, -73, 6102, -1,
	23261, -1000, -1000, 343, -1000, 83, 7265, -1000, 23989, 24,
	24, -1000, 1457, 1215, -1000, 8948, 24021, -1000, 13041, 430,
	836, 22970, 25060, 25060, -1000, 8948, -1000, -1000, 1124, 8948,
	-1000, 25060, 25060, 9508, 9508, 9508, 9508, 9508, 9508, 9508,
	9508, 9508, 9508, 9508, 9508, 9508, 9508, 9508, 9508, 9508,
	9508, 9508, 1031, 9508, 1418, 1418, 1418, -2, 5802, -1000,
	1154, 1124, 8948, 8948, 25060, 82, 81, 77, -1000, 8948,
	-83, 8948, 8948, 8948, -1000, -1000, -1000, 73, -1000, 1429,
	-1000, -1000, -1000, -1000, 1110, 16787, 16787, 16787, 1173, -1000,
	1890, -1000, 22938, -74, 16787, 16787, -1000, 1047, 1115, 477,
	16787, -1000, 16787, -1000, 16787, 16787, 16787, -78, -79, 16787,
	16787, -1000, -1000, -4, 6985, 205, -26, -4, 742, -1000,
	-3, -1000, 371, -1000, 291, 178, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 72, -1000, -1000, 1099, -1000, 10068,
	169, 16787, 14384, 1337, 10068, 851, -1000, -1000, 424, 8948,
	8948, 1228, 611, 12230, 12230, 1955, 1061, 12230, -1000, -1000,
	-1000, -1000, -1000, -1000, 1042, 164, 16787, 14918, 486, 2301,
	2277, 2250, 8948, 25060, 24838, -84, 8948, 8948, -1000, -85,
	-1000, 8948, -1000, -1000, 1454, 8948, 71, 70, 67, -1000,
	-1000, 24685, 8948, -1000, -1000, 21593, 8948, 64, -1000, 62,
	58, 24685, 1154, 24685, -1000, -1000, 482, 482, 1418, 1418,
	1418, 1418, 1102, 1102, 1787, 771, 2614, 2614, 2614, 1359,
	762, 762, 2614, 2614, 2614, 1123, 1016, 163, 22188, 8948,
	-86, -1000, -1000, -1000, 24685, 24685, 56, -1000, -1000, -1000,
	-83, 3045, 22912, 22621, -1000, 54, 424, -1000, -1000, -1000,
	16787, -1000, 16787, -1000, 16787, 16787, 1125, 932, -1000, -1000,
	1037, 158, 9508, 16787, -1000, 795, -91, -92, 924, -1000,
	920, 8948, -1000, 25060, 908, 908, -1000, 511, 508, -1000,
	-1000, -1000, -1000, -4, 1224, 16787, 1265, -1000, -1000, 157,
	-1000, -1000, -1000, 818, -93, -1000, 242, 1288, 8948, -1000,
	-1000, 155, 10068, -97, 53, -26, -99, 16787, -1000, 16787,
	24685, -83, 500, -1000, 1955, -1000, 152, 8948, 12230, -1000,
	-154, -1000, 370, -1000, 16787, -106, -1000, 8948, 8948, 24838,
	-108, -1000, 2301, 2301, -1000, 22589, -1000, 23989, -1000, -1000,
	-1000, 24685, 810, -1000, 22563, -1000, -1000, -1000, -1000, 9508,
	1120, 150, 25060, 22272, -1000, -1000, 8948, -1000, -1000, -1000,
	-1000, -1000, 1800, -1000, -1000, 16787, 956, -1000, -1000, 8948,
	22188, 149, 1097, 147, -1000, -1000, -1000, 778, -1000, -1000,
	24685, 1295, -1000, -1000, 16787, 16787, 572, -115, 16787, -1000,
	-1000, 4962, 16787, 795, 10068, 1293, 35, 16787, 1293, 22240,
	4662, -116, -1000, 1097, -1000, 795, 144, -23, -1000, 1335,
	1452, -1000, 16787, 24685, -1000, 1042, -1000, 4384, -117, -1000,
	2301, 2301, -1000, -1000, 45, 836, 1308, -1000, 2836, 9508,
	25060, -121, -1000, 22214, -1000, -1000, 1172, 21923, 958, 16787,
	-1000, 16787, 16787, 464, 16787, -1000, -1000, 664, -1000, 423,
	-1000, 142, 1097, -1000, -1000, -1000, -1000, 1288, -11, 795,
	-1000, 1097, 10068, 16787, 133, -1000, -122, -1000, -1000, -1000,
	-1000, 722, 8948, 2836, -126, -1000, -1000, 1165, -1000, 841,
	800, 42, -127, 124, -1000, 8948, -1000, 12771, -1000, 16787,
	-1000, 1293, 40, 1097, -1000, -128, -1000, -1000, -1000, 39,
	8668, 8668, -83, -1000, 16787, -1000, 846, 844, 654, -1000,
	-1000, -1000, -1000, -1000, 958, 24685, -103, -132, -1000, -1000,
	-1000, 795, -1000, -1000, -1000, 9788, 897, 697, 23611, -1000,
	-1000, -1000, 1233, -1000, 475, 948, 948, 841, -1000, 902,
	1097, 1386, -1000, -1000, -1000, -1000, -1000, -1000, 1394, -1000,
	-1000, 985, -1000, -1000, -1000, -1000, -1000, -1000, 8388, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1720, 1719, 1333, 131, 1717, 128, 1716, 1715, 1714,
	1710, 1709, 100, 127, 122, 129, 1704, 1694, 101, 1692,
	1691, 1690, 87, 1683, 1681, 1678, 42, 1676, 1675, 1674,
	1672, 1669, 1667, 86, 30, 136, 2125, 134, 1666, 1665,
	1663, 16, 98, 57, 1662, 125, 1661, 1660, 52, 96,
	106, 1173, 33, 1657, 1647, 146, 78, 28, 88, 103,
	143, 132, 116, 1644, 1640, 1638, 45, 1636, 4, 1635,
	1631, 10, 35, 15, 1630, 17, 43, 1629, 1628, 126,
	1627, 61, 104, 111, 22, 120, 258, 1626, 54, 12,
	56, 1625, 25, 1623, 37, 65, 148, 1622, 46, 147,
	59, 32, 51, 105, 1621, 1619, 1618, 85, 1612, 89,
	58, 1610, 1608, 60, 1607, 135, 139, 1605, 1604, 118,
	1601, 1599, 1598, 162, 1597, 1596, 150, 1595, 8, 48,
	53, 9, 110, 109, 24, 1593, 19, 1590, 1879, 644,
	80, 1586, 84, 76, 81, 50, 68, 27, 1585, 1584,
	107, 1582, 1581, 1579, 1577, 1576, 77, 1573, 64, 140,
	34, 49, 92, 31, 23, 82, 97, 149, 108, 1572,
	1571, 115, 1569, 338, 1568, 1567, 1107, 113, 1566, 1565,
	1564, 949, 947, 593, 428, 1563, 1560, 567, 439, 1557,
	1552, 112, 1550, 1549, 141, 144, 18, 1547, 114, 1546,
	90, 1544, 0, 83, 36, 1543, 119, 67, 1542, 1540,
	1539, 1535, 20, 2, 6, 3, 13, 5, 75, 21,
	1534, 1533, 133, 93, 1531, 145, 1530, 1524, 1523, 26,
	1520, 14, 1516, 11, 1513, 1512, 7, 1, 138, 1509,
	102, 1508, 1390, 1507, 142, 1505, 1501, 1355, 73,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 172, 172, 171, 17, 148, 148, 18, 18, 18,
	18, 19, 108, 108, 20, 20, 20, 20, 21, 25,
	238, 238, 238, 242, 242, 243, 243, 244, 244, 244,
	244, 244, 244, 244, 240, 240, 28, 28, 28, 28,
	28, 127, 123, 123, 125, 125, 125, 125, 50, 122,
	122, 122, 122, 124, 124, 124, 124, 195, 194, 194,
	200, 200, 200, 63, 63, 63, 63, 63, 64, 64,
	64, 193, 193, 193, 193, 201, 201, 201, 201, 201,
	201, 65, 65, 65, 199, 199, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 16, 239, 239, 241, 241, 30,
	30, 9, 9, 10, 10, 66, 66, 67, 67, 130,
	130, 130, 130, 68, 68, 46, 46, 46, 129, 210,
	210, 211, 211, 211, 211, 211, 211, 212, 212, 212,
	212, 212, 212, 212, 208, 208, 209, 206, 206, 207,
	207, 207, 207, 245, 245, 128, 128, 71, 71, 215,
	215, 215, 215, 213, 213, 213, 213, 213, 216, 214,
	217, 217, 217, 217, 217, 159, 159, 159, 32, 11,
	8, 8, 112, 112, 75, 75, 163, 163, 163, 57,
	57, 41, 41, 41, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 113, 113, 114, 114, 23,
	27, 31, 31, 31, 31, 31, 247, 247, 54, 54,
	54, 54, 55, 55, 126, 126, 126, 126, 126, 49,
	7, 7, 48, 48, 22, 22, 22, 22, 22, 60,
	60, 119, 119, 119, 121, 121, 120, 120, 120, 98,
	98, 33, 80, 80, 89, 89, 90, 90, 169, 91,
	91, 26, 26, 36, 36, 34, 34, 34, 34, 34,
	34, 35, 35, 37, 37, 37, 37, 37, 37, 37,
	223, 223, 223, 225, 225, 222, 224, 224, 246, 246,
	99, 99, 99, 70, 69, 69, 73, 73, 72, 74,
	74, 162, 96, 96, 96, 96, 115, 116, 116, 117,
	117, 118, 118, 95, 95, 145, 145, 38, 38, 79,
	79, 81, 81, 136, 136, 137, 137, 135, 135, 135,
	164, 164, 164, 164, 165, 165, 165, 165, 165, 165,
	160, 160, 160, 160, 161, 161, 170, 170, 102, 102,
	102, 102, 100, 100, 101, 101, 166, 166, 166, 166,
	97, 97, 167, 167, 167, 131, 131, 173, 173, 173,
	78, 78, 78, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 175, 175, 175, 175,
	177, 177, 177, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 178, 178, 185,
	185, 186, 186, 187, 188, 179, 179, 180, 180, 181,
	182, 189, 189, 189, 189, 191, 191, 183, 183, 183,
	183, 183, 184, 109, 109, 109, 109, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 110, 110, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	218, 218, 218, 218, 218, 218, 218, 220, 220, 221,
	221, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 226, 226,
	227, 227, 229, 229, 230, 230, 231, 232, 232, 232,
	233, 234, 234, 228, 228, 235, 235, 235, 236, 236,
	237, 237, 237, 237, 237, 150, 150, 150, 151, 151,
	152, 86, 86, 147, 147, 146, 146, 146, 149, 149,
	103, 103, 190, 190, 190, 190, 190, 190, 190, 104,
	104, 104, 111, 105, 105, 106, 106, 106, 106, 106,
	106, 142, 143, 107, 107, 107, 144, 144, 153, 157,
	157, 156, 155, 155, 154, 154, 134, 134, 134, 134,
	133, 132, 92, 92, 248, 248, 158, 158, 93, 93,
	94, 88, 88, 168, 168, 168, 168, 82, 82, 62,
	62, 83, 83, 58, 58, 61, 59, 59, 59, 59,
	76, 76, 77, 77, 56, 56, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 192, 192, 192,
	51, 51, 51, 52, 52, 53, 53, 197, 197, 197,
	198, 198, 198, 198, 196, 196, 196, 196, 196, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 2, 4, 4, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 122, 195, 99,
	85, 116, 209, 216, -34, -36, 224, -127, 225, 34,
	234, 58, 95, 211, 206, 255, 66, -223, -37, -35,
	302, 277, 283, 219, -38, 242, 269, 305, 242, 130,
	78, 272, -58, -51, 4, -202, -204, 20, 21, 23,
	33, 34, 39, 43, 46, 57, 58, 59, 61, 63,
	64, 65, 68, 69, 76, 77, 78, 79, 81, 85,
	87, 91, 92, 94, 99, 100, 106, 107, 110, 112,
	117, 122, 123, 124, 131, 134, 129, 143, 145, 146,
	151, 154, 157, 159, 160, 161, 162, 163, 165, 166,
	168, 170, 167, 173, 175, 176, 182, 185, 188, 189,
	190, 193, 195, 197, 198, 199, 201, 202, 206, 204,
	205, 207, 209, 211, 212, 214, 216, 217, 218, 221,
	222, 224, 225, 227, 230, 233, 234, 235, 238, 236,
	232, 241, 243, 244, 251, 255, 256, 257, 258, 261,
	262, 263, 266, 267, 268, 273, 278, 279, 280, 281,
	28, 35, 36, 37, 38, 40, 41, 44, 45, 49,
	50, 51, 53, 80, 82, 83, 98, 101, 102, 108,
	118, 120, 125, 126, 135, 136, 137, 138, 140, 149,
	172, 174, 183, 187, 192, 194, 200, 213, 220, 228,
	229, 237, 239, 246, 247, 248, 252, 253, 269, 270,
	87, 134, 263, 262, 78, 130, 242, 272, -15, 302,
	-26, -6, -13, -4, -22, -33, -12, -14, 23, -196,
	4, -202, -204, -203, -205, 55, 67, 115, 133, 127,
	142, 144, 150, 152, 164, 184, 186, 210, 226, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	103, 104, 105, 111, 113, 114, 116, 119, 121, 128,
	130, 132, 139, 141, 147, 148, 153, 155, 156, 169,
	171, 177, 178, 179, 180, 181, 191, 196, 203, 208,
	219, 223, 231, 240, 242, 245, 249, 250, 254, 259,
	260, 264, 265, 271, 272, 274, 275, 276, 277, -51,
	-51, -51, 195, 22, -242, 22, -243, -244, 66, 92,
	116, 219, 134, 87, 262, -242, -55, 216, -51, -123,
	154, 222, 213, 251, -124, -122, -195, 246, 163, -84,
	-51, 4, 78, 57, 79, 117, 130, 131, 62, 63,
	146, 243, 246, 251, 22, 66, -247, 251, 251, -247,
	-247, -54, 251, 249, -55, -246, 242, 242, 272, -112,
	78, 260, -35, -37, -36, -72, -73, 259, 139, 97,
	181, -34, -36, -223, -225, 201, -222, -51, -225, -69,
	-70, 22, 89, 306, -166, -58, 179, -94, 302, -3,
	-166, 125, -58, -61, 125, -58, -51, -166, 125, 114,
	302, -92, -134, -133, -132, 300, 304, 114, 141, 141,
	-167, -166, -51, 125, -62, 125, -61, -85, 125, -84,
	-85, 125, -172, -171, -198, 4, -202, -204, -203, 269,
	242, -148, 302, -108, 302, -51, 22, 178, 306, 178,
	-51, -123, 51, -123, 302, -125, -49, -50, 143, 197,
	249, 287, 114, 281, -65, 5, 84, -87, 304, 114,
	-239, 178, 114, 114, 114, 114, 114, 114, 281, 143,
	197, 242, 272, -126, -49, -50, -126, 249, -55, -97,
	-166, -84, 125, -84, 130, -51, 125, -72, -73, -96,
	-115, -116, 153, 177, -99, 22, 89, -99, -99, 43,
	303, 303, 306, -225, -77, 302, -88, -168, -138, 295,
	-140, 293, 294, 299, 169, 282, -150, -58, -141, 9,
	302, -153, -220, -36, 98, 29, -151, -152, 213, -51,
	7, 8, 5, 6, -56, -175, -184, 254, 103, 171,
	47, -218, -219, 4, -202, -197, -176, -186, -180, -183,
	140, 55, 71, 74, 72, 75, 223, 264, 48, 28,
	101, 102, 187, 192, 239, 252, 253, 125, 172, 126,
	53, 118, 149, 91, 36, 38, 40, 41, 49, 50,
	80, 82, 83, 108, 135, 136, 137, 138, 174, 200,
	228, 237, 247, 248, 270, -203, -187, -188, -181, -182,
	-189, -88, -94, 295, -58, 302, -93, -158, -138, 84,
	-43, 204, -42, 21, 23, 92, 267, 98, 232, 232,
	204, 98, 307, 204, 204, 98, 235, 303, -82, -58,
	-134, -138, -196, 295, -167, -60, -58, -60, 224, -51,
	30, 98, -45, 306, 46, 207, 98, -45, 306, 98,
	-45, 98, 303, 306, -166, 125, 30, -147, -173, -174,
	-176, -185, -179, -183, -184, 39, 45, 44, 244, 220,
	229, 37, 135, 136, 137, 138, 228, 36, 200, 108,
	91, 83, 82, 174, 41, 40, -187, -188, -181, -182,
	80, 247, 248, 140, 38, 50, 49, 270, 237, -86,
	-138, -238, -83, 242, 78, -59, -51, 295, -244, -238,
	30, -86, 306, 306, 151, -64, 157, 168, 123, -194,
	84, -200, -193, -159, 9, 254, 103, 178, -199, 8,
	294, -192, -198, 5, 7, 293, -194, 84, 69, -201,
	5, 4, -184, -159, 84, 154, 304, -196, -195, -241,
	111, -238, -195, -195, -195, -195, -195, -51, 151, -195,
	-195, 306, 306, -55, -45, 306, 302, -71, 169, -71,
	302, -52, 125, -51, -48, 94, 169, -96, -116, -115,
	-117, -138, 22, -138, -140, -35, -35, -35, -74, -162,
	-138, -222, 30, -76, -51, -79, 306, 114, 10, 11,
	54, 33, 293, 294, 295, 296, 109, 297, 290, 291,
	292, 289, 285, 286, 287, 60, 158, 215, 13, 14,
	15, 26, 180, 152, 282, 127, 226, 299, 16, 17,
	18, 142, 35, 128, 30, 4, -138, -138, -138, -138,
	-138, 186, -36, -138, -86, -92, -36, -146, 300, 302,
	-92, 302, 5, 5, 302, -154, -138, -226, 278, 111,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 194, -191, 273,
	-191, -191, -177, 302, -177, -178, 302, -177, 279, 283,
	302, -79, -58, 306, 303, 306, 249, -113, 62, 56,
	-129, 125, 56, -206, -51, 62, -207, 52, 260, 196,
	113, -113, 62, -113, 62, 62, -166, 33, 33, 249,
	-61, -51, 249, 249, -166, 114, 303, 306, 301, 310,
	-131, 275, -119, -26, 302, 84, 30, -119, -89, -90,
	-169, -91, -58, 302, -51, -51, -61, -62, -84, -85,
	-85, -15, -171, 98, -18, -26, -22, -33, -12, 303,
	306, -78, 29, -109, 302, 280, 161, 81, 124, 160,
	-110, 218, 303, 306, 249, 306, -83, -76, -133, -132,
	114, 251, 303, -50, -49, -63, 199, 230, 205, 221,
	306, 8, 7, 7, 5, -196, -240, -51, -50, -49,
	-166, -66, -76, -67, -51, -130, -129, -208, -209, -206,
	130, 260, 104, 30, 98, 30, 178, 169, 287, 98,
	-118, 213, 214, 306, -41, 31, 88, 302, 306, 303,
	-131, -168, -81, -164, -166, -36, -165, 302, -173, -173,
	-84, 246, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, 152, 127, 226, 35, 128, -138,
	249, -138, -138, -138, -138, 171, 169, 254, 103, 261,
	89, 175, -248, 240, 32, -144, -36, 302, -196, -150,
	213, 302, 303, 306, -86, -149, 301, -146, -86, 303,
	303, -86, 271, 22, 89, 295, -109, 7, -157, -156,
	274, -227, 106, 119, 302, 303, 303, -138, -138, -103,
	-190, -86, 4, 280, 161, 81, 124, 160, 218, -103,
	-104, -138, -86, -105, -139, -140, 293, 294, 299, 302,
	213, -106, -138, -86, -138, 42, 148, 250, -107, -138,
	114, -86, -138, -138, -138, -86, -86, -86, 302, 7,
	7, 246, 246, 7, -131, 303, -158, -42, -58, -51,
	-51, 169, -129, 125, -47, 169, -173, -51, 302, 302,
	145, 145, -51, -51, 125, -51, 125, -51, -51, -43,
	204, 302, 302, -51, 204, -51, -58, 204, 235, 114,
	-58, -138, -98, 208, -138, -98, -121, 178, -82, 269,
	-51, 208, -80, 306, 114, 287, -82, -45, -45, -45,
	-166, -173, 300, 300, 7, 249, 249, 249, 249, 302,
	-138, -240, -59, -240, -49, 258, 59, 199, -200, -109,
	306, 303, 303, 306, -52, 130, -52, -26, -84, -26,
	-58, 98, 5, -51, -162, -18, -51, -95, 119, -170,
	306, 284, 67, -102, 144, 164, 115, 150, 210, 133,
	-135, 307, -161, -160, 30, -51, -36, -165, -164, 281,
	-138, -138, 249, -248, 240, -144, -138, 171, 254, 103,
	261, 89, 175, 114, 302, -139, -139, -86, 302, -86,
	-138, 301, 301, 306, 303, -73, 306, -72, -138, -86,
	-86, 303, 303, -155, -156, 93, -138, -232, 185, 302,
	302, -138, 30, 306, 303, 114, 303, 303, -111, 191,
	303, 10, 11, 293, 294, 295, 296, 109, 297, 290,
	291, 292, 289, 285, 286, 287, 60, 158, 215, 13,
	14, 15, 142, 128, -139, -139, -139, -86, 302, 303,
	-142, -143, 114, 111, 30, -107, -107, -107, 303, 114,
	-86, 306, 306, 306, 303, 303, 303, 7, 303, 306,
	303, 281, 281, 303, -95, 249, 249, 98, 169, 266,
	-210, -207, -138, -76, 302, 302, -40, 92, 224, -114,
	98, -45, 98, -45, 249, -113, 62, -86, -86, 249,
	249, 235, 301, -88, 208, 61, 303, -88, -131, -90,
	-81, -158, 303, 301, 7, 7, 303, 161, 124, 160,
	-110, 160, -110, -110, 7, -51, -68, 129, -130, 302,
	-52, 302, 302, -71, 302, -51, -48, 303, -145, 121,
	43, -164, 175, 144, 144, -164, -102, 144, -100, 184,
	-100, -100, -161, -196, 308, -51, 302, 303, -138, -138,
	-139, -139, 114, 302, -138, -147, 26, 26, 303, -86,
	303, 306, 303, -146, 303, 271, -73, -73, -73, 5,
	95, -138, 245, -233, -51, 302, 275, -72, 303, -173,
	-173, -138, -142, -138, -173, -173, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, 89, 169, 175, -139, 306,
	-86, 303, -143, -142, -138, -138, -173, 303, 303, 303,
	-86, -138, -138, -138, 303, 7, -145, -51, -51, -129,
	98, -211, 62, -212, 54, 104, 66, 169, 171, 260,
	196, 52, 84, 203, 303, 303, -76, -76, 169, 84,
	169, 84, 77, 256, -51, -51, -58, -51, -51, 303,
	303, -51, -58, -88, -120, 302, 178, -26, -98, 287,
	301, 301, 303, 128, -75, -163, -51, -221, 302, -218,
	-219, -56, 302, -76, -66, 30, -75, 178, -229, 276,
	-138, -86, 241, -164, -164, -101, 265, 178, 144, -164,
	-137, -136, 112, 167, 302, -76, -160, 26, 26, -138,
	-147, 303, -138, -138, 303, -138, 5, -138, 303, 303,
	303, -138, -234, -51, -138, 303, 303, 303, -143, 114,
	89, 175, 302, -138, 303, 303, 306, 303, 303, 303,
	-229, -129, -51, -84, -51, 104, 125, 171, 145, 302,
	-139, -58, -128, -245, 65, 238, 303, 303, 171, 171,
	-138, -173, -45, -45, 249, 249, 90, -76, 62, -94,
	-36, 302, 188, 303, 306, -57, -92, 54, -57, -138,
	302, -75, 303, 303, -26, 303, -58, -230, -231, -51,
	246, -101, 302, -138, -164, 306, 309, 287, -76, 303,
	-138, -138, 303, 303, -73, -228, 190, 303, -139, 114,
	302, -147, 303, -138, -212, -52, 169, -138, -53, 302,
	-68, 302, 203, -44, 54, -51, -51, 262, 170, 303,
	-51, -51, -128, -163, -41, -84, -41, 303, -86, 303,
	-68, -128, 302, 306, 30, 5, -76, -136, -196, 303,
	303, -73, 43, -139, -147, 303, 303, 98, 303, -215,
	159, -51, -76, -58, -39, 265, -84, 224, -131, 302,
	-68, -57, -73, -128, -68, -75, -231, -233, 303, -235,
	198, 214, -86, 303, 104, -213, -216, -214, 178, 115,
	189, 227, 303, 303, -71, -138, -89, -76, -41, 303,
	-68, 303, 303, -236, -237, 35, 257, 69, -138, -236,
	-51, -214, 178, -216, 178, 262, 87, -215, -131, 303,
	-128, -237, 193, 110, 213, 193, 110, -217, 166, 207,
	46, 224, -217, -213, -46, 46, 207, -68, 26, 20,
	171, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 377, 0, 0, 0,
	0, 0, 0, 0, 351, -2, 0, 130, 0, 307,
	0, 307, 307, 311, 0, 379, 273, 376, -2, 387,
	0, 0, 0, 385, 365, 0, 0, -2, 0, 0,
	0, 0, 0, 783, 810, 811, 812, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	83, 84, 85, 86, 87, 88, 89, 90, 0, 194,
	824, 825, 826, 827, 828, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 96,
	103, 104, 894, 106, 0, 113, 114, 115, 117, 118,
	119, 120, 121, 122, 123, 0, 300, 908, 313, 126,
	873, 912, 979, 926, 133, 143, 0, 985, -2, 147,
	77, 176, 177, 0, 179, 196, 0, 0, 0, 0,
	0, 187, 0, 0, 191, 0, 318, 306, 318, 303,
	304, 305, 308, 0, 299, 0, 378, 0, 0, 0,
	0, 272, -2, 361, 362, -2, 0, 382, 382, 382,
	0, 0, 362, 0, 370, 898, 373, 793, 371, 0,
	0, 384, 383, 0, 366, 446, 0, 407, 0, 2,
	0, 964, 446, 0, 964, 0, 0, 0, 964, 0,
	0, 784, 762, 756, 757, 0, 0, 0, 0, 0,
	0, 452, 67, 964, 51, 964, 779, 51, 964, 75,
	51, 964, 0, 91, 93, 820, 821, 822, 823, 990,
	0, 0, 0, 101, 0, 105, 107, 0, 0, 0,
	312, 127, 953, 129, 0, 132, 134, 135, 0, 0,
	0, 0, 0, 0, 146, 171, 172, 78, 0, 0,
	198, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	190, 0, 0, 301, 314, 315, 302, 0, 310, 51,
	450, 248, 964, 248, 814, 323, 964, -2, 0, 357,
	394, 395, 0, 0, 0, 380, 381, 0, 0, 0,
	353, 354, 0, 372, 0, 0, 410, 771, 775, 776,
	539, 0, 0, 0, 0, 0, 0, 628, 629, 630,
	0, 632, 633, 634, 958, 0, 638, 639, 979, 783,
	796, 797, 798, 799, 0, 0, 0, 804, 805, 806,
	755, 679, 648, -2, -2, 794, 476, 477, 478, 479,
	-2, 992, 652, 654, 656, 657, 658, 659, 0, 942,
	959, 960, 975, 976, 984, 988, 989, 964, 972, 965,
	954, 962, 971, 853, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 819, 501, 502, 507, 508,
	510, 410, 408, 447, 448, 0, 0, 768, 766, 767,
	28, 296, 30, 0, 296, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 777,
	763, 0, 760, 761, 456, 0, 329, 0, 0, 453,
	0, 0, 69, 0, 49, 50, 0, 71, 0, 0,
	73, 0, 377, 0, 0, 964, 377, 0, 713, 462,
	463, 464, 465, 466, 536, 469, 470, 471, 472, 473,
	474, 475, 483, 484, 485, 486, 487, 488, 489, 498,
	0, 482, 482, 482, 495, 496, 499, 500, 505, 506,
	517, 518, 520, 522, 516, 516, 516, 513, 514, 0,
	711, 0, 110, 0, 848, 781, 786, 787, 116, 0,
	0, 0, 0, 0, 0, 138, 158, 159, 160, 139,
	141, 148, 150, 151, 152, 161, 162, 163, 164, 265,
	0, 267, 174, 175, 807, 0, 140, 142, 144, 145,
	165, 166, 0, 168, 169, 170, 0, 79, 178, 180,
	0, 195, 181, 182, 183, 184, 185, 186, 189, 192,
	193, 0, 0, 309, 268, 0, 206, 0, 0, 0,
	0, 0, 964, 813, 320, 0, 0, 360, 392, 393,
	396, 399, 400, 397, 539, 367, 368, 369, 388, 389,
	283, 374, 0, 0, 790, 456, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 765, 0, 0, 774, 544, 545, 546, 568,
	569, 0, -2, 711, 0, 635, 636, 637, 0, 0,
	-2, 0, 801, 536, 0, 0, 754, 681, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 734, 740, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 504, 515,
	512, 511, 493, 0, 492, 490, 0, 494, 0, 0,
	0, 456, 0, 0, 770, 0, 0, 0, 0, 295,
	32, 964, 0, 53, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 785, 0, 0, 0, 0, 0, 0, 758, 0,
	340, 0, 340, 331, 0, 0, 0, 327, 343, 344,
	346, 347, 0, 0, 454, 68, 780, 51, 76, 51,
	51, 82, 92, 0, 94, 97, 98, 99, 100, 95,
	0, 457, 459, 467, 0, 523, 524, 525, 526, 527,
	528, 537, 102, 0, 0, 0, 111, 112, 788, 789,
	0, 0, 131, 136, 137, 319, 0, 155, 0, 157,
	0, 266, 809, 808, 536, 80, 197, 124, 316, 317,
	451, 0, 0, 205, 790, 207, 209, 210, 211, 212,
	814, 0, 814, 0, 0, 0, 0, 0, 0, 0,
	398, 401, 402, 0, 391, 281, 282, 377, 0, 792,
	404, 772, 437, 411, 419, 435, 422, 0, 540, 541,
	542, 0, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, -2, -2, -2, 560, 561, 562, -2, -2,
	-2, 566, 567, -2, 0, 0, 0, 765, 0, -2,
	0, 576, -2, -2, -2, 580, 0, 583, 585, 587,
	0, 0, 0, 0, 764, 597, 746, 0, 773, 582,
	0, 0, 631, 0, 0, 0, 717, 718, 0, -2,
	640, 387, 0, 0, 0, 0, 802, 0, 753, 749,
	0, 689, 0, 0, 0, 653, 655, 0, 0, 0,
	0, 721, -2, -2, -2, -2, -2, -2, -2, 0,
	0, 711, 731, 0, 0, 599, 0, 0, 0, 0,
	979, 0, 711, 739, 0, 0, 0, 0, 0, 711,
	0, 745, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 449, 769, 31, 285, 0,
	0, 0, 34, 964, 42, 0, 220, 0, 0, 0,
	0, 0, 298, 43, 964, 51, 964, 51, 44, 29,
	296, 0, 0, 289, 0, 284, 287, 0, 59, 0,
	778, 0, 66, 0, 455, 324, 325, 0, 0, 333,
	330, 0, 456, 0, 0, 0, 0, 70, 72, 74,
	0, 714, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 108, 782, 109, 128, 153, 154, 156, 149, 167,
	0, 214, 247, 0, 0, 814, 0, 203, 248, 269,
	0, 0, 322, 323, 390, 0, 791, 406, 0, 409,
	0, 0, 0, 0, 0, 0, 443, 443, 443, 441,
	435, 0, 421, 434, 0, 433, -2, 422, 0, 0,
	-2, -2, 0, 0, 0, 598, -2, 581, 584, 586,
	588, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	712, 715, 716, 0, -2, 0, 0, 386, 387, 387,
	387, 646, 0, 0, 750, 0, 0, 647, 0, 0,
	0, 0, 0, 0, 662, 0, 663, 664, 0, 0,
	665, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 602, 603, 604, 0, 0, 666,
	737, 738, 0, 0, 0, 0, 0, 0, 671, 0,
	744, 0, 0, 0, 675, 676, 677, 0, 480, 0,
	497, 519, 521, 509, 406, 0, 0, 0, 0, 52,
	218, 237, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 40, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 60, 759, 339, 0, 338, 0, 328, 340, 345,
	342, 348, 0, 460, 0, 0, 468, 529, 530, 531,
	532, 533, 534, 535, 0, 125, 201, 0, 208, 0,
	0, 0, 206, 0, 0, 0, 321, 375, 683, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 438, 442,
	439, 440, 420, 417, 0, 431, 0, 424, 543, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 747, 0,
	706, 0, -2, 719, 641, 0, 0, 0, 0, 803,
	748, 752, 0, 687, 688, 692, 0, 0, 651, 0,
	0, 720, 730, 732, 600, 601, 605, 606, 607, 608,
	609, 610, 611, 612, 613, 614, -2, -2, -2, 618,
	619, 620, -2, -2, -2, 0, 0, 0, 733, 0,
	0, 709, 735, 736, 741, 742, 0, 668, 669, 670,
	743, 0, 0, 0, 503, 0, 683, 291, 293, 33,
	0, 219, 0, 222, 0, 0, 0, 0, 228, 229,
	0, 0, 0, 0, 239, 246, 0, 0, 0, 48,
	0, 0, 297, 0, 51, 51, 286, 0, 0, 199,
	200, 290, 288, 326, 0, 0, 0, 332, 341, 0,
	461, 458, 538, 0, 0, 274, 280, 280, 0, 649,
	650, 0, 0, 0, 0, 0, 0, 0, 363, 0,
	405, 403, 0, 425, 0, 427, 0, 0, 0, 429,
	0, 415, 0, 414, 0, 0, 423, 0, 0, -2,
	0, 591, -2, -2, 705, 712, 800, 387, 642, 644,
	645, 751, 694, 691, 0, 678, 660, 661, 729, 0,
	0, 0, 0, 712, 708, 667, 0, 673, 674, 481,
	364, 35, 0, 223, 224, 814, 0, 227, 230, 0,
	232, 816, 214, 0, 243, 244, 241, 0, 37, 38,
	47, 55, 39, 45, 0, 0, 0, 0, 0, 349,
	350, 0, 0, 246, 0, 283, 795, 0, 283, 0,
	0, 0, 236, 214, 204, 246, 0, 682, 684, 0,
	0, 426, 0, 445, 428, 0, 418, 0, 0, 432,
	-2, -2, 592, 707, 0, 387, 0, 680, -2, 0,
	0, 0, 710, 0, 221, 225, 0, 0, 252, 0,
	240, 0, 0, 57, 0, 292, 294, 0, 335, 456,
	337, 0, 214, 275, 276, 279, 277, 280, 387, 246,
	202, 214, 0, 0, 0, 436, 0, 416, 413, 430,
	643, 697, 0, -2, 0, 626, 672, 0, 231, 257,
	0, 0, 0, 248, 41, 0, 54, 0, 336, 0,
	234, 283, 0, 214, 270, 0, 685, 686, 444, 0,
	0, 0, 693, 627, 0, 233, 253, 254, 0, 249,
	250, 251, 815, 245, 252, 56, 456, 0, 278, 641,
	235, 246, 690, 695, 698, -2, 929, 845, 0, 696,
	226, 255, 0, 256, 0, 0, 0, 257, 334, 217,
	214, 0, 700, 701, 702, 703, 704, 258, 0, 261,
	262, 0, 259, 242, 213, 215, 216, 271, 0, 260,
	263, 264, 699,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 291, 3, 297, 292, 3,
	302, 303, 295, 293, 306, 294, 304, 296, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 310, 305,
	285, 287, 286, 3, 307, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 300, 3, 301, 290, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 308, 289, 309, 299,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 288, 57628, 298, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:836
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:846
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:913
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1039
		{ /* SKIP DOC */
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{ /* SKIP DOC */
		}
	case 131:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1301
		{
			return unimplemented(sqllex)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = Low
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = Normal
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = High
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1419
		{
			return unimplemented(sqllex)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1420
		{
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1514
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 198:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = DropDefault
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			return unimplemented(sqllex)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1826
		{
			return unimplemented(sqllex)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			return unimplemented(sqllex)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return unimplemented(sqllex)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			return unimplemented(sqllex)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1838
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1846
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = true
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = false
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1943
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1944
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1948
		{
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.union.val = Ascending
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = Descending
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 284:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2023
		{
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.str = ""
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.str = ""
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2160
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2167
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2209
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2213
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			return unimplemented(sqllex)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			return unimplemented(sqllex)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			return unimplemented(sqllex)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2471
		{
			return unimplemented(sqllex)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			return unimplemented(sqllex)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2475
		{
			return unimplemented(sqllex)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2478
		{
			return unimplemented(sqllex)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2479
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2482
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2483
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = true
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = false
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = false
		}
	case 383:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = true
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2606
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 404:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2657
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &From{}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2705
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.str = astFullJoin
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.str = astLeftJoin
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.str = astRightJoin
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.str = astInnerJoin
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2851
		{
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2852
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2942
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2943
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2946
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2947
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2956
		{
			return unimplemented(sqllex)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3003
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3012
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = nil
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3061
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3133
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3165
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3204
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3205
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			return unimplemented(sqllex)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			return unimplemented(sqllex)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			return unimplemented(sqllex)
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			return unimplemented(sqllex)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3240
		{
			return unimplemented(sqllex)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			return unimplemented(sqllex)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplemented(sqllex)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			return unimplemented(sqllex)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			return unimplemented(sqllex)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3247
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3253
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3394
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			return unimplemented(sqllex)
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3560
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3696
		{
			return unimplemented(sqllex)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3697
		{
			return unimplemented(sqllex)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3720
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3735
		{
			return unimplemented(sqllex)
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			return unimplemented(sqllex)
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3740
		{
			return unimplemented(sqllex)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			return unimplemented(sqllex)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			return unimplemented(sqllex)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3759
		{
			return unimplemented(sqllex)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3789
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3833
		{
			return unimplemented(sqllex)
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3834
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3837
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3838
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = Window(nil)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.str = ""
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3925
		{
			return unimplemented(sqllex)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3926
		{
			return unimplemented(sqllex)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3927
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3930
		{
			return unimplemented(sqllex)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3940
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3941
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4278
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4434
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4470
		{
			return unimplemented(sqllex)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = DNull
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.str = ""
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
