// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:294
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ANNOTATE_TYPE = 57366
const ARRAY = 57367
const AS = 57368
const ASC = 57369
const ASYMMETRIC = 57370
const AT = 57371
const BEGIN = 57372
const BETWEEN = 57373
const BIGINT = 57374
const BIGSERIAL = 57375
const BIT = 57376
const BLOB = 57377
const BOOL = 57378
const BOOLEAN = 57379
const BOTH = 57380
const BY = 57381
const BYTEA = 57382
const BYTES = 57383
const CASCADE = 57384
const CASE = 57385
const CAST = 57386
const CHAR = 57387
const CHARACTER = 57388
const CHARACTERISTICS = 57389
const CHECK = 57390
const COALESCE = 57391
const COLLATE = 57392
const COLLATION = 57393
const COLUMN = 57394
const COLUMNS = 57395
const COMMIT = 57396
const COMMITTED = 57397
const CONCAT = 57398
const CONFLICT = 57399
const CONSTRAINT = 57400
const CONSTRAINTS = 57401
const COVERING = 57402
const CREATE = 57403
const CROSS = 57404
const CUBE = 57405
const CURRENT = 57406
const CURRENT_CATALOG = 57407
const CURRENT_DATE = 57408
const CURRENT_ROLE = 57409
const CURRENT_TIME = 57410
const CURRENT_TIMESTAMP = 57411
const CURRENT_USER = 57412
const CYCLE = 57413
const DATA = 57414
const DATABASE = 57415
const DATABASES = 57416
const DATE = 57417
const DAY = 57418
const DEC = 57419
const DECIMAL = 57420
const DEFAULT = 57421
const DEALLOCATE = 57422
const DEFERRABLE = 57423
const DELETE = 57424
const DESC = 57425
const DISTINCT = 57426
const DO = 57427
const DOUBLE = 57428
const DROP = 57429
const ELSE = 57430
const ENCODING = 57431
const END = 57432
const ESCAPE = 57433
const EXCEPT = 57434
const EXISTS = 57435
const EXECUTE = 57436
const EXPLAIN = 57437
const EXTRACT = 57438
const FALSE = 57439
const FAMILY = 57440
const FETCH = 57441
const FILTER = 57442
const FIRST = 57443
const FLOAT = 57444
const FLOORDIV = 57445
const FOLLOWING = 57446
const FOR = 57447
const FORCE_INDEX = 57448
const FOREIGN = 57449
const FROM = 57450
const FULL = 57451
const GRANT = 57452
const GRANTS = 57453
const GREATEST = 57454
const GROUP = 57455
const GROUPING = 57456
const HAVING = 57457
const HIGH = 57458
const HOUR = 57459
const IF = 57460
const IFNULL = 57461
const ILIKE = 57462
const IN = 57463
const INTERLEAVE = 57464
const INDEX = 57465
const INDEXES = 57466
const INITIALLY = 57467
const INNER = 57468
const INSERT = 57469
const INT = 57470
const INT64 = 57471
const INTEGER = 57472
const INTERSECT = 57473
const INTERVAL = 57474
const INTO = 57475
const IS = 57476
const ISOLATION = 57477
const JOIN = 57478
const KEY = 57479
const KEYS = 57480
const LATERAL = 57481
const LEADING = 57482
const LEAST = 57483
const LEFT = 57484
const LEVEL = 57485
const LIKE = 57486
const LIMIT = 57487
const LOCAL = 57488
const LOCALTIME = 57489
const LOCALTIMESTAMP = 57490
const LOW = 57491
const LSHIFT = 57492
const MATCH = 57493
const MINUTE = 57494
const MONTH = 57495
const NAME = 57496
const NAMES = 57497
const NATURAL = 57498
const NEXT = 57499
const NO = 57500
const NO_INDEX_JOIN = 57501
const NORMAL = 57502
const NOT = 57503
const NOTHING = 57504
const NULL = 57505
const NULLIF = 57506
const NULLS = 57507
const NUMERIC = 57508
const OF = 57509
const OFF = 57510
const OFFSET = 57511
const ON = 57512
const ONLY = 57513
const OR = 57514
const ORDER = 57515
const ORDINALITY = 57516
const OUT = 57517
const OUTER = 57518
const OVER = 57519
const OVERLAPS = 57520
const OVERLAY = 57521
const PARENT = 57522
const PARTIAL = 57523
const PARTITION = 57524
const PLACING = 57525
const POSITION = 57526
const PRECEDING = 57527
const PRECISION = 57528
const PREPARE = 57529
const PRIMARY = 57530
const PRIORITY = 57531
const RANGE = 57532
const READ = 57533
const REAL = 57534
const RECURSIVE = 57535
const REF = 57536
const REFERENCES = 57537
const RENAME = 57538
const REPEATABLE = 57539
const RELEASE = 57540
const RESTRICT = 57541
const RETURNING = 57542
const REVOKE = 57543
const RIGHT = 57544
const ROLLBACK = 57545
const ROLLUP = 57546
const ROW = 57547
const ROWS = 57548
const RSHIFT = 57549
const SAVEPOINT = 57550
const SEARCH = 57551
const SECOND = 57552
const SELECT = 57553
const SERIAL = 57554
const SERIALIZABLE = 57555
const SESSION = 57556
const SESSION_USER = 57557
const SET = 57558
const SHOW = 57559
const SIMILAR = 57560
const SIMPLE = 57561
const SMALLINT = 57562
const SMALLSERIAL = 57563
const SNAPSHOT = 57564
const SOME = 57565
const SQL = 57566
const START = 57567
const STRICT = 57568
const STRING = 57569
const STORING = 57570
const SUBSTRING = 57571
const SYMMETRIC = 57572
const SYSTEM = 57573
const TABLE = 57574
const TABLES = 57575
const TEXT = 57576
const THEN = 57577
const TIME = 57578
const TIMESTAMP = 57579
const TIMESTAMPTZ = 57580
const TO = 57581
const TRAILING = 57582
const TRANSACTION = 57583
const TREAT = 57584
const TRIM = 57585
const TRUE = 57586
const TRUNCATE = 57587
const TYPE = 57588
const UNBOUNDED = 57589
const UNCOMMITTED = 57590
const UNION = 57591
const UNIQUE = 57592
const UNKNOWN = 57593
const UPDATE = 57594
const UPSERT = 57595
const USER = 57596
const USING = 57597
const VALID = 57598
const VALIDATE = 57599
const VALUE = 57600
const VALUES = 57601
const VARCHAR = 57602
const VARIADIC = 57603
const VARYING = 57604
const WHEN = 57605
const WHERE = 57606
const WINDOW = 57607
const WITH = 57608
const WITHIN = 57609
const WITHOUT = 57610
const YEAR = 57611
const ZONE = 57612
const NOT_LA = 57613
const WITH_LA = 57614
const AS_LA = 57615
const POSTFIXOP = 57616
const UMINUS = 57617

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4641

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	294, 24,
	-2, 353,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 328,
	170, 328,
	200, 328,
	292, 328,
	294, 328,
	-2, 338,
	-1, 51,
	1, 331,
	170, 331,
	200, 331,
	292, 331,
	294, 331,
	-2, 337,
	-1, 60,
	1, 24,
	294, 24,
	-2, 353,
	-1, 271,
	1, 161,
	294, 161,
	-2, 843,
	-1, 304,
	145, 363,
	169, 363,
	-2, 334,
	-1, 307,
	145, 362,
	169, 362,
	-2, 332,
	-1, 430,
	145, 362,
	169, 362,
	-2, 335,
	-1, 486,
	291, 783,
	-2, 776,
	-1, 487,
	291, 784,
	-2, 777,
	-1, 493,
	5, 497,
	291, 497,
	-2, 930,
	-1, 516,
	5, 463,
	-2, 906,
	-1, 517,
	5, 491,
	291, 491,
	-2, 908,
	-1, 518,
	5, 471,
	-2, 909,
	-1, 519,
	5, 470,
	-2, 910,
	-1, 520,
	5, 491,
	291, 491,
	-2, 913,
	-1, 521,
	5, 491,
	291, 491,
	-2, 914,
	-1, 522,
	5, 492,
	-2, 917,
	-1, 523,
	5, 458,
	-2, 918,
	-1, 524,
	5, 458,
	-2, 919,
	-1, 525,
	5, 473,
	-2, 922,
	-1, 526,
	5, 459,
	-2, 927,
	-1, 527,
	5, 460,
	-2, 928,
	-1, 528,
	5, 461,
	-2, 929,
	-1, 529,
	5, 458,
	-2, 933,
	-1, 530,
	5, 464,
	-2, 938,
	-1, 531,
	5, 462,
	-2, 941,
	-1, 532,
	5, 489,
	291, 489,
	-2, 943,
	-1, 533,
	5, 493,
	-2, 946,
	-1, 534,
	5, 495,
	-2, 947,
	-1, 535,
	5, 488,
	291, 488,
	-2, 951,
	-1, 849,
	92, 338,
	131, 338,
	145, 338,
	169, 338,
	173, 338,
	249, 338,
	-2, 603,
	-1, 857,
	291, 761,
	-2, 750,
	-1, 1047,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 531,
	-1, 1048,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 532,
	-1, 1049,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 533,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 537,
	-1, 1054,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 538,
	-1, 1055,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 539,
	-1, 1058,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 544,
	-1, 1064,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 546,
	-1, 1090,
	178, 674,
	-2, 677,
	-1, 1250,
	92, 338,
	131, 338,
	145, 338,
	169, 338,
	173, 338,
	249, 338,
	-2, 411,
	-1, 1254,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 545,
	-1, 1255,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 547,
	-1, 1260,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 548,
	-1, 1278,
	178, 673,
	-2, 676,
	-1, 1434,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 549,
	-1, 1439,
	134, 0,
	-2, 559,
	-1, 1447,
	178, 675,
	-2, 678,
	-1, 1480,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 584,
	-1, 1481,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 585,
	-1, 1482,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 586,
	-1, 1486,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 590,
	-1, 1487,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 591,
	-1, 1488,
	12, 0,
	13, 0,
	14, 0,
	274, 0,
	275, 0,
	276, 0,
	-2, 592,
	-1, 1593,
	134, 0,
	-2, 560,
	-1, 1596,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 563,
	-1, 1597,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 565,
	-1, 1682,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 564,
	-1, 1683,
	31, 0,
	120, 0,
	121, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 566,
	-1, 1690,
	134, 0,
	-2, 593,
	-1, 1734,
	134, 0,
	-2, 594,
	-1, 1787,
	31, 0,
	120, 0,
	144, 0,
	218, 0,
	271, 0,
	-2, 905,
}

const sqlNprod = 1045
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 22882

var sqlAct = [...]int{

	487, 577, 1809, 931, 1403, 1786, 1765, 1739, 1767, 1634,
	1766, 1785, 939, 1458, 1020, 1670, 308, 1556, 1657, 590,
	1585, 1557, 805, 460, 1566, 479, 272, 485, 484, 37,
	1518, 1577, 84, 84, 84, 548, 852, 84, 477, 679,
	84, 1571, 1001, 1333, 330, 1004, 854, 1247, 84, 449,
	1414, 1246, 1281, 1182, 786, 84, 84, 17, 1237, 84,
	1423, 1332, 84, 84, 84, 783, 970, 557, 84, 84,
	84, 84, 916, 356, 554, 1003, 940, 1233, 1136, 85,
	1100, 1076, 327, 313, 653, 327, 907, 338, 73, 536,
	1032, 327, 23, 338, 801, 1073, 954, 351, 996, 591,
	963, 637, 313, 315, 50, 307, 13, 418, 6, 1188,
	807, 459, 559, 549, 419, 1030, 550, 884, 450, 664,
	634, 888, 353, 78, 8, 7, 5, 4, 71, 348,
	1029, 349, 933, 346, 50, 318, 433, 77, 1007, 79,
	432, 434, 259, 655, 633, 570, 651, 250, 1139, 342,
	316, 437, 357, 967, 932, 80, 75, 74, 76, 579,
	1677, 809, 358, 1678, 50, 1245, 1816, 579, 538, 1024,
	1801, 809, 312, 1024, 326, 51, 579, 333, 537, 81,
	52, 1782, 312, 343, 1656, 1194, 1773, 568, 1764, 1024,
	297, 960, 354, 336, 968, 1758, 1736, 1730, 1024, 960,
	1024, 1719, 1709, 973, 1656, 1024, 320, 1684, 1681, 1667,
	960, 1024, 1656, 1724, 1664, 1655, 269, 1665, 1656, 1639,
	1638, 49, 1024, 1024, 1618, 1598, 305, 973, 973, 969,
	966, 304, 1595, 1529, 1443, 960, 1024, 973, 808, 1389,
	1383, 81, 1384, 1384, 936, 1350, 84, 29, 1351, 1493,
	1304, 1276, 1321, 1322, 1323, 30, 1277, 1275, 1659, 56,
	810, 84, 973, 1348, 84, 84, 973, 1347, 1346, 1278,
	973, 973, 973, 1025, 982, 972, 1024, 973, 973, 812,
	58, 959, 904, 49, 960, 903, 585, 971, 1446, 586,
	1219, 905, 1235, 492, 1280, 1221, 1318, 84, 1024, 84,
	811, 84, 975, 84, 973, 1084, 1019, 59, 551, 29,
	990, 444, 552, 445, 54, 777, 580, 30, 84, 776,
	55, 431, 327, 645, 580, 644, 382, 425, 325, 84,
	551, 60, 552, 580, 552, 56, 678, 402, 1784, 53,
	84, 84, 84, 1309, 84, 1547, 965, 1780, 1194, 1772,
	1731, 582, 545, 817, 1666, 860, 58, 430, 808, 1623,
	1619, 1611, 1610, 327, 571, 571, 547, 1609, 964, 417,
	543, 56, 542, 1604, 390, 84, 56, 1603, 1602, 1554,
	1508, 391, 84, 59, 84, 1503, 1502, 1501, 1449, 1432,
	1319, 1413, 58, 1393, 1355, 356, 356, 58, 327, 1352,
	827, 1340, 597, 681, 84, 1331, 84, 84, 84, 84,
	84, 84, 583, 84, 424, 53, 1081, 84, 1303, 59,
	578, 1300, 84, 674, 59, 779, 54, 1298, 84, 780,
	1286, 54, 55, 56, 1285, 1223, 1220, 55, 1153, 422,
	1107, 1106, 444, 443, 1775, 1460, 84, 1320, 1749, 84,
	1723, 53, 1701, 1699, 58, 343, 935, 828, 810, 1692,
	1673, 1662, 440, 441, 1653, 1631, 1546, 810, 446, 1616,
	1588, 1564, 1438, 1431, 357, 357, 1410, 812, 1409, 1408,
	1406, 59, 682, 1391, 358, 358, 812, 572, 54, 569,
	587, 305, 683, 313, 55, 1367, 304, 551, 811, 855,
	1366, 552, 1082, 1330, 826, 1294, 1293, 811, 1272, 857,
	1268, 1304, 1078, 72, 1315, 1316, 1317, 1208, 1314, 1311,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 631, 641, 1167,
	640, 821, 813, 814, 815, 816, 818, 643, 1166, 1146,
	1105, 675, 668, 1023, 889, 619, 892, 84, 896, 882,
	767, 817, 881, 681, 880, 618, 879, 878, 877, 876,
	817, 84, 875, 874, 778, 84, 873, 872, 84, 84,
	898, 791, 789, 871, 84, 790, 84, 84, 870, 84,
	1304, 803, 84, 899, 84, 84, 869, 356, 327, 868,
	867, 338, 901, 858, 856, 53, 781, 943, 827, 331,
	448, 388, 338, 1167, 1309, 338, 910, 540, 378, 376,
	949, 351, 851, 305, 1553, 1552, 305, 305, 797, 1202,
	764, 798, 799, 768, 769, 770, 771, 772, 934, 773,
	934, 1201, 682, 775, 396, 544, 84, 84, 886, 887,
	539, 861, 683, 73, 1679, 1551, 890, 955, 921, 923,
	1195, 893, 1014, 897, 1583, 828, 894, 1354, 1304, 977,
	895, 420, 1353, 1253, 413, 397, 357, 810, 865, 1572,
	596, 932, 1461, 1309, 1101, 885, 358, 1190, 78, 681,
	926, 1745, 957, 262, 1289, 1708, 812, 1797, 1796, 50,
	1215, 1537, 77, 50, 79, 917, 956, 929, 958, 913,
	981, 302, 64, 290, 291, 938, 354, 811, 947, 952,
	80, 75, 74, 76, 951, 948, 950, 296, 995, 295,
	1319, 1647, 560, 1646, 561, 311, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 890, 1379, 893, 1359, 813,
	814, 815, 816, 818, 1358, 887, 886, 65, 251, 1256,
	1207, 1309, 978, 984, 920, 979, 976, 1206, 682, 983,
	817, 1205, 416, 1204, 310, 394, 1390, 84, 683, 256,
	1065, 974, 1304, 928, 252, 1707, 927, 1320, 421, 1759,
	1150, 84, 84, 1305, 1306, 1307, 1308, 1310, 1149, 1036,
	68, 374, 562, 560, 299, 561, 1727, 253, 1636, 986,
	1747, 909, 395, 967, 327, 988, 312, 1378, 1075, 573,
	84, 1026, 84, 1075, 255, 453, 1398, 1369, 1318, 909,
	971, 989, 560, 1806, 561, 908, 62, 810, 673, 672,
	987, 666, 661, 327, 1769, 919, 597, 1183, 1035, 1381,
	69, 1122, 681, 1192, 968, 1761, 812, 1187, 1314, 1311,
	1312, 1313, 1305, 1306, 1307, 1308, 1310, 1796, 1181, 1101,
	300, 1762, 1304, 562, 566, 1309, 565, 811, 1017, 1018,
	579, 489, 67, 66, 971, 1702, 63, 1183, 303, 969,
	966, 1079, 309, 1214, 1062, 999, 1216, 393, 899, 883,
	1688, 998, 562, 899, 1654, 1292, 1000, 918, 254, 392,
	1395, 1152, 1088, 676, 1812, 1424, 1770, 84, 84, 84,
	1034, 1805, 1319, 84, 848, 312, 84, 414, 1768, 436,
	817, 682, 84, 84, 84, 84, 84, 1027, 84, 84,
	1158, 683, 1307, 1308, 1310, 1396, 84, 971, 84, 257,
	597, 815, 816, 818, 1771, 84, 1370, 385, 387, 70,
	1197, 1795, 1198, 393, 84, 1309, 625, 248, 1162, 1189,
	1080, 1097, 563, 1793, 1570, 313, 1637, 827, 1189, 1320,
	677, 415, 1178, 1060, 1063, 84, 84, 327, 1156, 619,
	1012, 84, 405, 383, 621, 61, 597, 1185, 1376, 618,
	381, 356, 1804, 971, 1177, 435, 965, 1059, 1676, 1614,
	251, 558, 1319, 1641, 1085, 1089, 906, 1092, 1822, 84,
	1258, 84, 84, 84, 1164, 1074, 84, 620, 1157, 436,
	1810, 256, 1640, 1131, 828, 84, 252, 580, 1489, 1143,
	1144, 1145, 84, 563, 84, 1629, 1226, 1361, 1225, 1533,
	1314, 1311, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 253,
	1193, 1161, 1013, 788, 1196, 782, 1525, 327, 1394, 1320,
	1200, 1811, 563, 313, 1740, 435, 255, 1304, 774, 1199,
	357, 1061, 1630, 1210, 1222, 1217, 1224, 1211, 1813, 1212,
	358, 955, 1615, 619, 1536, 472, 646, 1526, 1169, 1213,
	1586, 1535, 1821, 618, 1168, 1218, 819, 820, 821, 813,
	814, 815, 816, 818, 596, 1490, 667, 662, 313, 1279,
	1580, 1491, 1419, 1418, 1230, 1071, 957, 82, 243, 244,
	1231, 1532, 261, 392, 1251, 273, 650, 50, 1069, 619,
	956, 341, 958, 261, 1305, 1306, 1307, 1308, 1310, 618,
	319, 319, 340, 1587, 329, 1259, 310, 329, 335, 329,
	254, 427, 1404, 329, 344, 329, 273, 313, 1257, 648,
	1309, 1555, 1415, 1234, 1252, 1112, 1104, 1691, 84, 1521,
	649, 1522, 1613, 1534, 1334, 1373, 1437, 1375, 1299, 1267,
	1288, 980, 412, 1103, 1240, 410, 409, 408, 407, 406,
	1365, 257, 1067, 403, 1066, 84, 1524, 1386, 1072, 339,
	1335, 1243, 866, 1527, 766, 1515, 1374, 1319, 596, 1372,
	1360, 1422, 1337, 1338, 1339, 1227, 1015, 1241, 943, 1011,
	84, 953, 84, 584, 84, 581, 576, 1271, 84, 567,
	1356, 1273, 564, 1380, 1455, 787, 84, 1115, 1363, 84,
	1648, 438, 1385, 1283, 1284, 84, 681, 1797, 593, 84,
	323, 84, 796, 1021, 596, 399, 670, 3, 1523, 327,
	909, 1650, 327, 909, 1320, 1377, 924, 1177, 925, 922,
	1388, 1387, 1397, 1399, 1400, 1068, 1329, 1242, 1116, 1382,
	810, 1659, 1070, 1704, 1412, 1428, 810, 1342, 1440, 1407,
	1733, 1416, 442, 84, 597, 1725, 1427, 1405, 1421, 1451,
	1452, 1453, 1425, 1426, 937, 812, 289, 439, 247, 1022,
	804, 642, 589, 1117, 1114, 962, 324, 1819, 332, 1820,
	811, 1304, 597, 597, 1448, 682, 811, 810, 1509, 400,
	597, 379, 992, 991, 1401, 683, 1311, 1312, 1313, 1305,
	1306, 1307, 1308, 1310, 258, 1392, 384, 1462, 1349, 273,
	273, 292, 293, 1203, 1151, 1148, 1147, 1098, 993, 84,
	84, 84, 597, 1467, 1783, 632, 1417, 84, 84, 1420,
	1600, 1118, 1454, 84, 1228, 84, 1496, 84, 84, 84,
	84, 994, 261, 859, 329, 84, 273, 298, 428, 1530,
	1531, 1635, 249, 765, 404, 1497, 1464, 1465, 1606, 1265,
	1540, 1760, 1291, 319, 1469, 1687, 1514, 1510, 1549, 84,
	84, 1669, 1263, 1102, 329, 864, 28, 1559, 621, 84,
	84, 1444, 465, 84, 1516, 329, 329, 329, 1569, 574,
	1113, 1544, 84, 84, 1562, 1561, 1500, 619, 1562, 1561,
	1550, 1548, 327, 327, 1362, 1563, 327, 618, 1006, 1563,
	1005, 620, 1568, 684, 1589, 671, 660, 488, 1594, 411,
	329, 84, 1236, 654, 597, 619, 619, 638, 663, 638,
	1111, 541, 490, 619, 594, 618, 618, 491, 1261, 1494,
	1590, 595, 1266, 618, 891, 478, 592, 352, 1582, 273,
	1504, 638, 273, 273, 273, 273, 273, 941, 273, 1099,
	1287, 862, 273, 464, 470, 619, 469, 261, 1086, 1240,
	375, 1612, 461, 785, 1584, 618, 84, 1244, 84, 40,
	84, 84, 621, 389, 267, 268, 1243, 1186, 84, 1545,
	1016, 319, 792, 1371, 806, 301, 1238, 1301, 377, 1129,
	1644, 1645, 1241, 1121, 1119, 1110, 1627, 84, 423, 1575,
	1576, 1633, 1624, 1581, 553, 620, 1239, 942, 401, 1262,
	1028, 1625, 596, 597, 961, 1574, 1264, 447, 621, 1649,
	1565, 84, 800, 84, 1774, 322, 321, 1002, 1660, 398,
	647, 84, 1663, 985, 294, 1698, 1703, 1368, 1744, 84,
	596, 596, 1562, 1561, 1668, 1658, 1651, 57, 596, 22,
	20, 620, 1242, 1563, 327, 19, 18, 619, 1672, 16,
	15, 1680, 14, 21, 12, 11, 10, 618, 1686, 9,
	27, 26, 25, 2, 1, 0, 0, 0, 0, 0,
	596, 0, 329, 0, 0, 0, 1693, 1643, 0, 1700,
	0, 0, 597, 0, 0, 0, 914, 84, 84, 1304,
	329, 84, 0, 329, 930, 84, 0, 1696, 0, 329,
	84, 945, 946, 0, 329, 1712, 84, 329, 0, 273,
	273, 1721, 1714, 0, 84, 1716, 0, 1722, 1713, 0,
	681, 0, 593, 313, 1562, 1561, 1715, 451, 451, 1123,
	1720, 0, 0, 0, 899, 1563, 1726, 555, 1728, 0,
	84, 0, 84, 84, 1732, 84, 619, 0, 0, 0,
	0, 1675, 1735, 1748, 0, 0, 618, 1750, 597, 1729,
	0, 638, 806, 0, 1742, 84, 1743, 1754, 0, 1753,
	0, 1746, 596, 0, 0, 1752, 1751, 0, 0, 1757,
	1756, 1755, 1309, 0, 0, 0, 0, 0, 84, 0,
	84, 1562, 1561, 0, 0, 0, 0, 0, 1781, 682,
	1777, 0, 1563, 0, 0, 0, 1779, 0, 0, 683,
	0, 943, 1778, 0, 1791, 1792, 84, 0, 1794, 1236,
	0, 1800, 1798, 0, 0, 619, 593, 466, 38, 1319,
	0, 0, 1802, 1803, 0, 618, 0, 0, 1799, 0,
	1814, 793, 795, 1817, 0, 1815, 0, 1818, 802, 0,
	0, 1718, 0, 0, 0, 810, 0, 0, 38, 0,
	843, 844, 845, 846, 847, 1823, 1240, 0, 0, 850,
	0, 596, 593, 0, 812, 0, 0, 0, 306, 810,
	0, 314, 0, 1243, 0, 0, 1320, 0, 38, 863,
	0, 0, 997, 1238, 0, 811, 0, 0, 812, 1241,
	314, 619, 0, 0, 0, 0, 329, 914, 0, 0,
	0, 618, 0, 1239, 0, 0, 621, 0, 0, 811,
	0, 0, 1763, 0, 0, 0, 0, 1579, 0, 1123,
	1123, 0, 0, 0, 0, 329, 0, 273, 0, 0,
	0, 0, 0, 0, 621, 621, 0, 0, 817, 620,
	596, 0, 621, 0, 0, 1269, 1270, 900, 0, 1242,
	1313, 1305, 1306, 1307, 1308, 1310, 0, 0, 0, 0,
	0, 0, 817, 0, 0, 0, 0, 620, 620, 0,
	1123, 1123, 1123, 0, 621, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1326, 1327, 1328, 0,
	0, 0, 1578, 0, 0, 0, 0, 620, 0, 827,
	0, 0, 0, 0, 0, 0, 596, 0, 0, 0,
	0, 0, 329, 1159, 1160, 0, 0, 0, 914, 0,
	0, 1165, 0, 0, 0, 0, 0, 1170, 1171, 1173,
	1175, 1176, 828, 1179, 1180, 0, 0, 0, 0, 0,
	0, 329, 0, 1191, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 828, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 621, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 638, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 1123, 1123, 0, 0, 0, 0, 620,
	0, 0, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 0, 785, 0, 785, 273, 329, 1435,
	1436, 1229, 0, 306, 0, 0, 0, 0, 0, 0,
	1232, 813, 814, 815, 816, 818, 0, 1249, 0, 329,
	0, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	593, 1123, 0, 0, 0, 621, 0, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 0, 1492, 593, 593,
	0, 0, 0, 0, 451, 0, 593, 0, 620, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 0, 1064, 0, 0, 0, 0, 0, 593, 0,
	0, 0, 0, 0, 0, 0, 1525, 0, 1519, 0,
	0, 0, 0, 0, 621, 306, 1517, 0, 306, 306,
	0, 0, 0, 0, 0, 1108, 1109, 0, 1120, 0,
	1130, 1132, 1137, 1140, 1141, 1142, 0, 1526, 0, 0,
	0, 849, 0, 806, 0, 853, 0, 620, 0, 0,
	0, 0, 0, 0, 0, 0, 1520, 0, 0, 555,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1184, 0,
	621, 0, 0, 0, 0, 1402, 0, 914, 0, 785,
	593, 0, 0, 1411, 0, 0, 0, 0, 0, 0,
	0, 329, 0, 0, 329, 0, 0, 0, 0, 1521,
	1249, 1522, 0, 620, 1430, 0, 1249, 0, 0, 1209,
	0, 0, 1123, 0, 0, 0, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1524, 42, 38, 0,
	38, 0, 0, 1527, 0, 0, 0, 0, 1632, 0,
	0, 0, 0, 38, 0, 0, 0, 38, 1459, 0,
	0, 44, 0, 0, 0, 802, 0, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 0, 593,
	0, 0, 0, 0, 29, 0, 0, 45, 1523, 0,
	274, 32, 30, 0, 0, 1254, 1255, 0, 0, 1123,
	0, 1260, 0, 0, 287, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 1512, 1513, 914, 0, 0, 0,
	1274, 0, 806, 806, 0, 1690, 0, 0, 1538, 1282,
	1539, 0, 329, 1541, 1542, 1543, 0, 1290, 0, 276,
	329, 1295, 0, 0, 281, 282, 0, 288, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 593, 275,
	277, 0, 1558, 850, 1567, 914, 1558, 0, 0, 1137,
	1137, 1137, 0, 0, 329, 329, 0, 1123, 329, 0,
	0, 0, 0, 0, 31, 0, 0, 806, 1249, 0,
	0, 1357, 0, 0, 0, 47, 0, 278, 35, 0,
	46, 0, 1364, 1734, 0, 36, 0, 0, 56, 279,
	280, 0, 0, 39, 41, 0, 1607, 0, 0, 451,
	0, 0, 43, 0, 283, 0, 0, 0, 451, 58,
	0, 555, 0, 0, 593, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 54, 0, 0, 0, 1031, 0, 55,
	0, 914, 0, 1626, 0, 273, 1628, 0, 0, 0,
	0, 0, 0, 329, 0, 0, 0, 0, 53, 1433,
	0, 0, 1434, 0, 0, 0, 0, 0, 1077, 0,
	0, 0, 806, 1439, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1209, 0, 0, 284,
	1558, 0, 285, 0, 0, 1456, 329, 286, 1671, 1304,
	0, 1321, 1322, 1323, 0, 1466, 329, 0, 1468, 0,
	0, 1592, 0, 0, 806, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1498, 1499, 0, 0, 0, 1318, 0, 0, 0, 1505,
	1506, 1507, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 314, 0, 0, 0, 0, 0, 0,
	0, 0, 1705, 1706, 0, 0, 1710, 0, 0, 0,
	1711, 0, 1558, 0, 0, 273, 0, 451, 0, 0,
	0, 1567, 1309, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 0,
	0, 1573, 0, 1324, 0, 1741, 832, 806, 329, 0,
	273, 0, 0, 812, 0, 839, 0, 0, 0, 1319,
	0, 0, 0, 1593, 0, 0, 0, 1596, 1597, 1558,
	1671, 38, 1599, 0, 811, 0, 1601, 0, 0, 0,
	826, 1250, 0, 1605, 0, 0, 0, 1608, 810, 0,
	829, 830, 831, 329, 0, 806, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 839,
	0, 1077, 0, 0, 0, 0, 1320, 0, 0, 1617,
	0, 806, 0, 0, 0, 0, 849, 817, 811, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 1642, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 827, 849, 0, 0, 0, 0,
	0, 817, 0, 1315, 1316, 1317, 1661, 1314, 1311, 1312,
	1313, 1305, 1306, 1307, 1308, 1310, 833, 0, 836, 840,
	0, 0, 0, 0, 0, 1674, 0, 0, 0, 0,
	0, 0, 838, 0, 0, 0, 0, 1682, 1683, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 827, 0,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 1695, 0, 0, 0,
	833, 1304, 0, 1321, 1322, 1323, 0, 1697, 0, 0,
	0, 0, 0, 1591, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 829, 830, 831, 0, 0, 555,
	0, 0, 0, 1031, 832, 828, 1031, 0, 0, 0,
	0, 812, 0, 839, 0, 835, 837, 1318, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 811, 0, 1154, 0, 0, 0, 826, 0,
	0, 0, 0, 1155, 0, 0, 0, 0, 0, 0,
	0, 0, 1304, 0, 1321, 1322, 1323, 0, 0, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 817, 0, 0, 0, 0,
	0, 1776, 0, 1620, 0, 1324, 0, 0, 1318, 0,
	0, 0, 836, 840, 0, 0, 0, 1790, 1790, 0,
	0, 1319, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 827, 1790, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	0, 38, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 0, 1790, 0, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 1031, 0, 828,
	1031, 0, 1319, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1315, 1316, 1317, 0, 1314,
	1311, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 0, 1320,
	0, 0, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	0, 0, 0, 0, 0, 0, 0, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1315, 1316, 1317, 1652,
	1314, 1311, 1312, 1313, 1305, 1306, 1307, 1308, 1310, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 685, 88, 686, 687, 688, 689, 195,
	690, 691, 692, 693, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 694, 92, 202, 203, 93, 695, 696,
	204, 205, 206, 697, 207, 698, 360, 699, 94, 95,
	96, 849, 97, 700, 98, 99, 701, 361, 100, 101,
	702, 703, 704, 705, 706, 707, 102, 103, 104, 105,
	208, 106, 209, 210, 708, 107, 709, 108, 710, 711,
	712, 109, 110, 713, 111, 714, 0, 715, 211, 112,
	113, 212, 716, 717, 718, 114, 115, 213, 0, 116,
	719, 117, 720, 721, 362, 722, 118, 214, 723, 215,
	724, 119, 120, 216, 217, 364, 725, 123, 726, 121,
	727, 363, 122, 218, 219, 220, 728, 221, 729, 365,
	124, 366, 125, 126, 730, 731, 222, 367, 127, 368,
	732, 128, 733, 734, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 735, 138, 736, 223,
	140, 224, 141, 142, 737, 738, 739, 740, 741, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 742, 227,
	148, 228, 149, 743, 150, 151, 152, 229, 153, 154,
	744, 156, 157, 155, 158, 745, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 746, 231, 166, 167,
	747, 168, 169, 373, 170, 232, 233, 171, 748, 172,
	173, 175, 234, 174, 235, 749, 176, 750, 177, 178,
	751, 236, 237, 238, 752, 753, 179, 239, 240, 754,
	180, 181, 182, 183, 755, 756, 184, 185, 186, 757,
	758, 187, 188, 189, 241, 242, 759, 190, 760, 761,
	762, 763, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 680, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 86, 87, 685, 88, 686, 687, 688,
	689, 195, 690, 691, 692, 693, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 694, 92, 202, 203, 93,
	695, 696, 204, 205, 206, 697, 207, 698, 360, 699,
	94, 95, 96, 0, 97, 700, 98, 99, 701, 361,
	100, 101, 702, 703, 704, 705, 706, 707, 102, 103,
	104, 105, 208, 106, 209, 210, 708, 107, 709, 108,
	710, 711, 712, 109, 110, 713, 111, 714, 0, 715,
	211, 112, 113, 212, 716, 717, 718, 114, 115, 213,
	0, 116, 719, 117, 720, 721, 362, 722, 118, 214,
	723, 215, 724, 119, 120, 216, 217, 364, 725, 123,
	726, 121, 727, 363, 122, 218, 219, 220, 728, 221,
	729, 365, 124, 366, 125, 126, 730, 731, 222, 367,
	127, 368, 732, 128, 733, 734, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 735, 138,
	736, 223, 140, 224, 141, 142, 737, 738, 739, 740,
	741, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	742, 227, 148, 228, 149, 743, 150, 151, 152, 229,
	153, 154, 744, 156, 157, 155, 158, 745, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 746, 231,
	166, 167, 747, 168, 169, 373, 170, 232, 233, 171,
	748, 172, 173, 175, 234, 174, 235, 749, 176, 750,
	177, 178, 751, 236, 237, 238, 752, 753, 179, 239,
	240, 754, 180, 181, 182, 183, 755, 756, 184, 185,
	186, 757, 758, 187, 188, 189, 241, 242, 759, 190,
	760, 761, 762, 763, 191, 192, 193, 194, 0, 0,
	680, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 902, 86, 87, 685, 88, 686, 687, 688, 689,
	195, 690, 691, 692, 693, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 694, 92, 202, 203, 93, 695,
	696, 204, 205, 206, 697, 207, 698, 360, 699, 94,
	95, 96, 0, 97, 700, 98, 99, 701, 361, 100,
	101, 702, 703, 704, 705, 706, 707, 102, 103, 104,
	105, 208, 106, 209, 210, 708, 107, 709, 108, 710,
	711, 712, 109, 110, 713, 111, 714, 0, 715, 211,
	112, 113, 212, 716, 717, 718, 114, 115, 213, 0,
	116, 719, 117, 720, 721, 362, 722, 118, 214, 723,
	215, 724, 119, 120, 216, 217, 364, 725, 123, 726,
	121, 727, 363, 122, 218, 219, 220, 728, 221, 729,
	365, 124, 366, 125, 126, 730, 731, 222, 367, 127,
	368, 732, 128, 733, 734, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 735, 138, 736,
	223, 140, 224, 141, 142, 737, 738, 739, 740, 741,
	143, 225, 370, 144, 371, 226, 145, 146, 147, 742,
	227, 148, 228, 149, 743, 150, 151, 152, 229, 153,
	154, 744, 156, 157, 155, 158, 745, 159, 372, 160,
	161, 230, 162, 0, 163, 164, 165, 746, 231, 166,
	167, 747, 168, 169, 373, 170, 232, 233, 171, 748,
	172, 173, 175, 234, 174, 235, 749, 176, 750, 177,
	178, 751, 236, 237, 238, 752, 753, 179, 239, 240,
	754, 180, 181, 182, 183, 755, 756, 184, 185, 186,
	757, 758, 187, 188, 189, 241, 242, 759, 190, 760,
	761, 762, 763, 191, 192, 193, 194, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 0, 0, 86,
	87, 1094, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 1095, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 1093, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 1096, 0, 86,
	87, 456, 88, 0, 463, 1091, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 556, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 56, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 58, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 359, 535, 0, 190, 0, 0, 0, 54,
	191, 192, 193, 194, 458, 55, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 86,
	87, 456, 88, 0, 463, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 56, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 58, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 359, 535, 0, 190, 0, 0, 0, 54,
	191, 192, 193, 194, 458, 55, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 454, 455, 0, 0, 86,
	87, 456, 88, 0, 463, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 1133, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 1138, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 1134, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 1135, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 454, 455, 86, 87, 0,
	88, 456, 0, 0, 463, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 86, 87, 456,
	88, 0, 463, 1495, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 86, 87, 456,
	88, 0, 463, 1445, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 86, 87, 456,
	88, 0, 463, 1090, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 454, 455, 86, 87, 0, 88, 456,
	855, 1087, 463, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 0, 0, 486, 475, 476, 473, 474, 462, 0,
	0, 454, 455, 452, 0, 86, 87, 456, 88, 0,
	463, 0, 0, 502, 468, 0, 0, 0, 89, 90,
	196, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	1450, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 454, 455, 86, 87, 0, 88, 456, 0, 0,
	463, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 556, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 486,
	475, 476, 473, 474, 462, 0, 0, 0, 0, 454,
	455, 86, 87, 0, 88, 456, 0, 0, 463, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 1138, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 458, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 454, 455, 86,
	87, 794, 88, 456, 0, 0, 463, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 486, 475, 476, 473, 474,
	462, 0, 0, 0, 0, 454, 455, 86, 87, 0,
	88, 456, 0, 0, 463, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 1789, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 1788, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 486, 475, 476, 473, 474, 462, 0,
	0, 0, 0, 454, 455, 86, 87, 0, 88, 456,
	0, 0, 463, 502, 468, 0, 0, 0, 89, 90,
	1787, 516, 198, 517, 91, 518, 519, 0, 92, 202,
	203, 93, 483, 501, 520, 521, 206, 0, 512, 0,
	494, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 1789, 0, 495, 497, 0, 496, 498,
	102, 103, 104, 105, 522, 106, 523, 524, 0, 107,
	0, 108, 0, 0, 0, 515, 110, 0, 111, 0,
	0, 0, 467, 112, 113, 503, 481, 0, 0, 114,
	115, 525, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 513, 0, 215, 0, 119, 120, 509, 511, 364,
	0, 123, 0, 121, 0, 363, 122, 526, 527, 528,
	0, 493, 0, 365, 124, 366, 125, 126, 0, 0,
	514, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	457, 138, 482, 510, 140, 529, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 504, 145,
	146, 147, 0, 505, 148, 228, 149, 0, 150, 151,
	152, 530, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 471, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 499, 168, 169, 373, 170, 531,
	233, 171, 0, 172, 173, 175, 532, 174, 506, 0,
	176, 0, 177, 178, 0, 236, 533, 534, 0, 0,
	179, 507, 508, 480, 180, 181, 1788, 183, 0, 0,
	184, 185, 186, 500, 0, 187, 188, 189, 241, 535,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	458, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 454, 455, 86, 87, 0, 88, 456, 0, 0,
	463, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 486,
	475, 476, 473, 474, 462, 0, 0, 0, 0, 454,
	455, 86, 87, 0, 88, 456, 0, 0, 463, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 0, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	1128, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 0, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 241, 535, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 1124, 1125, 86,
	87, 0, 88, 1126, 0, 0, 1127, 502, 468, 0,
	0, 0, 89, 90, 0, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 1789, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 0, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 0, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 0, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	1788, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 455, 86, 87, 0,
	88, 456, 0, 0, 463, 502, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 501, 204, 205, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 503, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 218,
	219, 220, 0, 221, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 0, 510, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 507, 508, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 355, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 1560, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	360, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 364,
	0, 123, 0, 121, 0, 363, 122, 218, 219, 220,
	0, 221, 0, 365, 124, 366, 125, 126, 0, 0,
	222, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	56, 231, 166, 167, 0, 168, 169, 373, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 58, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 359, 242,
	0, 190, 0, 0, 0, 54, 191, 192, 193, 194,
	0, 55, 355, 665, 0, 666, 661, 656, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	53, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 360,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 669, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 658, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 364, 0,
	123, 0, 121, 0, 363, 122, 218, 219, 220, 0,
	221, 0, 365, 124, 366, 125, 126, 0, 0, 222,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 659, 0,
	0, 0, 143, 225, 370, 144, 371, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 373, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 657, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	355, 665, 0, 666, 661, 656, 0, 0, 0, 0,
	667, 662, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 360, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 652, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 658, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 364, 0, 123, 0,
	121, 0, 363, 122, 218, 219, 220, 0, 221, 0,
	365, 124, 366, 125, 126, 0, 0, 222, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 659, 0, 0, 0,
	143, 225, 370, 144, 371, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 373, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	657, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 355, 665,
	0, 666, 661, 656, 0, 0, 0, 0, 667, 662,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 360, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 658, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 364, 0, 123, 0, 121, 0,
	363, 122, 218, 219, 220, 0, 221, 0, 365, 124,
	366, 125, 126, 0, 0, 222, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 659, 0, 0, 0, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 373, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 657, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 667, 662, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 56, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 58, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	359, 242, 0, 190, 0, 0, 0, 54, 191, 192,
	193, 194, 0, 55, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 1033, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 56, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 58, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 359,
	242, 0, 190, 0, 0, 0, 54, 191, 192, 193,
	194, 0, 55, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 53, 0, 195, 0, 1248, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 444, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 328, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 1033, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 944, 195, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 1460, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 546, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 636, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	635, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 639, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 355, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 639,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 360, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 364, 0, 123, 0, 121, 0, 363, 122,
	218, 219, 220, 0, 221, 0, 365, 124, 366, 125,
	126, 0, 0, 222, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	373, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 917, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 915, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 1010, 0, 114,
	115, 213, 0, 116, 0, 117, 920, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 1008, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 919, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 1009,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	83, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 917, 207, 0, 0, 912, 94,
	95, 96, 0, 97, 915, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 920, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 911, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 919, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 918, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 1248,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 328, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 588, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 83, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	86, 87, 380, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 334,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 328, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 86, 87, 246, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 245, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	1174, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 1172, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	83, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 1163, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 784, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 260, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 575, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 0, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 83, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 429, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 83, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 426,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 83, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 0, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 386, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 271, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 270, 237, 238, 0, 0, 266,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 83,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	271, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 270, 237, 238, 0, 0, 266, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	0, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	350, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 83, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 347, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	83, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 0, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 345, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 83, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 337, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 0, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 317, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 83, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 263, 0, 0, 129, 0, 130, 131,
	132, 133, 271, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 265, 162, 0, 163, 164, 165, 0, 231,
	166, 264, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 270, 237, 238, 0, 0, 266, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 83, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 0, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 0, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 0, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 0, 0, 123, 0, 121, 0,
	0, 122, 218, 219, 220, 0, 221, 0, 0, 124,
	0, 125, 126, 0, 0, 222, 0, 127, 0, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	0, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	0, 144, 0, 226, 145, 146, 0, 0, 227, 148,
	228, 149, 0, 150, 0, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 0, 160, 161, 230,
	0, 0, 163, 164, 165, 0, 231, 166, 167, 0,
	168, 169, 0, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 0, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 241, 242, 810, 190, 829, 830, 831,
	0, 191, 192, 193, 194, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 0, 839, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 811, 0, 0, 0, 0,
	812, 826, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 0,
	0, 811, 0, 0, 0, 0, 832, 826, 0, 0,
	0, 0, 0, 812, 0, 839, 0, 0, 0, 0,
	810, 0, 829, 830, 831, 0, 0, 0, 817, 0,
	0, 0, 832, 0, 811, 0, 0, 0, 0, 812,
	826, 839, 0, 0, 0, 836, 840, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 838,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 834,
	0, 836, 840, 0, 0, 827, 0, 0, 0, 810,
	0, 0, 0, 0, 0, 838, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 833, 812, 0,
	839, 827, 0, 0, 836, 840, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 838, 811,
	0, 0, 0, 833, 0, 826, 0, 0, 834, 0,
	836, 840, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 828, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 0, 836,
	840, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 834, 0, 0, 0, 828, 0, 827,
	1344, 0, 835, 0, 0, 823, 824, 825, 837, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 1343, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 0, 0, 0, 0, 828, 0, 0, 1297,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 0, 829,
	830, 831, 1738, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 810, 839, 829,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 811, 839, 0,
	835, 0, 0, 826, 0, 0, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 810, 811, 829, 830,
	831, 0, 0, 826, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 812, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 836, 840, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 836, 840, 0,
	0, 834, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 834, 0, 0, 0, 0, 0, 827, 0, 833,
	0, 0, 0, 0, 0, 0, 836, 840, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 828, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 837, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 0, 0, 0, 835, 1737,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 810, 0, 829, 830, 831, 1717,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 812, 0, 839, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 810, 811, 829, 830, 831, 1694, 0,
	826, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 810, 839, 829, 830, 831, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 811, 839, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 836, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 834, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 840, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 838, 0, 0,
	0, 0, 0, 836, 840, 0, 0, 834, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	0, 828, 0, 827, 0, 833, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 837, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 0, 0, 0, 0, 1689, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 0, 0, 0, 835, 1685, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	810, 0, 829, 830, 831, 1622, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	810, 839, 829, 830, 831, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 0, 0, 0, 812,
	811, 839, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	811, 829, 830, 831, 0, 0, 826, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 826, 0, 0, 0, 0,
	836, 840, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	836, 840, 0, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 0, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 817, 0, 834, 0, 0, 0, 0, 0,
	827, 0, 833, 0, 0, 0, 0, 0, 0, 836,
	840, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 838, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 0, 828, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 837, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 0, 0,
	0, 835, 1621, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 810, 0, 829,
	830, 831, 1528, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 0, 839, 0,
	835, 0, 0, 823, 824, 825, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 810, 811, 829, 830,
	831, 1463, 0, 826, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 812, 810, 839, 829, 830,
	831, 0, 0, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 0, 812, 811, 839, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 0, 811, 0, 0, 0,
	0, 0, 826, 0, 0, 0, 0, 836, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 817,
	0, 834, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 840, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	838, 0, 0, 0, 0, 0, 836, 840, 0, 0,
	834, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	838, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 828, 0, 827, 0, 833, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 837, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 0, 0, 0, 0, 1447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 0, 0, 0, 835, 1083, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 0, 810, 1511, 829, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 810, 839, 829, 830, 831,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 0, 0, 812, 811, 839, 0, 0, 0,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 811, 829, 830, 831, 0,
	0, 826, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 1021, 0, 812, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 817, 1808,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 0,
	826, 0, 0, 0, 0, 836, 840, 0, 817, 0,
	1335, 0, 0, 1334, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 836, 840, 1022, 0, 834,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 834,
	0, 0, 0, 0, 0, 827, 0, 833, 0, 0,
	0, 0, 0, 0, 836, 840, 0, 0, 0, 0,
	1807, 0, 0, 0, 0, 0, 0, 833, 838, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 828, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 0, 0, 0, 835, 0, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 810, 0, 829, 830, 831, 0, 0, 0,
	0, 0, 0, 0, 832, 1304, 0, 1321, 1322, 1323,
	0, 812, 0, 839, 0, 835, 0, 1442, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 842, 811, 0, 0, 0, 0, 810, 826, 829,
	830, 831, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 1318, 0, 841, 0, 0, 812, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 826, 0, 817, 0, 810, 0, 829,
	830, 831, 0, 0, 0, 0, 0, 0, 1309, 832,
	0, 0, 836, 840, 0, 0, 812, 0, 839, 0,
	0, 0, 0, 0, 0, 0, 838, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 811, 0, 1324,
	817, 0, 827, 826, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 836, 840, 0,
	0, 0, 0, 0, 833, 312, 0, 0, 0, 0,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 827, 0, 0,
	817, 0, 0, 0, 0, 1341, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 836, 840, 833,
	837, 0, 1320, 0, 810, 0, 829, 830, 831, 0,
	0, 838, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 834, 0, 812, 0, 839, 0, 827, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 811, 837, 0, 0, 0, 833,
	826, 0, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 1315,
	1316, 1317, 0, 1314, 1311, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 0, 0, 828, 0, 1304, 0, 1321, 1322,
	1323, 0, 0, 0, 0, 837, 0, 817, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 836, 840, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 838, 0,
	0, 0, 1318, 0, 0, 0, 0, 0, 834, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 0, 833, 0, 0, 0,
	0, 810, 0, 829, 830, 831, 0, 0, 0, 1309,
	0, 0, 0, 832, 0, 0, 0, 1336, 0, 0,
	812, 0, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 828, 0, 810, 0, 829, 830, 831, 0, 0,
	1324, 811, 837, 0, 0, 832, 0, 826, 0, 0,
	0, 0, 812, 0, 839, 0, 1319, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 836, 840, 1320, 0, 0, 0, 0, 810, 0,
	829, 830, 831, 0, 0, 838, 817, 0, 0, 0,
	832, 0, 0, 0, 1296, 834, 0, 812, 0, 839,
	0, 827, 0, 836, 840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 838, 811, 0,
	0, 0, 0, 833, 826, 0, 0, 834, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	1315, 1316, 1317, 0, 1314, 1311, 1312, 1313, 1305, 1306,
	1307, 1308, 1310, 0, 0, 833, 0, 0, 828, 0,
	810, 0, 829, 830, 831, 0, 1302, 0, 0, 837,
	0, 817, 832, 0, 0, 0, 0, 0, 0, 812,
	0, 839, 0, 0, 0, 0, 0, 0, 836, 840,
	828, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	811, 837, 838, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 0, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 0,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	836, 840, 0, 0, 0, 828, 0, 810, 0, 829,
	830, 831, 0, 0, 838, 0, 837, 0, 0, 832,
	0, 0, 0, 0, 834, 0, 812, 0, 839, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 833, 826, 0, 1304, 0, 1321, 1322, 1323,
	0, 0, 0, 0, 0, 0, 0, 1441, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 0, 828, 810, 0,
	829, 830, 831, 0, 0, 0, 0, 0, 837, 0,
	817, 1318, 0, 0, 0, 0, 0, 812, 0, 839,
	0, 0, 0, 0, 0, 0, 0, 836, 840, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 838, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 0, 827, 1309, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1319, 0, 0, 836, 840,
	0, 0, 0, 0, 828, 810, 0, 829, 830, 831,
	0, 0, 838, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 834, 0, 812, 0, 839, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 811, 0, 0, 0, 0,
	0, 826, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 817, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 840, 0, 0, 1315,
	1316, 1317, 0, 1314, 1311, 1312, 1313, 1305, 1306, 1307,
	1308, 1310, 0, 609, 604, 626, 598, 617, 616, 834,
	0, 600, 599, 0, 0, 827, 628, 627, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 622, 0, 614, 613,
	0, 0, 0, 0, 0, 0, 0, 612, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 828, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	606, 607, 0, 625, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 615, 0, 823,
	824, 825, 0, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 602, 0, 0, 0, 0, 0, 0,
	0, 608, 603, 0, 0, 0, 0, 0, 630, 0,
	0, 0, 0, 0, 0, 601, 0, 0, 623, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 629,
}
var sqlPact = [...]int{

	2327, -1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 753, -1000, -1000, -1000, 620, 717,
	222, 15075, 15075, 14818, 939, 939, 16360, -1000, -1000, 19187,
	-1000, 2416, 462, 463, 462, 462, 478, 16360, 562, 628,
	124, -1000, 633, 48, 18930, 15075, 1232, 33, 13790, 308,
	2327, 14561, 15075, 18673, 1091, 1009, 998, 13790, 18416, 18159,
	17902, -1000, 9309, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 559, 318, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 317, -1000, 14304, -1000, 820, -1000, 31,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 813, -1000,
	15075, -1000, -1000, 17645, 17388, 310, 764, -1000, -1000, 526,
	395, 1250, -1000, 44, -1000, -1000, 1085, -1000, 812, 1081,
	1080, 1079, 1078, 1077, 1074, 394, 782, -1000, 530, 764,
	-1000, 764, -1000, -1000, -1000, 539, 16360, -1000, 13790, -1000,
	17131, 1028, 16874, -1000, 633, -1000, -1000, -1000, 850, 1223,
	1223, 1223, 1253, 151, 150, 124, 18, 15075, -1000, 309,
	18, 6359, 6359, -1000, -1000, 308, -1000, 351, 11980, 41,
	-1000, 6897, -1000, 805, 1139, 670, 668, 1136, -109, 13790,
	15075, 15075, 593, 16617, -1000, 1133, 125, 1132, -1000, 117,
	1130, -1000, -6, -1000, -1000, -1000, -1000, -1000, -1000, 308,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14047, 1286, 22621, -1000, 8237, -1000,
	-1000, 12248, 687, 12248, -1000, -1000, 1285, -1000, 8237, -1000,
	30, 28, 943, 1010, 9846, 9578, 1192, 824, -1000, -1000,
	-1000, 43, 3936, 15075, 1099, 12248, 15075, 15075, 15075, 15075,
	15075, -1000, 15075, -1000, 925, -1000, 15075, -1000, 24, 20,
	-1000, 16360, -1000, 134, -1000, 305, 894, 16103, 1146, 892,
	-1000, 850, -1000, 750, 920, 7433, 8237, 124, -1000, -1000,
	124, 124, 8237, -1000, -1000, 15075, 18, 1284, 15075, 63,
	-1000, 21667, -1000, -1000, 8237, 8237, 8237, 8237, 8237, 736,
	-1000, -1000, -1000, 4743, -1000, -1000, 41, 304, 210, -1000,
	-1000, 303, 41, -1000, -1000, -1000, -1000, 302, 1378, 350,
	-1000, -1000, -1000, 8237, 401, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1097, 299, 298, -1000, -1000, -1000,
	-1000, 295, 287, 282, 276, 275, 272, 271, 268, 267,
	266, 265, 263, 261, 258, 703, -1000, 413, -1000, -1000,
	413, 413, -1000, 253, 253, 255, -1000, -1000, -1000, 253,
	-1000, -1000, -1000, 388, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 257, 63, -1000, -1000, -1000, 15075, 41, -1000, -1000,
	-1000, 8237, 3667, -10, -1000, 22200, -1000, -4, 767, -1000,
	13276, 1211, 1208, 1210, 13790, 537, 534, 15075, 15075, 407,
	165, 1278, 165, 11444, -1000, 15075, 15075, -1000, 15075, -1000,
	-1000, 15075, -1000, 15075, 15075, 160, 12762, 705, 1128, 48,
	-11, -1000, 1290, -1000, -1000, -1000, -1000, 77, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 255, 703, 253, 253, 253, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 388, -1000, -1000, 413, 413, 413, -1000,
	-1000, -17, 22200, 532, 7, 12505, 15075, -1000, 39, -1000,
	-1000, 1073, 459, -18, 698, 988, 608, -1000, -1000, -1000,
	-1000, 15, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1325, -1000, -1000, -1000, -1000, 1351, 15, -1000,
	-1000, -1000, -1000, -1000, 1376, -1000, -1000, -1000, 3936, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15075, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 698, 988, -1000, -1000,
	13790, 13019, 1126, 810, 891, -1000, -1000, 376, 1123, -1000,
	-1000, -1000, -1000, 22200, -1000, 22200, 663, 1015, -1000, 1015,
	11, -1000, 21384, -1000, 252, -19, -1000, 407, 6359, 11176,
	22621, 15075, 553, 8237, 8237, 8237, 8237, 8237, 8237, 8237,
	8237, 8237, 8237, 8237, 8237, 8237, 8237, 8237, 8237, 8237,
	8237, 8237, 8237, 8237, 8237, 853, 8237, 531, 1031, 785,
	221, 3936, -1000, 1317, 1317, 1317, 22398, 22398, 211, 19,
	21026, 10, 41, -1000, -1000, 6091, 5821, 41, 4203, -1000,
	727, 1350, 411, 22200, 1083, 1053, 249, 149, 148, 8237,
	8237, 1161, 8237, 8505, 8237, 8237, 5013, 8237, 8237, 8237,
	8237, 8237, 8237, -1000, 248, -1000, -1000, -1000, -1000, 1349,
	-1000, -1000, 1348, -1000, 552, 544, 1347, 407, 146, -1000,
	2764, -1000, -1000, 6897, -1000, 705, 15075, 15075, 15075, -1000,
	-1000, 890, 15846, -1000, 22621, 15075, -1000, 247, 238, 957,
	951, 15075, 15075, 15589, 15332, 15075, 776, 15075, 15075, 662,
	-1000, 637, 8237, 677, -1000, 10640, 418, 15075, 643, 53,
	-1000, -1000, -1000, 374, 15075, -1000, -1000, -1000, 125, -1000,
	117, -1000, -1000, 13790, -1000, -1000, -1000, -1000, -1000, -1000,
	22621, 342, 330, -1000, 1346, 524, -1000, 522, 518, 511,
	-1000, 226, -1000, 8237, 15075, 12505, 7, 3, -1000, -1000,
	15075, 988, -1000, -1000, -1000, -1000, 635, -1000, 695, -1000,
	10114, -1000, -1000, -1000, 727, -1000, -5, -1000, -1000, -1000,
	-1000, 144, 0, -1000, -1000, -1000, -1000, -1000, 15075, 312,
	15075, 15075, 15075, 1122, 1369, 15075, -1000, -1000, -1000, 8237,
	-1000, -1000, -1000, 48, 15075, -1000, 1050, -1000, -3, 1400,
	-131, 13533, -1000, 10371, -1000, -1000, 393, 657, 657, 1276,
	1276, 1276, 1276, 250, 250, 1829, 817, 19839, 19839, 19839,
	1805, 457, 457, 19839, 19839, 19839, 22398, 22317, 448, 8237,
	8237, 510, 780, 221, 448, 8237, -1000, 1315, -1000, -1000,
	-1000, 1071, 219, 8505, 8505, -1000, -1000, -1000, 4743, -1000,
	-1000, 217, 8237, -1000, 8237, -33, -39, -1000, -1000, -23,
	-1000, -1000, -1, 8237, 8237, 8237, 142, -1000, 138, 596,
	-1000, 8237, 718, 215, 214, 8237, -1000, -1000, 22118, 19754,
	135, 1070, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 129,
	22033, 126, 3062, -1000, 8505, 8505, 8505, 4743, 212, 113,
	21345, -92, 22001, 7165, 7165, 7165, 109, 21717, 8237, -92,
	19721, 19695, 3002, -24, -25, -29, 1341, -47, 107, 392,
	387, 102, 1050, -1000, -1000, 8237, -1000, -1000, -1000, 505,
	499, 1117, -1000, 876, -1000, 647, 8237, 15075, 209, 204,
	730, -1000, 1116, 828, 1113, 828, -1000, -4, 749, -1000,
	-1000, 497, -1000, 6359, 22200, -1000, 639, 1222, -52, -1000,
	-1000, -1000, 6359, 407, 11444, 6897, -53, -1000, -1000, 705,
	-1000, 476, 1338, 101, 905, 783, 664, 610, 1327, 22200,
	-5, -1000, -5, -1000, -1000, -1000, -1000, -1000, -1000, 15075,
	1030, 13019, 189, 15075, 188, 187, 185, 15075, -1000, 1146,
	-1000, 99, -1000, 1047, 1252, 11176, 977, 976, 11176, 1075,
	729, 729, 729, -1000, 13533, 3385, -1000, -1000, 15075, 182,
	10909, 97, 1400, 8237, 448, 448, 8237, 8505, 8505, -1000,
	448, -1000, -1000, -1000, -1000, 1068, 181, 8237, 22621, 22365,
	21635, -58, 5551, -7, 20987, -1000, -1000, 210, -1000, 96,
	6629, -1000, 21622, 9, 9, -1000, 1367, 1144, -1000, 8237,
	21834, -1000, 11712, 408, 742, 20749, 22621, 22621, -1000, 8237,
	-1000, 1066, 8237, -1000, 22621, 8505, 8505, 8505, 8505, 8505,
	8505, 8505, 8505, 8505, 8505, 8505, 8505, 8505, 8505, 8505,
	8505, 8505, 8505, 8505, 944, 8505, 1311, 1311, 1311, -46,
	5281, -1000, 1095, 1066, 8237, 8237, 22621, 95, 94, 93,
	-1000, 8237, -92, 8237, 8237, 8237, -1000, -1000, -1000, 88,
	-1000, 1321, -1000, -1000, -1000, -1000, 1047, 21046, 15075, 15075,
	15075, 1112, 2168, -1000, 20710, -59, 15075, 15075, -1000, 960,
	1012, 445, 15075, -1000, 15075, -1000, 15075, 15075, 15075, 15075,
	-57, 6359, 175, 48, 15075, -57, 637, -1000, -1000, 369,
	-1000, 325, 324, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 87, -1000, -1000, 1040, -1000, 9041, 180, 15075, 13019,
	9041, 794, -1000, -1000, 404, 8237, 8237, 1400, 11176, 11176,
	1717, 974, 11176, -1000, -1000, -1000, -1000, 381, -1000, 984,
	179, 15075, 13533, 1270, 448, 2981, 2649, 8237, 22621, 22515,
	-60, 8237, 8237, -1000, -67, -1000, 8237, -1000, -1000, 1365,
	8237, 86, 85, 81, -1000, -1000, 22200, 8237, -1000, -1000,
	19444, 8237, 75, -1000, 70, 69, 22200, 1095, 22200, -1000,
	648, 648, 1311, 1311, 1311, 1311, 1639, 1639, 852, 1057,
	762, 762, 762, 570, 501, 501, 762, 762, 762, 1064,
	915, 178, 21916, 8237, -68, -1000, -1000, -1000, 22200, 22200,
	68, -1000, -1000, -1000, -92, 2818, 20690, 20413, -1000, 67,
	404, -1000, -1000, -1000, -1000, 15075, -1000, 15075, -1000, 15075,
	15075, 872, -1000, -1000, 935, 174, 8505, 15075, -1000, 738,
	-72, -73, 859, -1000, 840, 8237, -1000, 22621, 828, 828,
	-1000, 484, 482, -1000, -57, 1155, 15075, 1203, -1000, -1000,
	-1000, 173, -1000, -1000, -1000, 714, -77, -1000, 208, 1231,
	8237, -1000, -1000, 170, 9041, -78, -1000, -1000, 62, -83,
	15075, -1000, 15075, 22200, -92, -1000, 1717, -1000, 169, 8237,
	11176, -1000, -1000, 831, -135, -1000, 368, -1000, 15075, -84,
	-1000, 8237, 8237, 22515, -85, -1000, 448, 448, -1000, 20393,
	-1000, 21622, -1000, -1000, -1000, 22200, 708, -1000, 20354, -1000,
	-1000, -1000, -1000, 8505, 1059, 168, 22621, 20116, -1000, -1000,
	8237, -1000, -1000, -1000, -1000, -1000, 1008, -1000, -1000, -1000,
	-1000, 8237, 21916, 162, 1030, 161, -1000, -1000, -1000, 680,
	-1000, -1000, 22200, 1233, -1000, -1000, 15075, 15075, 523, -90,
	15075, -1000, -1000, 4473, 15075, 738, 9041, 1226, 41, 15075,
	1226, 20077, 4203, -91, -1000, 15075, 1030, 738, 159, -82,
	-1000, 1269, -1000, 15075, 22200, -1000, 565, 984, -1000, 3936,
	-95, -1000, 448, 448, -1000, -1000, 58, 742, 1251, -1000,
	240, 8505, 22621, -96, -1000, 20057, -1000, 19780, 913, 15075,
	-1000, 15075, 15075, 426, 15075, -1000, -1000, 584, -1000, 407,
	-1000, 157, 1030, -1000, -1000, -1000, -1000, 1231, -1, 738,
	-1000, -1000, 1030, 9041, 15075, 154, -97, 543, -1000, -1000,
	-1000, -1000, 655, 8237, 240, -104, -1000, -1000, -1000, 748,
	725, 57, -106, 153, -1000, 8237, -1000, 11444, -1000, 15075,
	-1000, 1226, 55, 1030, -1000, -111, -1000, -1000, -1000, 1359,
	46, 7969, 7969, -92, -1000, -1000, 793, 781, 605, -1000,
	-1000, -1000, -1000, -1000, 913, 15075, 22200, -110, -122, -1000,
	-1000, -1000, 738, -1000, -1000, -1000, -1000, 8773, 807, 618,
	21325, -1000, -1000, 1165, -1000, 436, 862, 862, 748, -126,
	-1000, 828, 1030, 1295, -1000, -1000, -1000, -1000, -1000, -1000,
	1303, -1000, -1000, 929, -1000, -1000, -1000, -1000, -1000, 7701,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1624, 1623, 1257, 127, 126, 1622, 1621, 1620, 108,
	125, 124, 128, 1619, 96, 1616, 1615, 1614, 106, 1613,
	1612, 1610, 57, 1609, 1606, 1605, 1600, 1599, 92, 29,
	180, 1787, 175, 1597, 1588, 1587, 14, 112, 67, 1586,
	1, 54, 107, 114, 1085, 65, 1585, 1584, 142, 38,
	18, 23, 101, 145, 129, 133, 1583, 1580, 1579, 42,
	1577, 4, 1576, 1575, 1574, 52, 16, 1572, 17, 1570,
	22, 1567, 1564, 110, 1560, 109, 120, 26, 131, 148,
	1558, 49, 12, 76, 1557, 36, 1554, 44, 77, 140,
	1548, 53, 151, 60, 31, 58, 1545, 1544, 1543, 1539,
	78, 1538, 100, 66, 1537, 1535, 86, 1533, 136, 141,
	1532, 1530, 132, 1529, 1527, 1525, 683, 1524, 1523, 369,
	1519, 9, 45, 75, 3, 116, 113, 35, 1517, 20,
	1514, 1365, 841, 815, 1512, 61, 43, 81, 50, 46,
	19, 1510, 1508, 111, 1506, 1504, 1503, 1501, 1500, 80,
	1499, 74, 143, 47, 51, 94, 21, 24, 130, 90,
	115, 149, 118, 1497, 1488, 122, 1487, 99, 1486, 1485,
	871, 121, 1484, 1481, 1477, 640, 607, 293, 25, 1474,
	1472, 178, 168, 1471, 1470, 117, 1468, 1463, 146, 1459,
	216, 39, 1457, 119, 1456, 84, 1455, 0, 89, 79,
	1453, 138, 72, 1450, 1448, 1444, 1424, 30, 6, 8,
	7, 10, 2, 28, 27, 1422, 1417, 135, 103, 1416,
	150, 1415, 1413, 41, 1411, 1405, 15, 1402, 13, 1401,
	11, 5, 1398, 144, 1394, 98, 1393, 1308, 1392, 147,
	1391, 1387, 1306, 95,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 166,
	166, 165, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 233, 233,
	233, 237, 237, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 190, 188, 188, 195, 195,
	195, 56, 56, 56, 56, 56, 57, 57, 57, 187,
	187, 187, 187, 196, 196, 196, 196, 196, 196, 58,
	58, 58, 194, 194, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	189, 189, 234, 234, 236, 236, 8, 8, 59, 59,
	60, 60, 123, 123, 123, 123, 61, 61, 122, 205,
	205, 206, 206, 206, 206, 207, 207, 207, 207, 207,
	207, 207, 203, 203, 204, 201, 201, 202, 202, 202,
	202, 240, 240, 121, 121, 64, 64, 210, 210, 210,
	210, 208, 208, 208, 208, 208, 211, 209, 212, 212,
	212, 212, 212, 152, 152, 152, 27, 7, 7, 105,
	105, 68, 68, 156, 156, 156, 69, 69, 157, 50,
	50, 36, 36, 36, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 106, 106, 107, 107, 19, 23, 26,
	26, 26, 26, 26, 242, 242, 47, 47, 47, 47,
	48, 48, 119, 119, 119, 119, 119, 42, 6, 6,
	41, 41, 18, 18, 18, 18, 18, 53, 53, 112,
	112, 112, 114, 114, 113, 113, 113, 91, 91, 28,
	82, 82, 83, 83, 163, 84, 84, 22, 22, 31,
	31, 29, 29, 29, 29, 29, 29, 30, 30, 32,
	32, 32, 32, 32, 32, 32, 218, 218, 218, 220,
	220, 217, 219, 219, 241, 241, 92, 92, 92, 63,
	62, 62, 66, 66, 65, 67, 67, 155, 89, 89,
	89, 89, 108, 109, 109, 110, 110, 111, 111, 88,
	88, 138, 138, 33, 33, 73, 73, 74, 74, 129,
	129, 130, 130, 128, 128, 128, 158, 158, 158, 158,
	159, 159, 159, 159, 159, 159, 153, 153, 153, 153,
	154, 154, 164, 164, 95, 95, 95, 95, 93, 93,
	94, 94, 160, 160, 160, 160, 90, 90, 161, 161,
	161, 124, 124, 167, 167, 167, 72, 72, 72, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 169, 169, 169, 169, 171, 171, 171, 170,
	170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 172, 172, 179, 179, 180, 180, 181, 182,
	173, 173, 174, 174, 175, 176, 183, 183, 183, 183,
	185, 185, 177, 177, 177, 177, 177, 178, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 103, 103, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 213,
	213, 213, 213, 213, 213, 213, 215, 215, 216, 216,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 221, 221, 222, 222,
	223, 223, 224, 224, 226, 227, 227, 227, 228, 232,
	232, 225, 225, 229, 229, 229, 230, 230, 231, 231,
	231, 231, 231, 143, 143, 143, 144, 144, 145, 79,
	79, 140, 140, 139, 139, 139, 142, 142, 96, 184,
	184, 184, 184, 184, 184, 184, 97, 97, 104, 98,
	98, 99, 99, 99, 99, 99, 99, 135, 136, 100,
	100, 100, 137, 137, 146, 150, 150, 149, 148, 148,
	147, 147, 127, 127, 127, 127, 126, 125, 85, 85,
	243, 243, 151, 151, 86, 86, 87, 81, 81, 162,
	162, 162, 162, 75, 75, 55, 55, 76, 76, 51,
	51, 54, 52, 52, 52, 52, 70, 70, 71, 71,
	49, 49, 134, 134, 134, 134, 134, 134, 134, 134,
	134, 134, 134, 186, 186, 186, 44, 44, 44, 45,
	45, 46, 46, 192, 192, 192, 193, 193, 193, 193,
	191, 191, 191, 191, 191, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 1, 3, 1, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 1, 1,
	3, 1, 1, 1, 2, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 19, -6, -7, -8, -219, 87,
	95, 187, 94, 80, 110, 201, 208, -29, -31, 216,
	-120, 217, 30, 225, 54, 90, 203, 198, 245, 61,
	-218, -32, -30, 291, 266, 272, 211, -33, 232, 259,
	294, 232, 73, 123, 82, 127, 253, 252, 73, 123,
	232, -12, 291, -22, -5, -10, -4, -18, -28, -9,
	-11, 19, -44, 4, -197, -199, 16, 17, 19, 29,
	30, 35, 39, 42, 53, 54, 55, 57, 59, 60,
	63, 64, 71, 72, 73, 74, 76, 80, 82, 86,
	87, 89, 94, 95, 100, 101, 104, 106, 111, 116,
	117, 124, 127, 122, 135, 137, 138, 143, 146, 149,
	151, 152, 153, 154, 155, 157, 158, 160, 162, 159,
	165, 167, 168, 174, 177, 180, 181, 182, 185, 187,
	189, 190, 191, 193, 194, 198, 196, 197, 199, 201,
	203, 204, 206, 208, 209, 210, 213, 214, 216, 217,
	219, 222, 224, 225, 228, 226, 231, 233, 234, 241,
	245, 246, 247, 248, 251, 252, 253, 256, 257, 258,
	262, 267, 268, 269, 270, 24, 31, 32, 33, 34,
	36, 37, 40, 41, 45, 46, 47, 49, 75, 77,
	78, 93, 96, 102, 112, 114, 118, 119, 128, 129,
	130, 132, 141, 164, 166, 175, 179, 184, 186, 192,
	205, 212, 220, 221, 227, 229, 236, 237, 238, 242,
	243, 259, 260, -44, -44, 187, 18, -237, 18, -238,
	-239, 61, 87, 110, 211, 127, 82, 252, -237, -48,
	208, -44, -116, 146, 214, 205, 241, -117, -115, -190,
	236, 155, -77, -44, 4, 73, 53, 74, 111, 123,
	124, 58, 59, 138, 233, 236, 241, 18, 61, -242,
	241, 241, -242, -242, -47, 241, 239, -48, -241, 232,
	232, -105, 73, 250, -30, -32, -31, -65, -66, 249,
	131, 92, 173, -29, -31, -218, -220, 193, -217, -44,
	-220, -62, -63, 18, 84, 295, -160, -51, 171, -44,
	-87, 291, -3, -160, 118, -44, -54, 118, -51, 108,
	133, 133, -161, -160, -44, 118, -55, 118, -54, -78,
	118, -77, -166, -165, -193, 4, -197, -199, -198, 259,
	51, 62, 109, 126, 120, 134, 136, 142, 144, 156,
	176, 178, 202, 218, 232, -141, 291, -101, 291, -44,
	18, 170, 295, 170, -44, -116, 47, -116, 291, -118,
	-42, -43, 135, 189, 239, 276, 108, 270, -58, 5,
	79, -80, 293, 108, -234, 170, 108, 108, 108, 108,
	108, -189, 108, 270, 135, 189, 232, -119, -42, -43,
	-119, 239, -48, -90, -160, -77, 118, 123, -44, 118,
	-65, -66, -89, -108, -109, 145, 169, -92, 18, 84,
	-92, -92, 39, 292, 292, 295, -220, -71, 291, -81,
	-162, -131, 284, -133, 282, 283, 288, 161, 271, -143,
	-51, -134, 9, 291, -146, -215, -31, 93, 25, -144,
	-145, 205, -44, 7, 8, 5, 6, -49, -169, -178,
	244, 97, 163, 43, -213, -214, 4, -197, -192, -170,
	-180, -174, -177, 132, 51, 66, 69, 67, 70, 215,
	254, 44, 24, 96, 179, 184, 229, 242, 243, 118,
	164, 119, 49, 112, 141, 86, 32, 34, 36, 37,
	45, 46, 75, 77, 78, 102, 128, 129, 130, 166,
	192, 220, 227, 237, 238, 260, -198, -181, -182, -175,
	-176, -183, -81, -87, 284, -51, 291, -85, -127, -126,
	-125, 289, 293, -86, -151, -131, 79, -38, 196, -37,
	17, 19, 87, 257, 93, 196, 196, 93, 296, -161,
	-53, -51, -53, 216, -44, 26, 93, -40, 295, 42,
	199, 93, -40, 295, 93, 292, 295, -160, 118, 26,
	-140, -167, -168, -170, -179, -173, -177, -178, 35, 41,
	40, 234, 212, 221, 33, 128, 129, 130, 220, 32,
	192, 102, 86, 78, 77, 166, 37, 36, -181, -182,
	-175, -176, 75, 237, 238, 132, 34, 46, 45, 260,
	227, -79, -131, -233, -76, 232, 73, -52, -44, 284,
	-239, -233, 26, -79, 295, 295, 143, -57, 149, 160,
	116, -188, 79, -195, -187, -152, 9, 244, 97, 170,
	-194, 8, 283, -186, -193, 5, 7, 282, -188, 79,
	64, -196, 5, 4, -178, -152, 79, 146, 293, -191,
	4, -197, -199, -198, -200, 18, 20, 21, 22, 23,
	25, 26, 27, 28, 38, 43, 44, 48, 50, 52,
	58, 61, 65, 66, 67, 68, 69, 70, 79, 81,
	83, 84, 85, 88, 90, 92, 97, 98, 99, 105,
	107, 108, 110, 113, 115, 121, 123, 125, 131, 133,
	139, 140, 145, 147, 148, 161, 163, 169, 170, 171,
	172, 173, 183, 188, 195, 200, 211, 215, 223, 230,
	232, 235, 239, 240, 244, 249, 250, 254, 255, 261,
	263, 264, 265, 266, -190, -236, 105, -233, -190, -190,
	-190, -190, -190, -190, 143, -190, 295, 295, -48, -40,
	295, 291, 161, -45, 118, -44, -41, 89, 161, -89,
	-109, -108, -110, -131, 18, -131, -133, -30, -30, -30,
	-67, -155, -131, -217, 26, -70, -44, -73, 295, 108,
	10, 50, 29, 282, 283, 284, 285, 103, 286, 279,
	280, 281, 278, 274, 275, 276, 56, 150, 207, 12,
	13, 14, 22, 172, 144, 271, 120, 218, 134, 31,
	121, 26, 4, -131, -131, -131, -131, -131, 178, -31,
	-131, -79, -85, -31, -139, 289, 291, -85, 291, 5,
	5, 291, -147, -131, -221, 267, 105, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 186, -185, 262, -185, -185, -171, 291,
	-171, -172, 291, -171, 268, 272, 291, -73, -51, -127,
	-131, -191, 284, 295, 292, 295, 239, -106, 58, 52,
	-122, 118, 52, -201, -44, 58, -202, 48, 250, 188,
	107, -106, 58, -106, 58, 58, -160, 239, 239, -54,
	-44, -124, 264, -112, -22, 291, 79, 26, -112, -82,
	-83, -163, -84, -51, 291, -44, -44, -54, -55, -77,
	-78, -12, -165, 93, -14, -22, -18, -28, -9, 292,
	295, -72, 25, -102, 291, 269, 153, 76, 117, 152,
	-103, 210, 292, 295, 239, 295, -76, -70, -126, -125,
	108, 241, 292, -43, -42, -56, 191, 222, 197, 213,
	295, 8, 7, 7, 5, -191, -235, -44, -43, -42,
	-160, -59, -60, -123, -122, -203, -204, -201, 123, 250,
	98, 93, 170, 161, 276, 93, -111, 205, 206, 295,
	-36, 27, 83, 291, 295, 292, -124, -162, -74, -158,
	-160, -31, -159, 291, -167, -77, 236, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, 144,
	120, 218, 31, 121, -131, 239, 163, 161, 244, 97,
	251, 84, 167, -243, 230, 28, -137, -31, 291, -191,
	-143, 205, 291, 292, 295, -79, -142, 290, -139, -79,
	292, 292, -79, 261, 18, 84, 284, -102, 7, -150,
	-149, 263, -222, 100, 113, 291, 292, 292, -131, -131,
	-96, -184, 4, 269, 153, 76, 117, 152, 210, -97,
	-131, -98, -132, -133, 282, 283, 288, 291, 205, -99,
	-131, -79, -131, 38, 140, 240, -100, -131, 108, -79,
	-131, -131, -131, -79, -79, -79, 291, 7, 7, 236,
	236, 7, -124, 292, 290, 299, -151, -37, -51, -44,
	-44, 161, -122, 118, -167, -44, 291, 291, 137, 137,
	-44, -44, 118, -44, 118, -44, -44, -38, 196, -44,
	-44, 196, -91, 200, -131, -91, -114, 170, -75, -51,
	259, -44, 200, -73, 295, 276, -75, -40, -40, -160,
	-167, 289, 289, 7, 239, 239, 239, 239, 291, -131,
	-235, -52, -235, -42, 248, 55, 191, -195, -102, 295,
	292, 295, -45, 123, -45, -77, -51, 93, 5, -44,
	-155, -14, -44, -88, 113, 295, 62, -95, 136, 156,
	109, 142, 202, 126, -128, 296, -154, -153, 26, -44,
	-31, -159, -158, 270, -131, -131, 239, -243, 230, -137,
	-131, 163, 244, 97, 251, 84, 167, 108, 291, -132,
	-132, -79, 291, -79, -131, 290, 290, 295, 292, -66,
	295, -65, -131, -79, -79, 292, 292, -148, -149, 88,
	-131, -227, 177, 291, 291, -131, 26, 295, 292, 108,
	292, -104, 183, 292, 10, 282, 283, 284, 285, 103,
	286, 279, 280, 281, 278, 274, 275, 276, 56, 150,
	207, 12, 13, 14, 134, 121, -132, -132, -132, -79,
	291, 292, -135, -136, 108, 105, 26, -100, -100, -100,
	292, 108, -79, 295, 295, 295, 292, 292, 292, 7,
	292, 295, 292, 270, 270, 292, -88, -131, 239, 239,
	93, 161, -205, -202, -131, -70, 291, 291, -35, 87,
	216, -107, 93, -40, 93, -40, 239, -106, 58, 239,
	-81, 200, 57, 292, 295, -81, -124, -83, -151, 292,
	290, 7, 7, 292, 153, 117, 152, -103, 152, -103,
	-103, 7, -44, -61, 122, -123, 291, -45, 291, 291,
	291, -44, -41, 292, -138, 115, 39, -158, 136, 136,
	-158, -95, 136, -93, 176, -93, -93, -154, -191, 297,
	-44, 291, 292, -131, -131, -132, -132, 108, 291, -131,
	-140, 22, 22, 292, -79, 292, 295, 292, -139, 292,
	261, -66, -66, -66, 5, 90, -131, 235, -228, -44,
	291, 264, -65, 292, -167, -167, -131, -135, -131, -167,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, 84,
	161, 167, -132, 295, -79, 292, -136, -135, -131, -131,
	-167, 292, 292, 292, -79, -131, -131, -131, 292, 7,
	-138, 290, -44, -44, -122, 93, -206, 58, -207, 50,
	98, 161, 163, 250, 188, 48, 79, 195, 292, 292,
	-70, -70, 161, 79, 161, 79, 72, 246, -44, -44,
	-51, -44, -44, -44, -81, -113, 291, 170, -22, -51,
	-91, 276, 290, 290, 292, 121, -68, -156, -44, -216,
	291, -213, -214, -49, 291, -69, -157, -44, -59, -68,
	170, -223, 265, -131, -79, -158, -158, -94, 255, 170,
	136, -158, -164, 273, -130, -129, 106, 159, 291, -70,
	-153, 22, 22, -131, -140, 292, -131, -131, 292, -131,
	5, -131, 292, 292, 292, -131, -232, -44, -131, 292,
	292, 292, -136, 108, 84, 167, 291, -131, 292, 292,
	295, 292, 292, 292, -223, -122, -44, -77, -44, 163,
	137, 291, -132, -51, -121, -240, 60, 228, 292, 292,
	163, 163, -131, -167, -40, -40, 239, 239, 85, -70,
	58, -87, -31, 291, 180, 292, 295, -50, -85, 50,
	-50, -131, 291, -68, 292, 295, 292, 292, -51, -224,
	-226, -44, -94, 291, -131, -158, 167, 295, 298, 276,
	-70, 292, -131, -131, 292, 292, -66, -225, 182, 292,
	-132, 108, 291, -140, 292, -131, -207, -131, -46, 291,
	-61, 291, 195, -39, 50, -44, -44, 252, 162, 292,
	-44, -44, -121, -156, -36, -77, -36, 292, -79, 292,
	-157, -61, -121, 291, 295, 26, -70, 231, -129, -191,
	292, 292, -66, 39, -132, -140, 292, 292, 292, -210,
	151, -44, -70, -51, -34, 255, -77, 216, -124, 291,
	-61, -50, -66, -121, -61, -68, -226, -228, 292, 236,
	-229, 190, 206, -79, 292, -208, -211, -209, 170, 109,
	181, 219, 292, 292, -64, 291, -131, -82, -70, -36,
	292, -61, 292, 5, 292, -230, -231, 31, 247, 64,
	-131, -230, -209, 170, -211, 170, 252, 82, -210, -70,
	-124, 292, -121, -231, 185, 104, 205, 185, 104, -212,
	158, 199, 42, 216, -212, -208, 292, -40, -61, 22,
	16, 163, 79, -231,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 327, -2, 0,
	118, 0, 285, 0, 285, 285, 289, 0, 355, 250,
	352, -2, 363, 0, 0, 0, 361, 341, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 776, 777, 778, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 91, 92, 858, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 278,
	872, 291, 114, 837, 876, 939, 888, 121, 131, 0,
	945, -2, 135, 65, 164, 165, 0, 167, 183, 0,
	0, 0, 0, 0, 181, 0, 0, 178, 0, 296,
	284, 296, 281, 282, 283, 286, 0, 277, 0, 354,
	0, 0, 0, 249, -2, 337, 338, -2, 0, 358,
	358, 358, 0, 0, 338, 0, 346, 862, 349, 759,
	347, 0, 0, 360, 359, 0, 342, 422, 0, 749,
	383, 0, 2, 0, 925, 0, 0, 925, 0, 0,
	0, 0, 0, 428, 57, 925, 48, 925, 745, 48,
	925, 63, 0, 79, 81, 786, 787, 788, 789, 950,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 290, 115, 915, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 174, 0, 175, 0, 177, 0, 279, 292, 293,
	280, 0, 288, 48, 426, 0, 925, 780, 301, 925,
	-2, 0, 333, 370, 371, 0, 0, 0, 356, 357,
	0, 0, 0, 329, 330, 0, 348, 0, 0, 386,
	737, 741, 742, 514, 0, 0, 0, 0, 0, 0,
	597, 598, 599, 0, 601, 602, 603, 920, 0, 607,
	608, 939, 749, 762, 763, 764, 765, 0, 0, 0,
	770, 771, 772, 721, 647, 617, -2, -2, 760, 452,
	453, 454, 455, -2, 952, 621, 623, 625, 626, 627,
	628, 0, 904, 921, 935, 936, 944, 948, 949, 925,
	932, 926, 916, 923, 931, 818, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 785, 476, 477, 482,
	483, 485, 386, 384, 423, 424, 0, 750, 728, 722,
	723, 0, 0, 0, 734, 732, 733, 25, 274, 27,
	0, 274, 274, 0, 0, 0, 0, 0, 0, 432,
	0, 307, 0, 0, 429, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 353, 0, 0, 925, 353,
	0, 681, 438, 439, 440, 441, 442, 511, 445, 446,
	447, 448, 449, 450, 451, 459, 460, 461, 462, 463,
	464, 473, 0, 458, 458, 458, 470, 471, 474, 475,
	480, 481, 492, 493, 495, 497, 491, 491, 491, 488,
	489, 0, 679, 0, 98, 0, 813, 747, 752, 755,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 243, 0, 245, 162, 163, 773, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	790, 791, 792, 793, 794, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 166, 168, 0, 182, 169, 170,
	171, 172, 173, 180, 176, 179, 0, 0, 287, 246,
	0, 189, 0, 0, 925, 779, 298, 0, 0, 336,
	368, 369, 372, 375, 376, 373, 514, 343, 344, 345,
	364, 365, 263, 350, 0, 0, 756, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 731,
	0, 0, 740, 518, 519, 520, 542, 543, 0, -2,
	679, 0, 604, 605, 606, 0, 0, -2, 0, 767,
	511, 0, 0, 720, 649, 0, 0, 0, 0, 0,
	0, 0, 0, 700, 706, 0, 0, 0, 0, 0,
	0, 0, 0, 466, 479, 490, 487, 486, 468, 0,
	467, 465, 0, 469, 0, 0, 0, 432, 0, 729,
	0, 726, 727, 0, 736, 0, 0, 0, 0, 273,
	29, 925, 0, 39, 0, 0, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	751, 318, 0, 318, 309, 0, 0, 0, 305, 386,
	320, 322, 323, 0, 0, 430, 58, 746, 48, 64,
	48, 70, 80, 0, 82, 85, 86, 87, 88, 83,
	0, 433, 435, 443, 0, 498, 499, 500, 501, 502,
	503, 512, 90, 0, 0, 0, 99, 100, 753, 754,
	0, 0, 119, 124, 125, 297, 0, 143, 0, 145,
	0, 244, 775, 774, 511, 68, 184, 112, 294, 295,
	427, 0, 188, 190, 192, 193, 194, 195, 780, 0,
	780, 0, 0, 0, 0, 0, 374, 377, 378, 0,
	367, 261, 262, 353, 0, 758, 380, 738, 385, 387,
	395, 411, 398, 0, 515, 516, 0, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 530, -2, -2, -2,
	534, 535, 536, -2, -2, -2, 540, 541, -2, 0,
	0, 0, 731, 0, -2, 0, 550, 0, 553, 555,
	557, 0, 0, 0, 0, 730, 567, 712, 0, 739,
	552, 0, 0, 600, 0, 0, 0, 685, 686, 0,
	-2, 609, 363, 0, 0, 0, 0, 768, 0, 719,
	715, 0, 657, 0, 0, 0, 622, 624, 0, 0,
	0, 0, 689, 690, 691, 692, 693, 694, 695, 0,
	0, 0, 0, 569, 0, 0, 0, 0, 939, 0,
	679, 705, 0, 0, 0, 0, 0, 679, 0, 711,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 425, 724, 0, 735, 28, 265, 0,
	0, 0, 31, 925, 200, 0, 0, 0, 0, 0,
	276, 40, 925, 48, 925, 48, 41, 26, 274, 264,
	267, 0, 56, 0, 431, 302, 303, 0, 0, 743,
	311, 308, 0, 432, 0, 0, 0, 60, 62, 0,
	682, 0, 0, 0, 0, 0, 0, 0, 0, 680,
	96, 748, 97, 116, 141, 142, 144, 137, 155, 0,
	197, 0, 0, 780, 0, 0, 0, 0, 300, 301,
	366, 0, 757, 382, 0, 0, 0, 0, 0, 0,
	419, 419, 419, 417, 411, 0, 397, 410, 0, 409,
	-2, 398, 0, 0, -2, -2, 0, 0, 0, 568,
	-2, 551, 554, 556, 558, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 683, 684, 0, -2, 0,
	0, 362, 363, 363, 363, 615, 0, 0, 716, 0,
	0, 616, 0, 0, 0, 0, 0, 0, 631, 0,
	632, 0, 0, 633, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 571, 572, 573, 0,
	0, 634, 703, 704, 0, 0, 0, 0, 0, 0,
	639, 0, 710, 0, 0, 0, 643, 644, 645, 0,
	456, 0, 472, 494, 496, 484, 382, 0, 0, 0,
	0, 0, 198, 215, 0, 0, 0, 0, 33, 0,
	0, 0, 0, 37, 0, 43, 0, 0, 0, 0,
	317, 0, 316, 0, 0, 306, 318, 321, 324, 0,
	436, 0, 0, 444, 504, 505, 506, 507, 508, 509,
	510, 0, 113, 186, 0, 191, 0, 0, 0, 189,
	0, 0, 299, 351, 651, 0, 0, 388, 0, 0,
	0, 0, 0, 414, 418, 415, 416, 413, 393, 0,
	407, 0, 400, 517, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 713, 0, 674, 0, -2, 687, 610,
	0, 0, 0, 0, 769, 714, 718, 0, 655, 656,
	660, 0, 0, 620, 0, 0, 688, 697, 698, 570,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	-2, -2, -2, 587, 588, 589, -2, -2, -2, 0,
	0, 0, 699, 0, 0, 677, 701, 702, 707, 708,
	0, 636, 637, 638, 709, 0, 0, 0, 478, 0,
	651, 725, 269, 271, 30, 0, 199, 0, 202, 0,
	0, 0, 206, 207, 0, 0, 0, 0, 217, 224,
	0, 0, 0, 45, 0, 0, 275, 0, 48, 48,
	266, 0, 0, 268, 304, 0, 0, 0, 310, 744,
	319, 0, 437, 434, 513, 0, 0, 251, 260, 260,
	0, 618, 619, 0, 0, 0, 256, 258, 0, 0,
	0, 339, 0, 381, 379, 401, 0, 403, 0, 0,
	0, 405, 396, 0, 0, 391, 0, 390, 0, 0,
	399, 0, 0, -2, 0, 561, -2, -2, 673, 680,
	766, 363, 611, 613, 614, 717, 662, 659, 0, 646,
	629, 630, 696, 0, 0, 0, 0, 680, 676, 635,
	0, 641, 642, 457, 340, 32, 0, 203, 204, 205,
	208, 0, 210, 782, 197, 0, 221, 222, 219, 0,
	34, 35, 44, 50, 36, 42, 0, 0, 0, 0,
	0, 325, 326, 0, 0, 224, 0, 263, 761, 0,
	263, 0, 0, 0, 214, 0, 197, 224, 0, 650,
	652, 0, 402, 0, 421, 404, 0, 0, 394, 0,
	0, 408, -2, -2, 562, 675, 0, 363, 0, 648,
	-2, 0, 0, 0, 678, 0, 201, 0, 230, 0,
	218, 0, 0, 52, 0, 270, 272, 0, 313, 432,
	315, 0, 197, 252, 253, 259, 254, 260, 363, 224,
	257, 187, 197, 0, 0, 0, 0, 0, 392, 389,
	406, 612, 665, 0, -2, 0, 595, 640, 209, 235,
	0, 0, 0, 226, 38, 0, 49, 0, 314, 0,
	212, 263, 0, 197, 247, 0, 653, 654, 420, 0,
	0, 0, 0, 661, 596, 211, 231, 232, 0, 227,
	228, 229, 781, 223, 230, 0, 51, 432, 0, 255,
	610, 213, 224, 412, 658, 663, 666, -2, 891, 810,
	0, 664, 233, 0, 234, 0, 0, 0, 235, 0,
	312, 48, 197, 0, 668, 669, 670, 671, 672, 236,
	0, 239, 240, 0, 237, 220, 225, 196, 248, 0,
	238, 241, 242, 667,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 280, 3, 286, 281, 3,
	291, 292, 284, 282, 295, 283, 293, 285, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 299, 294,
	274, 276, 275, 3, 296, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 289, 3, 290, 279, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 297, 278, 298, 288,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 277, 57617, 287, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:697
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:703
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:709
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:732
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:742
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:758
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:816
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:823
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:825
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:870
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:871
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:874
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:875
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:995
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1102
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1245
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1337
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1358
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1669
		{
			unimplemented()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = []string(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = []string(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1708
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1716
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1719
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = true
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = false
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1810
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1830
		{
		}
	case 261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = Ascending
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = Descending
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = true
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = false
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1897
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1940
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.str = ""
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1948
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1952
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.str = ""
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2013
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2034
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2041
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			unimplemented()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = []string(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2338
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2342
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2346
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = true
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = false
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2373
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2474
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2572
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2655
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.str = astFullJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.str = astLeftJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.str = astRightJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.str = astInnerJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2805
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2809
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2813
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2814
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2823
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2870
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2879
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = nil
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2955
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2996
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3023
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3095
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3100
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3111
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3143
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3144
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			unimplemented()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3540
		{
			unimplemented()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3541
		{
			unimplemented()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3582
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3627
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3671
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3675
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3676
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3680
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3681
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			unimplemented()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3693
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3723
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3727
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3734
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4066
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4222
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4258
		{
			unimplemented()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = DNull
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.str = ""
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
