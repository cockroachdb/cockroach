// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:300
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4660

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 353,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 328,
	173, 328,
	203, 328,
	295, 328,
	297, 328,
	-2, 338,
	-1, 51,
	1, 331,
	173, 331,
	203, 331,
	295, 331,
	297, 331,
	-2, 337,
	-1, 60,
	1, 24,
	297, 24,
	-2, 353,
	-1, 271,
	1, 161,
	297, 161,
	-2, 847,
	-1, 304,
	148, 363,
	172, 363,
	-2, 334,
	-1, 307,
	148, 362,
	172, 362,
	-2, 332,
	-1, 429,
	148, 362,
	172, 362,
	-2, 335,
	-1, 485,
	294, 787,
	-2, 780,
	-1, 486,
	294, 788,
	-2, 781,
	-1, 492,
	5, 497,
	294, 497,
	-2, 934,
	-1, 515,
	5, 463,
	-2, 910,
	-1, 516,
	5, 491,
	294, 491,
	-2, 912,
	-1, 517,
	5, 471,
	-2, 913,
	-1, 518,
	5, 470,
	-2, 914,
	-1, 519,
	5, 491,
	294, 491,
	-2, 917,
	-1, 520,
	5, 491,
	294, 491,
	-2, 918,
	-1, 521,
	5, 492,
	-2, 921,
	-1, 522,
	5, 458,
	-2, 922,
	-1, 523,
	5, 458,
	-2, 923,
	-1, 524,
	5, 473,
	-2, 926,
	-1, 525,
	5, 459,
	-2, 931,
	-1, 526,
	5, 460,
	-2, 932,
	-1, 527,
	5, 461,
	-2, 933,
	-1, 528,
	5, 458,
	-2, 937,
	-1, 529,
	5, 464,
	-2, 942,
	-1, 530,
	5, 462,
	-2, 945,
	-1, 531,
	5, 489,
	294, 489,
	-2, 947,
	-1, 532,
	5, 493,
	-2, 950,
	-1, 533,
	5, 495,
	-2, 951,
	-1, 534,
	5, 488,
	294, 488,
	-2, 955,
	-1, 852,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 607,
	-1, 860,
	294, 765,
	-2, 754,
	-1, 1050,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 531,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 532,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 533,
	-1, 1056,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 537,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 538,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 539,
	-1, 1061,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 544,
	-1, 1067,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 546,
	-1, 1070,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1097,
	181, 678,
	-2, 681,
	-1, 1258,
	95, 338,
	134, 338,
	148, 338,
	172, 338,
	176, 338,
	252, 338,
	-2, 411,
	-1, 1262,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 545,
	-1, 1263,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 547,
	-1, 1268,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1286,
	181, 677,
	-2, 680,
	-1, 1443,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1448,
	137, 0,
	-2, 563,
	-1, 1456,
	181, 679,
	-2, 682,
	-1, 1489,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 588,
	-1, 1490,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 589,
	-1, 1491,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 590,
	-1, 1495,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 594,
	-1, 1496,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 595,
	-1, 1497,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 596,
	-1, 1601,
	137, 0,
	-2, 564,
	-1, 1604,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 567,
	-1, 1605,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 569,
	-1, 1691,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 568,
	-1, 1692,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 570,
	-1, 1699,
	137, 0,
	-2, 597,
	-1, 1744,
	137, 0,
	-2, 598,
	-1, 1799,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 909,
}

const sqlNprod = 1049
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23520

var sqlAct = [...]int{

	486, 1798, 1777, 934, 1412, 1822, 576, 1644, 1750, 1146,
	1023, 1797, 942, 1467, 1778, 1667, 1566, 1779, 308, 1593,
	1679, 1585, 37, 484, 483, 272, 1567, 589, 85, 476,
	535, 1527, 84, 84, 84, 1007, 855, 84, 330, 804,
	84, 547, 1255, 1579, 678, 1004, 1423, 1340, 84, 782,
	857, 1245, 1189, 1254, 785, 84, 84, 1289, 448, 84,
	556, 1006, 84, 84, 84, 1341, 1432, 943, 84, 84,
	84, 84, 973, 356, 1241, 17, 313, 1031, 919, 553,
	910, 1143, 1083, 1107, 1080, 1035, 590, 315, 50, 966,
	957, 652, 23, 417, 636, 313, 351, 800, 13, 6,
	1195, 357, 999, 358, 558, 449, 73, 458, 548, 549,
	307, 1032, 418, 633, 663, 891, 353, 887, 50, 8,
	346, 936, 1010, 78, 7, 5, 4, 71, 806, 77,
	79, 349, 318, 433, 431, 1033, 348, 654, 432, 632,
	259, 650, 250, 342, 569, 316, 436, 269, 50, 1686,
	80, 1829, 1687, 935, 1027, 75, 74, 76, 939, 1814,
	51, 1253, 1027, 1794, 578, 578, 1666, 1785, 1775, 1769,
	1027, 963, 1027, 478, 970, 567, 312, 578, 52, 1746,
	1740, 1202, 963, 1027, 1201, 312, 1730, 354, 297, 1666,
	1720, 808, 809, 1027, 326, 1693, 1690, 333, 963, 1027,
	336, 320, 81, 343, 1676, 1674, 1665, 1666, 1027, 1666,
	1649, 305, 56, 1027, 811, 971, 1648, 1626, 1606, 1027,
	976, 976, 1603, 1539, 1452, 963, 1027, 976, 1312, 304,
	1329, 1330, 1331, 58, 1398, 810, 1391, 1392, 1358, 1392,
	809, 1359, 1356, 1600, 49, 976, 84, 976, 1284, 1355,
	972, 969, 976, 1285, 1312, 1354, 537, 1734, 976, 807,
	59, 84, 811, 809, 84, 84, 1286, 54, 1243, 976,
	29, 1283, 1028, 55, 1502, 1027, 976, 1326, 30, 985,
	1455, 975, 976, 810, 976, 811, 1227, 908, 816, 825,
	56, 962, 53, 1229, 963, 1027, 60, 84, 1288, 84,
	978, 84, 907, 84, 1091, 906, 810, 976, 974, 584,
	1669, 58, 585, 550, 1022, 993, 443, 551, 84, 551,
	444, 579, 579, 430, 1317, 776, 424, 775, 644, 84,
	643, 382, 325, 550, 579, 826, 816, 551, 59, 677,
	84, 84, 84, 402, 84, 54, 1796, 809, 1792, 1784,
	1317, 55, 56, 1741, 1675, 1332, 581, 1631, 1627, 816,
	390, 1619, 429, 1618, 542, 863, 546, 968, 1201, 811,
	938, 1327, 1617, 58, 1612, 84, 1611, 1610, 807, 391,
	1564, 541, 84, 826, 84, 1517, 1512, 1511, 630, 967,
	810, 1510, 827, 1458, 56, 356, 356, 1327, 642, 1557,
	59, 1441, 1422, 680, 84, 1402, 84, 84, 84, 84,
	84, 84, 84, 1363, 1563, 58, 84, 582, 577, 1360,
	1348, 84, 1339, 357, 357, 358, 358, 84, 1328, 778,
	779, 681, 53, 682, 423, 1311, 1308, 421, 1306, 1294,
	827, 1293, 59, 816, 1231, 84, 1228, 1160, 84, 54,
	1114, 1113, 443, 442, 1328, 55, 1787, 439, 440, 1469,
	1760, 1733, 1088, 445, 818, 819, 820, 812, 813, 814,
	815, 817, 854, 837, 53, 343, 305, 1712, 1710, 1701,
	1682, 1672, 1663, 568, 1641, 313, 571, 1624, 1596, 1574,
	826, 1447, 1440, 1312, 304, 1323, 1324, 1325, 1419, 1322,
	1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318, 860, 1418,
	586, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	1556, 837, 1417, 640, 1562, 639, 1319, 1320, 1321, 1313,
	1314, 1315, 1316, 1318, 1415, 674, 1400, 667, 812, 813,
	814, 815, 817, 459, 837, 766, 84, 827, 1089, 550,
	596, 763, 680, 551, 767, 768, 769, 770, 771, 1375,
	84, 777, 1374, 774, 84, 788, 789, 84, 84, 452,
	1338, 673, 790, 84, 1302, 84, 84, 802, 84, 1301,
	681, 84, 682, 84, 84, 81, 356, 1280, 902, 1317,
	1276, 1085, 1216, 1129, 1174, 913, 904, 305, 1173, 1153,
	305, 305, 327, 1112, 1026, 327, 892, 338, 952, 351,
	895, 327, 1174, 338, 357, 796, 358, 899, 797, 798,
	885, 820, 812, 813, 814, 815, 817, 49, 837, 884,
	883, 858, 882, 618, 881, 84, 84, 889, 890, 893,
	880, 924, 926, 809, 896, 937, 879, 937, 878, 536,
	877, 876, 875, 29, 864, 874, 873, 872, 871, 1312,
	73, 30, 870, 861, 958, 811, 859, 53, 780, 331,
	900, 447, 50, 809, 388, 980, 50, 78, 680, 378,
	376, 960, 916, 77, 79, 1210, 810, 959, 961, 1209,
	809, 809, 543, 941, 1688, 811, 416, 396, 1312, 929,
	354, 951, 955, 932, 80, 491, 681, 539, 682, 75,
	74, 76, 954, 811, 950, 953, 810, 809, 1312, 1561,
	1203, 538, 998, 1017, 488, 1591, 1362, 897, 893, 1580,
	896, 898, 1361, 810, 810, 1261, 412, 397, 987, 816,
	868, 935, 1470, 1108, 890, 889, 981, 982, 979, 888,
	1197, 559, 1756, 560, 1719, 1317, 986, 1809, 1547, 296,
	559, 295, 560, 984, 290, 1297, 84, 262, 1313, 1314,
	1315, 1316, 1318, 1657, 291, 1810, 1656, 56, 1387, 64,
	84, 84, 1367, 1366, 1264, 1215, 1214, 816, 1223, 1213,
	1212, 1068, 1119, 977, 1317, 931, 930, 420, 58, 1770,
	1157, 1156, 1327, 1039, 415, 374, 559, 299, 560, 84,
	1029, 84, 1737, 1758, 1317, 572, 1407, 1377, 1082, 974,
	1273, 561, 1399, 912, 65, 59, 1020, 1021, 394, 1386,
	561, 1082, 54, 1271, 826, 1772, 1038, 1819, 55, 1190,
	912, 1327, 327, 1646, 1718, 680, 911, 1389, 302, 578,
	1194, 1773, 1188, 1199, 565, 564, 1312, 72, 1713, 1328,
	1224, 311, 393, 392, 886, 395, 1818, 1122, 1092, 1096,
	1002, 1099, 544, 681, 974, 682, 561, 1697, 672, 671,
	1190, 665, 660, 327, 570, 570, 1664, 1138, 1001, 1086,
	851, 827, 1300, 1150, 1151, 1152, 1037, 902, 1328, 1269,
	310, 413, 902, 1274, 1159, 1326, 1312, 1433, 1123, 1095,
	84, 84, 84, 1030, 312, 1003, 84, 393, 327, 84,
	814, 815, 817, 1780, 837, 84, 84, 84, 84, 84,
	1185, 84, 84, 1321, 1313, 1314, 1315, 1316, 1318, 84,
	1108, 84, 312, 1124, 1121, 1809, 1378, 1817, 84, 67,
	66, 1169, 1317, 1104, 837, 414, 675, 84, 1205, 1087,
	1206, 313, 821, 818, 819, 820, 812, 813, 814, 815,
	817, 837, 837, 1313, 1314, 1315, 1316, 1318, 84, 84,
	1270, 1222, 1808, 596, 84, 557, 1163, 1272, 419, 1192,
	1184, 562, 1806, 1578, 356, 1315, 1316, 1318, 837, 1327,
	562, 1125, 1317, 1781, 1171, 795, 579, 300, 251, 624,
	1384, 1647, 84, 1164, 84, 84, 84, 970, 309, 84,
	1266, 1015, 357, 676, 358, 303, 617, 909, 84, 256,
	1404, 385, 387, 1081, 252, 84, 405, 84, 68, 383,
	1233, 381, 435, 1685, 1651, 989, 562, 62, 1204, 1327,
	1208, 991, 1835, 434, 1650, 1622, 1328, 253, 971, 313,
	1120, 1230, 1707, 1232, 1498, 1405, 618, 992, 1639, 1403,
	1369, 1543, 1546, 1219, 255, 1782, 990, 435, 1221, 1545,
	1218, 1168, 595, 1016, 620, 1225, 1220, 1226, 69, 901,
	787, 596, 1207, 972, 969, 1279, 781, 63, 619, 1281,
	248, 592, 958, 920, 1751, 434, 1328, 327, 313, 773,
	338, 1291, 1292, 1783, 50, 1594, 946, 1239, 1287, 960,
	1238, 338, 1259, 974, 338, 959, 961, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1834, 596, 1623, 1825,
	645, 1499, 1640, 251, 1337, 1176, 1588, 1500, 1260, 1267,
	1265, 974, 1078, 1542, 1175, 1350, 1428, 313, 254, 666,
	661, 1544, 923, 1427, 256, 1076, 392, 649, 1595, 252,
	341, 340, 310, 426, 618, 84, 1413, 1322, 1319, 1320,
	1321, 1313, 1314, 1315, 1316, 1318, 1565, 1381, 1424, 1383,
	1296, 1242, 253, 1111, 1700, 1621, 1637, 70, 1342, 257,
	647, 1446, 84, 84, 1394, 1343, 61, 1535, 471, 255,
	968, 648, 1307, 1065, 1373, 1275, 1638, 983, 411, 410,
	618, 409, 1345, 1346, 1347, 408, 407, 406, 84, 1074,
	84, 1073, 84, 403, 1364, 1079, 84, 339, 1536, 869,
	82, 243, 244, 922, 84, 261, 765, 84, 273, 1388,
	1110, 1371, 1776, 84, 680, 1823, 261, 84, 1393, 84,
	1748, 1524, 1382, 319, 319, 1380, 1385, 329, 1184, 1395,
	329, 335, 329, 1368, 1235, 1464, 329, 344, 329, 273,
	1396, 1416, 681, 1397, 682, 1018, 1406, 1408, 1409, 1014,
	1453, 1414, 1421, 254, 956, 583, 1824, 580, 1437, 1430,
	575, 84, 1063, 1066, 1449, 921, 1436, 566, 1248, 1460,
	1461, 1462, 1075, 1826, 563, 786, 1434, 1435, 1658, 1077,
	1531, 1024, 1532, 327, 1810, 1251, 1062, 669, 437, 323,
	1660, 399, 912, 928, 257, 1431, 1457, 3, 927, 912,
	1390, 1249, 1669, 1244, 1743, 925, 1715, 1534, 1503, 1735,
	940, 289, 327, 1425, 1537, 1426, 441, 1476, 1429, 1513,
	1471, 803, 641, 588, 965, 1832, 247, 84, 84, 84,
	1833, 1312, 809, 995, 994, 84, 84, 1025, 1518, 1410,
	1401, 84, 1357, 84, 1211, 84, 84, 84, 84, 1506,
	1248, 1473, 1474, 84, 438, 324, 292, 293, 332, 1478,
	1064, 1250, 258, 1158, 1523, 1155, 1505, 1251, 400, 1533,
	1154, 1519, 1105, 996, 1540, 1541, 1795, 1246, 84, 84,
	1608, 1463, 1236, 1249, 997, 862, 298, 1645, 84, 84,
	1244, 1509, 84, 249, 764, 1582, 1577, 1247, 404, 1572,
	1571, 84, 84, 1572, 1571, 1573, 1130, 1560, 1554, 1573,
	596, 1587, 1614, 1165, 379, 1771, 1299, 1575, 1696, 617,
	1678, 1109, 867, 28, 1576, 1569, 464, 1558, 1525, 384,
	84, 1370, 273, 273, 1009, 1602, 1008, 1248, 596, 596,
	1597, 683, 1196, 1250, 1598, 670, 596, 659, 487, 653,
	662, 1196, 1118, 540, 1251, 489, 593, 490, 594, 894,
	327, 477, 591, 352, 1246, 261, 1590, 329, 944, 273,
	1249, 427, 1106, 1295, 865, 595, 463, 620, 596, 469,
	468, 1093, 375, 460, 1247, 84, 319, 84, 1592, 84,
	84, 619, 1252, 618, 592, 40, 1586, 329, 84, 1583,
	1584, 389, 1620, 1589, 267, 268, 1193, 1555, 329, 329,
	329, 1019, 573, 791, 1635, 1654, 1655, 84, 1379, 1234,
	1633, 618, 618, 1632, 301, 1309, 377, 617, 1136, 618,
	1250, 1128, 1126, 1117, 422, 552, 945, 401, 1200, 84,
	327, 84, 964, 329, 446, 1670, 799, 1786, 322, 84,
	637, 1673, 637, 321, 1005, 398, 1659, 84, 1572, 1571,
	1661, 618, 646, 988, 1573, 1668, 1681, 294, 1709, 1714,
	1376, 1755, 273, 617, 637, 273, 273, 273, 273, 273,
	772, 596, 57, 595, 273, 620, 22, 20, 1695, 261,
	19, 18, 16, 15, 1653, 784, 1689, 14, 84, 619,
	21, 12, 592, 11, 10, 9, 27, 26, 25, 1711,
	1130, 1130, 1702, 319, 2, 1, 805, 84, 84, 0,
	0, 84, 0, 0, 0, 84, 1705, 0, 0, 595,
	84, 620, 0, 1723, 1277, 1278, 0, 0, 1725, 0,
	1731, 1727, 1729, 84, 1732, 619, 313, 1706, 592, 680,
	1572, 1571, 0, 1724, 0, 1726, 1573, 0, 0, 0,
	1684, 1130, 1130, 1130, 618, 0, 1738, 0, 0, 0,
	902, 84, 0, 84, 84, 1742, 84, 681, 0, 682,
	0, 596, 1736, 0, 1759, 1334, 1335, 1336, 1761, 1745,
	0, 0, 0, 1739, 0, 84, 0, 1765, 1764, 0,
	0, 1757, 0, 0, 1762, 946, 327, 0, 1763, 1768,
	1766, 0, 1753, 1774, 329, 1767, 0, 1572, 1571, 84,
	0, 84, 0, 1573, 0, 0, 0, 0, 917, 1793,
	0, 1789, 329, 1791, 0, 329, 933, 84, 0, 0,
	0, 329, 0, 948, 949, 1803, 329, 327, 84, 329,
	327, 273, 273, 1813, 1807, 1811, 1805, 0, 596, 0,
	1790, 1816, 1815, 0, 618, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1828, 0, 1827, 0, 0, 0,
	1831, 1830, 0, 0, 0, 0, 0, 1812, 0, 0,
	0, 0, 0, 0, 1836, 1130, 1130, 0, 0, 0,
	0, 0, 0, 637, 805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 0, 0, 0, 596, 0, 0, 0, 0,
	0, 618, 0, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
	1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
	1130, 1130, 0, 1130, 0, 0, 0, 1479, 1480, 1481,
	1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491,
	1492, 1493, 1494, 1495, 1496, 1497, 617, 1501, 1550, 0,
	0, 0, 0, 0, 0, 0, 1559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 617, 617, 0, 0, 618, 0,
	0, 0, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 327, 327, 0, 1000, 327, 0, 0, 0, 0,
	0, 0, 595, 0, 620, 0, 0, 0, 329, 917,
	0, 0, 0, 0, 617, 0, 0, 0, 619, 0,
	0, 592, 809, 0, 0, 0, 0, 0, 0, 0,
	595, 595, 620, 620, 0, 0, 0, 329, 595, 273,
	620, 0, 0, 0, 811, 0, 619, 619, 0, 592,
	592, 0, 465, 38, 619, 0, 0, 592, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 1535,
	595, 1528, 620, 0, 0, 0, 0, 0, 0, 1526,
	0, 0, 1530, 38, 0, 0, 619, 0, 0, 592,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1536, 1643, 0, 306, 0, 0, 314, 0, 0, 0,
	0, 0, 0, 38, 0, 0, 0, 617, 816, 1529,
	0, 0, 0, 0, 0, 314, 1130, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 1166,
	1167, 0, 1677, 0, 917, 0, 0, 1172, 0, 0,
	1642, 0, 327, 1177, 1178, 1180, 1182, 1183, 0, 1186,
	1187, 0, 0, 0, 0, 826, 0, 329, 0, 1198,
	0, 0, 0, 595, 0, 620, 329, 0, 0, 0,
	0, 0, 1531, 0, 1532, 329, 0, 0, 0, 619,
	0, 0, 592, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 637, 0, 1534,
	0, 1130, 1000, 450, 450, 0, 1537, 617, 0, 0,
	0, 0, 827, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1699, 0, 0, 0, 0,
	784, 0, 784, 273, 329, 0, 0, 1237, 0, 0,
	0, 0, 0, 0, 0, 0, 1240, 0, 0, 0,
	0, 0, 0, 1257, 0, 329, 0, 0, 0, 0,
	0, 1533, 0, 595, 0, 620, 0, 1754, 0, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 619,
	1130, 0, 592, 0, 617, 831, 0, 812, 813, 814,
	815, 817, 811, 837, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1744, 0, 0, 0, 0, 0,
	24, 0, 946, 810, 0, 0, 792, 794, 0, 825,
	0, 42, 0, 801, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 846, 847, 848, 849, 850,
	595, 0, 620, 0, 853, 44, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 619, 0, 306, 592,
	0, 617, 0, 0, 866, 0, 816, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 29, 0,
	0, 45, 0, 835, 843, 32, 30, 0, 0, 0,
	0, 0, 0, 805, 0, 0, 0, 841, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 595, 0, 620,
	329, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 619, 0, 832, 592, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1411, 0, 917, 0,
	784, 0, 0, 0, 1420, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 329, 0, 0, 0, 0,
	827, 1257, 0, 0, 0, 1439, 0, 1257, 31, 306,
	0, 836, 306, 306, 0, 0, 0, 0, 0, 47,
	0, 0, 35, 0, 46, 0, 0, 0, 0, 36,
	0, 0, 56, 0, 0, 852, 0, 39, 41, 856,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 1468,
	0, 0, 0, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 48, 822, 823, 824,
	0, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	59, 837, 0, 1161, 0, 0, 0, 54, 0, 0,
	0, 0, 1162, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 0, 0, 1521, 1522, 917, 0, 0,
	0, 0, 0, 805, 805, 0, 0, 0, 0, 1548,
	0, 1549, 0, 329, 1551, 1552, 1553, 0, 0, 0,
	0, 329, 38, 274, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	287, 38, 0, 0, 1568, 0, 805, 917, 1568, 0,
	0, 1312, 0, 1329, 1330, 1331, 329, 329, 0, 0,
	329, 0, 0, 0, 0, 0, 1599, 0, 0, 805,
	1257, 0, 0, 0, 0, 276, 0, 0, 0, 0,
	281, 282, 0, 288, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 275, 277, 0, 1615, 450,
	1326, 0, 0, 0, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 0, 1067, 0, 1069,
	1070, 1071, 1072, 278, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 280, 1317, 0, 0,
	0, 0, 0, 917, 0, 1634, 0, 273, 1636, 0,
	283, 0, 0, 0, 1115, 1116, 329, 1127, 0, 1137,
	1139, 1144, 1147, 1148, 1149, 0, 0, 0, 1332, 0,
	0, 0, 0, 0, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 0, 0, 554, 0,
	0, 0, 0, 1568, 0, 0, 0, 329, 0, 1680,
	0, 0, 0, 0, 0, 0, 0, 329, 0, 0,
	0, 0, 0, 0, 0, 805, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1328, 0, 0, 0, 284, 0, 0, 285, 0,
	0, 1034, 0, 286, 0, 0, 784, 0, 1217, 0,
	0, 0, 1312, 0, 1329, 1330, 1331, 0, 0, 0,
	0, 0, 0, 0, 0, 1716, 1717, 1451, 0, 1721,
	0, 0, 0, 1722, 0, 1568, 1084, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 805, 0, 0, 801, 0, 0, 0, 1323, 1324,
	1325, 1326, 1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316,
	1318, 0, 0, 0, 0, 0, 0, 0, 0, 1752,
	0, 805, 329, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 1263, 0, 0, 0, 0,
	1268, 0, 1568, 1680, 0, 0, 0, 0, 1317, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 0, 329, 0, 805,
	0, 314, 1290, 0, 0, 0, 0, 0, 0, 1332,
	1298, 0, 0, 0, 1303, 1804, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1327, 805, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	0, 0, 1144, 1144, 1144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1365, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1372, 0, 0, 0, 0,
	0, 0, 1328, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 450, 0, 0, 0, 0, 0, 0, 1258,
	0, 450, 0, 0, 0, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 1084,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 811, 0, 842, 0, 0, 0, 0, 852, 1323,
	1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314, 1315,
	1316, 1318, 810, 1442, 0, 0, 1443, 809, 825, 828,
	829, 830, 838, 839, 840, 0, 0, 1448, 0, 0,
	0, 0, 831, 0, 0, 0, 0, 0, 0, 811,
	1217, 842, 0, 0, 0, 0, 0, 852, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	810, 0, 1477, 0, 0, 816, 825, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 843, 0, 0, 0, 1312, 0, 1329,
	1330, 1331, 0, 0, 1507, 1508, 841, 0, 0, 0,
	0, 0, 1450, 1514, 1515, 1516, 833, 0, 0, 0,
	0, 0, 826, 816, 0, 1034, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	835, 843, 0, 0, 832, 1312, 1326, 1329, 1330, 1331,
	0, 450, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 1034, 0, 0, 1034,
	826, 0, 0, 0, 0, 0, 0, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 1581, 0, 0, 0,
	836, 0, 832, 1317, 1326, 0, 809, 0, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 0, 1601, 0,
	0, 831, 1604, 1605, 0, 0, 0, 1607, 811, 0,
	842, 1609, 0, 0, 1332, 0, 0, 827, 1613, 0,
	0, 0, 1616, 0, 0, 0, 0, 0, 836, 810,
	1327, 1317, 0, 834, 0, 825, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 1333,
	837, 0, 0, 0, 1625, 0, 0, 1628, 0, 0,
	0, 0, 1332, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1327, 0,
	0, 834, 816, 0, 822, 823, 824, 1328, 821, 818,
	819, 820, 812, 813, 814, 815, 817, 1652, 837, 835,
	843, 0, 0, 0, 38, 1353, 0, 0, 0, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 1671, 833, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 1328, 0, 0, 0, 1683,
	1034, 1034, 0, 0, 1034, 0, 0, 0, 0, 0,
	0, 1691, 1692, 0, 1323, 1324, 1325, 0, 1322, 1319,
	1320, 1321, 1313, 1314, 1315, 1316, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1704, 0, 0, 0, 0, 0, 827, 0, 0, 0,
	0, 0, 0, 1708, 0, 0, 0, 836, 0, 0,
	0, 0, 1323, 1324, 1325, 0, 1322, 1319, 1320, 1321,
	1313, 1314, 1315, 1316, 1318, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 0, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	0, 0, 0, 0, 1662, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1034, 0, 0, 0, 0, 0, 0, 1788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1802, 1802, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1802, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	679, 0, 0, 0, 0, 0, 852, 0, 0, 0,
	0, 0, 0, 0, 1802, 86, 87, 684, 88, 685,
	686, 687, 688, 195, 689, 690, 691, 692, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 693, 92, 202,
	203, 93, 694, 695, 204, 205, 206, 696, 207, 697,
	360, 698, 94, 95, 96, 0, 97, 699, 98, 99,
	700, 361, 100, 101, 701, 702, 703, 704, 705, 706,
	102, 103, 104, 105, 208, 106, 209, 210, 707, 107,
	708, 108, 709, 710, 711, 109, 110, 712, 111, 713,
	0, 714, 211, 112, 113, 212, 715, 716, 717, 114,
	115, 213, 0, 116, 718, 117, 719, 720, 362, 721,
	118, 214, 722, 215, 723, 119, 120, 216, 217, 364,
	724, 123, 725, 121, 726, 363, 122, 218, 219, 220,
	727, 221, 728, 365, 124, 366, 125, 126, 729, 730,
	222, 367, 127, 368, 731, 128, 732, 733, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	734, 138, 735, 223, 140, 224, 141, 142, 736, 737,
	738, 739, 740, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 741, 227, 148, 228, 149, 742, 150, 151,
	152, 229, 153, 154, 743, 156, 157, 155, 158, 744,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	745, 231, 166, 167, 746, 168, 169, 373, 170, 232,
	233, 171, 747, 172, 173, 175, 234, 174, 235, 748,
	176, 749, 177, 178, 750, 236, 237, 238, 751, 752,
	179, 239, 240, 753, 180, 181, 182, 183, 754, 755,
	184, 185, 186, 756, 757, 187, 188, 189, 241, 242,
	758, 190, 759, 760, 761, 762, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1438, 86, 87, 684,
	88, 685, 686, 687, 688, 195, 689, 690, 691, 692,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 693,
	92, 202, 203, 93, 694, 695, 204, 205, 206, 696,
	207, 697, 360, 698, 94, 95, 96, 0, 97, 699,
	98, 99, 700, 361, 100, 101, 701, 702, 703, 704,
	705, 706, 102, 103, 104, 105, 208, 106, 209, 210,
	707, 107, 708, 108, 709, 710, 711, 109, 110, 712,
	111, 713, 0, 714, 211, 112, 113, 212, 715, 716,
	717, 114, 115, 213, 0, 116, 718, 117, 719, 720,
	362, 721, 118, 214, 722, 215, 723, 119, 120, 216,
	217, 364, 724, 123, 725, 121, 726, 363, 122, 218,
	219, 220, 727, 221, 728, 365, 124, 366, 125, 126,
	729, 730, 222, 367, 127, 368, 731, 128, 732, 733,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 734, 138, 735, 223, 140, 224, 141, 142,
	736, 737, 738, 739, 740, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 741, 227, 148, 228, 149, 742,
	150, 151, 152, 229, 153, 154, 743, 156, 157, 155,
	158, 744, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 745, 231, 166, 167, 746, 168, 169, 373,
	170, 232, 233, 171, 747, 172, 173, 175, 234, 174,
	235, 748, 176, 749, 177, 178, 750, 236, 237, 238,
	751, 752, 179, 239, 240, 753, 180, 181, 182, 183,
	754, 755, 184, 185, 186, 756, 757, 187, 188, 189,
	241, 242, 758, 190, 759, 760, 761, 762, 191, 192,
	193, 194, 679, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 905, 0, 86, 87, 684,
	88, 685, 686, 687, 688, 195, 689, 690, 691, 692,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 693,
	92, 202, 203, 93, 694, 695, 204, 205, 206, 696,
	207, 697, 360, 698, 94, 95, 96, 0, 97, 699,
	98, 99, 700, 361, 100, 101, 701, 702, 703, 704,
	705, 706, 102, 103, 104, 105, 208, 106, 209, 210,
	707, 107, 708, 108, 709, 710, 711, 109, 110, 712,
	111, 713, 0, 714, 211, 112, 113, 212, 715, 716,
	717, 114, 115, 213, 0, 116, 718, 117, 719, 720,
	362, 721, 118, 214, 722, 215, 723, 119, 120, 216,
	217, 364, 724, 123, 725, 121, 726, 363, 122, 218,
	219, 220, 727, 221, 728, 365, 124, 366, 125, 126,
	729, 730, 222, 367, 127, 368, 731, 128, 732, 733,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 734, 138, 735, 223, 140, 224, 141, 142,
	736, 737, 738, 739, 740, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 741, 227, 148, 228, 149, 742,
	150, 151, 152, 229, 153, 154, 743, 156, 157, 155,
	158, 744, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 745, 231, 166, 167, 746, 168, 169, 373,
	170, 232, 233, 171, 747, 172, 173, 175, 234, 174,
	235, 748, 176, 749, 177, 178, 750, 236, 237, 238,
	751, 752, 179, 239, 240, 753, 180, 181, 182, 183,
	754, 755, 184, 185, 186, 756, 757, 187, 188, 189,
	241, 242, 758, 190, 759, 760, 761, 762, 191, 192,
	193, 194, 485, 474, 475, 472, 473, 461, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 1101,
	88, 0, 0, 0, 0, 501, 467, 0, 0, 0,
	89, 90, 196, 515, 198, 516, 91, 517, 518, 0,
	92, 202, 203, 93, 482, 500, 519, 520, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 521, 106, 522, 523,
	0, 107, 0, 108, 0, 1102, 0, 514, 110, 0,
	111, 0, 0, 0, 466, 112, 113, 502, 480, 0,
	0, 114, 115, 524, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 525,
	526, 527, 0, 492, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 456, 138, 481, 509, 140, 528, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 529, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 470, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 530, 233, 171, 0, 172, 173, 175, 531, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 532, 533,
	0, 0, 179, 506, 507, 479, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 534, 1100, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 457, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 453, 454, 1103, 0, 0, 0, 455,
	0, 0, 462, 1098, 485, 474, 475, 472, 473, 461,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 501, 467, 0,
	0, 0, 89, 90, 196, 515, 198, 516, 91, 517,
	518, 0, 92, 202, 203, 93, 482, 500, 519, 520,
	206, 0, 511, 0, 493, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 494,
	496, 0, 495, 497, 102, 103, 104, 105, 521, 106,
	522, 523, 555, 107, 0, 108, 0, 0, 0, 514,
	110, 0, 111, 0, 0, 0, 466, 112, 113, 502,
	480, 0, 0, 114, 115, 524, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 512, 0, 215, 0, 119,
	120, 508, 510, 364, 0, 123, 0, 121, 0, 363,
	122, 525, 526, 527, 0, 492, 0, 365, 124, 366,
	125, 126, 0, 0, 513, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 456, 138, 481, 509, 140, 528,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 503, 145, 146, 147, 0, 504, 148, 228,
	149, 0, 150, 151, 152, 529, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 470, 162,
	0, 163, 164, 165, 56, 231, 166, 167, 498, 168,
	169, 373, 170, 530, 233, 171, 0, 172, 173, 175,
	531, 174, 505, 0, 176, 58, 177, 178, 0, 236,
	532, 533, 0, 0, 179, 506, 507, 479, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 499, 0, 187,
	188, 189, 359, 534, 0, 190, 0, 0, 0, 54,
	191, 192, 193, 194, 457, 55, 0, 485, 474, 475,
	472, 473, 461, 0, 0, 453, 454, 0, 0, 0,
	0, 455, 86, 87, 462, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 196, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 56, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 58, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 359, 534, 0, 190, 0,
	0, 0, 54, 191, 192, 193, 194, 457, 55, 0,
	485, 474, 475, 472, 473, 461, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 86, 87, 462, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 1140, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 1145, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 1141,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 1142,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 0, 0, 462, 1504, 485, 474, 475, 472, 473,
	461, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 501, 467,
	0, 0, 0, 89, 90, 196, 515, 198, 516, 91,
	517, 518, 0, 92, 202, 203, 93, 482, 500, 519,
	520, 206, 0, 511, 0, 493, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	494, 496, 0, 495, 497, 102, 103, 104, 105, 521,
	106, 522, 523, 0, 107, 0, 108, 0, 0, 0,
	514, 110, 0, 111, 0, 0, 0, 466, 112, 113,
	502, 480, 0, 0, 114, 115, 524, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 512, 0, 215, 0,
	119, 120, 508, 510, 364, 0, 123, 0, 121, 0,
	363, 122, 525, 526, 527, 0, 492, 0, 365, 124,
	366, 125, 126, 0, 0, 513, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 456, 138, 481, 509, 140,
	528, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 503, 145, 146, 147, 0, 504, 148,
	228, 149, 0, 150, 151, 152, 529, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 470,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 498,
	168, 169, 373, 170, 530, 233, 171, 0, 172, 173,
	175, 531, 174, 505, 0, 176, 0, 177, 178, 0,
	236, 532, 533, 0, 0, 179, 506, 507, 479, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 499, 0,
	187, 188, 189, 241, 534, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 453, 454, 0, 0,
	0, 0, 455, 0, 0, 462, 1454, 485, 474, 475,
	472, 473, 461, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	501, 467, 0, 0, 0, 89, 90, 196, 515, 198,
	516, 91, 517, 518, 0, 92, 202, 203, 93, 482,
	500, 519, 520, 206, 0, 511, 0, 493, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 494, 496, 0, 495, 497, 102, 103, 104,
	105, 521, 106, 522, 523, 0, 107, 0, 108, 0,
	0, 0, 514, 110, 0, 111, 0, 0, 0, 466,
	112, 113, 502, 480, 0, 0, 114, 115, 524, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 512, 0,
	215, 0, 119, 120, 508, 510, 364, 0, 123, 0,
	121, 0, 363, 122, 525, 526, 527, 0, 492, 0,
	365, 124, 366, 125, 126, 0, 0, 513, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 456, 138, 481,
	509, 140, 528, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 503, 145, 146, 147, 0,
	504, 148, 228, 149, 0, 150, 151, 152, 529, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 470, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 498, 168, 169, 373, 170, 530, 233, 171, 0,
	172, 173, 175, 531, 174, 505, 0, 176, 0, 177,
	178, 0, 236, 532, 533, 0, 0, 179, 506, 507,
	479, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	499, 0, 187, 188, 189, 241, 534, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 453, 454,
	0, 0, 0, 0, 455, 0, 0, 462, 1097, 485,
	474, 475, 472, 473, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 858, 1094, 462,
	485, 474, 475, 472, 473, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 451, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 101, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 1459, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 485, 474, 475, 472,
	473, 461, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 86, 87, 462, 88, 0, 0, 0, 0, 501,
	467, 0, 0, 0, 89, 90, 196, 515, 198, 516,
	91, 517, 518, 0, 92, 202, 203, 93, 482, 500,
	519, 520, 206, 0, 511, 0, 493, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 494, 496, 0, 495, 497, 102, 103, 104, 105,
	521, 106, 522, 523, 555, 107, 0, 108, 0, 0,
	0, 514, 110, 0, 111, 0, 0, 0, 466, 112,
	113, 502, 480, 0, 0, 114, 115, 524, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 512, 0, 215,
	0, 119, 120, 508, 510, 364, 0, 123, 0, 121,
	0, 363, 122, 525, 526, 527, 0, 492, 0, 365,
	124, 366, 125, 126, 0, 0, 513, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 456, 138, 481, 509,
	140, 528, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 503, 145, 146, 147, 0, 504,
	148, 228, 149, 0, 150, 151, 152, 529, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	470, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	498, 168, 169, 373, 170, 530, 233, 171, 0, 172,
	173, 175, 531, 174, 505, 0, 176, 0, 177, 178,
	0, 236, 532, 533, 0, 0, 179, 506, 507, 479,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 499,
	0, 187, 188, 189, 241, 534, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 457, 0, 0, 485,
	474, 475, 472, 473, 461, 0, 0, 453, 454, 0,
	0, 0, 0, 455, 86, 87, 462, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 1145, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 0, 0, 462,
	485, 474, 475, 472, 473, 461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 793, 88, 0,
	0, 0, 0, 501, 467, 0, 0, 0, 89, 90,
	196, 515, 198, 516, 91, 517, 518, 0, 92, 202,
	203, 93, 482, 500, 519, 520, 206, 0, 511, 0,
	493, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 494, 496, 0, 495, 497,
	102, 103, 104, 105, 521, 106, 522, 523, 0, 107,
	0, 108, 0, 0, 0, 514, 110, 0, 111, 0,
	0, 0, 466, 112, 113, 502, 480, 0, 0, 114,
	115, 524, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 512, 0, 215, 0, 119, 120, 508, 510, 364,
	0, 123, 0, 121, 0, 363, 122, 525, 526, 527,
	0, 492, 0, 365, 124, 366, 125, 126, 0, 0,
	513, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	456, 138, 481, 509, 140, 528, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 370, 144, 371, 503, 145,
	146, 147, 0, 504, 148, 228, 149, 0, 150, 151,
	152, 529, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 470, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 498, 168, 169, 373, 170, 530,
	233, 171, 0, 172, 173, 175, 531, 174, 505, 0,
	176, 0, 177, 178, 0, 236, 532, 533, 0, 0,
	179, 506, 507, 479, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 499, 0, 187, 188, 189, 241, 534,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	457, 0, 0, 485, 474, 475, 472, 473, 461, 0,
	0, 453, 454, 0, 0, 0, 0, 455, 86, 87,
	462, 88, 0, 0, 0, 0, 501, 467, 0, 0,
	0, 89, 90, 196, 515, 198, 516, 91, 517, 518,
	0, 92, 202, 203, 93, 482, 500, 519, 520, 206,
	0, 511, 0, 493, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 361, 100, 1801, 0, 494, 496,
	0, 495, 497, 102, 103, 104, 105, 521, 106, 522,
	523, 0, 107, 0, 108, 0, 0, 0, 514, 110,
	0, 111, 0, 0, 0, 466, 112, 113, 502, 480,
	0, 0, 114, 115, 524, 0, 116, 0, 117, 0,
	0, 362, 0, 118, 512, 0, 215, 0, 119, 120,
	508, 510, 364, 0, 123, 0, 121, 0, 363, 122,
	525, 526, 527, 0, 492, 0, 365, 124, 366, 125,
	126, 0, 0, 513, 367, 127, 368, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 369, 135,
	136, 139, 137, 456, 138, 481, 509, 140, 528, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 370, 144,
	371, 503, 145, 146, 147, 0, 504, 148, 228, 149,
	0, 150, 151, 152, 529, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 372, 160, 161, 470, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 498, 168, 169,
	373, 170, 530, 233, 171, 0, 172, 173, 175, 531,
	174, 505, 0, 176, 0, 177, 178, 0, 236, 532,
	533, 0, 0, 179, 506, 507, 479, 180, 181, 1800,
	183, 0, 0, 184, 185, 186, 499, 0, 187, 188,
	189, 241, 534, 0, 190, 0, 0, 0, 0, 191,
	192, 193, 194, 457, 0, 0, 485, 474, 475, 472,
	473, 461, 0, 0, 453, 454, 0, 0, 0, 0,
	455, 86, 87, 462, 88, 0, 0, 0, 0, 501,
	467, 0, 0, 0, 89, 90, 1799, 515, 198, 516,
	91, 517, 518, 0, 92, 202, 203, 93, 482, 500,
	519, 520, 206, 0, 511, 0, 493, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 1801,
	0, 494, 496, 0, 495, 497, 102, 103, 104, 105,
	521, 106, 522, 523, 0, 107, 0, 108, 0, 0,
	0, 514, 110, 0, 111, 0, 0, 0, 466, 112,
	113, 502, 480, 0, 0, 114, 115, 524, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 512, 0, 215,
	0, 119, 120, 508, 510, 364, 0, 123, 0, 121,
	0, 363, 122, 525, 526, 527, 0, 492, 0, 365,
	124, 366, 125, 126, 0, 0, 513, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 456, 138, 481, 509,
	140, 528, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 503, 145, 146, 147, 0, 504,
	148, 228, 149, 0, 150, 151, 152, 529, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	470, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	498, 168, 169, 373, 170, 530, 233, 171, 0, 172,
	173, 175, 531, 174, 505, 0, 176, 0, 177, 178,
	0, 236, 532, 533, 0, 0, 179, 506, 507, 479,
	180, 181, 1800, 183, 0, 0, 184, 185, 186, 499,
	0, 187, 188, 189, 241, 534, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 457, 0, 0, 485,
	474, 475, 472, 473, 461, 0, 0, 453, 454, 0,
	0, 0, 0, 455, 86, 87, 462, 88, 0, 0,
	0, 0, 501, 467, 0, 0, 0, 89, 90, 196,
	515, 198, 516, 91, 517, 518, 0, 92, 202, 203,
	93, 482, 500, 519, 520, 206, 0, 511, 0, 493,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 494, 496, 0, 495, 497, 102,
	103, 104, 105, 521, 106, 522, 523, 0, 107, 0,
	108, 0, 0, 0, 514, 110, 0, 111, 0, 0,
	0, 466, 112, 113, 502, 480, 0, 0, 114, 115,
	524, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	512, 0, 215, 0, 119, 120, 508, 510, 364, 0,
	123, 0, 121, 0, 363, 122, 525, 526, 527, 0,
	492, 0, 365, 124, 366, 125, 126, 0, 0, 513,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 456,
	138, 481, 509, 140, 528, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 503, 145, 146,
	147, 0, 504, 148, 228, 149, 0, 150, 151, 152,
	529, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 470, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 498, 168, 169, 373, 170, 530, 233,
	171, 0, 172, 173, 175, 531, 174, 505, 0, 176,
	0, 177, 178, 0, 236, 532, 533, 0, 0, 179,
	506, 507, 479, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 499, 0, 187, 188, 189, 241, 534, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 457,
	0, 0, 485, 474, 475, 472, 473, 461, 0, 0,
	453, 454, 0, 0, 0, 0, 455, 86, 87, 462,
	88, 0, 0, 0, 0, 501, 467, 0, 0, 0,
	89, 90, 196, 515, 198, 516, 91, 517, 518, 0,
	92, 202, 203, 93, 482, 500, 519, 520, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 521, 106, 522, 523,
	0, 107, 0, 108, 0, 0, 0, 514, 110, 0,
	111, 0, 0, 0, 466, 112, 113, 502, 480, 0,
	0, 114, 115, 524, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 525,
	526, 527, 0, 492, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 481, 509, 140, 528, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 529, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 1135, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 530, 233, 171, 0, 172, 173, 175, 531, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 532, 533,
	0, 0, 179, 506, 507, 479, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 534, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 485, 474, 475, 472, 473, 461, 0, 0,
	0, 0, 0, 1131, 1132, 0, 0, 86, 87, 1133,
	88, 0, 1134, 0, 0, 501, 467, 0, 0, 0,
	89, 90, 0, 515, 198, 516, 91, 517, 518, 0,
	92, 202, 203, 93, 482, 500, 519, 520, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 1801, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 521, 106, 522, 523,
	0, 107, 0, 108, 0, 0, 0, 514, 110, 0,
	111, 0, 0, 0, 466, 112, 113, 502, 480, 0,
	0, 114, 115, 524, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 0, 0, 123, 0, 121, 0, 363, 122, 525,
	526, 527, 0, 492, 0, 0, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 456, 138, 481, 509, 140, 528, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 529, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 470, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 0,
	170, 530, 233, 171, 0, 172, 173, 175, 531, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 532, 533,
	0, 0, 179, 506, 507, 479, 180, 181, 1800, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 534, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 453, 454, 0, 0, 86, 87, 455,
	88, 0, 462, 0, 0, 501, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 500, 204, 205, 206, 0,
	511, 0, 493, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 494, 496, 0,
	495, 497, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 502, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 512, 0, 215, 0, 119, 120, 508,
	510, 364, 0, 123, 0, 121, 0, 363, 122, 218,
	219, 220, 0, 221, 0, 365, 124, 366, 125, 126,
	0, 0, 513, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 0, 138, 0, 509, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	503, 145, 146, 147, 0, 504, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 498, 168, 169, 373,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	505, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 506, 507, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 499, 0, 187, 188, 189,
	241, 242, 0, 190, 0, 355, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 0, 0, 195, 0,
	0, 0, 1570, 89, 90, 196, 197, 198, 199, 91,
	200, 201, 0, 92, 202, 203, 93, 0, 0, 204,
	205, 206, 0, 207, 0, 360, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	0, 0, 0, 0, 0, 102, 103, 104, 105, 208,
	106, 209, 210, 0, 107, 0, 108, 0, 0, 0,
	109, 110, 0, 111, 0, 0, 0, 211, 112, 113,
	212, 0, 0, 0, 114, 115, 213, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 214, 0, 215, 0,
	119, 120, 216, 217, 364, 0, 123, 0, 121, 0,
	363, 122, 218, 219, 220, 0, 221, 0, 365, 124,
	366, 125, 126, 0, 0, 222, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 0, 138, 0, 223, 140,
	224, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 226, 145, 146, 147, 0, 227, 148,
	228, 149, 0, 150, 151, 152, 229, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 230,
	162, 0, 163, 164, 165, 56, 231, 166, 167, 0,
	168, 169, 373, 170, 232, 233, 171, 0, 172, 173,
	175, 234, 174, 235, 0, 176, 58, 177, 178, 0,
	236, 237, 238, 0, 0, 179, 239, 240, 0, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 0, 0,
	187, 188, 189, 359, 242, 0, 190, 0, 0, 0,
	54, 191, 192, 193, 194, 0, 55, 0, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 53, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 668, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 666,
	661, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 651, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 355, 664,
	0, 665, 660, 655, 0, 0, 0, 0, 0, 666,
	661, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 360, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 657, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 364, 0, 123,
	0, 121, 0, 363, 122, 218, 219, 220, 0, 221,
	0, 365, 124, 366, 125, 126, 0, 0, 222, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 658, 0, 0,
	0, 143, 225, 370, 144, 371, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 373, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 656, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 83, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 666,
	661, 195, 0, 0, 0, 0, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 56, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 58,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 359, 242, 0, 190,
	0, 83, 0, 54, 191, 192, 193, 194, 0, 55,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 1036, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 56, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 58, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 359,
	242, 0, 190, 0, 83, 0, 54, 191, 192, 193,
	194, 0, 55, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 1256,
	0, 53, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 0, 83, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 195, 0, 0, 0, 443, 89, 90, 196, 197,
	198, 199, 91, 200, 201, 0, 92, 202, 203, 93,
	0, 0, 204, 205, 206, 0, 207, 0, 0, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 0,
	100, 101, 0, 0, 0, 0, 0, 0, 102, 103,
	104, 105, 208, 106, 209, 210, 0, 107, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	211, 112, 113, 212, 0, 0, 0, 114, 115, 213,
	0, 116, 0, 117, 0, 0, 0, 0, 118, 214,
	0, 215, 0, 119, 120, 216, 217, 0, 0, 123,
	0, 121, 0, 0, 122, 218, 219, 220, 0, 221,
	0, 0, 124, 0, 125, 126, 0, 0, 222, 0,
	127, 0, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 0, 135, 136, 139, 137, 0, 138,
	0, 223, 140, 224, 141, 142, 0, 0, 328, 0,
	0, 143, 225, 0, 144, 0, 226, 145, 146, 147,
	0, 227, 148, 228, 149, 0, 150, 151, 152, 229,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 0,
	160, 161, 230, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 0, 168, 169, 0, 170, 232, 233, 171,
	0, 172, 173, 175, 234, 174, 235, 0, 176, 0,
	177, 178, 0, 236, 237, 238, 0, 0, 179, 239,
	240, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 0, 187, 188, 189, 241, 242, 0, 190,
	0, 83, 0, 0, 191, 192, 193, 194, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 195, 0, 0, 0, 1036, 89,
	90, 196, 197, 198, 199, 91, 200, 201, 0, 92,
	202, 203, 93, 0, 0, 204, 205, 206, 0, 207,
	0, 0, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 102, 103, 104, 105, 208, 106, 209, 210, 0,
	107, 0, 108, 0, 0, 0, 109, 110, 0, 111,
	0, 0, 0, 211, 112, 113, 212, 0, 0, 0,
	114, 115, 213, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 214, 0, 215, 0, 119, 120, 216, 217,
	0, 0, 123, 0, 121, 0, 0, 122, 218, 219,
	220, 0, 221, 0, 0, 124, 0, 125, 126, 0,
	0, 222, 0, 127, 0, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 0, 135, 136, 139,
	137, 0, 138, 0, 223, 140, 224, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 0, 144, 0, 226,
	145, 146, 147, 0, 227, 148, 228, 149, 0, 150,
	151, 152, 229, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 0, 160, 161, 230, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 0, 168, 169, 0, 170,
	232, 233, 171, 0, 172, 173, 175, 234, 174, 235,
	0, 176, 0, 177, 178, 0, 236, 237, 238, 0,
	0, 179, 239, 240, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 0, 187, 188, 189, 241,
	242, 0, 190, 0, 83, 0, 0, 191, 192, 193,
	194, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 947, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 83, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 1469, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 0, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 0, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 0, 0, 123, 0,
	121, 0, 0, 122, 218, 219, 220, 0, 221, 0,
	0, 124, 0, 125, 126, 0, 0, 222, 0, 127,
	0, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 0, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 0, 144, 0, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 0, 160,
	161, 230, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 0, 168, 169, 0, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 0, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 241, 242, 0, 190, 0,
	83, 0, 0, 191, 192, 193, 194, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 545, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 635, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	0, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 634, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 83, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 638, 0, 195, 0, 0, 0, 0,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 104, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 0, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 355, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 638, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 360, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 364, 0, 123, 0, 121, 0, 363,
	122, 218, 219, 220, 0, 221, 0, 365, 124, 366,
	125, 126, 0, 0, 222, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 373, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 920, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 918, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 1013, 0, 114, 115, 213, 0, 116, 0, 117,
	923, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 1011, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 922, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 1012, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 920, 207, 0, 0, 915, 94, 95, 96, 0,
	97, 918, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	923, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 914, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 922, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 921, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 1256,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 587, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 380, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 334, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 328, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 246, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	245, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1181, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1179, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 1170, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 783, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 260, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 574,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 0,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 428, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 425, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	386, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 350, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 347, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 345, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 337, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 317, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 263,
	0, 0, 129, 0, 130, 131, 132, 133, 271, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 265, 162,
	0, 163, 164, 165, 0, 231, 166, 264, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 270,
	237, 238, 0, 0, 266, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 83, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 0, 0, 227, 148, 228,
	149, 0, 150, 0, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 0,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 810, 0, 0,
	0, 0, 811, 825, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 810, 0, 0, 0, 0, 831, 825,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	816, 0, 0, 0, 831, 0, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 810, 0, 0, 0, 0, 0, 825, 0,
	0, 833, 0, 835, 843, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 0, 0, 826, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	833, 0, 835, 843, 827, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	827, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 836, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 827,
	0, 0, 1352, 0, 834, 0, 0, 822, 823, 824,
	836, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 0, 0, 0, 1351, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 1305, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 809, 1749, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	0, 0, 810, 0, 0, 0, 0, 831, 825, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 835, 843, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 841, 0, 816, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	0, 0, 826, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 833,
	0, 0, 0, 827, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 836, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 1747, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 1728, 0, 0, 0, 0, 0,
	1312, 0, 1329, 1330, 1331, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 809, 1703, 828, 829,
	830, 838, 839, 840, 0, 0, 0, 0, 0, 0,
	0, 831, 0, 0, 0, 0, 0, 0, 811, 1326,
	842, 0, 809, 0, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 810,
	0, 0, 0, 0, 811, 825, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 810, 1317, 0, 0, 0,
	831, 825, 0, 0, 0, 0, 0, 811, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 1332, 810, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 835,
	843, 0, 0, 1327, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 0, 835, 843, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 832, 0, 0, 0, 826, 0, 0, 835, 843,
	1328, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 0, 0, 0, 832, 0, 0,
	0, 0, 833, 0, 0, 0, 827, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 1323, 1324, 1325,
	0, 1322, 1319, 1320, 1321, 1313, 1314, 1315, 1316, 1318,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	834, 0, 0, 822, 823, 824, 836, 821, 818, 819,
	820, 812, 813, 814, 815, 817, 0, 837, 0, 0,
	0, 1698, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 1694, 0, 0,
	0, 0, 0, 1312, 0, 1329, 1330, 1331, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 809,
	1630, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 811, 1326, 842, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	831, 0, 810, 0, 0, 0, 0, 811, 825, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	828, 829, 830, 838, 839, 840, 0, 0, 810, 1317,
	0, 0, 0, 831, 825, 0, 0, 0, 0, 0,
	811, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 810, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 835, 843, 0, 0, 1327, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 835, 843,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 841, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 832, 0, 0, 0, 826, 0,
	0, 835, 843, 1328, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 833, 0, 0, 0, 827,
	0, 826, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	1323, 1324, 1325, 0, 1322, 1319, 1320, 1321, 1313, 1314,
	1315, 1316, 1318, 0, 0, 0, 0, 0, 827, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 836,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 1629, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	1538, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 0, 809, 1472, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 809, 0,
	828, 829, 830, 838, 839, 840, 0, 0, 0, 0,
	0, 0, 0, 831, 0, 810, 0, 0, 0, 0,
	811, 825, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 828, 829, 830, 838, 839, 840, 0,
	0, 810, 0, 0, 0, 0, 831, 825, 0, 0,
	0, 0, 0, 811, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 816, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 835, 843, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 841,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 835, 843, 0, 0, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 841, 0, 816, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 832, 0, 0,
	0, 826, 0, 0, 835, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 841, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 833, 0,
	0, 0, 827, 0, 826, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 827, 0, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 836, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 1456, 0, 0,
	0, 0, 834, 0, 0, 822, 823, 824, 0, 821,
	818, 819, 820, 812, 813, 814, 815, 817, 0, 837,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 822, 823,
	824, 0, 821, 818, 819, 820, 812, 813, 814, 815,
	817, 0, 837, 809, 1520, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 0,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 810, 0, 0, 0,
	831, 0, 825, 0, 0, 0, 0, 811, 0, 842,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 809, 825, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 831, 816,
	1821, 0, 0, 1024, 0, 811, 0, 842, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 0, 810, 0, 0, 0,
	841, 816, 825, 1343, 0, 0, 1342, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 835, 843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 841, 0, 0, 0, 0, 0, 832, 0,
	0, 0, 833, 0, 0, 0, 0, 0, 826, 816,
	0, 1820, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 835, 843, 0, 0,
	832, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	841, 0, 0, 0, 836, 0, 0, 0, 0, 0,
	833, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 827, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 836, 0, 0, 0, 0, 834,
	0, 0, 822, 823, 824, 0, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 845, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 844, 0, 0, 811, 834, 842, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 810, 0, 0,
	0, 0, 809, 825, 828, 829, 830, 838, 839, 840,
	0, 0, 0, 0, 0, 0, 0, 831, 0, 0,
	0, 0, 0, 0, 811, 0, 842, 0, 0, 0,
	0, 0, 0, 0, 809, 0, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 810, 0, 0, 0, 831,
	816, 825, 0, 0, 0, 0, 811, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 0,
	0, 841, 0, 825, 0, 0, 0, 0, 0, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 816, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 843, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 841,
	816, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 826, 0, 835, 843, 0,
	0, 0, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 841, 0, 0, 0, 836, 0, 832, 312, 0,
	0, 833, 0, 0, 0, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 827, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 0, 834, 0, 0, 822,
	823, 824, 0, 821, 818, 819, 820, 812, 813, 814,
	815, 817, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 0, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 809, 837, 828, 829, 830, 838,
	839, 840, 0, 0, 0, 0, 0, 0, 0, 831,
	0, 0, 0, 0, 0, 0, 811, 0, 842, 0,
	809, 0, 828, 829, 830, 838, 839, 840, 0, 0,
	0, 0, 0, 0, 0, 831, 0, 810, 0, 1344,
	0, 0, 811, 825, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 810, 0, 0, 0, 0, 831, 825,
	0, 0, 0, 0, 0, 811, 0, 842, 0, 809,
	0, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	816, 0, 0, 0, 831, 1349, 810, 0, 1304, 0,
	0, 811, 825, 842, 0, 0, 0, 835, 843, 0,
	0, 0, 0, 0, 0, 0, 816, 0, 0, 0,
	0, 841, 810, 0, 0, 0, 0, 0, 825, 0,
	0, 833, 0, 835, 843, 0, 0, 826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 841, 0, 816,
	0, 0, 0, 0, 0, 0, 0, 833, 0, 832,
	0, 0, 0, 826, 0, 0, 835, 843, 0, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	841, 0, 0, 0, 0, 832, 0, 0, 0, 0,
	833, 0, 835, 843, 827, 0, 826, 0, 0, 0,
	0, 0, 0, 0, 0, 836, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 832, 0,
	827, 0, 826, 0, 0, 0, 0, 0, 0, 1310,
	0, 836, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 834, 0,
	0, 822, 823, 824, 836, 821, 818, 819, 820, 812,
	813, 814, 815, 817, 0, 837, 0, 0, 0, 827,
	0, 0, 0, 0, 834, 0, 0, 822, 823, 824,
	836, 821, 818, 819, 820, 812, 813, 814, 815, 817,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 834, 0, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 809,
	837, 828, 829, 830, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 811, 0, 842, 0, 809, 0, 828, 829, 830,
	838, 839, 840, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 810, 0, 0, 0, 0, 811, 825, 842,
	0, 0, 0, 809, 0, 828, 829, 830, 838, 839,
	840, 0, 0, 0, 0, 0, 0, 0, 810, 0,
	0, 0, 0, 0, 825, 811, 0, 842, 0, 809,
	0, 0, 0, 0, 838, 839, 840, 0, 0, 0,
	0, 0, 0, 0, 0, 816, 810, 0, 0, 0,
	0, 811, 825, 842, 0, 0, 0, 0, 0, 0,
	0, 0, 835, 843, 0, 0, 0, 0, 0, 0,
	0, 816, 810, 0, 0, 0, 841, 0, 825, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 835, 843,
	0, 0, 826, 0, 0, 0, 0, 0, 0, 816,
	0, 0, 841, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 832, 0, 835, 843, 826, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	833, 0, 835, 843, 0, 0, 826, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 826, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 608, 603, 625, 597, 616, 615, 0, 0, 599,
	598, 0, 0, 827, 627, 626, 0, 0, 0, 0,
	0, 0, 0, 834, 836, 0, 822, 823, 824, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 827,
	837, 0, 0, 0, 621, 0, 613, 612, 0, 834,
	836, 0, 822, 823, 824, 611, 821, 818, 819, 820,
	812, 813, 814, 815, 817, 0, 837, 0, 0, 0,
	0, 610, 0, 0, 0, 0, 0, 834, 0, 0,
	822, 823, 824, 0, 821, 818, 819, 820, 812, 813,
	814, 815, 817, 0, 837, 0, 0, 604, 605, 606,
	0, 624, 0, 834, 0, 0, 0, 0, 0, 0,
	821, 818, 819, 820, 812, 813, 814, 815, 817, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 614, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 609, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 0, 0, 0, 0, 0, 0, 0, 607,
	602, 0, 0, 0, 0, 0, 629, 0, 0, 0,
	0, 0, 0, 600, 0, 0, 622, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 628,
}
var sqlPact = [...]int{

	2278, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 971, -1000, -1000, -1000, 694, 962,
	563, 15570, 15570, 15310, 1079, 1079, 16870, -1000, -1000, 19730,
	-1000, 2599, 520, 530, 520, 520, 517, 16870, 572, 772,
	138, -1000, 766, -2, 19470, 15570, 1308, 34, 14270, 375,
	2278, 15050, 15570, 19210, 1126, 1035, 1034, 14270, 18950, 18690,
	18430, -1000, 9791, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 570, 386, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 385, -1000, 14790, -1000, 868, -1000, 33,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 866, -1000,
	15570, -1000, -1000, 18170, 17910, 380, 725, -1000, -1000, 586,
	464, 1326, -1000, 47, -1000, -1000, 1122, -1000, 863, 1116,
	1115, 1114, 1110, 1108, 1107, 463, 763, -1000, 569, 725,
	-1000, 725, -1000, -1000, -1000, 555, 16870, -1000, 14270, -1000,
	17650, 1047, 17390, -1000, 766, -1000, -1000, -1000, 905, 1307,
	1307, 1307, 1314, 158, 157, 138, 22, 15570, -1000, 377,
	22, 6786, 6786, -1000, -1000, 375, -1000, 405, 12443, 41,
	-1000, 7332, -1000, 786, 1218, 656, 655, 1211, -124, 14270,
	15570, 15570, 596, 17130, -1000, 1204, 120, 1201, -1000, 119,
	1199, -1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, 375,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14530, 1334, 23256, -1000, 8715, -1000,
	-1000, 12706, 944, 12706, -1000, -1000, 1333, -1000, 8715, -1000,
	32, 30, 994, 1048, 10334, 10064, 1260, 874, -1000, -1000,
	-1000, 43, 4238, 15570, 1138, 12706, 15570, 15570, 15570, 15570,
	15570, 15570, -1000, 963, -1000, 15570, -1000, 29, 27, -1000,
	16870, -1000, 132, -1000, 374, 932, 16610, 1223, 926, -1000,
	905, -1000, 870, 957, 7896, 8715, 138, -1000, -1000, 138,
	138, 8715, -1000, -1000, 15570, 22, 1332, 15570, 80, -1000,
	22314, -1000, -1000, 8715, 8715, 8715, 8715, 8715, 709, -1000,
	-1000, -1000, 5073, -1000, -1000, 41, 373, 339, -1000, -1000,
	372, 41, -1000, -1000, -1000, -1000, 369, 1420, 360, -1000,
	-1000, -1000, 8715, 470, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1131, 368, 364, -1000, -1000, -1000, -1000,
	363, 362, 361, 358, 357, 356, 354, 352, 346, 340,
	338, 336, 335, 326, 675, -1000, 484, -1000, -1000, 484,
	484, -1000, 312, 312, 316, -1000, -1000, -1000, 312, -1000,
	-1000, -1000, 456, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	323, 80, -1000, -1000, -1000, 15570, 41, -1000, -1000, -1000,
	8715, 3968, 7, -1000, 23039, -1000, -11, 785, -1000, 13750,
	1284, 1277, 1272, 14270, 554, 553, 15570, 15570, 474, 76,
	1321, 76, 11917, -1000, 15570, 15570, -1000, 15570, -1000, -1000,
	15570, -1000, 15570, 15570, 180, 13230, 740, 1198, -2, -4,
	-1000, 1336, -1000, -1000, -1000, -1000, 95, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	316, 675, 312, 312, 312, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 456, -1000, -1000, 484, 484, 484, -1000, -1000,
	-14, 23039, 551, 2, 12968, 15570, -1000, 23, -1000, -1000,
	1106, 519, -16, 670, 1028, 851, -1000, -1000, -1000, -1000,
	17, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1366, -1000, -1000, -1000, -1000, 1406, 17, -1000, -1000,
	-1000, -1000, -1000, 1419, -1000, -1000, -1000, 4238, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15570, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 670, 1028, -1000, -1000, 14270,
	13490, 1193, 848, 919, -1000, -1000, 444, 1189, -1000, -1000,
	-1000, -1000, 23039, -1000, 23039, 618, 1038, -1000, 1038, 16,
	-1000, 22073, -1000, 310, -23, -1000, 474, 6786, 11654, 23256,
	15570, 564, 8715, 8715, 8715, 8715, 8715, 8715, 8715, 8715,
	8715, 8715, 8715, 8715, 8715, 8715, 8715, 8715, 8715, 8715,
	8715, 8715, 8715, 8715, 1179, 8715, 549, 8715, 8715, 8715,
	8715, 1065, 800, 297, 4238, -1000, 707, 707, 707, 23065,
	23065, 254, 21, 21678, 6, 41, -1000, -1000, 6495, 6203,
	41, 4508, -1000, 938, 1405, 477, 23039, 1147, 1077, 309,
	156, 155, 8715, 8715, 788, 8715, 8988, 8715, 8715, 5346,
	8715, 8715, 8715, 8715, 8715, 8715, -1000, 305, -1000, -1000,
	-1000, -1000, 1403, -1000, -1000, 1398, -1000, 562, 561, 1396,
	474, 152, -1000, 2250, -1000, -1000, 7332, -1000, 740, 15570,
	15570, 15570, -1000, -1000, 917, 16350, -1000, 23256, 15570, -1000,
	304, 300, 1014, 1005, 15570, 15570, 16090, 15830, 15570, 731,
	15570, 15570, 653, -1000, 636, 8715, 677, -1000, 11127, 488,
	15570, 650, 70, -1000, -1000, -1000, 441, 15570, -1000, -1000,
	-1000, 120, -1000, 119, -1000, -1000, 14270, -1000, -1000, -1000,
	-1000, -1000, -1000, 23256, 397, 393, -1000, 1377, 548, -1000,
	547, 544, 543, -1000, 298, -1000, 8715, 15570, 12968, 2,
	-3, -1000, -1000, 15570, 1028, -1000, -1000, -1000, -1000, 730,
	-1000, 666, -1000, 10604, -1000, -1000, -1000, 938, -1000, -12,
	-1000, -1000, -1000, -1000, 151, -5, -1000, -1000, -1000, -1000,
	-1000, 15570, 318, 15570, 15570, 15570, 1178, 1417, 15570, -1000,
	-1000, -1000, 8715, -1000, -1000, -1000, -2, 15570, -1000, 1075,
	-1000, -30, 1365, -138, 14010, -1000, 10864, -1000, -1000, 462,
	633, 633, 663, 663, 663, 663, 337, 337, 1992, 182,
	23119, 23119, 23119, 681, 253, 253, 23119, 23119, 23119, 23065,
	3296, 230, 8715, 8715, 542, 787, 297, 230, 8715, 1362,
	230, 230, 230, -1000, 733, -1000, -1000, -1000, 1104, 296,
	8988, 8988, -1000, -1000, -1000, 5073, -1000, -1000, 293, 8715,
	-1000, 8715, -22, -45, -1000, -1000, -29, -1000, -1000, 0,
	8715, 8715, 8715, 146, -1000, 144, 674, -1000, 8715, 712,
	285, 280, 8715, -1000, -1000, 22759, 20313, 143, 1101, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 141, 22733, 140, 3245,
	-1000, 8988, 8988, 8988, 5073, 276, 127, 22025, -51, 22700,
	7605, 7605, 7605, 125, 22674, 8715, -51, 20280, 20254, 3127,
	-40, -46, -53, 1375, -57, 124, 459, 453, 118, 1075,
	-1000, -1000, 8715, -1000, -1000, -1000, 541, 540, 1177, -1000,
	906, -1000, 1052, 8715, 15570, 268, 265, 727, -1000, 1169,
	804, 1166, 804, -1000, -11, 768, -1000, -1000, 536, -1000,
	6786, 23039, -1000, 644, 1280, -59, -1000, -1000, -1000, 6786,
	474, 11917, 11654, 7332, -61, -1000, -1000, 740, -1000, 529,
	1373, 110, 913, 910, 661, 606, 1372, 23039, -12, -1000,
	-12, -1000, -1000, -1000, -1000, -1000, -1000, 15570, 1051, 13490,
	240, 15570, 228, 215, 204, 15570, -1000, 1223, -1000, 107,
	-1000, 1070, 1311, 11654, 1024, 1017, 11654, 1196, 728, 728,
	728, -1000, 14010, 3686, -1000, -1000, 15570, 198, 11390, 106,
	1365, 8715, 230, 230, 8715, 8988, 8988, -1000, 230, -1000,
	-1000, -1000, -1000, 1090, 197, 8715, 23256, 3197, 2842, -71,
	5911, -18, 21652, -1000, -1000, 339, -1000, 98, 7059, -1000,
	22362, 9, 9, -1000, 1416, 1182, -1000, 8715, 22394, -1000,
	12180, 475, 738, 21368, 23256, 23256, -1000, 8715, -1000, 1087,
	8715, -1000, 23256, 8988, 8988, 8988, 8988, 8988, 8988, 8988,
	8988, 8988, 8988, 8988, 8988, 8988, 8988, 8988, 8988, 8988,
	8988, 8988, 977, 8988, 1361, 1361, 1361, -24, 5619, -1000,
	1097, 1087, 8715, 8715, 23256, 96, 92, 91, -1000, 8715,
	-51, 8715, 8715, 8715, -1000, -1000, -1000, 90, -1000, 1371,
	-1000, -1000, -1000, -1000, 1070, 21711, 15570, 15570, 15570, 1165,
	1998, -1000, 21335, -72, 15570, 15570, -1000, 989, 997, 509,
	15570, -1000, 15570, -1000, 15570, 15570, 15570, 15570, -39, 6786,
	226, -2, 15570, -39, 636, -1000, -30, -1000, 440, -1000,
	231, 121, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	85, -1000, -1000, 1062, -1000, 9528, 195, 15570, 13490, 9528,
	820, -1000, -1000, 461, 8715, 8715, 1365, 11654, 11654, 1278,
	1007, 11654, -1000, -1000, -1000, -1000, 449, -1000, 1006, 194,
	15570, 14010, 680, 230, 2621, 218, 8715, 23256, 23093, -73,
	8715, 8715, -1000, -77, -1000, 8715, -1000, -1000, 1415, 8715,
	82, 81, 79, -1000, -1000, 23039, 8715, -1000, -1000, 19990,
	8715, 77, -1000, 68, 66, 23039, 1097, 23039, -1000, 708,
	708, 1361, 1361, 1361, 1361, 649, 649, 688, 244, 846,
	846, 846, 896, 483, 483, 846, 846, 846, 1084, 968,
	193, 20940, 8715, -78, -1000, -1000, -1000, 23039, 23039, 63,
	-1000, -1000, -1000, -51, 3079, 21309, 21025, -1000, 62, 461,
	-1000, -1000, -1000, -1000, 15570, -1000, 15570, -1000, 15570, 15570,
	1095, 902, -1000, -1000, 1002, 190, 8988, 15570, -1000, 780,
	-79, -85, 888, -1000, 878, 8715, -1000, 23256, 804, 804,
	-1000, 534, 531, -1000, -39, 1230, 15570, 1269, -1000, -1000,
	-1000, 188, -1000, -1000, -1000, 703, -89, -1000, 257, 1289,
	8715, -1000, -1000, 187, 9528, -90, 59, -91, 15570, -1000,
	15570, 23039, -51, -1000, 1278, -1000, 186, 8715, 11654, -1000,
	-1000, 873, -149, -1000, 415, -1000, 15570, -99, -1000, 8715,
	8715, 23093, -100, -1000, 230, 230, -1000, 20992, -1000, 22362,
	-1000, -1000, -1000, 23039, 692, -1000, 20966, -1000, -1000, -1000,
	-1000, 8988, 1083, 185, 23256, 20682, -1000, -1000, 8715, -1000,
	-1000, -1000, -1000, -1000, 1156, -1000, -1000, 15570, 898, -1000,
	-1000, 8715, 20940, 184, 1051, 183, -1000, -1000, -1000, 660,
	-1000, -1000, 23039, 1293, -1000, -1000, 15570, 15570, 589, -105,
	15570, -1000, -1000, 4800, 15570, 780, 9528, 1291, 41, 15570,
	1291, 20649, 4508, -109, -1000, 1051, 780, 167, -41, -1000,
	1320, -1000, 15570, 23039, -1000, 578, 1006, -1000, 4238, -115,
	-1000, 230, 230, -1000, -1000, 58, 738, 1302, -1000, 21283,
	8988, 23256, -116, -1000, 20623, -1000, -1000, 1164, 20339, 950,
	15570, -1000, 15570, 15570, 494, 15570, -1000, -1000, 594, -1000,
	474, -1000, 166, 1051, -1000, -1000, -1000, -1000, 1289, 0,
	780, -1000, 1051, 9528, 15570, 165, -126, 560, -1000, -1000,
	-1000, -1000, 642, 8715, 21283, -127, -1000, -1000, 1151, -1000,
	750, 891, 54, -128, 162, -1000, 8715, -1000, 11917, -1000,
	15570, -1000, 1291, 53, 1051, -1000, -132, -1000, -1000, -1000,
	1411, 51, 8442, 8442, -51, -1000, 15570, -1000, 819, 809,
	690, -1000, -1000, -1000, -1000, -1000, 950, 15570, 23039, -114,
	-136, -1000, -1000, -1000, 780, -1000, -1000, -1000, -1000, 9258,
	759, 629, 21993, -1000, -1000, -1000, 1239, -1000, 502, 1094,
	1094, 750, -144, -1000, 804, 1051, 1340, -1000, -1000, -1000,
	-1000, -1000, -1000, 1351, -1000, -1000, 970, -1000, -1000, -1000,
	-1000, -1000, 8169, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1655, 1654, 1337, 126, 125, 1648, 1647, 1646, 99,
	124, 119, 127, 1645, 90, 1644, 1643, 1641, 98, 1640,
	1637, 1633, 75, 1632, 1631, 1630, 1627, 1626, 92, 22,
	178, 2032, 160, 1622, 1611, 1610, 10, 104, 60, 1609,
	6, 54, 93, 112, 1208, 49, 1608, 1607, 140, 29,
	15, 543, 94, 144, 136, 120, 1603, 1602, 1595, 45,
	1594, 4, 1593, 1588, 1587, 57, 18, 1586, 16, 39,
	1584, 1582, 128, 77, 1578, 100, 113, 25, 131, 9,
	1577, 58, 12, 67, 1576, 36, 1575, 38, 74, 134,
	1574, 52, 146, 66, 21, 51, 1573, 1572, 1571, 1568,
	81, 1566, 89, 72, 1565, 1564, 80, 1558, 138, 133,
	1553, 1551, 121, 1547, 1546, 1545, 767, 1544, 1541, 696,
	1535, 7, 35, 61, 3, 109, 108, 41, 1532, 19,
	1528, 1871, 593, 569, 1523, 47, 65, 82, 46, 50,
	27, 1522, 1521, 107, 1520, 1519, 1516, 1514, 1513, 83,
	1512, 79, 137, 42, 53, 97, 26, 111, 85, 135,
	143, 105, 1508, 1506, 116, 1503, 86, 1502, 1501, 724,
	115, 1499, 1498, 1497, 721, 707, 705, 173, 1496, 1495,
	649, 256, 1493, 1492, 117, 1490, 1489, 141, 147, 44,
	1488, 114, 1487, 91, 1485, 0, 30, 28, 1481, 122,
	78, 1476, 1474, 1471, 1468, 31, 2, 17, 8, 14,
	5, 24, 23, 1466, 1465, 132, 87, 1463, 145, 1462,
	1461, 43, 1460, 1458, 20, 1456, 13, 1455, 11, 1,
	1452, 139, 1438, 102, 1434, 1366, 1433, 142, 1427, 1426,
	1351, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 78, 78, 77, 77, 80, 80, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 165,
	165, 164, 13, 141, 141, 14, 14, 14, 14, 15,
	101, 101, 16, 16, 16, 16, 17, 21, 231, 231,
	231, 235, 235, 236, 236, 237, 237, 237, 237, 237,
	237, 237, 233, 233, 24, 24, 24, 24, 24, 120,
	116, 116, 118, 118, 118, 118, 43, 115, 115, 115,
	115, 117, 117, 117, 117, 188, 187, 187, 193, 193,
	193, 56, 56, 56, 56, 56, 57, 57, 57, 186,
	186, 186, 186, 194, 194, 194, 194, 194, 194, 58,
	58, 58, 192, 192, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 232, 232, 234, 234, 8, 8, 59, 59, 60,
	60, 123, 123, 123, 123, 61, 61, 122, 203, 203,
	204, 204, 204, 204, 204, 204, 205, 205, 205, 205,
	205, 205, 205, 201, 201, 202, 199, 199, 200, 200,
	200, 200, 238, 238, 121, 121, 64, 64, 208, 208,
	208, 208, 206, 206, 206, 206, 206, 209, 207, 210,
	210, 210, 210, 210, 152, 152, 152, 27, 7, 7,
	105, 105, 68, 68, 156, 156, 156, 50, 50, 36,
	36, 36, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 106, 106, 107, 107, 19, 23, 26, 26, 26,
	26, 26, 240, 240, 47, 47, 47, 47, 48, 48,
	119, 119, 119, 119, 119, 42, 6, 6, 41, 41,
	18, 18, 18, 18, 18, 53, 53, 112, 112, 112,
	114, 114, 113, 113, 113, 91, 91, 28, 74, 74,
	82, 82, 83, 83, 162, 84, 84, 22, 22, 31,
	31, 29, 29, 29, 29, 29, 29, 30, 30, 32,
	32, 32, 32, 32, 32, 32, 216, 216, 216, 218,
	218, 215, 217, 217, 239, 239, 92, 92, 92, 63,
	62, 62, 66, 66, 65, 67, 67, 155, 89, 89,
	89, 89, 108, 109, 109, 110, 110, 111, 111, 88,
	88, 138, 138, 33, 33, 72, 72, 73, 73, 129,
	129, 130, 130, 128, 128, 128, 157, 157, 157, 157,
	158, 158, 158, 158, 158, 158, 153, 153, 153, 153,
	154, 154, 163, 163, 95, 95, 95, 95, 93, 93,
	94, 94, 159, 159, 159, 159, 90, 90, 160, 160,
	160, 124, 124, 166, 166, 166, 71, 71, 71, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 168, 168, 168, 168, 170, 170, 170, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 171, 171, 178, 178, 179, 179, 180, 181,
	172, 172, 173, 173, 174, 175, 182, 182, 182, 182,
	184, 184, 176, 176, 176, 176, 176, 177, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 103, 103, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 211, 211, 211, 211, 211, 211, 211,
	213, 213, 214, 214, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	219, 219, 220, 220, 221, 221, 222, 222, 224, 225,
	225, 225, 226, 230, 230, 223, 223, 227, 227, 227,
	228, 228, 229, 229, 229, 229, 229, 143, 143, 143,
	144, 144, 145, 79, 79, 140, 140, 139, 139, 139,
	142, 142, 96, 183, 183, 183, 183, 183, 183, 183,
	97, 97, 104, 98, 98, 99, 99, 99, 99, 99,
	99, 135, 136, 100, 100, 100, 137, 137, 146, 150,
	150, 149, 148, 148, 147, 147, 127, 127, 127, 127,
	126, 125, 85, 85, 241, 241, 151, 151, 86, 86,
	87, 81, 81, 161, 161, 161, 161, 75, 75, 55,
	55, 76, 76, 51, 51, 54, 52, 52, 52, 52,
	69, 69, 70, 70, 49, 49, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 185, 185, 185,
	44, 44, 44, 45, 45, 46, 46, 190, 190, 190,
	191, 191, 191, 191, 189, 189, 189, 189, 189, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 4, 2, 3, 4, 3, 2,
	4, 2, 0, 2, 0, 7, 10, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 1, 3, 3, 0, 3, 4, 7, 3, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 2, 0, 1, 3, 3,
	1, 1, 3, 2, 4, 0, 4, 2, 1, 4,
	3, 4, 5, 4, 5, 4, 5, 2, 4, 1,
	1, 0, 5, 0, 2, 2, 2, 1, 1, 0,
	4, 2, 1, 2, 2, 4, 1, 3, 1, 2,
	3, 2, 0, 2, 5, 2, 3, 4, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 1, 1, 3, 1, 1, 1, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 3, 5, 1, 1, 1, 1, 2, 2,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -217, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-120, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-216, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -195, -197, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -235, 21, -236,
	-237, 64, 90, 113, 214, 130, 85, 255, -235, -48,
	211, -44, -116, 149, 217, 208, 244, -117, -115, -188,
	239, 158, -77, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -240,
	244, 244, -240, -240, -47, 244, 242, -48, -239, 235,
	235, -105, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -216, -218, 196, -215, -44,
	-218, -62, -63, 21, 87, 298, -159, -51, 174, -44,
	-87, 294, -3, -159, 121, -44, -54, 121, -51, 111,
	136, 136, -160, -159, -44, 121, -55, 121, -54, -78,
	121, -77, -165, -164, -191, 4, -195, -197, -196, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -141, 294, -101, 294, -44,
	21, 173, 298, 173, -44, -116, 50, -116, 294, -118,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -80, 296, 111, -232, 173, 111, 111, 111, 111,
	111, 111, 273, 138, 192, 235, -119, -42, -43, -119,
	242, -48, -90, -159, -77, 121, 126, -44, 121, -65,
	-66, -89, -108, -109, 148, 172, -92, 21, 87, -92,
	-92, 42, 295, 295, 298, -218, -70, 294, -81, -161,
	-131, 287, -133, 285, 286, 291, 164, 274, -143, -51,
	-134, 9, 294, -146, -213, -31, 96, 28, -144, -145,
	208, -44, 7, 8, 5, 6, -49, -168, -177, 247,
	100, 166, 46, -211, -212, 4, -195, -190, -169, -179,
	-173, -176, 135, 54, 69, 72, 70, 73, 218, 257,
	47, 27, 99, 182, 187, 232, 245, 246, 121, 167,
	122, 52, 115, 144, 89, 35, 37, 39, 40, 48,
	49, 78, 80, 81, 105, 131, 132, 133, 169, 195,
	223, 230, 240, 241, 263, -196, -180, -181, -174, -175,
	-182, -81, -87, 287, -51, 294, -85, -127, -126, -125,
	292, 296, -86, -151, -131, 82, -38, 199, -37, 20,
	22, 90, 260, 96, 199, 199, 96, 299, -160, -53,
	-51, -53, 219, -44, 29, 96, -40, 298, 45, 202,
	96, -40, 298, 96, 295, 298, -159, 121, 29, -140,
	-166, -167, -169, -178, -172, -176, -177, 38, 44, 43,
	237, 215, 224, 36, 131, 132, 133, 223, 35, 195,
	105, 89, 81, 80, 169, 40, 39, -180, -181, -174,
	-175, 78, 240, 241, 135, 37, 49, 48, 263, 230,
	-79, -131, -231, -76, 235, 76, -52, -44, 287, -237,
	-231, 29, -79, 298, 298, 146, -57, 152, 163, 119,
	-187, 82, -193, -186, -152, 9, 247, 100, 173, -192,
	8, 286, -185, -191, 5, 7, 285, -187, 82, 67,
	-194, 5, 4, -177, -152, 82, 149, 296, -189, 4,
	-195, -197, -196, -198, 21, 23, 24, 25, 26, 28,
	29, 30, 31, 41, 46, 47, 51, 53, 55, 61,
	64, 68, 69, 70, 71, 72, 73, 82, 84, 86,
	87, 88, 91, 93, 95, 100, 101, 102, 108, 110,
	111, 113, 116, 118, 124, 126, 128, 134, 136, 142,
	143, 148, 150, 151, 164, 166, 172, 173, 174, 175,
	176, 186, 191, 198, 203, 214, 218, 226, 233, 235,
	238, 242, 243, 247, 252, 253, 257, 258, 264, 266,
	267, 268, 269, -188, -234, 108, -231, -188, -188, -188,
	-188, -188, -44, 146, -188, 298, 298, -48, -40, 298,
	294, 164, -45, 121, -44, -41, 92, 164, -89, -109,
	-108, -110, -131, 21, -131, -133, -30, -30, -30, -67,
	-155, -131, -215, 29, -69, -44, -72, 298, 111, 10,
	53, 32, 285, 286, 287, 288, 106, 289, 282, 283,
	284, 281, 277, 278, 279, 59, 153, 210, 12, 13,
	14, 25, 175, 147, 274, 123, 221, 291, 15, 16,
	17, 137, 34, 124, 29, 4, -131, -131, -131, -131,
	-131, 181, -31, -131, -79, -85, -31, -139, 292, 294,
	-85, 294, 5, 5, 294, -147, -131, -219, 270, 108,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 189, -184, 265, -184,
	-184, -170, 294, -170, -171, 294, -170, 271, 275, 294,
	-72, -51, -127, -131, -189, 287, 298, 295, 298, 242,
	-106, 61, 55, -122, 121, 55, -199, -44, 61, -200,
	51, 253, 191, 110, -106, 61, -106, 61, 61, -159,
	242, 242, -54, -44, -124, 267, -112, -22, 294, 82,
	29, -112, -82, -83, -162, -84, -51, 294, -44, -44,
	-54, -55, -77, -78, -12, -164, 96, -14, -22, -18,
	-28, -9, 295, 298, -71, 28, -102, 294, 272, 156,
	79, 120, 155, -103, 213, 295, 298, 242, 298, -76,
	-69, -126, -125, 111, 244, 295, -43, -42, -56, 194,
	225, 200, 216, 298, 8, 7, 7, 5, -189, -233,
	-44, -43, -42, -159, -59, -60, -123, -122, -201, -202,
	-199, 126, 253, 101, 96, 173, 164, 279, 96, -111,
	208, 209, 298, -36, 30, 86, 294, 298, 295, -124,
	-161, -73, -157, -159, -31, -158, 294, -166, -77, 239,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
	-131, -131, 147, 123, 221, 34, 124, -131, 242, -131,
	-131, -131, -131, 166, 164, 247, 100, 254, 87, 170,
	-241, 233, 31, -137, -31, 294, -189, -143, 208, 294,
	295, 298, -79, -142, 293, -139, -79, 295, 295, -79,
	264, 21, 87, 287, -102, 7, -150, -149, 266, -220,
	103, 116, 294, 295, 295, -131, -131, -96, -183, 4,
	272, 156, 79, 120, 155, 213, -97, -131, -98, -132,
	-133, 285, 286, 291, 294, 208, -99, -131, -79, -131,
	41, 143, 243, -100, -131, 111, -79, -131, -131, -131,
	-79, -79, -79, 294, 7, 7, 239, 239, 7, -124,
	295, 293, 302, -151, -37, -51, -44, -44, 164, -122,
	121, -166, -44, 294, 294, 140, 140, -44, -44, 121,
	-44, 121, -44, -44, -38, 199, -44, -44, 199, -91,
	203, -131, -91, -114, 173, -75, -51, 262, -44, 203,
	-74, 298, 111, 279, -75, -40, -40, -159, -166, 292,
	292, 7, 242, 242, 242, 242, 294, -131, -233, -52,
	-233, -42, 251, 58, 194, -193, -102, 298, 295, 298,
	-45, 126, -45, -77, -51, 96, 5, -44, -155, -14,
	-44, -88, 116, 298, 65, -95, 139, 159, 112, 145,
	205, 129, -128, 299, -154, -153, 29, -44, -31, -158,
	-157, 273, -131, -131, 242, -241, 233, -137, -131, 166,
	247, 100, 254, 87, 170, 111, 294, -132, -132, -79,
	294, -79, -131, 293, 293, 298, 295, -66, 298, -65,
	-131, -79, -79, 295, 295, -148, -149, 91, -131, -225,
	180, 294, 294, -131, 29, 298, 295, 111, 295, -104,
	186, 295, 10, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 137, 124, -132, -132, -132, -79, 294, 295,
	-135, -136, 111, 108, 29, -100, -100, -100, 295, 111,
	-79, 298, 298, 298, 295, 295, 295, 7, 295, 298,
	295, 273, 273, 295, -88, -131, 242, 242, 96, 164,
	-203, -200, -131, -69, 294, 294, -35, 90, 219, -107,
	96, -40, 96, -40, 242, -106, 61, 242, -81, 203,
	60, 295, 298, -81, -124, -83, -73, -151, 295, 293,
	7, 7, 295, 156, 120, 155, -103, 155, -103, -103,
	7, -44, -61, 125, -123, 294, -45, 294, 294, 294,
	-44, -41, 295, -138, 118, 42, -157, 139, 139, -157,
	-95, 139, -93, 179, -93, -93, -154, -189, 300, -44,
	294, 295, -131, -131, -132, -132, 111, 294, -131, -140,
	25, 25, 295, -79, 295, 298, 295, -139, 295, 264,
	-66, -66, -66, 5, 93, -131, 238, -226, -44, 294,
	267, -65, 295, -166, -166, -131, -135, -131, -166, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, 87, 164,
	170, -132, 298, -79, 295, -136, -135, -131, -131, -166,
	295, 295, 295, -79, -131, -131, -131, 295, 7, -138,
	293, -44, -44, -122, 96, -204, 61, -205, 53, 101,
	64, 164, 166, 253, 191, 51, 82, 198, 295, 295,
	-69, -69, 164, 82, 164, 82, 75, 249, -44, -44,
	-51, -44, -44, -44, -81, -113, 294, 173, -22, -51,
	-91, 279, 293, 293, 295, 124, -68, -156, -44, -214,
	294, -211, -212, -49, 294, -69, -59, -68, 173, -221,
	268, -131, -79, -157, -157, -94, 258, 173, 139, -157,
	-163, 276, -130, -129, 109, 162, 294, -69, -153, 25,
	25, -131, -140, 295, -131, -131, 295, -131, 5, -131,
	295, 295, 295, -131, -230, -44, -131, 295, 295, 295,
	-136, 111, 87, 170, 294, -131, 295, 295, 298, 295,
	295, 295, -221, -122, -44, -77, -44, 101, 121, 166,
	140, 294, -132, -51, -121, -238, 63, 231, 295, 295,
	166, 166, -131, -166, -40, -40, 242, 242, 88, -69,
	61, -87, -31, 294, 183, 295, 298, -50, -85, 53,
	-50, -131, 294, -68, 295, 295, 295, -51, -222, -224,
	-44, -94, 294, -131, -157, 170, 298, 301, 279, -69,
	295, -131, -131, 295, 295, -66, -223, 185, 295, -132,
	111, 294, -140, 295, -131, -205, -45, 164, -131, -46,
	294, -61, 294, 198, -39, 53, -44, -44, 255, 165,
	295, -44, -44, -121, -156, -36, -77, -36, 295, -79,
	295, -61, -121, 294, 298, 29, -69, 234, -129, -189,
	295, 295, -66, 42, -132, -140, 295, 295, 96, 295,
	-208, 154, -44, -69, -51, -34, 258, -77, 219, -124,
	294, -61, -50, -66, -121, -61, -68, -224, -226, 295,
	239, -227, 193, 209, -79, 295, 101, -206, -209, -207,
	173, 112, 184, 222, 295, 295, -64, 294, -131, -82,
	-69, -36, 295, -61, 295, 5, 295, -228, -229, 34,
	250, 67, -131, -228, -44, -207, 173, -209, 173, 255,
	85, -208, -69, -124, 295, -121, -229, 188, 107, 208,
	188, 107, -210, 161, 202, 45, 219, -210, -206, 295,
	-40, -61, 25, 19, 166, 82, -229,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	353, 0, 0, 0, 0, 0, 0, 327, -2, 0,
	118, 0, 283, 0, 283, 283, 287, 0, 355, 251,
	352, -2, 363, 0, 0, 0, 361, 341, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 780, 781, 782, 799, 800, 801, 802,
	803, 804, 805, 806, 807, 808, 809, 810, 811, 812,
	813, 814, 815, 816, 817, 818, 819, 820, 821, 822,
	823, 824, 825, 826, 827, 828, 829, 830, 831, 832,
	833, 834, 835, 836, 837, 838, 839, 840, 841, 842,
	843, 844, 845, 846, 847, 848, 849, 850, 851, 852,
	853, 854, 855, 856, 857, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 875, 876, 877, 878, 879, 880, 881, 882,
	883, 884, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 896, 897, 898, 899, 900, 901, 902,
	903, 904, 905, 906, 907, 908, 909, 910, 911, 912,
	913, 914, 915, 916, 917, 918, 919, 920, 921, 922,
	923, 924, 925, 926, 927, 928, 929, 930, 931, 932,
	933, 934, 935, 936, 937, 938, 939, 940, 941, 942,
	943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
	953, 954, 955, 91, 92, 862, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 276,
	876, 289, 114, 841, 880, 943, 892, 121, 131, 0,
	949, -2, 135, 65, 164, 165, 0, 167, 182, 0,
	0, 0, 0, 0, 175, 0, 0, 179, 0, 294,
	282, 294, 279, 280, 281, 284, 0, 275, 0, 354,
	0, 0, 0, 250, -2, 337, 338, -2, 0, 358,
	358, 358, 0, 0, 338, 0, 346, 866, 349, 763,
	347, 0, 0, 360, 359, 0, 342, 422, 0, 753,
	383, 0, 2, 0, 929, 0, 0, 929, 0, 0,
	0, 0, 0, 428, 57, 929, 48, 929, 749, 48,
	929, 63, 0, 79, 81, 790, 791, 792, 793, 954,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 288, 115, 919, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 184, 0, 0, 0, 0, 0,
	0, 0, 176, 0, 178, 0, 277, 290, 291, 278,
	0, 286, 48, 426, 0, 929, 784, 299, 929, -2,
	0, 333, 370, 371, 0, 0, 0, 356, 357, 0,
	0, 0, 329, 330, 0, 348, 0, 0, 386, 741,
	745, 746, 514, 0, 0, 0, 0, 0, 0, 601,
	602, 603, 0, 605, 606, 607, 924, 0, 611, 612,
	943, 753, 766, 767, 768, 769, 0, 0, 0, 774,
	775, 776, 725, 651, 621, -2, -2, 764, 452, 453,
	454, 455, -2, 956, 625, 627, 629, 630, 631, 632,
	0, 908, 925, 939, 940, 948, 952, 953, 929, 936,
	930, 920, 927, 935, 822, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 789, 476, 477, 482, 483,
	485, 386, 384, 423, 424, 0, 754, 732, 726, 727,
	0, 0, 0, 738, 736, 737, 25, 272, 27, 0,
	272, 272, 0, 0, 0, 0, 0, 0, 432, 0,
	305, 0, 0, 429, 0, 0, 59, 0, 46, 47,
	0, 61, 0, 0, 353, 0, 0, 929, 353, 0,
	685, 438, 439, 440, 441, 442, 511, 445, 446, 447,
	448, 449, 450, 451, 459, 460, 461, 462, 463, 464,
	473, 0, 458, 458, 458, 470, 471, 474, 475, 480,
	481, 492, 493, 495, 497, 491, 491, 491, 488, 489,
	0, 683, 0, 98, 0, 817, 751, 756, 757, 104,
	0, 0, 0, 0, 0, 0, 126, 146, 147, 148,
	127, 129, 136, 138, 139, 140, 149, 150, 151, 152,
	244, 0, 246, 162, 163, 777, 0, 128, 130, 132,
	133, 153, 154, 0, 156, 157, 158, 0, 67, 794,
	795, 796, 797, 798, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 166, 168, 0, 181, 169, 170, 171,
	172, 173, 174, 177, 180, 0, 0, 285, 247, 0,
	188, 0, 0, 929, 783, 296, 0, 0, 336, 368,
	369, 372, 375, 376, 373, 514, 343, 344, 345, 364,
	365, 261, 350, 0, 0, 760, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 744, 518, 519, 520, 542,
	543, 0, -2, 683, 0, 608, 609, 610, 0, 0,
	-2, 0, 771, 511, 0, 0, 724, 653, 0, 0,
	0, 0, 0, 0, 0, 0, 704, 710, 0, 0,
	0, 0, 0, 0, 0, 0, 466, 479, 490, 487,
	486, 468, 0, 467, 465, 0, 469, 0, 0, 0,
	432, 0, 733, 0, 730, 731, 0, 740, 0, 0,
	0, 0, 271, 29, 929, 0, 39, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 316, 0, 316, 307, 0, 0,
	0, 303, 319, 320, 322, 323, 0, 0, 430, 58,
	750, 48, 64, 48, 70, 80, 0, 82, 85, 86,
	87, 88, 83, 0, 433, 435, 443, 0, 498, 499,
	500, 501, 502, 503, 512, 90, 0, 0, 0, 99,
	100, 758, 759, 0, 0, 119, 124, 125, 295, 0,
	143, 0, 145, 0, 245, 779, 778, 511, 68, 183,
	112, 292, 293, 427, 0, 187, 189, 191, 192, 193,
	194, 784, 0, 784, 0, 0, 0, 0, 0, 374,
	377, 378, 0, 367, 259, 260, 353, 0, 762, 380,
	742, 385, 387, 395, 411, 398, 0, 515, 516, 0,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	-2, -2, -2, 534, 535, 536, -2, -2, -2, 540,
	541, -2, 0, 0, 0, 735, 0, -2, 0, 550,
	-2, -2, -2, 554, 0, 557, 559, 561, 0, 0,
	0, 0, 734, 571, 716, 0, 743, 556, 0, 0,
	604, 0, 0, 0, 689, 690, 0, -2, 613, 363,
	0, 0, 0, 0, 772, 0, 723, 719, 0, 661,
	0, 0, 0, 626, 628, 0, 0, 0, 0, 693,
	694, 695, 696, 697, 698, 699, 0, 0, 0, 0,
	573, 0, 0, 0, 0, 943, 0, 683, 709, 0,
	0, 0, 0, 0, 683, 0, 715, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 380,
	425, 728, 0, 739, 28, 263, 0, 0, 0, 31,
	929, 199, 0, 0, 0, 0, 0, 274, 40, 929,
	48, 929, 48, 41, 26, 272, 262, 265, 0, 56,
	0, 431, 300, 301, 0, 0, 747, 309, 306, 0,
	432, 0, 0, 0, 0, 60, 62, 0, 686, 0,
	0, 0, 0, 0, 0, 0, 0, 684, 96, 752,
	97, 116, 141, 142, 144, 137, 155, 0, 196, 0,
	0, 784, 0, 0, 0, 0, 298, 299, 366, 0,
	761, 382, 0, 0, 0, 0, 0, 0, 419, 419,
	419, 417, 411, 0, 397, 410, 0, 409, -2, 398,
	0, 0, -2, -2, 0, 0, 0, 572, -2, 555,
	558, 560, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 684, 687, 688, 0, -2, 0, 0, 362,
	363, 363, 363, 619, 0, 0, 720, 0, 0, 620,
	0, 0, 0, 0, 0, 0, 635, 0, 636, 0,
	0, 637, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 576, 577, 0, 0, 638,
	707, 708, 0, 0, 0, 0, 0, 0, 643, 0,
	714, 0, 0, 0, 647, 648, 649, 0, 456, 0,
	472, 494, 496, 484, 382, 0, 0, 0, 0, 0,
	197, 216, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 37, 0, 43, 0, 0, 0, 0, 315, 0,
	314, 0, 0, 304, 316, 321, 318, 324, 0, 436,
	0, 0, 444, 504, 505, 506, 507, 508, 509, 510,
	0, 113, 185, 0, 190, 0, 0, 0, 188, 0,
	0, 297, 351, 655, 0, 0, 388, 0, 0, 0,
	0, 0, 414, 418, 415, 416, 413, 393, 0, 407,
	0, 400, 517, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 717, 0, 678, 0, -2, 691, 614, 0,
	0, 0, 0, 773, 718, 722, 0, 659, 660, 664,
	0, 0, 624, 0, 0, 692, 701, 702, 574, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 587, -2,
	-2, -2, 591, 592, 593, -2, -2, -2, 0, 0,
	0, 703, 0, 0, 681, 705, 706, 711, 712, 0,
	640, 641, 642, 713, 0, 0, 0, 478, 0, 655,
	729, 267, 269, 30, 0, 198, 0, 201, 0, 0,
	0, 0, 207, 208, 0, 0, 0, 0, 218, 225,
	0, 0, 0, 45, 0, 0, 273, 0, 48, 48,
	264, 0, 0, 266, 302, 0, 0, 0, 308, 748,
	317, 0, 437, 434, 513, 0, 0, 252, 258, 258,
	0, 622, 623, 0, 0, 0, 0, 0, 0, 339,
	0, 381, 379, 401, 0, 403, 0, 0, 0, 405,
	396, 0, 0, 391, 0, 390, 0, 0, 399, 0,
	0, -2, 0, 565, -2, -2, 677, 684, 770, 363,
	615, 617, 618, 721, 666, 663, 0, 650, 633, 634,
	700, 0, 0, 0, 0, 684, 680, 639, 0, 645,
	646, 457, 340, 32, 0, 202, 203, 784, 0, 206,
	209, 0, 211, 786, 196, 0, 222, 223, 220, 0,
	34, 35, 44, 50, 36, 42, 0, 0, 0, 0,
	0, 325, 326, 0, 0, 225, 0, 261, 765, 0,
	261, 0, 0, 0, 215, 196, 225, 0, 654, 656,
	0, 402, 0, 421, 404, 0, 0, 394, 0, 0,
	408, -2, -2, 566, 679, 0, 363, 0, 652, -2,
	0, 0, 0, 682, 0, 200, 204, 0, 0, 231,
	0, 219, 0, 0, 52, 0, 268, 270, 0, 311,
	432, 313, 0, 196, 253, 254, 257, 255, 258, 363,
	225, 186, 196, 0, 0, 0, 0, 0, 392, 389,
	406, 616, 669, 0, -2, 0, 599, 644, 0, 210,
	236, 0, 0, 0, 227, 38, 0, 49, 0, 312,
	0, 213, 261, 0, 196, 248, 0, 657, 658, 420,
	0, 0, 0, 0, 665, 600, 0, 212, 232, 233,
	0, 228, 229, 230, 785, 224, 231, 0, 51, 432,
	0, 256, 614, 214, 225, 412, 662, 667, 670, -2,
	895, 814, 0, 668, 205, 234, 0, 235, 0, 0,
	0, 236, 0, 310, 48, 196, 0, 672, 673, 674,
	675, 676, 237, 0, 240, 241, 0, 238, 221, 226,
	195, 249, 0, 239, 242, 243, 671,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:702
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:708
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:821
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:828
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:876
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:880
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = NewUnresolvedNameWithSuffix(sqlDollar[1].str, sqlDollar[2].union.unresolvedName())
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1342
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowTables{Database: &DatabaseName{Name: Name(sqlDollar[4].str)}}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1508
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NewUnresolvedName(sqlDollar[4].str),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.qname(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 227:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1722
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1733
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			unimplemented()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1739
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1743
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = true
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = false
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1823
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1824
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1827
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1828
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = Ascending
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = Descending
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = true
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = false
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1895
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1937
		{
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.str = ""
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.str = ""
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			unimplementedWithIssue(6637)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2039
		{
			unimplementedWithIssue(6637)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2081
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			unimplemented()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			unimplementedWithIssue(7841)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2111
		{
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			unimplemented()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2337
		{
			unimplemented()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			unimplemented()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2341
		{
			unimplemented()
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2345
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2352
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2353
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = true
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = false
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = false
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = true
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2376
		{
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 382:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2599
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause(), AsOf: sqlDollar[4].union.asOfClause()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.str = astFullJoin
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.str = astLeftJoin
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.str = astRightJoin
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.str = astInnerJoin
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2812
		{
			unimplementedWithIssue(2115)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			unimplementedWithIssue(2115)
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			unimplementedWithIssue(2115)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2817
		{
			unimplementedWithIssue(2115)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2818
		{
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2826
		{
			unimplemented()
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2840
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2873
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2882
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = nil
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2927
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2999
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 484:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3026
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3065
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3066
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3079
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			unimplemented()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3098
		{
			unimplemented()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			unimplemented()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			unimplemented()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3107
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3108
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3110
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3114
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3146
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3147
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3307
		{
			unimplemented()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3556
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3559
		{
			unimplemented()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3560
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3597
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3601
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3621
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3691
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3694
		{
			unimplemented()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3695
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3699
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3700
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3703
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			unimplemented()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3710
		{
			unimplemented()
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3712
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3728
		{
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3741
		{
			unimplemented()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3742
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			unimplemented()
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3746
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3752
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3754
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3781
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4084
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4085
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = NewUnresolvedName(sqlDollar[1].str)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = NewUnresolvedNameWithSuffix(sqlDollar[1].str, sqlDollar[2].union.unresolvedName())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4241
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4277
		{
			unimplemented()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = DNull
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.str = ""
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
