// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:297
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const NOT_REGMATCH = 57357
const REGIMATCH = 57358
const NOT_REGIMATCH = 57359
const ERROR = 57360
const ACTION = 57361
const ADD = 57362
const ALL = 57363
const ALTER = 57364
const ANALYSE = 57365
const ANALYZE = 57366
const AND = 57367
const ANY = 57368
const ANNOTATE_TYPE = 57369
const ARRAY = 57370
const AS = 57371
const ASC = 57372
const ASYMMETRIC = 57373
const AT = 57374
const BEGIN = 57375
const BETWEEN = 57376
const BIGINT = 57377
const BIGSERIAL = 57378
const BIT = 57379
const BLOB = 57380
const BOOL = 57381
const BOOLEAN = 57382
const BOTH = 57383
const BY = 57384
const BYTEA = 57385
const BYTES = 57386
const CASCADE = 57387
const CASE = 57388
const CAST = 57389
const CHAR = 57390
const CHARACTER = 57391
const CHARACTERISTICS = 57392
const CHECK = 57393
const COALESCE = 57394
const COLLATE = 57395
const COLLATION = 57396
const COLUMN = 57397
const COLUMNS = 57398
const COMMIT = 57399
const COMMITTED = 57400
const CONCAT = 57401
const CONFLICT = 57402
const CONSTRAINT = 57403
const CONSTRAINTS = 57404
const COVERING = 57405
const CREATE = 57406
const CROSS = 57407
const CUBE = 57408
const CURRENT = 57409
const CURRENT_CATALOG = 57410
const CURRENT_DATE = 57411
const CURRENT_ROLE = 57412
const CURRENT_TIME = 57413
const CURRENT_TIMESTAMP = 57414
const CURRENT_USER = 57415
const CYCLE = 57416
const DATA = 57417
const DATABASE = 57418
const DATABASES = 57419
const DATE = 57420
const DAY = 57421
const DEC = 57422
const DECIMAL = 57423
const DEFAULT = 57424
const DEALLOCATE = 57425
const DEFERRABLE = 57426
const DELETE = 57427
const DESC = 57428
const DISTINCT = 57429
const DO = 57430
const DOUBLE = 57431
const DROP = 57432
const ELSE = 57433
const ENCODING = 57434
const END = 57435
const ESCAPE = 57436
const EXCEPT = 57437
const EXISTS = 57438
const EXECUTE = 57439
const EXPLAIN = 57440
const EXTRACT = 57441
const FALSE = 57442
const FAMILY = 57443
const FETCH = 57444
const FILTER = 57445
const FIRST = 57446
const FLOAT = 57447
const FLOORDIV = 57448
const FOLLOWING = 57449
const FOR = 57450
const FORCE_INDEX = 57451
const FOREIGN = 57452
const FROM = 57453
const FULL = 57454
const GRANT = 57455
const GRANTS = 57456
const GREATEST = 57457
const GROUP = 57458
const GROUPING = 57459
const HAVING = 57460
const HIGH = 57461
const HOUR = 57462
const IF = 57463
const IFNULL = 57464
const ILIKE = 57465
const IN = 57466
const INTERLEAVE = 57467
const INDEX = 57468
const INDEXES = 57469
const INITIALLY = 57470
const INNER = 57471
const INSERT = 57472
const INT = 57473
const INT64 = 57474
const INTEGER = 57475
const INTERSECT = 57476
const INTERVAL = 57477
const INTO = 57478
const IS = 57479
const ISOLATION = 57480
const JOIN = 57481
const KEY = 57482
const KEYS = 57483
const LATERAL = 57484
const LEADING = 57485
const LEAST = 57486
const LEFT = 57487
const LEVEL = 57488
const LIKE = 57489
const LIMIT = 57490
const LOCAL = 57491
const LOCALTIME = 57492
const LOCALTIMESTAMP = 57493
const LOW = 57494
const LSHIFT = 57495
const MATCH = 57496
const MINUTE = 57497
const MONTH = 57498
const NAME = 57499
const NAMES = 57500
const NATURAL = 57501
const NEXT = 57502
const NO = 57503
const NO_INDEX_JOIN = 57504
const NORMAL = 57505
const NOT = 57506
const NOTHING = 57507
const NULL = 57508
const NULLIF = 57509
const NULLS = 57510
const NUMERIC = 57511
const OF = 57512
const OFF = 57513
const OFFSET = 57514
const ON = 57515
const ONLY = 57516
const OR = 57517
const ORDER = 57518
const ORDINALITY = 57519
const OUT = 57520
const OUTER = 57521
const OVER = 57522
const OVERLAPS = 57523
const OVERLAY = 57524
const PARENT = 57525
const PARTIAL = 57526
const PARTITION = 57527
const PLACING = 57528
const POSITION = 57529
const PRECEDING = 57530
const PRECISION = 57531
const PREPARE = 57532
const PRIMARY = 57533
const PRIORITY = 57534
const RANGE = 57535
const READ = 57536
const REAL = 57537
const RECURSIVE = 57538
const REF = 57539
const REFERENCES = 57540
const RENAME = 57541
const REPEATABLE = 57542
const RELEASE = 57543
const RESTRICT = 57544
const RETURNING = 57545
const REVOKE = 57546
const RIGHT = 57547
const ROLLBACK = 57548
const ROLLUP = 57549
const ROW = 57550
const ROWS = 57551
const RSHIFT = 57552
const SAVEPOINT = 57553
const SEARCH = 57554
const SECOND = 57555
const SELECT = 57556
const SERIAL = 57557
const SERIALIZABLE = 57558
const SESSION = 57559
const SESSION_USER = 57560
const SET = 57561
const SHOW = 57562
const SIMILAR = 57563
const SIMPLE = 57564
const SMALLINT = 57565
const SMALLSERIAL = 57566
const SNAPSHOT = 57567
const SOME = 57568
const SQL = 57569
const START = 57570
const STRICT = 57571
const STRING = 57572
const STORING = 57573
const SUBSTRING = 57574
const SYMMETRIC = 57575
const SYSTEM = 57576
const TABLE = 57577
const TABLES = 57578
const TEXT = 57579
const THEN = 57580
const TIME = 57581
const TIMESTAMP = 57582
const TIMESTAMPTZ = 57583
const TO = 57584
const TRAILING = 57585
const TRANSACTION = 57586
const TREAT = 57587
const TRIM = 57588
const TRUE = 57589
const TRUNCATE = 57590
const TYPE = 57591
const UNBOUNDED = 57592
const UNCOMMITTED = 57593
const UNION = 57594
const UNIQUE = 57595
const UNKNOWN = 57596
const UPDATE = 57597
const UPSERT = 57598
const USER = 57599
const USING = 57600
const VALID = 57601
const VALIDATE = 57602
const VALUE = 57603
const VALUES = 57604
const VARCHAR = 57605
const VARIADIC = 57606
const VARYING = 57607
const WHEN = 57608
const WHERE = 57609
const WINDOW = 57610
const WITH = 57611
const WITHIN = 57612
const WITHOUT = 57613
const YEAR = 57614
const ZONE = 57615
const NOT_LA = 57616
const WITH_LA = 57617
const AS_LA = 57618
const POSTFIXOP = 57619
const UMINUS = 57620

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4682

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 24,
	297, 24,
	-2, 357,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	1, 332,
	173, 332,
	203, 332,
	295, 332,
	297, 332,
	-2, 342,
	-1, 51,
	1, 335,
	173, 335,
	203, 335,
	295, 335,
	297, 335,
	-2, 341,
	-1, 60,
	1, 24,
	297, 24,
	-2, 357,
	-1, 271,
	1, 161,
	297, 161,
	-2, 851,
	-1, 304,
	148, 367,
	172, 367,
	-2, 338,
	-1, 307,
	148, 366,
	172, 366,
	-2, 336,
	-1, 430,
	148, 366,
	172, 366,
	-2, 339,
	-1, 486,
	294, 791,
	-2, 784,
	-1, 487,
	294, 792,
	-2, 785,
	-1, 493,
	5, 501,
	294, 501,
	-2, 938,
	-1, 516,
	5, 467,
	-2, 914,
	-1, 517,
	5, 495,
	294, 495,
	-2, 916,
	-1, 518,
	5, 475,
	-2, 917,
	-1, 519,
	5, 474,
	-2, 918,
	-1, 520,
	5, 495,
	294, 495,
	-2, 921,
	-1, 521,
	5, 495,
	294, 495,
	-2, 922,
	-1, 522,
	5, 496,
	-2, 925,
	-1, 523,
	5, 462,
	-2, 926,
	-1, 524,
	5, 462,
	-2, 927,
	-1, 525,
	5, 477,
	-2, 930,
	-1, 526,
	5, 463,
	-2, 935,
	-1, 527,
	5, 464,
	-2, 936,
	-1, 528,
	5, 465,
	-2, 937,
	-1, 529,
	5, 462,
	-2, 941,
	-1, 530,
	5, 468,
	-2, 946,
	-1, 531,
	5, 466,
	-2, 949,
	-1, 532,
	5, 493,
	294, 493,
	-2, 951,
	-1, 533,
	5, 497,
	-2, 954,
	-1, 534,
	5, 499,
	-2, 955,
	-1, 535,
	5, 492,
	294, 492,
	-2, 959,
	-1, 853,
	95, 342,
	134, 342,
	148, 342,
	172, 342,
	176, 342,
	252, 342,
	-2, 611,
	-1, 861,
	294, 769,
	-2, 758,
	-1, 1051,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 535,
	-1, 1052,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 536,
	-1, 1053,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 537,
	-1, 1057,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 541,
	-1, 1058,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 542,
	-1, 1059,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 543,
	-1, 1062,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 548,
	-1, 1068,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 550,
	-1, 1071,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 555,
	-1, 1072,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 556,
	-1, 1073,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 557,
	-1, 1098,
	181, 682,
	-2, 685,
	-1, 1261,
	95, 342,
	134, 342,
	148, 342,
	172, 342,
	176, 342,
	252, 342,
	-2, 415,
	-1, 1265,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 549,
	-1, 1266,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 551,
	-1, 1271,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 552,
	-1, 1289,
	181, 681,
	-2, 684,
	-1, 1447,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 553,
	-1, 1452,
	137, 0,
	-2, 567,
	-1, 1460,
	181, 683,
	-2, 686,
	-1, 1493,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 592,
	-1, 1494,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 593,
	-1, 1495,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 594,
	-1, 1499,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 598,
	-1, 1500,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 599,
	-1, 1501,
	12, 0,
	13, 0,
	14, 0,
	277, 0,
	278, 0,
	279, 0,
	-2, 600,
	-1, 1606,
	137, 0,
	-2, 568,
	-1, 1609,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 571,
	-1, 1610,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 573,
	-1, 1697,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 572,
	-1, 1698,
	15, 0,
	16, 0,
	17, 0,
	34, 0,
	123, 0,
	124, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 574,
	-1, 1705,
	137, 0,
	-2, 601,
	-1, 1751,
	137, 0,
	-2, 602,
	-1, 1804,
	34, 0,
	123, 0,
	147, 0,
	221, 0,
	274, 0,
	-2, 913,
}

const sqlNprod = 1053
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 23521

var sqlAct = [...]int{

	487, 1803, 577, 1783, 1415, 1827, 1757, 1784, 935, 1649,
	1785, 1802, 943, 1471, 805, 1024, 1570, 1685, 308, 1598,
	1672, 1580, 1592, 1585, 485, 37, 856, 1531, 85, 591,
	679, 484, 84, 84, 84, 1571, 272, 84, 477, 330,
	84, 548, 1008, 590, 536, 1033, 783, 1258, 84, 1426,
	1005, 1190, 1292, 1257, 1344, 84, 84, 17, 786, 84,
	1343, 858, 84, 84, 84, 1436, 1248, 479, 84, 84,
	84, 84, 1007, 356, 449, 557, 554, 974, 1032, 313,
	944, 920, 911, 1242, 1144, 1108, 1084, 1036, 73, 958,
	1081, 801, 315, 50, 653, 23, 967, 637, 313, 1000,
	13, 357, 6, 459, 418, 307, 1196, 351, 559, 450,
	419, 1147, 549, 550, 353, 664, 346, 358, 634, 888,
	8, 348, 71, 50, 7, 892, 78, 5, 1034, 4,
	1011, 77, 349, 79, 807, 433, 633, 434, 937, 655,
	318, 432, 651, 250, 570, 259, 316, 269, 342, 437,
	51, 80, 579, 50, 312, 75, 460, 538, 74, 1692,
	76, 1834, 1693, 52, 1028, 579, 971, 579, 1819, 936,
	312, 1028, 1800, 940, 1791, 1671, 1781, 1028, 1776, 964,
	1753, 1028, 1203, 964, 977, 336, 1747, 326, 354, 1028,
	333, 1736, 1287, 297, 1671, 810, 343, 1288, 1741, 1286,
	1202, 305, 320, 1726, 977, 1699, 1028, 972, 964, 1696,
	1682, 1256, 1028, 1671, 304, 327, 1679, 812, 327, 1680,
	338, 568, 1670, 808, 327, 1671, 338, 1654, 1653, 1631,
	1028, 1028, 977, 1611, 56, 1245, 977, 1315, 811, 1332,
	1333, 1334, 973, 970, 1608, 1543, 84, 964, 1028, 809,
	1456, 1401, 1605, 977, 1395, 58, 1394, 1361, 1246, 1395,
	1362, 84, 1506, 1359, 84, 84, 977, 1358, 1357, 1289,
	977, 977, 977, 1459, 1029, 986, 1291, 1028, 977, 1674,
	1245, 976, 59, 1228, 977, 963, 1329, 908, 964, 54,
	907, 817, 977, 585, 909, 55, 586, 84, 1230, 84,
	975, 84, 1028, 84, 979, 56, 1092, 551, 1023, 580,
	444, 552, 994, 56, 53, 445, 777, 776, 84, 645,
	644, 382, 580, 431, 580, 325, 58, 551, 60, 84,
	552, 552, 678, 1320, 58, 402, 1801, 425, 1798, 1790,
	84, 84, 84, 1748, 84, 1681, 1636, 1632, 1624, 1623,
	1622, 1617, 582, 59, 1616, 1615, 547, 430, 1568, 969,
	54, 59, 1561, 1521, 1335, 543, 55, 1516, 1515, 1202,
	1514, 390, 1462, 1445, 1425, 84, 1405, 391, 1366, 1363,
	1330, 968, 84, 1351, 84, 939, 1315, 1342, 1314, 1311,
	1309, 1297, 1296, 53, 1232, 356, 356, 542, 1229, 1161,
	1115, 1114, 1793, 681, 84, 583, 84, 84, 84, 84,
	84, 84, 444, 84, 443, 1089, 864, 84, 578, 1473,
	780, 1767, 84, 357, 357, 1740, 779, 424, 84, 1718,
	1716, 682, 1403, 1707, 1689, 1677, 808, 1331, 1668, 358,
	358, 1646, 422, 1629, 597, 1601, 84, 683, 1578, 84,
	1451, 1444, 1422, 1421, 1420, 327, 1418, 1378, 1377, 1341,
	440, 441, 1305, 1304, 446, 674, 305, 1283, 343, 1279,
	813, 814, 815, 816, 818, 1086, 838, 1217, 1175, 304,
	1174, 1154, 1320, 1560, 1113, 545, 572, 1027, 569, 313,
	631, 893, 896, 900, 886, 885, 327, 571, 571, 861,
	643, 1090, 884, 587, 1326, 1327, 1328, 883, 1325, 1322,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 882, 551, 881,
	641, 1315, 552, 880, 879, 878, 640, 877, 1315, 537,
	81, 327, 876, 875, 619, 874, 873, 675, 668, 872,
	871, 862, 767, 860, 53, 781, 331, 84, 448, 388,
	378, 764, 376, 681, 768, 769, 770, 771, 772, 1567,
	773, 84, 1175, 1566, 775, 84, 1130, 778, 84, 84,
	791, 790, 49, 789, 84, 855, 84, 84, 859, 84,
	81, 682, 84, 905, 84, 84, 803, 356, 305, 903,
	810, 305, 305, 1211, 1210, 544, 810, 683, 29, 810,
	396, 797, 1694, 914, 798, 799, 30, 417, 1565, 1204,
	1018, 1365, 812, 1364, 1264, 357, 413, 1320, 1315, 898,
	953, 351, 49, 899, 1320, 397, 869, 1586, 938, 936,
	938, 358, 1474, 811, 1109, 889, 84, 84, 1300, 811,
	890, 891, 1198, 73, 925, 927, 1763, 959, 29, 1814,
	894, 981, 1725, 1551, 64, 897, 30, 1120, 492, 262,
	540, 1316, 1317, 1318, 1319, 1321, 1815, 453, 985, 1224,
	1276, 1330, 290, 810, 560, 291, 561, 901, 50, 681,
	1662, 78, 50, 1274, 1661, 961, 77, 1390, 79, 933,
	960, 917, 962, 930, 560, 812, 561, 311, 952, 65,
	951, 956, 354, 902, 1370, 865, 80, 682, 955, 999,
	75, 942, 1369, 74, 1320, 76, 811, 954, 1402, 1267,
	913, 327, 56, 683, 338, 302, 1389, 560, 1331, 561,
	947, 394, 1123, 1216, 1215, 338, 310, 1214, 338, 894,
	1213, 897, 1724, 58, 562, 971, 1069, 891, 890, 1272,
	988, 982, 983, 1277, 980, 987, 296, 913, 295, 978,
	1687, 1330, 932, 912, 562, 931, 421, 84, 395, 817,
	59, 1158, 56, 1124, 1157, 921, 1040, 54, 312, 416,
	248, 84, 84, 55, 374, 299, 972, 1589, 975, 1830,
	1380, 1083, 1765, 58, 1651, 539, 573, 562, 1318, 1319,
	1321, 68, 53, 1316, 1317, 1318, 1319, 1321, 1125, 1122,
	84, 1410, 84, 1109, 1824, 1778, 1030, 62, 1331, 489,
	59, 973, 970, 251, 67, 66, 1083, 54, 1191, 1787,
	1273, 1779, 1392, 55, 924, 1195, 1814, 1275, 1021, 1022,
	1038, 1200, 251, 579, 256, 1189, 681, 566, 1039, 252,
	1407, 69, 72, 1186, 309, 1823, 565, 673, 672, 1719,
	666, 661, 1223, 256, 1225, 1191, 1126, 63, 252, 975,
	393, 838, 253, 558, 682, 887, 1087, 838, 597, 975,
	838, 1703, 1003, 1437, 300, 1408, 1669, 1002, 1303, 255,
	683, 253, 1324, 1316, 1317, 1318, 1319, 1321, 903, 420,
	852, 1788, 303, 903, 312, 1828, 618, 1387, 255, 1004,
	1160, 84, 84, 84, 563, 923, 1786, 84, 1031, 1381,
	84, 1096, 1813, 385, 387, 1121, 84, 84, 84, 84,
	84, 1811, 84, 84, 563, 676, 1822, 327, 969, 1789,
	84, 1584, 84, 975, 910, 1315, 1829, 1539, 1172, 84,
	815, 816, 818, 392, 838, 1206, 1088, 1207, 84, 1170,
	70, 1105, 1652, 1831, 1016, 313, 327, 563, 619, 405,
	414, 1093, 1097, 254, 1100, 435, 61, 922, 1540, 84,
	84, 990, 383, 381, 1164, 84, 597, 992, 625, 1193,
	1139, 1079, 254, 1269, 1209, 356, 1151, 1152, 1153, 436,
	580, 436, 677, 993, 1077, 1430, 1185, 393, 1627, 1840,
	1656, 1655, 991, 84, 257, 84, 84, 84, 1165, 1547,
	84, 1644, 1713, 357, 415, 1502, 1372, 1550, 1082, 84,
	1169, 1251, 597, 257, 1549, 596, 84, 621, 84, 358,
	1017, 1320, 788, 782, 1406, 1758, 435, 774, 1254, 646,
	1645, 1177, 1234, 1066, 1315, 1205, 1176, 1599, 1435, 1231,
	1535, 1233, 1536, 313, 1252, 650, 392, 1166, 1075, 1595,
	1074, 1432, 1431, 1569, 1080, 341, 619, 1220, 1219, 340,
	427, 310, 1416, 1263, 1221, 959, 1208, 1538, 1330, 1226,
	1222, 1628, 1427, 1839, 1541, 1227, 1197, 1243, 648, 1112,
	472, 1546, 1503, 1329, 796, 1197, 1642, 1706, 1504, 649,
	1600, 1626, 313, 1345, 327, 1239, 1548, 1240, 1450, 1290,
	50, 1310, 619, 961, 1253, 1262, 1643, 1278, 960, 984,
	962, 1247, 82, 243, 244, 412, 410, 261, 667, 662,
	273, 409, 1064, 1067, 408, 1331, 407, 406, 261, 1537,
	1320, 1076, 403, 339, 1270, 319, 319, 1268, 1078, 329,
	1346, 313, 329, 335, 329, 870, 1063, 766, 329, 344,
	329, 273, 620, 1235, 1111, 1782, 84, 1755, 1251, 1528,
	1385, 1383, 1371, 1236, 1384, 1019, 1386, 1015, 957, 584,
	1376, 581, 576, 1299, 327, 1254, 593, 1330, 1282, 567,
	564, 1468, 1284, 84, 84, 1249, 787, 1663, 438, 1025,
	1397, 1252, 323, 1815, 1294, 1295, 1325, 1322, 1323, 1324,
	1316, 1317, 1318, 1319, 1321, 1250, 1348, 1349, 1350, 84,
	399, 84, 670, 84, 1665, 929, 913, 84, 3, 1594,
	1065, 1247, 928, 913, 1367, 1393, 84, 1340, 1674, 926,
	84, 1721, 1750, 1428, 1331, 1374, 84, 681, 1353, 442,
	84, 1742, 84, 941, 247, 1026, 1391, 804, 642, 1388,
	589, 1253, 966, 1837, 439, 1396, 1838, 1315, 324, 1419,
	810, 1400, 1399, 1398, 1185, 682, 1522, 1441, 1251, 996,
	995, 1429, 1409, 1411, 1412, 1433, 289, 1424, 1413, 332,
	258, 683, 1404, 1417, 84, 1254, 1360, 400, 1212, 1440,
	1159, 1156, 1464, 1465, 1466, 1249, 1155, 1434, 1438, 1439,
	1106, 1252, 997, 1453, 1593, 1325, 1322, 1323, 1324, 1316,
	1317, 1318, 1319, 1321, 1743, 1250, 1613, 1477, 1478, 1467,
	618, 292, 293, 1237, 998, 1482, 379, 597, 863, 298,
	1461, 1650, 249, 765, 404, 1619, 1777, 1302, 1475, 947,
	327, 384, 1702, 1684, 273, 273, 1110, 868, 28, 1573,
	84, 84, 84, 1480, 465, 597, 597, 1513, 84, 84,
	1529, 1253, 1373, 597, 84, 1010, 84, 1009, 84, 84,
	84, 84, 1544, 1545, 684, 1457, 84, 261, 1509, 329,
	671, 273, 327, 428, 660, 1510, 327, 488, 411, 654,
	663, 1119, 541, 490, 1527, 597, 594, 1523, 319, 491,
	595, 84, 84, 895, 478, 592, 352, 1244, 945, 329,
	1107, 1298, 84, 84, 866, 464, 84, 619, 470, 1583,
	329, 329, 329, 1576, 574, 84, 84, 1576, 618, 1564,
	1575, 469, 1562, 1507, 1575, 1094, 375, 1577, 461, 1602,
	1597, 1577, 1255, 40, 1517, 619, 619, 1558, 389, 596,
	267, 621, 1582, 619, 84, 329, 268, 1590, 1591, 1194,
	1559, 1596, 638, 1020, 638, 792, 1382, 301, 1312, 377,
	1137, 1129, 1127, 1603, 618, 1607, 1118, 423, 553, 946,
	401, 1201, 965, 447, 273, 619, 638, 273, 273, 273,
	273, 273, 1579, 273, 800, 1792, 322, 273, 321, 597,
	1006, 398, 261, 647, 989, 294, 1715, 1720, 785, 84,
	1379, 84, 1762, 84, 84, 1625, 57, 22, 20, 19,
	1588, 18, 84, 16, 1554, 1131, 319, 1637, 15, 806,
	14, 21, 1563, 12, 11, 1659, 1660, 10, 9, 27,
	26, 84, 25, 2, 1, 0, 0, 0, 0, 1640,
	0, 1638, 0, 0, 0, 1664, 0, 596, 0, 621,
	0, 1658, 0, 0, 0, 84, 0, 84, 327, 327,
	0, 0, 327, 0, 1675, 1678, 84, 0, 0, 1673,
	0, 0, 84, 1576, 0, 1666, 620, 0, 0, 619,
	1575, 0, 0, 0, 1688, 0, 1695, 1577, 0, 597,
	0, 0, 0, 596, 0, 621, 0, 0, 0, 0,
	593, 0, 0, 1701, 0, 0, 0, 0, 0, 0,
	0, 1691, 0, 84, 0, 0, 0, 329, 1280, 1281,
	0, 0, 0, 0, 1717, 0, 0, 0, 0, 0,
	0, 918, 84, 84, 0, 329, 84, 1711, 329, 934,
	84, 1315, 0, 1708, 329, 84, 949, 950, 0, 329,
	1729, 84, 329, 0, 273, 273, 1738, 0, 1731, 1712,
	84, 1733, 1739, 0, 313, 681, 1576, 597, 1648, 1337,
	1338, 1339, 1737, 1575, 1744, 0, 0, 1730, 0, 619,
	1577, 1732, 1745, 0, 620, 903, 0, 84, 0, 84,
	84, 1749, 84, 682, 0, 1746, 0, 0, 0, 0,
	0, 0, 0, 1760, 1768, 1766, 638, 806, 593, 683,
	0, 1683, 84, 0, 1772, 0, 1771, 0, 0, 1131,
	1131, 1752, 327, 0, 1770, 1769, 1775, 1773, 1764, 1774,
	620, 0, 0, 0, 0, 1576, 84, 1320, 84, 0,
	632, 0, 1575, 0, 0, 597, 1799, 0, 1795, 1577,
	0, 0, 1796, 84, 593, 1797, 0, 619, 0, 1735,
	0, 1808, 0, 1812, 84, 1810, 0, 0, 0, 1816,
	1131, 1131, 1131, 0, 1818, 0, 1821, 0, 1817, 618,
	1820, 0, 0, 1539, 1330, 1532, 0, 0, 0, 0,
	1833, 1832, 1835, 1530, 0, 1836, 1534, 0, 0, 0,
	0, 0, 0, 0, 0, 1448, 1449, 618, 618, 1841,
	0, 0, 0, 0, 1540, 618, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1780, 1533, 0, 619, 0, 1001, 0, 0,
	0, 1331, 0, 0, 0, 0, 1761, 618, 0, 0,
	0, 329, 918, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
	1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
	1500, 1501, 0, 1505, 0, 0, 0, 0, 0, 810,
	329, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 1535, 0, 1536, 0,
	0, 812, 0, 0, 0, 0, 1131, 1131, 596, 0,
	621, 0, 0, 1322, 1323, 1324, 1316, 1317, 1318, 1319,
	1321, 0, 811, 1538, 0, 0, 0, 0, 826, 0,
	1541, 0, 0, 0, 0, 0, 596, 596, 621, 621,
	0, 0, 0, 0, 596, 0, 621, 0, 0, 0,
	0, 618, 0, 0, 1131, 1131, 1131, 1131, 1131, 1131,
	1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
	1131, 1131, 1131, 0, 1131, 817, 596, 0, 621, 0,
	0, 329, 1167, 1168, 0, 1537, 0, 918, 0, 0,
	1173, 0, 0, 0, 0, 0, 1178, 1179, 1181, 1183,
	1184, 0, 1187, 1188, 0, 0, 0, 0, 0, 0,
	329, 0, 1199, 0, 0, 0, 0, 0, 0, 329,
	0, 0, 827, 0, 0, 0, 0, 0, 329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 1001,
	638, 618, 0, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 451, 451, 0, 0, 0, 0, 0, 593,
	0, 0, 555, 620, 620, 0, 0, 1647, 0, 828,
	596, 620, 621, 785, 0, 785, 273, 329, 0, 1315,
	1238, 1332, 1333, 1334, 0, 0, 0, 593, 593, 1241,
	0, 0, 0, 0, 1604, 593, 1260, 0, 329, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 618,
	0, 0, 0, 0, 0, 0, 0, 593, 1329, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 0, 1705, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 793, 795, 1131, 0,
	596, 0, 621, 802, 0, 1320, 0, 0, 466, 38,
	0, 24, 0, 0, 0, 847, 848, 849, 850, 851,
	0, 0, 42, 0, 854, 0, 0, 618, 1315, 0,
	1332, 1333, 1334, 0, 0, 0, 1335, 620, 0, 38,
	0, 0, 0, 1455, 867, 0, 44, 0, 0, 0,
	0, 0, 1330, 49, 0, 0, 0, 0, 0, 306,
	0, 593, 314, 1751, 0, 0, 806, 0, 0, 38,
	0, 1315, 33, 1332, 1333, 1334, 0, 1329, 596, 29,
	621, 314, 45, 0, 1131, 0, 32, 30, 0, 0,
	0, 0, 0, 329, 329, 0, 0, 0, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 1414,
	1329, 918, 0, 785, 1320, 0, 0, 1423, 0, 810,
	0, 0, 0, 0, 0, 0, 329, 620, 0, 0,
	329, 0, 0, 0, 0, 0, 1260, 0, 0, 0,
	1443, 812, 1260, 0, 0, 1335, 596, 0, 621, 0,
	0, 593, 0, 0, 1131, 0, 0, 1320, 0, 0,
	0, 1330, 811, 0, 0, 0, 1326, 1327, 1328, 31,
	1325, 1322, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 0,
	47, 0, 0, 35, 1472, 46, 0, 0, 1335, 0,
	36, 0, 0, 56, 0, 0, 0, 0, 39, 41,
	0, 0, 810, 0, 1330, 620, 0, 43, 0, 0,
	0, 0, 0, 0, 58, 817, 0, 0, 1331, 0,
	0, 0, 0, 0, 812, 0, 0, 48, 0, 593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 811, 0, 0, 54, 0,
	1525, 1526, 918, 0, 55, 0, 0, 0, 806, 806,
	0, 1331, 827, 0, 1552, 0, 1553, 0, 329, 1555,
	1556, 1557, 0, 53, 0, 0, 329, 0, 0, 0,
	0, 0, 0, 620, 0, 1326, 1327, 1328, 0, 1325,
	1322, 1323, 1324, 1316, 1317, 1318, 1319, 1321, 817, 1572,
	0, 1581, 918, 1572, 0, 0, 0, 593, 0, 0,
	0, 0, 329, 329, 306, 0, 329, 0, 0, 828,
	0, 0, 0, 0, 0, 806, 1260, 0, 1326, 1327,
	1328, 0, 1325, 1322, 1323, 1324, 1316, 1317, 1318, 1319,
	1321, 0, 0, 0, 0, 827, 0, 0, 0, 0,
	0, 0, 0, 0, 1620, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 0, 1068, 0, 1070,
	1071, 1072, 1073, 821, 813, 814, 815, 816, 818, 0,
	838, 0, 828, 0, 0, 0, 810, 0, 0, 918,
	0, 1639, 0, 273, 1641, 0, 0, 0, 0, 0,
	0, 0, 329, 0, 1116, 1117, 0, 1128, 812, 1138,
	1140, 1145, 1148, 1149, 1150, 0, 306, 0, 0, 306,
	306, 806, 0, 0, 0, 0, 0, 0, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 1572,
	0, 0, 853, 0, 0, 329, 857, 1686, 0, 0,
	0, 0, 0, 0, 0, 0, 329, 813, 814, 815,
	816, 818, 806, 838, 0, 0, 0, 1192, 0, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 817, 0, 0, 832, 0, 0, 0, 0,
	0, 0, 812, 0, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 0, 0, 1218, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 1722, 1723, 0, 0, 1727, 0, 0, 827,
	1728, 0, 1572, 0, 0, 273, 0, 0, 0, 0,
	0, 1581, 0, 0, 0, 0, 0, 0, 0, 38,
	806, 38, 0, 0, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 817, 0, 38, 0,
	0, 0, 0, 0, 0, 0, 0, 1759, 0, 806,
	329, 0, 273, 836, 844, 0, 828, 1315, 0, 1332,
	1333, 1334, 0, 0, 1265, 1266, 0, 842, 0, 0,
	1271, 1572, 1686, 0, 0, 0, 0, 834, 0, 0,
	0, 0, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1285, 0, 0, 329, 1315, 806, 1332,
	1333, 1334, 1293, 0, 0, 833, 1329, 0, 0, 0,
	1301, 0, 0, 1809, 1306, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 854, 838, 0, 0,
	828, 0, 1145, 1145, 1145, 0, 1329, 0, 0, 0,
	0, 837, 0, 1320, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1368, 0, 0, 0, 0, 0,
	0, 1336, 0, 0, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 1335, 0, 0, 0, 0, 0,
	0, 0, 451, 1320, 0, 0, 0, 0, 0, 0,
	1330, 451, 0, 0, 835, 555, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 1162, 810, 0, 829, 830, 831, 839,
	840, 841, 1163, 0, 0, 0, 0, 0, 0, 832,
	1330, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 1035, 0,
	0, 0, 0, 0, 0, 1446, 0, 811, 1447, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 0, 1452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1218, 1085, 0, 0, 0, 1331, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1479, 0, 0, 1481, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 1326, 1327, 1328, 0, 1325, 1322,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 1511, 1512, 0, 0,
	0, 842, 0, 0, 0, 1518, 1519, 1520, 0, 0,
	0, 834, 0, 0, 1326, 1327, 1328, 827, 1325, 1322,
	1323, 1324, 1316, 1317, 1318, 1319, 1321, 0, 0, 0,
	0, 0, 1315, 0, 1332, 1333, 1334, 0, 314, 833,
	0, 0, 0, 451, 0, 0, 0, 1454, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 828, 0, 0, 0, 1587, 832,
	0, 1329, 0, 0, 0, 837, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1606, 0, 0, 0, 1609, 1610, 811, 0, 0,
	1612, 0, 0, 826, 1614, 0, 0, 0, 0, 0,
	0, 1618, 0, 0, 0, 1621, 38, 0, 1320, 0,
	0, 0, 0, 0, 0, 0, 1261, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 1630, 0, 1335,
	817, 0, 1633, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 0, 0, 0, 0,
	1657, 834, 0, 0, 0, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1676, 0, 0, 810, 833,
	0, 0, 1331, 0, 853, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1690, 0, 0, 0, 0,
	812, 0, 0, 0, 0, 1697, 1698, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 810, 837, 829, 830, 831, 839,
	840, 841, 0, 0, 1710, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 1714, 843, 1326,
	1327, 1328, 1035, 1325, 1322, 1323, 1324, 1316, 1317, 1318,
	1319, 1321, 0, 0, 0, 0, 0, 811, 0, 555,
	0, 0, 0, 826, 817, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 274, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 1035, 838, 0, 0, 1035, 0,
	0, 287, 1356, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 832,
	817, 827, 0, 0, 0, 0, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 276, 836, 844, 0,
	0, 281, 282, 0, 288, 0, 0, 811, 0, 0,
	0, 842, 0, 826, 0, 0, 275, 277, 0, 0,
	0, 834, 0, 0, 1794, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 828, 1807,
	1807, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 278, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 1807, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 836, 844, 0,
	0, 283, 0, 0, 828, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 837, 0, 0, 1807, 0,
	0, 834, 0, 38, 0, 0, 0, 827, 0, 0,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1035, 1035, 0, 0, 1035, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 828, 838, 0, 0, 0, 0,
	0, 0, 1355, 0, 0, 837, 284, 0, 0, 285,
	0, 0, 0, 0, 286, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 0,
	0, 0, 1354, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1667, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1035, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 680, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 685,
	88, 686, 687, 688, 689, 195, 690, 691, 692, 693,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 694,
	92, 202, 203, 93, 695, 696, 204, 205, 206, 697,
	207, 698, 360, 699, 94, 95, 96, 853, 97, 700,
	98, 99, 701, 361, 100, 101, 702, 703, 704, 705,
	706, 707, 102, 103, 104, 105, 208, 106, 209, 210,
	708, 107, 709, 108, 710, 711, 712, 109, 110, 713,
	111, 714, 0, 715, 211, 112, 113, 212, 716, 717,
	718, 114, 115, 213, 0, 116, 719, 117, 720, 721,
	362, 722, 118, 214, 723, 215, 724, 119, 120, 216,
	217, 364, 725, 123, 726, 121, 727, 363, 122, 218,
	219, 220, 728, 221, 729, 365, 124, 366, 125, 126,
	730, 731, 222, 367, 127, 368, 732, 128, 733, 734,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 735, 138, 736, 223, 140, 224, 141, 142,
	737, 738, 739, 740, 741, 143, 225, 370, 144, 371,
	226, 145, 146, 147, 742, 227, 148, 228, 149, 743,
	150, 151, 152, 229, 153, 154, 744, 156, 157, 155,
	158, 745, 159, 372, 160, 161, 230, 162, 0, 163,
	164, 165, 746, 231, 166, 167, 747, 168, 169, 373,
	170, 232, 233, 171, 748, 172, 173, 175, 234, 174,
	235, 749, 176, 750, 177, 178, 751, 236, 237, 238,
	752, 753, 179, 239, 240, 754, 180, 181, 182, 183,
	755, 756, 184, 185, 186, 757, 758, 187, 188, 189,
	241, 242, 759, 190, 760, 761, 762, 763, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1442, 86,
	87, 685, 88, 686, 687, 688, 689, 195, 690, 691,
	692, 693, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 694, 92, 202, 203, 93, 695, 696, 204, 205,
	206, 697, 207, 698, 360, 699, 94, 95, 96, 0,
	97, 700, 98, 99, 701, 361, 100, 101, 702, 703,
	704, 705, 706, 707, 102, 103, 104, 105, 208, 106,
	209, 210, 708, 107, 709, 108, 710, 711, 712, 109,
	110, 713, 111, 714, 0, 715, 211, 112, 113, 212,
	716, 717, 718, 114, 115, 213, 0, 116, 719, 117,
	720, 721, 362, 722, 118, 214, 723, 215, 724, 119,
	120, 216, 217, 364, 725, 123, 726, 121, 727, 363,
	122, 218, 219, 220, 728, 221, 729, 365, 124, 366,
	125, 126, 730, 731, 222, 367, 127, 368, 732, 128,
	733, 734, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 735, 138, 736, 223, 140, 224,
	141, 142, 737, 738, 739, 740, 741, 143, 225, 370,
	144, 371, 226, 145, 146, 147, 742, 227, 148, 228,
	149, 743, 150, 151, 152, 229, 153, 154, 744, 156,
	157, 155, 158, 745, 159, 372, 160, 161, 230, 162,
	0, 163, 164, 165, 746, 231, 166, 167, 747, 168,
	169, 373, 170, 232, 233, 171, 748, 172, 173, 175,
	234, 174, 235, 749, 176, 750, 177, 178, 751, 236,
	237, 238, 752, 753, 179, 239, 240, 754, 180, 181,
	182, 183, 755, 756, 184, 185, 186, 757, 758, 187,
	188, 189, 241, 242, 759, 190, 760, 761, 762, 763,
	191, 192, 193, 194, 680, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 906, 0, 86,
	87, 685, 88, 686, 687, 688, 689, 195, 690, 691,
	692, 693, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 694, 92, 202, 203, 93, 695, 696, 204, 205,
	206, 697, 207, 698, 360, 699, 94, 95, 96, 0,
	97, 700, 98, 99, 701, 361, 100, 101, 702, 703,
	704, 705, 706, 707, 102, 103, 104, 105, 208, 106,
	209, 210, 708, 107, 709, 108, 710, 711, 712, 109,
	110, 713, 111, 714, 0, 715, 211, 112, 113, 212,
	716, 717, 718, 114, 115, 213, 0, 116, 719, 117,
	720, 721, 362, 722, 118, 214, 723, 215, 724, 119,
	120, 216, 217, 364, 725, 123, 726, 121, 727, 363,
	122, 218, 219, 220, 728, 221, 729, 365, 124, 366,
	125, 126, 730, 731, 222, 367, 127, 368, 732, 128,
	733, 734, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 735, 138, 736, 223, 140, 224,
	141, 142, 737, 738, 739, 740, 741, 143, 225, 370,
	144, 371, 226, 145, 146, 147, 742, 227, 148, 228,
	149, 743, 150, 151, 152, 229, 153, 154, 744, 156,
	157, 155, 158, 745, 159, 372, 160, 161, 230, 162,
	0, 163, 164, 165, 746, 231, 166, 167, 747, 168,
	169, 373, 170, 232, 233, 171, 748, 172, 173, 175,
	234, 174, 235, 749, 176, 750, 177, 178, 751, 236,
	237, 238, 752, 753, 179, 239, 240, 754, 180, 181,
	182, 183, 755, 756, 184, 185, 186, 757, 758, 187,
	188, 189, 241, 242, 759, 190, 760, 761, 762, 763,
	191, 192, 193, 194, 486, 475, 476, 473, 474, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 1102, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 1103, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 1101, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 455, 1104, 0, 0,
	0, 456, 0, 0, 463, 1099, 486, 475, 476, 473,
	474, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 502,
	468, 0, 0, 0, 89, 90, 196, 516, 198, 517,
	91, 518, 519, 0, 92, 202, 203, 93, 483, 501,
	520, 521, 206, 0, 512, 0, 494, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 495, 497, 0, 496, 498, 102, 103, 104, 105,
	522, 106, 523, 524, 556, 107, 0, 108, 0, 0,
	0, 515, 110, 0, 111, 0, 0, 0, 467, 112,
	113, 503, 481, 0, 0, 114, 115, 525, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 513, 0, 215,
	0, 119, 120, 509, 511, 364, 0, 123, 0, 121,
	0, 363, 122, 526, 527, 528, 0, 493, 0, 365,
	124, 366, 125, 126, 0, 0, 514, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 457, 138, 482, 510,
	140, 529, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 504, 145, 146, 147, 0, 505,
	148, 228, 149, 0, 150, 151, 152, 530, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	471, 162, 0, 163, 164, 165, 56, 231, 166, 167,
	499, 168, 169, 373, 170, 531, 233, 171, 0, 172,
	173, 175, 532, 174, 506, 0, 176, 58, 177, 178,
	0, 236, 533, 534, 0, 0, 179, 507, 508, 480,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 500,
	0, 187, 188, 189, 359, 535, 0, 190, 0, 0,
	0, 54, 191, 192, 193, 194, 458, 55, 0, 486,
	475, 476, 473, 474, 462, 0, 0, 454, 455, 0,
	0, 0, 0, 456, 86, 87, 463, 88, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 89, 90, 196,
	516, 198, 517, 91, 518, 519, 0, 92, 202, 203,
	93, 483, 501, 520, 521, 206, 0, 512, 0, 494,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 495, 497, 0, 496, 498, 102,
	103, 104, 105, 522, 106, 523, 524, 0, 107, 0,
	108, 0, 0, 0, 515, 110, 0, 111, 0, 0,
	0, 467, 112, 113, 503, 481, 0, 0, 114, 115,
	525, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	513, 0, 215, 0, 119, 120, 509, 511, 364, 0,
	123, 0, 121, 0, 363, 122, 526, 527, 528, 0,
	493, 0, 365, 124, 366, 125, 126, 0, 0, 514,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 457,
	138, 482, 510, 140, 529, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 504, 145, 146,
	147, 0, 505, 148, 228, 149, 0, 150, 151, 152,
	530, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 471, 162, 0, 163, 164, 165, 56,
	231, 166, 167, 499, 168, 169, 373, 170, 531, 233,
	171, 0, 172, 173, 175, 532, 174, 506, 0, 176,
	58, 177, 178, 0, 236, 533, 534, 0, 0, 179,
	507, 508, 480, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 500, 0, 187, 188, 189, 359, 535, 0,
	190, 0, 0, 0, 54, 191, 192, 193, 194, 458,
	55, 0, 486, 475, 476, 473, 474, 462, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 86, 87, 463,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 1141,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 1146,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 1142, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 1143, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	86, 87, 463, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 458, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 0, 0, 463, 1508, 486, 475, 476,
	473, 474, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	502, 468, 0, 0, 0, 89, 90, 196, 516, 198,
	517, 91, 518, 519, 0, 92, 202, 203, 93, 483,
	501, 520, 521, 206, 0, 512, 0, 494, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 495, 497, 0, 496, 498, 102, 103, 104,
	105, 522, 106, 523, 524, 0, 107, 0, 108, 0,
	0, 0, 515, 110, 0, 111, 0, 0, 0, 467,
	112, 113, 503, 481, 0, 0, 114, 115, 525, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 513, 0,
	215, 0, 119, 120, 509, 511, 364, 0, 123, 0,
	121, 0, 363, 122, 526, 527, 528, 0, 493, 0,
	365, 124, 366, 125, 126, 0, 0, 514, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 457, 138, 482,
	510, 140, 529, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 504, 145, 146, 147, 0,
	505, 148, 228, 149, 0, 150, 151, 152, 530, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 471, 162, 0, 163, 164, 165, 0, 231, 166,
	167, 499, 168, 169, 373, 170, 531, 233, 171, 0,
	172, 173, 175, 532, 174, 506, 0, 176, 0, 177,
	178, 0, 236, 533, 534, 0, 0, 179, 507, 508,
	480, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	500, 0, 187, 188, 189, 241, 535, 0, 190, 0,
	0, 0, 0, 191, 192, 193, 194, 458, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 454, 455,
	0, 0, 0, 0, 456, 0, 0, 463, 1458, 486,
	475, 476, 473, 474, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 502, 468, 0, 0, 0, 89, 90, 196,
	516, 198, 517, 91, 518, 519, 0, 92, 202, 203,
	93, 483, 501, 520, 521, 206, 0, 512, 0, 494,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	361, 100, 101, 0, 495, 497, 0, 496, 498, 102,
	103, 104, 105, 522, 106, 523, 524, 0, 107, 0,
	108, 0, 0, 0, 515, 110, 0, 111, 0, 0,
	0, 467, 112, 113, 503, 481, 0, 0, 114, 115,
	525, 0, 116, 0, 117, 0, 0, 362, 0, 118,
	513, 0, 215, 0, 119, 120, 509, 511, 364, 0,
	123, 0, 121, 0, 363, 122, 526, 527, 528, 0,
	493, 0, 365, 124, 366, 125, 126, 0, 0, 514,
	367, 127, 368, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 369, 135, 136, 139, 137, 457,
	138, 482, 510, 140, 529, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 370, 144, 371, 504, 145, 146,
	147, 0, 505, 148, 228, 149, 0, 150, 151, 152,
	530, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	372, 160, 161, 471, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 499, 168, 169, 373, 170, 531, 233,
	171, 0, 172, 173, 175, 532, 174, 506, 0, 176,
	0, 177, 178, 0, 236, 533, 534, 0, 0, 179,
	507, 508, 480, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 500, 0, 187, 188, 189, 241, 535, 0,
	190, 0, 0, 0, 0, 191, 192, 193, 194, 458,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	454, 455, 0, 0, 0, 0, 456, 0, 0, 463,
	1098, 486, 475, 476, 473, 474, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 859,
	1095, 463, 486, 475, 476, 473, 474, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 452, 0, 0, 0, 456,
	86, 87, 463, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 101, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 1463, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 458, 0, 0, 486, 475,
	476, 473, 474, 462, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 86, 87, 463, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 196, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 101, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 556, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 1146, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 0,
	0, 463, 486, 475, 476, 473, 474, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 794,
	88, 0, 0, 0, 0, 502, 468, 0, 0, 0,
	89, 90, 196, 516, 198, 517, 91, 518, 519, 0,
	92, 202, 203, 93, 483, 501, 520, 521, 206, 0,
	512, 0, 494, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 361, 100, 101, 0, 495, 497, 0,
	496, 498, 102, 103, 104, 105, 522, 106, 523, 524,
	0, 107, 0, 108, 0, 0, 0, 515, 110, 0,
	111, 0, 0, 0, 467, 112, 113, 503, 481, 0,
	0, 114, 115, 525, 0, 116, 0, 117, 0, 0,
	362, 0, 118, 513, 0, 215, 0, 119, 120, 509,
	511, 364, 0, 123, 0, 121, 0, 363, 122, 526,
	527, 528, 0, 493, 0, 365, 124, 366, 125, 126,
	0, 0, 514, 367, 127, 368, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 369, 135, 136,
	139, 137, 457, 138, 482, 510, 140, 529, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 370, 144, 371,
	504, 145, 146, 147, 0, 505, 148, 228, 149, 0,
	150, 151, 152, 530, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 372, 160, 161, 471, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 499, 168, 169, 373,
	170, 531, 233, 171, 0, 172, 173, 175, 532, 174,
	506, 0, 176, 0, 177, 178, 0, 236, 533, 534,
	0, 0, 179, 507, 508, 480, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 500, 0, 187, 188, 189,
	241, 535, 0, 190, 0, 0, 0, 0, 191, 192,
	193, 194, 458, 0, 0, 486, 475, 476, 473, 474,
	462, 0, 0, 454, 455, 0, 0, 0, 0, 456,
	86, 87, 463, 88, 0, 0, 0, 0, 502, 468,
	0, 0, 0, 89, 90, 196, 516, 198, 517, 91,
	518, 519, 0, 92, 202, 203, 93, 483, 501, 520,
	521, 206, 0, 512, 0, 494, 0, 94, 95, 96,
	0, 97, 0, 98, 99, 0, 361, 100, 1806, 0,
	495, 497, 0, 496, 498, 102, 103, 104, 105, 522,
	106, 523, 524, 0, 107, 0, 108, 0, 0, 0,
	515, 110, 0, 111, 0, 0, 0, 467, 112, 113,
	503, 481, 0, 0, 114, 115, 525, 0, 116, 0,
	117, 0, 0, 362, 0, 118, 513, 0, 215, 0,
	119, 120, 509, 511, 364, 0, 123, 0, 121, 0,
	363, 122, 526, 527, 528, 0, 493, 0, 365, 124,
	366, 125, 126, 0, 0, 514, 367, 127, 368, 0,
	128, 0, 0, 129, 0, 130, 131, 132, 133, 134,
	369, 135, 136, 139, 137, 457, 138, 482, 510, 140,
	529, 141, 142, 0, 0, 0, 0, 0, 143, 225,
	370, 144, 371, 504, 145, 146, 147, 0, 505, 148,
	228, 149, 0, 150, 151, 152, 530, 153, 154, 0,
	156, 157, 155, 158, 0, 159, 372, 160, 161, 471,
	162, 0, 163, 164, 165, 0, 231, 166, 167, 499,
	168, 169, 373, 170, 531, 233, 171, 0, 172, 173,
	175, 532, 174, 506, 0, 176, 0, 177, 178, 0,
	236, 533, 534, 0, 0, 179, 507, 508, 480, 180,
	181, 1805, 183, 0, 0, 184, 185, 186, 500, 0,
	187, 188, 189, 241, 535, 0, 190, 0, 0, 0,
	0, 191, 192, 193, 194, 458, 0, 0, 486, 475,
	476, 473, 474, 462, 0, 0, 454, 455, 0, 0,
	0, 0, 456, 86, 87, 463, 88, 0, 0, 0,
	0, 502, 468, 0, 0, 0, 89, 90, 1804, 516,
	198, 517, 91, 518, 519, 0, 92, 202, 203, 93,
	483, 501, 520, 521, 206, 0, 512, 0, 494, 0,
	94, 95, 96, 0, 97, 0, 98, 99, 0, 361,
	100, 1806, 0, 495, 497, 0, 496, 498, 102, 103,
	104, 105, 522, 106, 523, 524, 0, 107, 0, 108,
	0, 0, 0, 515, 110, 0, 111, 0, 0, 0,
	467, 112, 113, 503, 481, 0, 0, 114, 115, 525,
	0, 116, 0, 117, 0, 0, 362, 0, 118, 513,
	0, 215, 0, 119, 120, 509, 511, 364, 0, 123,
	0, 121, 0, 363, 122, 526, 527, 528, 0, 493,
	0, 365, 124, 366, 125, 126, 0, 0, 514, 367,
	127, 368, 0, 128, 0, 0, 129, 0, 130, 131,
	132, 133, 134, 369, 135, 136, 139, 137, 457, 138,
	482, 510, 140, 529, 141, 142, 0, 0, 0, 0,
	0, 143, 225, 370, 144, 371, 504, 145, 146, 147,
	0, 505, 148, 228, 149, 0, 150, 151, 152, 530,
	153, 154, 0, 156, 157, 155, 158, 0, 159, 372,
	160, 161, 471, 162, 0, 163, 164, 165, 0, 231,
	166, 167, 499, 168, 169, 373, 170, 531, 233, 171,
	0, 172, 173, 175, 532, 174, 506, 0, 176, 0,
	177, 178, 0, 236, 533, 534, 0, 0, 179, 507,
	508, 480, 180, 181, 1805, 183, 0, 0, 184, 185,
	186, 500, 0, 187, 188, 189, 241, 535, 0, 190,
	0, 0, 0, 0, 191, 192, 193, 194, 458, 0,
	0, 486, 475, 476, 473, 474, 462, 0, 0, 454,
	455, 0, 0, 0, 0, 456, 86, 87, 463, 88,
	0, 0, 0, 0, 502, 468, 0, 0, 0, 89,
	90, 196, 516, 198, 517, 91, 518, 519, 0, 92,
	202, 203, 93, 483, 501, 520, 521, 206, 0, 512,
	0, 494, 0, 94, 95, 96, 0, 97, 0, 98,
	99, 0, 361, 100, 101, 0, 495, 497, 0, 496,
	498, 102, 103, 104, 105, 522, 106, 523, 524, 0,
	107, 0, 108, 0, 0, 0, 515, 110, 0, 111,
	0, 0, 0, 467, 112, 113, 503, 481, 0, 0,
	114, 115, 525, 0, 116, 0, 117, 0, 0, 362,
	0, 118, 513, 0, 215, 0, 119, 120, 509, 511,
	364, 0, 123, 0, 121, 0, 363, 122, 526, 527,
	528, 0, 493, 0, 365, 124, 366, 125, 126, 0,
	0, 514, 367, 127, 368, 0, 128, 0, 0, 129,
	0, 130, 131, 132, 133, 134, 369, 135, 136, 139,
	137, 457, 138, 482, 510, 140, 529, 141, 142, 0,
	0, 0, 0, 0, 143, 225, 370, 144, 371, 504,
	145, 146, 147, 0, 505, 148, 228, 149, 0, 150,
	151, 152, 530, 153, 154, 0, 156, 157, 155, 158,
	0, 159, 372, 160, 161, 471, 162, 0, 163, 164,
	165, 0, 231, 166, 167, 499, 168, 169, 373, 170,
	531, 233, 171, 0, 172, 173, 175, 532, 174, 506,
	0, 176, 0, 177, 178, 0, 236, 533, 534, 0,
	0, 179, 507, 508, 480, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 500, 0, 187, 188, 189, 241,
	535, 0, 190, 0, 0, 0, 0, 191, 192, 193,
	194, 458, 0, 0, 486, 475, 476, 473, 474, 462,
	0, 0, 454, 455, 0, 0, 0, 0, 456, 86,
	87, 463, 88, 0, 0, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 196, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 0, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 1136, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 486, 475, 476, 473, 474, 462,
	0, 0, 0, 0, 0, 1132, 1133, 0, 0, 86,
	87, 1134, 88, 0, 1135, 0, 0, 502, 468, 0,
	0, 0, 89, 90, 0, 516, 198, 517, 91, 518,
	519, 0, 92, 202, 203, 93, 483, 501, 520, 521,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 1806, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 522, 106,
	523, 524, 0, 107, 0, 108, 0, 0, 0, 515,
	110, 0, 111, 0, 0, 0, 467, 112, 113, 503,
	481, 0, 0, 114, 115, 525, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 0, 0, 123, 0, 121, 0, 363,
	122, 526, 527, 528, 0, 493, 0, 0, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 457, 138, 482, 510, 140, 529,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 530, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 471, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 0, 170, 531, 233, 171, 0, 172, 173, 175,
	532, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	533, 534, 0, 0, 179, 507, 508, 480, 180, 181,
	1805, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 535, 0, 190, 0, 0, 0, 0,
	191, 192, 193, 194, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 454, 455, 0, 0, 86,
	87, 456, 88, 0, 463, 0, 0, 502, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 501, 204, 205,
	206, 0, 512, 0, 494, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 361, 100, 101, 0, 495,
	497, 0, 496, 498, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 503,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 362, 0, 118, 513, 0, 215, 0, 119,
	120, 509, 511, 364, 0, 123, 0, 121, 0, 363,
	122, 218, 219, 220, 0, 221, 0, 365, 124, 366,
	125, 126, 0, 0, 514, 367, 127, 368, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 369,
	135, 136, 139, 137, 0, 138, 0, 510, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 370,
	144, 371, 504, 145, 146, 147, 0, 505, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 372, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 499, 168,
	169, 373, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 506, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 507, 508, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 500, 0, 187,
	188, 189, 241, 242, 0, 190, 0, 355, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	195, 0, 0, 0, 1574, 89, 90, 196, 197, 198,
	199, 91, 200, 201, 0, 92, 202, 203, 93, 0,
	0, 204, 205, 206, 0, 207, 0, 360, 0, 94,
	95, 96, 0, 97, 0, 98, 99, 0, 361, 100,
	101, 0, 0, 0, 0, 0, 0, 102, 103, 104,
	105, 208, 106, 209, 210, 0, 107, 0, 108, 0,
	0, 0, 109, 110, 0, 111, 0, 0, 0, 211,
	112, 113, 212, 0, 0, 0, 114, 115, 213, 0,
	116, 0, 117, 0, 0, 362, 0, 118, 214, 0,
	215, 0, 119, 120, 216, 217, 364, 0, 123, 0,
	121, 0, 363, 122, 218, 219, 220, 0, 221, 0,
	365, 124, 366, 125, 126, 0, 0, 222, 367, 127,
	368, 0, 128, 0, 0, 129, 0, 130, 131, 132,
	133, 134, 369, 135, 136, 139, 137, 0, 138, 0,
	223, 140, 224, 141, 142, 0, 0, 0, 0, 0,
	143, 225, 370, 144, 371, 226, 145, 146, 147, 0,
	227, 148, 228, 149, 0, 150, 151, 152, 229, 153,
	154, 0, 156, 157, 155, 158, 0, 159, 372, 160,
	161, 230, 162, 0, 163, 164, 165, 56, 231, 166,
	167, 0, 168, 169, 373, 170, 232, 233, 171, 0,
	172, 173, 175, 234, 174, 235, 0, 176, 58, 177,
	178, 0, 236, 237, 238, 0, 0, 179, 239, 240,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 0, 187, 188, 189, 359, 242, 0, 190, 0,
	0, 0, 54, 191, 192, 193, 194, 0, 55, 0,
	355, 665, 0, 666, 661, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 53, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	360, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 669, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 658, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 364,
	0, 123, 0, 121, 0, 363, 122, 218, 219, 220,
	0, 221, 0, 365, 124, 366, 125, 126, 0, 0,
	222, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 659,
	0, 0, 0, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 373, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 657, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	355, 665, 0, 666, 661, 656, 0, 0, 0, 0,
	0, 667, 662, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	360, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 652, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 658, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 364,
	0, 123, 0, 121, 0, 363, 122, 218, 219, 220,
	0, 221, 0, 365, 124, 366, 125, 126, 0, 0,
	222, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 659,
	0, 0, 0, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 373, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 657, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	355, 665, 0, 666, 661, 656, 0, 0, 0, 0,
	0, 667, 662, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	360, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 361, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 658, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 362, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 364,
	0, 123, 0, 121, 0, 363, 122, 218, 219, 220,
	0, 221, 0, 365, 124, 366, 125, 126, 0, 0,
	222, 367, 127, 368, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 369, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 659,
	0, 0, 0, 143, 225, 370, 144, 371, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 372, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 373, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 657, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	83, 190, 0, 0, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 667, 662, 195, 0, 0, 0, 0, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	328, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	56, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 58, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 359, 242,
	0, 190, 0, 83, 0, 54, 191, 192, 193, 194,
	0, 55, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	1037, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 56, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 58, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 359, 242, 0, 190, 0, 83, 0, 54, 191,
	192, 193, 194, 0, 55, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 1259, 0, 53, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 0,
	83, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 0, 0, 195, 0, 0, 0, 444, 89, 90,
	196, 197, 198, 199, 91, 200, 201, 0, 92, 202,
	203, 93, 0, 0, 204, 205, 206, 0, 207, 0,
	0, 0, 94, 95, 96, 0, 97, 0, 98, 99,
	0, 0, 100, 101, 0, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 208, 106, 209, 210, 0, 107,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 211, 112, 113, 212, 0, 0, 0, 114,
	115, 213, 0, 116, 0, 117, 0, 0, 0, 0,
	118, 214, 0, 215, 0, 119, 120, 216, 217, 0,
	0, 123, 0, 121, 0, 0, 122, 218, 219, 220,
	0, 221, 0, 0, 124, 0, 125, 126, 0, 0,
	222, 0, 127, 0, 0, 128, 0, 0, 129, 0,
	130, 131, 132, 133, 134, 0, 135, 136, 139, 137,
	0, 138, 0, 223, 140, 224, 141, 142, 0, 0,
	328, 0, 0, 143, 225, 0, 144, 0, 226, 145,
	146, 147, 0, 227, 148, 228, 149, 0, 150, 151,
	152, 229, 153, 154, 0, 156, 157, 155, 158, 0,
	159, 0, 160, 161, 230, 162, 0, 163, 164, 165,
	0, 231, 166, 167, 0, 168, 169, 0, 170, 232,
	233, 171, 0, 172, 173, 175, 234, 174, 235, 0,
	176, 0, 177, 178, 0, 236, 237, 238, 0, 0,
	179, 239, 240, 0, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 0, 0, 187, 188, 189, 241, 242,
	0, 190, 0, 83, 0, 0, 191, 192, 193, 194,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 0, 0, 195, 0, 0, 0,
	1037, 89, 90, 196, 197, 198, 199, 91, 200, 201,
	0, 92, 202, 203, 93, 0, 0, 204, 205, 206,
	0, 207, 0, 0, 0, 94, 95, 96, 0, 97,
	0, 98, 99, 0, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 102, 103, 104, 105, 208, 106, 209,
	210, 0, 107, 0, 108, 0, 0, 0, 109, 110,
	0, 111, 0, 0, 0, 211, 112, 113, 212, 0,
	0, 0, 114, 115, 213, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 214, 0, 215, 0, 119, 120,
	216, 217, 0, 0, 123, 0, 121, 0, 0, 122,
	218, 219, 220, 0, 221, 0, 0, 124, 0, 125,
	126, 0, 0, 222, 0, 127, 0, 0, 128, 0,
	0, 129, 0, 130, 131, 132, 133, 134, 0, 135,
	136, 139, 137, 0, 138, 0, 223, 140, 224, 141,
	142, 0, 0, 0, 0, 0, 143, 225, 0, 144,
	0, 226, 145, 146, 147, 0, 227, 148, 228, 149,
	0, 150, 151, 152, 229, 153, 154, 0, 156, 157,
	155, 158, 0, 159, 0, 160, 161, 230, 162, 0,
	163, 164, 165, 0, 231, 166, 167, 0, 168, 169,
	0, 170, 232, 233, 171, 0, 172, 173, 175, 234,
	174, 235, 0, 176, 0, 177, 178, 0, 236, 237,
	238, 0, 0, 179, 239, 240, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 0, 187, 188,
	189, 241, 242, 0, 190, 0, 83, 0, 0, 191,
	192, 193, 194, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 948, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 83,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 195, 0, 0, 0, 1473, 89, 90, 196,
	197, 198, 199, 91, 200, 201, 0, 92, 202, 203,
	93, 0, 0, 204, 205, 206, 0, 207, 0, 0,
	0, 94, 95, 96, 0, 97, 0, 98, 99, 0,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 102,
	103, 104, 105, 208, 106, 209, 210, 0, 107, 0,
	108, 0, 0, 0, 109, 110, 0, 111, 0, 0,
	0, 211, 112, 113, 212, 0, 0, 0, 114, 115,
	213, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	214, 0, 215, 0, 119, 120, 216, 217, 0, 0,
	123, 0, 121, 0, 0, 122, 218, 219, 220, 0,
	221, 0, 0, 124, 0, 125, 126, 0, 0, 222,
	0, 127, 0, 0, 128, 0, 0, 129, 0, 130,
	131, 132, 133, 134, 0, 135, 136, 139, 137, 0,
	138, 0, 223, 140, 224, 141, 142, 0, 0, 0,
	0, 0, 143, 225, 0, 144, 0, 226, 145, 146,
	147, 0, 227, 148, 228, 149, 0, 150, 151, 152,
	229, 153, 154, 0, 156, 157, 155, 158, 0, 159,
	0, 160, 161, 230, 162, 0, 163, 164, 165, 0,
	231, 166, 167, 0, 168, 169, 0, 170, 232, 233,
	171, 0, 172, 173, 175, 234, 174, 235, 0, 176,
	0, 177, 178, 0, 236, 237, 238, 0, 0, 179,
	239, 240, 0, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 0, 0, 187, 188, 189, 241, 242, 0,
	190, 0, 83, 0, 0, 191, 192, 193, 194, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 195, 0, 0, 0, 546,
	89, 90, 196, 197, 198, 199, 91, 200, 201, 0,
	92, 202, 203, 93, 0, 0, 204, 205, 206, 0,
	207, 0, 0, 0, 94, 95, 96, 0, 97, 0,
	98, 99, 0, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 102, 103, 636, 105, 208, 106, 209, 210,
	0, 107, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 211, 112, 113, 212, 0, 0,
	0, 114, 115, 213, 0, 116, 0, 117, 0, 0,
	0, 0, 118, 214, 0, 215, 0, 119, 120, 216,
	217, 0, 0, 123, 0, 121, 0, 0, 122, 218,
	219, 220, 0, 221, 0, 0, 124, 0, 125, 126,
	0, 0, 222, 0, 127, 0, 0, 128, 0, 0,
	129, 0, 130, 131, 132, 133, 134, 0, 135, 136,
	139, 137, 0, 138, 0, 223, 140, 224, 141, 142,
	0, 0, 0, 0, 0, 143, 225, 0, 144, 0,
	226, 145, 146, 147, 0, 227, 148, 228, 149, 0,
	150, 151, 152, 229, 153, 154, 0, 156, 157, 155,
	158, 0, 159, 0, 160, 161, 230, 162, 0, 163,
	164, 165, 0, 231, 166, 167, 0, 168, 169, 0,
	170, 232, 233, 171, 0, 172, 173, 175, 234, 174,
	235, 0, 176, 635, 177, 178, 0, 236, 237, 238,
	0, 0, 179, 239, 240, 0, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 0, 187, 188, 189,
	241, 242, 0, 190, 83, 0, 0, 0, 191, 192,
	193, 194, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 639, 0, 195, 0, 0,
	0, 0, 89, 90, 196, 197, 198, 199, 91, 200,
	201, 0, 92, 202, 203, 93, 0, 0, 204, 205,
	206, 0, 207, 0, 0, 0, 94, 95, 96, 0,
	97, 0, 98, 99, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 102, 103, 104, 105, 208, 106,
	209, 210, 0, 107, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 211, 112, 113, 212,
	0, 0, 0, 114, 115, 213, 0, 116, 0, 117,
	0, 0, 0, 0, 118, 214, 0, 215, 0, 119,
	120, 216, 217, 0, 0, 123, 0, 121, 0, 0,
	122, 218, 219, 220, 0, 221, 0, 0, 124, 0,
	125, 126, 0, 0, 222, 0, 127, 0, 0, 128,
	0, 0, 129, 0, 130, 131, 132, 133, 134, 0,
	135, 136, 139, 137, 0, 138, 0, 223, 140, 224,
	141, 142, 0, 0, 0, 0, 0, 143, 225, 0,
	144, 0, 226, 145, 146, 147, 0, 227, 148, 228,
	149, 0, 150, 151, 152, 229, 153, 154, 0, 156,
	157, 155, 158, 0, 159, 0, 160, 161, 230, 162,
	0, 163, 164, 165, 0, 231, 166, 167, 0, 168,
	169, 0, 170, 232, 233, 171, 0, 172, 173, 175,
	234, 174, 235, 0, 176, 0, 177, 178, 0, 236,
	237, 238, 0, 0, 179, 239, 240, 0, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 0, 187,
	188, 189, 241, 242, 0, 190, 355, 0, 0, 0,
	191, 192, 193, 194, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 639, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 360, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 361, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 362, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 364, 0, 123, 0, 121,
	0, 363, 122, 218, 219, 220, 0, 221, 0, 365,
	124, 366, 125, 126, 0, 0, 222, 367, 127, 368,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 369, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 370, 144, 371, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 372, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 373, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 921, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 919, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 1014, 0, 114, 115, 213, 0, 116,
	0, 117, 924, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 1012, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 923, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 1013, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 921, 207, 0, 0, 916, 94, 95,
	96, 0, 97, 919, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 924, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 915, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 923, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 922, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 1259, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 588, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 380, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 334, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 328, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 246, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 245, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 1182, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 1180, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 1171, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 784, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 260, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 575, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 0, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 429, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 426, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 386, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	271, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 270, 237, 238, 0, 0, 266, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	271, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 270, 237, 238, 0, 0, 266, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 350, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 347, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 345, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 337, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 317, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 162, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 263, 0, 0, 129, 0, 130, 131, 132, 133,
	271, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 147, 0, 227,
	148, 228, 149, 0, 150, 151, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	265, 162, 0, 163, 164, 165, 0, 231, 166, 264,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 270, 237, 238, 0, 0, 266, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 83, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 195,
	0, 0, 0, 0, 89, 90, 196, 197, 198, 199,
	91, 200, 201, 0, 92, 202, 203, 93, 0, 0,
	204, 205, 206, 0, 207, 0, 0, 0, 94, 95,
	96, 0, 97, 0, 98, 99, 0, 0, 100, 101,
	0, 0, 0, 0, 0, 0, 102, 103, 104, 105,
	208, 106, 209, 210, 0, 107, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 211, 112,
	113, 212, 0, 0, 0, 114, 115, 213, 0, 116,
	0, 117, 0, 0, 0, 0, 118, 214, 0, 215,
	0, 119, 120, 216, 217, 0, 0, 123, 0, 121,
	0, 0, 122, 218, 219, 220, 0, 221, 0, 0,
	124, 0, 125, 126, 0, 0, 222, 0, 127, 0,
	0, 128, 0, 0, 129, 0, 130, 131, 132, 133,
	134, 0, 135, 136, 139, 137, 0, 138, 0, 223,
	140, 224, 141, 142, 0, 0, 0, 0, 0, 143,
	225, 0, 144, 0, 226, 145, 146, 0, 0, 227,
	148, 228, 149, 0, 150, 0, 152, 229, 153, 154,
	0, 156, 157, 155, 158, 0, 159, 0, 160, 161,
	230, 0, 0, 163, 164, 165, 0, 231, 166, 167,
	0, 168, 169, 0, 170, 232, 233, 171, 0, 172,
	173, 175, 234, 174, 235, 0, 176, 0, 177, 178,
	0, 236, 237, 238, 0, 0, 179, 239, 240, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	0, 187, 188, 189, 241, 242, 0, 190, 0, 0,
	0, 0, 191, 192, 193, 194, 810, 0, 829, 830,
	831, 839, 840, 841, 0, 0, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 0, 812, 0,
	843, 0, 810, 0, 829, 830, 831, 839, 840, 841,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 811,
	0, 0, 0, 0, 812, 826, 843, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 811, 0, 0, 0, 0,
	832, 826, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 817, 0, 0, 0, 832, 0, 811, 0,
	0, 0, 0, 812, 826, 843, 0, 0, 0, 836,
	844, 0, 0, 0, 0, 0, 0, 0, 817, 0,
	0, 0, 0, 842, 811, 0, 0, 0, 0, 0,
	826, 0, 0, 834, 0, 836, 844, 0, 0, 827,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 842,
	0, 817, 0, 0, 0, 0, 0, 0, 0, 834,
	0, 833, 0, 0, 0, 827, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 833, 0, 0,
	0, 0, 834, 0, 836, 844, 828, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 837, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	833, 0, 828, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 837, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 0, 0, 0, 0, 828, 0, 0, 0, 0,
	835, 0, 0, 823, 824, 825, 837, 822, 819, 820,
	821, 813, 814, 815, 816, 818, 0, 838, 0, 0,
	0, 828, 0, 0, 1308, 0, 835, 0, 0, 823,
	824, 825, 837, 822, 819, 820, 821, 813, 814, 815,
	816, 818, 0, 838, 0, 0, 0, 1756, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 0, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	1754, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 810, 1734, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 0, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 811, 0,
	0, 0, 0, 812, 826, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 811, 0, 0, 0, 0, 832,
	826, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 836, 844, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	833, 0, 0, 0, 827, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 833, 0, 0, 0,
	0, 834, 0, 0, 0, 828, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 837, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	1709, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 1704, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 810, 1700,
	829, 830, 831, 839, 840, 841, 0, 0, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 0, 0, 0,
	812, 0, 843, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 811, 0, 0, 0, 0, 812, 826, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 811, 0, 0,
	0, 0, 832, 826, 0, 0, 0, 0, 0, 812,
	0, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 817, 0, 0, 0, 0, 0,
	811, 0, 0, 0, 0, 0, 826, 0, 0, 0,
	0, 836, 844, 0, 0, 0, 0, 0, 0, 0,
	817, 0, 0, 0, 0, 842, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 836, 844, 0,
	0, 827, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 833, 0, 0, 0, 827, 0, 0,
	836, 844, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 0, 0, 0, 833,
	0, 0, 0, 0, 834, 0, 0, 0, 828, 0,
	827, 0, 0, 0, 0, 0, 0, 0, 0, 837,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 833, 0, 828, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 828, 0, 0,
	0, 0, 835, 0, 0, 823, 824, 825, 837, 822,
	819, 820, 821, 813, 814, 815, 816, 818, 0, 838,
	0, 0, 0, 1635, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 810, 1542, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	0, 0, 0, 812, 0, 843, 0, 810, 0, 829,
	830, 831, 839, 840, 841, 0, 0, 0, 0, 0,
	0, 0, 832, 0, 811, 0, 0, 0, 0, 812,
	826, 843, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	811, 0, 0, 0, 0, 832, 826, 0, 0, 0,
	0, 0, 812, 0, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 0, 811, 0, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 836, 844, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	836, 844, 0, 0, 827, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 842, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 834, 0, 833, 0, 0, 0,
	827, 0, 0, 836, 844, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 0,
	0, 0, 833, 0, 0, 0, 0, 834, 0, 0,
	0, 828, 0, 827, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 833, 0, 828, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 837, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	828, 0, 0, 0, 0, 835, 0, 0, 823, 824,
	825, 837, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 1476, 0, 0, 0,
	0, 835, 0, 0, 823, 824, 825, 0, 822, 819,
	820, 821, 813, 814, 815, 816, 818, 0, 838, 0,
	0, 0, 1460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	0, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 810, 1091, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 811, 0, 0,
	0, 0, 812, 826, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 811, 0, 0, 0, 0, 832, 826,
	0, 0, 0, 0, 0, 812, 0, 843, 0, 810,
	0, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	817, 0, 0, 0, 832, 0, 811, 0, 0, 1025,
	0, 812, 826, 843, 0, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 817, 1826, 0, 0,
	0, 842, 811, 0, 0, 0, 0, 0, 826, 0,
	0, 834, 0, 836, 844, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 817,
	0, 1346, 0, 0, 1345, 1026, 0, 834, 0, 833,
	0, 0, 0, 827, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	834, 0, 836, 844, 828, 0, 827, 0, 1825, 0,
	0, 0, 0, 0, 0, 837, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 833, 0,
	828, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 837, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 1524, 0, 828,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	837, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 846,
	838, 0, 0, 0, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 845, 0, 0, 812, 0, 843,
	0, 810, 0, 829, 830, 831, 839, 840, 841, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 811, 0,
	0, 0, 0, 812, 826, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 829, 830, 831, 839,
	840, 841, 0, 0, 811, 0, 0, 0, 0, 832,
	826, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 817, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 826, 0, 0, 0, 0, 836, 844,
	0, 0, 0, 0, 0, 0, 0, 817, 0, 0,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 836, 844, 0, 0, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 842, 0,
	817, 0, 0, 0, 0, 0, 0, 0, 834, 0,
	833, 0, 0, 0, 827, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 0, 0, 833, 312, 0, 0,
	0, 834, 0, 0, 0, 828, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 828, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 837, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 828, 0, 0, 0, 0, 835,
	0, 0, 823, 824, 825, 837, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	0, 0, 1470, 0, 0, 835, 0, 0, 823, 824,
	825, 0, 822, 819, 820, 821, 813, 814, 815, 816,
	818, 0, 838, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 0, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 810, 838, 829, 830, 831, 839,
	840, 841, 0, 0, 0, 0, 0, 0, 0, 832,
	0, 0, 0, 0, 0, 0, 812, 0, 843, 0,
	810, 0, 829, 830, 831, 839, 840, 841, 0, 0,
	0, 0, 0, 0, 0, 832, 0, 811, 0, 1347,
	0, 0, 812, 826, 843, 0, 0, 0, 0, 0,
	0, 0, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 811, 0, 0, 0, 0, 832, 826,
	0, 0, 0, 0, 0, 812, 0, 843, 0, 810,
	0, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	817, 0, 0, 0, 832, 1352, 811, 0, 1307, 0,
	0, 812, 826, 843, 0, 0, 0, 836, 844, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 0,
	0, 842, 811, 0, 0, 0, 0, 0, 826, 0,
	0, 834, 0, 836, 844, 0, 0, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 842, 0, 817,
	0, 0, 0, 0, 0, 0, 0, 834, 0, 833,
	0, 0, 0, 827, 0, 0, 836, 844, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 833, 0, 0, 0, 0,
	834, 0, 836, 844, 828, 0, 827, 0, 0, 0,
	0, 0, 0, 0, 0, 837, 842, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 833, 0,
	828, 0, 827, 0, 0, 0, 0, 0, 0, 1313,
	0, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 0, 0, 0, 0, 835, 0,
	0, 823, 824, 825, 837, 822, 819, 820, 821, 813,
	814, 815, 816, 818, 0, 838, 0, 0, 0, 828,
	0, 0, 0, 0, 835, 0, 0, 823, 824, 825,
	837, 822, 819, 820, 821, 813, 814, 815, 816, 818,
	0, 838, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 810,
	838, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 0, 0,
	0, 812, 0, 843, 0, 810, 0, 829, 830, 831,
	839, 840, 841, 0, 0, 0, 0, 0, 0, 0,
	832, 0, 811, 0, 0, 0, 0, 812, 826, 843,
	0, 0, 0, 810, 0, 829, 830, 831, 839, 840,
	841, 0, 0, 0, 0, 0, 0, 0, 811, 0,
	0, 0, 0, 0, 826, 812, 0, 843, 0, 810,
	0, 829, 830, 831, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 811, 0, 0, 0,
	0, 812, 826, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 817, 811, 0, 0, 0, 842, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 836, 844,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 817,
	0, 0, 842, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 834, 0, 833, 0, 836, 844, 827, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 836, 844, 0, 0, 827, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 827, 0, 0, 828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 609, 604, 626, 598, 617, 616, 0, 0, 600,
	599, 0, 0, 828, 628, 627, 0, 0, 0, 0,
	0, 0, 0, 835, 837, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 828,
	838, 0, 0, 0, 622, 0, 614, 613, 0, 835,
	837, 0, 823, 824, 825, 612, 822, 819, 820, 821,
	813, 814, 815, 816, 818, 0, 838, 0, 0, 0,
	0, 611, 0, 0, 0, 0, 0, 835, 0, 0,
	823, 824, 825, 0, 822, 819, 820, 821, 813, 814,
	815, 816, 818, 0, 838, 0, 0, 605, 606, 607,
	0, 625, 0, 835, 0, 0, 823, 824, 825, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 810,
	838, 0, 0, 0, 839, 840, 841, 0, 0, 0,
	0, 0, 0, 0, 0, 615, 0, 0, 0, 0,
	0, 812, 0, 843, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 610, 811, 0, 0, 0, 0, 0, 826, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 602, 0, 0, 0, 0, 0, 0, 0, 608,
	603, 0, 0, 0, 0, 0, 630, 0, 0, 0,
	0, 0, 0, 601, 0, 0, 623, 624, 0, 0,
	0, 0, 0, 0, 0, 817, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 629,
	0, 0, 836, 844, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	837, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 835, 0, 0, 0, 0, 0, 0,
	822, 819, 820, 821, 813, 814, 815, 816, 818, 0,
	838,
}
var sqlPact = [...]int{

	2199, -1000, 31, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 741, -1000, -1000, -1000, 569, 725,
	558, 15712, 15712, 15452, 759, 759, 17012, -1000, -1000, 19872,
	-1000, 3450, 428, 431, 428, 428, 514, 17012, 550, 649,
	99, -1000, 602, 20, 19612, 15712, 1191, 27, 14412, 252,
	2199, 15192, 15712, 19352, 1042, 943, 939, 14412, 19092, 18832,
	18572, -1000, 9933, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 549, 258, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 256, -1000, 14932, -1000, 810, -1000, 23,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 809, -1000,
	15712, -1000, -1000, 18312, 18052, 255, 815, -1000, -1000, 489,
	352, 1225, -1000, 39, -1000, -1000, 1041, -1000, 796, 1036,
	1035, 1033, 1030, 1025, 1024, 343, 832, -1000, 544, 815,
	-1000, 815, -1000, -1000, -1000, 524, 17012, -1000, 14412, -1000,
	17792, 954, 17532, -1000, 602, -1000, -1000, -1000, 827, 1187,
	1187, 1187, 1217, 119, 117, 99, 17, 15712, -1000, 254,
	17, 6928, 6928, -1000, -1000, 252, -1000, 308, 12585, 35,
	-1000, 7474, -1000, 674, 1104, 657, 648, 1103, -78, 14412,
	15712, 15712, 577, 17272, -1000, 1096, 120, 1095, -1000, 107,
	1093, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14672, 1241, 23086, -1000, 8857, -1000,
	-1000, 12848, 778, 12848, -1000, -1000, 1239, -1000, 8857, -1000,
	22, 21, 903, 946, 10476, 10206, 1165, 853, -1000, -1000,
	-1000, 36, 4380, 15712, 1059, 12848, 15712, 15712, 15712, 15712,
	15712, -1000, 15712, -1000, 901, -1000, 15712, -1000, 19, 18,
	-1000, 17012, -1000, 122, -1000, 251, 879, 16752, 1114, 878,
	-1000, 827, -1000, 829, 898, 8038, 8857, 99, -1000, -1000,
	99, 99, 8857, -1000, -1000, 15712, 17, 1238, 15712, 138,
	-1000, 22165, -1000, -1000, 8857, 8857, 8857, 8857, 8857, 719,
	-1000, -1000, -1000, 5215, -1000, -1000, 35, 250, 286, -1000,
	-1000, 249, 35, -1000, -1000, -1000, -1000, 247, 1343, 411,
	-1000, -1000, -1000, 8857, 356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1057, 246, 245, -1000, -1000, -1000,
	-1000, 242, 241, 239, 238, 233, 231, 230, 229, 225,
	223, 213, 208, 201, 200, 686, -1000, 370, -1000, -1000,
	370, 370, -1000, 197, 197, 198, -1000, -1000, -1000, 197,
	-1000, -1000, -1000, 348, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 199, 138, -1000, -1000, -1000, 15712, 35, -1000, -1000,
	-1000, 8857, 4110, -8, -1000, 22869, -1000, -4, 702, -1000,
	13892, 1188, 1181, 1174, 14412, 523, 520, 15712, 15712, 362,
	91, 1234, 91, 12059, -1000, 15712, 15712, -1000, 15712, -1000,
	-1000, 15712, -1000, 15712, 15712, 508, 13372, 707, 1092, 20,
	-10, -1000, 1244, -1000, -1000, -1000, -1000, 87, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 198, 686, 197, 197, 197, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 348, -1000, -1000, 370, 370, 370, -1000,
	-1000, -14, 22869, 517, 6, 13110, 15712, -1000, 34, -1000,
	-1000, 1018, 424, -20, 678, 928, 787, -1000, -1000, -1000,
	-1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1282, -1000, -1000, -1000, -1000, 1315, 14, -1000,
	-1000, -1000, -1000, -1000, 1339, -1000, -1000, -1000, 4380, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15712, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 678, 928, -1000, -1000,
	14412, 13632, 1091, 791, 876, -1000, -1000, 331, 1089, -1000,
	-1000, -1000, -1000, 22869, -1000, 22869, 630, 947, -1000, 947,
	10, -1000, 21879, -1000, 193, -21, -1000, 362, 6928, 11796,
	23086, 15712, 537, 8857, 8857, 8857, 8857, 8857, 8857, 8857,
	8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857, 8857,
	8857, 8857, 8857, 8857, 8857, 1019, 8857, 504, 8857, 8857,
	8857, 8857, 904, 795, 181, 4380, -1000, 589, 589, 589,
	22923, 22923, 207, 15, 21510, 8, 35, -1000, -1000, 6637,
	6345, 35, 4650, -1000, 666, 1313, 368, 22869, 1071, 983,
	190, 106, 105, 8857, 8857, 653, 8857, 9130, 8857, 8857,
	5488, 8857, 8857, 8857, 8857, 8857, 8857, -1000, 187, -1000,
	-1000, -1000, -1000, 1309, -1000, -1000, 1304, -1000, 535, 532,
	1303, 362, 104, -1000, 2700, -1000, -1000, 7474, -1000, 707,
	15712, 15712, 15712, -1000, -1000, 866, 16492, -1000, 23086, 15712,
	-1000, 186, 184, 916, 911, 15712, 15712, 16232, 15972, 15712,
	654, 15712, 15712, 646, -1000, 625, 8857, 662, -1000, 11269,
	380, 15712, 638, 71, -1000, -1000, -1000, 330, 15712, -1000,
	-1000, -1000, 120, -1000, 107, -1000, -1000, 14412, -1000, -1000,
	-1000, -1000, -1000, -1000, 23086, 302, 301, -1000, 1301, 498,
	-1000, 495, 492, 491, -1000, 183, -1000, 8857, 15712, 13110,
	6, 4, -1000, -1000, 15712, 928, -1000, -1000, -1000, -1000,
	611, -1000, 670, -1000, 10746, -1000, -1000, -1000, 666, -1000,
	-15, -1000, -1000, -1000, -1000, 103, 0, -1000, -1000, -1000,
	-1000, -1000, 15712, 268, 15712, 15712, 15712, 1087, 1338, 15712,
	-1000, -1000, -1000, 8857, -1000, -1000, -1000, 20, 15712, -1000,
	981, -1000, -18, 1176, -88, 14152, -1000, 11006, -1000, -1000,
	341, 663, 663, 580, 580, 580, 580, 2329, 2329, 2412,
	3338, 23229, 23229, 23229, 2616, 185, 185, 23229, 23229, 23229,
	22923, 22895, 1899, 8857, 8857, 477, 760, 181, 1899, 8857,
	1270, 1899, 1899, 1899, -1000, 583, -1000, -1000, -1000, 1016,
	175, 9130, 9130, -1000, -1000, -1000, 5215, -1000, -1000, 173,
	8857, -1000, 8857, -94, -101, -1000, -1000, -26, -1000, -1000,
	-22, 8857, 8857, 8857, 97, -1000, 96, 547, -1000, 8857,
	708, 169, 168, 8857, -1000, -1000, 22589, 20396, 95, 1010,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 94, 22563, 93,
	2817, -1000, 9130, 9130, 9130, 5215, 165, 92, 21853, -114,
	22530, 7747, 7747, 7747, 88, 22504, 8857, -114, 3464, 3384,
	3174, -27, -28, -32, 1299, -38, 84, 340, 338, 83,
	981, -1000, -1000, 8857, -1000, -1000, -1000, 470, 462, 1086,
	-1000, 862, -1000, 724, 8857, 15712, 164, 163, 700, -1000,
	1085, 798, 1084, 798, -1000, -4, 665, -1000, -1000, 445,
	-1000, 6928, 22869, -1000, 629, 1185, -39, -1000, -1000, -1000,
	6928, 362, 12059, 11796, 7474, -44, -1000, -1000, 707, -1000,
	425, 1295, 81, 888, 730, 656, 575, 1291, 22869, -15,
	-1000, -15, -1000, -1000, -1000, -1000, -1000, -1000, 15712, 957,
	13632, 162, 15712, 160, 159, 158, 15712, -1000, 1114, -1000,
	79, -1000, 974, 1211, -1000, 11796, 835, 933, 932, 11796,
	919, 704, 704, 704, -1000, 14152, 3828, -1000, -1000, 15712,
	157, 11532, 78, 1176, 8857, 1899, 1899, 8857, 9130, 9130,
	-1000, 1899, -1000, -1000, -1000, -1000, 1007, 156, 8857, 23086,
	3142, 2228, -45, 6053, -25, 21477, -1000, -1000, 286, -1000,
	77, 7201, -1000, 22191, -6, -6, -1000, 1334, 1108, -1000,
	8857, 22224, -1000, 12322, 365, 728, 21451, 23086, 23086, -1000,
	8857, -1000, 1002, 8857, -1000, 23086, 9130, 9130, 9130, 9130,
	9130, 9130, 9130, 9130, 9130, 9130, 9130, 9130, 9130, 9130,
	9130, 9130, 9130, 9130, 9130, 938, 9130, 1267, 1267, 1267,
	-36, 5761, -1000, 1052, 1002, 8857, 8857, 23086, 75, 73,
	72, -1000, 8857, -114, 8857, 8857, 8857, -1000, -1000, -1000,
	68, -1000, 1279, -1000, -1000, -1000, -1000, 974, 21794, 15712,
	15712, 15712, 1083, 1762, -1000, 21167, -50, 15712, 15712, -1000,
	937, 952, 404, 15712, -1000, 15712, -1000, 15712, 15712, 15712,
	15712, -75, 6928, 189, 20, 15712, -75, 625, -1000, -63,
	-1000, 329, -1000, 270, 266, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 63, -1000, -1000, 949, -1000, 9670, 154,
	15712, 13632, 9670, 768, -1000, -1000, 359, 8857, 8857, 1176,
	553, 11796, 11796, 1066, 930, 11796, -1000, -1000, -1000, -1000,
	-1000, -1000, 948, 151, 15712, 14152, 586, 1899, 2109, 227,
	8857, 23086, 22949, -51, 8857, 8857, -1000, -62, -1000, 8857,
	-1000, -1000, 1331, 8857, 60, 59, 56, -1000, -1000, 22869,
	8857, -1000, -1000, 20132, 8857, 55, -1000, 54, 53, 22869,
	1052, 22869, -1000, 511, 511, 1267, 1267, 1267, 1267, 608,
	608, 518, 1661, 1044, 1044, 1044, 935, 376, 376, 1044,
	1044, 1044, 1000, 921, 149, 2271, 8857, -66, -1000, -1000,
	-1000, 22869, 22869, 52, -1000, -1000, -1000, -114, 2984, 21134,
	21108, -1000, 51, 359, -1000, -1000, -1000, -1000, 15712, -1000,
	15712, -1000, 15712, 15712, 1005, 855, -1000, -1000, 910, 147,
	9130, 15712, -1000, 731, -67, -68, 845, -1000, 844, 8857,
	-1000, 23086, 798, 798, -1000, 442, 438, -1000, -75, 1119,
	15712, 1173, -1000, -1000, -1000, 144, -1000, -1000, -1000, 703,
	-73, -1000, 226, 1195, 8857, -1000, -1000, 141, 9670, -79,
	-1000, -1000, 50, -85, 15712, -1000, 15712, 22869, -114, 521,
	-1000, 1066, -1000, 140, 8857, 11796, -1000, -139, -1000, 323,
	-1000, 15712, -86, -1000, 8857, 8857, 22949, -90, -1000, 1899,
	1899, -1000, 20824, -1000, 22191, -1000, -1000, -1000, 22869, 696,
	-1000, 20791, -1000, -1000, -1000, -1000, 9130, 996, 139, 23086,
	20765, -1000, -1000, 8857, -1000, -1000, -1000, -1000, -1000, 896,
	-1000, -1000, 15712, 858, -1000, -1000, 8857, 2271, 136, 957,
	135, -1000, -1000, -1000, 661, -1000, -1000, 22869, 1198, -1000,
	-1000, 15712, 15712, 487, -92, 15712, -1000, -1000, 4942, 15712,
	731, 9670, 1179, 35, 15712, 1179, 20481, 4650, -104, -1000,
	15712, 957, 731, 131, -100, -1000, 1232, 1329, -1000, 15712,
	22869, -1000, 948, -1000, 4380, -109, -1000, 1899, 1899, -1000,
	-1000, 48, 728, 1210, -1000, 2857, 9130, 23086, -115, -1000,
	20455, -1000, -1000, 1081, 20422, 891, 15712, -1000, 15712, 15712,
	388, 15712, -1000, -1000, 573, -1000, 362, -1000, 127, 957,
	-1000, -1000, -1000, -1000, 1195, -22, 731, -1000, -1000, 957,
	9670, 15712, 125, -1000, -117, -1000, -1000, -1000, -1000, 622,
	8857, 2857, -119, -1000, -1000, 1074, -1000, 743, 717, 44,
	-121, 108, -1000, 8857, -1000, 12059, -1000, 15712, -1000, 1179,
	43, 957, -1000, -123, -1000, -1000, -1000, 41, 8584, 8584,
	-114, -1000, 15712, -1000, 758, 749, 581, -1000, -1000, -1000,
	-1000, -1000, 891, 15712, 22869, -98, -127, -1000, -1000, -1000,
	731, -1000, -1000, -1000, 9400, 748, 606, 21820, -1000, -1000,
	-1000, 1128, -1000, 394, 744, 744, 743, -134, -1000, 798,
	957, 1248, -1000, -1000, -1000, -1000, -1000, -1000, 1257, -1000,
	-1000, 927, -1000, -1000, -1000, -1000, -1000, 8311, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1564, 1563, 1238, 129, 127, 1562, 1560, 1559, 102,
	124, 120, 122, 1558, 89, 1557, 1554, 1553, 100, 1551,
	1550, 1548, 57, 1543, 1541, 1539, 1538, 1537, 95, 25,
	163, 2218, 150, 1536, 1532, 1530, 15, 108, 75, 1527,
	2, 58, 104, 110, 1100, 46, 1526, 1525, 145, 38,
	20, 156, 97, 144, 121, 116, 1524, 1523, 1521, 50,
	1520, 4, 1518, 1516, 1515, 52, 18, 1514, 16, 1512,
	14, 1503, 1502, 134, 1501, 78, 106, 118, 36, 132,
	111, 1500, 74, 12, 80, 1499, 26, 1498, 39, 83,
	141, 1497, 51, 149, 65, 22, 66, 1496, 1492, 1491,
	1490, 84, 1489, 96, 77, 1488, 1487, 82, 1486, 135,
	137, 1485, 1483, 138, 1480, 1479, 1476, 659, 1470, 1468,
	607, 1463, 9, 42, 72, 8, 113, 112, 41, 1462,
	19, 1460, 1770, 566, 667, 1458, 60, 54, 86, 49,
	61, 43, 1456, 1455, 103, 1451, 1438, 1435, 1434, 1431,
	85, 1430, 76, 139, 47, 53, 91, 35, 21, 45,
	87, 128, 148, 109, 1428, 1427, 114, 1426, 29, 1425,
	1424, 819, 125, 1423, 1420, 1419, 795, 660, 658, 67,
	1416, 1413, 529, 157, 1412, 1411, 119, 1410, 1409, 142,
	1408, 147, 30, 1407, 115, 1404, 94, 1400, 0, 44,
	28, 1394, 130, 81, 1387, 1385, 1382, 1380, 27, 3,
	10, 6, 7, 5, 31, 24, 1374, 1369, 140, 92,
	1368, 146, 1367, 1366, 23, 1363, 1362, 17, 1357, 13,
	1356, 11, 1, 1355, 136, 1354, 99, 1353, 1264, 1352,
	143, 1351, 1349, 1296, 90,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 38, 38, 37,
	37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 35, 35, 40, 40, 40, 39,
	39, 34, 34, 5, 5, 5, 9, 10, 10, 10,
	10, 10, 10, 79, 79, 78, 78, 81, 81, 11,
	11, 12, 12, 12, 12, 12, 12, 12, 12, 167,
	167, 166, 13, 142, 142, 14, 14, 14, 14, 15,
	102, 102, 16, 16, 16, 16, 17, 21, 234, 234,
	234, 238, 238, 239, 239, 240, 240, 240, 240, 240,
	240, 240, 236, 236, 24, 24, 24, 24, 24, 121,
	117, 117, 119, 119, 119, 119, 43, 116, 116, 116,
	116, 118, 118, 118, 118, 191, 189, 189, 196, 196,
	196, 56, 56, 56, 56, 56, 57, 57, 57, 188,
	188, 188, 188, 197, 197, 197, 197, 197, 197, 58,
	58, 58, 195, 195, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	190, 190, 235, 235, 237, 237, 8, 8, 59, 59,
	60, 60, 124, 124, 124, 124, 61, 61, 123, 206,
	206, 207, 207, 207, 207, 207, 207, 208, 208, 208,
	208, 208, 208, 208, 204, 204, 205, 202, 202, 203,
	203, 203, 203, 241, 241, 122, 122, 64, 64, 211,
	211, 211, 211, 209, 209, 209, 209, 209, 212, 210,
	213, 213, 213, 213, 213, 153, 153, 153, 27, 7,
	7, 106, 106, 68, 68, 157, 157, 157, 69, 69,
	158, 50, 50, 36, 36, 36, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 107, 107, 108, 108, 19,
	23, 26, 26, 26, 26, 26, 243, 243, 47, 47,
	47, 47, 48, 48, 120, 120, 120, 120, 120, 42,
	6, 6, 41, 41, 18, 18, 18, 18, 18, 53,
	53, 113, 113, 113, 115, 115, 114, 114, 114, 92,
	92, 28, 74, 74, 83, 83, 84, 84, 164, 85,
	85, 22, 22, 31, 31, 29, 29, 29, 29, 29,
	29, 30, 30, 32, 32, 32, 32, 32, 32, 32,
	219, 219, 219, 221, 221, 218, 220, 220, 242, 242,
	93, 93, 93, 63, 62, 62, 66, 66, 65, 67,
	67, 156, 90, 90, 90, 90, 109, 110, 110, 111,
	111, 112, 112, 89, 89, 139, 139, 33, 33, 73,
	73, 75, 75, 130, 130, 131, 131, 129, 129, 129,
	159, 159, 159, 159, 160, 160, 160, 160, 160, 160,
	154, 154, 154, 154, 155, 155, 165, 165, 96, 96,
	96, 96, 94, 94, 95, 95, 161, 161, 161, 161,
	91, 91, 162, 162, 162, 125, 125, 168, 168, 168,
	72, 72, 72, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 170, 170, 170, 170,
	172, 172, 172, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 173, 173, 180, 180,
	181, 181, 182, 183, 174, 174, 175, 175, 176, 177,
	184, 184, 184, 184, 186, 186, 178, 178, 178, 178,
	178, 179, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 134, 134, 134, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 214, 214, 214,
	214, 214, 214, 214, 216, 216, 217, 217, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 215, 215, 215, 215, 215, 215,
	215, 215, 215, 215, 222, 222, 223, 223, 224, 224,
	225, 225, 227, 228, 228, 228, 229, 233, 233, 226,
	226, 230, 230, 230, 231, 231, 232, 232, 232, 232,
	232, 144, 144, 144, 145, 145, 146, 80, 80, 141,
	141, 140, 140, 140, 143, 143, 97, 185, 185, 185,
	185, 185, 185, 185, 98, 98, 105, 99, 99, 100,
	100, 100, 100, 100, 100, 136, 137, 101, 101, 101,
	138, 138, 147, 151, 151, 150, 149, 149, 148, 148,
	128, 128, 128, 128, 127, 126, 86, 86, 244, 244,
	152, 152, 87, 87, 88, 82, 82, 163, 163, 163,
	163, 76, 76, 55, 55, 77, 77, 51, 51, 54,
	52, 52, 52, 52, 70, 70, 71, 71, 49, 49,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 187, 187, 187, 44, 44, 44, 45, 45, 46,
	46, 193, 193, 193, 194, 194, 194, 194, 192, 192,
	192, 192, 192, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 198, 198, 198, 198, 198, 198, 198, 198,
	198, 198, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 4, 6, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 2,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 4, 2, 4, 4,
	4, 4, 4, 4, 3, 3, 4, 3, 2, 4,
	2, 0, 2, 0, 2, 0, 7, 10, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 11,
	14, 1, 0, 1, 3, 3, 3, 5, 1, 3,
	1, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 1, 1, 3, 1,
	1, 1, 2, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 4, 5, 0, 5, 0, 2, 0,
	1, 3, 3, 2, 2, 0, 6, 1, 0, 3,
	0, 2, 2, 0, 1, 4, 2, 2, 2, 2,
	2, 4, 3, 5, 4, 3, 5, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 2, 2, 1, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-15, -16, -17, -18, -20, -21, -23, -22, -24, -25,
	-26, -19, -27, -28, 22, -6, -7, -8, -220, 90,
	98, 190, 97, 83, 113, 204, 211, -29, -31, 219,
	-121, 220, 33, 228, 57, 93, 206, 201, 248, 64,
	-219, -32, -30, 294, 269, 275, 214, -33, 235, 262,
	297, 235, 76, 126, 85, 130, 256, 255, 76, 126,
	235, -12, 294, -22, -5, -10, -4, -18, -28, -9,
	-11, 22, -44, 4, -198, -200, 19, 20, 22, 32,
	33, 38, 42, 45, 56, 57, 58, 60, 62, 63,
	66, 67, 74, 75, 76, 77, 79, 83, 85, 89,
	90, 92, 97, 98, 103, 104, 107, 109, 114, 119,
	120, 127, 130, 125, 138, 140, 141, 146, 149, 152,
	154, 155, 156, 157, 158, 160, 161, 163, 165, 162,
	168, 170, 171, 177, 180, 183, 184, 185, 188, 190,
	192, 193, 194, 196, 197, 201, 199, 200, 202, 204,
	206, 207, 209, 211, 212, 213, 216, 217, 219, 220,
	222, 225, 227, 228, 231, 229, 234, 236, 237, 244,
	248, 249, 250, 251, 254, 255, 256, 259, 260, 261,
	265, 270, 271, 272, 273, 27, 34, 35, 36, 37,
	39, 40, 43, 44, 48, 49, 50, 52, 78, 80,
	81, 96, 99, 105, 115, 117, 121, 122, 131, 132,
	133, 135, 144, 167, 169, 178, 182, 187, 189, 195,
	208, 215, 223, 224, 230, 232, 239, 240, 241, 245,
	246, 262, 263, -44, -44, 190, 21, -238, 21, -239,
	-240, 64, 90, 113, 214, 130, 85, 255, -238, -48,
	211, -44, -117, 149, 217, 208, 244, -118, -116, -191,
	239, 158, -78, -44, 4, 76, 56, 77, 114, 126,
	127, 61, 62, 141, 236, 239, 244, 21, 64, -243,
	244, 244, -243, -243, -47, 244, 242, -48, -242, 235,
	235, -106, 76, 253, -30, -32, -31, -65, -66, 252,
	134, 95, 176, -29, -31, -219, -221, 196, -218, -44,
	-221, -62, -63, 21, 87, 298, -161, -51, 174, -44,
	-88, 294, -3, -161, 121, -44, -54, 121, -51, 111,
	136, 136, -162, -161, -44, 121, -55, 121, -54, -79,
	121, -78, -167, -166, -194, 4, -198, -200, -199, 262,
	54, 65, 112, 129, 123, 137, 139, 145, 147, 159,
	179, 181, 205, 221, 235, -142, 294, -102, 294, -44,
	21, 173, 298, 173, -44, -117, 50, -117, 294, -119,
	-42, -43, 138, 192, 242, 279, 111, 273, -58, 5,
	82, -81, 296, 111, -235, 173, 111, 111, 111, 111,
	111, -190, 111, 273, 138, 192, 235, -120, -42, -43,
	-120, 242, -48, -91, -161, -78, 121, 126, -44, 121,
	-65, -66, -90, -109, -110, 148, 172, -93, 21, 87,
	-93, -93, 42, 295, 295, 298, -221, -71, 294, -82,
	-163, -132, 287, -134, 285, 286, 291, 164, 274, -144,
	-51, -135, 9, 294, -147, -216, -31, 96, 28, -145,
	-146, 208, -44, 7, 8, 5, 6, -49, -170, -179,
	247, 100, 166, 46, -214, -215, 4, -198, -193, -171,
	-181, -175, -178, 135, 54, 69, 72, 70, 73, 218,
	257, 47, 27, 99, 182, 187, 232, 245, 246, 121,
	167, 122, 52, 115, 144, 89, 35, 37, 39, 40,
	48, 49, 78, 80, 81, 105, 131, 132, 133, 169,
	195, 223, 230, 240, 241, 263, -199, -182, -183, -176,
	-177, -184, -82, -88, 287, -51, 294, -86, -128, -127,
	-126, 292, 296, -87, -152, -132, 82, -38, 199, -37,
	20, 22, 90, 260, 96, 199, 199, 96, 299, -162,
	-53, -51, -53, 219, -44, 29, 96, -40, 298, 45,
	202, 96, -40, 298, 96, 295, 298, -161, 121, 29,
	-141, -168, -169, -171, -180, -174, -178, -179, 38, 44,
	43, 237, 215, 224, 36, 131, 132, 133, 223, 35,
	195, 105, 89, 81, 80, 169, 40, 39, -182, -183,
	-176, -177, 78, 240, 241, 135, 37, 49, 48, 263,
	230, -80, -132, -234, -77, 235, 76, -52, -44, 287,
	-240, -234, 29, -80, 298, 298, 146, -57, 152, 163,
	119, -189, 82, -196, -188, -153, 9, 247, 100, 173,
	-195, 8, 286, -187, -194, 5, 7, 285, -189, 82,
	67, -197, 5, 4, -179, -153, 82, 149, 296, -192,
	4, -198, -200, -199, -201, 21, 23, 24, 25, 26,
	28, 29, 30, 31, 41, 46, 47, 51, 53, 55,
	61, 64, 68, 69, 70, 71, 72, 73, 82, 84,
	86, 87, 88, 91, 93, 95, 100, 101, 102, 108,
	110, 111, 113, 116, 118, 124, 126, 128, 134, 136,
	142, 143, 148, 150, 151, 164, 166, 172, 173, 174,
	175, 176, 186, 191, 198, 203, 214, 218, 226, 233,
	235, 238, 242, 243, 247, 252, 253, 257, 258, 264,
	266, 267, 268, 269, -191, -237, 108, -234, -191, -191,
	-191, -191, -191, -191, 146, -191, 298, 298, -48, -40,
	298, 294, 164, -45, 121, -44, -41, 92, 164, -90,
	-110, -109, -111, -132, 21, -132, -134, -30, -30, -30,
	-67, -156, -132, -218, 29, -70, -44, -73, 298, 111,
	10, 53, 32, 285, 286, 287, 288, 106, 289, 282,
	283, 284, 281, 277, 278, 279, 59, 153, 210, 12,
	13, 14, 25, 175, 147, 274, 123, 221, 291, 15,
	16, 17, 137, 34, 124, 29, 4, -132, -132, -132,
	-132, -132, 181, -31, -132, -80, -86, -31, -140, 292,
	294, -86, 294, 5, 5, 294, -148, -132, -222, 270,
	108, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 189, -186, 265,
	-186, -186, -172, 294, -172, -173, 294, -172, 271, 275,
	294, -73, -51, -128, -132, -192, 287, 298, 295, 298,
	242, -107, 61, 55, -123, 121, 55, -202, -44, 61,
	-203, 51, 253, 191, 110, -107, 61, -107, 61, 61,
	-161, 242, 242, -54, -44, -125, 267, -113, -22, 294,
	82, 29, -113, -83, -84, -164, -85, -51, 294, -44,
	-44, -54, -55, -78, -79, -12, -166, 96, -14, -22,
	-18, -28, -9, 295, 298, -72, 28, -103, 294, 272,
	156, 79, 120, 155, -104, 213, 295, 298, 242, 298,
	-77, -70, -127, -126, 111, 244, 295, -43, -42, -56,
	194, 225, 200, 216, 298, 8, 7, 7, 5, -192,
	-236, -44, -43, -42, -161, -59, -60, -124, -123, -204,
	-205, -202, 126, 253, 101, 96, 173, 164, 279, 96,
	-112, 208, 209, 298, -36, 30, 86, 294, 298, 295,
	-125, -163, -75, -159, -161, -31, -160, 294, -168, -78,
	239, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
	-132, -132, -132, 147, 123, 221, 34, 124, -132, 242,
	-132, -132, -132, -132, 166, 164, 247, 100, 254, 87,
	170, -244, 233, 31, -138, -31, 294, -192, -144, 208,
	294, 295, 298, -80, -143, 293, -140, -80, 295, 295,
	-80, 264, 21, 87, 287, -103, 7, -151, -150, 266,
	-223, 103, 116, 294, 295, 295, -132, -132, -97, -185,
	4, 272, 156, 79, 120, 155, 213, -98, -132, -99,
	-133, -134, 285, 286, 291, 294, 208, -100, -132, -80,
	-132, 41, 143, 243, -101, -132, 111, -80, -132, -132,
	-132, -80, -80, -80, 294, 7, 7, 239, 239, 7,
	-125, 295, 293, 302, -152, -37, -51, -44, -44, 164,
	-123, 121, -168, -44, 294, 294, 140, 140, -44, -44,
	121, -44, 121, -44, -44, -38, 199, -44, -44, 199,
	-92, 203, -132, -92, -115, 173, -76, -51, 262, -44,
	203, -74, 298, 111, 279, -76, -40, -40, -161, -168,
	292, 292, 7, 242, 242, 242, 242, 294, -132, -236,
	-52, -236, -42, 251, 58, 194, -196, -103, 298, 295,
	298, -45, 126, -45, -78, -51, 96, 5, -44, -156,
	-14, -44, -89, 116, -165, 298, 276, 65, -96, 139,
	159, 112, 145, 205, 129, -129, 299, -155, -154, 29,
	-44, -31, -160, -159, 273, -132, -132, 242, -244, 233,
	-138, -132, 166, 247, 100, 254, 87, 170, 111, 294,
	-133, -133, -80, 294, -80, -132, 293, 293, 298, 295,
	-66, 298, -65, -132, -80, -80, 295, 295, -149, -150,
	91, -132, -228, 180, 294, 294, -132, 29, 298, 295,
	111, 295, -105, 186, 295, 10, 285, 286, 287, 288,
	106, 289, 282, 283, 284, 281, 277, 278, 279, 59,
	153, 210, 12, 13, 14, 137, 124, -133, -133, -133,
	-80, 294, 295, -136, -137, 111, 108, 29, -101, -101,
	-101, 295, 111, -80, 298, 298, 298, 295, 295, 295,
	7, 295, 298, 295, 273, 273, 295, -89, -132, 242,
	242, 96, 164, -206, -203, -132, -70, 294, 294, -35,
	90, 219, -108, 96, -40, 96, -40, 242, -107, 61,
	242, -82, 203, 60, 295, 298, -82, -125, -84, -75,
	-152, 295, 293, 7, 7, 295, 156, 120, 155, -104,
	155, -104, -104, 7, -44, -61, 125, -124, 294, -45,
	294, 294, 294, -44, -41, 295, -139, 118, 42, -159,
	170, 139, 139, -159, -96, 139, -94, 179, -94, -94,
	-155, -192, 300, -44, 294, 295, -132, -132, -133, -133,
	111, 294, -132, -141, 25, 25, 295, -80, 295, 298,
	295, -140, 295, 264, -66, -66, -66, 5, 93, -132,
	238, -229, -44, 294, 267, -65, 295, -168, -168, -132,
	-136, -132, -168, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
	-133, -133, 87, 164, 170, -133, 298, -80, 295, -137,
	-136, -132, -132, -168, 295, 295, 295, -80, -132, -132,
	-132, 295, 7, -139, 293, -44, -44, -123, 96, -207,
	61, -208, 53, 101, 64, 164, 166, 253, 191, 51,
	82, 198, 295, 295, -70, -70, 164, 82, 164, 82,
	75, 249, -44, -44, -51, -44, -44, -44, -82, -114,
	294, 173, -22, -51, -92, 279, 293, 293, 295, 124,
	-68, -157, -44, -217, 294, -214, -215, -49, 294, -69,
	-158, -44, -59, -68, 173, -224, 268, -132, -80, 234,
	-159, -159, -95, 258, 173, 139, -159, -131, -130, 109,
	162, 294, -70, -154, 25, 25, -132, -141, 295, -132,
	-132, 295, -132, 5, -132, 295, 295, 295, -132, -233,
	-44, -132, 295, 295, 295, -137, 111, 87, 170, 294,
	-132, 295, 295, 298, 295, 295, 295, -224, -123, -44,
	-78, -44, 101, 121, 166, 140, 294, -133, -51, -122,
	-241, 63, 231, 295, 295, 166, 166, -132, -168, -40,
	-40, 242, 242, 88, -70, 61, -88, -31, 294, 183,
	295, 298, -50, -86, 53, -50, -132, 294, -68, 295,
	298, 295, 295, -51, -225, -227, -44, 239, -95, 294,
	-132, -159, 298, 301, 279, -70, 295, -132, -132, 295,
	295, -66, -226, 185, 295, -133, 111, 294, -141, 295,
	-132, -208, -45, 164, -132, -46, 294, -61, 294, 198,
	-39, 53, -44, -44, 255, 165, 295, -44, -44, -122,
	-157, -36, -78, -36, 295, -80, 295, -158, -61, -122,
	294, 298, 29, 5, -70, -130, -192, 295, 295, -66,
	42, -133, -141, 295, 295, 96, 295, -211, 154, -44,
	-70, -51, -34, 258, -78, 219, -125, 294, -61, -50,
	-66, -122, -61, -68, -227, -229, 295, -230, 193, 209,
	-80, 295, 101, -209, -212, -210, 173, 112, 184, 222,
	295, 295, -64, 294, -132, -83, -70, -36, 295, -61,
	295, 295, -231, -232, 34, 250, 67, -132, -231, -44,
	-210, 173, -212, 173, 255, 85, -211, -70, -125, 295,
	-122, -232, 188, 107, 208, 188, 107, -213, 161, 202,
	45, 219, -213, -209, 295, -40, -61, 25, 19, 166,
	82, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 0, 53, 54, 55, 0, 0,
	357, 0, 0, 0, 0, 0, 0, 331, -2, 0,
	118, 0, 287, 0, 287, 287, 291, 0, 359, 252,
	356, -2, 367, 0, 0, 0, 365, 345, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 0, 71, 72, 73, 74, 75, 76, 77,
	78, 0, 84, 784, 785, 786, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 840, 841, 842, 843, 844, 845, 846,
	847, 848, 849, 850, 851, 852, 853, 854, 855, 856,
	857, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 869, 870, 871, 872, 873, 874, 875, 876,
	877, 878, 879, 880, 881, 882, 883, 884, 885, 886,
	887, 888, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, 899, 900, 901, 902, 903, 904, 905, 906,
	907, 908, 909, 910, 911, 912, 913, 914, 915, 916,
	917, 918, 919, 920, 921, 922, 923, 924, 925, 926,
	927, 928, 929, 930, 931, 932, 933, 934, 935, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 91, 92, 866, 94, 0, 101, 102,
	103, 105, 106, 107, 108, 109, 110, 111, 0, 280,
	880, 293, 114, 845, 884, 947, 896, 121, 131, 0,
	953, -2, 135, 65, 164, 165, 0, 167, 183, 0,
	0, 0, 0, 0, 181, 0, 0, 178, 0, 298,
	286, 298, 283, 284, 285, 288, 0, 279, 0, 358,
	0, 0, 0, 251, -2, 341, 342, -2, 0, 362,
	362, 362, 0, 0, 342, 0, 350, 870, 353, 767,
	351, 0, 0, 364, 363, 0, 346, 426, 0, 757,
	387, 0, 2, 0, 933, 0, 0, 933, 0, 0,
	0, 0, 0, 432, 57, 933, 48, 933, 753, 48,
	933, 63, 0, 79, 81, 794, 795, 796, 797, 958,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 0, 0, 0, 89, 0, 93,
	95, 0, 0, 0, 292, 115, 923, 117, 0, 120,
	122, 123, 0, 0, 0, 0, 0, 0, 134, 159,
	160, 66, 0, 0, 185, 0, 0, 0, 0, 0,
	0, 174, 0, 175, 0, 177, 0, 281, 294, 295,
	282, 0, 290, 48, 430, 0, 933, 788, 303, 933,
	-2, 0, 337, 374, 375, 0, 0, 0, 360, 361,
	0, 0, 0, 333, 334, 0, 352, 0, 0, 390,
	745, 749, 750, 518, 0, 0, 0, 0, 0, 0,
	605, 606, 607, 0, 609, 610, 611, 928, 0, 615,
	616, 947, 757, 770, 771, 772, 773, 0, 0, 0,
	778, 779, 780, 729, 655, 625, -2, -2, 768, 456,
	457, 458, 459, -2, 960, 629, 631, 633, 634, 635,
	636, 0, 912, 929, 943, 944, 952, 956, 957, 933,
	940, 934, 924, 931, 939, 826, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 793, 480, 481, 486,
	487, 489, 390, 388, 427, 428, 0, 758, 736, 730,
	731, 0, 0, 0, 742, 740, 741, 25, 276, 27,
	0, 276, 276, 0, 0, 0, 0, 0, 0, 436,
	0, 309, 0, 0, 433, 0, 0, 59, 0, 46,
	47, 0, 61, 0, 0, 357, 0, 0, 933, 357,
	0, 689, 442, 443, 444, 445, 446, 515, 449, 450,
	451, 452, 453, 454, 455, 463, 464, 465, 466, 467,
	468, 477, 0, 462, 462, 462, 474, 475, 478, 479,
	484, 485, 496, 497, 499, 501, 495, 495, 495, 492,
	493, 0, 687, 0, 98, 0, 821, 755, 760, 763,
	104, 0, 0, 0, 0, 0, 0, 126, 146, 147,
	148, 127, 129, 136, 138, 139, 140, 149, 150, 151,
	152, 245, 0, 247, 162, 163, 781, 0, 128, 130,
	132, 133, 153, 154, 0, 156, 157, 158, 0, 67,
	798, 799, 800, 801, 802, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 166, 168, 0, 182, 169, 170,
	171, 172, 173, 180, 176, 179, 0, 0, 289, 248,
	0, 189, 0, 0, 933, 787, 300, 0, 0, 340,
	372, 373, 376, 379, 380, 377, 518, 347, 348, 349,
	368, 369, 265, 354, 0, 0, 764, 436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 739, 0, 0, 748, 522, 523, 524,
	546, 547, 0, -2, 687, 0, 612, 613, 614, 0,
	0, -2, 0, 775, 515, 0, 0, 728, 657, 0,
	0, 0, 0, 0, 0, 0, 0, 708, 714, 0,
	0, 0, 0, 0, 0, 0, 0, 470, 483, 494,
	491, 490, 472, 0, 471, 469, 0, 473, 0, 0,
	0, 436, 0, 737, 0, 734, 735, 0, 744, 0,
	0, 0, 0, 275, 29, 933, 0, 39, 0, 0,
	218, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 759, 320, 0, 320, 311, 0,
	0, 0, 307, 323, 324, 326, 327, 0, 0, 434,
	58, 754, 48, 64, 48, 70, 80, 0, 82, 85,
	86, 87, 88, 83, 0, 437, 439, 447, 0, 502,
	503, 504, 505, 506, 507, 516, 90, 0, 0, 0,
	99, 100, 761, 762, 0, 0, 119, 124, 125, 299,
	0, 143, 0, 145, 0, 246, 783, 782, 515, 68,
	184, 112, 296, 297, 431, 0, 188, 190, 192, 193,
	194, 195, 788, 0, 788, 0, 0, 0, 0, 0,
	378, 381, 382, 0, 371, 263, 264, 357, 0, 766,
	384, 746, 417, 391, 399, 415, 402, 0, 519, 520,
	0, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, -2, -2, -2, 538, 539, 540, -2, -2, -2,
	544, 545, -2, 0, 0, 0, 739, 0, -2, 0,
	554, -2, -2, -2, 558, 0, 561, 563, 565, 0,
	0, 0, 0, 738, 575, 720, 0, 747, 560, 0,
	0, 608, 0, 0, 0, 693, 694, 0, -2, 617,
	367, 0, 0, 0, 0, 776, 0, 727, 723, 0,
	665, 0, 0, 0, 630, 632, 0, 0, 0, 0,
	697, 698, 699, 700, 701, 702, 703, 0, 0, 0,
	0, 577, 0, 0, 0, 0, 947, 0, 687, 713,
	0, 0, 0, 0, 0, 687, 0, 719, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 429, 732, 0, 743, 28, 267, 0, 0, 0,
	31, 933, 200, 0, 0, 0, 0, 0, 278, 40,
	933, 48, 933, 48, 41, 26, 276, 266, 269, 0,
	56, 0, 435, 304, 305, 0, 0, 751, 313, 310,
	0, 436, 0, 0, 0, 0, 60, 62, 0, 690,
	0, 0, 0, 0, 0, 0, 0, 0, 688, 96,
	756, 97, 116, 141, 142, 144, 137, 155, 0, 197,
	0, 0, 788, 0, 0, 0, 0, 302, 303, 370,
	0, 765, 386, 0, 389, 0, 0, 0, 0, 0,
	0, 423, 423, 423, 421, 415, 0, 401, 414, 0,
	413, -2, 402, 0, 0, -2, -2, 0, 0, 0,
	576, -2, 559, 562, 564, 566, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 688, 691, 692, 0, -2,
	0, 0, 366, 367, 367, 367, 623, 0, 0, 724,
	0, 0, 624, 0, 0, 0, 0, 0, 0, 639,
	0, 640, 0, 0, 641, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 579, 580, 581,
	0, 0, 642, 711, 712, 0, 0, 0, 0, 0,
	0, 647, 0, 718, 0, 0, 0, 651, 652, 653,
	0, 460, 0, 476, 498, 500, 488, 386, 0, 0,
	0, 0, 0, 198, 217, 0, 0, 0, 0, 33,
	0, 0, 0, 0, 37, 0, 43, 0, 0, 0,
	0, 319, 0, 318, 0, 0, 308, 320, 325, 322,
	328, 0, 440, 0, 0, 448, 508, 509, 510, 511,
	512, 513, 514, 0, 113, 186, 0, 191, 0, 0,
	0, 189, 0, 0, 301, 355, 659, 0, 0, 392,
	0, 0, 0, 0, 0, 0, 418, 422, 419, 420,
	400, 397, 0, 411, 0, 404, 521, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 721, 0, 682, 0,
	-2, 695, 618, 0, 0, 0, 0, 777, 722, 726,
	0, 663, 664, 668, 0, 0, 628, 0, 0, 696,
	705, 706, 578, 582, 583, 584, 585, 586, 587, 588,
	589, 590, 591, -2, -2, -2, 595, 596, 597, -2,
	-2, -2, 0, 0, 0, 707, 0, 0, 685, 709,
	710, 715, 716, 0, 644, 645, 646, 717, 0, 0,
	0, 482, 0, 659, 733, 271, 273, 30, 0, 199,
	0, 202, 0, 0, 0, 0, 208, 209, 0, 0,
	0, 0, 219, 226, 0, 0, 0, 45, 0, 0,
	277, 0, 48, 48, 268, 0, 0, 270, 306, 0,
	0, 0, 312, 752, 321, 0, 441, 438, 517, 0,
	0, 253, 262, 262, 0, 626, 627, 0, 0, 0,
	258, 260, 0, 0, 0, 343, 0, 385, 383, 0,
	405, 0, 407, 0, 0, 0, 409, 0, 395, 0,
	394, 0, 0, 403, 0, 0, -2, 0, 569, -2,
	-2, 681, 688, 774, 367, 619, 621, 622, 725, 670,
	667, 0, 654, 637, 638, 704, 0, 0, 0, 0,
	688, 684, 643, 0, 649, 650, 461, 344, 32, 0,
	203, 204, 788, 0, 207, 210, 0, 212, 790, 197,
	0, 223, 224, 221, 0, 34, 35, 44, 50, 36,
	42, 0, 0, 0, 0, 0, 329, 330, 0, 0,
	226, 0, 265, 769, 0, 265, 0, 0, 0, 216,
	0, 197, 226, 0, 658, 660, 0, 0, 406, 0,
	425, 408, 0, 398, 0, 0, 412, -2, -2, 570,
	683, 0, 367, 0, 656, -2, 0, 0, 0, 686,
	0, 201, 205, 0, 0, 232, 0, 220, 0, 0,
	52, 0, 272, 274, 0, 315, 436, 317, 0, 197,
	254, 255, 261, 256, 262, 367, 226, 259, 187, 197,
	0, 0, 0, 416, 0, 396, 393, 410, 620, 673,
	0, -2, 0, 603, 648, 0, 211, 237, 0, 0,
	0, 228, 38, 0, 49, 0, 316, 0, 214, 265,
	0, 197, 249, 0, 661, 662, 424, 0, 0, 0,
	669, 604, 0, 213, 233, 234, 0, 229, 230, 231,
	789, 225, 232, 0, 51, 436, 0, 257, 618, 215,
	226, 666, 671, 674, -2, 899, 818, 0, 672, 206,
	235, 0, 236, 0, 0, 0, 237, 0, 314, 48,
	197, 0, 676, 677, 678, 679, 680, 238, 0, 241,
	242, 0, 239, 222, 227, 196, 250, 0, 240, 243,
	244, 675,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 283, 3, 289, 284, 3,
	294, 295, 287, 285, 298, 286, 296, 288, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 302, 297,
	277, 279, 278, 3, 299, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 292, 3, 293, 282, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 300, 281, 301, 291,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 280,
	57620, 290, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:702
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:708
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 17:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 24:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:747
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 25:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:757
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			unimplemented()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:821
		{
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:828
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:830
		{
			unimplemented()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = nil
		}
	case 46:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = DropCascade
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqlVAL.union.val = DropRestrict
		}
	case 48:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = DropDefault
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:875
		{
			unimplementedWithIssue(2473)
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:876
		{
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			unimplemented()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:880
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:982
		{ /* SKIP DOC */
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 84:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.qnames()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.qnames()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1107
		{
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			unimplemented()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			unimplemented()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = Low
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = Normal
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = High
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1342
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			unimplemented()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			unimplemented()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.qname()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 181:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 183:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 185:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = []string(nil)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       &QualifiedName{Base: Name(sqlDollar[4].str)},
				Fields:       sqlDollar[6].union.strs(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			unimplemented()
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.strs(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.strs(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.famElems(),
			}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing:    sqlDollar[5].union.strs(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.qname(),
				FromCols: sqlDollar[4].union.strs(),
				ToCols:   sqlDollar[8].union.strs(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = []string(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = []string(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			unimplemented()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			unimplemented()
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			unimplemented()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1728
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			unimplemented()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1736
		{
			unimplemented()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			unimplemented()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			unimplemented()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1739
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			unimplemented()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1745
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1750
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.qname(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.strs(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = true
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = false
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1829
		{
			unimplemented()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1830
		{
			unimplemented()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			unimplemented()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = Ascending
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = Descending
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = true
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = false
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1917
		{
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1959
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.str = ""
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.str = ""
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2054
		{
			unimplementedWithIssue(6637)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2061
		{
			unimplementedWithIssue(6637)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2103
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2107
		{
			unimplemented()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = []string(nil)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			unimplementedWithIssue(7841)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2133
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2256
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}}},
				tableSelect: true,
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			unimplemented()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2359
		{
			unimplemented()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			unimplemented()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			unimplemented()
		}
	case 354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			unimplemented()
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2367
		{
			unimplemented()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2370
		{
			unimplemented()
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2371
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2374
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = true
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = false
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = false
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = true
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2398
		{
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2399
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2437
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2457
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2498
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &From{}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2597
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.str = astFullJoin
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.str = astLeftJoin
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.str = astRightJoin
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.str = astInnerJoin
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2743
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2744
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2834
		{
			unimplementedWithIssue(2115)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			unimplementedWithIssue(2115)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			unimplementedWithIssue(2115)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2839
		{
			unimplementedWithIssue(2115)
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2840
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2848
		{
			unimplemented()
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2904
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = nil
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3021
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3087
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3088
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			unimplemented()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			unimplemented()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3121
		{
			unimplemented()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			unimplemented()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3123
		{
			unimplemented()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3124
		{
			unimplemented()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3125
		{
			unimplemented()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3126
		{
			unimplemented()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			unimplemented()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3128
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3131
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3136
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3169
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			unimplemented()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3581
		{
			unimplemented()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3582
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3618
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			unimplemented()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3623
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3641
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			unimplemented()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3668
		{
			unimplemented()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3712
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3716
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3717
		{
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3721
		{
			unimplemented()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3722
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3725
		{
			unimplemented()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			unimplemented()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			unimplemented()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			unimplemented()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3738
		{
			unimplemented()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3749
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3750
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3753
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3754
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3762
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3764
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3767
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3774
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3775
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3778
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4107
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4263
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4299
		{
			unimplemented()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = DNull
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.str = ""
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
