// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"errors"
	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:43

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) qname() *QualifiedName {
	return u.val.(*QualifiedName)
}
func (u *sqlSymUnion) qnames() QualifiedNames {
	return u.val.(QualifiedNames)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) indirectElem() IndirectionElem {
	if indirectElem, ok := u.val.(IndirectionElem); ok {
		return indirectElem
	}
	return nil
}
func (u *sqlSymUnion) indirect() Indirection {
	return u.val.(Indirection)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []ColumnQualification {
	return u.val.([]ColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) famElem() FamilyElem {
	return u.val.(FamilyElem)
}
func (u *sqlSymUnion) famElems() FamilyElemList {
	return u.val.(FamilyElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}

//line sql.y:281
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const DOT_DOT = 57353
const LESS_EQUALS = 57354
const GREATER_EQUALS = 57355
const NOT_EQUALS = 57356
const ERROR = 57357
const ACTION = 57358
const ADD = 57359
const ALL = 57360
const ALTER = 57361
const ANALYSE = 57362
const ANALYZE = 57363
const AND = 57364
const ANY = 57365
const ARRAY = 57366
const AS = 57367
const ASC = 57368
const ASYMMETRIC = 57369
const AT = 57370
const BEGIN = 57371
const BETWEEN = 57372
const BIGINT = 57373
const BIT = 57374
const BLOB = 57375
const BOOL = 57376
const BOOLEAN = 57377
const BOTH = 57378
const BY = 57379
const BYTEA = 57380
const BYTES = 57381
const CASCADE = 57382
const CASE = 57383
const CAST = 57384
const CHAR = 57385
const CHARACTER = 57386
const CHARACTERISTICS = 57387
const CHECK = 57388
const COALESCE = 57389
const COLLATE = 57390
const COLLATION = 57391
const COLUMN = 57392
const COLUMNS = 57393
const COMMIT = 57394
const COMMITTED = 57395
const CONCAT = 57396
const CONFLICT = 57397
const CONSTRAINT = 57398
const COVERING = 57399
const CREATE = 57400
const CROSS = 57401
const CUBE = 57402
const CURRENT = 57403
const CURRENT_CATALOG = 57404
const CURRENT_DATE = 57405
const CURRENT_ROLE = 57406
const CURRENT_TIME = 57407
const CURRENT_TIMESTAMP = 57408
const CURRENT_USER = 57409
const CYCLE = 57410
const DATA = 57411
const DATABASE = 57412
const DATABASES = 57413
const DATE = 57414
const DAY = 57415
const DEC = 57416
const DECIMAL = 57417
const DEFAULT = 57418
const DEFERRABLE = 57419
const DELETE = 57420
const DESC = 57421
const DISTINCT = 57422
const DO = 57423
const DOUBLE = 57424
const DROP = 57425
const ELSE = 57426
const ENCODING = 57427
const END = 57428
const ESCAPE = 57429
const EXCEPT = 57430
const EXISTS = 57431
const EXPLAIN = 57432
const EXTRACT = 57433
const FALSE = 57434
const FAMILY = 57435
const FETCH = 57436
const FILTER = 57437
const FIRST = 57438
const FLOAT = 57439
const FLOORDIV = 57440
const FOLLOWING = 57441
const FOR = 57442
const FORCE_INDEX = 57443
const FOREIGN = 57444
const FROM = 57445
const FULL = 57446
const GRANT = 57447
const GRANTS = 57448
const GREATEST = 57449
const GROUP = 57450
const GROUPING = 57451
const HAVING = 57452
const HIGH = 57453
const HOUR = 57454
const IF = 57455
const IFNULL = 57456
const IN = 57457
const INDEX = 57458
const INDEXES = 57459
const INITIALLY = 57460
const INNER = 57461
const INSERT = 57462
const INT = 57463
const INT64 = 57464
const INTEGER = 57465
const INTERSECT = 57466
const INTERVAL = 57467
const INTO = 57468
const IS = 57469
const ISOLATION = 57470
const JOIN = 57471
const KEY = 57472
const KEYS = 57473
const LATERAL = 57474
const LEADING = 57475
const LEAST = 57476
const LEFT = 57477
const LEVEL = 57478
const LIKE = 57479
const LIMIT = 57480
const LOCAL = 57481
const LOCALTIME = 57482
const LOCALTIMESTAMP = 57483
const LOW = 57484
const LSHIFT = 57485
const MATCH = 57486
const MINUTE = 57487
const MONTH = 57488
const NAME = 57489
const NAMES = 57490
const NATURAL = 57491
const NEXT = 57492
const NO = 57493
const NO_INDEX_JOIN = 57494
const NORMAL = 57495
const NOT = 57496
const NOTHING = 57497
const NULL = 57498
const NULLIF = 57499
const NULLS = 57500
const NUMERIC = 57501
const OF = 57502
const OFF = 57503
const OFFSET = 57504
const ON = 57505
const ONLY = 57506
const OR = 57507
const ORDER = 57508
const ORDINALITY = 57509
const OUT = 57510
const OUTER = 57511
const OVER = 57512
const OVERLAPS = 57513
const OVERLAY = 57514
const PARTIAL = 57515
const PARTITION = 57516
const PLACING = 57517
const POSITION = 57518
const PRECEDING = 57519
const PRECISION = 57520
const PRIMARY = 57521
const PRIORITY = 57522
const RANGE = 57523
const READ = 57524
const REAL = 57525
const RECURSIVE = 57526
const REF = 57527
const REFERENCES = 57528
const RENAME = 57529
const REPEATABLE = 57530
const RELEASE = 57531
const RESTRICT = 57532
const RETURNING = 57533
const REVOKE = 57534
const RIGHT = 57535
const ROLLBACK = 57536
const ROLLUP = 57537
const ROW = 57538
const ROWS = 57539
const RSHIFT = 57540
const SAVEPOINT = 57541
const SEARCH = 57542
const SECOND = 57543
const SELECT = 57544
const SERIAL = 57545
const SERIALIZABLE = 57546
const SESSION = 57547
const SESSION_USER = 57548
const SET = 57549
const SHOW = 57550
const SIMILAR = 57551
const SIMPLE = 57552
const SMALLINT = 57553
const SNAPSHOT = 57554
const SOME = 57555
const SQL = 57556
const START = 57557
const STRICT = 57558
const STRING = 57559
const STORING = 57560
const SUBSTRING = 57561
const SYMMETRIC = 57562
const TABLE = 57563
const TABLES = 57564
const TEXT = 57565
const THEN = 57566
const TIME = 57567
const TIMESTAMP = 57568
const TIMESTAMPTZ = 57569
const TO = 57570
const TRAILING = 57571
const TRANSACTION = 57572
const TREAT = 57573
const TRIM = 57574
const TRUE = 57575
const TRUNCATE = 57576
const TYPE = 57577
const UNBOUNDED = 57578
const UNCOMMITTED = 57579
const UNION = 57580
const UNIQUE = 57581
const UNKNOWN = 57582
const UPDATE = 57583
const UPSERT = 57584
const USER = 57585
const USING = 57586
const VALID = 57587
const VALIDATE = 57588
const VALUE = 57589
const VALUES = 57590
const VARCHAR = 57591
const VARIADIC = 57592
const VARYING = 57593
const WHEN = 57594
const WHERE = 57595
const WINDOW = 57596
const WITH = 57597
const WITHIN = 57598
const WITHOUT = 57599
const YEAR = 57600
const ZONE = 57601
const NOT_LA = 57602
const WITH_LA = 57603
const POSTFIXOP = 57604
const UMINUS = 57605

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"IN",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL",
	"START",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4458

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 21,
	282, 21,
	-2, 330,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 32,
	1, 301,
	163, 301,
	191, 301,
	280, 301,
	282, 301,
	-2, 311,
	-1, 44,
	1, 304,
	163, 304,
	191, 304,
	280, 304,
	282, 304,
	-2, 310,
	-1, 53,
	1, 21,
	282, 21,
	-2, 330,
	-1, 243,
	1, 138,
	282, 138,
	-2, 810,
	-1, 275,
	138, 340,
	162, 340,
	-2, 307,
	-1, 278,
	138, 339,
	162, 339,
	-2, 305,
	-1, 390,
	138, 339,
	162, 339,
	-2, 308,
	-1, 446,
	279, 753,
	-2, 746,
	-1, 447,
	279, 754,
	-2, 747,
	-1, 453,
	5, 470,
	279, 470,
	-2, 892,
	-1, 475,
	5, 436,
	-2, 869,
	-1, 476,
	5, 464,
	279, 464,
	-2, 870,
	-1, 477,
	5, 444,
	-2, 871,
	-1, 478,
	5, 443,
	-2, 872,
	-1, 479,
	5, 464,
	279, 464,
	-2, 875,
	-1, 480,
	5, 464,
	279, 464,
	-2, 876,
	-1, 481,
	5, 465,
	-2, 879,
	-1, 482,
	5, 431,
	-2, 880,
	-1, 483,
	5, 431,
	-2, 881,
	-1, 484,
	5, 446,
	-2, 884,
	-1, 485,
	5, 432,
	-2, 889,
	-1, 486,
	5, 433,
	-2, 890,
	-1, 487,
	5, 434,
	-2, 891,
	-1, 488,
	5, 431,
	-2, 895,
	-1, 489,
	5, 437,
	-2, 900,
	-1, 490,
	5, 435,
	-2, 903,
	-1, 491,
	5, 462,
	279, 462,
	-2, 904,
	-1, 492,
	5, 466,
	-2, 907,
	-1, 493,
	5, 468,
	-2, 908,
	-1, 494,
	5, 461,
	279, 461,
	-2, 912,
	-1, 758,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	238, 311,
	-2, 574,
	-1, 766,
	279, 731,
	-2, 720,
	-1, 969,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 504,
	-1, 970,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 505,
	-1, 971,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 506,
	-1, 975,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 510,
	-1, 976,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 511,
	-1, 977,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 512,
	-1, 980,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 517,
	-1, 1011,
	171, 644,
	-2, 647,
	-1, 1170,
	88, 311,
	124, 311,
	138, 311,
	162, 311,
	166, 311,
	238, 311,
	-2, 388,
	-1, 1178,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 518,
	-1, 1183,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 519,
	-1, 1202,
	171, 643,
	-2, 646,
	-1, 1353,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 520,
	-1, 1358,
	127, 0,
	-2, 530,
	-1, 1367,
	171, 645,
	-2, 648,
	-1, 1408,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 555,
	-1, 1409,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 556,
	-1, 1410,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 557,
	-1, 1414,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 561,
	-1, 1415,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 562,
	-1, 1416,
	12, 0,
	13, 0,
	14, 0,
	262, 0,
	263, 0,
	264, 0,
	-2, 563,
	-1, 1517,
	127, 0,
	-2, 531,
	-1, 1521,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 534,
	-1, 1522,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 536,
	-1, 1606,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 535,
	-1, 1607,
	30, 0,
	115, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 537,
	-1, 1615,
	127, 0,
	-2, 564,
	-1, 1655,
	127, 0,
	-2, 565,
	-1, 1701,
	30, 0,
	137, 0,
	209, 0,
	260, 0,
	-2, 868,
}

const sqlNprod = 1004
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 20796

var sqlAct = [...]int{

	447, 1700, 1682, 1683, 1722, 1660, 1684, 1699, 1558, 847,
	906, 1479, 1505, 445, 839, 1387, 444, 1593, 279, 439,
	497, 1480, 592, 507, 437, 1580, 715, 1446, 1359, 1493,
	1261, 86, 1360, 1499, 86, 31, 890, 1260, 244, 1167,
	887, 86, 409, 1109, 1323, 1330, 1205, 1339, 86, 86,
	1166, 696, 86, 1157, 761, 86, 86, 86, 693, 301,
	763, 86, 86, 86, 86, 1024, 327, 889, 513, 1153,
	848, 824, 87, 915, 1028, 14, 993, 815, 796, 996,
	1018, 536, 284, 792, 86, 1063, 918, 286, 43, 20,
	10, 6, 278, 565, 378, 516, 711, 495, 1115, 518,
	882, 284, 322, 66, 550, 916, 717, 419, 410, 508,
	379, 509, 64, 547, 317, 43, 841, 68, 67, 69,
	576, 893, 393, 324, 44, 289, 320, 420, 241, 394,
	567, 82, 546, 563, 73, 529, 313, 392, 328, 283,
	1599, 43, 287, 1600, 319, 844, 538, 538, 538, 1729,
	840, 1697, 910, 1021, 1579, 1690, 45, 297, 910, 283,
	304, 1681, 1232, 329, 1520, 1198, 314, 1676, 276, 1066,
	910, 1657, 268, 1651, 1520, 1642, 910, 1646, 1579, 298,
	1121, 719, 298, 1165, 309, 527, 325, 719, 298, 718,
	309, 291, 1022, 1633, 1608, 1603, 910, 1520, 910, 1590,
	275, 307, 1579, 397, 1578, 1563, 1246, 1579, 910, 1562,
	1421, 1543, 910, 720, 1198, 1523, 1519, 1488, 1198, 1520,
	1489, 1456, 1366, 1200, 910, 1023, 1020, 49, 1201, 1363,
	1199, 722, 1198, 748, 1135, 1198, 1317, 86, 86, 1312,
	1311, 1278, 1276, 1312, 1279, 1198, 51, 720, 813, 1275,
	1237, 721, 1198, 1155, 1137, 1274, 1204, 736, 1198, 1202,
	911, 812, 1198, 910, 811, 722, 544, 910, 86, 545,
	86, 49, 86, 52, 86, 862, 1198, 1004, 905, 413,
	47, 1025, 876, 405, 510, 721, 48, 404, 511, 86,
	51, 687, 686, 557, 391, 1247, 539, 539, 539, 556,
	86, 727, 345, 296, 46, 510, 49, 1698, 53, 511,
	385, 86, 86, 86, 511, 86, 591, 52, 749, 364,
	1696, 1689, 390, 1652, 47, 51, 1589, 1548, 1544, 1536,
	48, 1535, 1530, 352, 1529, 727, 501, 1528, 1019, 1582,
	744, 1527, 1514, 1436, 1474, 86, 737, 86, 843, 353,
	1248, 1431, 52, 1430, 1429, 506, 502, 327, 327, 1176,
	1692, 1121, 1370, 1348, 769, 594, 86, 718, 86, 86,
	86, 86, 1329, 86, 1283, 384, 1280, 86, 1268, 586,
	737, 1259, 86, 46, 1139, 1231, 1601, 1605, 86, 542,
	537, 690, 1228, 1226, 1215, 1209, 1136, 298, 1080, 382,
	1035, 738, 541, 1034, 404, 1001, 86, 403, 1389, 86,
	1645, 276, 746, 1625, 1624, 1617, 314, 1596, 1242, 1239,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 504, 1585, 328,
	328, 406, 1577, 1555, 1541, 738, 1512, 595, 298, 530,
	530, 1508, 1487, 275, 1357, 1347, 1326, 528, 531, 1325,
	1320, 1295, 1232, 1294, 329, 329, 1258, 1223, 1222, 284,
	1473, 1214, 596, 745, 1232, 689, 1195, 1191, 998, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 797, 554,
	553, 800, 1478, 1140, 1094, 400, 401, 766, 1002, 1093,
	587, 580, 1073, 1033, 676, 1232, 909, 680, 681, 682,
	679, 683, 49, 804, 790, 685, 86, 723, 724, 725,
	726, 728, 594, 688, 789, 788, 1604, 701, 787, 496,
	86, 51, 276, 700, 86, 276, 276, 86, 86, 699,
	807, 713, 786, 86, 809, 86, 86, 785, 86, 432,
	1237, 86, 784, 86, 86, 783, 327, 1094, 52, 86,
	86, 782, 1237, 781, 707, 47, 818, 708, 709, 780,
	779, 48, 798, 794, 795, 1049, 778, 801, 510, 777,
	84, 776, 511, 245, 767, 765, 864, 46, 691, 65,
	84, 857, 322, 1237, 595, 1247, 302, 290, 290, 408,
	764, 300, 594, 760, 300, 306, 300, 452, 829, 831,
	300, 315, 300, 245, 1350, 842, 1349, 842, 805, 596,
	503, 358, 720, 1122, 881, 900, 1282, 802, 328, 377,
	66, 803, 1281, 347, 1177, 373, 359, 774, 1247, 834,
	722, 1494, 43, 806, 68, 67, 69, 840, 770, 1390,
	1248, 821, 1218, 329, 1029, 793, 1117, 1666, 846, 1711,
	721, 298, 870, 1632, 309, 856, 1710, 859, 499, 498,
	851, 865, 863, 866, 595, 309, 325, 869, 309, 860,
	858, 837, 519, 1464, 520, 449, 706, 868, 267, 86,
	266, 261, 855, 1248, 376, 235, 262, 1571, 1570, 596,
	1307, 86, 86, 1287, 1286, 1213, 825, 1212, 1021, 1211,
	727, 1210, 1179, 985, 861, 836, 1131, 1511, 1242, 1239,
	1240, 1241, 1233, 1234, 1235, 1236, 1238, 519, 835, 520,
	86, 519, 86, 520, 1233, 1234, 1235, 1236, 1238, 381,
	1077, 1076, 912, 270, 958, 995, 356, 1022, 521, 1631,
	926, 946, 1560, 1297, 1668, 737, 61, 532, 1025, 1379,
	720, 594, 828, 920, 1241, 1233, 1234, 1235, 1236, 1238,
	957, 720, 1719, 817, 1678, 903, 904, 1110, 722, 1306,
	1023, 1020, 357, 999, 1114, 538, 245, 245, 1232, 722,
	1679, 1309, 885, 521, 1452, 807, 1447, 521, 721, 1119,
	807, 1626, 62, 1232, 1445, 1108, 886, 884, 817, 721,
	738, 995, 1110, 525, 816, 1025, 524, 84, 1132, 300,
	1029, 245, 1710, 388, 1453, 86, 86, 86, 298, 57,
	1079, 86, 355, 595, 86, 1009, 1025, 913, 290, 827,
	86, 86, 86, 86, 86, 791, 86, 86, 727, 300,
	1613, 757, 926, 946, 86, 1221, 86, 298, 596, 727,
	300, 300, 300, 86, 533, 1091, 1232, 1089, 1249, 1250,
	1251, 58, 86, 86, 273, 1000, 1237, 1298, 86, 729,
	730, 731, 723, 724, 725, 726, 728, 327, 282, 284,
	1083, 1237, 380, 1019, 551, 1112, 551, 1105, 1039, 826,
	1130, 517, 1448, 1340, 1449, 86, 283, 63, 86, 86,
	1246, 522, 86, 1561, 396, 245, 1685, 551, 245, 245,
	245, 86, 245, 1084, 281, 1232, 245, 1451, 86, 55,
	86, 84, 348, 350, 1454, 539, 1247, 695, 1181, 1686,
	1104, 1376, 983, 1709, 1005, 1010, 1141, 1013, 1124, 354,
	1125, 1304, 1085, 374, 1237, 290, 522, 1707, 716, 328,
	522, 1123, 1058, 1138, 1120, 284, 283, 1042, 1070, 1071,
	1072, 1134, 1126, 1129, 1377, 56, 1492, 1127, 1128, 898,
	1133, 1116, 367, 1252, 329, 346, 814, 1450, 1539, 344,
	1116, 1248, 60, 59, 74, 1148, 872, 1725, 1565, 1247,
	1718, 355, 874, 1172, 994, 375, 1043, 43, 1687, 1150,
	1149, 1151, 1146, 1237, 79, 1289, 1171, 1175, 875, 75,
	723, 724, 725, 726, 728, 271, 873, 984, 1564, 798,
	1025, 801, 1553, 725, 726, 728, 1142, 1733, 280, 1044,
	1041, 76, 1203, 274, 284, 1688, 1088, 795, 794, 981,
	1235, 1236, 1238, 899, 1248, 300, 78, 298, 1247, 395,
	1239, 1240, 1241, 1233, 1234, 1235, 1236, 1238, 1540, 822,
	1180, 1050, 698, 300, 1182, 1417, 300, 838, 1717, 692,
	54, 1375, 300, 396, 853, 854, 1506, 300, 1661, 395,
	300, 991, 245, 245, 684, 1045, 558, 1554, 551, 716,
	284, 1096, 1095, 989, 1188, 86, 1502, 1335, 1723, 1334,
	354, 562, 1217, 1248, 312, 311, 1186, 1732, 1243, 1244,
	1245, 982, 1242, 1239, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 1293, 86, 1463, 1460, 387, 281, 1507, 77, 1331,
	1462, 1154, 560, 1032, 1616, 1314, 86, 1724, 86, 1418,
	86, 86, 1040, 561, 86, 1419, 1265, 1266, 1267, 1284,
	1538, 1263, 1262, 1308, 1726, 987, 86, 986, 1356, 86,
	1227, 992, 1313, 1190, 1291, 86, 594, 80, 1194, 86,
	1184, 86, 1196, 867, 1189, 1233, 1234, 1235, 1236, 1238,
	372, 370, 1301, 1305, 1303, 1207, 1208, 369, 1344, 368,
	365, 1316, 1315, 310, 775, 678, 1031, 1328, 1321, 1443,
	1302, 1300, 1459, 1288, 1143, 1319, 901, 897, 1461, 1341,
	1342, 926, 946, 1337, 543, 1343, 540, 535, 883, 526,
	523, 1384, 86, 697, 1257, 1372, 1373, 1374, 1572, 1333,
	300, 822, 1336, 1711, 988, 1270, 398, 582, 595, 907,
	945, 990, 294, 361, 817, 926, 946, 1185, 1574, 851,
	832, 817, 926, 946, 1187, 833, 3, 830, 1393, 300,
	1310, 245, 1369, 596, 720, 1397, 1654, 1395, 1582, 1628,
	1391, 720, 1332, 1050, 1050, 1647, 402, 1378, 1380, 1381,
	1587, 70, 722, 298, 926, 946, 298, 86, 86, 86,
	1452, 1424, 908, 845, 714, 86, 86, 1428, 399, 1425,
	555, 86, 721, 86, 295, 86, 86, 86, 86, 721,
	303, 81, 1174, 86, 362, 1730, 1731, 1232, 925, 720,
	1453, 1457, 1458, 260, 1513, 1442, 86, 878, 877, 1437,
	1438, 1050, 1050, 1050, 1485, 86, 86, 1484, 1491, 86,
	1485, 1382, 945, 1484, 1351, 1486, 1277, 1008, 86, 86,
	1078, 1486, 1471, 1075, 300, 1086, 1087, 1074, 1477, 1026,
	822, 263, 264, 1092, 879, 1364, 1490, 1525, 1383, 1097,
	1098, 1100, 1102, 1103, 1509, 1106, 1107, 926, 946, 948,
	947, 1144, 880, 300, 768, 1118, 1518, 1475, 1510, 269,
	86, 1559, 300, 72, 677, 366, 922, 1532, 1448, 1677,
	1449, 883, 551, 1220, 1612, 71, 1592, 883, 1497, 1498,
	1030, 773, 1503, 25, 1482, 425, 1444, 1290, 892, 891,
	925, 597, 583, 1451, 572, 448, 1537, 371, 1422, 566,
	1454, 575, 1467, 1038, 695, 500, 450, 245, 300, 1432,
	1476, 1145, 923, 451, 86, 74, 86, 924, 86, 799,
	1152, 438, 921, 323, 849, 86, 1027, 1169, 1216, 300,
	1050, 1050, 298, 298, 771, 79, 298, 424, 1549, 430,
	75, 429, 1006, 421, 86, 1504, 1164, 351, 239, 240,
	1550, 948, 947, 1450, 926, 946, 1552, 1113, 1472, 902,
	86, 702, 76, 86, 1299, 86, 272, 1567, 922, 1586,
	1573, 1485, 1496, 86, 1484, 1229, 1056, 78, 1583, 86,
	1048, 1046, 1486, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
	1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
	1050, 1050, 1595, 1050, 1588, 1602, 1581, 1037, 1575, 383,
	926, 946, 512, 1160, 850, 1611, 363, 1568, 1569, 914,
	1173, 407, 1322, 1609, 710, 1691, 293, 292, 1163, 1192,
	1193, 926, 946, 888, 360, 559, 871, 265, 1338, 1623,
	1618, 86, 86, 1627, 1161, 86, 1598, 1296, 1665, 1621,
	50, 19, 1557, 86, 17, 16, 15, 1635, 86, 77,
	13, 1637, 12, 1485, 1639, 11, 1484, 86, 18, 1644,
	1147, 1636, 594, 9, 1486, 807, 8, 7, 24, 23,
	22, 5, 1649, 284, 4, 2, 1, 1254, 1255, 1256,
	1591, 1638, 0, 1648, 1650, 86, 86, 86, 80, 86,
	298, 1653, 1162, 0, 716, 0, 0, 926, 946, 0,
	411, 411, 0, 0, 0, 0, 1656, 86, 1669, 0,
	514, 1672, 1663, 720, 0, 0, 0, 1673, 0, 1485,
	1671, 300, 1484, 1675, 1674, 0, 1670, 1667, 0, 86,
	1486, 722, 0, 0, 595, 1318, 0, 822, 1694, 695,
	1324, 1695, 0, 1327, 0, 0, 0, 1705, 1708, 0,
	1706, 721, 0, 86, 0, 300, 0, 1712, 300, 596,
	0, 0, 0, 1716, 1169, 0, 1715, 0, 1346, 1714,
	1169, 945, 0, 0, 0, 1728, 1727, 0, 0, 1713,
	0, 0, 585, 584, 0, 578, 573, 0, 0, 0,
	0, 0, 1734, 1050, 0, 0, 0, 0, 0, 0,
	0, 727, 0, 703, 705, 945, 1354, 1355, 0, 0,
	712, 0, 945, 0, 1664, 1641, 0, 0, 0, 0,
	0, 1388, 752, 753, 754, 755, 756, 0, 0, 0,
	0, 759, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 737, 0, 0, 925,
	0, 772, 0, 0, 588, 0, 851, 0, 0, 1398,
	1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,
	1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1050, 1420,
	0, 0, 0, 925, 1680, 0, 1440, 1441, 822, 0,
	925, 0, 0, 0, 716, 716, 0, 0, 0, 0,
	1465, 738, 1466, 590, 300, 1468, 1469, 1470, 0, 0,
	948, 947, 300, 0, 0, 0, 0, 589, 808, 0,
	1481, 0, 925, 0, 0, 822, 1481, 922, 0, 0,
	0, 0, 0, 0, 300, 300, 0, 945, 300, 0,
	247, 0, 0, 0, 948, 947, 0, 716, 1169, 0,
	0, 948, 947, 0, 258, 0, 1050, 426, 32, 0,
	0, 922, 0, 0, 0, 0, 0, 0, 922, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 0, 0,
	1156, 1156, 0, 948, 947, 32, 0, 249, 0, 1533,
	0, 0, 0, 0, 259, 0, 0, 0, 0, 0,
	922, 277, 0, 0, 285, 0, 248, 250, 0, 0,
	0, 32, 0, 0, 0, 925, 0, 0, 0, 0,
	0, 0, 0, 285, 0, 1160, 1160, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1163, 1163, 251, 822, 945, 1551, 0, 245, 579, 574,
	1158, 1158, 252, 253, 300, 0, 1161, 1161, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 254, 0, 0,
	1159, 1159, 0, 716, 0, 0, 948, 947, 0, 1556,
	0, 0, 0, 0, 1501, 0, 0, 1481, 0, 1324,
	0, 0, 300, 922, 1594, 0, 0, 0, 0, 0,
	945, 0, 300, 0, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 0, 1162, 1162, 1232, 0, 1249, 1250,
	1251, 945, 925, 0, 0, 0, 411, 0, 1516, 0,
	0, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 0, 0, 0, 0, 0, 255, 0,
	1246, 256, 0, 0, 1615, 1500, 257, 0, 0, 0,
	1629, 1630, 0, 0, 1634, 0, 0, 0, 925, 1481,
	0, 0, 245, 948, 947, 0, 1036, 1643, 1047, 0,
	1057, 1059, 1064, 1067, 1068, 1069, 716, 945, 0, 925,
	922, 0, 0, 0, 1237, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	0, 0, 0, 0, 1662, 716, 300, 0, 245, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 948,
	947, 0, 1655, 0, 277, 1481, 1594, 0, 1111, 1247,
	0, 0, 0, 0, 0, 0, 922, 0, 0, 0,
	948, 947, 0, 0, 0, 0, 0, 0, 300, 0,
	0, 0, 0, 0, 0, 925, 0, 922, 21, 0,
	0, 0, 0, 720, 0, 739, 740, 741, 35, 0,
	0, 0, 716, 0, 0, 742, 0, 0, 0, 0,
	0, 722, 0, 748, 1248, 0, 0, 0, 0, 0,
	0, 37, 0, 712, 0, 0, 0, 42, 0, 0,
	0, 721, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 947, 0, 0,
	0, 0, 26, 0, 0, 38, 0, 0, 0, 27,
	0, 0, 0, 922, 0, 277, 0, 0, 277, 277,
	0, 0, 0, 0, 28, 0, 0, 0, 1243, 1244,
	1245, 727, 1242, 1239, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 758, 0, 0, 0, 762, 0, 0, 749, 1178,
	0, 0, 0, 1183, 0, 720, 0, 739, 740, 741,
	747, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	744, 0, 1197, 722, 0, 748, 737, 0, 0, 0,
	0, 0, 1206, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 0, 0, 0, 1219, 743, 736,
	0, 1224, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 29, 0, 39, 0, 0, 0, 0, 30, 0,
	0, 49, 759, 0, 0, 0, 33, 34, 1064, 1064,
	1064, 738, 0, 0, 36, 0, 0, 0, 0, 0,
	51, 0, 746, 727, 0, 0, 0, 32, 0, 32,
	1285, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	749, 1292, 32, 0, 0, 0, 0, 52, 0, 0,
	0, 0, 747, 0, 47, 0, 0, 0, 411, 0,
	48, 0, 744, 0, 0, 0, 0, 411, 737, 0,
	514, 0, 0, 745, 0, 733, 734, 735, 46, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 0, 0,
	743, 1081, 0, 0, 0, 720, 0, 739, 740, 741,
	1082, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 722, 0, 748, 0, 0, 0, 720,
	0, 0, 0, 738, 0, 1352, 0, 1353, 0, 0,
	0, 0, 0, 721, 746, 0, 720, 722, 1358, 736,
	0, 0, 0, 0, 0, 0, 1368, 0, 0, 0,
	0, 0, 1368, 0, 722, 0, 0, 721, 0, 0,
	0, 0, 0, 0, 0, 0, 1385, 0, 0, 0,
	0, 0, 0, 0, 721, 1394, 0, 0, 1396, 0,
	736, 0, 0, 727, 0, 745, 0, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	749, 0, 0, 0, 0, 0, 0, 727, 1545, 0,
	1426, 1427, 747, 0, 0, 0, 0, 917, 0, 1433,
	1434, 1435, 744, 0, 727, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	743, 0, 737, 0, 0, 0, 0, 411, 720, 0,
	739, 740, 741, 0, 0, 0, 0, 0, 0, 737,
	742, 0, 0, 0, 0, 0, 722, 0, 748, 1495,
	0, 0, 0, 738, 0, 720, 0, 739, 740, 741,
	0, 0, 0, 0, 746, 0, 721, 742, 0, 0,
	0, 0, 736, 722, 1517, 748, 0, 738, 0, 1521,
	1522, 0, 0, 0, 1524, 0, 0, 0, 0, 1526,
	0, 0, 0, 721, 738, 0, 0, 0, 0, 736,
	0, 0, 0, 0, 1531, 0, 0, 0, 1534, 0,
	0, 285, 0, 0, 0, 745, 727, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 0, 749, 0, 0, 0, 0, 1273, 1542,
	0, 0, 0, 727, 0, 747, 0, 0, 731, 723,
	724, 725, 726, 728, 0, 744, 0, 0, 0, 0,
	749, 737, 732, 729, 730, 731, 723, 724, 725, 726,
	728, 0, 747, 0, 0, 0, 0, 32, 0, 0,
	1566, 0, 744, 743, 0, 0, 0, 1170, 737, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 0, 738, 0, 720, 1597,
	739, 740, 741, 0, 0, 0, 0, 746, 0, 0,
	742, 0, 0, 1606, 1607, 0, 722, 0, 748, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 746, 0, 721, 0, 0, 0,
	0, 0, 736, 1620, 0, 0, 758, 0, 0, 0,
	0, 0, 0, 1622, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 0, 0, 514, 0, 0, 0, 0,
	0, 1272, 0, 0, 0, 745, 727, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 758, 749, 0, 0, 0, 0, 1271, 0,
	720, 0, 739, 740, 741, 747, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 744, 0, 0, 722, 0,
	748, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 0, 743, 736, 0, 1232, 0, 1249, 1250,
	1251, 0, 0, 0, 1693, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 1704, 1704, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 720, 0, 739, 740, 741, 0, 746, 727, 1704,
	1246, 0, 0, 917, 0, 0, 917, 0, 0, 722,
	0, 748, 0, 0, 0, 749, 0, 0, 0, 1232,
	0, 1249, 1250, 1251, 0, 0, 0, 747, 1704, 721,
	0, 1362, 0, 0, 0, 736, 0, 744, 0, 0,
	0, 0, 0, 737, 1237, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 1246, 0, 743, 0, 0, 1659, 0,
	0, 0, 0, 1252, 0, 0, 0, 0, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 749, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 1237, 747, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 737, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1252, 0, 0, 0,
	0, 0, 0, 0, 1248, 0, 0, 0, 0, 0,
	0, 0, 1247, 0, 0, 0, 0, 0, 0, 32,
	745, 0, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 0, 0, 0, 0, 738,
	1658, 0, 917, 917, 0, 0, 917, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1248, 1243, 1244,
	1245, 0, 1242, 1239, 1240, 1241, 1233, 1234, 1235, 1236,
	1238, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 745, 0, 733, 734, 735, 0, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1243, 1244, 1245, 0, 1242, 1239, 1240, 1241, 1233,
	1234, 1235, 1236, 1238, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1576, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 88, 89, 598, 90, 599, 600,
	601, 602, 603, 604, 605, 606, 91, 92, 190, 191,
	192, 93, 193, 194, 607, 94, 195, 196, 95, 608,
	609, 197, 198, 199, 610, 200, 611, 331, 612, 96,
	97, 98, 0, 99, 613, 100, 614, 332, 101, 102,
	615, 616, 617, 618, 619, 620, 103, 104, 105, 106,
	201, 107, 202, 203, 621, 622, 108, 623, 624, 625,
	109, 110, 626, 111, 627, 758, 628, 204, 112, 205,
	629, 113, 630, 114, 115, 206, 0, 116, 631, 117,
	632, 633, 333, 634, 118, 207, 635, 208, 636, 119,
	120, 209, 210, 637, 638, 121, 639, 334, 122, 211,
	212, 213, 640, 214, 641, 335, 123, 336, 124, 125,
	642, 643, 215, 337, 126, 338, 644, 127, 645, 646,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 647, 137, 648, 216, 139, 217, 140, 141,
	649, 650, 651, 652, 653, 142, 218, 340, 143, 341,
	219, 144, 145, 654, 220, 146, 221, 655, 147, 148,
	149, 222, 150, 151, 656, 153, 154, 152, 155, 657,
	156, 342, 157, 158, 223, 159, 0, 246, 160, 161,
	658, 224, 162, 163, 659, 164, 165, 343, 166, 225,
	167, 660, 168, 169, 171, 226, 170, 227, 661, 662,
	172, 173, 663, 228, 229, 230, 664, 665, 174, 231,
	232, 666, 175, 176, 177, 178, 667, 668, 179, 180,
	181, 669, 670, 182, 183, 184, 233, 234, 671, 185,
	672, 673, 674, 675, 186, 187, 188, 189, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 88, 89, 598, 90, 599, 600,
	601, 602, 603, 604, 605, 606, 91, 92, 190, 191,
	192, 93, 193, 194, 607, 94, 195, 196, 95, 608,
	609, 197, 198, 199, 610, 200, 611, 331, 612, 96,
	97, 98, 0, 99, 613, 100, 614, 332, 101, 102,
	615, 616, 617, 618, 619, 620, 103, 104, 105, 106,
	201, 107, 202, 203, 621, 622, 108, 623, 624, 625,
	109, 110, 626, 111, 627, 0, 628, 204, 112, 205,
	629, 113, 630, 114, 115, 206, 0, 116, 631, 117,
	632, 633, 333, 634, 118, 207, 635, 208, 636, 119,
	120, 209, 210, 637, 638, 121, 639, 334, 122, 211,
	212, 213, 640, 214, 641, 335, 123, 336, 124, 125,
	642, 643, 215, 337, 126, 338, 644, 127, 645, 646,
	128, 0, 129, 130, 131, 132, 133, 339, 134, 135,
	138, 136, 647, 137, 648, 216, 139, 217, 140, 141,
	649, 650, 651, 652, 653, 142, 218, 340, 143, 341,
	219, 144, 145, 654, 220, 146, 221, 655, 147, 148,
	149, 222, 150, 151, 656, 153, 154, 152, 155, 657,
	156, 342, 157, 158, 223, 159, 0, 246, 160, 161,
	658, 224, 162, 163, 659, 164, 165, 343, 166, 225,
	167, 660, 168, 169, 171, 226, 170, 227, 661, 662,
	172, 173, 663, 228, 229, 230, 664, 665, 174, 231,
	232, 666, 175, 176, 177, 178, 667, 668, 179, 180,
	181, 669, 670, 182, 183, 184, 233, 234, 671, 185,
	672, 673, 674, 675, 186, 187, 188, 189, 0, 593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	810, 88, 89, 598, 90, 599, 600, 601, 602, 603,
	604, 605, 606, 91, 92, 190, 191, 192, 93, 193,
	194, 607, 94, 195, 196, 95, 608, 609, 197, 198,
	199, 610, 200, 611, 331, 612, 96, 97, 98, 0,
	99, 613, 100, 614, 332, 101, 102, 615, 616, 617,
	618, 619, 620, 103, 104, 105, 106, 201, 107, 202,
	203, 621, 622, 108, 623, 624, 625, 109, 110, 626,
	111, 627, 0, 628, 204, 112, 205, 629, 113, 630,
	114, 115, 206, 0, 116, 631, 117, 632, 633, 333,
	634, 118, 207, 635, 208, 636, 119, 120, 209, 210,
	637, 638, 121, 639, 334, 122, 211, 212, 213, 640,
	214, 641, 335, 123, 336, 124, 125, 642, 643, 215,
	337, 126, 338, 644, 127, 645, 646, 128, 0, 129,
	130, 131, 132, 133, 339, 134, 135, 138, 136, 647,
	137, 648, 216, 139, 217, 140, 141, 649, 650, 651,
	652, 653, 142, 218, 340, 143, 341, 219, 144, 145,
	654, 220, 146, 221, 655, 147, 148, 149, 222, 150,
	151, 656, 153, 154, 152, 155, 657, 156, 342, 157,
	158, 223, 159, 0, 246, 160, 161, 658, 224, 162,
	163, 659, 164, 165, 343, 166, 225, 167, 660, 168,
	169, 171, 226, 170, 227, 661, 662, 172, 173, 663,
	228, 229, 230, 664, 665, 174, 231, 232, 666, 175,
	176, 177, 178, 667, 668, 179, 180, 181, 669, 670,
	182, 183, 184, 233, 234, 671, 185, 672, 673, 674,
	675, 186, 187, 188, 189, 446, 435, 436, 433, 434,
	422, 0, 0, 0, 0, 0, 0, 88, 89, 1015,
	90, 0, 0, 0, 0, 428, 0, 0, 0, 91,
	92, 190, 475, 476, 93, 477, 478, 0, 94, 195,
	196, 95, 443, 461, 479, 480, 199, 0, 471, 0,
	454, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 102, 0, 455, 457, 0, 456, 458, 103,
	104, 105, 106, 481, 107, 482, 483, 0, 0, 108,
	0, 1016, 0, 474, 110, 0, 111, 0, 0, 0,
	427, 112, 462, 441, 113, 0, 114, 115, 484, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 472, 0,
	208, 0, 119, 120, 468, 470, 0, 0, 121, 0,
	334, 122, 485, 486, 487, 0, 453, 0, 335, 123,
	336, 124, 125, 0, 0, 473, 337, 126, 338, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 417, 137, 442, 469, 139,
	488, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	340, 143, 341, 463, 144, 145, 0, 464, 146, 221,
	0, 147, 148, 149, 489, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 431, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 459, 164, 165,
	343, 166, 490, 167, 0, 168, 169, 171, 491, 170,
	465, 0, 0, 172, 173, 0, 228, 492, 493, 0,
	0, 174, 466, 467, 440, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 460, 0, 182, 183, 184, 233,
	494, 1014, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 418, 0, 446, 435, 436, 433, 434, 422, 0,
	0, 414, 415, 1017, 0, 88, 89, 416, 90, 0,
	423, 1012, 0, 428, 0, 0, 0, 91, 92, 190,
	475, 476, 93, 477, 478, 0, 94, 195, 196, 95,
	443, 461, 479, 480, 199, 0, 471, 0, 454, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 332, 101,
	102, 0, 455, 457, 0, 456, 458, 103, 104, 105,
	106, 481, 107, 482, 483, 515, 0, 108, 0, 0,
	0, 474, 110, 0, 111, 0, 0, 0, 427, 112,
	462, 441, 113, 0, 114, 115, 484, 0, 116, 0,
	117, 0, 0, 333, 0, 118, 472, 0, 208, 0,
	119, 120, 468, 470, 0, 0, 121, 0, 334, 122,
	485, 486, 487, 0, 453, 0, 335, 123, 336, 124,
	125, 0, 0, 473, 337, 126, 338, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 417, 137, 442, 469, 139, 488, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 340, 143,
	341, 463, 144, 145, 0, 464, 146, 221, 0, 147,
	148, 149, 489, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 342, 157, 158, 431, 159, 0, 246, 160,
	161, 49, 224, 162, 163, 459, 164, 165, 343, 166,
	490, 167, 0, 168, 169, 171, 491, 170, 465, 0,
	51, 172, 173, 0, 228, 492, 493, 0, 0, 174,
	466, 467, 440, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 460, 0, 182, 183, 184, 330, 494, 0,
	185, 0, 0, 0, 47, 186, 187, 188, 189, 418,
	48, 446, 435, 436, 433, 434, 422, 0, 0, 414,
	415, 0, 0, 88, 89, 416, 90, 0, 423, 0,
	0, 428, 0, 0, 0, 91, 92, 190, 475, 476,
	93, 477, 478, 0, 94, 195, 196, 95, 443, 461,
	479, 480, 199, 0, 471, 0, 454, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	455, 457, 0, 456, 458, 103, 104, 105, 106, 481,
	107, 482, 483, 0, 0, 108, 0, 0, 0, 474,
	110, 0, 111, 0, 0, 0, 427, 112, 462, 441,
	113, 0, 114, 115, 484, 0, 116, 0, 117, 0,
	0, 333, 0, 118, 472, 0, 208, 0, 119, 120,
	468, 470, 0, 0, 121, 0, 334, 122, 485, 486,
	487, 0, 453, 0, 335, 123, 336, 124, 125, 0,
	0, 473, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 417, 137, 442, 469, 139, 488, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 340, 143, 341, 463,
	144, 145, 0, 464, 146, 221, 0, 147, 148, 149,
	489, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 431, 159, 0, 246, 160, 161, 49,
	224, 162, 163, 459, 164, 165, 343, 166, 490, 167,
	0, 168, 169, 171, 491, 170, 465, 0, 51, 172,
	173, 0, 228, 492, 493, 0, 0, 174, 466, 467,
	440, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	460, 0, 182, 183, 184, 330, 494, 0, 185, 0,
	0, 0, 47, 186, 187, 188, 189, 418, 48, 446,
	435, 436, 433, 434, 422, 0, 0, 414, 415, 0,
	0, 88, 89, 416, 90, 0, 423, 0, 0, 428,
	0, 0, 0, 91, 92, 190, 475, 476, 93, 477,
	478, 1060, 94, 195, 196, 95, 443, 461, 479, 480,
	199, 0, 471, 0, 454, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 332, 101, 102, 0, 455, 457,
	0, 456, 458, 103, 104, 105, 106, 481, 107, 482,
	483, 0, 0, 108, 0, 0, 0, 474, 110, 0,
	111, 0, 0, 0, 427, 112, 462, 441, 113, 0,
	114, 115, 484, 0, 116, 0, 117, 0, 1065, 333,
	0, 118, 472, 0, 208, 0, 119, 120, 468, 470,
	0, 0, 121, 0, 334, 122, 485, 486, 487, 0,
	453, 0, 335, 123, 336, 124, 125, 0, 1061, 473,
	337, 126, 338, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 339, 134, 135, 138, 136, 417,
	137, 442, 469, 139, 488, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 340, 143, 341, 463, 144, 145,
	0, 464, 146, 221, 0, 147, 148, 149, 489, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 342, 157,
	158, 431, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 459, 164, 165, 343, 166, 490, 167, 0, 168,
	169, 171, 491, 170, 465, 0, 0, 172, 173, 0,
	228, 492, 493, 0, 1062, 174, 466, 467, 440, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 460, 0,
	182, 183, 184, 233, 494, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 418, 0, 446, 435, 436,
	433, 434, 422, 0, 0, 414, 415, 0, 0, 88,
	89, 416, 90, 0, 423, 0, 0, 428, 0, 0,
	0, 91, 92, 190, 475, 476, 93, 477, 478, 0,
	94, 195, 196, 95, 443, 461, 479, 480, 199, 0,
	471, 0, 454, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 455, 457, 0, 456,
	458, 103, 104, 105, 106, 481, 107, 482, 483, 0,
	0, 108, 0, 0, 0, 474, 110, 0, 111, 0,
	0, 0, 427, 112, 462, 441, 113, 0, 114, 115,
	484, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	472, 0, 208, 0, 119, 120, 468, 470, 0, 0,
	121, 0, 334, 122, 485, 486, 487, 0, 453, 0,
	335, 123, 336, 124, 125, 0, 0, 473, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 417, 137, 442,
	469, 139, 488, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 340, 143, 341, 463, 144, 145, 0, 464,
	146, 221, 0, 147, 148, 149, 489, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 431,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 459,
	164, 165, 343, 166, 490, 167, 0, 168, 169, 171,
	491, 170, 465, 0, 0, 172, 173, 0, 228, 492,
	493, 0, 0, 174, 466, 467, 440, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 460, 0, 182, 183,
	184, 233, 494, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 418, 0, 446, 435, 436, 433, 434,
	422, 0, 0, 414, 415, 0, 0, 88, 89, 416,
	90, 0, 423, 1423, 0, 428, 0, 0, 0, 91,
	92, 190, 475, 476, 93, 477, 478, 0, 94, 195,
	196, 95, 443, 461, 479, 480, 199, 0, 471, 0,
	454, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 102, 0, 455, 457, 0, 456, 458, 103,
	104, 105, 106, 481, 107, 482, 483, 0, 0, 108,
	0, 0, 0, 474, 110, 0, 111, 0, 0, 0,
	427, 112, 462, 441, 113, 0, 114, 115, 484, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 472, 0,
	208, 0, 119, 120, 468, 470, 0, 0, 121, 0,
	334, 122, 485, 486, 487, 0, 453, 0, 335, 123,
	336, 124, 125, 0, 0, 473, 337, 126, 338, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 417, 137, 442, 469, 139,
	488, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	340, 143, 341, 463, 144, 145, 0, 464, 146, 221,
	0, 147, 148, 149, 489, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 431, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 459, 164, 165,
	343, 166, 490, 167, 0, 168, 169, 171, 491, 170,
	465, 0, 0, 172, 173, 0, 228, 492, 493, 0,
	0, 174, 466, 467, 440, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 460, 0, 182, 183, 184, 233,
	494, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 418, 0, 446, 435, 436, 433, 434, 422, 0,
	0, 414, 415, 0, 0, 88, 89, 416, 90, 0,
	423, 1365, 0, 428, 0, 0, 0, 91, 92, 190,
	475, 476, 93, 477, 478, 0, 94, 195, 196, 95,
	443, 461, 479, 480, 199, 0, 471, 0, 454, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 332, 101,
	102, 0, 455, 457, 0, 456, 458, 103, 104, 105,
	106, 481, 107, 482, 483, 0, 0, 108, 0, 0,
	0, 474, 110, 0, 111, 0, 0, 0, 427, 112,
	462, 441, 113, 0, 114, 115, 484, 0, 116, 0,
	117, 0, 0, 333, 0, 118, 472, 0, 208, 0,
	119, 120, 468, 470, 0, 0, 121, 0, 334, 122,
	485, 486, 487, 0, 453, 0, 335, 123, 336, 124,
	125, 0, 0, 473, 337, 126, 338, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 417, 137, 442, 469, 139, 488, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 340, 143,
	341, 463, 144, 145, 0, 464, 146, 221, 0, 147,
	148, 149, 489, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 342, 157, 158, 431, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 459, 164, 165, 343, 166,
	490, 167, 0, 168, 169, 171, 491, 170, 465, 0,
	0, 172, 173, 0, 228, 492, 493, 0, 0, 174,
	466, 467, 440, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 460, 0, 182, 183, 184, 233, 494, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 418,
	0, 446, 435, 436, 433, 434, 422, 0, 0, 414,
	415, 0, 0, 88, 89, 416, 90, 0, 423, 1011,
	0, 428, 0, 0, 0, 91, 92, 190, 475, 476,
	93, 477, 478, 0, 94, 195, 196, 95, 443, 461,
	479, 480, 199, 0, 471, 0, 454, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	455, 457, 0, 456, 458, 103, 104, 105, 106, 481,
	107, 482, 483, 0, 0, 108, 0, 0, 0, 474,
	110, 0, 111, 0, 0, 0, 427, 112, 462, 441,
	113, 0, 114, 115, 484, 0, 116, 0, 117, 0,
	0, 333, 0, 118, 472, 0, 208, 0, 119, 120,
	468, 470, 0, 0, 121, 0, 334, 122, 485, 486,
	487, 0, 453, 0, 335, 123, 336, 124, 125, 0,
	0, 473, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 417, 137, 442, 469, 139, 488, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 340, 143, 341, 463,
	144, 145, 0, 464, 146, 221, 0, 147, 148, 149,
	489, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 431, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 459, 164, 165, 343, 166, 490, 167,
	0, 168, 169, 171, 491, 170, 465, 0, 0, 172,
	173, 0, 228, 492, 493, 0, 0, 174, 466, 467,
	440, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	460, 0, 182, 183, 184, 233, 494, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 415, 0,
	0, 0, 0, 416, 764, 1007, 423, 446, 435, 436,
	433, 434, 422, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 428, 0, 0,
	0, 91, 92, 190, 475, 476, 93, 477, 478, 0,
	94, 195, 196, 95, 443, 461, 479, 480, 199, 0,
	471, 0, 454, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 455, 457, 0, 456,
	458, 103, 104, 105, 106, 481, 107, 482, 483, 0,
	0, 108, 0, 0, 0, 474, 110, 0, 111, 0,
	0, 0, 427, 112, 462, 441, 113, 0, 114, 115,
	484, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	472, 0, 208, 0, 119, 120, 468, 470, 0, 0,
	121, 0, 334, 122, 485, 486, 487, 0, 453, 0,
	335, 123, 336, 124, 125, 0, 0, 473, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 417, 137, 442,
	469, 139, 488, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 340, 143, 341, 463, 144, 145, 0, 464,
	146, 221, 0, 147, 148, 149, 489, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 431,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 459,
	164, 165, 343, 166, 490, 167, 0, 168, 169, 171,
	491, 170, 465, 0, 0, 172, 173, 0, 228, 492,
	493, 0, 0, 174, 466, 467, 440, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 460, 0, 182, 183,
	184, 233, 494, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 418, 0, 446, 435, 436, 433, 434,
	422, 0, 0, 414, 415, 412, 0, 88, 89, 416,
	90, 0, 423, 0, 0, 428, 0, 0, 0, 91,
	92, 190, 475, 476, 93, 477, 478, 0, 94, 195,
	196, 95, 443, 461, 479, 480, 199, 0, 471, 0,
	454, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 102, 0, 455, 457, 0, 456, 458, 103,
	104, 105, 106, 481, 107, 482, 483, 0, 0, 108,
	0, 0, 0, 474, 110, 0, 111, 0, 0, 0,
	427, 112, 462, 441, 113, 0, 114, 115, 484, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 472, 0,
	208, 0, 119, 120, 468, 470, 0, 0, 121, 0,
	334, 122, 485, 486, 487, 0, 453, 0, 335, 123,
	336, 124, 125, 0, 0, 473, 337, 126, 338, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 417, 137, 442, 469, 139,
	488, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	340, 143, 341, 463, 144, 145, 0, 464, 146, 221,
	0, 147, 148, 149, 489, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 431, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 459, 164, 165,
	343, 166, 490, 167, 0, 168, 169, 171, 491, 170,
	465, 0, 0, 172, 173, 0, 228, 492, 493, 0,
	0, 174, 466, 467, 440, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 460, 0, 182, 183, 184, 233,
	494, 1371, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 418, 0, 446, 435, 436, 433, 434, 422, 0,
	0, 414, 415, 0, 0, 88, 89, 416, 90, 0,
	423, 0, 0, 428, 0, 0, 0, 91, 92, 190,
	475, 476, 93, 477, 478, 0, 94, 195, 196, 95,
	443, 461, 479, 480, 199, 0, 471, 0, 454, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 332, 101,
	102, 0, 455, 457, 0, 456, 458, 103, 104, 105,
	106, 481, 107, 482, 483, 515, 0, 108, 0, 0,
	0, 474, 110, 0, 111, 0, 0, 0, 427, 112,
	462, 441, 113, 0, 114, 115, 484, 0, 116, 0,
	117, 0, 0, 333, 0, 118, 472, 0, 208, 0,
	119, 120, 468, 470, 0, 0, 121, 0, 334, 122,
	485, 486, 487, 0, 453, 0, 335, 123, 336, 124,
	125, 0, 0, 473, 337, 126, 338, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 417, 137, 442, 469, 139, 488, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 340, 143,
	341, 463, 144, 145, 0, 464, 146, 221, 0, 147,
	148, 149, 489, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 342, 157, 158, 431, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 459, 164, 165, 343, 166,
	490, 167, 0, 168, 169, 171, 491, 170, 465, 0,
	0, 172, 173, 0, 228, 492, 493, 0, 0, 174,
	466, 467, 440, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 460, 0, 182, 183, 184, 233, 494, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 418,
	0, 446, 435, 436, 433, 434, 422, 0, 0, 414,
	415, 0, 0, 88, 89, 416, 90, 0, 423, 0,
	0, 428, 0, 0, 0, 91, 92, 190, 475, 476,
	93, 477, 478, 0, 94, 195, 196, 95, 443, 461,
	479, 480, 199, 0, 471, 0, 454, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	455, 457, 0, 456, 458, 103, 104, 105, 106, 481,
	107, 482, 483, 0, 0, 108, 0, 0, 0, 474,
	110, 0, 111, 0, 0, 0, 427, 112, 462, 441,
	113, 0, 114, 115, 484, 0, 116, 0, 117, 0,
	1065, 333, 0, 118, 472, 0, 208, 0, 119, 120,
	468, 470, 0, 0, 121, 0, 334, 122, 485, 486,
	487, 0, 453, 0, 335, 123, 336, 124, 125, 0,
	0, 473, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 417, 137, 442, 469, 139, 488, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 340, 143, 341, 463,
	144, 145, 0, 464, 146, 221, 0, 147, 148, 149,
	489, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 431, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 459, 164, 165, 343, 166, 490, 167,
	0, 168, 169, 171, 491, 170, 465, 0, 0, 172,
	173, 0, 228, 492, 493, 0, 0, 174, 466, 467,
	440, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	460, 0, 182, 183, 184, 233, 494, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 414, 415, 0,
	0, 0, 0, 416, 0, 0, 423, 446, 435, 436,
	433, 434, 422, 0, 0, 0, 0, 0, 0, 88,
	89, 704, 90, 0, 0, 0, 0, 428, 0, 0,
	0, 91, 92, 190, 475, 476, 93, 477, 478, 0,
	94, 195, 196, 95, 443, 461, 479, 480, 199, 0,
	471, 0, 454, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 455, 457, 0, 456,
	458, 103, 104, 105, 106, 481, 107, 482, 483, 0,
	0, 108, 0, 0, 0, 474, 110, 0, 111, 0,
	0, 0, 427, 112, 462, 441, 113, 0, 114, 115,
	484, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	472, 0, 208, 0, 119, 120, 468, 470, 0, 0,
	121, 0, 334, 122, 485, 486, 487, 0, 453, 0,
	335, 123, 336, 124, 125, 0, 0, 473, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 417, 137, 442,
	469, 139, 488, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 340, 143, 341, 463, 144, 145, 0, 464,
	146, 221, 0, 147, 148, 149, 489, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 431,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 459,
	164, 165, 343, 166, 490, 167, 0, 168, 169, 171,
	491, 170, 465, 0, 0, 172, 173, 0, 228, 492,
	493, 0, 0, 174, 466, 467, 440, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 460, 0, 182, 183,
	184, 233, 494, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 418, 0, 446, 435, 436, 433, 434,
	422, 0, 0, 414, 415, 0, 0, 88, 89, 416,
	90, 0, 423, 0, 0, 428, 0, 0, 0, 91,
	92, 190, 475, 476, 93, 477, 478, 0, 94, 195,
	196, 95, 443, 461, 479, 480, 199, 0, 471, 0,
	454, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 1703, 0, 455, 457, 0, 456, 458, 103,
	104, 105, 106, 481, 107, 482, 483, 0, 0, 108,
	0, 0, 0, 474, 110, 0, 111, 0, 0, 0,
	427, 112, 462, 441, 113, 0, 114, 115, 484, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 472, 0,
	208, 0, 119, 120, 468, 470, 0, 0, 121, 0,
	334, 122, 485, 486, 487, 0, 453, 0, 335, 123,
	336, 124, 125, 0, 0, 473, 337, 126, 338, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 417, 137, 442, 469, 139,
	488, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	340, 143, 341, 463, 144, 145, 0, 464, 146, 221,
	0, 147, 148, 149, 489, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 431, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 459, 164, 165,
	343, 166, 490, 167, 0, 168, 169, 171, 491, 170,
	465, 0, 0, 172, 173, 0, 228, 492, 493, 0,
	0, 174, 466, 467, 440, 175, 176, 1702, 178, 0,
	0, 179, 180, 181, 460, 0, 182, 183, 184, 233,
	494, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 418, 0, 446, 435, 436, 433, 434, 422, 0,
	0, 414, 415, 0, 0, 88, 89, 416, 90, 0,
	423, 0, 0, 428, 0, 0, 0, 91, 92, 1701,
	475, 476, 93, 477, 478, 0, 94, 195, 196, 95,
	443, 461, 479, 480, 199, 0, 471, 0, 454, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 332, 101,
	1703, 0, 455, 457, 0, 456, 458, 103, 104, 105,
	106, 481, 107, 482, 483, 0, 0, 108, 0, 0,
	0, 474, 110, 0, 111, 0, 0, 0, 427, 112,
	462, 441, 113, 0, 114, 115, 484, 0, 116, 0,
	117, 0, 0, 333, 0, 118, 472, 0, 208, 0,
	119, 120, 468, 470, 0, 0, 121, 0, 334, 122,
	485, 486, 487, 0, 453, 0, 335, 123, 336, 124,
	125, 0, 0, 473, 337, 126, 338, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 339, 134,
	135, 138, 136, 417, 137, 442, 469, 139, 488, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 340, 143,
	341, 463, 144, 145, 0, 464, 146, 221, 0, 147,
	148, 149, 489, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 342, 157, 158, 431, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 459, 164, 165, 343, 166,
	490, 167, 0, 168, 169, 171, 491, 170, 465, 0,
	0, 172, 173, 0, 228, 492, 493, 0, 0, 174,
	466, 467, 440, 175, 176, 1702, 178, 0, 0, 179,
	180, 181, 460, 0, 182, 183, 184, 233, 494, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 418,
	0, 446, 435, 436, 433, 434, 422, 0, 0, 414,
	415, 0, 0, 88, 89, 416, 90, 0, 423, 0,
	0, 428, 0, 0, 0, 91, 92, 190, 475, 476,
	93, 477, 478, 0, 94, 195, 196, 95, 443, 461,
	479, 480, 199, 0, 471, 0, 454, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	455, 457, 0, 456, 458, 103, 104, 105, 106, 481,
	107, 482, 483, 0, 0, 108, 0, 0, 0, 474,
	110, 0, 111, 0, 0, 0, 427, 112, 462, 441,
	113, 0, 114, 115, 484, 0, 116, 0, 117, 0,
	0, 333, 0, 118, 472, 0, 208, 0, 119, 120,
	468, 470, 0, 0, 121, 0, 334, 122, 485, 486,
	487, 0, 453, 0, 335, 123, 336, 124, 125, 0,
	0, 473, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 417, 137, 442, 469, 139, 488, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 340, 143, 341, 463,
	144, 145, 0, 464, 146, 221, 0, 147, 148, 149,
	489, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 431, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 459, 164, 165, 343, 166, 490, 167,
	0, 168, 169, 171, 491, 170, 465, 0, 0, 172,
	173, 0, 228, 492, 493, 0, 0, 174, 466, 467,
	440, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	460, 0, 182, 183, 184, 233, 494, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 418, 0, 446,
	435, 436, 433, 434, 422, 0, 0, 414, 415, 0,
	0, 88, 89, 416, 90, 0, 423, 0, 0, 428,
	0, 0, 0, 91, 92, 190, 475, 476, 93, 477,
	478, 0, 94, 195, 196, 95, 443, 461, 479, 480,
	199, 0, 471, 0, 454, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 332, 101, 102, 0, 455, 457,
	0, 456, 458, 103, 104, 105, 106, 481, 107, 482,
	483, 0, 0, 108, 0, 0, 0, 474, 110, 0,
	111, 0, 0, 0, 427, 112, 462, 441, 113, 0,
	114, 115, 484, 0, 116, 0, 117, 0, 0, 333,
	0, 118, 472, 0, 208, 0, 119, 120, 468, 470,
	0, 0, 121, 0, 334, 122, 485, 486, 487, 0,
	453, 0, 335, 123, 336, 124, 125, 0, 0, 473,
	337, 126, 338, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 339, 134, 135, 138, 136, 0,
	137, 442, 469, 139, 488, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 340, 143, 341, 463, 144, 145,
	0, 464, 146, 221, 0, 147, 148, 149, 489, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 342, 157,
	158, 1055, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 459, 164, 165, 343, 166, 490, 167, 0, 168,
	169, 171, 491, 170, 465, 0, 0, 172, 173, 0,
	228, 492, 493, 0, 0, 174, 466, 467, 440, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 460, 0,
	182, 183, 184, 233, 494, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 446, 435, 436, 433, 434,
	422, 0, 0, 0, 0, 1051, 1052, 88, 89, 0,
	90, 1053, 0, 0, 1054, 428, 0, 0, 0, 91,
	92, 0, 475, 476, 93, 477, 478, 0, 94, 195,
	196, 95, 443, 461, 479, 480, 199, 0, 471, 0,
	454, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 1703, 0, 455, 457, 0, 456, 458, 103,
	104, 105, 106, 481, 107, 482, 483, 0, 0, 108,
	0, 0, 0, 474, 110, 0, 111, 0, 0, 0,
	427, 112, 462, 441, 113, 0, 114, 115, 484, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 472, 0,
	208, 0, 119, 120, 468, 470, 0, 0, 121, 0,
	334, 122, 485, 486, 487, 0, 453, 0, 0, 123,
	336, 124, 125, 0, 0, 473, 337, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 417, 137, 442, 469, 139,
	488, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	340, 143, 341, 463, 144, 145, 0, 464, 146, 221,
	0, 147, 148, 149, 489, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 431, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 459, 164, 165,
	0, 166, 490, 167, 0, 168, 169, 171, 491, 170,
	465, 0, 0, 172, 173, 0, 228, 492, 493, 0,
	0, 174, 466, 467, 440, 175, 176, 1702, 178, 0,
	0, 179, 180, 181, 460, 0, 182, 183, 184, 233,
	494, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 415, 88, 89, 0, 90, 416, 0, 0,
	423, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 461,
	197, 198, 199, 0, 471, 0, 454, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	455, 457, 0, 456, 458, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 462, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 333, 0, 118, 472, 0, 208, 0, 119, 120,
	468, 470, 0, 0, 121, 0, 334, 122, 211, 212,
	213, 0, 214, 0, 335, 123, 336, 124, 125, 0,
	0, 473, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 0, 137, 0, 469, 139, 217, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 340, 143, 341, 463,
	144, 145, 0, 464, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 459, 164, 165, 343, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 465, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 466, 467,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	460, 0, 182, 183, 184, 233, 234, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 1483, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 331, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	207, 0, 208, 0, 119, 120, 209, 210, 0, 0,
	121, 0, 334, 122, 211, 212, 213, 0, 214, 0,
	335, 123, 336, 124, 125, 0, 0, 215, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 340, 143, 341, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 223,
	159, 0, 246, 160, 161, 49, 224, 162, 163, 0,
	164, 165, 343, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 51, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 330, 234, 0, 185, 0, 0, 0, 47, 186,
	187, 188, 189, 0, 48, 326, 577, 0, 578, 573,
	568, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 46, 0, 0, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	331, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	332, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 581, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 570, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 333, 0, 118, 207, 0,
	208, 0, 119, 120, 209, 210, 0, 0, 121, 0,
	334, 122, 211, 212, 213, 0, 214, 0, 335, 123,
	336, 124, 125, 0, 0, 215, 337, 126, 338, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	339, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 571, 0, 0, 0, 142, 218,
	340, 143, 341, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 342, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	343, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 569, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 326, 577, 0, 578, 573, 568, 0, 0, 0,
	0, 579, 574, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 331, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 332, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 564, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 570,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 333, 0, 118, 207, 0, 208, 0, 119, 120,
	209, 210, 0, 0, 121, 0, 334, 122, 211, 212,
	213, 0, 214, 0, 335, 123, 336, 124, 125, 0,
	0, 215, 337, 126, 338, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 339, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	571, 0, 0, 0, 142, 218, 340, 143, 341, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	342, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 343, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	569, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 326, 577, 0,
	578, 573, 568, 0, 0, 0, 0, 579, 574, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 331, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 570, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	207, 0, 208, 0, 119, 120, 209, 210, 0, 0,
	121, 0, 334, 122, 211, 212, 213, 0, 214, 0,
	335, 123, 336, 124, 125, 0, 0, 215, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 571, 0, 0, 0,
	142, 218, 340, 143, 341, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 343, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 569, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 579, 574, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 299, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 49, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	51, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 330, 234, 0,
	185, 0, 0, 0, 47, 186, 187, 188, 189, 85,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 919, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 209, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 49, 224, 162,
	163, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 51, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 330, 234, 0, 185, 0, 0, 0,
	47, 186, 187, 188, 189, 85, 48, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 46, 0, 1168, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 209, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 0, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 404, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	209, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 299, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 0, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 919, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	207, 0, 208, 0, 119, 120, 209, 210, 0, 0,
	121, 0, 0, 122, 211, 212, 213, 0, 214, 0,
	0, 123, 0, 124, 125, 0, 0, 215, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 0, 143, 0, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 0, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 0, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 852, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 0,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 1389, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 209, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 0, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 505, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 549, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 209, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 548, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 85, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 552, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	209, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 326, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 552,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 331, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 332, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 333, 0, 118,
	207, 0, 208, 0, 119, 120, 209, 210, 0, 0,
	121, 0, 334, 122, 211, 212, 213, 0, 214, 0,
	335, 123, 336, 124, 125, 0, 0, 215, 337, 126,
	338, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 339, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 340, 143, 341, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 342, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 343, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 825, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 823, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 896, 0, 114, 115, 206, 0, 116, 0,
	117, 828, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 894, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 827, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 895, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 85,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 825, 200, 0, 0, 820, 96, 97, 98, 0,
	99, 823, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 828, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 819, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 827, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 826, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 85, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 1168, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 209, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 85, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	209, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 299, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 85, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	207, 0, 208, 0, 119, 120, 305, 210, 0, 0,
	121, 0, 0, 122, 211, 212, 213, 0, 214, 0,
	0, 123, 0, 124, 125, 0, 0, 215, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 299, 0, 0,
	142, 218, 0, 143, 0, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 0, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 85,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 1101, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 85, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 1099, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 85, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	1090, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 85, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	207, 0, 208, 0, 119, 120, 694, 210, 0, 0,
	121, 0, 0, 122, 211, 212, 213, 0, 214, 0,
	0, 123, 0, 124, 125, 0, 0, 215, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 0, 143, 0, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 0, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 83, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 85,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	534, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 209, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 0, 0, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 85, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 389, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 85, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	386, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 85, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 349, 0,
	200, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	207, 0, 208, 0, 119, 120, 209, 210, 0, 0,
	121, 0, 0, 122, 211, 212, 213, 0, 214, 0,
	0, 123, 0, 124, 125, 0, 0, 215, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 243, 0, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 0, 143, 0, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 0, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 242, 229,
	230, 0, 0, 238, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 243, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 242, 229, 230, 0, 0, 238,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 85,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 321, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 127, 0, 0, 128, 0, 129,
	130, 131, 132, 133, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	163, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	228, 229, 230, 0, 0, 174, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 85, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 318, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 145, 0, 220, 146, 221,
	0, 147, 148, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 159, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 85, 185, 0, 0, 0, 0, 186, 187, 188,
	189, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 190, 191, 192,
	93, 193, 194, 0, 94, 195, 196, 95, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 96, 97,
	98, 0, 99, 0, 100, 0, 0, 101, 102, 0,
	0, 0, 0, 0, 0, 103, 104, 105, 106, 201,
	107, 202, 203, 0, 0, 108, 0, 0, 0, 109,
	110, 0, 111, 0, 0, 0, 204, 112, 205, 0,
	113, 0, 114, 115, 206, 0, 116, 0, 117, 0,
	0, 0, 0, 118, 207, 0, 208, 0, 119, 120,
	316, 210, 0, 0, 121, 0, 0, 122, 211, 212,
	213, 0, 214, 0, 0, 123, 0, 124, 125, 0,
	0, 215, 0, 126, 0, 0, 127, 0, 0, 128,
	0, 129, 130, 131, 132, 133, 0, 134, 135, 138,
	136, 0, 137, 0, 216, 139, 217, 140, 141, 0,
	0, 0, 0, 0, 142, 218, 0, 143, 0, 219,
	144, 145, 0, 220, 146, 221, 0, 147, 148, 149,
	222, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 223, 159, 0, 246, 160, 161, 0,
	224, 162, 163, 0, 164, 165, 0, 166, 225, 167,
	0, 168, 169, 171, 226, 170, 227, 0, 0, 172,
	173, 0, 228, 229, 230, 0, 0, 174, 231, 232,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 0, 182, 183, 184, 233, 234, 85, 185, 0,
	0, 0, 0, 186, 187, 188, 189, 0, 0, 88,
	89, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 91, 92, 190, 191, 192, 93, 193, 194, 0,
	94, 195, 196, 95, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 96, 97, 98, 0, 99, 0,
	100, 0, 0, 101, 102, 0, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 201, 107, 202, 203, 0,
	0, 108, 0, 0, 0, 109, 110, 0, 111, 0,
	0, 0, 204, 112, 205, 0, 113, 0, 114, 115,
	206, 0, 116, 0, 117, 0, 0, 0, 0, 118,
	207, 0, 208, 0, 119, 120, 308, 210, 0, 0,
	121, 0, 0, 122, 211, 212, 213, 0, 214, 0,
	0, 123, 0, 124, 125, 0, 0, 215, 0, 126,
	0, 0, 127, 0, 0, 128, 0, 129, 130, 131,
	132, 133, 0, 134, 135, 138, 136, 0, 137, 0,
	216, 139, 217, 140, 141, 0, 0, 0, 0, 0,
	142, 218, 0, 143, 0, 219, 144, 145, 0, 220,
	146, 221, 0, 147, 148, 149, 222, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 223,
	159, 0, 246, 160, 161, 0, 224, 162, 163, 0,
	164, 165, 0, 166, 225, 167, 0, 168, 169, 171,
	226, 170, 227, 0, 0, 172, 173, 0, 228, 229,
	230, 0, 0, 174, 231, 232, 0, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 0, 0, 182, 183,
	184, 233, 234, 85, 185, 0, 0, 0, 0, 186,
	187, 188, 189, 0, 0, 88, 89, 0, 90, 0,
	0, 0, 0, 0, 0, 0, 0, 91, 92, 190,
	191, 192, 93, 193, 194, 0, 94, 195, 196, 95,
	0, 0, 197, 198, 199, 0, 200, 0, 0, 0,
	96, 97, 98, 0, 99, 0, 100, 0, 0, 101,
	102, 0, 0, 0, 0, 0, 0, 103, 104, 105,
	106, 201, 107, 202, 203, 0, 0, 108, 0, 0,
	0, 109, 110, 0, 111, 0, 0, 0, 204, 112,
	205, 0, 113, 0, 114, 115, 206, 0, 116, 0,
	117, 0, 0, 0, 0, 118, 207, 0, 208, 0,
	119, 120, 209, 210, 0, 0, 121, 0, 0, 122,
	211, 212, 213, 0, 214, 0, 0, 123, 0, 124,
	125, 0, 0, 215, 0, 126, 0, 0, 127, 0,
	0, 128, 0, 129, 130, 131, 132, 133, 0, 134,
	135, 138, 136, 0, 137, 0, 216, 139, 217, 140,
	141, 0, 0, 0, 0, 0, 142, 218, 0, 143,
	0, 219, 144, 145, 0, 220, 146, 221, 0, 147,
	148, 149, 222, 288, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 223, 159, 0, 246, 160,
	161, 0, 224, 162, 163, 0, 164, 165, 0, 166,
	225, 167, 0, 168, 169, 171, 226, 170, 227, 0,
	0, 172, 173, 0, 228, 229, 230, 0, 0, 174,
	231, 232, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 0, 182, 183, 184, 233, 234, 85,
	185, 0, 0, 0, 0, 186, 187, 188, 189, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 92, 190, 191, 192, 93, 193,
	194, 0, 94, 195, 196, 95, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 96, 97, 98, 0,
	99, 0, 100, 0, 0, 101, 102, 0, 0, 0,
	0, 0, 0, 103, 104, 105, 106, 201, 107, 202,
	203, 0, 0, 108, 0, 0, 0, 109, 110, 0,
	111, 0, 0, 0, 204, 112, 205, 0, 113, 0,
	114, 115, 206, 0, 116, 0, 117, 0, 0, 0,
	0, 118, 207, 0, 208, 0, 119, 120, 209, 210,
	0, 0, 121, 0, 0, 122, 211, 212, 213, 0,
	214, 0, 0, 123, 0, 124, 125, 0, 0, 215,
	0, 126, 0, 0, 236, 0, 0, 128, 0, 129,
	130, 131, 132, 243, 0, 134, 135, 138, 136, 0,
	137, 0, 216, 139, 217, 140, 141, 0, 0, 0,
	0, 0, 142, 218, 0, 143, 0, 219, 144, 145,
	0, 220, 146, 221, 0, 147, 148, 149, 222, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 223, 159, 0, 246, 160, 161, 0, 224, 162,
	237, 0, 164, 165, 0, 166, 225, 167, 0, 168,
	169, 171, 226, 170, 227, 0, 0, 172, 173, 0,
	242, 229, 230, 0, 0, 238, 231, 232, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 0,
	182, 183, 184, 233, 234, 85, 185, 0, 0, 0,
	0, 186, 187, 188, 189, 0, 0, 88, 89, 0,
	90, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	92, 190, 191, 192, 93, 193, 194, 0, 94, 195,
	196, 95, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 96, 97, 98, 0, 99, 0, 100, 0,
	0, 101, 102, 0, 0, 0, 0, 0, 0, 103,
	104, 105, 106, 201, 107, 202, 203, 0, 0, 108,
	0, 0, 0, 109, 110, 0, 111, 0, 0, 0,
	204, 112, 205, 0, 113, 0, 114, 115, 206, 0,
	116, 0, 117, 0, 0, 0, 0, 118, 207, 0,
	208, 0, 119, 120, 209, 210, 0, 0, 121, 0,
	0, 122, 211, 212, 213, 0, 214, 0, 0, 123,
	0, 124, 125, 0, 0, 215, 0, 126, 0, 0,
	127, 0, 0, 128, 0, 129, 130, 131, 132, 133,
	0, 134, 135, 138, 136, 0, 137, 0, 216, 139,
	217, 140, 141, 0, 0, 0, 0, 0, 142, 218,
	0, 143, 0, 219, 144, 0, 0, 220, 146, 221,
	0, 147, 0, 149, 222, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 223, 0, 0,
	246, 160, 161, 0, 224, 162, 163, 0, 164, 165,
	0, 166, 225, 167, 0, 168, 169, 171, 226, 170,
	227, 0, 0, 172, 173, 0, 228, 229, 230, 0,
	0, 174, 231, 232, 0, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 0, 182, 183, 184, 233,
	234, 720, 185, 739, 740, 741, 0, 186, 187, 188,
	189, 0, 0, 742, 0, 0, 0, 0, 0, 722,
	720, 748, 739, 740, 741, 0, 0, 0, 0, 0,
	0, 0, 742, 0, 0, 0, 0, 0, 722, 721,
	748, 0, 0, 0, 0, 736, 0, 720, 0, 739,
	740, 741, 0, 0, 0, 0, 0, 0, 721, 742,
	0, 0, 0, 0, 736, 722, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 721, 0, 0, 0, 727,
	0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 749, 0, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 749, 0, 0, 744, 0,
	0, 0, 0, 0, 737, 727, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 0, 0,
	0, 0, 749, 737, 0, 0, 743, 0, 0, 0,
	0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 743, 0, 0, 0, 0,
	737, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 743, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 738, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 746, 0, 0, 0,
	0, 745, 0, 733, 734, 735, 0, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	745, 1640, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 0, 0, 0, 0, 0,
	1619, 0, 0, 0, 0, 0, 0, 745, 0, 733,
	734, 735, 0, 732, 729, 730, 731, 723, 724, 725,
	726, 728, 720, 0, 739, 740, 741, 1614, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	722, 720, 748, 739, 740, 741, 0, 0, 0, 0,
	0, 0, 0, 742, 0, 0, 0, 0, 0, 722,
	721, 748, 0, 0, 0, 0, 736, 0, 720, 0,
	739, 740, 741, 0, 0, 0, 0, 0, 0, 721,
	742, 0, 0, 0, 0, 736, 722, 0, 748, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	727, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 749, 0, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 749, 0, 0, 744,
	0, 0, 0, 0, 0, 737, 727, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 749, 737, 0, 0, 743, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 744, 743, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 743, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 746, 0, 0,
	0, 0, 745, 0, 733, 734, 735, 0, 732, 729,
	730, 731, 723, 724, 725, 726, 728, 0, 0, 0,
	0, 745, 1610, 733, 734, 735, 0, 732, 729, 730,
	731, 723, 724, 725, 726, 728, 0, 0, 0, 0,
	0, 1547, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 720, 0, 739, 740, 741, 1546, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 722, 720, 748, 739, 740, 741, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 0, 0, 0,
	722, 721, 748, 0, 0, 0, 0, 736, 0, 720,
	0, 739, 740, 741, 0, 0, 0, 0, 0, 0,
	721, 742, 0, 0, 0, 0, 736, 722, 0, 748,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 721, 0, 0,
	0, 727, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 749, 0,
	727, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	747, 0, 0, 0, 0, 0, 0, 749, 0, 0,
	744, 0, 0, 0, 0, 0, 737, 727, 0, 747,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 744,
	0, 0, 0, 0, 749, 737, 0, 0, 743, 0,
	0, 0, 0, 0, 0, 0, 747, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 743, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 746, 0, 743, 0, 0, 0, 0, 0,
	738, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 0, 0, 745, 0, 733, 734, 735, 0, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 0, 0,
	0, 0, 745, 1455, 733, 734, 735, 0, 732, 729,
	730, 731, 723, 724, 725, 726, 728, 0, 0, 0,
	0, 0, 1392, 0, 0, 0, 0, 0, 0, 745,
	0, 733, 734, 735, 0, 732, 729, 730, 731, 723,
	724, 725, 726, 728, 720, 0, 739, 740, 741, 1367,
	0, 0, 0, 0, 0, 0, 742, 0, 0, 0,
	0, 0, 722, 720, 748, 739, 740, 741, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 0,
	0, 722, 721, 748, 0, 0, 0, 0, 736, 0,
	720, 0, 739, 740, 741, 0, 0, 0, 0, 0,
	0, 721, 742, 0, 0, 0, 0, 736, 722, 0,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 0,
	0, 0, 727, 0, 736, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	1232, 727, 1249, 1250, 1251, 0, 0, 0, 0, 0,
	0, 747, 1361, 0, 0, 0, 0, 0, 749, 0,
	0, 744, 0, 0, 0, 0, 0, 737, 727, 1721,
	747, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 0, 0, 0, 1246, 749, 737, 0, 0, 743,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 744, 743, 0,
	0, 0, 0, 737, 0, 0, 0, 0, 0, 0,
	0, 0, 738, 0, 0, 0, 0, 0, 1237, 0,
	0, 0, 0, 746, 0, 743, 0, 0, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 1720, 0, 0,
	0, 0, 746, 0, 0, 0, 0, 1252, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	0, 0, 0, 1247, 0, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 745, 0, 733, 734, 735, 0,
	732, 729, 730, 731, 723, 724, 725, 726, 728, 0,
	0, 0, 0, 745, 1003, 733, 734, 735, 0, 732,
	729, 730, 731, 723, 724, 725, 726, 728, 0, 0,
	0, 1439, 0, 0, 0, 0, 0, 0, 1248, 0,
	745, 0, 733, 734, 735, 0, 732, 729, 730, 731,
	723, 724, 725, 726, 728, 720, 0, 739, 740, 741,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 722, 0, 748, 0, 0, 720, 0,
	739, 740, 741, 0, 0, 0, 0, 0, 0, 0,
	742, 0, 0, 721, 907, 0, 722, 0, 748, 736,
	0, 0, 1243, 1244, 1245, 0, 1242, 1239, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 0, 721, 0, 0, 0,
	0, 0, 736, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 1263, 0, 908, 1262, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 720,
	749, 739, 740, 741, 0, 0, 727, 0, 0, 0,
	0, 0, 747, 0, 0, 0, 0, 722, 0, 748,
	0, 0, 744, 749, 0, 0, 0, 0, 737, 0,
	0, 0, 0, 0, 0, 747, 0, 721, 0, 0,
	0, 0, 0, 736, 0, 744, 0, 0, 0, 0,
	743, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 751, 743, 0, 0, 0, 0, 720, 0,
	739, 740, 741, 738, 0, 0, 0, 727, 0, 0,
	742, 0, 0, 750, 746, 0, 722, 0, 748, 0,
	0, 0, 0, 0, 749, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 746, 0, 0,
	0, 0, 736, 0, 0, 0, 744, 0, 0, 0,
	0, 0, 737, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 745, 0, 733, 734, 735,
	0, 732, 729, 730, 731, 723, 724, 725, 726, 728,
	0, 0, 0, 0, 0, 0, 727, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 749, 0, 0, 0, 738, 720, 0,
	739, 740, 741, 0, 0, 747, 0, 0, 746, 0,
	742, 0, 0, 0, 0, 744, 722, 0, 748, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 736, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 733, 734, 735, 0, 732, 729, 730, 731, 723,
	724, 725, 726, 728, 0, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 0, 727, 746, 0, 0,
	742, 0, 0, 0, 0, 0, 722, 0, 748, 0,
	0, 0, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 721, 0, 0, 0,
	0, 0, 736, 0, 0, 744, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 743, 283, 0, 0, 0, 720, 0,
	739, 740, 741, 0, 0, 0, 727, 0, 0, 0,
	742, 0, 0, 1264, 0, 0, 722, 0, 748, 0,
	0, 0, 0, 749, 0, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 747, 721, 746, 0, 0,
	742, 0, 736, 0, 0, 744, 722, 0, 748, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 736, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 727, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 749, 0, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 747, 727, 746, 0, 0,
	742, 1269, 0, 0, 0, 744, 722, 0, 748, 0,
	0, 737, 1386, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 721, 0, 0, 0,
	0, 0, 736, 743, 0, 744, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 743, 0, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 0, 727, 746, 0, 0,
	742, 0, 0, 1225, 0, 0, 722, 0, 748, 0,
	0, 0, 0, 749, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 721, 746, 0, 0,
	0, 0, 736, 0, 0, 744, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 743, 0, 0, 0, 0, 1232, 0,
	1249, 1250, 1251, 1230, 0, 0, 727, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 749, 0, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 747, 0, 746, 0, 0,
	742, 0, 1246, 0, 0, 744, 722, 0, 748, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 0, 0,
	1232, 0, 1249, 1250, 1251, 0, 721, 0, 0, 0,
	0, 0, 736, 743, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1237, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 1253, 1246, 0, 738, 0, 720, 0,
	739, 740, 741, 0, 0, 1252, 727, 746, 0, 0,
	742, 0, 0, 0, 0, 0, 722, 0, 748, 0,
	0, 1247, 0, 749, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 721, 0, 1237, 0,
	0, 0, 736, 0, 0, 744, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 743, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 1247, 0, 0, 727, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 749, 0, 0, 738, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 746, 0, 0,
	0, 0, 0, 0, 0, 744, 0, 0, 0, 0,
	0, 737, 0, 0, 0, 0, 0, 0, 1248, 0,
	1243, 1244, 1245, 0, 1242, 1239, 1240, 1241, 1233, 1234,
	1235, 1236, 1238, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 0, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 0, 0, 0, 738, 936, 952, 927,
	944, 943, 0, 0, 929, 928, 0, 746, 0, 954,
	953, 0, 1243, 1244, 1245, 0, 1242, 1239, 1240, 1241,
	1233, 1234, 1235, 1236, 1238, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 949, 0,
	941, 940, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	733, 734, 735, 938, 732, 729, 730, 731, 723, 724,
	725, 726, 728, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 932, 933, 934,
	0, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 956, 0, 0, 0, 0, 0, 930,
	0, 0, 950, 951, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 955,
}
var sqlPact = [...]int{

	2199, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 849, -1000, -1000, -1000, 741, 676, 300, 1387, 1387,
	15109, -1000, -1000, 17815, 1876, 451, 456, 451, 451, 450,
	15109, 512, 794, 104, -1000, 790, 25, 17569, 13879, 1224,
	20, 13387, 307, 2199, 13633, 13879, 17323, 1090, 979, 978,
	13387, 17077, 16831, 16585, -1000, 9103, -1000, -1000, -1000, -1000,
	816, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 812, -1000, 13879, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16339, 16093, 811, -1000,
	-1000, 508, 367, 1238, -1000, 38, -1000, -1000, -1000, 1087,
	-1000, 809, 1086, 1084, 1078, 1077, 366, 815, -1000, 463,
	811, -1000, 811, -1000, -1000, -1000, 501, 15109, -1000, 13387,
	-1000, 15847, 1009, 15601, -1000, 790, -1000, -1000, -1000, 911,
	1218, 1218, 1218, 1239, 127, 124, 104, 0, 13879, -1000,
	310, 0, 6253, 6253, -1000, -1000, 307, -1000, 338, 11655,
	28, -1000, 6769, -1000, 704, 1131, 619, 616, 1130, -99,
	13387, 13879, 13879, 540, 15355, -1000, 1128, 107, 1127, -1000,
	106, 1125, -1000, -14, -1000, -1000, -1000, -1000, -1000, -1000,
	307, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11911, 926, 11911, -1000, -1000, 1275,
	-1000, -1000, 16, 10, 950, 990, 9617, 9361, 1176, 1718,
	-1000, -1000, -1000, 35, 3915, 13879, 1095, 11911, 13879, 13879,
	13879, -1000, 13879, -1000, 948, -1000, 13879, -1000, 9, 8,
	-1000, 15109, -1000, 108, -1000, 299, 915, 14863, 1138, 908,
	-1000, 911, -1000, 742, 941, 7303, 8077, 104, -1000, -1000,
	104, 104, 8077, -1000, -1000, 13879, 0, 1269, 13879, 84,
	-1000, 19728, -1000, -1000, 8077, 8077, 8077, 8077, 8077, 670,
	-1000, -1000, -1000, 4687, -1000, -1000, 28, 298, 313, -1000,
	-1000, 296, 28, -1000, -1000, -1000, -1000, 295, 1379, 359,
	-1000, -1000, -1000, 8077, 371, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1094, 292, 290, -1000, -1000, -1000,
	-1000, 287, 281, 280, 274, 272, 266, 263, 258, 253,
	239, 236, 235, 225, 657, -1000, 394, -1000, -1000, 394,
	394, -1000, 199, 199, 202, -1000, -1000, -1000, 199, -1000,
	-1000, -1000, 360, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	224, 84, -1000, -1000, -1000, 13879, 28, -1000, -1000, -1000,
	8077, 3658, -19, -1000, 20298, -1000, -35, 748, -1000, 12895,
	1201, 1194, 1199, 13387, 490, 477, 13879, 13879, 384, 69,
	1268, 69, 11143, -1000, 13879, 13879, -1000, 13879, -1000, -1000,
	13879, -1000, 13879, 13879, 25, 12403, 476, -8, 12157, 13879,
	-1000, 33, -1000, -1000, 1070, 447, 642, 972, 804, -1000,
	-1000, -1000, -1000, -1, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1320, -1000, -1000, -1000, -1000, 1357,
	-1, -1000, -1000, -1000, -1000, -1000, 1377, -1000, -1000, -1000,
	-1000, 3915, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13879, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 642, 972, -1000, -1000,
	13387, 12649, 1118, 806, 889, -1000, -1000, 351, 1117, -1000,
	-1000, -1000, -1000, 20298, -1000, 20298, 569, 1002, -1000, 1002,
	-5, -1000, 19568, -1000, 217, -20, -1000, 384, 6253, 10887,
	20546, 13879, 509, 8077, 8077, 8077, 8077, 8077, 8077, 8077,
	8077, 8077, 8077, 8077, 8077, 8077, 8077, 8077, 8077, 8077,
	8077, 8077, 8077, 8077, 8077, 902, 475, 1001, 774, 189,
	3915, -1000, 1309, 1309, 1309, 3031, 3031, 209, 7, 19234,
	-6, 28, -1000, -1000, 5977, 5719, 28, 4171, -1000, 625,
	1352, 392, 20298, 1101, 1025, 214, 123, 120, 8077, 884,
	8077, 8335, 8077, 8077, 4945, 8077, 8077, 8077, 8077, 8077,
	8077, -1000, 213, -1000, -1000, -1000, -1000, 1350, -1000, -1000,
	1346, -1000, 506, 505, 1343, 384, 118, -1000, 2213, -1000,
	-1000, 6769, -1000, 655, 13879, 13879, 13879, -1000, -1000, 882,
	14617, -1000, 20546, 13879, -1000, 210, 205, 962, 961, 13879,
	13879, 14371, 14125, 13879, 700, 13879, 13879, 608, -1000, 576,
	8077, 611, -1000, 10375, 398, 13879, 598, 78, -1000, -1000,
	-1000, 349, 13879, -1000, -1000, -1000, 107, -1000, 106, -1000,
	-1000, 13879, 12157, -8, -16, -1000, -1000, 13879, 972, -1000,
	-1000, -1000, 653, -1000, 626, -1000, 9873, -1000, -1000, -1000,
	625, -1000, -49, -1000, -1000, -1000, -1000, 116, -29, -1000,
	-1000, -1000, -1000, -1000, 13879, 268, 204, 13879, 13879, 1115,
	1376, 13879, -1000, -1000, -1000, 8077, -1000, -1000, -1000, 25,
	13879, -1000, 1023, -1000, -30, 1862, -101, 13141, -1000, 10119,
	-1000, 1288, -1000, -1000, -1000, -1000, 80, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 202, 657,
	199, 199, 199, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	360, -1000, 394, 394, 394, -1000, -1000, -1000, 365, 751,
	751, 1254, 1254, 1254, 1254, 2509, 2509, 237, 602, 203,
	203, 203, 1643, 740, 740, 203, 203, 203, 3031, 20378,
	2526, 8077, 474, 708, 189, 8077, -1000, 1014, -1000, -1000,
	-1000, 1060, 188, 8335, 8335, -1000, -1000, -1000, 4687, -1000,
	-1000, 187, 8077, -1000, 8077, -48, -55, -1000, 20298, -1000,
	-21, -1000, -1000, -27, 8077, 8077, 8077, 115, -1000, 473,
	-1000, 471, 469, 467, -1000, 182, 114, 558, -1000, 8077,
	675, 179, 178, 8077, -1000, -1000, 20188, 113, 1057, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 112, 20108, 105, 20268,
	-1000, 8335, 8335, 8335, 4687, 177, 101, 19545, -118, 19998,
	7027, 7027, 7027, 98, 20028, 8077, -118, 2675, 2648, 2485,
	-25, -31, -38, 1339, -39, 96, 363, 357, 94, 1023,
	-1000, -1000, 8077, -1000, -1000, -1000, 466, 465, 1114, -1000,
	851, -1000, 650, 8077, 13879, 174, 172, 660, -1000, 1112,
	735, 1111, 735, -1000, -35, 713, -1000, -1000, 462, -1000,
	6253, 20298, -1000, 590, 1205, -40, -1000, -1000, -1000, 6253,
	384, 11143, 6769, -44, -1000, -1000, -49, -1000, -49, -1000,
	-1000, -1000, -1000, -1000, -1000, 13879, -1000, 12649, 171, 13879,
	13879, 170, 167, 13879, -1000, 1138, -1000, 92, -1000, -1000,
	-1000, -1000, -1000, 1019, 1235, 10887, 970, 968, 10887, 1439,
	724, 724, 724, -1000, 13141, 3388, -1000, -1000, 13879, 166,
	10631, 83, 1862, 329, 327, -1000, 1337, 8077, 2526, 8077,
	8335, 8335, -1000, 2526, -1000, -1000, -1000, -1000, 1055, 165,
	8077, 20546, 19340, 3059, -51, 5461, -61, 18969, 8077, -1000,
	-1000, 313, -1000, 82, 6511, -1000, 19838, -7, -7, -1000,
	925, 819, 604, 547, 1334, 1363, 1135, -1000, 8077, 19918,
	-1000, 11399, 386, 730, 18942, 20546, -1000, 8077, -1000, 1049,
	8077, -1000, 20546, 8335, 8335, 8335, 8335, 8335, 8335, 8335,
	8335, 8335, 8335, 8335, 8335, 8335, 8335, 8335, 8335, 8335,
	8335, 8335, 985, 8335, 1307, 1307, 1307, -73, 5203, -1000,
	1051, 1049, 8077, 8077, 20546, 74, 73, 71, -1000, 8077,
	-118, 8077, 8077, 8077, -1000, -1000, -1000, 63, -1000, 1322,
	-1000, -1000, -1000, -1000, 1019, 19253, 13879, 13879, 13879, 1110,
	738, -1000, 18923, -59, 13879, 13879, -1000, 1048, 1054, 438,
	13879, -1000, 13879, -1000, 13879, 13879, 13879, 13879, -94, 6253,
	181, 25, 13879, -94, 576, -1000, -1000, 218, -1000, -1000,
	8847, 163, -63, -1000, -1000, 12649, 8847, 803, -1000, -1000,
	377, 8077, 8077, 1862, 10887, 10887, 1861, 967, 10887, -1000,
	-1000, -1000, -1000, -1000, -1000, 975, 162, 13879, 13141, 429,
	1317, 62, 1261, 2526, 2996, 2046, 8077, 20546, 19649, -64,
	-1000, 8077, 8077, -1000, -65, -1000, 8077, -1000, 20298, -1000,
	1362, 8077, 61, 57, 54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 52, -1000, -1000, 20298, 8077, -1000, -1000, 18061,
	8077, 51, -1000, 49, 20298, 1051, 20298, -1000, 768, 768,
	1307, 1307, 1307, 1307, 485, 485, 905, 783, 152, 152,
	152, 442, 454, 454, 152, 152, 152, 1047, 898, 155,
	846, 8077, -69, -1000, -1000, -1000, 20298, 20298, 48, -1000,
	-1000, -1000, -118, 2325, 18658, 18631, -1000, 47, 377, -1000,
	-1000, -1000, -1000, 13879, -1000, 13879, -1000, 13879, 866, -1000,
	-1000, 957, 154, 8335, 13879, -1000, 685, -71, -75, 862,
	-1000, 832, 8077, -1000, 20546, 735, 735, -1000, 460, 459,
	-1000, -94, 1147, 13879, 1192, -1000, -1000, -1000, 153, -76,
	-1000, 291, 1220, 8077, -1000, -1000, 149, 8847, 1255, 13879,
	46, -81, 13879, -1000, 13879, 20298, -118, -1000, 1861, -1000,
	138, 8077, 10887, -1000, -143, -1000, 122, -1000, 13879, -85,
	-1000, -1000, 238, 109, -1000, 8077, 8077, 19649, -86, -1000,
	20546, 2526, 2526, -1000, 18612, -1000, 19838, -1000, -1000, -1000,
	-1000, 20298, 666, -1000, 18347, -1000, -1000, -1000, 8335, 1031,
	136, 20546, 18320, -1000, -1000, 8077, -1000, -1000, -1000, -1000,
	-1000, 1244, -1000, -1000, -1000, 8077, 846, 135, -1000, 134,
	-1000, -1000, -1000, 605, -1000, -1000, 20298, 1221, -1000, -1000,
	13879, 13879, 498, -87, 13879, -1000, -1000, 4429, 685, 8847,
	1213, 28, 13879, 1213, 18301, 4171, -105, 13879, -1000, -1000,
	685, 131, -106, -1000, 1250, -1000, 13879, 20298, -1000, 975,
	-1000, 3915, -107, -1000, -1000, -1000, 2526, 2526, -1000, -1000,
	-1000, 43, 730, 1229, -1000, 20330, 8335, 20546, -109, -1000,
	2950, -1000, 2838, 934, 13879, 13879, 13879, 403, 13879, -1000,
	-1000, 537, -1000, 384, -1000, -1000, -1000, -1000, -1000, -1000,
	1220, -27, 685, -1000, -1000, 8847, 13879, 129, -113, -1000,
	-1000, -1000, -1000, 583, 8077, 20330, -119, -1000, -1000, -1000,
	743, 825, 41, -125, 81, -1000, 8077, -1000, 11143, -1000,
	1213, 40, -1000, -129, -1000, -1000, -1000, 27, 7819, 7819,
	-118, -1000, -1000, 784, 770, 571, -1000, -1000, -1000, -1000,
	-1000, 934, 13879, 20298, -103, -1000, -1000, 685, -1000, -1000,
	-1000, 8591, 891, 566, 19280, -1000, -1000, 1155, -1000, 415,
	947, 947, 743, -131, -1000, -1000, 1293, -1000, -1000, -1000,
	-1000, -1000, -1000, 1300, -1000, -1000, 951, -1000, -1000, -1000,
	7561, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1616, 1615, 1256, 1614, 1611, 1610, 1609, 1608, 91,
	1607, 1606, 112, 1603, 90, 1600, 1598, 1595, 1592, 75,
	1590, 1586, 1585, 1584, 1581, 89, 35, 156, 1897, 124,
	1580, 1578, 1577, 10, 99, 95, 1573, 81, 51, 94,
	110, 539, 58, 1569, 1567, 131, 24, 25, 127, 104,
	135, 144, 114, 1566, 1565, 1564, 40, 1563, 1557, 1556,
	1555, 46, 18, 1554, 11, 1552, 26, 1551, 1550, 106,
	1549, 98, 113, 38, 126, 169, 1546, 42, 9, 70,
	1544, 54, 1542, 59, 69, 137, 1539, 43, 203, 47,
	33, 53, 1537, 1511, 1510, 1506, 85, 80, 65, 1505,
	1496, 77, 1494, 122, 129, 1491, 1489, 116, 1488, 1487,
	1479, 685, 1478, 1477, 619, 8, 36, 67, 14, 111,
	109, 23, 1476, 12, 1475, 1347, 565, 279, 1473, 37,
	30, 79, 45, 60, 28, 1472, 107, 1471, 1469, 1467,
	1464, 1458, 74, 1456, 68, 130, 39, 50, 96, 21,
	44, 73, 86, 105, 136, 108, 1454, 123, 1453, 32,
	1452, 1451, 675, 78, 1449, 1447, 1443, 659, 658, 597,
	19, 1442, 1436, 519, 20, 1435, 1433, 83, 1431, 1429,
	133, 1427, 128, 22, 1425, 120, 1424, 93, 1422, 0,
	97, 72, 1421, 121, 71, 1419, 1418, 1417, 1416, 27,
	2, 6, 5, 3, 4, 16, 13, 1415, 1414, 125,
	87, 1413, 142, 1411, 1410, 29, 1406, 1404, 17, 1403,
	15, 1399, 7, 1, 1397, 132, 1395, 100, 1394, 1281,
	1393, 134, 1391, 1389, 1323, 76,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 35, 35, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 32, 32, 37, 37, 37, 36, 36, 31, 31,
	5, 5, 5, 9, 10, 10, 10, 10, 10, 10,
	74, 74, 73, 73, 76, 76, 11, 11, 12, 12,
	12, 12, 158, 158, 157, 13, 18, 225, 225, 225,
	229, 229, 230, 230, 231, 231, 231, 231, 231, 231,
	231, 227, 227, 21, 21, 21, 21, 111, 111, 113,
	113, 113, 113, 40, 110, 110, 110, 110, 112, 112,
	112, 112, 182, 180, 180, 187, 187, 187, 53, 53,
	53, 53, 53, 54, 54, 54, 179, 179, 179, 179,
	188, 188, 188, 188, 188, 188, 55, 55, 55, 186,
	186, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 181, 181, 226, 226, 228,
	228, 8, 8, 56, 56, 57, 57, 117, 117, 117,
	117, 116, 197, 197, 198, 198, 198, 199, 199, 199,
	199, 199, 199, 199, 195, 195, 196, 196, 193, 193,
	194, 194, 194, 194, 232, 232, 115, 115, 60, 60,
	202, 202, 202, 202, 200, 200, 200, 200, 200, 203,
	201, 204, 204, 204, 204, 204, 145, 145, 145, 24,
	7, 7, 100, 100, 64, 64, 149, 149, 149, 65,
	65, 150, 47, 47, 33, 33, 33, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 101, 101, 102, 102,
	16, 20, 23, 23, 23, 23, 23, 234, 234, 44,
	44, 44, 44, 45, 45, 114, 114, 114, 114, 114,
	39, 6, 6, 38, 38, 14, 14, 14, 14, 14,
	50, 50, 107, 107, 107, 109, 109, 108, 108, 108,
	87, 87, 25, 78, 78, 79, 79, 156, 80, 80,
	19, 19, 28, 28, 26, 26, 26, 26, 26, 26,
	27, 27, 29, 29, 29, 29, 29, 29, 29, 210,
	210, 210, 212, 212, 209, 15, 15, 15, 15, 211,
	211, 233, 233, 88, 88, 88, 59, 58, 58, 62,
	62, 61, 63, 63, 148, 85, 85, 85, 85, 103,
	104, 104, 105, 105, 106, 106, 84, 84, 132, 132,
	30, 30, 69, 69, 70, 70, 123, 123, 124, 124,
	122, 122, 122, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 146, 146, 146, 146, 147, 147, 91,
	91, 91, 91, 89, 89, 90, 90, 153, 153, 153,
	153, 86, 86, 154, 154, 154, 118, 118, 159, 159,
	159, 68, 68, 68, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 161, 161, 161, 161, 163,
	163, 163, 162, 162, 162, 162, 162, 162, 162, 162,
	162, 162, 162, 162, 162, 164, 164, 171, 171, 172,
	172, 173, 174, 165, 165, 166, 166, 167, 168, 175,
	175, 175, 175, 177, 177, 169, 169, 169, 169, 169,
	170, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 98, 98, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	205, 205, 205, 205, 205, 205, 205, 207, 207, 208,
	208, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 213, 213, 214, 214,
	215, 215, 216, 216, 218, 219, 219, 219, 220, 224,
	224, 217, 217, 221, 221, 221, 222, 222, 223, 223,
	223, 223, 223, 136, 136, 136, 137, 137, 138, 75,
	75, 134, 134, 133, 133, 133, 135, 135, 92, 176,
	176, 176, 176, 176, 176, 176, 93, 93, 99, 94,
	94, 95, 95, 95, 95, 95, 95, 129, 130, 96,
	96, 96, 131, 131, 139, 143, 143, 142, 141, 141,
	140, 140, 121, 121, 121, 121, 120, 119, 81, 81,
	235, 235, 144, 144, 82, 82, 83, 77, 77, 155,
	155, 155, 155, 71, 71, 52, 52, 72, 72, 48,
	48, 51, 49, 49, 49, 49, 66, 66, 67, 67,
	46, 46, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 178, 178, 178, 41, 41, 41, 42,
	42, 43, 43, 184, 184, 184, 185, 185, 185, 185,
	183, 183, 183, 183, 183, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 189, 189,
	189, 189, 189, 189, 189, 189, 189, 189, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
	191, 191, 191, 190, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 2, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 3, 1, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 3, 6, 3, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 3,
	3, 4, 3, 2, 4, 2, 0, 2, 0, 2,
	0, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 3, 2, 0, 3, 1, 2, 2, 1, 1,
	2, 4, 2, 5, 6, 7, 4, 6, 3, 1,
	4, 5, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	10, 13, 1, 0, 1, 3, 3, 3, 5, 1,
	3, 1, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 4, 7, 3, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 0, 8, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	1, 1, 8, 8, 1, 2, 4, 4, 4, 2,
	2, 3, 1, 3, 6, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 2, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 2, 0, 1, 3, 3, 1, 1, 3,
	2, 4, 0, 3, 2, 1, 4, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 4,
	5, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	3, 1, 3, 3, 3, 2, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 1, 3, 5, 2, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 2, 2, 1, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 3, 5,
	1, 1, 1, 1, 2, 2, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -9, -10, -11, -13,
	-14, -17, -18, -20, -19, -21, -22, -23, -16, -24,
	-25, 19, -6, -7, -8, -211, 83, 90, 105, 192,
	199, -26, -28, 207, 208, 29, 215, 52, 86, 194,
	189, 234, 58, -210, -29, -27, 279, 255, 261, 202,
	-30, 221, 248, 282, 221, 70, 116, 78, 120, 242,
	241, 70, 116, 221, -12, 279, -19, -14, -25, -9,
	-229, 18, -230, -231, 58, 83, 105, 202, 120, 78,
	241, -229, -45, 199, -41, 4, -189, -191, 16, 17,
	19, 28, 29, 33, 37, 40, 51, 52, 53, 55,
	57, 60, 61, 68, 69, 70, 71, 73, 78, 82,
	83, 85, 90, 93, 95, 96, 99, 101, 106, 111,
	112, 117, 120, 128, 130, 131, 136, 139, 142, 144,
	145, 146, 147, 148, 150, 151, 153, 155, 152, 158,
	160, 161, 167, 170, 173, 174, 177, 180, 181, 182,
	184, 185, 189, 187, 188, 190, 192, 194, 195, 197,
	200, 201, 204, 205, 207, 208, 210, 212, 214, 215,
	218, 216, 222, 223, 230, 234, 235, 236, 237, 240,
	241, 242, 245, 246, 247, 251, 256, 257, 258, 259,
	30, 31, 32, 34, 35, 38, 39, 43, 44, 45,
	47, 72, 74, 75, 89, 91, 97, 107, 109, 113,
	114, 121, 122, 123, 125, 134, 157, 159, 168, 172,
	176, 178, 183, 196, 203, 211, 217, 219, 225, 226,
	227, 231, 232, 248, 249, -111, 139, 205, 230, -112,
	-110, -182, 225, 148, -73, -41, 199, 4, 70, 51,
	71, 106, 116, 117, 131, 222, 225, 230, 18, 58,
	-234, 230, 230, -234, -234, -44, 230, 228, -45, -233,
	221, 221, -100, 70, 239, -27, -29, -28, -61, -62,
	238, 124, 88, 166, -26, -28, -210, -212, 184, -209,
	-41, -212, -58, -59, 18, 80, 283, -153, -48, 164,
	-41, -83, 279, -3, -153, 113, -41, -51, 113, -48,
	103, 126, 126, -154, -153, -41, 113, -52, 113, -51,
	-74, 113, -73, -158, -157, -185, 4, -189, -191, -190,
	248, 49, 59, 104, 119, 127, 129, 135, 137, 149,
	169, 171, 193, 209, 163, 283, 163, -41, -111, 45,
	-111, -113, -39, -40, 128, 180, 228, 264, 103, 259,
	-55, 5, 76, -76, 281, 103, -226, 163, 103, 103,
	103, -181, 103, 259, 128, 180, 221, -114, -39, -40,
	-114, 228, -45, -86, -153, -73, 113, 116, -41, 113,
	-61, -62, -85, -103, -104, 138, 162, -88, 18, 80,
	-88, -88, 37, 280, 280, 283, -212, -67, 279, -77,
	-155, -125, 272, -127, 270, 271, 276, 154, 260, -136,
	-48, -128, 9, 279, -139, -207, -28, 89, 24, -137,
	-138, 196, -41, 7, 8, 5, 6, -46, -161, -170,
	233, 92, 156, 41, -205, -206, 4, -189, -184, -162,
	-172, -166, -169, 125, 49, 63, 66, 64, 67, 206,
	243, 42, 91, 172, 176, 219, 231, 232, 113, 157,
	114, 47, 107, 134, 82, 31, 32, 34, 35, 43,
	44, 72, 74, 75, 97, 121, 122, 123, 159, 183,
	211, 217, 226, 227, 249, -190, -173, -174, -167, -168,
	-175, -77, -83, 272, -48, 279, -81, -121, -120, -119,
	277, 281, -82, -144, -125, 76, -35, 187, -34, 17,
	19, 83, 246, 89, 187, 187, 89, 284, -154, -50,
	-48, -50, 207, -41, 25, 89, -37, 283, 40, 190,
	89, -37, 283, 89, 280, 283, -225, -72, 221, 70,
	-49, -41, 272, -231, -225, 25, 283, 283, 136, -54,
	142, 153, 111, -180, 76, -187, -179, -145, 9, 233,
	92, 163, -186, 8, 271, -178, -185, 5, 7, 270,
	-180, 76, 61, -188, 5, 4, -170, -145, 76, 139,
	125, 281, -183, 4, -189, -191, -190, -192, 18, 20,
	21, 22, 23, 24, 25, 26, 27, 36, 41, 42,
	46, 48, 50, 56, 58, 62, 63, 64, 65, 66,
	67, 76, 77, 79, 80, 81, 84, 86, 88, 92,
	94, 100, 102, 103, 105, 108, 110, 115, 116, 118,
	124, 126, 132, 133, 138, 140, 141, 154, 156, 162,
	163, 164, 165, 166, 175, 179, 186, 191, 202, 206,
	213, 220, 221, 224, 228, 229, 233, 238, 239, 243,
	244, 250, 252, 253, 254, 255, -182, -228, 100, -225,
	-182, -182, -182, -182, 136, -182, 283, 283, -45, -37,
	283, 279, 154, -42, 113, -41, -38, 85, 154, -85,
	-104, -103, -105, -125, 18, -125, -127, -27, -27, -27,
	-63, -148, -125, -209, 25, -66, -41, -69, 283, 103,
	10, 48, 28, 270, 271, 272, 273, 98, 274, 267,
	268, 269, 266, 262, 263, 264, 54, 143, 198, 12,
	13, 14, 22, 165, 137, 260, 209, 127, 30, 115,
	25, 4, -125, -125, -125, -125, -125, 171, -28, -125,
	-75, -81, -28, -133, 277, 279, -81, 279, 5, 5,
	279, -140, -125, -213, 256, 100, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 178, -177, 251, -177, -177, -163, 279, -163, -164,
	279, -163, 257, 261, 279, -69, -48, -121, -125, -183,
	272, 283, 280, 283, 228, -101, 56, 50, -116, 113,
	50, -193, -41, 56, -194, 46, 239, 179, 102, -101,
	56, -101, 56, 56, -153, 228, 228, -51, -41, -118,
	253, -107, -19, 279, 76, 25, -107, -78, -79, -156,
	-80, -48, 279, -41, -41, -51, -52, -73, -74, -12,
	-157, 228, 283, -72, -66, -120, -119, 103, 230, -40,
	-39, -53, 182, 212, 188, 204, 283, 8, 7, 7,
	5, -183, -227, -41, -40, -39, -153, -56, -57, -117,
	-116, -195, -196, -193, 116, 239, 93, 89, 163, 154,
	264, 89, -106, 196, 197, 283, -33, 26, 79, 279,
	283, 280, -118, -155, -70, -151, -153, -28, -152, 279,
	-159, -160, -162, -171, -165, -169, -170, 33, 39, 38,
	223, 203, 121, 122, 123, 211, 31, 183, 97, 82,
	75, 74, 159, 35, 34, -173, -174, -167, -168, 72,
	226, 227, 32, 44, 43, 249, 217, -73, 225, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, -125, -125, -125, -125, -125, -125, -125, -125, -125,
	-125, 137, 209, 30, 115, 228, 156, 154, 233, 92,
	240, 80, 160, -235, 220, 27, -131, -28, 279, -183,
	-136, 196, 279, 280, 283, -75, -135, 278, -125, -133,
	-75, 280, 280, -75, 250, 18, 80, 272, -97, 258,
	146, 73, 112, 145, -98, 201, 7, -143, -142, 252,
	-214, 95, 108, 279, 280, 280, -125, -92, -176, 4,
	258, 146, 73, 112, 145, 201, -93, -125, -94, -126,
	-127, 270, 271, 276, 279, 196, -95, -125, -75, -125,
	36, 133, 229, -96, -125, 103, -75, -125, -125, -125,
	-75, -75, -75, 279, 7, 7, 225, 225, 7, -118,
	280, 278, 287, -144, -34, -48, -41, -41, 154, -116,
	113, -159, -41, 279, 279, 130, 130, -41, -41, 113,
	-41, 113, -41, -41, -35, 187, -41, -41, 187, -87,
	191, -125, -87, -109, 163, -71, -48, 248, -41, 191,
	-69, 283, 264, -71, -37, -37, -227, -49, -227, -39,
	237, 53, 182, -187, -97, 283, 280, 283, -42, 116,
	279, -73, -48, 89, 5, -41, -148, -15, -19, -14,
	-25, -9, -41, -84, 108, 283, 59, -91, 129, 149,
	104, 135, 193, 119, -122, 284, -147, -146, 25, -41,
	-28, -152, -151, -68, 24, -97, 279, 259, -125, 228,
	-235, 220, -131, -125, 156, 233, 92, 240, 80, 160,
	103, 279, -126, -126, -75, 279, -75, -125, 283, 278,
	278, 283, 280, -62, 283, -61, -125, -75, -75, 280,
	228, 228, 228, 228, 279, 280, -141, -142, 84, -125,
	-219, 170, 279, 279, -125, 25, 280, 103, 280, -99,
	175, 280, 10, 270, 271, 272, 273, 98, 274, 267,
	268, 269, 266, 262, 263, 264, 54, 143, 198, 12,
	13, 14, 127, 115, -126, -126, -126, -75, 279, 280,
	-129, -130, 103, 100, 25, -96, -96, -96, 280, 103,
	-75, 283, 283, 283, 280, 280, 280, 7, 280, 283,
	280, 259, 259, 280, -84, -125, 228, 228, 89, 154,
	-197, -194, -125, -66, 279, 279, -32, 83, 207, -102,
	89, -37, 89, -37, 228, -101, 56, 228, -77, 191,
	55, 280, 283, -77, -118, -79, -144, 280, -41, -117,
	279, -42, -65, -150, -41, 279, 279, -41, -38, 280,
	-132, 110, 37, -151, 129, 129, -151, -91, 129, -89,
	169, -89, -89, -147, -183, 285, -41, 279, 280, 277,
	277, 7, -125, -125, -126, -126, 103, 279, -125, -134,
	-159, 22, 22, 280, -75, 280, 283, 280, -125, -133,
	280, 250, -62, -62, -62, 146, 112, 145, -98, 145,
	-98, -98, 7, 5, 86, -125, 224, -220, -41, 279,
	253, -61, 280, -159, -125, -129, -125, -159, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, -126, -126, -126,
	-126, -126, -126, -126, -126, -126, -126, 80, 154, 160,
	-126, 283, -75, 280, -130, -129, -125, -125, -159, 280,
	280, 280, -75, -125, -125, -125, 280, 7, -132, 278,
	-41, -41, -116, 89, -198, 56, -199, 48, 154, 156,
	239, 179, 46, 76, 186, 280, 280, -66, -66, 154,
	76, 154, 76, 69, 235, -41, -41, -48, -41, -41,
	-41, -77, -108, 279, 163, -19, -48, -87, 264, -64,
	-149, -41, -208, 279, -205, -206, -46, 279, 280, 283,
	-56, -64, 163, -215, 254, -125, -75, -151, -151, -90,
	244, 163, 129, -151, -124, -123, 101, 152, 279, -66,
	-146, 278, 7, 7, 280, 22, 22, -125, -134, 280,
	283, -125, -125, 280, -125, 5, -125, 280, 280, 280,
	280, -125, -224, -41, -125, 280, 280, -130, 103, 80,
	160, 279, -125, 280, 280, 283, 280, 280, 280, -215,
	-116, -41, -73, 156, 130, 279, -126, -48, -115, -232,
	57, 218, 280, 280, 156, 156, -125, -159, -37, -37,
	228, 228, 81, -66, 56, -83, -28, 279, 280, 283,
	-47, -81, 48, -47, -125, 279, -64, 25, -150, 280,
	280, -48, -216, -218, -41, -90, 279, -125, -151, 283,
	286, 264, -66, 280, 278, 278, -125, -125, 280, -159,
	280, -62, -217, 174, 280, -126, 103, 279, -134, 280,
	-125, -199, -125, -43, 279, 279, 186, -36, 48, -41,
	-41, 241, 155, 280, -41, -115, -149, -33, -73, -33,
	280, -75, 280, -41, -115, 279, 283, 25, -66, -123,
	-183, 280, 280, -62, 37, -126, -134, 280, 280, 280,
	-202, 144, -41, -66, -48, -31, 244, -73, 207, -118,
	-47, -62, -115, -64, -218, -220, 280, -221, 181, 197,
	-75, 280, -200, -203, -201, 163, 104, 173, 210, 280,
	280, -60, 279, -125, -78, -33, 280, 280, 280, -222,
	-223, 30, 236, 61, -125, -222, -201, 163, -203, 163,
	241, 78, -202, -66, -118, -115, -223, 177, 99, 196,
	177, 99, -204, 151, 190, 40, 207, -204, -200, 280,
	22, 16, 156, 76, -223,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 0, 50, 51, 52, 0, 0, 330, 0, 0,
	0, 300, -2, 0, 0, 258, 0, 258, 258, 262,
	0, 332, 223, 329, -2, 340, 0, 0, 0, 338,
	314, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 68, 69, 70, 71,
	0, 80, 81, 82, 84, 85, 86, 87, 88, 89,
	90, 0, 251, 837, 264, 746, 747, 748, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 93, 804, 841, 852, 98,
	108, 0, 906, -2, 112, 62, 837, 141, 142, 0,
	144, 158, 0, 0, 0, 156, 0, 0, 153, 0,
	269, 257, 269, 254, 255, 256, 259, 0, 250, 0,
	331, 0, 0, 0, 222, -2, 310, 311, -2, 0,
	335, 335, 335, 0, 0, 311, 0, 319, 827, 322,
	729, 320, 0, 0, 337, 336, 0, 315, 397, 0,
	719, 360, 0, 2, 0, 887, 0, 0, 887, 0,
	0, 0, 0, 0, 403, 54, 887, 45, 887, 715,
	45, 887, 60, 0, 72, 74, 756, 757, 758, 759,
	911, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 0, 0, 0, 263, 94, 877,
	96, 97, 99, 100, 0, 0, 0, 0, 0, 0,
	111, 136, 137, 63, 0, 0, 160, 0, 0, 0,
	0, 149, 0, 150, 0, 152, 0, 252, 265, 266,
	253, 0, 261, 45, 401, 0, 887, 750, 274, 887,
	-2, 0, 306, 347, 348, 0, 0, 0, 333, 334,
	0, 0, 0, 302, 303, 0, 321, 0, 0, 363,
	707, 711, 712, 487, 0, 0, 0, 0, 0, 0,
	568, 569, 570, 0, 572, 573, 574, 882, 0, 578,
	579, 901, 719, 732, 733, 734, 735, 0, 0, 0,
	740, 741, 742, 691, 617, 588, -2, -2, 730, 425,
	426, 427, 428, -2, 913, 592, 594, 596, 597, 598,
	599, 0, 883, 897, 898, 905, 909, 910, 887, 894,
	888, 878, 885, 893, 786, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 755, 449, 450, 455, 456,
	458, 363, 361, 398, 399, 0, 720, 698, 692, 693,
	0, 0, 0, 704, 702, 703, 22, 247, 24, 0,
	247, 247, 0, 0, 0, 0, 0, 0, 407, 0,
	280, 0, 0, 404, 0, 0, 56, 0, 43, 44,
	0, 58, 0, 0, 330, 0, 0, 77, 0, 782,
	717, 722, 725, 83, 0, 0, 0, 0, 0, 103,
	123, 124, 125, 104, 106, 113, 115, 116, 117, 126,
	127, 128, 129, 216, 0, 218, 139, 140, 743, 0,
	105, 107, 109, 110, 130, 131, 0, 133, 134, 135,
	470, 0, 64, 760, 761, 762, 763, 764, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 143, 145, 0, 157,
	146, 147, 148, 155, 151, 154, 0, 0, 260, 219,
	0, 164, 0, 0, 887, 749, 271, 0, 0, 309,
	345, 346, 349, 352, 353, 350, 487, 316, 317, 318,
	341, 342, 236, 323, 0, 0, 726, 407, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 710, 491, 492, 493, 515, 516, 0, -2, 649,
	0, 575, 576, 577, 0, 0, -2, 0, 737, 484,
	0, 0, 690, 619, 0, 0, 0, 0, 0, 0,
	0, 670, 676, 0, 0, 0, 0, 0, 0, 0,
	0, 439, 452, 463, 460, 459, 441, 0, 440, 438,
	0, 442, 0, 0, 0, 407, 0, 699, 0, 696,
	697, 0, 706, 0, 0, 0, 0, 246, 26, 887,
	0, 36, 0, 0, 189, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 721, 291,
	0, 291, 282, 0, 0, 0, 278, 363, 293, 295,
	296, 0, 0, 405, 55, 716, 45, 61, 45, 67,
	73, 0, 0, 78, 79, 723, 724, 0, 0, 101,
	102, 270, 0, 120, 0, 122, 0, 217, 745, 744,
	484, 65, 159, 91, 267, 268, 402, 0, 163, 165,
	167, 168, 169, 170, 750, 0, 790, 0, 0, 0,
	0, 0, 351, 354, 355, 0, 344, 234, 235, 330,
	0, 728, 357, 708, 362, 364, 372, 388, 375, 0,
	488, 413, 414, 415, 416, 417, 484, 420, 421, 422,
	423, 424, 432, 433, 434, 435, 436, 437, 446, 0,
	431, 431, 431, 443, 444, 447, 448, 453, 454, 465,
	466, 468, 464, 464, 464, 461, 462, 489, 0, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, -2,
	-2, -2, 507, 508, 509, -2, -2, -2, 513, 514,
	-2, 0, 0, 701, 0, 0, 521, 0, 524, 526,
	528, 0, 0, 0, 0, 700, 538, 682, 0, 709,
	523, 0, 0, 571, 0, 0, 0, 655, 649, 656,
	0, -2, 580, 340, 0, 0, 0, 0, 738, 471,
	472, 473, 474, 475, 476, 485, 0, 689, 685, 0,
	627, 0, 0, 0, 593, 595, 0, 0, 0, 659,
	660, 661, 662, 663, 664, 665, 0, 0, 0, 0,
	540, 0, 0, 0, 0, 901, 0, 649, 675, 0,
	0, 0, 0, 0, 649, 0, 681, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	400, 694, 0, 705, 25, 238, 0, 0, 0, 28,
	887, 173, 0, 0, 0, 0, 0, 249, 37, 887,
	45, 887, 45, 38, 23, 247, 237, 240, 0, 53,
	0, 406, 275, 276, 0, 0, 713, 284, 281, 0,
	407, 0, 0, 0, 57, 59, 75, 718, 76, 95,
	118, 119, 121, 114, 132, 0, 161, 0, 0, 750,
	0, 0, 0, 0, 273, 274, 343, 0, 325, 326,
	327, 328, 727, 359, 0, 0, 0, 0, 0, 0,
	394, 394, 394, 392, 388, 0, 374, 387, 0, 386,
	-2, 375, 0, 408, 410, 418, 0, 0, -2, 0,
	0, 0, 539, -2, 522, 525, 527, 529, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 650, 0, 653,
	654, 0, -2, 0, 0, 339, 340, 340, 340, 586,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	587, 0, 0, 0, 0, 0, 601, 0, 602, 0,
	0, 603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 542, 543, 544, 0, 0, 604,
	673, 674, 0, 0, 0, 0, 0, 0, 609, 0,
	680, 0, 0, 0, 613, 614, 615, 0, 429, 0,
	445, 467, 469, 457, 359, 0, 0, 0, 0, 0,
	171, 188, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 34, 0, 40, 0, 0, 0, 0, 290, 0,
	289, 0, 0, 279, 291, 294, 297, 0, 92, 166,
	0, 0, 0, 229, 231, 164, 0, 0, 272, 324,
	621, 0, 0, 365, 0, 0, 0, 0, 0, 389,
	393, 390, 391, 373, 370, 0, 384, 0, 377, 0,
	0, 0, 490, -2, 0, 0, 0, 0, -2, 0,
	651, 0, 0, 683, 0, 644, 0, -2, 650, 657,
	581, 0, 0, 0, 0, 477, 478, 479, 480, 481,
	482, 483, 0, 739, 684, 688, 0, 625, 626, 630,
	0, 0, 591, 0, 658, 667, 668, 541, 545, 546,
	547, 548, 549, 550, 551, 552, 553, 554, -2, -2,
	-2, 558, 559, 560, -2, -2, -2, 0, 0, 0,
	669, 0, 0, 647, 671, 672, 677, 678, 0, 606,
	607, 608, 679, 0, 0, 0, 451, 0, 621, 695,
	242, 244, 27, 0, 172, 0, 175, 0, 0, 178,
	179, 0, 0, 0, 0, 190, 197, 0, 0, 0,
	42, 0, 0, 248, 0, 45, 45, 239, 0, 0,
	241, 277, 0, 0, 0, 283, 714, 292, 0, 0,
	224, 233, 233, 0, 589, 590, 0, 0, 186, 0,
	0, 0, 0, 312, 0, 358, 356, 378, 0, 380,
	0, 0, 0, 382, 0, 368, 0, 367, 0, 0,
	376, 411, 0, 0, 419, 0, 0, -2, 0, 532,
	0, -2, -2, 643, 650, 736, 340, 582, 584, 585,
	486, 687, 632, 629, 0, 616, 600, 666, 0, 0,
	0, 0, 650, 646, 605, 0, 611, 612, 430, 313,
	29, 0, 176, 177, 180, 0, 182, 752, 191, 0,
	194, 195, 192, 0, 31, 32, 41, 47, 33, 39,
	0, 0, 0, 0, 0, 298, 299, 0, 197, 0,
	236, 731, 0, 236, 0, 0, 0, 0, 230, 162,
	197, 0, 620, 622, 0, 379, 0, 396, 381, 0,
	371, 0, 0, 385, 412, 409, -2, -2, 533, 652,
	645, 0, 340, 0, 618, -2, 0, 0, 0, 648,
	0, 174, 0, 203, 0, 0, 0, 49, 0, 243,
	245, 0, 286, 407, 288, 184, 225, 226, 232, 227,
	233, 340, 197, 187, 220, 0, 0, 0, 0, 369,
	366, 383, 583, 635, 0, -2, 0, 566, 610, 181,
	208, 0, 0, 0, 199, 35, 0, 46, 0, 287,
	236, 0, 185, 0, 623, 624, 395, 0, 0, 0,
	631, 567, 183, 204, 205, 0, 200, 201, 202, 751,
	196, 203, 0, 48, 407, 228, 581, 197, 628, 633,
	636, -2, 855, 779, 0, 634, 206, 0, 207, 0,
	0, 0, 208, 0, 285, 221, 0, 638, 639, 640,
	641, 642, 209, 0, 212, 213, 0, 210, 193, 198,
	0, 211, 214, 215, 637,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 268, 3, 274, 269, 3,
	279, 280, 272, 270, 283, 271, 281, 273, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 287, 282,
	262, 264, 263, 3, 284, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 277, 3, 278, 267, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 285, 266, 286, 276,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 265,
	57605, 275, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:675
		{
			sqllex.(*scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:681
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:687
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 14:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:707
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:717
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 22:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.qname(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.qname(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:733
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:749
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:759
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str, Default: sqlDollar[4].union.expr()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:769
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: sqlDollar[3].str}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:773
		{
			unimplemented()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:776
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: sqlDollar[5].str}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        sqlDollar[3].str,
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:791
		{
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:800
		{
			unimplemented()
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:803
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   sqlDollar[5].str,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   sqlDollar[3].str,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:822
		{
			if containsSubquery(sqlDollar[3].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = nil
		}
	case 43:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = DropCascade
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = DropRestrict
		}
	case 45:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:844
		{
			sqlVAL.union.val = DropDefault
		}
	case 46:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:849
		{
			unimplementedWithIssue(2473)
		}
	case 47:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:850
		{
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:853
		{
			unimplemented()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:854
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:876
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.qnames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.qnames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = Indirection{NameIndirection(sqlDollar[2].str)}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), NameIndirection(sqlDollar[3].str))
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: NameList(sqlDollar[6].union.strs()), Targets: sqlDollar[4].union.targetList()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[1].union.qnames())}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = TargetList{Tables: QualifiedNames(sqlDollar[2].union.qnames())}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = TargetList{Databases: NameList(sqlDollar[2].union.strs())}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname(), Values: sqlDollar[3].union.exprs()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.qname()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			unimplemented()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1136
		{
			unimplemented()
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = Low
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = Normal
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = High
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1228
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{
			unimplemented()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			unimplemented()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1249
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.qname()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.strs()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.qname()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &ShowTables{Name: sqlDollar[3].union.qname()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.qname()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = (*QualifiedName)(nil)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1331
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = []string(nil)
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.qname(), IfNotExists: false, Defs: sqlDollar[5].union.tblDefs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.qname(), IfNotExists: true, Defs: sqlDollar[8].union.tblDefs()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{ /* unimplemented */
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 173:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = []ColumnQualification(nil)
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = sqlDollar[3].union.colQual()
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			unimplemented()
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1448
		{
			if containsSubquery(sqlDollar[2].union.expr()) {
				sqllex.Error("default expression contains a subquery")
				return 1
			}
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.qname(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.idxElems(),
				Storing: sqlDollar[6].union.strs(),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:    Name(sqlDollar[3].str),
					Columns: sqlDollar[5].union.idxElems(),
					Storing: sqlDollar[7].union.strs(),
				},
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &FamilyTableDef{
				Columns: sqlDollar[3].union.famElems(),
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[6].str),
				Columns: sqlDollar[3].union.famElems(),
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[3].union.strs()),
					Storing: sqlDollar[5].union.strs(),
				},
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.strs()),
				},
				PrimaryKey: true,
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1538
		{
			unimplemented()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = []string(nil)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = []string(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			unimplemented()
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			unimplemented()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			unimplemented()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1577
		{
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			unimplemented()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			unimplemented()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			unimplemented()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			unimplemented()
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1591
		{
			unimplemented()
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			unimplemented()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			unimplemented()
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			unimplemented()
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1599
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			unimplemented()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.qnames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &CreateIndex{
				Name:    Name(sqlDollar[4].str),
				Table:   sqlDollar[6].union.qname(),
				Unique:  sqlDollar[2].union.bool(),
				Columns: sqlDollar[8].union.idxElems(),
				Storing: sqlDollar[10].union.strs(),
			}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.qname(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.strs(),
			}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = true
		}
	case 223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = false
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			unimplemented()
		}
	case 228:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1677
		{
			unimplemented()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = FamilyElemList{sqlDollar[1].union.famElem()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.famElems(), sqlDollar[3].union.famElem())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = FamilyElem{Column: Name(sqlDollar[1].str)}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			unimplemented()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1697
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = Ascending
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = Descending
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.qname(), NewName: sqlDollar[6].union.qname(), IfExists: false}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.qname(), NewName: sqlDollar[8].union.qname(), IfExists: true}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.qname(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.qname(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = true
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = false
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1763
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1807
		{
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.str = ""
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.str = ""
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1880
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1901
		{
			unimplementedWithIssue(6637)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1908
		{
			unimplementedWithIssue(6637)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.qnames(), Rows: sqlDollar[4].union.slct()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &OnConflict{Columns: NameList(sqlDollar[3].union.strs()), DoNothing: true}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1950
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1954
		{
			unimplemented()
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = []string(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &UpdateExpr{Names: QualifiedNames{sqlDollar[1].union.qname()}, Expr: sqlDollar[3].union.expr()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2009
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.qnames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.tblExprs(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.tblExprs(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        TableExprs{&AliasedTableExpr{Expr: sqlDollar[2].union.qname()}},
				tableSelect: true,
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2182
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			unimplemented()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			unimplemented()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			unimplemented()
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2205
		{
			unimplemented()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			unimplemented()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2209
		{
			unimplemented()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			unimplemented()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2222
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = true
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = false
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = false
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2250
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 357:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = TableExprs(nil)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			unimplemented()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2521
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astNaturalJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: NameList(sqlDollar[4].union.strs())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.str = astFullJoin
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.str = astLeftJoin
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.str = astRightJoin
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.str = astInnerJoin
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2578
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2579
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: NameList(sqlDollar[3].union.strs())}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[2].union.qname()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = sqlDollar[3].union.qname()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.qname(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2669
		{
			unimplementedWithIssue(2115)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			unimplementedWithIssue(2115)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2673
		{
			unimplementedWithIssue(2115)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			unimplementedWithIssue(2115)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2675
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2683
		{
			unimplemented()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2731
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = nil
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2789
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2848
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newIntBitType(int(n))
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2875
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2941
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			unimplemented()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2947
		{
			unimplemented()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
			unimplemented()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2949
		{
			unimplemented()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			unimplemented()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2951
		{
			unimplemented()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			unimplemented()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			unimplemented()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2954
		{
			unimplemented()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2955
		{
			unimplemented()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2956
		{
			unimplemented()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2957
		{
			unimplemented()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			unimplemented()
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2959
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			unimplemented()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2963
		{
			unimplemented()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			unimplemented()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2991
		{
			unimplemented()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = sqlDollar[1].union.qname()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3374
		{
			unimplemented()
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3375
		{
			unimplemented()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.qname(), Exprs: Exprs{StarExpr()}}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3411
		{
			unimplemented()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3412
		{
			unimplemented()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			unimplemented()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			unimplemented()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3434
		{
			unimplemented()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			unimplemented()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			unimplemented()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "STRPOS"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3457
		{
			unimplemented()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "LTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "RTRIM"}, Exprs: sqlDollar[4].union.exprs()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: "BTRIM"}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &FuncExpr{Name: &QualifiedName{Base: Name(sqlDollar[1].str)}, Exprs: sqlDollar[3].union.exprs()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3501
		{
			unimplemented()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3502
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3505
		{
			unimplemented()
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			unimplemented()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3511
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3514
		{
			unimplemented()
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			unimplemented()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			unimplemented()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			unimplemented()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3522
		{
			unimplemented()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3523
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3527
		{
			unimplemented()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3538
		{
			unimplemented()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3539
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3543
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3552
		{
			unimplemented()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3553
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3556
		{
			unimplemented()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3557
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3563
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3564
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3567
		{
			unimplemented()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3785
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = sqlDollar[1].union.indirectElem()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &ArrayIndirection{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = NameIndirection(sqlDollar[2].str)
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = qualifiedStar
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = Indirection{sqlDollar[1].union.indirectElem()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = append(sqlDollar[1].union.indirect(), sqlDollar[2].union.indirectElem())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3893
		{
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3894
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = QualifiedNames{sqlDollar[1].union.qname()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.qnames(), sqlDollar[3].union.qname())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.qname(), Index: Name(sqlDollar[3].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: Indirection{sqlDollar[2].union.indirectElem()}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &QualifiedName{Indirect: Indirection{unqualifiedStar}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[2].union.strs()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4050
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &QualifiedName{Base: Name(sqlDollar[1].str), Indirect: sqlDollar[2].union.indirect()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4086
		{
			unimplemented()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = DNull
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.str = ""
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
